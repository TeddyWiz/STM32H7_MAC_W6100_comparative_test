
STM32H723_W6100_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012814  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  08012ae4  08012ae4  00022ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801309c  0801309c  0002309c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080130a4  080130a4  000230a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080130a8  080130a8  000230a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000011c  24000000  080130ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00015e0c  2400011c  080131c8  0003011c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24015f28  080131c8  00035f28  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003014a  2**0
                  CONTENTS, READONLY
 11 .debug_info   00027349  00000000  00000000  0003018d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004c62  00000000  00000000  000574d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001e90  00000000  00000000  0005c138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000017be  00000000  00000000  0005dfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003838a  00000000  00000000  0005f786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002734e  00000000  00000000  00097b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016408e  00000000  00000000  000bee5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000089bc  00000000  00000000  00222eec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000088  00000000  00000000  0022b8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400011c 	.word	0x2400011c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08012acc 	.word	0x08012acc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000120 	.word	0x24000120
 800030c:	08012acc 	.word	0x08012acc

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
	...

080006c4 <_write>:
		#endif /* __GNUC__*/
#endif

#ifdef True_STD
	int _write(int fd, char *str, int len)
	{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
		for(int i=0; i<len; i++)
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	e00b      	b.n	80006ee <_write+0x2a>
		{
			HAL_UART_Transmit(&huart3, (uint8_t *)&str[i], 1, 0xFFFF);
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	68ba      	ldr	r2, [r7, #8]
 80006da:	18d1      	adds	r1, r2, r3
 80006dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006e0:	2201      	movs	r2, #1
 80006e2:	4807      	ldr	r0, [pc, #28]	; (8000700 <_write+0x3c>)
 80006e4:	f008 ffe8 	bl	80096b8 <HAL_UART_Transmit>
		for(int i=0; i<len; i++)
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	3301      	adds	r3, #1
 80006ec:	617b      	str	r3, [r7, #20]
 80006ee:	697a      	ldr	r2, [r7, #20]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	dbef      	blt.n	80006d6 <_write+0x12>
		}
		return len;
 80006f6:	687b      	ldr	r3, [r7, #4]
	}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	240002b0 	.word	0x240002b0

08000704 <HAL_UART_RxCpltCallback>:
#endif

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
    */

     /*
       loop back received data
     */
     HAL_UART_Receive_IT(&huart3, &rxData, 1);
 800070c:	2201      	movs	r2, #1
 800070e:	4923      	ldr	r1, [pc, #140]	; (800079c <HAL_UART_RxCpltCallback+0x98>)
 8000710:	4823      	ldr	r0, [pc, #140]	; (80007a0 <HAL_UART_RxCpltCallback+0x9c>)
 8000712:	f009 f85f 	bl	80097d4 <HAL_UART_Receive_IT>
     if (rxData == '\n')
 8000716:	4b21      	ldr	r3, [pc, #132]	; (800079c <HAL_UART_RxCpltCallback+0x98>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b0a      	cmp	r3, #10
 800071c:	d11f      	bne.n	800075e <HAL_UART_RxCpltCallback+0x5a>
	 {
	   if (rx_buffer[rx_index - 1] == '\r')
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <HAL_UART_RxCpltCallback+0xa0>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	3b01      	subs	r3, #1
 8000724:	4a20      	ldr	r2, [pc, #128]	; (80007a8 <HAL_UART_RxCpltCallback+0xa4>)
 8000726:	5cd3      	ldrb	r3, [r2, r3]
 8000728:	2b0d      	cmp	r3, #13
 800072a:	d10d      	bne.n	8000748 <HAL_UART_RxCpltCallback+0x44>
	   {
		 rx_index--;
 800072c:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <HAL_UART_RxCpltCallback+0xa0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	3b01      	subs	r3, #1
 8000732:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <HAL_UART_RxCpltCallback+0xa0>)
 8000734:	6013      	str	r3, [r2, #0]
		 rx_flag = 1;
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <HAL_UART_RxCpltCallback+0xa8>)
 8000738:	2201      	movs	r2, #1
 800073a:	701a      	strb	r2, [r3, #0]
		 rx_buffer[rx_index] = 0;
 800073c:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <HAL_UART_RxCpltCallback+0xa0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <HAL_UART_RxCpltCallback+0xa4>)
 8000742:	2100      	movs	r1, #0
 8000744:	54d1      	strb	r1, [r2, r3]
 8000746:	e01d      	b.n	8000784 <HAL_UART_RxCpltCallback+0x80>
	   }
	   else
	   {
		 rx_index = 0;
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <HAL_UART_RxCpltCallback+0xa0>)
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
		 HAL_UART_Transmit(&huart3, "not support format\r\n", 20, 1000);
 800074e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000752:	2214      	movs	r2, #20
 8000754:	4916      	ldr	r1, [pc, #88]	; (80007b0 <HAL_UART_RxCpltCallback+0xac>)
 8000756:	4812      	ldr	r0, [pc, #72]	; (80007a0 <HAL_UART_RxCpltCallback+0x9c>)
 8000758:	f008 ffae 	bl	80096b8 <HAL_UART_Transmit>
 800075c:	e012      	b.n	8000784 <HAL_UART_RxCpltCallback+0x80>
	   }
	 }
	 else if (rxData == 0x08) // back space
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <HAL_UART_RxCpltCallback+0x98>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b08      	cmp	r3, #8
 8000764:	d105      	bne.n	8000772 <HAL_UART_RxCpltCallback+0x6e>
	 {
	   rx_index--;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <HAL_UART_RxCpltCallback+0xa0>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	3b01      	subs	r3, #1
 800076c:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <HAL_UART_RxCpltCallback+0xa0>)
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	e008      	b.n	8000784 <HAL_UART_RxCpltCallback+0x80>
	 }
	 else
	 {
	   rx_buffer[rx_index++] = rxData;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <HAL_UART_RxCpltCallback+0xa0>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	1c5a      	adds	r2, r3, #1
 8000778:	490a      	ldr	r1, [pc, #40]	; (80007a4 <HAL_UART_RxCpltCallback+0xa0>)
 800077a:	600a      	str	r2, [r1, #0]
 800077c:	4a07      	ldr	r2, [pc, #28]	; (800079c <HAL_UART_RxCpltCallback+0x98>)
 800077e:	7811      	ldrb	r1, [r2, #0]
 8000780:	4a09      	ldr	r2, [pc, #36]	; (80007a8 <HAL_UART_RxCpltCallback+0xa4>)
 8000782:	54d1      	strb	r1, [r2, r3]
	 }
     HAL_UART_Transmit(&huart3, &rxData, 1, 1000);
 8000784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000788:	2201      	movs	r2, #1
 800078a:	4904      	ldr	r1, [pc, #16]	; (800079c <HAL_UART_RxCpltCallback+0x98>)
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <HAL_UART_RxCpltCallback+0x9c>)
 800078e:	f008 ff93 	bl	80096b8 <HAL_UART_Transmit>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	2400434d 	.word	0x2400434d
 80007a0:	240002b0 	.word	0x240002b0
 80007a4:	24004b50 	.word	0x24004b50
 80007a8:	24004350 	.word	0x24004350
 80007ac:	24004b54 	.word	0x24004b54
 80007b0:	08012afc 	.word	0x08012afc

080007b4 <HAL_SPI_TxRxCpltCallback>:
void W6100CsEnable(void);
void W6100CsDisable(void);
#define W6100_CS_GPIO  1
#if 1
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	//printf("SPI DMA Complete\r\n");
	SPI_DMA_flag = 1;
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <HAL_SPI_TxRxCpltCallback+0x1c>)
 80007be:	2201      	movs	r2, #1
 80007c0:	701a      	strb	r2, [r3, #0]
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	2400434c 	.word	0x2400434c

080007d4 <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	SPI_DMA_flag = 1;
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <HAL_SPI_TxCpltCallback+0x1c>)
 80007de:	2201      	movs	r2, #1
 80007e0:	701a      	strb	r2, [r3, #0]
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	2400434c 	.word	0x2400434c

080007f4 <dma_write_data>:
#else
#define spi_delay_en 0
uint8_t temp_pbuf[16387]={0,}; //16384+3
uint8_t temp_pbuf1[16387]={0,};
uint8_t dma_write_data(uint32_t address, uint8_t *buff, uint16_t len)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	4613      	mov	r3, r2
 8000800:	80fb      	strh	r3, [r7, #6]
	temp_pbuf[0] = (uint8_t)((address & 0x00FF0000) >> 16);
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	0c1b      	lsrs	r3, r3, #16
 8000806:	b2da      	uxtb	r2, r3
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <dma_write_data+0x70>)
 800080a:	701a      	strb	r2, [r3, #0]
	temp_pbuf[1] = (uint8_t)((address & 0x0000FF00) >> 8);
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	0a1b      	lsrs	r3, r3, #8
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <dma_write_data+0x70>)
 8000814:	705a      	strb	r2, [r3, #1]
	temp_pbuf[2] = (uint8_t)((address & 0x000000ff)|(_W6100_SPI_WRITE_ ));
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	f043 0304 	orr.w	r3, r3, #4
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4b10      	ldr	r3, [pc, #64]	; (8000864 <dma_write_data+0x70>)
 8000822:	709a      	strb	r2, [r3, #2]
	memcpy(temp_pbuf+3, buff, len);
 8000824:	4810      	ldr	r0, [pc, #64]	; (8000868 <dma_write_data+0x74>)
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	461a      	mov	r2, r3
 800082a:	68b9      	ldr	r1, [r7, #8]
 800082c:	f011 fcee 	bl	801220c <memcpy>
	SPI_DMA_flag = 0;
	HAL_SPI_Transmit_DMA(&hspi1, temp_pbuf, len+3);  
	while(SPI_DMA_flag == 0);
#else
  #if W6100_CS_GPIO
  W6100CsEnable();
 8000830:	f000 fc10 	bl	8001054 <W6100CsEnable>
  #endif
#if 0
	HAL_SPI_Transmit(&hspi1, temp_pbuf, len+3, 0xFFFF);
#else
	SPI_DMA_flag = 0;
 8000834:	4b0d      	ldr	r3, [pc, #52]	; (800086c <dma_write_data+0x78>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(&hspi1, temp_pbuf, len+3);
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	3303      	adds	r3, #3
 800083e:	b29b      	uxth	r3, r3
 8000840:	461a      	mov	r2, r3
 8000842:	4908      	ldr	r1, [pc, #32]	; (8000864 <dma_write_data+0x70>)
 8000844:	480a      	ldr	r0, [pc, #40]	; (8000870 <dma_write_data+0x7c>)
 8000846:	f007 fd61 	bl	800830c <HAL_SPI_Transmit_DMA>
	while(SPI_DMA_flag == 0);
 800084a:	bf00      	nop
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <dma_write_data+0x78>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d0fb      	beq.n	800084c <dma_write_data+0x58>
#endif
  #if W6100_CS_GPIO
  W6100CsDisable();
 8000854:	f000 fc0a 	bl	800106c <W6100CsDisable>
  {
    temp_delay_dumi++;
  }
#endif
	//while (HAL_DMA_GetState(hspi1.hdmatx) == HAL_DMA_STATE_BUSY|| HAL_DMA_GetState(hspi1.hdmatx) == HAL_DMA_STATE_RESET);
	return 0;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	24004b58 	.word	0x24004b58
 8000868:	24004b5b 	.word	0x24004b5b
 800086c:	2400434c 	.word	0x2400434c
 8000870:	24000138 	.word	0x24000138

08000874 <dma_read_data>:
uint8_t dma_read_data(uint32_t address, uint8_t *buff, uint16_t len)
{	
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	4613      	mov	r3, r2
 8000880:	80fb      	strh	r3, [r7, #6]
  temp_pbuf[0] = (uint8_t)((address & 0x00FF0000) >> 16);
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	0c1b      	lsrs	r3, r3, #16
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <dma_read_data+0x70>)
 800088a:	701a      	strb	r2, [r3, #0]
	temp_pbuf[1] = (uint8_t)((address & 0x0000FF00) >> 8);
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	0a1b      	lsrs	r3, r3, #8
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <dma_read_data+0x70>)
 8000894:	705a      	strb	r2, [r3, #1]
	temp_pbuf[2] = (uint8_t)((address & 0x000000ff)|(_W6100_SPI_READ_ ));
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <dma_read_data+0x70>)
 800089c:	709a      	strb	r2, [r3, #2]
  for(temp_delay=0;temp_delay<10; temp_delay++)
  {
    temp_delay_dumi++;
  }
#endif
	SPI_DMA_flag = 0;
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <dma_read_data+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
  #if 0
	HAL_SPI_TransmitReceive_DMA(&hspi1,temp_pbuf, temp_pbuf1, len + 3);
	while(SPI_DMA_flag == 0);
  #else
  #if W6100_CS_GPIO
  W6100CsEnable();
 80008a4:	f000 fbd6 	bl	8001054 <W6100CsEnable>
  #endif
#if 0
  HAL_SPI_TransmitReceive(&hspi1,temp_pbuf, temp_pbuf1, len + 3, 0xffff);
#else
  SPI_DMA_flag = 0;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <dma_read_data+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive_DMA(&hspi1,temp_pbuf, temp_pbuf1, len + 3);
 80008ae:	88fb      	ldrh	r3, [r7, #6]
 80008b0:	3303      	adds	r3, #3
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	4a0d      	ldr	r2, [pc, #52]	; (80008ec <dma_read_data+0x78>)
 80008b6:	490b      	ldr	r1, [pc, #44]	; (80008e4 <dma_read_data+0x70>)
 80008b8:	480d      	ldr	r0, [pc, #52]	; (80008f0 <dma_read_data+0x7c>)
 80008ba:	f007 fe7b 	bl	80085b4 <HAL_SPI_TransmitReceive_DMA>
  	while(SPI_DMA_flag == 0);
 80008be:	bf00      	nop
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <dma_read_data+0x74>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d0fb      	beq.n	80008c0 <dma_read_data+0x4c>
#endif
  #if W6100_CS_GPIO
  W6100CsDisable();
 80008c8:	f000 fbd0 	bl	800106c <W6100CsDisable>
  #endif
  #endif
	//while (HAL_DMA_GetState(hspi1.hdmarx) == HAL_DMA_STATE_BUSY|| HAL_DMA_GetState(hspi1.hdmarx) == HAL_DMA_STATE_RESET);
	memcpy(buff,temp_pbuf1 + 3, len);
 80008cc:	4909      	ldr	r1, [pc, #36]	; (80008f4 <dma_read_data+0x80>)
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	461a      	mov	r2, r3
 80008d2:	68b8      	ldr	r0, [r7, #8]
 80008d4:	f011 fc9a 	bl	801220c <memcpy>
  for(temp_delay=0;temp_delay<10; temp_delay++)
  {
    temp_delay_dumi++;
  }
#endif
	return len;
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	b2db      	uxtb	r3, r3
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	24004b58 	.word	0x24004b58
 80008e8:	2400434c 	.word	0x2400434c
 80008ec:	24008b5c 	.word	0x24008b5c
 80008f0:	24000138 	.word	0x24000138
 80008f4:	24008b5f 	.word	0x24008b5f

080008f8 <check_break>:
#endif
void print_help_menu(void);
uint16_t CLI_Process(void);
uint8_t check_break(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
  uint16_t cmd_mode;
  if (rx_flag == 1)
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <check_break+0x30>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d10b      	bne.n	800091e <check_break+0x26>
  {
    rx_flag = 0;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <check_break+0x30>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
    cmd_mode=CLI_Process();
 800090c:	f000 fde8 	bl	80014e0 <CLI_Process>
 8000910:	4603      	mov	r3, r0
 8000912:	80fb      	strh	r3, [r7, #6]
    if(cmd_mode ==4)
 8000914:	88fb      	ldrh	r3, [r7, #6]
 8000916:	2b04      	cmp	r3, #4
 8000918:	d101      	bne.n	800091e <check_break+0x26>
      return 1;
 800091a:	2301      	movs	r3, #1
 800091c:	e000      	b.n	8000920 <check_break+0x28>
  }
  return 0;
 800091e:	2300      	movs	r3, #0
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	24004b54 	.word	0x24004b54

0800092c <TRACE_ON>:
{
  HAL_UART_Transmit(&huart3, (uint8_t *)"1\r\n", 3, 0xFFFF);
}
#if 1
void TRACE_ON(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trace_GPIO_Port, Trace_Pin, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000936:	4802      	ldr	r0, [pc, #8]	; (8000940 <TRACE_ON+0x14>)
 8000938:	f004 fbea 	bl	8005110 <HAL_GPIO_WritePin>
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	58020c00 	.word	0x58020c00

08000944 <TRACE_OFF>:
void TRACE_OFF(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trace_GPIO_Port, Trace_Pin, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800094e:	4802      	ldr	r0, [pc, #8]	; (8000958 <TRACE_OFF+0x14>)
 8000950:	f004 fbde 	bl	8005110 <HAL_GPIO_WritePin>
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	58020c00 	.word	0x58020c00

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint8_t temp_ver[2]={0,};
 8000962:	2300      	movs	r3, #0
 8000964:	81bb      	strh	r3, [r7, #12]
	PLL2_ClocksTypeDef PLL2_Clk_data;
	uint16_t temp_presc = 1, temp_presc_set, temp_presc_cnt = 0;
 8000966:	2301      	movs	r3, #1
 8000968:	82fb      	strh	r3, [r7, #22]
 800096a:	2300      	movs	r3, #0
 800096c:	82bb      	strh	r3, [r7, #20]
	int i = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000972:	f001 faa5 	bl	8001ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000976:	f000 f885 	bl	8000a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097a:	f000 f9bd 	bl	8000cf8 <MX_GPIO_Init>
  MX_DMA_Init();
 800097e:	f000 f993 	bl	8000ca8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000982:	f000 f8ef 	bl	8000b64 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000986:	f000 f943 	bl	8000c10 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rxData, 1);
 800098a:	2201      	movs	r2, #1
 800098c:	492e      	ldr	r1, [pc, #184]	; (8000a48 <main+0xec>)
 800098e:	482f      	ldr	r0, [pc, #188]	; (8000a4c <main+0xf0>)
 8000990:	f008 ff20 	bl	80097d4 <HAL_UART_Receive_IT>
  printf("< W6100 clock TEST!! >\r\n");
 8000994:	482e      	ldr	r0, [pc, #184]	; (8000a50 <main+0xf4>)
 8000996:	f011 fa67 	bl	8011e68 <puts>
  W6100CsDisable();
 800099a:	f000 fb67 	bl	800106c <W6100CsDisable>
  HAL_RCCEx_GetPLL2ClockFreq(&PLL2_Clk_data);
 800099e:	463b      	mov	r3, r7
 80009a0:	4618      	mov	r0, r3
 80009a2:	f006 fd67 	bl	8007474 <HAL_RCCEx_GetPLL2ClockFreq>
    printf("SET PLL2 P:%ld, Q:%ld, R:%ld \r\n", PLL2_Clk_data.PLL2_P_Frequency, PLL2_Clk_data.PLL2_Q_Frequency, PLL2_Clk_data.PLL2_R_Frequency);
 80009a6:	6839      	ldr	r1, [r7, #0]
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	4829      	ldr	r0, [pc, #164]	; (8000a54 <main+0xf8>)
 80009ae:	f011 f9f5 	bl	8011d9c <iprintf>
    temp_presc_set = (hspi1.Init.BaudRatePrescaler>>(4*7));
 80009b2:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <main+0xfc>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	0f1b      	lsrs	r3, r3, #28
 80009b8:	81fb      	strh	r3, [r7, #14]
    printf("pre = %d\r\n", temp_presc_set);
 80009ba:	89fb      	ldrh	r3, [r7, #14]
 80009bc:	4619      	mov	r1, r3
 80009be:	4827      	ldr	r0, [pc, #156]	; (8000a5c <main+0x100>)
 80009c0:	f011 f9ec 	bl	8011d9c <iprintf>
    for(temp_presc_cnt = 0; temp_presc_cnt < temp_presc_set; temp_presc_cnt++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	82bb      	strh	r3, [r7, #20]
 80009c8:	e005      	b.n	80009d6 <main+0x7a>
    {
    	temp_presc = temp_presc*2;
 80009ca:	8afb      	ldrh	r3, [r7, #22]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	82fb      	strh	r3, [r7, #22]
    for(temp_presc_cnt = 0; temp_presc_cnt < temp_presc_set; temp_presc_cnt++)
 80009d0:	8abb      	ldrh	r3, [r7, #20]
 80009d2:	3301      	adds	r3, #1
 80009d4:	82bb      	strh	r3, [r7, #20]
 80009d6:	8aba      	ldrh	r2, [r7, #20]
 80009d8:	89fb      	ldrh	r3, [r7, #14]
 80009da:	429a      	cmp	r2, r3
 80009dc:	d3f5      	bcc.n	80009ca <main+0x6e>
    }
    printf("SPI CLK %d Mhz \r\n", (int)(PLL2_Clk_data.PLL2_P_Frequency / (2*temp_presc) / 1000000));
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	8afa      	ldrh	r2, [r7, #22]
 80009e2:	0052      	lsls	r2, r2, #1
 80009e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80009e8:	4a1d      	ldr	r2, [pc, #116]	; (8000a60 <main+0x104>)
 80009ea:	fba2 2303 	umull	r2, r3, r2, r3
 80009ee:	0c9b      	lsrs	r3, r3, #18
 80009f0:	4619      	mov	r1, r3
 80009f2:	481c      	ldr	r0, [pc, #112]	; (8000a64 <main+0x108>)
 80009f4:	f011 f9d2 	bl	8011d9c <iprintf>
  W6100CsEnable();
 80009f8:	f000 fb2c 	bl	8001054 <W6100CsEnable>
	dma_read_data(0x000200, temp_ver, 2);
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	2202      	movs	r2, #2
 8000a02:	4619      	mov	r1, r3
 8000a04:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a08:	f7ff ff34 	bl	8000874 <dma_read_data>
  W6100CsDisable();
 8000a0c:	f000 fb2e 	bl	800106c <W6100CsDisable>
	printf("VER 0x%02X %02X\r\n", temp_ver[0], temp_ver[1]);
 8000a10:	7b3b      	ldrb	r3, [r7, #12]
 8000a12:	4619      	mov	r1, r3
 8000a14:	7b7b      	ldrb	r3, [r7, #13]
 8000a16:	461a      	mov	r2, r3
 8000a18:	4813      	ldr	r0, [pc, #76]	; (8000a68 <main+0x10c>)
 8000a1a:	f011 f9bf 	bl	8011d9c <iprintf>
#endif
    //TRACE_OFF();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a1e:	f00b fb6b 	bl	800c0f8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <main+0x110>)
 8000a24:	2100      	movs	r1, #0
 8000a26:	4812      	ldr	r0, [pc, #72]	; (8000a70 <main+0x114>)
 8000a28:	f00b fbb0 	bl	800c18c <osThreadNew>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4a11      	ldr	r2, [pc, #68]	; (8000a74 <main+0x118>)
 8000a30:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  W6100_TaskHandle = osThreadNew(Start_W6100_Task, NULL, &Wiz_attributes);
 8000a32:	4a11      	ldr	r2, [pc, #68]	; (8000a78 <main+0x11c>)
 8000a34:	2100      	movs	r1, #0
 8000a36:	4811      	ldr	r0, [pc, #68]	; (8000a7c <main+0x120>)
 8000a38:	f00b fba8 	bl	800c18c <osThreadNew>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	4a10      	ldr	r2, [pc, #64]	; (8000a80 <main+0x124>)
 8000a40:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a42:	f00b fb7d 	bl	800c140 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <main+0xea>
 8000a48:	2400434d 	.word	0x2400434d
 8000a4c:	240002b0 	.word	0x240002b0
 8000a50:	08012b18 	.word	0x08012b18
 8000a54:	08012b30 	.word	0x08012b30
 8000a58:	24000138 	.word	0x24000138
 8000a5c:	08012b50 	.word	0x08012b50
 8000a60:	431bde83 	.word	0x431bde83
 8000a64:	08012b5c 	.word	0x08012b5c
 8000a68:	08012b70 	.word	0x08012b70
 8000a6c:	08012fe0 	.word	0x08012fe0
 8000a70:	0800176d 	.word	0x0800176d
 8000a74:	24000344 	.word	0x24000344
 8000a78:	08013004 	.word	0x08013004
 8000a7c:	080015f1 	.word	0x080015f1
 8000a80:	24000348 	.word	0x24000348

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b09c      	sub	sp, #112	; 0x70
 8000a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	224c      	movs	r2, #76	; 0x4c
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f011 fac8 	bl	8012028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2220      	movs	r2, #32
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f011 fac2 	bl	8012028 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	f004 fb4d 	bl	8005144 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b2c      	ldr	r3, [pc, #176]	; (8000b60 <SystemClock_Config+0xdc>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	4a2b      	ldr	r2, [pc, #172]	; (8000b60 <SystemClock_Config+0xdc>)
 8000ab4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ab8:	6193      	str	r3, [r2, #24]
 8000aba:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <SystemClock_Config+0xdc>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ac6:	bf00      	nop
 8000ac8:	4b25      	ldr	r3, [pc, #148]	; (8000b60 <SystemClock_Config+0xdc>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ad4:	d1f8      	bne.n	8000ac8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000ad6:	2310      	movs	r3, #16
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000ada:	2380      	movs	r3, #128	; 0x80
 8000adc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8000ade:	2310      	movs	r3, #16
 8000ae0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000aea:	2302      	movs	r3, #2
 8000aec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000aee:	f240 1313 	movw	r3, #275	; 0x113
 8000af2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000af4:	2301      	movs	r3, #1
 8000af6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000af8:	2304      	movs	r3, #4
 8000afa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000afc:	2302      	movs	r3, #2
 8000afe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000b00:	2304      	movs	r3, #4
 8000b02:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b10:	4618      	mov	r0, r3
 8000b12:	f004 fb51 	bl	80051b8 <HAL_RCC_OscConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b1c:	f000 fe52 	bl	80017c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b20:	233f      	movs	r3, #63	; 0x3f
 8000b22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b24:	2303      	movs	r3, #3
 8000b26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b2c:	2308      	movs	r3, #8
 8000b2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b30:	2340      	movs	r3, #64	; 0x40
 8000b32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b34:	2340      	movs	r3, #64	; 0x40
 8000b36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b3c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b3e:	2340      	movs	r3, #64	; 0x40
 8000b40:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2103      	movs	r1, #3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f004 ff10 	bl	800596c <HAL_RCC_ClockConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b52:	f000 fe37 	bl	80017c4 <Error_Handler>
  }
}
 8000b56:	bf00      	nop
 8000b58:	3770      	adds	r7, #112	; 0x70
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	58024800 	.word	0x58024800

08000b64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b68:	4b27      	ldr	r3, [pc, #156]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000b6a:	4a28      	ldr	r2, [pc, #160]	; (8000c0c <MX_SPI1_Init+0xa8>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b6e:	4b26      	ldr	r3, [pc, #152]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000b70:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b76:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b7c:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000b7e:	2207      	movs	r2, #7
 8000b80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b82:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b88:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000b90:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b96:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000b98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bbc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bc4:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bf6:	f007 f849 	bl	8007c8c <HAL_SPI_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000c00:	f000 fde0 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	24000138 	.word	0x24000138
 8000c0c:	40013000 	.word	0x40013000

08000c10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c14:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c16:	4a23      	ldr	r2, [pc, #140]	; (8000ca4 <MX_USART3_UART_Init+0x94>)
 8000c18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c1a:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c22:	4b1f      	ldr	r3, [pc, #124]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c28:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c34:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c36:	220c      	movs	r2, #12
 8000c38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3a:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c58:	4811      	ldr	r0, [pc, #68]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c5a:	f008 fcdd 	bl	8009618 <HAL_UART_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c64:	f000 fdae 	bl	80017c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c68:	2100      	movs	r1, #0
 8000c6a:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c6c:	f00b f935 	bl	800beda <HAL_UARTEx_SetTxFifoThreshold>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c76:	f000 fda5 	bl	80017c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c7e:	f00b f96a 	bl	800bf56 <HAL_UARTEx_SetRxFifoThreshold>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c88:	f000 fd9c 	bl	80017c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c8e:	f00b f8eb 	bl	800be68 <HAL_UARTEx_DisableFifoMode>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c98:	f000 fd94 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	240002b0 	.word	0x240002b0
 8000ca4:	40004800 	.word	0x40004800

08000ca8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_DMA_Init+0x4c>)
 8000cb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cb4:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <MX_DMA_Init+0x4c>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <MX_DMA_Init+0x4c>)
 8000cc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2105      	movs	r1, #5
 8000cd0:	200b      	movs	r0, #11
 8000cd2:	f001 fa09 	bl	80020e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cd6:	200b      	movs	r0, #11
 8000cd8:	f001 fa20 	bl	800211c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2105      	movs	r1, #5
 8000ce0:	200c      	movs	r0, #12
 8000ce2:	f001 fa01 	bl	80020e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ce6:	200c      	movs	r0, #12
 8000ce8:	f001 fa18 	bl	800211c <HAL_NVIC_EnableIRQ>

}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	58024400 	.word	0x58024400

08000cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08c      	sub	sp, #48	; 0x30
 8000cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	4b8b      	ldr	r3, [pc, #556]	; (8000f3c <MX_GPIO_Init+0x244>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d14:	4a89      	ldr	r2, [pc, #548]	; (8000f3c <MX_GPIO_Init+0x244>)
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1e:	4b87      	ldr	r3, [pc, #540]	; (8000f3c <MX_GPIO_Init+0x244>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
 8000d2a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2c:	4b83      	ldr	r3, [pc, #524]	; (8000f3c <MX_GPIO_Init+0x244>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d32:	4a82      	ldr	r2, [pc, #520]	; (8000f3c <MX_GPIO_Init+0x244>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3c:	4b7f      	ldr	r3, [pc, #508]	; (8000f3c <MX_GPIO_Init+0x244>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	4b7c      	ldr	r3, [pc, #496]	; (8000f3c <MX_GPIO_Init+0x244>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d50:	4a7a      	ldr	r2, [pc, #488]	; (8000f3c <MX_GPIO_Init+0x244>)
 8000d52:	f043 0302 	orr.w	r3, r3, #2
 8000d56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d5a:	4b78      	ldr	r3, [pc, #480]	; (8000f3c <MX_GPIO_Init+0x244>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d60:	f003 0302 	and.w	r3, r3, #2
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d68:	4b74      	ldr	r3, [pc, #464]	; (8000f3c <MX_GPIO_Init+0x244>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6e:	4a73      	ldr	r2, [pc, #460]	; (8000f3c <MX_GPIO_Init+0x244>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d78:	4b70      	ldr	r3, [pc, #448]	; (8000f3c <MX_GPIO_Init+0x244>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d86:	4b6d      	ldr	r3, [pc, #436]	; (8000f3c <MX_GPIO_Init+0x244>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8c:	4a6b      	ldr	r2, [pc, #428]	; (8000f3c <MX_GPIO_Init+0x244>)
 8000d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d96:	4b69      	ldr	r3, [pc, #420]	; (8000f3c <MX_GPIO_Init+0x244>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000da4:	4b65      	ldr	r3, [pc, #404]	; (8000f3c <MX_GPIO_Init+0x244>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000daa:	4a64      	ldr	r2, [pc, #400]	; (8000f3c <MX_GPIO_Init+0x244>)
 8000dac:	f043 0310 	orr.w	r3, r3, #16
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db4:	4b61      	ldr	r3, [pc, #388]	; (8000f3c <MX_GPIO_Init+0x244>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	f003 0310 	and.w	r3, r3, #16
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f244 0101 	movw	r1, #16385	; 0x4001
 8000dc8:	485d      	ldr	r0, [pc, #372]	; (8000f40 <MX_GPIO_Init+0x248>)
 8000dca:	f004 f9a1 	bl	8005110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|W6100_CS_Pin|Trace_Pin, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8000dd4:	485b      	ldr	r0, [pc, #364]	; (8000f44 <MX_GPIO_Init+0x24c>)
 8000dd6:	f004 f99b 	bl	8005110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2102      	movs	r1, #2
 8000dde:	485a      	ldr	r0, [pc, #360]	; (8000f48 <MX_GPIO_Init+0x250>)
 8000de0:	f004 f996 	bl	8005110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000de4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	4854      	ldr	r0, [pc, #336]	; (8000f4c <MX_GPIO_Init+0x254>)
 8000dfa:	f003 ffe1 	bl	8004dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dfe:	2332      	movs	r3, #50	; 0x32
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e0e:	230b      	movs	r3, #11
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4619      	mov	r1, r3
 8000e18:	484c      	ldr	r0, [pc, #304]	; (8000f4c <MX_GPIO_Init+0x254>)
 8000e1a:	f003 ffd1 	bl	8004dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e1e:	2386      	movs	r3, #134	; 0x86
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e2e:	230b      	movs	r3, #11
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	4619      	mov	r1, r3
 8000e38:	4845      	ldr	r0, [pc, #276]	; (8000f50 <MX_GPIO_Init+0x258>)
 8000e3a:	f003 ffc1 	bl	8004dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000e3e:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	4619      	mov	r1, r3
 8000e56:	483a      	ldr	r0, [pc, #232]	; (8000f40 <MX_GPIO_Init+0x248>)
 8000e58:	f003 ffb2 	bl	8004dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e6e:	230b      	movs	r3, #11
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	4619      	mov	r1, r3
 8000e78:	4831      	ldr	r0, [pc, #196]	; (8000f40 <MX_GPIO_Init+0x248>)
 8000e7a:	f003 ffa1 	bl	8004dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	482b      	ldr	r0, [pc, #172]	; (8000f44 <MX_GPIO_Init+0x24c>)
 8000e98:	f003 ff92 	bl	8004dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : W6100_CS_Pin Trace_Pin */
  GPIO_InitStruct.Pin = W6100_CS_Pin|Trace_Pin;
 8000e9c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4823      	ldr	r0, [pc, #140]	; (8000f44 <MX_GPIO_Init+0x24c>)
 8000eb6:	f003 ff83 	bl	8004dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ebe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4821      	ldr	r0, [pc, #132]	; (8000f54 <MX_GPIO_Init+0x25c>)
 8000ed0:	f003 ff76 	bl	8004dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000ee6:	230a      	movs	r3, #10
 8000ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4817      	ldr	r0, [pc, #92]	; (8000f50 <MX_GPIO_Init+0x258>)
 8000ef2:	f003 ff65 	bl	8004dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ef6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f08:	230b      	movs	r3, #11
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	4810      	ldr	r0, [pc, #64]	; (8000f54 <MX_GPIO_Init+0x25c>)
 8000f14:	f003 ff54 	bl	8004dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4806      	ldr	r0, [pc, #24]	; (8000f48 <MX_GPIO_Init+0x250>)
 8000f30:	f003 ff46 	bl	8004dc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f34:	bf00      	nop
 8000f36:	3730      	adds	r7, #48	; 0x30
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	58024400 	.word	0x58024400
 8000f40:	58020400 	.word	0x58020400
 8000f44:	58020c00 	.word	0x58020c00
 8000f48:	58021000 	.word	0x58021000
 8000f4c:	58020800 	.word	0x58020800
 8000f50:	58020000 	.word	0x58020000
 8000f54:	58021800 	.word	0x58021800

08000f58 <W6100SpiReadByte>:

/* USER CODE BEGIN 4 */

uint8_t W6100SpiReadByte(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af02      	add	r7, sp, #8

	uint8_t rx = 0, tx = 0xFF;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	71fb      	strb	r3, [r7, #7]
 8000f62:	23ff      	movs	r3, #255	; 0xff
 8000f64:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1, 10);
 8000f66:	1dfa      	adds	r2, r7, #7
 8000f68:	1db9      	adds	r1, r7, #6
 8000f6a:	230a      	movs	r3, #10
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <W6100SpiReadByte+0x28>)
 8000f72:	f006 ffaf 	bl	8007ed4 <HAL_SPI_TransmitReceive>
	//HAL_SPI_Receive(&hspi1, &rx, 1, 10);
	return rx;
 8000f76:	79fb      	ldrb	r3, [r7, #7]

}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	24000138 	.word	0x24000138

08000f84 <W6100SpiWriteByte>:

void W6100SpiWriteByte(uint8_t byte)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	SPI_I2S_ReceiveData(W6100_SPI);

#elif defined USE_HAL_DRIVER

	uint8_t rx;
	HAL_SPI_TransmitReceive(&hspi1, &byte, &rx, 1, 10);
 8000f8e:	f107 020f 	add.w	r2, r7, #15
 8000f92:	1df9      	adds	r1, r7, #7
 8000f94:	230a      	movs	r3, #10
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <W6100SpiWriteByte+0x24>)
 8000f9c:	f006 ff9a 	bl	8007ed4 <HAL_SPI_TransmitReceive>
#endif
    return 0;
 8000fa0:	bf00      	nop
}
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	24000138 	.word	0x24000138

08000fac <W6100SpiReadBurst>:
void W6100SpiReadBurst(uint8_t* buf, datasize_t len)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	f5ad 5d7a 	sub.w	sp, sp, #16000	; 0x3e80
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af02      	add	r7, sp, #8
 8000fb6:	f607 6388 	addw	r3, r7, #3720	; 0xe88
 8000fba:	f6a3 6384 	subw	r3, r3, #3716	; 0xe84
 8000fbe:	6018      	str	r0, [r3, #0]
 8000fc0:	460a      	mov	r2, r1
 8000fc2:	f607 6388 	addw	r3, r7, #3720	; 0xe88
 8000fc6:	f6a3 6386 	subw	r3, r3, #3718	; 0xe86
 8000fca:	801a      	strh	r2, [r3, #0]
	uint8_t tx[Send_data_size];
	HAL_SPI_TransmitReceive(&hspi1, tx, buf, len, 10);
 8000fcc:	f607 6388 	addw	r3, r7, #3720	; 0xe88
 8000fd0:	f6a3 6386 	subw	r3, r3, #3718	; 0xe86
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	f607 6288 	addw	r2, r7, #3720	; 0xe88
 8000fda:	f6a2 6284 	subw	r2, r2, #3716	; 0xe84
 8000fde:	f107 0108 	add.w	r1, r7, #8
 8000fe2:	200a      	movs	r0, #10
 8000fe4:	9000      	str	r0, [sp, #0]
 8000fe6:	6812      	ldr	r2, [r2, #0]
 8000fe8:	4804      	ldr	r0, [pc, #16]	; (8000ffc <W6100SpiReadBurst+0x50>)
 8000fea:	f006 ff73 	bl	8007ed4 <HAL_SPI_TransmitReceive>
	//HAL_SPI_Receive(&hspi1, buf, len, 10);
}
 8000fee:	bf00      	nop
 8000ff0:	f507 577a 	add.w	r7, r7, #16000	; 0x3e80
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	24000138 	.word	0x24000138

08001000 <W6100SpiWriteBurst>:
void W6100SpiWriteBurst(uint8_t* buf, datasize_t len)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	f5ad 5d7a 	sub.w	sp, sp, #16000	; 0x3e80
 8001006:	b084      	sub	sp, #16
 8001008:	af02      	add	r7, sp, #8
 800100a:	f607 6388 	addw	r3, r7, #3720	; 0xe88
 800100e:	f6a3 6384 	subw	r3, r3, #3716	; 0xe84
 8001012:	6018      	str	r0, [r3, #0]
 8001014:	460a      	mov	r2, r1
 8001016:	f607 6388 	addw	r3, r7, #3720	; 0xe88
 800101a:	f6a3 6386 	subw	r3, r3, #3718	; 0xe86
 800101e:	801a      	strh	r2, [r3, #0]
	uint8_t rx[Send_data_size];
	HAL_SPI_TransmitReceive(&hspi1, buf, rx, len, 10);
 8001020:	f607 6388 	addw	r3, r7, #3720	; 0xe88
 8001024:	f6a3 6386 	subw	r3, r3, #3718	; 0xe86
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	f107 0208 	add.w	r2, r7, #8
 800102e:	f607 6188 	addw	r1, r7, #3720	; 0xe88
 8001032:	f6a1 6184 	subw	r1, r1, #3716	; 0xe84
 8001036:	200a      	movs	r0, #10
 8001038:	9000      	str	r0, [sp, #0]
 800103a:	6809      	ldr	r1, [r1, #0]
 800103c:	4804      	ldr	r0, [pc, #16]	; (8001050 <W6100SpiWriteBurst+0x50>)
 800103e:	f006 ff49 	bl	8007ed4 <HAL_SPI_TransmitReceive>
}
 8001042:	bf00      	nop
 8001044:	f507 577a 	add.w	r7, r7, #16000	; 0x3e80
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	24000138 	.word	0x24000138

08001054 <W6100CsEnable>:
void W6100CsEnable(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W6100_CS_GPIO_Port, W6100_CS_Pin, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800105e:	4802      	ldr	r0, [pc, #8]	; (8001068 <W6100CsEnable+0x14>)
 8001060:	f004 f856 	bl	8005110 <HAL_GPIO_WritePin>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	58020c00 	.word	0x58020c00

0800106c <W6100CsDisable>:

void W6100CsDisable(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W6100_CS_GPIO_Port, W6100_CS_Pin, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001076:	4802      	ldr	r0, [pc, #8]	; (8001080 <W6100CsDisable+0x14>)
 8001078:	f004 f84a 	bl	8005110 <HAL_GPIO_WritePin>
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	58020c00 	.word	0x58020c00

08001084 <W6100Initialze>:

void W6100Initialze(void)
{
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b087      	sub	sp, #28
 8001088:	af00      	add	r7, sp, #0
	//W6100Reset();

#if _WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_
/* SPI method callback registration */
	#if defined SPI_DMA
	reg_wizchip_spi_cbfunc(W6100SpiReadByte, W6100SpiWriteByte, W6100SpiReadBurst, W6100SpiWriteBurst);
 800108a:	4b20      	ldr	r3, [pc, #128]	; (800110c <W6100Initialze+0x88>)
 800108c:	4a20      	ldr	r2, [pc, #128]	; (8001110 <W6100Initialze+0x8c>)
 800108e:	4921      	ldr	r1, [pc, #132]	; (8001114 <W6100Initialze+0x90>)
 8001090:	4821      	ldr	r0, [pc, #132]	; (8001118 <W6100Initialze+0x94>)
 8001092:	f00f fdfb 	bl	8010c8c <reg_wizchip_spi_cbfunc>
	#else
	reg_wizchip_spi_cbfunc(W6100SpiReadByte, W6100SpiWriteByte, 0, 0);
	#endif
	/* CS function register */
	reg_wizchip_cs_cbfunc(W6100CsEnable, W6100CsDisable);
 8001096:	4921      	ldr	r1, [pc, #132]	; (800111c <W6100Initialze+0x98>)
 8001098:	4821      	ldr	r0, [pc, #132]	; (8001120 <W6100Initialze+0x9c>)
 800109a:	f00f fdd1 	bl	8010c40 <reg_wizchip_cs_cbfunc>
	reg_wizchip_bus_cbfunc(W6100BusReadByte, W6100BusWriteByte, 0, 0);
	#endif
#endif
	uint8_t temp;
	//unsigned char W6100_AdrSet[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
	unsigned char W6100_AdrSet[2][8] = {{16, 0, 0, 0, 0, 0, 0, 0}, {16, 0, 0, 0, 0, 0, 0, 0}};
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <W6100Initialze+0xa0>)
 80010a0:	1d3c      	adds	r4, r7, #4
 80010a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	do
	{
		if (ctlwizchip(CW_GET_PHYLINK, (void *)&temp) == -1)
 80010a8:	f107 0317 	add.w	r3, r7, #23
 80010ac:	4619      	mov	r1, r3
 80010ae:	2017      	movs	r0, #23
 80010b0:	f00f fe32 	bl	8010d18 <ctlwizchip>
 80010b4:	4603      	mov	r3, r0
 80010b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ba:	d102      	bne.n	80010c2 <W6100Initialze+0x3e>
		{
			printf("Unknown PHY link status.\r\n");
 80010bc:	481a      	ldr	r0, [pc, #104]	; (8001128 <W6100Initialze+0xa4>)
 80010be:	f010 fed3 	bl	8011e68 <puts>
		}
	} while (temp == PHY_LINK_OFF);
 80010c2:	7dfb      	ldrb	r3, [r7, #23]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0ef      	beq.n	80010a8 <W6100Initialze+0x24>
	printf("PHY OK.\r\n");
 80010c8:	4818      	ldr	r0, [pc, #96]	; (800112c <W6100Initialze+0xa8>)
 80010ca:	f010 fecd 	bl	8011e68 <puts>

	temp = IK_DEST_UNREACH;
 80010ce:	2302      	movs	r3, #2
 80010d0:	75fb      	strb	r3, [r7, #23]

	if (ctlwizchip(CW_INIT_WIZCHIP, (void *)W6100_AdrSet) == -1)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	2004      	movs	r0, #4
 80010d8:	f00f fe1e 	bl	8010d18 <ctlwizchip>
 80010dc:	4603      	mov	r3, r0
 80010de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e2:	d102      	bne.n	80010ea <W6100Initialze+0x66>
	{
		printf("W6100 initialized fail.\r\n");
 80010e4:	4812      	ldr	r0, [pc, #72]	; (8001130 <W6100Initialze+0xac>)
 80010e6:	f010 febf 	bl	8011e68 <puts>
	}

	if (ctlwizchip(CW_SET_INTRMASK, &temp) == -1)
 80010ea:	f107 0317 	add.w	r3, r7, #23
 80010ee:	4619      	mov	r1, r3
 80010f0:	2007      	movs	r0, #7
 80010f2:	f00f fe11 	bl	8010d18 <ctlwizchip>
 80010f6:	4603      	mov	r3, r0
 80010f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fc:	d102      	bne.n	8001104 <W6100Initialze+0x80>
	{
		printf("W6100 interrupt\r\n");
 80010fe:	480d      	ldr	r0, [pc, #52]	; (8001134 <W6100Initialze+0xb0>)
 8001100:	f010 feb2 	bl	8011e68 <puts>
	}
	//printf("interrupt mask: %02x\r\n",getIMR());
}
 8001104:	bf00      	nop
 8001106:	371c      	adds	r7, #28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd90      	pop	{r4, r7, pc}
 800110c:	08001001 	.word	0x08001001
 8001110:	08000fad 	.word	0x08000fad
 8001114:	08000f85 	.word	0x08000f85
 8001118:	08000f59 	.word	0x08000f59
 800111c:	0800106d 	.word	0x0800106d
 8001120:	08001055 	.word	0x08001055
 8001124:	08012bdc 	.word	0x08012bdc
 8001128:	08012b84 	.word	0x08012b84
 800112c:	08012ba0 	.word	0x08012ba0
 8001130:	08012bac 	.word	0x08012bac
 8001134:	08012bc8 	.word	0x08012bc8

08001138 <print_network_information>:
void print_network_information(void)
{
 8001138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800113c:	b094      	sub	sp, #80	; 0x50
 800113e:	af0e      	add	r7, sp, #56	; 0x38
	wizchip_getnetinfo(&gWIZNETINFO);
 8001140:	48a4      	ldr	r0, [pc, #656]	; (80013d4 <print_network_information+0x29c>)
 8001142:	f010 fb55 	bl	80117f0 <wizchip_getnetinfo>
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8001146:	4ba3      	ldr	r3, [pc, #652]	; (80013d4 <print_network_information+0x29c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	4ba1      	ldr	r3, [pc, #644]	; (80013d4 <print_network_information+0x29c>)
 800114e:	785b      	ldrb	r3, [r3, #1]
 8001150:	461c      	mov	r4, r3
 8001152:	4ba0      	ldr	r3, [pc, #640]	; (80013d4 <print_network_information+0x29c>)
 8001154:	789b      	ldrb	r3, [r3, #2]
 8001156:	461d      	mov	r5, r3
 8001158:	4b9e      	ldr	r3, [pc, #632]	; (80013d4 <print_network_information+0x29c>)
 800115a:	78db      	ldrb	r3, [r3, #3]
 800115c:	461a      	mov	r2, r3
 800115e:	4b9d      	ldr	r3, [pc, #628]	; (80013d4 <print_network_information+0x29c>)
 8001160:	791b      	ldrb	r3, [r3, #4]
 8001162:	4619      	mov	r1, r3
 8001164:	4b9b      	ldr	r3, [pc, #620]	; (80013d4 <print_network_information+0x29c>)
 8001166:	795b      	ldrb	r3, [r3, #5]
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	9101      	str	r1, [sp, #4]
 800116c:	9200      	str	r2, [sp, #0]
 800116e:	462b      	mov	r3, r5
 8001170:	4622      	mov	r2, r4
 8001172:	4601      	mov	r1, r0
 8001174:	4898      	ldr	r0, [pc, #608]	; (80013d8 <print_network_information+0x2a0>)
 8001176:	f010 fe11 	bl	8011d9c <iprintf>
	printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 800117a:	4b96      	ldr	r3, [pc, #600]	; (80013d4 <print_network_information+0x29c>)
 800117c:	799b      	ldrb	r3, [r3, #6]
 800117e:	4619      	mov	r1, r3
 8001180:	4b94      	ldr	r3, [pc, #592]	; (80013d4 <print_network_information+0x29c>)
 8001182:	79db      	ldrb	r3, [r3, #7]
 8001184:	461a      	mov	r2, r3
 8001186:	4b93      	ldr	r3, [pc, #588]	; (80013d4 <print_network_information+0x29c>)
 8001188:	7a1b      	ldrb	r3, [r3, #8]
 800118a:	4618      	mov	r0, r3
 800118c:	4b91      	ldr	r3, [pc, #580]	; (80013d4 <print_network_information+0x29c>)
 800118e:	7a5b      	ldrb	r3, [r3, #9]
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	4603      	mov	r3, r0
 8001194:	4891      	ldr	r0, [pc, #580]	; (80013dc <print_network_information+0x2a4>)
 8001196:	f010 fe01 	bl	8011d9c <iprintf>
	printf("SN Mask	   : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 800119a:	4b8e      	ldr	r3, [pc, #568]	; (80013d4 <print_network_information+0x29c>)
 800119c:	7a9b      	ldrb	r3, [r3, #10]
 800119e:	4619      	mov	r1, r3
 80011a0:	4b8c      	ldr	r3, [pc, #560]	; (80013d4 <print_network_information+0x29c>)
 80011a2:	7adb      	ldrb	r3, [r3, #11]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b8b      	ldr	r3, [pc, #556]	; (80013d4 <print_network_information+0x29c>)
 80011a8:	7b1b      	ldrb	r3, [r3, #12]
 80011aa:	4618      	mov	r0, r3
 80011ac:	4b89      	ldr	r3, [pc, #548]	; (80013d4 <print_network_information+0x29c>)
 80011ae:	7b5b      	ldrb	r3, [r3, #13]
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	4603      	mov	r3, r0
 80011b4:	488a      	ldr	r0, [pc, #552]	; (80013e0 <print_network_information+0x2a8>)
 80011b6:	f010 fdf1 	bl	8011d9c <iprintf>
	printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 80011ba:	4b86      	ldr	r3, [pc, #536]	; (80013d4 <print_network_information+0x29c>)
 80011bc:	7b9b      	ldrb	r3, [r3, #14]
 80011be:	4619      	mov	r1, r3
 80011c0:	4b84      	ldr	r3, [pc, #528]	; (80013d4 <print_network_information+0x29c>)
 80011c2:	7bdb      	ldrb	r3, [r3, #15]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b83      	ldr	r3, [pc, #524]	; (80013d4 <print_network_information+0x29c>)
 80011c8:	7c1b      	ldrb	r3, [r3, #16]
 80011ca:	4618      	mov	r0, r3
 80011cc:	4b81      	ldr	r3, [pc, #516]	; (80013d4 <print_network_information+0x29c>)
 80011ce:	7c5b      	ldrb	r3, [r3, #17]
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	4603      	mov	r3, r0
 80011d4:	4883      	ldr	r0, [pc, #524]	; (80013e4 <print_network_information+0x2ac>)
 80011d6:	f010 fde1 	bl	8011d9c <iprintf>
	printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 80011da:	4b7e      	ldr	r3, [pc, #504]	; (80013d4 <print_network_information+0x29c>)
 80011dc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80011e0:	4619      	mov	r1, r3
 80011e2:	4b7c      	ldr	r3, [pc, #496]	; (80013d4 <print_network_information+0x29c>)
 80011e4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b7a      	ldr	r3, [pc, #488]	; (80013d4 <print_network_information+0x29c>)
 80011ec:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80011f0:	4618      	mov	r0, r3
 80011f2:	4b78      	ldr	r3, [pc, #480]	; (80013d4 <print_network_information+0x29c>)
 80011f4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	4603      	mov	r3, r0
 80011fc:	487a      	ldr	r0, [pc, #488]	; (80013e8 <print_network_information+0x2b0>)
 80011fe:	f010 fdcd 	bl	8011d9c <iprintf>
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 8001202:	4b74      	ldr	r3, [pc, #464]	; (80013d4 <print_network_information+0x29c>)
 8001204:	7c9b      	ldrb	r3, [r3, #18]
 8001206:	469c      	mov	ip, r3
 8001208:	4b72      	ldr	r3, [pc, #456]	; (80013d4 <print_network_information+0x29c>)
 800120a:	7cdb      	ldrb	r3, [r3, #19]
 800120c:	469e      	mov	lr, r3
 800120e:	4b71      	ldr	r3, [pc, #452]	; (80013d4 <print_network_information+0x29c>)
 8001210:	7d1b      	ldrb	r3, [r3, #20]
 8001212:	4698      	mov	r8, r3
 8001214:	4b6f      	ldr	r3, [pc, #444]	; (80013d4 <print_network_information+0x29c>)
 8001216:	7d5b      	ldrb	r3, [r3, #21]
 8001218:	4618      	mov	r0, r3
									gWIZNETINFO.lla[4],gWIZNETINFO.lla[5],gWIZNETINFO.lla[6],gWIZNETINFO.lla[7],\
 800121a:	4b6e      	ldr	r3, [pc, #440]	; (80013d4 <print_network_information+0x29c>)
 800121c:	7d9b      	ldrb	r3, [r3, #22]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 800121e:	461c      	mov	r4, r3
									gWIZNETINFO.lla[4],gWIZNETINFO.lla[5],gWIZNETINFO.lla[6],gWIZNETINFO.lla[7],\
 8001220:	4b6c      	ldr	r3, [pc, #432]	; (80013d4 <print_network_information+0x29c>)
 8001222:	7ddb      	ldrb	r3, [r3, #23]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 8001224:	461d      	mov	r5, r3
									gWIZNETINFO.lla[4],gWIZNETINFO.lla[5],gWIZNETINFO.lla[6],gWIZNETINFO.lla[7],\
 8001226:	4b6b      	ldr	r3, [pc, #428]	; (80013d4 <print_network_information+0x29c>)
 8001228:	7e1b      	ldrb	r3, [r3, #24]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 800122a:	461e      	mov	r6, r3
									gWIZNETINFO.lla[4],gWIZNETINFO.lla[5],gWIZNETINFO.lla[6],gWIZNETINFO.lla[7],\
 800122c:	4b69      	ldr	r3, [pc, #420]	; (80013d4 <print_network_information+0x29c>)
 800122e:	7e5b      	ldrb	r3, [r3, #25]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 8001230:	617b      	str	r3, [r7, #20]
									gWIZNETINFO.lla[8],gWIZNETINFO.lla[9],gWIZNETINFO.lla[10],gWIZNETINFO.lla[11],\
 8001232:	4b68      	ldr	r3, [pc, #416]	; (80013d4 <print_network_information+0x29c>)
 8001234:	7e9b      	ldrb	r3, [r3, #26]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 8001236:	613b      	str	r3, [r7, #16]
									gWIZNETINFO.lla[8],gWIZNETINFO.lla[9],gWIZNETINFO.lla[10],gWIZNETINFO.lla[11],\
 8001238:	4b66      	ldr	r3, [pc, #408]	; (80013d4 <print_network_information+0x29c>)
 800123a:	7edb      	ldrb	r3, [r3, #27]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 800123c:	60fb      	str	r3, [r7, #12]
									gWIZNETINFO.lla[8],gWIZNETINFO.lla[9],gWIZNETINFO.lla[10],gWIZNETINFO.lla[11],\
 800123e:	4b65      	ldr	r3, [pc, #404]	; (80013d4 <print_network_information+0x29c>)
 8001240:	7f1b      	ldrb	r3, [r3, #28]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 8001242:	60bb      	str	r3, [r7, #8]
									gWIZNETINFO.lla[8],gWIZNETINFO.lla[9],gWIZNETINFO.lla[10],gWIZNETINFO.lla[11],\
 8001244:	4b63      	ldr	r3, [pc, #396]	; (80013d4 <print_network_information+0x29c>)
 8001246:	7f5b      	ldrb	r3, [r3, #29]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 8001248:	607b      	str	r3, [r7, #4]
									gWIZNETINFO.lla[12],gWIZNETINFO.lla[13],gWIZNETINFO.lla[14],gWIZNETINFO.lla[15]);
 800124a:	4b62      	ldr	r3, [pc, #392]	; (80013d4 <print_network_information+0x29c>)
 800124c:	7f9b      	ldrb	r3, [r3, #30]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 800124e:	603b      	str	r3, [r7, #0]
									gWIZNETINFO.lla[12],gWIZNETINFO.lla[13],gWIZNETINFO.lla[14],gWIZNETINFO.lla[15]);
 8001250:	4b60      	ldr	r3, [pc, #384]	; (80013d4 <print_network_information+0x29c>)
 8001252:	7fdb      	ldrb	r3, [r3, #31]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 8001254:	4619      	mov	r1, r3
									gWIZNETINFO.lla[12],gWIZNETINFO.lla[13],gWIZNETINFO.lla[14],gWIZNETINFO.lla[15]);
 8001256:	4b5f      	ldr	r3, [pc, #380]	; (80013d4 <print_network_information+0x29c>)
 8001258:	f893 3020 	ldrb.w	r3, [r3, #32]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 800125c:	461a      	mov	r2, r3
									gWIZNETINFO.lla[12],gWIZNETINFO.lla[13],gWIZNETINFO.lla[14],gWIZNETINFO.lla[15]);
 800125e:	4b5d      	ldr	r3, [pc, #372]	; (80013d4 <print_network_information+0x29c>)
 8001260:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 8001264:	930c      	str	r3, [sp, #48]	; 0x30
 8001266:	920b      	str	r2, [sp, #44]	; 0x2c
 8001268:	910a      	str	r1, [sp, #40]	; 0x28
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	9209      	str	r2, [sp, #36]	; 0x24
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	9208      	str	r2, [sp, #32]
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	9207      	str	r2, [sp, #28]
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	9206      	str	r2, [sp, #24]
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	9205      	str	r2, [sp, #20]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	9304      	str	r3, [sp, #16]
 8001282:	9603      	str	r6, [sp, #12]
 8001284:	9502      	str	r5, [sp, #8]
 8001286:	9401      	str	r4, [sp, #4]
 8001288:	9000      	str	r0, [sp, #0]
 800128a:	4643      	mov	r3, r8
 800128c:	4672      	mov	r2, lr
 800128e:	4661      	mov	r1, ip
 8001290:	4856      	ldr	r0, [pc, #344]	; (80013ec <print_network_information+0x2b4>)
 8001292:	f010 fd83 	bl	8011d9c <iprintf>
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 8001296:	4b4f      	ldr	r3, [pc, #316]	; (80013d4 <print_network_information+0x29c>)
 8001298:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800129c:	469c      	mov	ip, r3
 800129e:	4b4d      	ldr	r3, [pc, #308]	; (80013d4 <print_network_information+0x29c>)
 80012a0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80012a4:	469e      	mov	lr, r3
 80012a6:	4b4b      	ldr	r3, [pc, #300]	; (80013d4 <print_network_information+0x29c>)
 80012a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012ac:	4698      	mov	r8, r3
 80012ae:	4b49      	ldr	r3, [pc, #292]	; (80013d4 <print_network_information+0x29c>)
 80012b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012b4:	4618      	mov	r0, r3
									gWIZNETINFO.gua[4],gWIZNETINFO.gua[5],gWIZNETINFO.gua[6],gWIZNETINFO.gua[7],\
 80012b6:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <print_network_information+0x29c>)
 80012b8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80012bc:	461c      	mov	r4, r3
									gWIZNETINFO.gua[4],gWIZNETINFO.gua[5],gWIZNETINFO.gua[6],gWIZNETINFO.gua[7],\
 80012be:	4b45      	ldr	r3, [pc, #276]	; (80013d4 <print_network_information+0x29c>)
 80012c0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80012c4:	461d      	mov	r5, r3
									gWIZNETINFO.gua[4],gWIZNETINFO.gua[5],gWIZNETINFO.gua[6],gWIZNETINFO.gua[7],\
 80012c6:	4b43      	ldr	r3, [pc, #268]	; (80013d4 <print_network_information+0x29c>)
 80012c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80012cc:	461e      	mov	r6, r3
									gWIZNETINFO.gua[4],gWIZNETINFO.gua[5],gWIZNETINFO.gua[6],gWIZNETINFO.gua[7],\
 80012ce:	4b41      	ldr	r3, [pc, #260]	; (80013d4 <print_network_information+0x29c>)
 80012d0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80012d4:	617b      	str	r3, [r7, #20]
									gWIZNETINFO.gua[8],gWIZNETINFO.gua[9],gWIZNETINFO.gua[10],gWIZNETINFO.gua[11],\
 80012d6:	4b3f      	ldr	r3, [pc, #252]	; (80013d4 <print_network_information+0x29c>)
 80012d8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80012dc:	613b      	str	r3, [r7, #16]
									gWIZNETINFO.gua[8],gWIZNETINFO.gua[9],gWIZNETINFO.gua[10],gWIZNETINFO.gua[11],\
 80012de:	4b3d      	ldr	r3, [pc, #244]	; (80013d4 <print_network_information+0x29c>)
 80012e0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80012e4:	60fb      	str	r3, [r7, #12]
									gWIZNETINFO.gua[8],gWIZNETINFO.gua[9],gWIZNETINFO.gua[10],gWIZNETINFO.gua[11],\
 80012e6:	4b3b      	ldr	r3, [pc, #236]	; (80013d4 <print_network_information+0x29c>)
 80012e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80012ec:	60bb      	str	r3, [r7, #8]
									gWIZNETINFO.gua[8],gWIZNETINFO.gua[9],gWIZNETINFO.gua[10],gWIZNETINFO.gua[11],\
 80012ee:	4b39      	ldr	r3, [pc, #228]	; (80013d4 <print_network_information+0x29c>)
 80012f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80012f4:	607b      	str	r3, [r7, #4]
									gWIZNETINFO.gua[12],gWIZNETINFO.gua[13],gWIZNETINFO.gua[14],gWIZNETINFO.gua[15]);
 80012f6:	4b37      	ldr	r3, [pc, #220]	; (80013d4 <print_network_information+0x29c>)
 80012f8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80012fc:	603b      	str	r3, [r7, #0]
									gWIZNETINFO.gua[12],gWIZNETINFO.gua[13],gWIZNETINFO.gua[14],gWIZNETINFO.gua[15]);
 80012fe:	4b35      	ldr	r3, [pc, #212]	; (80013d4 <print_network_information+0x29c>)
 8001300:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 8001304:	4619      	mov	r1, r3
									gWIZNETINFO.gua[12],gWIZNETINFO.gua[13],gWIZNETINFO.gua[14],gWIZNETINFO.gua[15]);
 8001306:	4b33      	ldr	r3, [pc, #204]	; (80013d4 <print_network_information+0x29c>)
 8001308:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 800130c:	461a      	mov	r2, r3
									gWIZNETINFO.gua[12],gWIZNETINFO.gua[13],gWIZNETINFO.gua[14],gWIZNETINFO.gua[15]);
 800130e:	4b31      	ldr	r3, [pc, #196]	; (80013d4 <print_network_information+0x29c>)
 8001310:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 8001314:	930c      	str	r3, [sp, #48]	; 0x30
 8001316:	920b      	str	r2, [sp, #44]	; 0x2c
 8001318:	910a      	str	r1, [sp, #40]	; 0x28
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	9209      	str	r2, [sp, #36]	; 0x24
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	9208      	str	r2, [sp, #32]
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	9207      	str	r2, [sp, #28]
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	9206      	str	r2, [sp, #24]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	9205      	str	r2, [sp, #20]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	9304      	str	r3, [sp, #16]
 8001332:	9603      	str	r6, [sp, #12]
 8001334:	9502      	str	r5, [sp, #8]
 8001336:	9401      	str	r4, [sp, #4]
 8001338:	9000      	str	r0, [sp, #0]
 800133a:	4643      	mov	r3, r8
 800133c:	4672      	mov	r2, lr
 800133e:	4661      	mov	r1, ip
 8001340:	482b      	ldr	r0, [pc, #172]	; (80013f0 <print_network_information+0x2b8>)
 8001342:	f010 fd2b 	bl	8011d9c <iprintf>
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8001346:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <print_network_information+0x29c>)
 8001348:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800134c:	469c      	mov	ip, r3
 800134e:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <print_network_information+0x29c>)
 8001350:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001354:	469e      	mov	lr, r3
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <print_network_information+0x29c>)
 8001358:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800135c:	4698      	mov	r8, r3
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <print_network_information+0x29c>)
 8001360:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001364:	4618      	mov	r0, r3
									gWIZNETINFO.sn6[4],gWIZNETINFO.sn6[5],gWIZNETINFO.sn6[6],gWIZNETINFO.sn6[7],\
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <print_network_information+0x29c>)
 8001368:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 800136c:	461c      	mov	r4, r3
									gWIZNETINFO.sn6[4],gWIZNETINFO.sn6[5],gWIZNETINFO.sn6[6],gWIZNETINFO.sn6[7],\
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <print_network_information+0x29c>)
 8001370:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8001374:	461d      	mov	r5, r3
									gWIZNETINFO.sn6[4],gWIZNETINFO.sn6[5],gWIZNETINFO.sn6[6],gWIZNETINFO.sn6[7],\
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <print_network_information+0x29c>)
 8001378:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 800137c:	461e      	mov	r6, r3
									gWIZNETINFO.sn6[4],gWIZNETINFO.sn6[5],gWIZNETINFO.sn6[6],gWIZNETINFO.sn6[7],\
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <print_network_information+0x29c>)
 8001380:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8001384:	617b      	str	r3, [r7, #20]
									gWIZNETINFO.sn6[8],gWIZNETINFO.sn6[9],gWIZNETINFO.sn6[10],gWIZNETINFO.sn6[11],\
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <print_network_information+0x29c>)
 8001388:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 800138c:	613b      	str	r3, [r7, #16]
									gWIZNETINFO.sn6[8],gWIZNETINFO.sn6[9],gWIZNETINFO.sn6[10],gWIZNETINFO.sn6[11],\
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <print_network_information+0x29c>)
 8001390:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8001394:	60fb      	str	r3, [r7, #12]
									gWIZNETINFO.sn6[8],gWIZNETINFO.sn6[9],gWIZNETINFO.sn6[10],gWIZNETINFO.sn6[11],\
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <print_network_information+0x29c>)
 8001398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 800139c:	60bb      	str	r3, [r7, #8]
									gWIZNETINFO.sn6[8],gWIZNETINFO.sn6[9],gWIZNETINFO.sn6[10],gWIZNETINFO.sn6[11],\
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <print_network_information+0x29c>)
 80013a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 80013a4:	607b      	str	r3, [r7, #4]
									gWIZNETINFO.sn6[12],gWIZNETINFO.sn6[13],gWIZNETINFO.sn6[14],gWIZNETINFO.sn6[15]);
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <print_network_information+0x29c>)
 80013a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 80013ac:	603b      	str	r3, [r7, #0]
									gWIZNETINFO.sn6[12],gWIZNETINFO.sn6[13],gWIZNETINFO.sn6[14],gWIZNETINFO.sn6[15]);
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <print_network_information+0x29c>)
 80013b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 80013b4:	4619      	mov	r1, r3
									gWIZNETINFO.sn6[12],gWIZNETINFO.sn6[13],gWIZNETINFO.sn6[14],gWIZNETINFO.sn6[15]);
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <print_network_information+0x29c>)
 80013b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 80013bc:	461a      	mov	r2, r3
									gWIZNETINFO.sn6[12],gWIZNETINFO.sn6[13],gWIZNETINFO.sn6[14],gWIZNETINFO.sn6[15]);
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <print_network_information+0x29c>)
 80013c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 80013c4:	930c      	str	r3, [sp, #48]	; 0x30
 80013c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80013c8:	910a      	str	r1, [sp, #40]	; 0x28
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	9209      	str	r2, [sp, #36]	; 0x24
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	e010      	b.n	80013f4 <print_network_information+0x2bc>
 80013d2:	bf00      	nop
 80013d4:	24000000 	.word	0x24000000
 80013d8:	08012bec 	.word	0x08012bec
 80013dc:	08012c1c 	.word	0x08012c1c
 80013e0:	08012c38 	.word	0x08012c38
 80013e4:	08012c54 	.word	0x08012c54
 80013e8:	08012c70 	.word	0x08012c70
 80013ec:	08012c8c 	.word	0x08012c8c
 80013f0:	08012ce0 	.word	0x08012ce0
 80013f4:	9208      	str	r2, [sp, #32]
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	9207      	str	r2, [sp, #28]
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	9206      	str	r2, [sp, #24]
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	9205      	str	r2, [sp, #20]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	9304      	str	r3, [sp, #16]
 8001406:	9603      	str	r6, [sp, #12]
 8001408:	9502      	str	r5, [sp, #8]
 800140a:	9401      	str	r4, [sp, #4]
 800140c:	9000      	str	r0, [sp, #0]
 800140e:	4643      	mov	r3, r8
 8001410:	4672      	mov	r2, lr
 8001412:	4661      	mov	r1, ip
 8001414:	482f      	ldr	r0, [pc, #188]	; (80014d4 <print_network_information+0x39c>)
 8001416:	f010 fcc1 	bl	8011d9c <iprintf>
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 800141a:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <print_network_information+0x3a0>)
 800141c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001420:	469c      	mov	ip, r3
 8001422:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <print_network_information+0x3a0>)
 8001424:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001428:	469e      	mov	lr, r3
 800142a:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <print_network_information+0x3a0>)
 800142c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001430:	4698      	mov	r8, r3
 8001432:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <print_network_information+0x3a0>)
 8001434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001438:	4618      	mov	r0, r3
									gWIZNETINFO.gw6[4],gWIZNETINFO.gw6[5],gWIZNETINFO.gw6[6],gWIZNETINFO.gw6[7],\
 800143a:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <print_network_information+0x3a0>)
 800143c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001440:	461c      	mov	r4, r3
									gWIZNETINFO.gw6[4],gWIZNETINFO.gw6[5],gWIZNETINFO.gw6[6],gWIZNETINFO.gw6[7],\
 8001442:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <print_network_information+0x3a0>)
 8001444:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001448:	461d      	mov	r5, r3
									gWIZNETINFO.gw6[4],gWIZNETINFO.gw6[5],gWIZNETINFO.gw6[6],gWIZNETINFO.gw6[7],\
 800144a:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <print_network_information+0x3a0>)
 800144c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001450:	461e      	mov	r6, r3
									gWIZNETINFO.gw6[4],gWIZNETINFO.gw6[5],gWIZNETINFO.gw6[6],gWIZNETINFO.gw6[7],\
 8001452:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <print_network_information+0x3a0>)
 8001454:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001458:	617b      	str	r3, [r7, #20]
									gWIZNETINFO.gw6[8],gWIZNETINFO.gw6[9],gWIZNETINFO.gw6[10],gWIZNETINFO.gw6[11],\
 800145a:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <print_network_information+0x3a0>)
 800145c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001460:	613b      	str	r3, [r7, #16]
									gWIZNETINFO.gw6[8],gWIZNETINFO.gw6[9],gWIZNETINFO.gw6[10],gWIZNETINFO.gw6[11],\
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <print_network_information+0x3a0>)
 8001464:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001468:	60fb      	str	r3, [r7, #12]
									gWIZNETINFO.gw6[8],gWIZNETINFO.gw6[9],gWIZNETINFO.gw6[10],gWIZNETINFO.gw6[11],\
 800146a:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <print_network_information+0x3a0>)
 800146c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001470:	60bb      	str	r3, [r7, #8]
									gWIZNETINFO.gw6[8],gWIZNETINFO.gw6[9],gWIZNETINFO.gw6[10],gWIZNETINFO.gw6[11],\
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <print_network_information+0x3a0>)
 8001474:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001478:	607b      	str	r3, [r7, #4]
									gWIZNETINFO.gw6[12],gWIZNETINFO.gw6[13],gWIZNETINFO.gw6[14],gWIZNETINFO.gw6[15]);
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <print_network_information+0x3a0>)
 800147c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001480:	603b      	str	r3, [r7, #0]
									gWIZNETINFO.gw6[12],gWIZNETINFO.gw6[13],gWIZNETINFO.gw6[14],gWIZNETINFO.gw6[15]);
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <print_network_information+0x3a0>)
 8001484:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001488:	4619      	mov	r1, r3
									gWIZNETINFO.gw6[12],gWIZNETINFO.gw6[13],gWIZNETINFO.gw6[14],gWIZNETINFO.gw6[15]);
 800148a:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <print_network_information+0x3a0>)
 800148c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001490:	461a      	mov	r2, r3
									gWIZNETINFO.gw6[12],gWIZNETINFO.gw6[13],gWIZNETINFO.gw6[14],gWIZNETINFO.gw6[15]);
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <print_network_information+0x3a0>)
 8001494:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001498:	930c      	str	r3, [sp, #48]	; 0x30
 800149a:	920b      	str	r2, [sp, #44]	; 0x2c
 800149c:	910a      	str	r1, [sp, #40]	; 0x28
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	9209      	str	r2, [sp, #36]	; 0x24
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	9208      	str	r2, [sp, #32]
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	9207      	str	r2, [sp, #28]
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	9206      	str	r2, [sp, #24]
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	9205      	str	r2, [sp, #20]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	9304      	str	r3, [sp, #16]
 80014b6:	9603      	str	r6, [sp, #12]
 80014b8:	9502      	str	r5, [sp, #8]
 80014ba:	9401      	str	r4, [sp, #4]
 80014bc:	9000      	str	r0, [sp, #0]
 80014be:	4643      	mov	r3, r8
 80014c0:	4672      	mov	r2, lr
 80014c2:	4661      	mov	r1, ip
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <print_network_information+0x3a4>)
 80014c6:	f010 fc69 	bl	8011d9c <iprintf>
}
 80014ca:	bf00      	nop
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014d4:	08012d34 	.word	0x08012d34
 80014d8:	24000000 	.word	0x24000000
 80014dc:	08012d88 	.word	0x08012d88

080014e0 <CLI_Process>:
void print_help_menu(void)
{
  printf("CMD List\r\n");
}
uint16_t CLI_Process(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
  uint16_t mode = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	80fb      	strh	r3, [r7, #6]
  printf("serial recv : [%d] %s\r\n", rx_index, rx_buffer);
 80014ea:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <CLI_Process+0xd0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a31      	ldr	r2, [pc, #196]	; (80015b4 <CLI_Process+0xd4>)
 80014f0:	4619      	mov	r1, r3
 80014f2:	4831      	ldr	r0, [pc, #196]	; (80015b8 <CLI_Process+0xd8>)
 80014f4:	f010 fc52 	bl	8011d9c <iprintf>
  if (strncmp((const char *)rx_buffer, (const char *)"help", 4) == 0) // spi setting
 80014f8:	2204      	movs	r2, #4
 80014fa:	4930      	ldr	r1, [pc, #192]	; (80015bc <CLI_Process+0xdc>)
 80014fc:	482d      	ldr	r0, [pc, #180]	; (80015b4 <CLI_Process+0xd4>)
 80014fe:	f010 fd9b 	bl	8012038 <strncmp>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d103      	bne.n	8001510 <CLI_Process+0x30>
  {
	  printf("help\r\n");
 8001508:	482d      	ldr	r0, [pc, #180]	; (80015c0 <CLI_Process+0xe0>)
 800150a:	f010 fcad 	bl	8011e68 <puts>
 800150e:	e040      	b.n	8001592 <CLI_Process+0xb2>
  }
  else if (strncmp((const char *)rx_buffer, (const char *)"stop", 4) == 0) // spi setting
 8001510:	2204      	movs	r2, #4
 8001512:	492c      	ldr	r1, [pc, #176]	; (80015c4 <CLI_Process+0xe4>)
 8001514:	4827      	ldr	r0, [pc, #156]	; (80015b4 <CLI_Process+0xd4>)
 8001516:	f010 fd8f 	bl	8012038 <strncmp>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10b      	bne.n	8001538 <CLI_Process+0x58>
  {
	  printf("stop\r\n");
 8001520:	4829      	ldr	r0, [pc, #164]	; (80015c8 <CLI_Process+0xe8>)
 8001522:	f010 fca1 	bl	8011e68 <puts>
	  close(0);
 8001526:	2000      	movs	r0, #0
 8001528:	f00e fca0 	bl	800fe6c <close>
	  loop_mode = 0;
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <CLI_Process+0xec>)
 800152e:	2200      	movs	r2, #0
 8001530:	801a      	strh	r2, [r3, #0]
    mode = 4;
 8001532:	2304      	movs	r3, #4
 8001534:	80fb      	strh	r3, [r7, #6]
 8001536:	e02c      	b.n	8001592 <CLI_Process+0xb2>
  }
  else if (strncmp((const char *)rx_buffer, (const char *)"1", 1) == 0) // spi setting
 8001538:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <CLI_Process+0xd4>)
 800153a:	781a      	ldrb	r2, [r3, #0]
 800153c:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <CLI_Process+0xf0>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d106      	bne.n	8001554 <CLI_Process+0x74>
  {
	  printf("echo\r\n");
 8001546:	4823      	ldr	r0, [pc, #140]	; (80015d4 <CLI_Process+0xf4>)
 8001548:	f010 fc8e 	bl	8011e68 <puts>
	  loop_mode = 1;
 800154c:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <CLI_Process+0xec>)
 800154e:	2201      	movs	r2, #1
 8001550:	801a      	strh	r2, [r3, #0]
 8001552:	e01e      	b.n	8001592 <CLI_Process+0xb2>
  }
  else if (strncmp((const char *)rx_buffer, (const char *)"2", 1) == 0) // spi setting
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <CLI_Process+0xd4>)
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <CLI_Process+0xf8>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d108      	bne.n	8001574 <CLI_Process+0x94>
  {
	 printf("iperf client\r\n");
 8001562:	481e      	ldr	r0, [pc, #120]	; (80015dc <CLI_Process+0xfc>)
 8001564:	f010 fc80 	bl	8011e68 <puts>
	 loop_mode = 2;
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <CLI_Process+0xec>)
 800156a:	2202      	movs	r2, #2
 800156c:	801a      	strh	r2, [r3, #0]
	 mode = 2;
 800156e:	2302      	movs	r3, #2
 8001570:	80fb      	strh	r3, [r7, #6]
 8001572:	e00e      	b.n	8001592 <CLI_Process+0xb2>
  }
  else if (strncmp((const char *)rx_buffer, (const char *)"3", 1) == 0) // spi setting
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <CLI_Process+0xd4>)
 8001576:	781a      	ldrb	r2, [r3, #0]
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <CLI_Process+0x100>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d107      	bne.n	8001592 <CLI_Process+0xb2>
	{
	 printf("iperf server\r\n");
 8001582:	4818      	ldr	r0, [pc, #96]	; (80015e4 <CLI_Process+0x104>)
 8001584:	f010 fc70 	bl	8011e68 <puts>
	 loop_mode = 3;
 8001588:	4b10      	ldr	r3, [pc, #64]	; (80015cc <CLI_Process+0xec>)
 800158a:	2203      	movs	r2, #3
 800158c:	801a      	strh	r2, [r3, #0]
	 mode = 3;
 800158e:	2303      	movs	r3, #3
 8001590:	80fb      	strh	r3, [r7, #6]
	}
  rx_index = 0;
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <CLI_Process+0xd0>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)">", 1, 0xFFFF);
 8001598:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800159c:	2201      	movs	r2, #1
 800159e:	4912      	ldr	r1, [pc, #72]	; (80015e8 <CLI_Process+0x108>)
 80015a0:	4812      	ldr	r0, [pc, #72]	; (80015ec <CLI_Process+0x10c>)
 80015a2:	f008 f889 	bl	80096b8 <HAL_UART_Transmit>
  return mode;
 80015a6:	88fb      	ldrh	r3, [r7, #6]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	24004b50 	.word	0x24004b50
 80015b4:	24004350 	.word	0x24004350
 80015b8:	08012de8 	.word	0x08012de8
 80015bc:	08012e00 	.word	0x08012e00
 80015c0:	08012e08 	.word	0x08012e08
 80015c4:	08012e10 	.word	0x08012e10
 80015c8:	08012e18 	.word	0x08012e18
 80015cc:	24004b56 	.word	0x24004b56
 80015d0:	08012e20 	.word	0x08012e20
 80015d4:	08012e24 	.word	0x08012e24
 80015d8:	08012e2c 	.word	0x08012e2c
 80015dc:	08012e30 	.word	0x08012e30
 80015e0:	08012e40 	.word	0x08012e40
 80015e4:	08012e44 	.word	0x08012e44
 80015e8:	08012e54 	.word	0x08012e54
 80015ec:	240002b0 	.word	0x240002b0

080015f0 <Start_W6100_Task>:
void Start_W6100_Task(void *argument)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b08b      	sub	sp, #44	; 0x2c
 80015f4:	af04      	add	r7, sp, #16
 80015f6:	6078      	str	r0, [r7, #4]
	int i = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
	uint8_t syslock = SYS_NET_LOCK;
 80015fc:	2302      	movs	r3, #2
 80015fe:	72fb      	strb	r3, [r7, #11]

	int8_t *data= NULL;
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
	int32_t ret;
	W6100Initialze();
 8001604:	f7ff fd3e 	bl	8001084 <W6100Initialze>
	ctlwizchip(CW_SYS_UNLOCK,& syslock);
 8001608:	f107 030b 	add.w	r3, r7, #11
 800160c:	4619      	mov	r1, r3
 800160e:	2001      	movs	r0, #1
 8001610:	f00f fb82 	bl	8010d18 <ctlwizchip>
	ctlnetwork(CN_SET_NETINFO,&gWIZNETINFO);
 8001614:	494a      	ldr	r1, [pc, #296]	; (8001740 <Start_W6100_Task+0x150>)
 8001616:	2000      	movs	r0, #0
 8001618:	f00f fd0e 	bl	8011038 <ctlnetwork>
	for (i = 0; i < 8; i++)
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	e012      	b.n	8001648 <Start_W6100_Task+0x58>
	  {
		printf("%d : max size = %d k \r\n", i, getSn_TxMAX(i));
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	3301      	adds	r3, #1
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800162e:	4618      	mov	r0, r3
 8001630:	f00e f8a4 	bl	800f77c <WIZCHIP_READ>
 8001634:	4603      	mov	r3, r0
 8001636:	029b      	lsls	r3, r3, #10
 8001638:	461a      	mov	r2, r3
 800163a:	6979      	ldr	r1, [r7, #20]
 800163c:	4841      	ldr	r0, [pc, #260]	; (8001744 <Start_W6100_Task+0x154>)
 800163e:	f010 fbad 	bl	8011d9c <iprintf>
	for (i = 0; i < 8; i++)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	3301      	adds	r3, #1
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	2b07      	cmp	r3, #7
 800164c:	dde9      	ble.n	8001622 <Start_W6100_Task+0x32>
	  }
	printf("VERSION(%x) = %.2x \r\n", _VER_,getVER());
 800164e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001652:	f00e f893 	bl	800f77c <WIZCHIP_READ>
 8001656:	4603      	mov	r3, r0
 8001658:	021c      	lsls	r4, r3, #8
 800165a:	f44f 7040 	mov.w	r0, #768	; 0x300
 800165e:	f00e f88d 	bl	800f77c <WIZCHIP_READ>
 8001662:	4603      	mov	r3, r0
 8001664:	4423      	add	r3, r4
 8001666:	461a      	mov	r2, r3
 8001668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800166c:	4836      	ldr	r0, [pc, #216]	; (8001748 <Start_W6100_Task+0x158>)
 800166e:	f010 fb95 	bl	8011d9c <iprintf>
	print_network_information();
 8001672:	f7ff fd61 	bl	8001138 <print_network_information>
	printf("\r\n>");
 8001676:	4835      	ldr	r0, [pc, #212]	; (800174c <Start_W6100_Task+0x15c>)
 8001678:	f010 fb90 	bl	8011d9c <iprintf>
	data = (uint8_t *)calloc(Send_data_size + 1, sizeof(uint8_t));
 800167c:	2101      	movs	r1, #1
 800167e:	f643 6081 	movw	r0, #16001	; 0x3e81
 8001682:	f010 fa11 	bl	8011aa8 <calloc>
 8001686:	4603      	mov	r3, r0
 8001688:	613b      	str	r3, [r7, #16]
    for(i=0; i<Send_data_size; i++)
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	e016      	b.n	80016be <Start_W6100_Task+0xce>
    {
	    data[i] = (i%10) + '0';
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <Start_W6100_Task+0x160>)
 8001694:	fb83 1302 	smull	r1, r3, r3, r2
 8001698:	1099      	asrs	r1, r3, #2
 800169a:	17d3      	asrs	r3, r2, #31
 800169c:	1ac9      	subs	r1, r1, r3
 800169e:	460b      	mov	r3, r1
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	1ad1      	subs	r1, r2, r3
 80016a8:	b2cb      	uxtb	r3, r1
 80016aa:	3330      	adds	r3, #48	; 0x30
 80016ac:	b2d9      	uxtb	r1, r3
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4413      	add	r3, r2
 80016b4:	b24a      	sxtb	r2, r1
 80016b6:	701a      	strb	r2, [r3, #0]
    for(i=0; i<Send_data_size; i++)
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	3301      	adds	r3, #1
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80016c4:	dbe4      	blt.n	8001690 <Start_W6100_Task+0xa0>
    }
    printf("1: loopback \r\n2: iperf client\r\n3:iperf server\r\nstop : stop process\r\n");
 80016c6:	4823      	ldr	r0, [pc, #140]	; (8001754 <Start_W6100_Task+0x164>)
 80016c8:	f010 fbce 	bl	8011e68 <puts>
	for(;;)
	{


	  switch(loop_mode)
 80016cc:	4b22      	ldr	r3, [pc, #136]	; (8001758 <Start_W6100_Task+0x168>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d02a      	beq.n	800172a <Start_W6100_Task+0x13a>
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	dc2f      	bgt.n	8001738 <Start_W6100_Task+0x148>
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d002      	beq.n	80016e2 <Start_W6100_Task+0xf2>
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d008      	beq.n	80016f2 <Start_W6100_Task+0x102>
		  break;
	  case 3:
		  tcps_status(0, 5001, AS_IPV4);
		  break;
	  default :
		  break;
 80016e0:	e02a      	b.n	8001738 <Start_W6100_Task+0x148>
		  loopback_tcps(0,data_buf,5001, AS_IPV4);
 80016e2:	2302      	movs	r3, #2
 80016e4:	f241 3289 	movw	r2, #5001	; 0x1389
 80016e8:	491c      	ldr	r1, [pc, #112]	; (800175c <Start_W6100_Task+0x16c>)
 80016ea:	2000      	movs	r0, #0
 80016ec:	f00d fa8e 	bl	800ec0c <loopback_tcps>
		  break;
 80016f0:	e025      	b.n	800173e <Start_W6100_Task+0x14e>
		  ret = iperf_tcpc(0, data, WIZ_Dest_IP, WIZ_Dest_PORT, Send_data_size, 100, AS_IPV4);
 80016f2:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <Start_W6100_Task+0x170>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	2302      	movs	r3, #2
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	2364      	movs	r3, #100	; 0x64
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	4613      	mov	r3, r2
 8001708:	4a16      	ldr	r2, [pc, #88]	; (8001764 <Start_W6100_Task+0x174>)
 800170a:	6939      	ldr	r1, [r7, #16]
 800170c:	2000      	movs	r0, #0
 800170e:	f00d fe71 	bl	800f3f4 <iperf_tcpc>
 8001712:	60f8      	str	r0, [r7, #12]
		  if(ret > 1)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b01      	cmp	r3, #1
 8001718:	dd10      	ble.n	800173c <Start_W6100_Task+0x14c>
			  loop_mode = 0;
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <Start_W6100_Task+0x168>)
 800171c:	2200      	movs	r2, #0
 800171e:	801a      	strh	r2, [r3, #0]
			  printf("finish iperf send data[%ld] \r\n", ret);
 8001720:	68f9      	ldr	r1, [r7, #12]
 8001722:	4811      	ldr	r0, [pc, #68]	; (8001768 <Start_W6100_Task+0x178>)
 8001724:	f010 fb3a 	bl	8011d9c <iprintf>
		  break;
 8001728:	e008      	b.n	800173c <Start_W6100_Task+0x14c>
		  tcps_status(0, 5001, AS_IPV4);
 800172a:	2202      	movs	r2, #2
 800172c:	f241 3189 	movw	r1, #5001	; 0x1389
 8001730:	2000      	movs	r0, #0
 8001732:	f00d fbe7 	bl	800ef04 <tcps_status>
		  break;
 8001736:	e002      	b.n	800173e <Start_W6100_Task+0x14e>
		  break;
 8001738:	bf00      	nop
 800173a:	e7c7      	b.n	80016cc <Start_W6100_Task+0xdc>
		  break;
 800173c:	bf00      	nop
	  switch(loop_mode)
 800173e:	e7c5      	b.n	80016cc <Start_W6100_Task+0xdc>
 8001740:	24000000 	.word	0x24000000
 8001744:	08012e58 	.word	0x08012e58
 8001748:	08012e70 	.word	0x08012e70
 800174c:	08012e88 	.word	0x08012e88
 8001750:	66666667 	.word	0x66666667
 8001754:	08012e8c 	.word	0x08012e8c
 8001758:	24004b56 	.word	0x24004b56
 800175c:	2400034c 	.word	0x2400034c
 8001760:	2400006c 	.word	0x2400006c
 8001764:	24000068 	.word	0x24000068
 8001768:	08012ed0 	.word	0x08012ed0

0800176c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint16_t cmd_mode=0;
 8001774:	2300      	movs	r3, #0
 8001776:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	  if (rx_flag == 1)
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <StartDefaultTask+0x30>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d109      	bne.n	8001794 <StartDefaultTask+0x28>
	  {
		  rx_flag = 0;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <StartDefaultTask+0x30>)
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
		  cmd_mode=CLI_Process();
 8001786:	f7ff feab 	bl	80014e0 <CLI_Process>
 800178a:	4603      	mov	r3, r0
 800178c:	81fb      	strh	r3, [r7, #14]
		  switch(cmd_mode)
 800178e:	89fb      	ldrh	r3, [r7, #14]
 8001790:	2b03      	cmp	r3, #3
		  {
		  case 3:
			  break;
		  default :
			  break;
 8001792:	bf00      	nop
		  }
	  }
    osDelay(1);
 8001794:	2001      	movs	r0, #1
 8001796:	f00a fd8b 	bl	800c2b0 <osDelay>
	  if (rx_flag == 1)
 800179a:	e7ed      	b.n	8001778 <StartDefaultTask+0xc>
 800179c:	24004b54 	.word	0x24004b54

080017a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d101      	bne.n	80017b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017b2:	f000 fbc1 	bl	8001f38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40001000 	.word	0x40001000

080017c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c8:	b672      	cpsid	i
}
 80017ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017cc:	e7fe      	b.n	80017cc <Error_Handler+0x8>
	...

080017d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <HAL_MspInit+0x38>)
 80017d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017dc:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <HAL_MspInit+0x38>)
 80017de:	f043 0302 	orr.w	r3, r3, #2
 80017e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <HAL_MspInit+0x38>)
 80017e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017f4:	2200      	movs	r2, #0
 80017f6:	210f      	movs	r1, #15
 80017f8:	f06f 0001 	mvn.w	r0, #1
 80017fc:	f000 fc74 	bl	80020e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	58024400 	.word	0x58024400

0800180c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b0ba      	sub	sp, #232	; 0xe8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001824:	f107 0318 	add.w	r3, r7, #24
 8001828:	22b8      	movs	r2, #184	; 0xb8
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f010 fbfb 	bl	8012028 <memset>
  if(hspi->Instance==SPI1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a72      	ldr	r2, [pc, #456]	; (8001a00 <HAL_SPI_MspInit+0x1f4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	f040 80dc 	bne.w	80019f6 <HAL_SPI_MspInit+0x1ea>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800183e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 800184a:	2302      	movs	r3, #2
 800184c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 160;
 800184e:	23a0      	movs	r3, #160	; 0xa0
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001852:	2302      	movs	r3, #2
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001856:	2302      	movs	r3, #2
 8001858:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800185a:	2302      	movs	r3, #2
 800185c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800185e:	2340      	movs	r3, #64	; 0x40
 8001860:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001862:	2300      	movs	r3, #0
 8001864:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800186a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001870:	f107 0318 	add.w	r3, r7, #24
 8001874:	4618      	mov	r0, r3
 8001876:	f004 fc47 	bl	8006108 <HAL_RCCEx_PeriphCLKConfig>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 8001880:	f7ff ffa0 	bl	80017c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001884:	4b5f      	ldr	r3, [pc, #380]	; (8001a04 <HAL_SPI_MspInit+0x1f8>)
 8001886:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800188a:	4a5e      	ldr	r2, [pc, #376]	; (8001a04 <HAL_SPI_MspInit+0x1f8>)
 800188c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001890:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001894:	4b5b      	ldr	r3, [pc, #364]	; (8001a04 <HAL_SPI_MspInit+0x1f8>)
 8001896:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800189a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	4b58      	ldr	r3, [pc, #352]	; (8001a04 <HAL_SPI_MspInit+0x1f8>)
 80018a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a8:	4a56      	ldr	r2, [pc, #344]	; (8001a04 <HAL_SPI_MspInit+0x1f8>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b2:	4b54      	ldr	r3, [pc, #336]	; (8001a04 <HAL_SPI_MspInit+0x1f8>)
 80018b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c0:	4b50      	ldr	r3, [pc, #320]	; (8001a04 <HAL_SPI_MspInit+0x1f8>)
 80018c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c6:	4a4f      	ldr	r2, [pc, #316]	; (8001a04 <HAL_SPI_MspInit+0x1f8>)
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018d0:	4b4c      	ldr	r3, [pc, #304]	; (8001a04 <HAL_SPI_MspInit+0x1f8>)
 80018d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80018de:	2360      	movs	r3, #96	; 0x60
 80018e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018f6:	2305      	movs	r3, #5
 80018f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001900:	4619      	mov	r1, r3
 8001902:	4841      	ldr	r0, [pc, #260]	; (8001a08 <HAL_SPI_MspInit+0x1fc>)
 8001904:	f003 fa5c 	bl	8004dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001908:	2320      	movs	r3, #32
 800190a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191a:	2303      	movs	r3, #3
 800191c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001920:	2305      	movs	r3, #5
 8001922:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001926:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800192a:	4619      	mov	r1, r3
 800192c:	4837      	ldr	r0, [pc, #220]	; (8001a0c <HAL_SPI_MspInit+0x200>)
 800192e:	f003 fa47 	bl	8004dc0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001932:	4b37      	ldr	r3, [pc, #220]	; (8001a10 <HAL_SPI_MspInit+0x204>)
 8001934:	4a37      	ldr	r2, [pc, #220]	; (8001a14 <HAL_SPI_MspInit+0x208>)
 8001936:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001938:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <HAL_SPI_MspInit+0x204>)
 800193a:	2225      	movs	r2, #37	; 0x25
 800193c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800193e:	4b34      	ldr	r3, [pc, #208]	; (8001a10 <HAL_SPI_MspInit+0x204>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001944:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <HAL_SPI_MspInit+0x204>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800194a:	4b31      	ldr	r3, [pc, #196]	; (8001a10 <HAL_SPI_MspInit+0x204>)
 800194c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001950:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001952:	4b2f      	ldr	r3, [pc, #188]	; (8001a10 <HAL_SPI_MspInit+0x204>)
 8001954:	2200      	movs	r2, #0
 8001956:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001958:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <HAL_SPI_MspInit+0x204>)
 800195a:	2200      	movs	r2, #0
 800195c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800195e:	4b2c      	ldr	r3, [pc, #176]	; (8001a10 <HAL_SPI_MspInit+0x204>)
 8001960:	2200      	movs	r2, #0
 8001962:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001964:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_SPI_MspInit+0x204>)
 8001966:	2200      	movs	r2, #0
 8001968:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800196a:	4b29      	ldr	r3, [pc, #164]	; (8001a10 <HAL_SPI_MspInit+0x204>)
 800196c:	2200      	movs	r2, #0
 800196e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001970:	4827      	ldr	r0, [pc, #156]	; (8001a10 <HAL_SPI_MspInit+0x204>)
 8001972:	f000 fbe1 	bl	8002138 <HAL_DMA_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_SPI_MspInit+0x174>
    {
      Error_Handler();
 800197c:	f7ff ff22 	bl	80017c4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a23      	ldr	r2, [pc, #140]	; (8001a10 <HAL_SPI_MspInit+0x204>)
 8001984:	67da      	str	r2, [r3, #124]	; 0x7c
 8001986:	4a22      	ldr	r2, [pc, #136]	; (8001a10 <HAL_SPI_MspInit+0x204>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 800198c:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <HAL_SPI_MspInit+0x20c>)
 800198e:	4a23      	ldr	r2, [pc, #140]	; (8001a1c <HAL_SPI_MspInit+0x210>)
 8001990:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001992:	4b21      	ldr	r3, [pc, #132]	; (8001a18 <HAL_SPI_MspInit+0x20c>)
 8001994:	2226      	movs	r2, #38	; 0x26
 8001996:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001998:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <HAL_SPI_MspInit+0x20c>)
 800199a:	2240      	movs	r2, #64	; 0x40
 800199c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800199e:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <HAL_SPI_MspInit+0x20c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019a4:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <HAL_SPI_MspInit+0x20c>)
 80019a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019aa:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019ac:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <HAL_SPI_MspInit+0x20c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b2:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_SPI_MspInit+0x20c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80019b8:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <HAL_SPI_MspInit+0x20c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019be:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <HAL_SPI_MspInit+0x20c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019c4:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <HAL_SPI_MspInit+0x20c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80019ca:	4813      	ldr	r0, [pc, #76]	; (8001a18 <HAL_SPI_MspInit+0x20c>)
 80019cc:	f000 fbb4 	bl	8002138 <HAL_DMA_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_SPI_MspInit+0x1ce>
    {
      Error_Handler();
 80019d6:	f7ff fef5 	bl	80017c4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a0e      	ldr	r2, [pc, #56]	; (8001a18 <HAL_SPI_MspInit+0x20c>)
 80019de:	679a      	str	r2, [r3, #120]	; 0x78
 80019e0:	4a0d      	ldr	r2, [pc, #52]	; (8001a18 <HAL_SPI_MspInit+0x20c>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2105      	movs	r1, #5
 80019ea:	2023      	movs	r0, #35	; 0x23
 80019ec:	f000 fb7c 	bl	80020e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80019f0:	2023      	movs	r0, #35	; 0x23
 80019f2:	f000 fb93 	bl	800211c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019f6:	bf00      	nop
 80019f8:	37e8      	adds	r7, #232	; 0xe8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40013000 	.word	0x40013000
 8001a04:	58024400 	.word	0x58024400
 8001a08:	58020000 	.word	0x58020000
 8001a0c:	58020400 	.word	0x58020400
 8001a10:	240001c0 	.word	0x240001c0
 8001a14:	40020010 	.word	0x40020010
 8001a18:	24000238 	.word	0x24000238
 8001a1c:	40020028 	.word	0x40020028

08001a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b0b8      	sub	sp, #224	; 0xe0
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	22b8      	movs	r2, #184	; 0xb8
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f010 faf1 	bl	8012028 <memset>
  if(huart->Instance==USART3)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a2b      	ldr	r2, [pc, #172]	; (8001af8 <HAL_UART_MspInit+0xd8>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d14e      	bne.n	8001aee <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a50:	f04f 0202 	mov.w	r2, #2
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a62:	f107 0310 	add.w	r3, r7, #16
 8001a66:	4618      	mov	r0, r3
 8001a68:	f004 fb4e 	bl	8006108 <HAL_RCCEx_PeriphCLKConfig>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001a72:	f7ff fea7 	bl	80017c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a76:	4b21      	ldr	r3, [pc, #132]	; (8001afc <HAL_UART_MspInit+0xdc>)
 8001a78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a7c:	4a1f      	ldr	r2, [pc, #124]	; (8001afc <HAL_UART_MspInit+0xdc>)
 8001a7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a86:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <HAL_UART_MspInit+0xdc>)
 8001a88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_UART_MspInit+0xdc>)
 8001a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9a:	4a18      	ldr	r2, [pc, #96]	; (8001afc <HAL_UART_MspInit+0xdc>)
 8001a9c:	f043 0308 	orr.w	r3, r3, #8
 8001aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa4:	4b15      	ldr	r3, [pc, #84]	; (8001afc <HAL_UART_MspInit+0xdc>)
 8001aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001ab2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ab6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001acc:	2307      	movs	r3, #7
 8001ace:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4809      	ldr	r0, [pc, #36]	; (8001b00 <HAL_UART_MspInit+0xe0>)
 8001ada:	f003 f971 	bl	8004dc0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2105      	movs	r1, #5
 8001ae2:	2027      	movs	r0, #39	; 0x27
 8001ae4:	f000 fb00 	bl	80020e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ae8:	2027      	movs	r0, #39	; 0x27
 8001aea:	f000 fb17 	bl	800211c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001aee:	bf00      	nop
 8001af0:	37e0      	adds	r7, #224	; 0xe0
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40004800 	.word	0x40004800
 8001afc:	58024400 	.word	0x58024400
 8001b00:	58020c00 	.word	0x58020c00

08001b04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b090      	sub	sp, #64	; 0x40
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b0f      	cmp	r3, #15
 8001b10:	d827      	bhi.n	8001b62 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001b12:	2200      	movs	r2, #0
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	2036      	movs	r0, #54	; 0x36
 8001b18:	f000 fae6 	bl	80020e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b1c:	2036      	movs	r0, #54	; 0x36
 8001b1e:	f000 fafd 	bl	800211c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001b22:	4a29      	ldr	r2, [pc, #164]	; (8001bc8 <HAL_InitTick+0xc4>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b28:	4b28      	ldr	r3, [pc, #160]	; (8001bcc <HAL_InitTick+0xc8>)
 8001b2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b2e:	4a27      	ldr	r2, [pc, #156]	; (8001bcc <HAL_InitTick+0xc8>)
 8001b30:	f043 0310 	orr.w	r3, r3, #16
 8001b34:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b38:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <HAL_InitTick+0xc8>)
 8001b3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b46:	f107 0210 	add.w	r2, r7, #16
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f004 fa97 	bl	8006084 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b58:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d106      	bne.n	8001b6e <HAL_InitTick+0x6a>
 8001b60:	e001      	b.n	8001b66 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e02b      	b.n	8001bbe <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b66:	f004 fa61 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 8001b6a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001b6c:	e004      	b.n	8001b78 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b6e:	f004 fa5d 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 8001b72:	4603      	mov	r3, r0
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b7a:	4a15      	ldr	r2, [pc, #84]	; (8001bd0 <HAL_InitTick+0xcc>)
 8001b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b80:	0c9b      	lsrs	r3, r3, #18
 8001b82:	3b01      	subs	r3, #1
 8001b84:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b86:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <HAL_InitTick+0xd0>)
 8001b88:	4a13      	ldr	r2, [pc, #76]	; (8001bd8 <HAL_InitTick+0xd4>)
 8001b8a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_InitTick+0xd0>)
 8001b8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b92:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b94:	4a0f      	ldr	r2, [pc, #60]	; (8001bd4 <HAL_InitTick+0xd0>)
 8001b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b98:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <HAL_InitTick+0xd0>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <HAL_InitTick+0xd0>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001ba6:	480b      	ldr	r0, [pc, #44]	; (8001bd4 <HAL_InitTick+0xd0>)
 8001ba8:	f007 fa43 	bl	8009032 <HAL_TIM_Base_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d104      	bne.n	8001bbc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001bb2:	4808      	ldr	r0, [pc, #32]	; (8001bd4 <HAL_InitTick+0xd0>)
 8001bb4:	f007 fa9e 	bl	80090f4 <HAL_TIM_Base_Start_IT>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	e000      	b.n	8001bbe <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3740      	adds	r7, #64	; 0x40
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	24000078 	.word	0x24000078
 8001bcc:	58024400 	.word	0x58024400
 8001bd0:	431bde83 	.word	0x431bde83
 8001bd4:	2400cb60 	.word	0x2400cb60
 8001bd8:	40001000 	.word	0x40001000

08001bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <NMI_Handler+0x4>

08001be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be6:	e7fe      	b.n	8001be6 <HardFault_Handler+0x4>

08001be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <MemManage_Handler+0x4>

08001bee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <BusFault_Handler+0x4>

08001bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <UsageFault_Handler+0x4>

08001bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <DMA1_Stream0_IRQHandler+0x10>)
 8001c0e:	f001 fdb9 	bl	8003784 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	240001c0 	.word	0x240001c0

08001c1c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <DMA1_Stream1_IRQHandler+0x10>)
 8001c22:	f001 fdaf 	bl	8003784 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	24000238 	.word	0x24000238

08001c30 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <SPI1_IRQHandler+0x10>)
 8001c36:	f006 fe73 	bl	8008920 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	24000138 	.word	0x24000138

08001c44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c48:	4802      	ldr	r0, [pc, #8]	; (8001c54 <USART3_IRQHandler+0x10>)
 8001c4a:	f007 fe0f 	bl	800986c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	240002b0 	.word	0x240002b0

08001c58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <TIM6_DAC_IRQHandler+0x10>)
 8001c5e:	f007 facf 	bl	8009200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	2400cb60 	.word	0x2400cb60

08001c6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	e00a      	b.n	8001c94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c7e:	f3af 8000 	nop.w
 8001c82:	4601      	mov	r1, r0
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	60ba      	str	r2, [r7, #8]
 8001c8a:	b2ca      	uxtb	r2, r1
 8001c8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	3301      	adds	r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	dbf0      	blt.n	8001c7e <_read+0x12>
  }

  return len;
 8001c9c:	687b      	ldr	r3, [r7, #4]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cce:	605a      	str	r2, [r3, #4]
  return 0;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <_isatty>:

int _isatty(int file)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ce6:	2301      	movs	r3, #1
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d18:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <_sbrk+0x5c>)
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <_sbrk+0x60>)
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <_sbrk+0x64>)
 8001d2e:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <_sbrk+0x68>)
 8001d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d207      	bcs.n	8001d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d40:	f010 fa38 	bl	80121b4 <__errno>
 8001d44:	4603      	mov	r3, r0
 8001d46:	220c      	movs	r2, #12
 8001d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	e009      	b.n	8001d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <_sbrk+0x64>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d56:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <_sbrk+0x64>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <_sbrk+0x64>)
 8001d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d62:	68fb      	ldr	r3, [r7, #12]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	24050000 	.word	0x24050000
 8001d70:	00000400 	.word	0x00000400
 8001d74:	2400cbac 	.word	0x2400cbac
 8001d78:	24015f28 	.word	0x24015f28

08001d7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d80:	4b32      	ldr	r3, [pc, #200]	; (8001e4c <SystemInit+0xd0>)
 8001d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d86:	4a31      	ldr	r2, [pc, #196]	; (8001e4c <SystemInit+0xd0>)
 8001d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d90:	4b2f      	ldr	r3, [pc, #188]	; (8001e50 <SystemInit+0xd4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 030f 	and.w	r3, r3, #15
 8001d98:	2b06      	cmp	r3, #6
 8001d9a:	d807      	bhi.n	8001dac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d9c:	4b2c      	ldr	r3, [pc, #176]	; (8001e50 <SystemInit+0xd4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f023 030f 	bic.w	r3, r3, #15
 8001da4:	4a2a      	ldr	r2, [pc, #168]	; (8001e50 <SystemInit+0xd4>)
 8001da6:	f043 0307 	orr.w	r3, r3, #7
 8001daa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001dac:	4b29      	ldr	r3, [pc, #164]	; (8001e54 <SystemInit+0xd8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a28      	ldr	r2, [pc, #160]	; (8001e54 <SystemInit+0xd8>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001db8:	4b26      	ldr	r3, [pc, #152]	; (8001e54 <SystemInit+0xd8>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001dbe:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <SystemInit+0xd8>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4924      	ldr	r1, [pc, #144]	; (8001e54 <SystemInit+0xd8>)
 8001dc4:	4b24      	ldr	r3, [pc, #144]	; (8001e58 <SystemInit+0xdc>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001dca:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <SystemInit+0xd4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d007      	beq.n	8001de6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001dd6:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <SystemInit+0xd4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 030f 	bic.w	r3, r3, #15
 8001dde:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <SystemInit+0xd4>)
 8001de0:	f043 0307 	orr.w	r3, r3, #7
 8001de4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001de6:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <SystemInit+0xd8>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <SystemInit+0xd8>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001df2:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <SystemInit+0xd8>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001df8:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <SystemInit+0xd8>)
 8001dfa:	4a18      	ldr	r2, [pc, #96]	; (8001e5c <SystemInit+0xe0>)
 8001dfc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <SystemInit+0xd8>)
 8001e00:	4a17      	ldr	r2, [pc, #92]	; (8001e60 <SystemInit+0xe4>)
 8001e02:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e04:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <SystemInit+0xd8>)
 8001e06:	4a17      	ldr	r2, [pc, #92]	; (8001e64 <SystemInit+0xe8>)
 8001e08:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <SystemInit+0xd8>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e10:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <SystemInit+0xd8>)
 8001e12:	4a14      	ldr	r2, [pc, #80]	; (8001e64 <SystemInit+0xe8>)
 8001e14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e16:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <SystemInit+0xd8>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <SystemInit+0xd8>)
 8001e1e:	4a11      	ldr	r2, [pc, #68]	; (8001e64 <SystemInit+0xe8>)
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e22:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <SystemInit+0xd8>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e28:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <SystemInit+0xd8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a09      	ldr	r2, [pc, #36]	; (8001e54 <SystemInit+0xd8>)
 8001e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e34:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <SystemInit+0xd8>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <SystemInit+0xec>)
 8001e3c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001e40:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e42:	bf00      	nop
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000ed00 	.word	0xe000ed00
 8001e50:	52002000 	.word	0x52002000
 8001e54:	58024400 	.word	0x58024400
 8001e58:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e5c:	02020200 	.word	0x02020200
 8001e60:	01ff0000 	.word	0x01ff0000
 8001e64:	01010280 	.word	0x01010280
 8001e68:	52004000 	.word	0x52004000

08001e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e70:	f7ff ff84 	bl	8001d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e74:	480c      	ldr	r0, [pc, #48]	; (8001ea8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e76:	490d      	ldr	r1, [pc, #52]	; (8001eac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e78:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e7c:	e002      	b.n	8001e84 <LoopCopyDataInit>

08001e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e82:	3304      	adds	r3, #4

08001e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e88:	d3f9      	bcc.n	8001e7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e8c:	4c0a      	ldr	r4, [pc, #40]	; (8001eb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e90:	e001      	b.n	8001e96 <LoopFillZerobss>

08001e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e94:	3204      	adds	r2, #4

08001e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e98:	d3fb      	bcc.n	8001e92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e9a:	f010 f991 	bl	80121c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e9e:	f7fe fd5d 	bl	800095c <main>
  bx  lr
 8001ea2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ea4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001ea8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001eac:	2400011c 	.word	0x2400011c
  ldr r2, =_sidata
 8001eb0:	080130ac 	.word	0x080130ac
  ldr r2, =_sbss
 8001eb4:	2400011c 	.word	0x2400011c
  ldr r4, =_ebss
 8001eb8:	24015f28 	.word	0x24015f28

08001ebc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ebc:	e7fe      	b.n	8001ebc <ADC3_IRQHandler>
	...

08001ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec6:	2003      	movs	r0, #3
 8001ec8:	f000 f903 	bl	80020d2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ecc:	f003 ff04 	bl	8005cd8 <HAL_RCC_GetSysClockFreq>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <HAL_Init+0x68>)
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	0a1b      	lsrs	r3, r3, #8
 8001ed8:	f003 030f 	and.w	r3, r3, #15
 8001edc:	4913      	ldr	r1, [pc, #76]	; (8001f2c <HAL_Init+0x6c>)
 8001ede:	5ccb      	ldrb	r3, [r1, r3]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001eea:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <HAL_Init+0x68>)
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <HAL_Init+0x6c>)
 8001ef4:	5cd3      	ldrb	r3, [r2, r3]
 8001ef6:	f003 031f 	and.w	r3, r3, #31
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	fa22 f303 	lsr.w	r3, r2, r3
 8001f00:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <HAL_Init+0x70>)
 8001f02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f04:	4a0b      	ldr	r2, [pc, #44]	; (8001f34 <HAL_Init+0x74>)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f0a:	200f      	movs	r0, #15
 8001f0c:	f7ff fdfa 	bl	8001b04 <HAL_InitTick>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e002      	b.n	8001f20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f1a:	f7ff fc59 	bl	80017d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	58024400 	.word	0x58024400
 8001f2c:	08013028 	.word	0x08013028
 8001f30:	24000074 	.word	0x24000074
 8001f34:	24000070 	.word	0x24000070

08001f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_IncTick+0x20>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_IncTick+0x24>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <HAL_IncTick+0x24>)
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	2400007c 	.word	0x2400007c
 8001f5c:	2400cbb0 	.word	0x2400cbb0

08001f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return uwTick;
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <HAL_GetTick+0x14>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	2400cbb0 	.word	0x2400cbb0

08001f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f94:	4013      	ands	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fa6:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	60d3      	str	r3, [r2, #12]
}
 8001fac:	bf00      	nop
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000ed00 	.word	0xe000ed00
 8001fbc:	05fa0000 	.word	0x05fa0000

08001fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	f003 0307 	and.w	r3, r3, #7
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fe6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	db0b      	blt.n	8002006 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	f003 021f 	and.w	r2, r3, #31
 8001ff4:	4907      	ldr	r1, [pc, #28]	; (8002014 <__NVIC_EnableIRQ+0x38>)
 8001ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8002002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000e100 	.word	0xe000e100

08002018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	6039      	str	r1, [r7, #0]
 8002022:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002024:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002028:	2b00      	cmp	r3, #0
 800202a:	db0a      	blt.n	8002042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	490c      	ldr	r1, [pc, #48]	; (8002064 <__NVIC_SetPriority+0x4c>)
 8002032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002036:	0112      	lsls	r2, r2, #4
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	440b      	add	r3, r1
 800203c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002040:	e00a      	b.n	8002058 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4908      	ldr	r1, [pc, #32]	; (8002068 <__NVIC_SetPriority+0x50>)
 8002048:	88fb      	ldrh	r3, [r7, #6]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	3b04      	subs	r3, #4
 8002050:	0112      	lsls	r2, r2, #4
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	440b      	add	r3, r1
 8002056:	761a      	strb	r2, [r3, #24]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000e100 	.word	0xe000e100
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	; 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f1c3 0307 	rsb	r3, r3, #7
 8002086:	2b04      	cmp	r3, #4
 8002088:	bf28      	it	cs
 800208a:	2304      	movcs	r3, #4
 800208c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3304      	adds	r3, #4
 8002092:	2b06      	cmp	r3, #6
 8002094:	d902      	bls.n	800209c <NVIC_EncodePriority+0x30>
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3b03      	subs	r3, #3
 800209a:	e000      	b.n	800209e <NVIC_EncodePriority+0x32>
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	f04f 32ff 	mov.w	r2, #4294967295
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	401a      	ands	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b4:	f04f 31ff 	mov.w	r1, #4294967295
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	43d9      	mvns	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	4313      	orrs	r3, r2
         );
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3724      	adds	r7, #36	; 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff ff4c 	bl	8001f78 <__NVIC_SetPriorityGrouping>
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020f6:	f7ff ff63 	bl	8001fc0 <__NVIC_GetPriorityGrouping>
 80020fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	68b9      	ldr	r1, [r7, #8]
 8002100:	6978      	ldr	r0, [r7, #20]
 8002102:	f7ff ffb3 	bl	800206c <NVIC_EncodePriority>
 8002106:	4602      	mov	r2, r0
 8002108:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800210c:	4611      	mov	r1, r2
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff ff82 	bl	8002018 <__NVIC_SetPriority>
}
 8002114:	bf00      	nop
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ff56 	bl	8001fdc <__NVIC_EnableIRQ>
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002140:	f7ff ff0e 	bl	8001f60 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e312      	b.n	8002776 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a66      	ldr	r2, [pc, #408]	; (80022f0 <HAL_DMA_Init+0x1b8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d04a      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a65      	ldr	r2, [pc, #404]	; (80022f4 <HAL_DMA_Init+0x1bc>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d045      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a63      	ldr	r2, [pc, #396]	; (80022f8 <HAL_DMA_Init+0x1c0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d040      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a62      	ldr	r2, [pc, #392]	; (80022fc <HAL_DMA_Init+0x1c4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d03b      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a60      	ldr	r2, [pc, #384]	; (8002300 <HAL_DMA_Init+0x1c8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d036      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a5f      	ldr	r2, [pc, #380]	; (8002304 <HAL_DMA_Init+0x1cc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d031      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a5d      	ldr	r2, [pc, #372]	; (8002308 <HAL_DMA_Init+0x1d0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d02c      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a5c      	ldr	r2, [pc, #368]	; (800230c <HAL_DMA_Init+0x1d4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d027      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a5a      	ldr	r2, [pc, #360]	; (8002310 <HAL_DMA_Init+0x1d8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d022      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a59      	ldr	r2, [pc, #356]	; (8002314 <HAL_DMA_Init+0x1dc>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d01d      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a57      	ldr	r2, [pc, #348]	; (8002318 <HAL_DMA_Init+0x1e0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d018      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a56      	ldr	r2, [pc, #344]	; (800231c <HAL_DMA_Init+0x1e4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d013      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a54      	ldr	r2, [pc, #336]	; (8002320 <HAL_DMA_Init+0x1e8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00e      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a53      	ldr	r2, [pc, #332]	; (8002324 <HAL_DMA_Init+0x1ec>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d009      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a51      	ldr	r2, [pc, #324]	; (8002328 <HAL_DMA_Init+0x1f0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d004      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a50      	ldr	r2, [pc, #320]	; (800232c <HAL_DMA_Init+0x1f4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d101      	bne.n	80021f4 <HAL_DMA_Init+0xbc>
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <HAL_DMA_Init+0xbe>
 80021f4:	2300      	movs	r3, #0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 813c 	beq.w	8002474 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a37      	ldr	r2, [pc, #220]	; (80022f0 <HAL_DMA_Init+0x1b8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d04a      	beq.n	80022ac <HAL_DMA_Init+0x174>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a36      	ldr	r2, [pc, #216]	; (80022f4 <HAL_DMA_Init+0x1bc>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d045      	beq.n	80022ac <HAL_DMA_Init+0x174>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a34      	ldr	r2, [pc, #208]	; (80022f8 <HAL_DMA_Init+0x1c0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d040      	beq.n	80022ac <HAL_DMA_Init+0x174>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a33      	ldr	r2, [pc, #204]	; (80022fc <HAL_DMA_Init+0x1c4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d03b      	beq.n	80022ac <HAL_DMA_Init+0x174>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a31      	ldr	r2, [pc, #196]	; (8002300 <HAL_DMA_Init+0x1c8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d036      	beq.n	80022ac <HAL_DMA_Init+0x174>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a30      	ldr	r2, [pc, #192]	; (8002304 <HAL_DMA_Init+0x1cc>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d031      	beq.n	80022ac <HAL_DMA_Init+0x174>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a2e      	ldr	r2, [pc, #184]	; (8002308 <HAL_DMA_Init+0x1d0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d02c      	beq.n	80022ac <HAL_DMA_Init+0x174>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a2d      	ldr	r2, [pc, #180]	; (800230c <HAL_DMA_Init+0x1d4>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d027      	beq.n	80022ac <HAL_DMA_Init+0x174>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a2b      	ldr	r2, [pc, #172]	; (8002310 <HAL_DMA_Init+0x1d8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d022      	beq.n	80022ac <HAL_DMA_Init+0x174>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a2a      	ldr	r2, [pc, #168]	; (8002314 <HAL_DMA_Init+0x1dc>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d01d      	beq.n	80022ac <HAL_DMA_Init+0x174>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a28      	ldr	r2, [pc, #160]	; (8002318 <HAL_DMA_Init+0x1e0>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d018      	beq.n	80022ac <HAL_DMA_Init+0x174>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a27      	ldr	r2, [pc, #156]	; (800231c <HAL_DMA_Init+0x1e4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d013      	beq.n	80022ac <HAL_DMA_Init+0x174>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a25      	ldr	r2, [pc, #148]	; (8002320 <HAL_DMA_Init+0x1e8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d00e      	beq.n	80022ac <HAL_DMA_Init+0x174>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a24      	ldr	r2, [pc, #144]	; (8002324 <HAL_DMA_Init+0x1ec>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d009      	beq.n	80022ac <HAL_DMA_Init+0x174>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a22      	ldr	r2, [pc, #136]	; (8002328 <HAL_DMA_Init+0x1f0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d004      	beq.n	80022ac <HAL_DMA_Init+0x174>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a21      	ldr	r2, [pc, #132]	; (800232c <HAL_DMA_Init+0x1f4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d108      	bne.n	80022be <HAL_DMA_Init+0x186>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0201 	bic.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	e007      	b.n	80022ce <HAL_DMA_Init+0x196>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0201 	bic.w	r2, r2, #1
 80022cc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80022ce:	e02f      	b.n	8002330 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022d0:	f7ff fe46 	bl	8001f60 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b05      	cmp	r3, #5
 80022dc:	d928      	bls.n	8002330 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2220      	movs	r2, #32
 80022e2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2203      	movs	r2, #3
 80022e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e242      	b.n	8002776 <HAL_DMA_Init+0x63e>
 80022f0:	40020010 	.word	0x40020010
 80022f4:	40020028 	.word	0x40020028
 80022f8:	40020040 	.word	0x40020040
 80022fc:	40020058 	.word	0x40020058
 8002300:	40020070 	.word	0x40020070
 8002304:	40020088 	.word	0x40020088
 8002308:	400200a0 	.word	0x400200a0
 800230c:	400200b8 	.word	0x400200b8
 8002310:	40020410 	.word	0x40020410
 8002314:	40020428 	.word	0x40020428
 8002318:	40020440 	.word	0x40020440
 800231c:	40020458 	.word	0x40020458
 8002320:	40020470 	.word	0x40020470
 8002324:	40020488 	.word	0x40020488
 8002328:	400204a0 	.word	0x400204a0
 800232c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1c8      	bne.n	80022d0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	4b83      	ldr	r3, [pc, #524]	; (8002558 <HAL_DMA_Init+0x420>)
 800234a:	4013      	ands	r3, r2
 800234c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002356:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002362:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800236e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4313      	orrs	r3, r2
 800237a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	2b04      	cmp	r3, #4
 8002382:	d107      	bne.n	8002394 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238c:	4313      	orrs	r3, r2
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4313      	orrs	r3, r2
 8002392:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b28      	cmp	r3, #40	; 0x28
 800239a:	d903      	bls.n	80023a4 <HAL_DMA_Init+0x26c>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b2e      	cmp	r3, #46	; 0x2e
 80023a2:	d91f      	bls.n	80023e4 <HAL_DMA_Init+0x2ac>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b3e      	cmp	r3, #62	; 0x3e
 80023aa:	d903      	bls.n	80023b4 <HAL_DMA_Init+0x27c>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b42      	cmp	r3, #66	; 0x42
 80023b2:	d917      	bls.n	80023e4 <HAL_DMA_Init+0x2ac>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b46      	cmp	r3, #70	; 0x46
 80023ba:	d903      	bls.n	80023c4 <HAL_DMA_Init+0x28c>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b48      	cmp	r3, #72	; 0x48
 80023c2:	d90f      	bls.n	80023e4 <HAL_DMA_Init+0x2ac>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b4e      	cmp	r3, #78	; 0x4e
 80023ca:	d903      	bls.n	80023d4 <HAL_DMA_Init+0x29c>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b52      	cmp	r3, #82	; 0x52
 80023d2:	d907      	bls.n	80023e4 <HAL_DMA_Init+0x2ac>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b73      	cmp	r3, #115	; 0x73
 80023da:	d905      	bls.n	80023e8 <HAL_DMA_Init+0x2b0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b77      	cmp	r3, #119	; 0x77
 80023e2:	d801      	bhi.n	80023e8 <HAL_DMA_Init+0x2b0>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <HAL_DMA_Init+0x2b2>
 80023e8:	2300      	movs	r3, #0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023f4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f023 0307 	bic.w	r3, r3, #7
 800240c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	4313      	orrs	r3, r2
 8002416:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	2b04      	cmp	r3, #4
 800241e:	d117      	bne.n	8002450 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	4313      	orrs	r3, r2
 8002428:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00e      	beq.n	8002450 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f002 fb3a 	bl	8004aac <DMA_CheckFifoParam>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2240      	movs	r2, #64	; 0x40
 8002442:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e192      	b.n	8002776 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f002 fa75 	bl	8004948 <DMA_CalcBaseAndBitshift>
 800245e:	4603      	mov	r3, r0
 8002460:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002466:	f003 031f 	and.w	r3, r3, #31
 800246a:	223f      	movs	r2, #63	; 0x3f
 800246c:	409a      	lsls	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	e0c8      	b.n	8002606 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a38      	ldr	r2, [pc, #224]	; (800255c <HAL_DMA_Init+0x424>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d022      	beq.n	80024c4 <HAL_DMA_Init+0x38c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a37      	ldr	r2, [pc, #220]	; (8002560 <HAL_DMA_Init+0x428>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d01d      	beq.n	80024c4 <HAL_DMA_Init+0x38c>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a35      	ldr	r2, [pc, #212]	; (8002564 <HAL_DMA_Init+0x42c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d018      	beq.n	80024c4 <HAL_DMA_Init+0x38c>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a34      	ldr	r2, [pc, #208]	; (8002568 <HAL_DMA_Init+0x430>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d013      	beq.n	80024c4 <HAL_DMA_Init+0x38c>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a32      	ldr	r2, [pc, #200]	; (800256c <HAL_DMA_Init+0x434>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d00e      	beq.n	80024c4 <HAL_DMA_Init+0x38c>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a31      	ldr	r2, [pc, #196]	; (8002570 <HAL_DMA_Init+0x438>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d009      	beq.n	80024c4 <HAL_DMA_Init+0x38c>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a2f      	ldr	r2, [pc, #188]	; (8002574 <HAL_DMA_Init+0x43c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d004      	beq.n	80024c4 <HAL_DMA_Init+0x38c>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a2e      	ldr	r2, [pc, #184]	; (8002578 <HAL_DMA_Init+0x440>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d101      	bne.n	80024c8 <HAL_DMA_Init+0x390>
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <HAL_DMA_Init+0x392>
 80024c8:	2300      	movs	r3, #0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 8092 	beq.w	80025f4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a21      	ldr	r2, [pc, #132]	; (800255c <HAL_DMA_Init+0x424>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d021      	beq.n	800251e <HAL_DMA_Init+0x3e6>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a20      	ldr	r2, [pc, #128]	; (8002560 <HAL_DMA_Init+0x428>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d01c      	beq.n	800251e <HAL_DMA_Init+0x3e6>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a1e      	ldr	r2, [pc, #120]	; (8002564 <HAL_DMA_Init+0x42c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d017      	beq.n	800251e <HAL_DMA_Init+0x3e6>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1d      	ldr	r2, [pc, #116]	; (8002568 <HAL_DMA_Init+0x430>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d012      	beq.n	800251e <HAL_DMA_Init+0x3e6>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1b      	ldr	r2, [pc, #108]	; (800256c <HAL_DMA_Init+0x434>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00d      	beq.n	800251e <HAL_DMA_Init+0x3e6>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a1a      	ldr	r2, [pc, #104]	; (8002570 <HAL_DMA_Init+0x438>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d008      	beq.n	800251e <HAL_DMA_Init+0x3e6>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a18      	ldr	r2, [pc, #96]	; (8002574 <HAL_DMA_Init+0x43c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d003      	beq.n	800251e <HAL_DMA_Init+0x3e6>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a17      	ldr	r2, [pc, #92]	; (8002578 <HAL_DMA_Init+0x440>)
 800251c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2202      	movs	r2, #2
 8002522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4b10      	ldr	r3, [pc, #64]	; (800257c <HAL_DMA_Init+0x444>)
 800253a:	4013      	ands	r3, r2
 800253c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b40      	cmp	r3, #64	; 0x40
 8002544:	d01c      	beq.n	8002580 <HAL_DMA_Init+0x448>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b80      	cmp	r3, #128	; 0x80
 800254c:	d102      	bne.n	8002554 <HAL_DMA_Init+0x41c>
 800254e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002552:	e016      	b.n	8002582 <HAL_DMA_Init+0x44a>
 8002554:	2300      	movs	r3, #0
 8002556:	e014      	b.n	8002582 <HAL_DMA_Init+0x44a>
 8002558:	fe10803f 	.word	0xfe10803f
 800255c:	58025408 	.word	0x58025408
 8002560:	5802541c 	.word	0x5802541c
 8002564:	58025430 	.word	0x58025430
 8002568:	58025444 	.word	0x58025444
 800256c:	58025458 	.word	0x58025458
 8002570:	5802546c 	.word	0x5802546c
 8002574:	58025480 	.word	0x58025480
 8002578:	58025494 	.word	0x58025494
 800257c:	fffe000f 	.word	0xfffe000f
 8002580:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68d2      	ldr	r2, [r2, #12]
 8002586:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002588:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002590:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002598:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80025a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80025a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80025b0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	4b6e      	ldr	r3, [pc, #440]	; (8002780 <HAL_DMA_Init+0x648>)
 80025c8:	4413      	add	r3, r2
 80025ca:	4a6e      	ldr	r2, [pc, #440]	; (8002784 <HAL_DMA_Init+0x64c>)
 80025cc:	fba2 2303 	umull	r2, r3, r2, r3
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	009a      	lsls	r2, r3, #2
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f002 f9b5 	bl	8004948 <DMA_CalcBaseAndBitshift>
 80025de:	4603      	mov	r3, r0
 80025e0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	2201      	movs	r2, #1
 80025ec:	409a      	lsls	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	e008      	b.n	8002606 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2240      	movs	r2, #64	; 0x40
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2203      	movs	r2, #3
 80025fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e0b7      	b.n	8002776 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a5f      	ldr	r2, [pc, #380]	; (8002788 <HAL_DMA_Init+0x650>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d072      	beq.n	80026f6 <HAL_DMA_Init+0x5be>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a5d      	ldr	r2, [pc, #372]	; (800278c <HAL_DMA_Init+0x654>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d06d      	beq.n	80026f6 <HAL_DMA_Init+0x5be>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a5c      	ldr	r2, [pc, #368]	; (8002790 <HAL_DMA_Init+0x658>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d068      	beq.n	80026f6 <HAL_DMA_Init+0x5be>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a5a      	ldr	r2, [pc, #360]	; (8002794 <HAL_DMA_Init+0x65c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d063      	beq.n	80026f6 <HAL_DMA_Init+0x5be>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a59      	ldr	r2, [pc, #356]	; (8002798 <HAL_DMA_Init+0x660>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d05e      	beq.n	80026f6 <HAL_DMA_Init+0x5be>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a57      	ldr	r2, [pc, #348]	; (800279c <HAL_DMA_Init+0x664>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d059      	beq.n	80026f6 <HAL_DMA_Init+0x5be>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a56      	ldr	r2, [pc, #344]	; (80027a0 <HAL_DMA_Init+0x668>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d054      	beq.n	80026f6 <HAL_DMA_Init+0x5be>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a54      	ldr	r2, [pc, #336]	; (80027a4 <HAL_DMA_Init+0x66c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d04f      	beq.n	80026f6 <HAL_DMA_Init+0x5be>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a53      	ldr	r2, [pc, #332]	; (80027a8 <HAL_DMA_Init+0x670>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d04a      	beq.n	80026f6 <HAL_DMA_Init+0x5be>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a51      	ldr	r2, [pc, #324]	; (80027ac <HAL_DMA_Init+0x674>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d045      	beq.n	80026f6 <HAL_DMA_Init+0x5be>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a50      	ldr	r2, [pc, #320]	; (80027b0 <HAL_DMA_Init+0x678>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d040      	beq.n	80026f6 <HAL_DMA_Init+0x5be>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a4e      	ldr	r2, [pc, #312]	; (80027b4 <HAL_DMA_Init+0x67c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d03b      	beq.n	80026f6 <HAL_DMA_Init+0x5be>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a4d      	ldr	r2, [pc, #308]	; (80027b8 <HAL_DMA_Init+0x680>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d036      	beq.n	80026f6 <HAL_DMA_Init+0x5be>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a4b      	ldr	r2, [pc, #300]	; (80027bc <HAL_DMA_Init+0x684>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d031      	beq.n	80026f6 <HAL_DMA_Init+0x5be>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a4a      	ldr	r2, [pc, #296]	; (80027c0 <HAL_DMA_Init+0x688>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d02c      	beq.n	80026f6 <HAL_DMA_Init+0x5be>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a48      	ldr	r2, [pc, #288]	; (80027c4 <HAL_DMA_Init+0x68c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d027      	beq.n	80026f6 <HAL_DMA_Init+0x5be>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a47      	ldr	r2, [pc, #284]	; (80027c8 <HAL_DMA_Init+0x690>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d022      	beq.n	80026f6 <HAL_DMA_Init+0x5be>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a45      	ldr	r2, [pc, #276]	; (80027cc <HAL_DMA_Init+0x694>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d01d      	beq.n	80026f6 <HAL_DMA_Init+0x5be>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a44      	ldr	r2, [pc, #272]	; (80027d0 <HAL_DMA_Init+0x698>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d018      	beq.n	80026f6 <HAL_DMA_Init+0x5be>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a42      	ldr	r2, [pc, #264]	; (80027d4 <HAL_DMA_Init+0x69c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d013      	beq.n	80026f6 <HAL_DMA_Init+0x5be>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a41      	ldr	r2, [pc, #260]	; (80027d8 <HAL_DMA_Init+0x6a0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d00e      	beq.n	80026f6 <HAL_DMA_Init+0x5be>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a3f      	ldr	r2, [pc, #252]	; (80027dc <HAL_DMA_Init+0x6a4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d009      	beq.n	80026f6 <HAL_DMA_Init+0x5be>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a3e      	ldr	r2, [pc, #248]	; (80027e0 <HAL_DMA_Init+0x6a8>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d004      	beq.n	80026f6 <HAL_DMA_Init+0x5be>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a3c      	ldr	r2, [pc, #240]	; (80027e4 <HAL_DMA_Init+0x6ac>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d101      	bne.n	80026fa <HAL_DMA_Init+0x5c2>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <HAL_DMA_Init+0x5c4>
 80026fa:	2300      	movs	r3, #0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d032      	beq.n	8002766 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f002 fa4f 	bl	8004ba4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b80      	cmp	r3, #128	; 0x80
 800270c:	d102      	bne.n	8002714 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002728:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d010      	beq.n	8002754 <HAL_DMA_Init+0x61c>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b08      	cmp	r3, #8
 8002738:	d80c      	bhi.n	8002754 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f002 facc 	bl	8004cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	e008      	b.n	8002766 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	a7fdabf8 	.word	0xa7fdabf8
 8002784:	cccccccd 	.word	0xcccccccd
 8002788:	40020010 	.word	0x40020010
 800278c:	40020028 	.word	0x40020028
 8002790:	40020040 	.word	0x40020040
 8002794:	40020058 	.word	0x40020058
 8002798:	40020070 	.word	0x40020070
 800279c:	40020088 	.word	0x40020088
 80027a0:	400200a0 	.word	0x400200a0
 80027a4:	400200b8 	.word	0x400200b8
 80027a8:	40020410 	.word	0x40020410
 80027ac:	40020428 	.word	0x40020428
 80027b0:	40020440 	.word	0x40020440
 80027b4:	40020458 	.word	0x40020458
 80027b8:	40020470 	.word	0x40020470
 80027bc:	40020488 	.word	0x40020488
 80027c0:	400204a0 	.word	0x400204a0
 80027c4:	400204b8 	.word	0x400204b8
 80027c8:	58025408 	.word	0x58025408
 80027cc:	5802541c 	.word	0x5802541c
 80027d0:	58025430 	.word	0x58025430
 80027d4:	58025444 	.word	0x58025444
 80027d8:	58025458 	.word	0x58025458
 80027dc:	5802546c 	.word	0x5802546c
 80027e0:	58025480 	.word	0x58025480
 80027e4:	58025494 	.word	0x58025494

080027e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e226      	b.n	8002c52 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800280a:	2b01      	cmp	r3, #1
 800280c:	d101      	bne.n	8002812 <HAL_DMA_Start_IT+0x2a>
 800280e:	2302      	movs	r3, #2
 8002810:	e21f      	b.n	8002c52 <HAL_DMA_Start_IT+0x46a>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b01      	cmp	r3, #1
 8002824:	f040 820a 	bne.w	8002c3c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a68      	ldr	r2, [pc, #416]	; (80029dc <HAL_DMA_Start_IT+0x1f4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d04a      	beq.n	80028d6 <HAL_DMA_Start_IT+0xee>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a66      	ldr	r2, [pc, #408]	; (80029e0 <HAL_DMA_Start_IT+0x1f8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d045      	beq.n	80028d6 <HAL_DMA_Start_IT+0xee>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a65      	ldr	r2, [pc, #404]	; (80029e4 <HAL_DMA_Start_IT+0x1fc>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d040      	beq.n	80028d6 <HAL_DMA_Start_IT+0xee>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a63      	ldr	r2, [pc, #396]	; (80029e8 <HAL_DMA_Start_IT+0x200>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d03b      	beq.n	80028d6 <HAL_DMA_Start_IT+0xee>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a62      	ldr	r2, [pc, #392]	; (80029ec <HAL_DMA_Start_IT+0x204>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d036      	beq.n	80028d6 <HAL_DMA_Start_IT+0xee>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a60      	ldr	r2, [pc, #384]	; (80029f0 <HAL_DMA_Start_IT+0x208>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d031      	beq.n	80028d6 <HAL_DMA_Start_IT+0xee>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a5f      	ldr	r2, [pc, #380]	; (80029f4 <HAL_DMA_Start_IT+0x20c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d02c      	beq.n	80028d6 <HAL_DMA_Start_IT+0xee>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a5d      	ldr	r2, [pc, #372]	; (80029f8 <HAL_DMA_Start_IT+0x210>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d027      	beq.n	80028d6 <HAL_DMA_Start_IT+0xee>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a5c      	ldr	r2, [pc, #368]	; (80029fc <HAL_DMA_Start_IT+0x214>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d022      	beq.n	80028d6 <HAL_DMA_Start_IT+0xee>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a5a      	ldr	r2, [pc, #360]	; (8002a00 <HAL_DMA_Start_IT+0x218>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d01d      	beq.n	80028d6 <HAL_DMA_Start_IT+0xee>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a59      	ldr	r2, [pc, #356]	; (8002a04 <HAL_DMA_Start_IT+0x21c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d018      	beq.n	80028d6 <HAL_DMA_Start_IT+0xee>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a57      	ldr	r2, [pc, #348]	; (8002a08 <HAL_DMA_Start_IT+0x220>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d013      	beq.n	80028d6 <HAL_DMA_Start_IT+0xee>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a56      	ldr	r2, [pc, #344]	; (8002a0c <HAL_DMA_Start_IT+0x224>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00e      	beq.n	80028d6 <HAL_DMA_Start_IT+0xee>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a54      	ldr	r2, [pc, #336]	; (8002a10 <HAL_DMA_Start_IT+0x228>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d009      	beq.n	80028d6 <HAL_DMA_Start_IT+0xee>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a53      	ldr	r2, [pc, #332]	; (8002a14 <HAL_DMA_Start_IT+0x22c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d004      	beq.n	80028d6 <HAL_DMA_Start_IT+0xee>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a51      	ldr	r2, [pc, #324]	; (8002a18 <HAL_DMA_Start_IT+0x230>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d108      	bne.n	80028e8 <HAL_DMA_Start_IT+0x100>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0201 	bic.w	r2, r2, #1
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	e007      	b.n	80028f8 <HAL_DMA_Start_IT+0x110>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0201 	bic.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f001 fe76 	bl	80045f0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a34      	ldr	r2, [pc, #208]	; (80029dc <HAL_DMA_Start_IT+0x1f4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d04a      	beq.n	80029a4 <HAL_DMA_Start_IT+0x1bc>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a33      	ldr	r2, [pc, #204]	; (80029e0 <HAL_DMA_Start_IT+0x1f8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d045      	beq.n	80029a4 <HAL_DMA_Start_IT+0x1bc>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a31      	ldr	r2, [pc, #196]	; (80029e4 <HAL_DMA_Start_IT+0x1fc>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d040      	beq.n	80029a4 <HAL_DMA_Start_IT+0x1bc>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a30      	ldr	r2, [pc, #192]	; (80029e8 <HAL_DMA_Start_IT+0x200>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d03b      	beq.n	80029a4 <HAL_DMA_Start_IT+0x1bc>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a2e      	ldr	r2, [pc, #184]	; (80029ec <HAL_DMA_Start_IT+0x204>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d036      	beq.n	80029a4 <HAL_DMA_Start_IT+0x1bc>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a2d      	ldr	r2, [pc, #180]	; (80029f0 <HAL_DMA_Start_IT+0x208>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d031      	beq.n	80029a4 <HAL_DMA_Start_IT+0x1bc>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a2b      	ldr	r2, [pc, #172]	; (80029f4 <HAL_DMA_Start_IT+0x20c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d02c      	beq.n	80029a4 <HAL_DMA_Start_IT+0x1bc>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a2a      	ldr	r2, [pc, #168]	; (80029f8 <HAL_DMA_Start_IT+0x210>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d027      	beq.n	80029a4 <HAL_DMA_Start_IT+0x1bc>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a28      	ldr	r2, [pc, #160]	; (80029fc <HAL_DMA_Start_IT+0x214>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d022      	beq.n	80029a4 <HAL_DMA_Start_IT+0x1bc>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a27      	ldr	r2, [pc, #156]	; (8002a00 <HAL_DMA_Start_IT+0x218>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d01d      	beq.n	80029a4 <HAL_DMA_Start_IT+0x1bc>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a25      	ldr	r2, [pc, #148]	; (8002a04 <HAL_DMA_Start_IT+0x21c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d018      	beq.n	80029a4 <HAL_DMA_Start_IT+0x1bc>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a24      	ldr	r2, [pc, #144]	; (8002a08 <HAL_DMA_Start_IT+0x220>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d013      	beq.n	80029a4 <HAL_DMA_Start_IT+0x1bc>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a22      	ldr	r2, [pc, #136]	; (8002a0c <HAL_DMA_Start_IT+0x224>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d00e      	beq.n	80029a4 <HAL_DMA_Start_IT+0x1bc>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a21      	ldr	r2, [pc, #132]	; (8002a10 <HAL_DMA_Start_IT+0x228>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d009      	beq.n	80029a4 <HAL_DMA_Start_IT+0x1bc>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a1f      	ldr	r2, [pc, #124]	; (8002a14 <HAL_DMA_Start_IT+0x22c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d004      	beq.n	80029a4 <HAL_DMA_Start_IT+0x1bc>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1e      	ldr	r2, [pc, #120]	; (8002a18 <HAL_DMA_Start_IT+0x230>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d101      	bne.n	80029a8 <HAL_DMA_Start_IT+0x1c0>
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <HAL_DMA_Start_IT+0x1c2>
 80029a8:	2300      	movs	r3, #0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d036      	beq.n	8002a1c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f023 021e 	bic.w	r2, r3, #30
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 0216 	orr.w	r2, r2, #22
 80029c0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d03e      	beq.n	8002a48 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0208 	orr.w	r2, r2, #8
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	e035      	b.n	8002a48 <HAL_DMA_Start_IT+0x260>
 80029dc:	40020010 	.word	0x40020010
 80029e0:	40020028 	.word	0x40020028
 80029e4:	40020040 	.word	0x40020040
 80029e8:	40020058 	.word	0x40020058
 80029ec:	40020070 	.word	0x40020070
 80029f0:	40020088 	.word	0x40020088
 80029f4:	400200a0 	.word	0x400200a0
 80029f8:	400200b8 	.word	0x400200b8
 80029fc:	40020410 	.word	0x40020410
 8002a00:	40020428 	.word	0x40020428
 8002a04:	40020440 	.word	0x40020440
 8002a08:	40020458 	.word	0x40020458
 8002a0c:	40020470 	.word	0x40020470
 8002a10:	40020488 	.word	0x40020488
 8002a14:	400204a0 	.word	0x400204a0
 8002a18:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 020e 	bic.w	r2, r3, #14
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 020a 	orr.w	r2, r2, #10
 8002a2e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d007      	beq.n	8002a48 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0204 	orr.w	r2, r2, #4
 8002a46:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a83      	ldr	r2, [pc, #524]	; (8002c5c <HAL_DMA_Start_IT+0x474>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d072      	beq.n	8002b38 <HAL_DMA_Start_IT+0x350>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a82      	ldr	r2, [pc, #520]	; (8002c60 <HAL_DMA_Start_IT+0x478>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d06d      	beq.n	8002b38 <HAL_DMA_Start_IT+0x350>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a80      	ldr	r2, [pc, #512]	; (8002c64 <HAL_DMA_Start_IT+0x47c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d068      	beq.n	8002b38 <HAL_DMA_Start_IT+0x350>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a7f      	ldr	r2, [pc, #508]	; (8002c68 <HAL_DMA_Start_IT+0x480>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d063      	beq.n	8002b38 <HAL_DMA_Start_IT+0x350>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a7d      	ldr	r2, [pc, #500]	; (8002c6c <HAL_DMA_Start_IT+0x484>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d05e      	beq.n	8002b38 <HAL_DMA_Start_IT+0x350>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a7c      	ldr	r2, [pc, #496]	; (8002c70 <HAL_DMA_Start_IT+0x488>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d059      	beq.n	8002b38 <HAL_DMA_Start_IT+0x350>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a7a      	ldr	r2, [pc, #488]	; (8002c74 <HAL_DMA_Start_IT+0x48c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d054      	beq.n	8002b38 <HAL_DMA_Start_IT+0x350>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a79      	ldr	r2, [pc, #484]	; (8002c78 <HAL_DMA_Start_IT+0x490>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d04f      	beq.n	8002b38 <HAL_DMA_Start_IT+0x350>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a77      	ldr	r2, [pc, #476]	; (8002c7c <HAL_DMA_Start_IT+0x494>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d04a      	beq.n	8002b38 <HAL_DMA_Start_IT+0x350>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a76      	ldr	r2, [pc, #472]	; (8002c80 <HAL_DMA_Start_IT+0x498>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d045      	beq.n	8002b38 <HAL_DMA_Start_IT+0x350>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a74      	ldr	r2, [pc, #464]	; (8002c84 <HAL_DMA_Start_IT+0x49c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d040      	beq.n	8002b38 <HAL_DMA_Start_IT+0x350>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a73      	ldr	r2, [pc, #460]	; (8002c88 <HAL_DMA_Start_IT+0x4a0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d03b      	beq.n	8002b38 <HAL_DMA_Start_IT+0x350>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a71      	ldr	r2, [pc, #452]	; (8002c8c <HAL_DMA_Start_IT+0x4a4>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d036      	beq.n	8002b38 <HAL_DMA_Start_IT+0x350>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a70      	ldr	r2, [pc, #448]	; (8002c90 <HAL_DMA_Start_IT+0x4a8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d031      	beq.n	8002b38 <HAL_DMA_Start_IT+0x350>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a6e      	ldr	r2, [pc, #440]	; (8002c94 <HAL_DMA_Start_IT+0x4ac>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d02c      	beq.n	8002b38 <HAL_DMA_Start_IT+0x350>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a6d      	ldr	r2, [pc, #436]	; (8002c98 <HAL_DMA_Start_IT+0x4b0>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d027      	beq.n	8002b38 <HAL_DMA_Start_IT+0x350>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a6b      	ldr	r2, [pc, #428]	; (8002c9c <HAL_DMA_Start_IT+0x4b4>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d022      	beq.n	8002b38 <HAL_DMA_Start_IT+0x350>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a6a      	ldr	r2, [pc, #424]	; (8002ca0 <HAL_DMA_Start_IT+0x4b8>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d01d      	beq.n	8002b38 <HAL_DMA_Start_IT+0x350>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a68      	ldr	r2, [pc, #416]	; (8002ca4 <HAL_DMA_Start_IT+0x4bc>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d018      	beq.n	8002b38 <HAL_DMA_Start_IT+0x350>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a67      	ldr	r2, [pc, #412]	; (8002ca8 <HAL_DMA_Start_IT+0x4c0>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d013      	beq.n	8002b38 <HAL_DMA_Start_IT+0x350>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a65      	ldr	r2, [pc, #404]	; (8002cac <HAL_DMA_Start_IT+0x4c4>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00e      	beq.n	8002b38 <HAL_DMA_Start_IT+0x350>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a64      	ldr	r2, [pc, #400]	; (8002cb0 <HAL_DMA_Start_IT+0x4c8>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d009      	beq.n	8002b38 <HAL_DMA_Start_IT+0x350>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a62      	ldr	r2, [pc, #392]	; (8002cb4 <HAL_DMA_Start_IT+0x4cc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d004      	beq.n	8002b38 <HAL_DMA_Start_IT+0x350>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a61      	ldr	r2, [pc, #388]	; (8002cb8 <HAL_DMA_Start_IT+0x4d0>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d101      	bne.n	8002b3c <HAL_DMA_Start_IT+0x354>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <HAL_DMA_Start_IT+0x356>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d01a      	beq.n	8002b78 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d007      	beq.n	8002b60 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b5e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d007      	beq.n	8002b78 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b76:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a37      	ldr	r2, [pc, #220]	; (8002c5c <HAL_DMA_Start_IT+0x474>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d04a      	beq.n	8002c18 <HAL_DMA_Start_IT+0x430>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a36      	ldr	r2, [pc, #216]	; (8002c60 <HAL_DMA_Start_IT+0x478>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d045      	beq.n	8002c18 <HAL_DMA_Start_IT+0x430>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a34      	ldr	r2, [pc, #208]	; (8002c64 <HAL_DMA_Start_IT+0x47c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d040      	beq.n	8002c18 <HAL_DMA_Start_IT+0x430>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a33      	ldr	r2, [pc, #204]	; (8002c68 <HAL_DMA_Start_IT+0x480>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d03b      	beq.n	8002c18 <HAL_DMA_Start_IT+0x430>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a31      	ldr	r2, [pc, #196]	; (8002c6c <HAL_DMA_Start_IT+0x484>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d036      	beq.n	8002c18 <HAL_DMA_Start_IT+0x430>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a30      	ldr	r2, [pc, #192]	; (8002c70 <HAL_DMA_Start_IT+0x488>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d031      	beq.n	8002c18 <HAL_DMA_Start_IT+0x430>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a2e      	ldr	r2, [pc, #184]	; (8002c74 <HAL_DMA_Start_IT+0x48c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d02c      	beq.n	8002c18 <HAL_DMA_Start_IT+0x430>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a2d      	ldr	r2, [pc, #180]	; (8002c78 <HAL_DMA_Start_IT+0x490>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d027      	beq.n	8002c18 <HAL_DMA_Start_IT+0x430>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a2b      	ldr	r2, [pc, #172]	; (8002c7c <HAL_DMA_Start_IT+0x494>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d022      	beq.n	8002c18 <HAL_DMA_Start_IT+0x430>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a2a      	ldr	r2, [pc, #168]	; (8002c80 <HAL_DMA_Start_IT+0x498>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d01d      	beq.n	8002c18 <HAL_DMA_Start_IT+0x430>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a28      	ldr	r2, [pc, #160]	; (8002c84 <HAL_DMA_Start_IT+0x49c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d018      	beq.n	8002c18 <HAL_DMA_Start_IT+0x430>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a27      	ldr	r2, [pc, #156]	; (8002c88 <HAL_DMA_Start_IT+0x4a0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d013      	beq.n	8002c18 <HAL_DMA_Start_IT+0x430>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a25      	ldr	r2, [pc, #148]	; (8002c8c <HAL_DMA_Start_IT+0x4a4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00e      	beq.n	8002c18 <HAL_DMA_Start_IT+0x430>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a24      	ldr	r2, [pc, #144]	; (8002c90 <HAL_DMA_Start_IT+0x4a8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d009      	beq.n	8002c18 <HAL_DMA_Start_IT+0x430>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a22      	ldr	r2, [pc, #136]	; (8002c94 <HAL_DMA_Start_IT+0x4ac>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d004      	beq.n	8002c18 <HAL_DMA_Start_IT+0x430>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a21      	ldr	r2, [pc, #132]	; (8002c98 <HAL_DMA_Start_IT+0x4b0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d108      	bne.n	8002c2a <HAL_DMA_Start_IT+0x442>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0201 	orr.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	e012      	b.n	8002c50 <HAL_DMA_Start_IT+0x468>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0201 	orr.w	r2, r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	e009      	b.n	8002c50 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40020010 	.word	0x40020010
 8002c60:	40020028 	.word	0x40020028
 8002c64:	40020040 	.word	0x40020040
 8002c68:	40020058 	.word	0x40020058
 8002c6c:	40020070 	.word	0x40020070
 8002c70:	40020088 	.word	0x40020088
 8002c74:	400200a0 	.word	0x400200a0
 8002c78:	400200b8 	.word	0x400200b8
 8002c7c:	40020410 	.word	0x40020410
 8002c80:	40020428 	.word	0x40020428
 8002c84:	40020440 	.word	0x40020440
 8002c88:	40020458 	.word	0x40020458
 8002c8c:	40020470 	.word	0x40020470
 8002c90:	40020488 	.word	0x40020488
 8002c94:	400204a0 	.word	0x400204a0
 8002c98:	400204b8 	.word	0x400204b8
 8002c9c:	58025408 	.word	0x58025408
 8002ca0:	5802541c 	.word	0x5802541c
 8002ca4:	58025430 	.word	0x58025430
 8002ca8:	58025444 	.word	0x58025444
 8002cac:	58025458 	.word	0x58025458
 8002cb0:	5802546c 	.word	0x5802546c
 8002cb4:	58025480 	.word	0x58025480
 8002cb8:	58025494 	.word	0x58025494

08002cbc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002cc4:	f7ff f94c 	bl	8001f60 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e2dc      	b.n	800328e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d008      	beq.n	8002cf2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2280      	movs	r2, #128	; 0x80
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e2cd      	b.n	800328e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a76      	ldr	r2, [pc, #472]	; (8002ed0 <HAL_DMA_Abort+0x214>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d04a      	beq.n	8002d92 <HAL_DMA_Abort+0xd6>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a74      	ldr	r2, [pc, #464]	; (8002ed4 <HAL_DMA_Abort+0x218>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d045      	beq.n	8002d92 <HAL_DMA_Abort+0xd6>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a73      	ldr	r2, [pc, #460]	; (8002ed8 <HAL_DMA_Abort+0x21c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d040      	beq.n	8002d92 <HAL_DMA_Abort+0xd6>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a71      	ldr	r2, [pc, #452]	; (8002edc <HAL_DMA_Abort+0x220>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d03b      	beq.n	8002d92 <HAL_DMA_Abort+0xd6>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a70      	ldr	r2, [pc, #448]	; (8002ee0 <HAL_DMA_Abort+0x224>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d036      	beq.n	8002d92 <HAL_DMA_Abort+0xd6>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a6e      	ldr	r2, [pc, #440]	; (8002ee4 <HAL_DMA_Abort+0x228>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d031      	beq.n	8002d92 <HAL_DMA_Abort+0xd6>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a6d      	ldr	r2, [pc, #436]	; (8002ee8 <HAL_DMA_Abort+0x22c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d02c      	beq.n	8002d92 <HAL_DMA_Abort+0xd6>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a6b      	ldr	r2, [pc, #428]	; (8002eec <HAL_DMA_Abort+0x230>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d027      	beq.n	8002d92 <HAL_DMA_Abort+0xd6>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a6a      	ldr	r2, [pc, #424]	; (8002ef0 <HAL_DMA_Abort+0x234>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d022      	beq.n	8002d92 <HAL_DMA_Abort+0xd6>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a68      	ldr	r2, [pc, #416]	; (8002ef4 <HAL_DMA_Abort+0x238>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d01d      	beq.n	8002d92 <HAL_DMA_Abort+0xd6>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a67      	ldr	r2, [pc, #412]	; (8002ef8 <HAL_DMA_Abort+0x23c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d018      	beq.n	8002d92 <HAL_DMA_Abort+0xd6>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a65      	ldr	r2, [pc, #404]	; (8002efc <HAL_DMA_Abort+0x240>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d013      	beq.n	8002d92 <HAL_DMA_Abort+0xd6>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a64      	ldr	r2, [pc, #400]	; (8002f00 <HAL_DMA_Abort+0x244>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d00e      	beq.n	8002d92 <HAL_DMA_Abort+0xd6>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a62      	ldr	r2, [pc, #392]	; (8002f04 <HAL_DMA_Abort+0x248>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d009      	beq.n	8002d92 <HAL_DMA_Abort+0xd6>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a61      	ldr	r2, [pc, #388]	; (8002f08 <HAL_DMA_Abort+0x24c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d004      	beq.n	8002d92 <HAL_DMA_Abort+0xd6>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a5f      	ldr	r2, [pc, #380]	; (8002f0c <HAL_DMA_Abort+0x250>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d101      	bne.n	8002d96 <HAL_DMA_Abort+0xda>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <HAL_DMA_Abort+0xdc>
 8002d96:	2300      	movs	r3, #0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d013      	beq.n	8002dc4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 021e 	bic.w	r2, r2, #30
 8002daa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695a      	ldr	r2, [r3, #20]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	e00a      	b.n	8002dda <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 020e 	bic.w	r2, r2, #14
 8002dd2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a3c      	ldr	r2, [pc, #240]	; (8002ed0 <HAL_DMA_Abort+0x214>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d072      	beq.n	8002eca <HAL_DMA_Abort+0x20e>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a3a      	ldr	r2, [pc, #232]	; (8002ed4 <HAL_DMA_Abort+0x218>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d06d      	beq.n	8002eca <HAL_DMA_Abort+0x20e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a39      	ldr	r2, [pc, #228]	; (8002ed8 <HAL_DMA_Abort+0x21c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d068      	beq.n	8002eca <HAL_DMA_Abort+0x20e>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a37      	ldr	r2, [pc, #220]	; (8002edc <HAL_DMA_Abort+0x220>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d063      	beq.n	8002eca <HAL_DMA_Abort+0x20e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a36      	ldr	r2, [pc, #216]	; (8002ee0 <HAL_DMA_Abort+0x224>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d05e      	beq.n	8002eca <HAL_DMA_Abort+0x20e>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a34      	ldr	r2, [pc, #208]	; (8002ee4 <HAL_DMA_Abort+0x228>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d059      	beq.n	8002eca <HAL_DMA_Abort+0x20e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a33      	ldr	r2, [pc, #204]	; (8002ee8 <HAL_DMA_Abort+0x22c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d054      	beq.n	8002eca <HAL_DMA_Abort+0x20e>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a31      	ldr	r2, [pc, #196]	; (8002eec <HAL_DMA_Abort+0x230>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d04f      	beq.n	8002eca <HAL_DMA_Abort+0x20e>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a30      	ldr	r2, [pc, #192]	; (8002ef0 <HAL_DMA_Abort+0x234>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d04a      	beq.n	8002eca <HAL_DMA_Abort+0x20e>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a2e      	ldr	r2, [pc, #184]	; (8002ef4 <HAL_DMA_Abort+0x238>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d045      	beq.n	8002eca <HAL_DMA_Abort+0x20e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a2d      	ldr	r2, [pc, #180]	; (8002ef8 <HAL_DMA_Abort+0x23c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d040      	beq.n	8002eca <HAL_DMA_Abort+0x20e>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a2b      	ldr	r2, [pc, #172]	; (8002efc <HAL_DMA_Abort+0x240>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d03b      	beq.n	8002eca <HAL_DMA_Abort+0x20e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a2a      	ldr	r2, [pc, #168]	; (8002f00 <HAL_DMA_Abort+0x244>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d036      	beq.n	8002eca <HAL_DMA_Abort+0x20e>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a28      	ldr	r2, [pc, #160]	; (8002f04 <HAL_DMA_Abort+0x248>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d031      	beq.n	8002eca <HAL_DMA_Abort+0x20e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a27      	ldr	r2, [pc, #156]	; (8002f08 <HAL_DMA_Abort+0x24c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d02c      	beq.n	8002eca <HAL_DMA_Abort+0x20e>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a25      	ldr	r2, [pc, #148]	; (8002f0c <HAL_DMA_Abort+0x250>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d027      	beq.n	8002eca <HAL_DMA_Abort+0x20e>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a24      	ldr	r2, [pc, #144]	; (8002f10 <HAL_DMA_Abort+0x254>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d022      	beq.n	8002eca <HAL_DMA_Abort+0x20e>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a22      	ldr	r2, [pc, #136]	; (8002f14 <HAL_DMA_Abort+0x258>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d01d      	beq.n	8002eca <HAL_DMA_Abort+0x20e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a21      	ldr	r2, [pc, #132]	; (8002f18 <HAL_DMA_Abort+0x25c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d018      	beq.n	8002eca <HAL_DMA_Abort+0x20e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a1f      	ldr	r2, [pc, #124]	; (8002f1c <HAL_DMA_Abort+0x260>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d013      	beq.n	8002eca <HAL_DMA_Abort+0x20e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a1e      	ldr	r2, [pc, #120]	; (8002f20 <HAL_DMA_Abort+0x264>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d00e      	beq.n	8002eca <HAL_DMA_Abort+0x20e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a1c      	ldr	r2, [pc, #112]	; (8002f24 <HAL_DMA_Abort+0x268>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d009      	beq.n	8002eca <HAL_DMA_Abort+0x20e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a1b      	ldr	r2, [pc, #108]	; (8002f28 <HAL_DMA_Abort+0x26c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d004      	beq.n	8002eca <HAL_DMA_Abort+0x20e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a19      	ldr	r2, [pc, #100]	; (8002f2c <HAL_DMA_Abort+0x270>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d132      	bne.n	8002f30 <HAL_DMA_Abort+0x274>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e031      	b.n	8002f32 <HAL_DMA_Abort+0x276>
 8002ece:	bf00      	nop
 8002ed0:	40020010 	.word	0x40020010
 8002ed4:	40020028 	.word	0x40020028
 8002ed8:	40020040 	.word	0x40020040
 8002edc:	40020058 	.word	0x40020058
 8002ee0:	40020070 	.word	0x40020070
 8002ee4:	40020088 	.word	0x40020088
 8002ee8:	400200a0 	.word	0x400200a0
 8002eec:	400200b8 	.word	0x400200b8
 8002ef0:	40020410 	.word	0x40020410
 8002ef4:	40020428 	.word	0x40020428
 8002ef8:	40020440 	.word	0x40020440
 8002efc:	40020458 	.word	0x40020458
 8002f00:	40020470 	.word	0x40020470
 8002f04:	40020488 	.word	0x40020488
 8002f08:	400204a0 	.word	0x400204a0
 8002f0c:	400204b8 	.word	0x400204b8
 8002f10:	58025408 	.word	0x58025408
 8002f14:	5802541c 	.word	0x5802541c
 8002f18:	58025430 	.word	0x58025430
 8002f1c:	58025444 	.word	0x58025444
 8002f20:	58025458 	.word	0x58025458
 8002f24:	5802546c 	.word	0x5802546c
 8002f28:	58025480 	.word	0x58025480
 8002f2c:	58025494 	.word	0x58025494
 8002f30:	2300      	movs	r3, #0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d007      	beq.n	8002f46 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f44:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a6d      	ldr	r2, [pc, #436]	; (8003100 <HAL_DMA_Abort+0x444>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d04a      	beq.n	8002fe6 <HAL_DMA_Abort+0x32a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a6b      	ldr	r2, [pc, #428]	; (8003104 <HAL_DMA_Abort+0x448>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d045      	beq.n	8002fe6 <HAL_DMA_Abort+0x32a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a6a      	ldr	r2, [pc, #424]	; (8003108 <HAL_DMA_Abort+0x44c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d040      	beq.n	8002fe6 <HAL_DMA_Abort+0x32a>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a68      	ldr	r2, [pc, #416]	; (800310c <HAL_DMA_Abort+0x450>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d03b      	beq.n	8002fe6 <HAL_DMA_Abort+0x32a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a67      	ldr	r2, [pc, #412]	; (8003110 <HAL_DMA_Abort+0x454>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d036      	beq.n	8002fe6 <HAL_DMA_Abort+0x32a>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a65      	ldr	r2, [pc, #404]	; (8003114 <HAL_DMA_Abort+0x458>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d031      	beq.n	8002fe6 <HAL_DMA_Abort+0x32a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a64      	ldr	r2, [pc, #400]	; (8003118 <HAL_DMA_Abort+0x45c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d02c      	beq.n	8002fe6 <HAL_DMA_Abort+0x32a>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a62      	ldr	r2, [pc, #392]	; (800311c <HAL_DMA_Abort+0x460>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d027      	beq.n	8002fe6 <HAL_DMA_Abort+0x32a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a61      	ldr	r2, [pc, #388]	; (8003120 <HAL_DMA_Abort+0x464>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d022      	beq.n	8002fe6 <HAL_DMA_Abort+0x32a>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a5f      	ldr	r2, [pc, #380]	; (8003124 <HAL_DMA_Abort+0x468>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d01d      	beq.n	8002fe6 <HAL_DMA_Abort+0x32a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a5e      	ldr	r2, [pc, #376]	; (8003128 <HAL_DMA_Abort+0x46c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d018      	beq.n	8002fe6 <HAL_DMA_Abort+0x32a>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a5c      	ldr	r2, [pc, #368]	; (800312c <HAL_DMA_Abort+0x470>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d013      	beq.n	8002fe6 <HAL_DMA_Abort+0x32a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a5b      	ldr	r2, [pc, #364]	; (8003130 <HAL_DMA_Abort+0x474>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d00e      	beq.n	8002fe6 <HAL_DMA_Abort+0x32a>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a59      	ldr	r2, [pc, #356]	; (8003134 <HAL_DMA_Abort+0x478>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d009      	beq.n	8002fe6 <HAL_DMA_Abort+0x32a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a58      	ldr	r2, [pc, #352]	; (8003138 <HAL_DMA_Abort+0x47c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d004      	beq.n	8002fe6 <HAL_DMA_Abort+0x32a>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a56      	ldr	r2, [pc, #344]	; (800313c <HAL_DMA_Abort+0x480>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d108      	bne.n	8002ff8 <HAL_DMA_Abort+0x33c>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0201 	bic.w	r2, r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	e007      	b.n	8003008 <HAL_DMA_Abort+0x34c>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0201 	bic.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003008:	e013      	b.n	8003032 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800300a:	f7fe ffa9 	bl	8001f60 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b05      	cmp	r3, #5
 8003016:	d90c      	bls.n	8003032 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2220      	movs	r2, #32
 800301c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2203      	movs	r2, #3
 8003022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e12d      	b.n	800328e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1e5      	bne.n	800300a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a2f      	ldr	r2, [pc, #188]	; (8003100 <HAL_DMA_Abort+0x444>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d04a      	beq.n	80030de <HAL_DMA_Abort+0x422>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a2d      	ldr	r2, [pc, #180]	; (8003104 <HAL_DMA_Abort+0x448>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d045      	beq.n	80030de <HAL_DMA_Abort+0x422>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a2c      	ldr	r2, [pc, #176]	; (8003108 <HAL_DMA_Abort+0x44c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d040      	beq.n	80030de <HAL_DMA_Abort+0x422>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a2a      	ldr	r2, [pc, #168]	; (800310c <HAL_DMA_Abort+0x450>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d03b      	beq.n	80030de <HAL_DMA_Abort+0x422>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a29      	ldr	r2, [pc, #164]	; (8003110 <HAL_DMA_Abort+0x454>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d036      	beq.n	80030de <HAL_DMA_Abort+0x422>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a27      	ldr	r2, [pc, #156]	; (8003114 <HAL_DMA_Abort+0x458>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d031      	beq.n	80030de <HAL_DMA_Abort+0x422>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a26      	ldr	r2, [pc, #152]	; (8003118 <HAL_DMA_Abort+0x45c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d02c      	beq.n	80030de <HAL_DMA_Abort+0x422>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a24      	ldr	r2, [pc, #144]	; (800311c <HAL_DMA_Abort+0x460>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d027      	beq.n	80030de <HAL_DMA_Abort+0x422>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a23      	ldr	r2, [pc, #140]	; (8003120 <HAL_DMA_Abort+0x464>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d022      	beq.n	80030de <HAL_DMA_Abort+0x422>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a21      	ldr	r2, [pc, #132]	; (8003124 <HAL_DMA_Abort+0x468>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d01d      	beq.n	80030de <HAL_DMA_Abort+0x422>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a20      	ldr	r2, [pc, #128]	; (8003128 <HAL_DMA_Abort+0x46c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d018      	beq.n	80030de <HAL_DMA_Abort+0x422>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a1e      	ldr	r2, [pc, #120]	; (800312c <HAL_DMA_Abort+0x470>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d013      	beq.n	80030de <HAL_DMA_Abort+0x422>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a1d      	ldr	r2, [pc, #116]	; (8003130 <HAL_DMA_Abort+0x474>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d00e      	beq.n	80030de <HAL_DMA_Abort+0x422>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1b      	ldr	r2, [pc, #108]	; (8003134 <HAL_DMA_Abort+0x478>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d009      	beq.n	80030de <HAL_DMA_Abort+0x422>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a1a      	ldr	r2, [pc, #104]	; (8003138 <HAL_DMA_Abort+0x47c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d004      	beq.n	80030de <HAL_DMA_Abort+0x422>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a18      	ldr	r2, [pc, #96]	; (800313c <HAL_DMA_Abort+0x480>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d101      	bne.n	80030e2 <HAL_DMA_Abort+0x426>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <HAL_DMA_Abort+0x428>
 80030e2:	2300      	movs	r3, #0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d02b      	beq.n	8003140 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	223f      	movs	r2, #63	; 0x3f
 80030f8:	409a      	lsls	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	609a      	str	r2, [r3, #8]
 80030fe:	e02a      	b.n	8003156 <HAL_DMA_Abort+0x49a>
 8003100:	40020010 	.word	0x40020010
 8003104:	40020028 	.word	0x40020028
 8003108:	40020040 	.word	0x40020040
 800310c:	40020058 	.word	0x40020058
 8003110:	40020070 	.word	0x40020070
 8003114:	40020088 	.word	0x40020088
 8003118:	400200a0 	.word	0x400200a0
 800311c:	400200b8 	.word	0x400200b8
 8003120:	40020410 	.word	0x40020410
 8003124:	40020428 	.word	0x40020428
 8003128:	40020440 	.word	0x40020440
 800312c:	40020458 	.word	0x40020458
 8003130:	40020470 	.word	0x40020470
 8003134:	40020488 	.word	0x40020488
 8003138:	400204a0 	.word	0x400204a0
 800313c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314a:	f003 031f 	and.w	r3, r3, #31
 800314e:	2201      	movs	r2, #1
 8003150:	409a      	lsls	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a4f      	ldr	r2, [pc, #316]	; (8003298 <HAL_DMA_Abort+0x5dc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d072      	beq.n	8003246 <HAL_DMA_Abort+0x58a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a4d      	ldr	r2, [pc, #308]	; (800329c <HAL_DMA_Abort+0x5e0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d06d      	beq.n	8003246 <HAL_DMA_Abort+0x58a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a4c      	ldr	r2, [pc, #304]	; (80032a0 <HAL_DMA_Abort+0x5e4>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d068      	beq.n	8003246 <HAL_DMA_Abort+0x58a>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a4a      	ldr	r2, [pc, #296]	; (80032a4 <HAL_DMA_Abort+0x5e8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d063      	beq.n	8003246 <HAL_DMA_Abort+0x58a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a49      	ldr	r2, [pc, #292]	; (80032a8 <HAL_DMA_Abort+0x5ec>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d05e      	beq.n	8003246 <HAL_DMA_Abort+0x58a>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a47      	ldr	r2, [pc, #284]	; (80032ac <HAL_DMA_Abort+0x5f0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d059      	beq.n	8003246 <HAL_DMA_Abort+0x58a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a46      	ldr	r2, [pc, #280]	; (80032b0 <HAL_DMA_Abort+0x5f4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d054      	beq.n	8003246 <HAL_DMA_Abort+0x58a>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a44      	ldr	r2, [pc, #272]	; (80032b4 <HAL_DMA_Abort+0x5f8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d04f      	beq.n	8003246 <HAL_DMA_Abort+0x58a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a43      	ldr	r2, [pc, #268]	; (80032b8 <HAL_DMA_Abort+0x5fc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d04a      	beq.n	8003246 <HAL_DMA_Abort+0x58a>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a41      	ldr	r2, [pc, #260]	; (80032bc <HAL_DMA_Abort+0x600>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d045      	beq.n	8003246 <HAL_DMA_Abort+0x58a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a40      	ldr	r2, [pc, #256]	; (80032c0 <HAL_DMA_Abort+0x604>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d040      	beq.n	8003246 <HAL_DMA_Abort+0x58a>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a3e      	ldr	r2, [pc, #248]	; (80032c4 <HAL_DMA_Abort+0x608>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d03b      	beq.n	8003246 <HAL_DMA_Abort+0x58a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a3d      	ldr	r2, [pc, #244]	; (80032c8 <HAL_DMA_Abort+0x60c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d036      	beq.n	8003246 <HAL_DMA_Abort+0x58a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a3b      	ldr	r2, [pc, #236]	; (80032cc <HAL_DMA_Abort+0x610>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d031      	beq.n	8003246 <HAL_DMA_Abort+0x58a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a3a      	ldr	r2, [pc, #232]	; (80032d0 <HAL_DMA_Abort+0x614>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d02c      	beq.n	8003246 <HAL_DMA_Abort+0x58a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a38      	ldr	r2, [pc, #224]	; (80032d4 <HAL_DMA_Abort+0x618>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d027      	beq.n	8003246 <HAL_DMA_Abort+0x58a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a37      	ldr	r2, [pc, #220]	; (80032d8 <HAL_DMA_Abort+0x61c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d022      	beq.n	8003246 <HAL_DMA_Abort+0x58a>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a35      	ldr	r2, [pc, #212]	; (80032dc <HAL_DMA_Abort+0x620>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d01d      	beq.n	8003246 <HAL_DMA_Abort+0x58a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a34      	ldr	r2, [pc, #208]	; (80032e0 <HAL_DMA_Abort+0x624>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d018      	beq.n	8003246 <HAL_DMA_Abort+0x58a>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a32      	ldr	r2, [pc, #200]	; (80032e4 <HAL_DMA_Abort+0x628>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d013      	beq.n	8003246 <HAL_DMA_Abort+0x58a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a31      	ldr	r2, [pc, #196]	; (80032e8 <HAL_DMA_Abort+0x62c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d00e      	beq.n	8003246 <HAL_DMA_Abort+0x58a>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a2f      	ldr	r2, [pc, #188]	; (80032ec <HAL_DMA_Abort+0x630>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d009      	beq.n	8003246 <HAL_DMA_Abort+0x58a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a2e      	ldr	r2, [pc, #184]	; (80032f0 <HAL_DMA_Abort+0x634>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d004      	beq.n	8003246 <HAL_DMA_Abort+0x58a>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a2c      	ldr	r2, [pc, #176]	; (80032f4 <HAL_DMA_Abort+0x638>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d101      	bne.n	800324a <HAL_DMA_Abort+0x58e>
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <HAL_DMA_Abort+0x590>
 800324a:	2300      	movs	r3, #0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d015      	beq.n	800327c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003258:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00c      	beq.n	800327c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800326c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003270:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800327a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40020010 	.word	0x40020010
 800329c:	40020028 	.word	0x40020028
 80032a0:	40020040 	.word	0x40020040
 80032a4:	40020058 	.word	0x40020058
 80032a8:	40020070 	.word	0x40020070
 80032ac:	40020088 	.word	0x40020088
 80032b0:	400200a0 	.word	0x400200a0
 80032b4:	400200b8 	.word	0x400200b8
 80032b8:	40020410 	.word	0x40020410
 80032bc:	40020428 	.word	0x40020428
 80032c0:	40020440 	.word	0x40020440
 80032c4:	40020458 	.word	0x40020458
 80032c8:	40020470 	.word	0x40020470
 80032cc:	40020488 	.word	0x40020488
 80032d0:	400204a0 	.word	0x400204a0
 80032d4:	400204b8 	.word	0x400204b8
 80032d8:	58025408 	.word	0x58025408
 80032dc:	5802541c 	.word	0x5802541c
 80032e0:	58025430 	.word	0x58025430
 80032e4:	58025444 	.word	0x58025444
 80032e8:	58025458 	.word	0x58025458
 80032ec:	5802546c 	.word	0x5802546c
 80032f0:	58025480 	.word	0x58025480
 80032f4:	58025494 	.word	0x58025494

080032f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e237      	b.n	800377a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d004      	beq.n	8003320 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2280      	movs	r2, #128	; 0x80
 800331a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e22c      	b.n	800377a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a5c      	ldr	r2, [pc, #368]	; (8003498 <HAL_DMA_Abort_IT+0x1a0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d04a      	beq.n	80033c0 <HAL_DMA_Abort_IT+0xc8>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a5b      	ldr	r2, [pc, #364]	; (800349c <HAL_DMA_Abort_IT+0x1a4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d045      	beq.n	80033c0 <HAL_DMA_Abort_IT+0xc8>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a59      	ldr	r2, [pc, #356]	; (80034a0 <HAL_DMA_Abort_IT+0x1a8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d040      	beq.n	80033c0 <HAL_DMA_Abort_IT+0xc8>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a58      	ldr	r2, [pc, #352]	; (80034a4 <HAL_DMA_Abort_IT+0x1ac>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d03b      	beq.n	80033c0 <HAL_DMA_Abort_IT+0xc8>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a56      	ldr	r2, [pc, #344]	; (80034a8 <HAL_DMA_Abort_IT+0x1b0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d036      	beq.n	80033c0 <HAL_DMA_Abort_IT+0xc8>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a55      	ldr	r2, [pc, #340]	; (80034ac <HAL_DMA_Abort_IT+0x1b4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d031      	beq.n	80033c0 <HAL_DMA_Abort_IT+0xc8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a53      	ldr	r2, [pc, #332]	; (80034b0 <HAL_DMA_Abort_IT+0x1b8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d02c      	beq.n	80033c0 <HAL_DMA_Abort_IT+0xc8>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a52      	ldr	r2, [pc, #328]	; (80034b4 <HAL_DMA_Abort_IT+0x1bc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d027      	beq.n	80033c0 <HAL_DMA_Abort_IT+0xc8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a50      	ldr	r2, [pc, #320]	; (80034b8 <HAL_DMA_Abort_IT+0x1c0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d022      	beq.n	80033c0 <HAL_DMA_Abort_IT+0xc8>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a4f      	ldr	r2, [pc, #316]	; (80034bc <HAL_DMA_Abort_IT+0x1c4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d01d      	beq.n	80033c0 <HAL_DMA_Abort_IT+0xc8>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a4d      	ldr	r2, [pc, #308]	; (80034c0 <HAL_DMA_Abort_IT+0x1c8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d018      	beq.n	80033c0 <HAL_DMA_Abort_IT+0xc8>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a4c      	ldr	r2, [pc, #304]	; (80034c4 <HAL_DMA_Abort_IT+0x1cc>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d013      	beq.n	80033c0 <HAL_DMA_Abort_IT+0xc8>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a4a      	ldr	r2, [pc, #296]	; (80034c8 <HAL_DMA_Abort_IT+0x1d0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00e      	beq.n	80033c0 <HAL_DMA_Abort_IT+0xc8>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a49      	ldr	r2, [pc, #292]	; (80034cc <HAL_DMA_Abort_IT+0x1d4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d009      	beq.n	80033c0 <HAL_DMA_Abort_IT+0xc8>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a47      	ldr	r2, [pc, #284]	; (80034d0 <HAL_DMA_Abort_IT+0x1d8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d004      	beq.n	80033c0 <HAL_DMA_Abort_IT+0xc8>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a46      	ldr	r2, [pc, #280]	; (80034d4 <HAL_DMA_Abort_IT+0x1dc>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d101      	bne.n	80033c4 <HAL_DMA_Abort_IT+0xcc>
 80033c0:	2301      	movs	r3, #1
 80033c2:	e000      	b.n	80033c6 <HAL_DMA_Abort_IT+0xce>
 80033c4:	2300      	movs	r3, #0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 8086 	beq.w	80034d8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2204      	movs	r2, #4
 80033d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2f      	ldr	r2, [pc, #188]	; (8003498 <HAL_DMA_Abort_IT+0x1a0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d04a      	beq.n	8003474 <HAL_DMA_Abort_IT+0x17c>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a2e      	ldr	r2, [pc, #184]	; (800349c <HAL_DMA_Abort_IT+0x1a4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d045      	beq.n	8003474 <HAL_DMA_Abort_IT+0x17c>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a2c      	ldr	r2, [pc, #176]	; (80034a0 <HAL_DMA_Abort_IT+0x1a8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d040      	beq.n	8003474 <HAL_DMA_Abort_IT+0x17c>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a2b      	ldr	r2, [pc, #172]	; (80034a4 <HAL_DMA_Abort_IT+0x1ac>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d03b      	beq.n	8003474 <HAL_DMA_Abort_IT+0x17c>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a29      	ldr	r2, [pc, #164]	; (80034a8 <HAL_DMA_Abort_IT+0x1b0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d036      	beq.n	8003474 <HAL_DMA_Abort_IT+0x17c>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a28      	ldr	r2, [pc, #160]	; (80034ac <HAL_DMA_Abort_IT+0x1b4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d031      	beq.n	8003474 <HAL_DMA_Abort_IT+0x17c>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a26      	ldr	r2, [pc, #152]	; (80034b0 <HAL_DMA_Abort_IT+0x1b8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d02c      	beq.n	8003474 <HAL_DMA_Abort_IT+0x17c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a25      	ldr	r2, [pc, #148]	; (80034b4 <HAL_DMA_Abort_IT+0x1bc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d027      	beq.n	8003474 <HAL_DMA_Abort_IT+0x17c>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a23      	ldr	r2, [pc, #140]	; (80034b8 <HAL_DMA_Abort_IT+0x1c0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d022      	beq.n	8003474 <HAL_DMA_Abort_IT+0x17c>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a22      	ldr	r2, [pc, #136]	; (80034bc <HAL_DMA_Abort_IT+0x1c4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d01d      	beq.n	8003474 <HAL_DMA_Abort_IT+0x17c>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a20      	ldr	r2, [pc, #128]	; (80034c0 <HAL_DMA_Abort_IT+0x1c8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d018      	beq.n	8003474 <HAL_DMA_Abort_IT+0x17c>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a1f      	ldr	r2, [pc, #124]	; (80034c4 <HAL_DMA_Abort_IT+0x1cc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d013      	beq.n	8003474 <HAL_DMA_Abort_IT+0x17c>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1d      	ldr	r2, [pc, #116]	; (80034c8 <HAL_DMA_Abort_IT+0x1d0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00e      	beq.n	8003474 <HAL_DMA_Abort_IT+0x17c>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1c      	ldr	r2, [pc, #112]	; (80034cc <HAL_DMA_Abort_IT+0x1d4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d009      	beq.n	8003474 <HAL_DMA_Abort_IT+0x17c>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1a      	ldr	r2, [pc, #104]	; (80034d0 <HAL_DMA_Abort_IT+0x1d8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d004      	beq.n	8003474 <HAL_DMA_Abort_IT+0x17c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a19      	ldr	r2, [pc, #100]	; (80034d4 <HAL_DMA_Abort_IT+0x1dc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d108      	bne.n	8003486 <HAL_DMA_Abort_IT+0x18e>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	e178      	b.n	8003778 <HAL_DMA_Abort_IT+0x480>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0201 	bic.w	r2, r2, #1
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e16f      	b.n	8003778 <HAL_DMA_Abort_IT+0x480>
 8003498:	40020010 	.word	0x40020010
 800349c:	40020028 	.word	0x40020028
 80034a0:	40020040 	.word	0x40020040
 80034a4:	40020058 	.word	0x40020058
 80034a8:	40020070 	.word	0x40020070
 80034ac:	40020088 	.word	0x40020088
 80034b0:	400200a0 	.word	0x400200a0
 80034b4:	400200b8 	.word	0x400200b8
 80034b8:	40020410 	.word	0x40020410
 80034bc:	40020428 	.word	0x40020428
 80034c0:	40020440 	.word	0x40020440
 80034c4:	40020458 	.word	0x40020458
 80034c8:	40020470 	.word	0x40020470
 80034cc:	40020488 	.word	0x40020488
 80034d0:	400204a0 	.word	0x400204a0
 80034d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 020e 	bic.w	r2, r2, #14
 80034e6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a6c      	ldr	r2, [pc, #432]	; (80036a0 <HAL_DMA_Abort_IT+0x3a8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d04a      	beq.n	8003588 <HAL_DMA_Abort_IT+0x290>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a6b      	ldr	r2, [pc, #428]	; (80036a4 <HAL_DMA_Abort_IT+0x3ac>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d045      	beq.n	8003588 <HAL_DMA_Abort_IT+0x290>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a69      	ldr	r2, [pc, #420]	; (80036a8 <HAL_DMA_Abort_IT+0x3b0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d040      	beq.n	8003588 <HAL_DMA_Abort_IT+0x290>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a68      	ldr	r2, [pc, #416]	; (80036ac <HAL_DMA_Abort_IT+0x3b4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d03b      	beq.n	8003588 <HAL_DMA_Abort_IT+0x290>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a66      	ldr	r2, [pc, #408]	; (80036b0 <HAL_DMA_Abort_IT+0x3b8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d036      	beq.n	8003588 <HAL_DMA_Abort_IT+0x290>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a65      	ldr	r2, [pc, #404]	; (80036b4 <HAL_DMA_Abort_IT+0x3bc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d031      	beq.n	8003588 <HAL_DMA_Abort_IT+0x290>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a63      	ldr	r2, [pc, #396]	; (80036b8 <HAL_DMA_Abort_IT+0x3c0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d02c      	beq.n	8003588 <HAL_DMA_Abort_IT+0x290>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a62      	ldr	r2, [pc, #392]	; (80036bc <HAL_DMA_Abort_IT+0x3c4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d027      	beq.n	8003588 <HAL_DMA_Abort_IT+0x290>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a60      	ldr	r2, [pc, #384]	; (80036c0 <HAL_DMA_Abort_IT+0x3c8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d022      	beq.n	8003588 <HAL_DMA_Abort_IT+0x290>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a5f      	ldr	r2, [pc, #380]	; (80036c4 <HAL_DMA_Abort_IT+0x3cc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d01d      	beq.n	8003588 <HAL_DMA_Abort_IT+0x290>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a5d      	ldr	r2, [pc, #372]	; (80036c8 <HAL_DMA_Abort_IT+0x3d0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d018      	beq.n	8003588 <HAL_DMA_Abort_IT+0x290>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a5c      	ldr	r2, [pc, #368]	; (80036cc <HAL_DMA_Abort_IT+0x3d4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d013      	beq.n	8003588 <HAL_DMA_Abort_IT+0x290>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a5a      	ldr	r2, [pc, #360]	; (80036d0 <HAL_DMA_Abort_IT+0x3d8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00e      	beq.n	8003588 <HAL_DMA_Abort_IT+0x290>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a59      	ldr	r2, [pc, #356]	; (80036d4 <HAL_DMA_Abort_IT+0x3dc>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d009      	beq.n	8003588 <HAL_DMA_Abort_IT+0x290>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a57      	ldr	r2, [pc, #348]	; (80036d8 <HAL_DMA_Abort_IT+0x3e0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d004      	beq.n	8003588 <HAL_DMA_Abort_IT+0x290>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a56      	ldr	r2, [pc, #344]	; (80036dc <HAL_DMA_Abort_IT+0x3e4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d108      	bne.n	800359a <HAL_DMA_Abort_IT+0x2a2>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	e007      	b.n	80035aa <HAL_DMA_Abort_IT+0x2b2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0201 	bic.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a3c      	ldr	r2, [pc, #240]	; (80036a0 <HAL_DMA_Abort_IT+0x3a8>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d072      	beq.n	800369a <HAL_DMA_Abort_IT+0x3a2>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a3a      	ldr	r2, [pc, #232]	; (80036a4 <HAL_DMA_Abort_IT+0x3ac>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d06d      	beq.n	800369a <HAL_DMA_Abort_IT+0x3a2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a39      	ldr	r2, [pc, #228]	; (80036a8 <HAL_DMA_Abort_IT+0x3b0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d068      	beq.n	800369a <HAL_DMA_Abort_IT+0x3a2>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a37      	ldr	r2, [pc, #220]	; (80036ac <HAL_DMA_Abort_IT+0x3b4>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d063      	beq.n	800369a <HAL_DMA_Abort_IT+0x3a2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a36      	ldr	r2, [pc, #216]	; (80036b0 <HAL_DMA_Abort_IT+0x3b8>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d05e      	beq.n	800369a <HAL_DMA_Abort_IT+0x3a2>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a34      	ldr	r2, [pc, #208]	; (80036b4 <HAL_DMA_Abort_IT+0x3bc>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d059      	beq.n	800369a <HAL_DMA_Abort_IT+0x3a2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a33      	ldr	r2, [pc, #204]	; (80036b8 <HAL_DMA_Abort_IT+0x3c0>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d054      	beq.n	800369a <HAL_DMA_Abort_IT+0x3a2>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a31      	ldr	r2, [pc, #196]	; (80036bc <HAL_DMA_Abort_IT+0x3c4>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d04f      	beq.n	800369a <HAL_DMA_Abort_IT+0x3a2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a30      	ldr	r2, [pc, #192]	; (80036c0 <HAL_DMA_Abort_IT+0x3c8>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d04a      	beq.n	800369a <HAL_DMA_Abort_IT+0x3a2>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a2e      	ldr	r2, [pc, #184]	; (80036c4 <HAL_DMA_Abort_IT+0x3cc>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d045      	beq.n	800369a <HAL_DMA_Abort_IT+0x3a2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a2d      	ldr	r2, [pc, #180]	; (80036c8 <HAL_DMA_Abort_IT+0x3d0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d040      	beq.n	800369a <HAL_DMA_Abort_IT+0x3a2>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a2b      	ldr	r2, [pc, #172]	; (80036cc <HAL_DMA_Abort_IT+0x3d4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d03b      	beq.n	800369a <HAL_DMA_Abort_IT+0x3a2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a2a      	ldr	r2, [pc, #168]	; (80036d0 <HAL_DMA_Abort_IT+0x3d8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d036      	beq.n	800369a <HAL_DMA_Abort_IT+0x3a2>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a28      	ldr	r2, [pc, #160]	; (80036d4 <HAL_DMA_Abort_IT+0x3dc>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d031      	beq.n	800369a <HAL_DMA_Abort_IT+0x3a2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a27      	ldr	r2, [pc, #156]	; (80036d8 <HAL_DMA_Abort_IT+0x3e0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d02c      	beq.n	800369a <HAL_DMA_Abort_IT+0x3a2>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a25      	ldr	r2, [pc, #148]	; (80036dc <HAL_DMA_Abort_IT+0x3e4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d027      	beq.n	800369a <HAL_DMA_Abort_IT+0x3a2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a24      	ldr	r2, [pc, #144]	; (80036e0 <HAL_DMA_Abort_IT+0x3e8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d022      	beq.n	800369a <HAL_DMA_Abort_IT+0x3a2>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a22      	ldr	r2, [pc, #136]	; (80036e4 <HAL_DMA_Abort_IT+0x3ec>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01d      	beq.n	800369a <HAL_DMA_Abort_IT+0x3a2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a21      	ldr	r2, [pc, #132]	; (80036e8 <HAL_DMA_Abort_IT+0x3f0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d018      	beq.n	800369a <HAL_DMA_Abort_IT+0x3a2>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a1f      	ldr	r2, [pc, #124]	; (80036ec <HAL_DMA_Abort_IT+0x3f4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d013      	beq.n	800369a <HAL_DMA_Abort_IT+0x3a2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1e      	ldr	r2, [pc, #120]	; (80036f0 <HAL_DMA_Abort_IT+0x3f8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d00e      	beq.n	800369a <HAL_DMA_Abort_IT+0x3a2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1c      	ldr	r2, [pc, #112]	; (80036f4 <HAL_DMA_Abort_IT+0x3fc>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d009      	beq.n	800369a <HAL_DMA_Abort_IT+0x3a2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1b      	ldr	r2, [pc, #108]	; (80036f8 <HAL_DMA_Abort_IT+0x400>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d004      	beq.n	800369a <HAL_DMA_Abort_IT+0x3a2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a19      	ldr	r2, [pc, #100]	; (80036fc <HAL_DMA_Abort_IT+0x404>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d132      	bne.n	8003700 <HAL_DMA_Abort_IT+0x408>
 800369a:	2301      	movs	r3, #1
 800369c:	e031      	b.n	8003702 <HAL_DMA_Abort_IT+0x40a>
 800369e:	bf00      	nop
 80036a0:	40020010 	.word	0x40020010
 80036a4:	40020028 	.word	0x40020028
 80036a8:	40020040 	.word	0x40020040
 80036ac:	40020058 	.word	0x40020058
 80036b0:	40020070 	.word	0x40020070
 80036b4:	40020088 	.word	0x40020088
 80036b8:	400200a0 	.word	0x400200a0
 80036bc:	400200b8 	.word	0x400200b8
 80036c0:	40020410 	.word	0x40020410
 80036c4:	40020428 	.word	0x40020428
 80036c8:	40020440 	.word	0x40020440
 80036cc:	40020458 	.word	0x40020458
 80036d0:	40020470 	.word	0x40020470
 80036d4:	40020488 	.word	0x40020488
 80036d8:	400204a0 	.word	0x400204a0
 80036dc:	400204b8 	.word	0x400204b8
 80036e0:	58025408 	.word	0x58025408
 80036e4:	5802541c 	.word	0x5802541c
 80036e8:	58025430 	.word	0x58025430
 80036ec:	58025444 	.word	0x58025444
 80036f0:	58025458 	.word	0x58025458
 80036f4:	5802546c 	.word	0x5802546c
 80036f8:	58025480 	.word	0x58025480
 80036fc:	58025494 	.word	0x58025494
 8003700:	2300      	movs	r3, #0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d028      	beq.n	8003758 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003710:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003714:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	2201      	movs	r2, #1
 8003726:	409a      	lsls	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003734:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00c      	beq.n	8003758 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003748:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800374c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003756:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop

08003784 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08a      	sub	sp, #40	; 0x28
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003790:	4b67      	ldr	r3, [pc, #412]	; (8003930 <HAL_DMA_IRQHandler+0x1ac>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a67      	ldr	r2, [pc, #412]	; (8003934 <HAL_DMA_IRQHandler+0x1b0>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	0a9b      	lsrs	r3, r3, #10
 800379c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a5f      	ldr	r2, [pc, #380]	; (8003938 <HAL_DMA_IRQHandler+0x1b4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d04a      	beq.n	8003856 <HAL_DMA_IRQHandler+0xd2>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a5d      	ldr	r2, [pc, #372]	; (800393c <HAL_DMA_IRQHandler+0x1b8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d045      	beq.n	8003856 <HAL_DMA_IRQHandler+0xd2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a5c      	ldr	r2, [pc, #368]	; (8003940 <HAL_DMA_IRQHandler+0x1bc>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d040      	beq.n	8003856 <HAL_DMA_IRQHandler+0xd2>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a5a      	ldr	r2, [pc, #360]	; (8003944 <HAL_DMA_IRQHandler+0x1c0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d03b      	beq.n	8003856 <HAL_DMA_IRQHandler+0xd2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a59      	ldr	r2, [pc, #356]	; (8003948 <HAL_DMA_IRQHandler+0x1c4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d036      	beq.n	8003856 <HAL_DMA_IRQHandler+0xd2>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a57      	ldr	r2, [pc, #348]	; (800394c <HAL_DMA_IRQHandler+0x1c8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d031      	beq.n	8003856 <HAL_DMA_IRQHandler+0xd2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a56      	ldr	r2, [pc, #344]	; (8003950 <HAL_DMA_IRQHandler+0x1cc>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d02c      	beq.n	8003856 <HAL_DMA_IRQHandler+0xd2>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a54      	ldr	r2, [pc, #336]	; (8003954 <HAL_DMA_IRQHandler+0x1d0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d027      	beq.n	8003856 <HAL_DMA_IRQHandler+0xd2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a53      	ldr	r2, [pc, #332]	; (8003958 <HAL_DMA_IRQHandler+0x1d4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d022      	beq.n	8003856 <HAL_DMA_IRQHandler+0xd2>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a51      	ldr	r2, [pc, #324]	; (800395c <HAL_DMA_IRQHandler+0x1d8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d01d      	beq.n	8003856 <HAL_DMA_IRQHandler+0xd2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a50      	ldr	r2, [pc, #320]	; (8003960 <HAL_DMA_IRQHandler+0x1dc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d018      	beq.n	8003856 <HAL_DMA_IRQHandler+0xd2>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a4e      	ldr	r2, [pc, #312]	; (8003964 <HAL_DMA_IRQHandler+0x1e0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d013      	beq.n	8003856 <HAL_DMA_IRQHandler+0xd2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a4d      	ldr	r2, [pc, #308]	; (8003968 <HAL_DMA_IRQHandler+0x1e4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d00e      	beq.n	8003856 <HAL_DMA_IRQHandler+0xd2>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a4b      	ldr	r2, [pc, #300]	; (800396c <HAL_DMA_IRQHandler+0x1e8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d009      	beq.n	8003856 <HAL_DMA_IRQHandler+0xd2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a4a      	ldr	r2, [pc, #296]	; (8003970 <HAL_DMA_IRQHandler+0x1ec>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d004      	beq.n	8003856 <HAL_DMA_IRQHandler+0xd2>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a48      	ldr	r2, [pc, #288]	; (8003974 <HAL_DMA_IRQHandler+0x1f0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d101      	bne.n	800385a <HAL_DMA_IRQHandler+0xd6>
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <HAL_DMA_IRQHandler+0xd8>
 800385a:	2300      	movs	r3, #0
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 842b 	beq.w	80040b8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003866:	f003 031f 	and.w	r3, r3, #31
 800386a:	2208      	movs	r2, #8
 800386c:	409a      	lsls	r2, r3
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 80a2 	beq.w	80039bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a2e      	ldr	r2, [pc, #184]	; (8003938 <HAL_DMA_IRQHandler+0x1b4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d04a      	beq.n	8003918 <HAL_DMA_IRQHandler+0x194>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a2d      	ldr	r2, [pc, #180]	; (800393c <HAL_DMA_IRQHandler+0x1b8>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d045      	beq.n	8003918 <HAL_DMA_IRQHandler+0x194>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a2b      	ldr	r2, [pc, #172]	; (8003940 <HAL_DMA_IRQHandler+0x1bc>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d040      	beq.n	8003918 <HAL_DMA_IRQHandler+0x194>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a2a      	ldr	r2, [pc, #168]	; (8003944 <HAL_DMA_IRQHandler+0x1c0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d03b      	beq.n	8003918 <HAL_DMA_IRQHandler+0x194>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a28      	ldr	r2, [pc, #160]	; (8003948 <HAL_DMA_IRQHandler+0x1c4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d036      	beq.n	8003918 <HAL_DMA_IRQHandler+0x194>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a27      	ldr	r2, [pc, #156]	; (800394c <HAL_DMA_IRQHandler+0x1c8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d031      	beq.n	8003918 <HAL_DMA_IRQHandler+0x194>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a25      	ldr	r2, [pc, #148]	; (8003950 <HAL_DMA_IRQHandler+0x1cc>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d02c      	beq.n	8003918 <HAL_DMA_IRQHandler+0x194>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a24      	ldr	r2, [pc, #144]	; (8003954 <HAL_DMA_IRQHandler+0x1d0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d027      	beq.n	8003918 <HAL_DMA_IRQHandler+0x194>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a22      	ldr	r2, [pc, #136]	; (8003958 <HAL_DMA_IRQHandler+0x1d4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d022      	beq.n	8003918 <HAL_DMA_IRQHandler+0x194>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a21      	ldr	r2, [pc, #132]	; (800395c <HAL_DMA_IRQHandler+0x1d8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d01d      	beq.n	8003918 <HAL_DMA_IRQHandler+0x194>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a1f      	ldr	r2, [pc, #124]	; (8003960 <HAL_DMA_IRQHandler+0x1dc>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d018      	beq.n	8003918 <HAL_DMA_IRQHandler+0x194>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1e      	ldr	r2, [pc, #120]	; (8003964 <HAL_DMA_IRQHandler+0x1e0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d013      	beq.n	8003918 <HAL_DMA_IRQHandler+0x194>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1c      	ldr	r2, [pc, #112]	; (8003968 <HAL_DMA_IRQHandler+0x1e4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00e      	beq.n	8003918 <HAL_DMA_IRQHandler+0x194>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a1b      	ldr	r2, [pc, #108]	; (800396c <HAL_DMA_IRQHandler+0x1e8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d009      	beq.n	8003918 <HAL_DMA_IRQHandler+0x194>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a19      	ldr	r2, [pc, #100]	; (8003970 <HAL_DMA_IRQHandler+0x1ec>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d004      	beq.n	8003918 <HAL_DMA_IRQHandler+0x194>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a18      	ldr	r2, [pc, #96]	; (8003974 <HAL_DMA_IRQHandler+0x1f0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d12f      	bne.n	8003978 <HAL_DMA_IRQHandler+0x1f4>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	bf14      	ite	ne
 8003926:	2301      	movne	r3, #1
 8003928:	2300      	moveq	r3, #0
 800392a:	b2db      	uxtb	r3, r3
 800392c:	e02e      	b.n	800398c <HAL_DMA_IRQHandler+0x208>
 800392e:	bf00      	nop
 8003930:	24000070 	.word	0x24000070
 8003934:	1b4e81b5 	.word	0x1b4e81b5
 8003938:	40020010 	.word	0x40020010
 800393c:	40020028 	.word	0x40020028
 8003940:	40020040 	.word	0x40020040
 8003944:	40020058 	.word	0x40020058
 8003948:	40020070 	.word	0x40020070
 800394c:	40020088 	.word	0x40020088
 8003950:	400200a0 	.word	0x400200a0
 8003954:	400200b8 	.word	0x400200b8
 8003958:	40020410 	.word	0x40020410
 800395c:	40020428 	.word	0x40020428
 8003960:	40020440 	.word	0x40020440
 8003964:	40020458 	.word	0x40020458
 8003968:	40020470 	.word	0x40020470
 800396c:	40020488 	.word	0x40020488
 8003970:	400204a0 	.word	0x400204a0
 8003974:	400204b8 	.word	0x400204b8
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	bf14      	ite	ne
 8003986:	2301      	movne	r3, #1
 8003988:	2300      	moveq	r3, #0
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d015      	beq.n	80039bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0204 	bic.w	r2, r2, #4
 800399e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a4:	f003 031f 	and.w	r3, r3, #31
 80039a8:	2208      	movs	r2, #8
 80039aa:	409a      	lsls	r2, r3
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b4:	f043 0201 	orr.w	r2, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c0:	f003 031f 	and.w	r3, r3, #31
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d06e      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a69      	ldr	r2, [pc, #420]	; (8003b7c <HAL_DMA_IRQHandler+0x3f8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d04a      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x2ee>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a67      	ldr	r2, [pc, #412]	; (8003b80 <HAL_DMA_IRQHandler+0x3fc>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d045      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x2ee>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a66      	ldr	r2, [pc, #408]	; (8003b84 <HAL_DMA_IRQHandler+0x400>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d040      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x2ee>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a64      	ldr	r2, [pc, #400]	; (8003b88 <HAL_DMA_IRQHandler+0x404>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d03b      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x2ee>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a63      	ldr	r2, [pc, #396]	; (8003b8c <HAL_DMA_IRQHandler+0x408>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d036      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x2ee>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a61      	ldr	r2, [pc, #388]	; (8003b90 <HAL_DMA_IRQHandler+0x40c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d031      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x2ee>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a60      	ldr	r2, [pc, #384]	; (8003b94 <HAL_DMA_IRQHandler+0x410>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d02c      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x2ee>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a5e      	ldr	r2, [pc, #376]	; (8003b98 <HAL_DMA_IRQHandler+0x414>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d027      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x2ee>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a5d      	ldr	r2, [pc, #372]	; (8003b9c <HAL_DMA_IRQHandler+0x418>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d022      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x2ee>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a5b      	ldr	r2, [pc, #364]	; (8003ba0 <HAL_DMA_IRQHandler+0x41c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d01d      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x2ee>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a5a      	ldr	r2, [pc, #360]	; (8003ba4 <HAL_DMA_IRQHandler+0x420>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d018      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x2ee>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a58      	ldr	r2, [pc, #352]	; (8003ba8 <HAL_DMA_IRQHandler+0x424>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d013      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x2ee>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a57      	ldr	r2, [pc, #348]	; (8003bac <HAL_DMA_IRQHandler+0x428>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00e      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x2ee>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a55      	ldr	r2, [pc, #340]	; (8003bb0 <HAL_DMA_IRQHandler+0x42c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d009      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x2ee>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a54      	ldr	r2, [pc, #336]	; (8003bb4 <HAL_DMA_IRQHandler+0x430>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d004      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x2ee>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a52      	ldr	r2, [pc, #328]	; (8003bb8 <HAL_DMA_IRQHandler+0x434>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d10a      	bne.n	8003a88 <HAL_DMA_IRQHandler+0x304>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	bf14      	ite	ne
 8003a80:	2301      	movne	r3, #1
 8003a82:	2300      	moveq	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	e003      	b.n	8003a90 <HAL_DMA_IRQHandler+0x30c>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00d      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa8:	f043 0202 	orr.w	r2, r3, #2
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	2204      	movs	r2, #4
 8003aba:	409a      	lsls	r2, r3
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 808f 	beq.w	8003be4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a2c      	ldr	r2, [pc, #176]	; (8003b7c <HAL_DMA_IRQHandler+0x3f8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d04a      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x3e2>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a2a      	ldr	r2, [pc, #168]	; (8003b80 <HAL_DMA_IRQHandler+0x3fc>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d045      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x3e2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a29      	ldr	r2, [pc, #164]	; (8003b84 <HAL_DMA_IRQHandler+0x400>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d040      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x3e2>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a27      	ldr	r2, [pc, #156]	; (8003b88 <HAL_DMA_IRQHandler+0x404>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d03b      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x3e2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a26      	ldr	r2, [pc, #152]	; (8003b8c <HAL_DMA_IRQHandler+0x408>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d036      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x3e2>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a24      	ldr	r2, [pc, #144]	; (8003b90 <HAL_DMA_IRQHandler+0x40c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d031      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x3e2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a23      	ldr	r2, [pc, #140]	; (8003b94 <HAL_DMA_IRQHandler+0x410>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d02c      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x3e2>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a21      	ldr	r2, [pc, #132]	; (8003b98 <HAL_DMA_IRQHandler+0x414>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d027      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x3e2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a20      	ldr	r2, [pc, #128]	; (8003b9c <HAL_DMA_IRQHandler+0x418>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d022      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x3e2>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a1e      	ldr	r2, [pc, #120]	; (8003ba0 <HAL_DMA_IRQHandler+0x41c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d01d      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x3e2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a1d      	ldr	r2, [pc, #116]	; (8003ba4 <HAL_DMA_IRQHandler+0x420>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d018      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x3e2>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a1b      	ldr	r2, [pc, #108]	; (8003ba8 <HAL_DMA_IRQHandler+0x424>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d013      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x3e2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a1a      	ldr	r2, [pc, #104]	; (8003bac <HAL_DMA_IRQHandler+0x428>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00e      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x3e2>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a18      	ldr	r2, [pc, #96]	; (8003bb0 <HAL_DMA_IRQHandler+0x42c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d009      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x3e2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a17      	ldr	r2, [pc, #92]	; (8003bb4 <HAL_DMA_IRQHandler+0x430>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d004      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x3e2>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a15      	ldr	r2, [pc, #84]	; (8003bb8 <HAL_DMA_IRQHandler+0x434>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d12a      	bne.n	8003bbc <HAL_DMA_IRQHandler+0x438>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	bf14      	ite	ne
 8003b74:	2301      	movne	r3, #1
 8003b76:	2300      	moveq	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	e023      	b.n	8003bc4 <HAL_DMA_IRQHandler+0x440>
 8003b7c:	40020010 	.word	0x40020010
 8003b80:	40020028 	.word	0x40020028
 8003b84:	40020040 	.word	0x40020040
 8003b88:	40020058 	.word	0x40020058
 8003b8c:	40020070 	.word	0x40020070
 8003b90:	40020088 	.word	0x40020088
 8003b94:	400200a0 	.word	0x400200a0
 8003b98:	400200b8 	.word	0x400200b8
 8003b9c:	40020410 	.word	0x40020410
 8003ba0:	40020428 	.word	0x40020428
 8003ba4:	40020440 	.word	0x40020440
 8003ba8:	40020458 	.word	0x40020458
 8003bac:	40020470 	.word	0x40020470
 8003bb0:	40020488 	.word	0x40020488
 8003bb4:	400204a0 	.word	0x400204a0
 8003bb8:	400204b8 	.word	0x400204b8
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00d      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	2204      	movs	r2, #4
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bdc:	f043 0204 	orr.w	r2, r3, #4
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	2210      	movs	r2, #16
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 80a6 	beq.w	8003d46 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a85      	ldr	r2, [pc, #532]	; (8003e14 <HAL_DMA_IRQHandler+0x690>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d04a      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x516>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a83      	ldr	r2, [pc, #524]	; (8003e18 <HAL_DMA_IRQHandler+0x694>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d045      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x516>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a82      	ldr	r2, [pc, #520]	; (8003e1c <HAL_DMA_IRQHandler+0x698>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d040      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x516>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a80      	ldr	r2, [pc, #512]	; (8003e20 <HAL_DMA_IRQHandler+0x69c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d03b      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x516>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a7f      	ldr	r2, [pc, #508]	; (8003e24 <HAL_DMA_IRQHandler+0x6a0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d036      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x516>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a7d      	ldr	r2, [pc, #500]	; (8003e28 <HAL_DMA_IRQHandler+0x6a4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d031      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x516>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a7c      	ldr	r2, [pc, #496]	; (8003e2c <HAL_DMA_IRQHandler+0x6a8>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d02c      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x516>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a7a      	ldr	r2, [pc, #488]	; (8003e30 <HAL_DMA_IRQHandler+0x6ac>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d027      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x516>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a79      	ldr	r2, [pc, #484]	; (8003e34 <HAL_DMA_IRQHandler+0x6b0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d022      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x516>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a77      	ldr	r2, [pc, #476]	; (8003e38 <HAL_DMA_IRQHandler+0x6b4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d01d      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x516>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a76      	ldr	r2, [pc, #472]	; (8003e3c <HAL_DMA_IRQHandler+0x6b8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d018      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x516>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a74      	ldr	r2, [pc, #464]	; (8003e40 <HAL_DMA_IRQHandler+0x6bc>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d013      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x516>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a73      	ldr	r2, [pc, #460]	; (8003e44 <HAL_DMA_IRQHandler+0x6c0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00e      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x516>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a71      	ldr	r2, [pc, #452]	; (8003e48 <HAL_DMA_IRQHandler+0x6c4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d009      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x516>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a70      	ldr	r2, [pc, #448]	; (8003e4c <HAL_DMA_IRQHandler+0x6c8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x516>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a6e      	ldr	r2, [pc, #440]	; (8003e50 <HAL_DMA_IRQHandler+0x6cc>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d10a      	bne.n	8003cb0 <HAL_DMA_IRQHandler+0x52c>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bf14      	ite	ne
 8003ca8:	2301      	movne	r3, #1
 8003caa:	2300      	moveq	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	e009      	b.n	8003cc4 <HAL_DMA_IRQHandler+0x540>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	bf14      	ite	ne
 8003cbe:	2301      	movne	r3, #1
 8003cc0:	2300      	moveq	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d03e      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	2210      	movs	r2, #16
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d018      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d108      	bne.n	8003d06 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d024      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	4798      	blx	r3
 8003d04:	e01f      	b.n	8003d46 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01b      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	4798      	blx	r3
 8003d16:	e016      	b.n	8003d46 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d107      	bne.n	8003d36 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0208 	bic.w	r2, r2, #8
 8003d34:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4a:	f003 031f 	and.w	r3, r3, #31
 8003d4e:	2220      	movs	r2, #32
 8003d50:	409a      	lsls	r2, r3
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 8110 	beq.w	8003f7c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a2c      	ldr	r2, [pc, #176]	; (8003e14 <HAL_DMA_IRQHandler+0x690>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d04a      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x678>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a2b      	ldr	r2, [pc, #172]	; (8003e18 <HAL_DMA_IRQHandler+0x694>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d045      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x678>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a29      	ldr	r2, [pc, #164]	; (8003e1c <HAL_DMA_IRQHandler+0x698>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d040      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x678>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a28      	ldr	r2, [pc, #160]	; (8003e20 <HAL_DMA_IRQHandler+0x69c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d03b      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x678>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a26      	ldr	r2, [pc, #152]	; (8003e24 <HAL_DMA_IRQHandler+0x6a0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d036      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x678>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a25      	ldr	r2, [pc, #148]	; (8003e28 <HAL_DMA_IRQHandler+0x6a4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d031      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x678>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a23      	ldr	r2, [pc, #140]	; (8003e2c <HAL_DMA_IRQHandler+0x6a8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d02c      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x678>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a22      	ldr	r2, [pc, #136]	; (8003e30 <HAL_DMA_IRQHandler+0x6ac>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d027      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x678>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a20      	ldr	r2, [pc, #128]	; (8003e34 <HAL_DMA_IRQHandler+0x6b0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d022      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x678>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a1f      	ldr	r2, [pc, #124]	; (8003e38 <HAL_DMA_IRQHandler+0x6b4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d01d      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x678>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a1d      	ldr	r2, [pc, #116]	; (8003e3c <HAL_DMA_IRQHandler+0x6b8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d018      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x678>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a1c      	ldr	r2, [pc, #112]	; (8003e40 <HAL_DMA_IRQHandler+0x6bc>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d013      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x678>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1a      	ldr	r2, [pc, #104]	; (8003e44 <HAL_DMA_IRQHandler+0x6c0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00e      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x678>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a19      	ldr	r2, [pc, #100]	; (8003e48 <HAL_DMA_IRQHandler+0x6c4>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d009      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x678>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a17      	ldr	r2, [pc, #92]	; (8003e4c <HAL_DMA_IRQHandler+0x6c8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d004      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x678>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a16      	ldr	r2, [pc, #88]	; (8003e50 <HAL_DMA_IRQHandler+0x6cc>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d12b      	bne.n	8003e54 <HAL_DMA_IRQHandler+0x6d0>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0310 	and.w	r3, r3, #16
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	bf14      	ite	ne
 8003e0a:	2301      	movne	r3, #1
 8003e0c:	2300      	moveq	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	e02a      	b.n	8003e68 <HAL_DMA_IRQHandler+0x6e4>
 8003e12:	bf00      	nop
 8003e14:	40020010 	.word	0x40020010
 8003e18:	40020028 	.word	0x40020028
 8003e1c:	40020040 	.word	0x40020040
 8003e20:	40020058 	.word	0x40020058
 8003e24:	40020070 	.word	0x40020070
 8003e28:	40020088 	.word	0x40020088
 8003e2c:	400200a0 	.word	0x400200a0
 8003e30:	400200b8 	.word	0x400200b8
 8003e34:	40020410 	.word	0x40020410
 8003e38:	40020428 	.word	0x40020428
 8003e3c:	40020440 	.word	0x40020440
 8003e40:	40020458 	.word	0x40020458
 8003e44:	40020470 	.word	0x40020470
 8003e48:	40020488 	.word	0x40020488
 8003e4c:	400204a0 	.word	0x400204a0
 8003e50:	400204b8 	.word	0x400204b8
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	bf14      	ite	ne
 8003e62:	2301      	movne	r3, #1
 8003e64:	2300      	moveq	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 8087 	beq.w	8003f7c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e72:	f003 031f 	and.w	r3, r3, #31
 8003e76:	2220      	movs	r2, #32
 8003e78:	409a      	lsls	r2, r3
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d139      	bne.n	8003efe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0216 	bic.w	r2, r2, #22
 8003e98:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ea8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d103      	bne.n	8003eba <HAL_DMA_IRQHandler+0x736>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d007      	beq.n	8003eca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0208 	bic.w	r2, r2, #8
 8003ec8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ece:	f003 031f 	and.w	r3, r3, #31
 8003ed2:	223f      	movs	r2, #63	; 0x3f
 8003ed4:	409a      	lsls	r2, r3
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 834a 	beq.w	8004588 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	4798      	blx	r3
          }
          return;
 8003efc:	e344      	b.n	8004588 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d018      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d108      	bne.n	8003f2c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d02c      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	4798      	blx	r3
 8003f2a:	e027      	b.n	8003f7c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d023      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	4798      	blx	r3
 8003f3c:	e01e      	b.n	8003f7c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10f      	bne.n	8003f6c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0210 	bic.w	r2, r2, #16
 8003f5a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 8306 	beq.w	8004592 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 8088 	beq.w	80040a4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2204      	movs	r2, #4
 8003f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a7a      	ldr	r2, [pc, #488]	; (800418c <HAL_DMA_IRQHandler+0xa08>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d04a      	beq.n	800403c <HAL_DMA_IRQHandler+0x8b8>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a79      	ldr	r2, [pc, #484]	; (8004190 <HAL_DMA_IRQHandler+0xa0c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d045      	beq.n	800403c <HAL_DMA_IRQHandler+0x8b8>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a77      	ldr	r2, [pc, #476]	; (8004194 <HAL_DMA_IRQHandler+0xa10>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d040      	beq.n	800403c <HAL_DMA_IRQHandler+0x8b8>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a76      	ldr	r2, [pc, #472]	; (8004198 <HAL_DMA_IRQHandler+0xa14>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d03b      	beq.n	800403c <HAL_DMA_IRQHandler+0x8b8>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a74      	ldr	r2, [pc, #464]	; (800419c <HAL_DMA_IRQHandler+0xa18>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d036      	beq.n	800403c <HAL_DMA_IRQHandler+0x8b8>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a73      	ldr	r2, [pc, #460]	; (80041a0 <HAL_DMA_IRQHandler+0xa1c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d031      	beq.n	800403c <HAL_DMA_IRQHandler+0x8b8>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a71      	ldr	r2, [pc, #452]	; (80041a4 <HAL_DMA_IRQHandler+0xa20>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d02c      	beq.n	800403c <HAL_DMA_IRQHandler+0x8b8>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a70      	ldr	r2, [pc, #448]	; (80041a8 <HAL_DMA_IRQHandler+0xa24>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d027      	beq.n	800403c <HAL_DMA_IRQHandler+0x8b8>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a6e      	ldr	r2, [pc, #440]	; (80041ac <HAL_DMA_IRQHandler+0xa28>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d022      	beq.n	800403c <HAL_DMA_IRQHandler+0x8b8>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a6d      	ldr	r2, [pc, #436]	; (80041b0 <HAL_DMA_IRQHandler+0xa2c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d01d      	beq.n	800403c <HAL_DMA_IRQHandler+0x8b8>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a6b      	ldr	r2, [pc, #428]	; (80041b4 <HAL_DMA_IRQHandler+0xa30>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d018      	beq.n	800403c <HAL_DMA_IRQHandler+0x8b8>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a6a      	ldr	r2, [pc, #424]	; (80041b8 <HAL_DMA_IRQHandler+0xa34>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d013      	beq.n	800403c <HAL_DMA_IRQHandler+0x8b8>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a68      	ldr	r2, [pc, #416]	; (80041bc <HAL_DMA_IRQHandler+0xa38>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00e      	beq.n	800403c <HAL_DMA_IRQHandler+0x8b8>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a67      	ldr	r2, [pc, #412]	; (80041c0 <HAL_DMA_IRQHandler+0xa3c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d009      	beq.n	800403c <HAL_DMA_IRQHandler+0x8b8>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a65      	ldr	r2, [pc, #404]	; (80041c4 <HAL_DMA_IRQHandler+0xa40>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d004      	beq.n	800403c <HAL_DMA_IRQHandler+0x8b8>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a64      	ldr	r2, [pc, #400]	; (80041c8 <HAL_DMA_IRQHandler+0xa44>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d108      	bne.n	800404e <HAL_DMA_IRQHandler+0x8ca>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0201 	bic.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	e007      	b.n	800405e <HAL_DMA_IRQHandler+0x8da>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3301      	adds	r3, #1
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004066:	429a      	cmp	r2, r3
 8004068:	d307      	bcc.n	800407a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1f2      	bne.n	800405e <HAL_DMA_IRQHandler+0x8da>
 8004078:	e000      	b.n	800407c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800407a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d004      	beq.n	8004094 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2203      	movs	r2, #3
 800408e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004092:	e003      	b.n	800409c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 8272 	beq.w	8004592 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	4798      	blx	r3
 80040b6:	e26c      	b.n	8004592 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a43      	ldr	r2, [pc, #268]	; (80041cc <HAL_DMA_IRQHandler+0xa48>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d022      	beq.n	8004108 <HAL_DMA_IRQHandler+0x984>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a42      	ldr	r2, [pc, #264]	; (80041d0 <HAL_DMA_IRQHandler+0xa4c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d01d      	beq.n	8004108 <HAL_DMA_IRQHandler+0x984>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a40      	ldr	r2, [pc, #256]	; (80041d4 <HAL_DMA_IRQHandler+0xa50>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d018      	beq.n	8004108 <HAL_DMA_IRQHandler+0x984>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a3f      	ldr	r2, [pc, #252]	; (80041d8 <HAL_DMA_IRQHandler+0xa54>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d013      	beq.n	8004108 <HAL_DMA_IRQHandler+0x984>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a3d      	ldr	r2, [pc, #244]	; (80041dc <HAL_DMA_IRQHandler+0xa58>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00e      	beq.n	8004108 <HAL_DMA_IRQHandler+0x984>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a3c      	ldr	r2, [pc, #240]	; (80041e0 <HAL_DMA_IRQHandler+0xa5c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d009      	beq.n	8004108 <HAL_DMA_IRQHandler+0x984>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a3a      	ldr	r2, [pc, #232]	; (80041e4 <HAL_DMA_IRQHandler+0xa60>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d004      	beq.n	8004108 <HAL_DMA_IRQHandler+0x984>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a39      	ldr	r2, [pc, #228]	; (80041e8 <HAL_DMA_IRQHandler+0xa64>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d101      	bne.n	800410c <HAL_DMA_IRQHandler+0x988>
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <HAL_DMA_IRQHandler+0x98a>
 800410c:	2300      	movs	r3, #0
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 823f 	beq.w	8004592 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004120:	f003 031f 	and.w	r3, r3, #31
 8004124:	2204      	movs	r2, #4
 8004126:	409a      	lsls	r2, r3
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	4013      	ands	r3, r2
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 80cd 	beq.w	80042cc <HAL_DMA_IRQHandler+0xb48>
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 80c7 	beq.w	80042cc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004142:	f003 031f 	and.w	r3, r3, #31
 8004146:	2204      	movs	r2, #4
 8004148:	409a      	lsls	r2, r3
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d049      	beq.n	80041ec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d109      	bne.n	8004176 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 8210 	beq.w	800458c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004174:	e20a      	b.n	800458c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 8206 	beq.w	800458c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004188:	e200      	b.n	800458c <HAL_DMA_IRQHandler+0xe08>
 800418a:	bf00      	nop
 800418c:	40020010 	.word	0x40020010
 8004190:	40020028 	.word	0x40020028
 8004194:	40020040 	.word	0x40020040
 8004198:	40020058 	.word	0x40020058
 800419c:	40020070 	.word	0x40020070
 80041a0:	40020088 	.word	0x40020088
 80041a4:	400200a0 	.word	0x400200a0
 80041a8:	400200b8 	.word	0x400200b8
 80041ac:	40020410 	.word	0x40020410
 80041b0:	40020428 	.word	0x40020428
 80041b4:	40020440 	.word	0x40020440
 80041b8:	40020458 	.word	0x40020458
 80041bc:	40020470 	.word	0x40020470
 80041c0:	40020488 	.word	0x40020488
 80041c4:	400204a0 	.word	0x400204a0
 80041c8:	400204b8 	.word	0x400204b8
 80041cc:	58025408 	.word	0x58025408
 80041d0:	5802541c 	.word	0x5802541c
 80041d4:	58025430 	.word	0x58025430
 80041d8:	58025444 	.word	0x58025444
 80041dc:	58025458 	.word	0x58025458
 80041e0:	5802546c 	.word	0x5802546c
 80041e4:	58025480 	.word	0x58025480
 80041e8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d160      	bne.n	80042b8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a7f      	ldr	r2, [pc, #508]	; (80043f8 <HAL_DMA_IRQHandler+0xc74>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d04a      	beq.n	8004296 <HAL_DMA_IRQHandler+0xb12>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a7d      	ldr	r2, [pc, #500]	; (80043fc <HAL_DMA_IRQHandler+0xc78>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d045      	beq.n	8004296 <HAL_DMA_IRQHandler+0xb12>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a7c      	ldr	r2, [pc, #496]	; (8004400 <HAL_DMA_IRQHandler+0xc7c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d040      	beq.n	8004296 <HAL_DMA_IRQHandler+0xb12>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a7a      	ldr	r2, [pc, #488]	; (8004404 <HAL_DMA_IRQHandler+0xc80>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d03b      	beq.n	8004296 <HAL_DMA_IRQHandler+0xb12>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a79      	ldr	r2, [pc, #484]	; (8004408 <HAL_DMA_IRQHandler+0xc84>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d036      	beq.n	8004296 <HAL_DMA_IRQHandler+0xb12>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a77      	ldr	r2, [pc, #476]	; (800440c <HAL_DMA_IRQHandler+0xc88>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d031      	beq.n	8004296 <HAL_DMA_IRQHandler+0xb12>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a76      	ldr	r2, [pc, #472]	; (8004410 <HAL_DMA_IRQHandler+0xc8c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d02c      	beq.n	8004296 <HAL_DMA_IRQHandler+0xb12>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a74      	ldr	r2, [pc, #464]	; (8004414 <HAL_DMA_IRQHandler+0xc90>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d027      	beq.n	8004296 <HAL_DMA_IRQHandler+0xb12>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a73      	ldr	r2, [pc, #460]	; (8004418 <HAL_DMA_IRQHandler+0xc94>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d022      	beq.n	8004296 <HAL_DMA_IRQHandler+0xb12>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a71      	ldr	r2, [pc, #452]	; (800441c <HAL_DMA_IRQHandler+0xc98>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d01d      	beq.n	8004296 <HAL_DMA_IRQHandler+0xb12>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a70      	ldr	r2, [pc, #448]	; (8004420 <HAL_DMA_IRQHandler+0xc9c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d018      	beq.n	8004296 <HAL_DMA_IRQHandler+0xb12>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a6e      	ldr	r2, [pc, #440]	; (8004424 <HAL_DMA_IRQHandler+0xca0>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d013      	beq.n	8004296 <HAL_DMA_IRQHandler+0xb12>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a6d      	ldr	r2, [pc, #436]	; (8004428 <HAL_DMA_IRQHandler+0xca4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00e      	beq.n	8004296 <HAL_DMA_IRQHandler+0xb12>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a6b      	ldr	r2, [pc, #428]	; (800442c <HAL_DMA_IRQHandler+0xca8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d009      	beq.n	8004296 <HAL_DMA_IRQHandler+0xb12>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a6a      	ldr	r2, [pc, #424]	; (8004430 <HAL_DMA_IRQHandler+0xcac>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d004      	beq.n	8004296 <HAL_DMA_IRQHandler+0xb12>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a68      	ldr	r2, [pc, #416]	; (8004434 <HAL_DMA_IRQHandler+0xcb0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d108      	bne.n	80042a8 <HAL_DMA_IRQHandler+0xb24>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0208 	bic.w	r2, r2, #8
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	e007      	b.n	80042b8 <HAL_DMA_IRQHandler+0xb34>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0204 	bic.w	r2, r2, #4
 80042b6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 8165 	beq.w	800458c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ca:	e15f      	b.n	800458c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d0:	f003 031f 	and.w	r3, r3, #31
 80042d4:	2202      	movs	r2, #2
 80042d6:	409a      	lsls	r2, r3
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	4013      	ands	r3, r2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 80c5 	beq.w	800446c <HAL_DMA_IRQHandler+0xce8>
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 80bf 	beq.w	800446c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	2202      	movs	r2, #2
 80042f8:	409a      	lsls	r2, r3
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d018      	beq.n	800433a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d109      	bne.n	8004326 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 813a 	beq.w	8004590 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004324:	e134      	b.n	8004590 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 8130 	beq.w	8004590 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004338:	e12a      	b.n	8004590 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f003 0320 	and.w	r3, r3, #32
 8004340:	2b00      	cmp	r3, #0
 8004342:	f040 8089 	bne.w	8004458 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a2b      	ldr	r2, [pc, #172]	; (80043f8 <HAL_DMA_IRQHandler+0xc74>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d04a      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xc62>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a29      	ldr	r2, [pc, #164]	; (80043fc <HAL_DMA_IRQHandler+0xc78>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d045      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xc62>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a28      	ldr	r2, [pc, #160]	; (8004400 <HAL_DMA_IRQHandler+0xc7c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d040      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xc62>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a26      	ldr	r2, [pc, #152]	; (8004404 <HAL_DMA_IRQHandler+0xc80>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d03b      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xc62>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a25      	ldr	r2, [pc, #148]	; (8004408 <HAL_DMA_IRQHandler+0xc84>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d036      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xc62>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a23      	ldr	r2, [pc, #140]	; (800440c <HAL_DMA_IRQHandler+0xc88>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d031      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xc62>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a22      	ldr	r2, [pc, #136]	; (8004410 <HAL_DMA_IRQHandler+0xc8c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d02c      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xc62>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a20      	ldr	r2, [pc, #128]	; (8004414 <HAL_DMA_IRQHandler+0xc90>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d027      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xc62>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a1f      	ldr	r2, [pc, #124]	; (8004418 <HAL_DMA_IRQHandler+0xc94>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d022      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xc62>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1d      	ldr	r2, [pc, #116]	; (800441c <HAL_DMA_IRQHandler+0xc98>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d01d      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xc62>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a1c      	ldr	r2, [pc, #112]	; (8004420 <HAL_DMA_IRQHandler+0xc9c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d018      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xc62>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a1a      	ldr	r2, [pc, #104]	; (8004424 <HAL_DMA_IRQHandler+0xca0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d013      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xc62>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a19      	ldr	r2, [pc, #100]	; (8004428 <HAL_DMA_IRQHandler+0xca4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00e      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xc62>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a17      	ldr	r2, [pc, #92]	; (800442c <HAL_DMA_IRQHandler+0xca8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d009      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xc62>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a16      	ldr	r2, [pc, #88]	; (8004430 <HAL_DMA_IRQHandler+0xcac>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d004      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xc62>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a14      	ldr	r2, [pc, #80]	; (8004434 <HAL_DMA_IRQHandler+0xcb0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d128      	bne.n	8004438 <HAL_DMA_IRQHandler+0xcb4>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0214 	bic.w	r2, r2, #20
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	e027      	b.n	8004448 <HAL_DMA_IRQHandler+0xcc4>
 80043f8:	40020010 	.word	0x40020010
 80043fc:	40020028 	.word	0x40020028
 8004400:	40020040 	.word	0x40020040
 8004404:	40020058 	.word	0x40020058
 8004408:	40020070 	.word	0x40020070
 800440c:	40020088 	.word	0x40020088
 8004410:	400200a0 	.word	0x400200a0
 8004414:	400200b8 	.word	0x400200b8
 8004418:	40020410 	.word	0x40020410
 800441c:	40020428 	.word	0x40020428
 8004420:	40020440 	.word	0x40020440
 8004424:	40020458 	.word	0x40020458
 8004428:	40020470 	.word	0x40020470
 800442c:	40020488 	.word	0x40020488
 8004430:	400204a0 	.word	0x400204a0
 8004434:	400204b8 	.word	0x400204b8
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 020a 	bic.w	r2, r2, #10
 8004446:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8097 	beq.w	8004590 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800446a:	e091      	b.n	8004590 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004470:	f003 031f 	and.w	r3, r3, #31
 8004474:	2208      	movs	r2, #8
 8004476:	409a      	lsls	r2, r3
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	4013      	ands	r3, r2
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 8088 	beq.w	8004592 <HAL_DMA_IRQHandler+0xe0e>
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 8082 	beq.w	8004592 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a41      	ldr	r2, [pc, #260]	; (8004598 <HAL_DMA_IRQHandler+0xe14>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d04a      	beq.n	800452e <HAL_DMA_IRQHandler+0xdaa>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a3f      	ldr	r2, [pc, #252]	; (800459c <HAL_DMA_IRQHandler+0xe18>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d045      	beq.n	800452e <HAL_DMA_IRQHandler+0xdaa>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a3e      	ldr	r2, [pc, #248]	; (80045a0 <HAL_DMA_IRQHandler+0xe1c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d040      	beq.n	800452e <HAL_DMA_IRQHandler+0xdaa>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a3c      	ldr	r2, [pc, #240]	; (80045a4 <HAL_DMA_IRQHandler+0xe20>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d03b      	beq.n	800452e <HAL_DMA_IRQHandler+0xdaa>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a3b      	ldr	r2, [pc, #236]	; (80045a8 <HAL_DMA_IRQHandler+0xe24>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d036      	beq.n	800452e <HAL_DMA_IRQHandler+0xdaa>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a39      	ldr	r2, [pc, #228]	; (80045ac <HAL_DMA_IRQHandler+0xe28>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d031      	beq.n	800452e <HAL_DMA_IRQHandler+0xdaa>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a38      	ldr	r2, [pc, #224]	; (80045b0 <HAL_DMA_IRQHandler+0xe2c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d02c      	beq.n	800452e <HAL_DMA_IRQHandler+0xdaa>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a36      	ldr	r2, [pc, #216]	; (80045b4 <HAL_DMA_IRQHandler+0xe30>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d027      	beq.n	800452e <HAL_DMA_IRQHandler+0xdaa>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a35      	ldr	r2, [pc, #212]	; (80045b8 <HAL_DMA_IRQHandler+0xe34>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d022      	beq.n	800452e <HAL_DMA_IRQHandler+0xdaa>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a33      	ldr	r2, [pc, #204]	; (80045bc <HAL_DMA_IRQHandler+0xe38>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d01d      	beq.n	800452e <HAL_DMA_IRQHandler+0xdaa>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a32      	ldr	r2, [pc, #200]	; (80045c0 <HAL_DMA_IRQHandler+0xe3c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d018      	beq.n	800452e <HAL_DMA_IRQHandler+0xdaa>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a30      	ldr	r2, [pc, #192]	; (80045c4 <HAL_DMA_IRQHandler+0xe40>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d013      	beq.n	800452e <HAL_DMA_IRQHandler+0xdaa>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a2f      	ldr	r2, [pc, #188]	; (80045c8 <HAL_DMA_IRQHandler+0xe44>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00e      	beq.n	800452e <HAL_DMA_IRQHandler+0xdaa>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a2d      	ldr	r2, [pc, #180]	; (80045cc <HAL_DMA_IRQHandler+0xe48>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d009      	beq.n	800452e <HAL_DMA_IRQHandler+0xdaa>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a2c      	ldr	r2, [pc, #176]	; (80045d0 <HAL_DMA_IRQHandler+0xe4c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d004      	beq.n	800452e <HAL_DMA_IRQHandler+0xdaa>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a2a      	ldr	r2, [pc, #168]	; (80045d4 <HAL_DMA_IRQHandler+0xe50>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d108      	bne.n	8004540 <HAL_DMA_IRQHandler+0xdbc>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 021c 	bic.w	r2, r2, #28
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	e007      	b.n	8004550 <HAL_DMA_IRQHandler+0xdcc>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 020e 	bic.w	r2, r2, #14
 800454e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004554:	f003 031f 	and.w	r3, r3, #31
 8004558:	2201      	movs	r2, #1
 800455a:	409a      	lsls	r2, r3
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800457a:	2b00      	cmp	r3, #0
 800457c:	d009      	beq.n	8004592 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	4798      	blx	r3
 8004586:	e004      	b.n	8004592 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004588:	bf00      	nop
 800458a:	e002      	b.n	8004592 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800458c:	bf00      	nop
 800458e:	e000      	b.n	8004592 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004590:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004592:	3728      	adds	r7, #40	; 0x28
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40020010 	.word	0x40020010
 800459c:	40020028 	.word	0x40020028
 80045a0:	40020040 	.word	0x40020040
 80045a4:	40020058 	.word	0x40020058
 80045a8:	40020070 	.word	0x40020070
 80045ac:	40020088 	.word	0x40020088
 80045b0:	400200a0 	.word	0x400200a0
 80045b4:	400200b8 	.word	0x400200b8
 80045b8:	40020410 	.word	0x40020410
 80045bc:	40020428 	.word	0x40020428
 80045c0:	40020440 	.word	0x40020440
 80045c4:	40020458 	.word	0x40020458
 80045c8:	40020470 	.word	0x40020470
 80045cc:	40020488 	.word	0x40020488
 80045d0:	400204a0 	.word	0x400204a0
 80045d4:	400204b8 	.word	0x400204b8

080045d8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004602:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004608:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a7f      	ldr	r2, [pc, #508]	; (800480c <DMA_SetConfig+0x21c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d072      	beq.n	80046fa <DMA_SetConfig+0x10a>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a7d      	ldr	r2, [pc, #500]	; (8004810 <DMA_SetConfig+0x220>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d06d      	beq.n	80046fa <DMA_SetConfig+0x10a>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a7c      	ldr	r2, [pc, #496]	; (8004814 <DMA_SetConfig+0x224>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d068      	beq.n	80046fa <DMA_SetConfig+0x10a>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a7a      	ldr	r2, [pc, #488]	; (8004818 <DMA_SetConfig+0x228>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d063      	beq.n	80046fa <DMA_SetConfig+0x10a>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a79      	ldr	r2, [pc, #484]	; (800481c <DMA_SetConfig+0x22c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d05e      	beq.n	80046fa <DMA_SetConfig+0x10a>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a77      	ldr	r2, [pc, #476]	; (8004820 <DMA_SetConfig+0x230>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d059      	beq.n	80046fa <DMA_SetConfig+0x10a>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a76      	ldr	r2, [pc, #472]	; (8004824 <DMA_SetConfig+0x234>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d054      	beq.n	80046fa <DMA_SetConfig+0x10a>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a74      	ldr	r2, [pc, #464]	; (8004828 <DMA_SetConfig+0x238>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d04f      	beq.n	80046fa <DMA_SetConfig+0x10a>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a73      	ldr	r2, [pc, #460]	; (800482c <DMA_SetConfig+0x23c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d04a      	beq.n	80046fa <DMA_SetConfig+0x10a>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a71      	ldr	r2, [pc, #452]	; (8004830 <DMA_SetConfig+0x240>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d045      	beq.n	80046fa <DMA_SetConfig+0x10a>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a70      	ldr	r2, [pc, #448]	; (8004834 <DMA_SetConfig+0x244>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d040      	beq.n	80046fa <DMA_SetConfig+0x10a>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a6e      	ldr	r2, [pc, #440]	; (8004838 <DMA_SetConfig+0x248>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d03b      	beq.n	80046fa <DMA_SetConfig+0x10a>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a6d      	ldr	r2, [pc, #436]	; (800483c <DMA_SetConfig+0x24c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d036      	beq.n	80046fa <DMA_SetConfig+0x10a>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a6b      	ldr	r2, [pc, #428]	; (8004840 <DMA_SetConfig+0x250>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d031      	beq.n	80046fa <DMA_SetConfig+0x10a>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a6a      	ldr	r2, [pc, #424]	; (8004844 <DMA_SetConfig+0x254>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d02c      	beq.n	80046fa <DMA_SetConfig+0x10a>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a68      	ldr	r2, [pc, #416]	; (8004848 <DMA_SetConfig+0x258>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d027      	beq.n	80046fa <DMA_SetConfig+0x10a>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a67      	ldr	r2, [pc, #412]	; (800484c <DMA_SetConfig+0x25c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d022      	beq.n	80046fa <DMA_SetConfig+0x10a>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a65      	ldr	r2, [pc, #404]	; (8004850 <DMA_SetConfig+0x260>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d01d      	beq.n	80046fa <DMA_SetConfig+0x10a>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a64      	ldr	r2, [pc, #400]	; (8004854 <DMA_SetConfig+0x264>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d018      	beq.n	80046fa <DMA_SetConfig+0x10a>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a62      	ldr	r2, [pc, #392]	; (8004858 <DMA_SetConfig+0x268>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d013      	beq.n	80046fa <DMA_SetConfig+0x10a>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a61      	ldr	r2, [pc, #388]	; (800485c <DMA_SetConfig+0x26c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d00e      	beq.n	80046fa <DMA_SetConfig+0x10a>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a5f      	ldr	r2, [pc, #380]	; (8004860 <DMA_SetConfig+0x270>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d009      	beq.n	80046fa <DMA_SetConfig+0x10a>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a5e      	ldr	r2, [pc, #376]	; (8004864 <DMA_SetConfig+0x274>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d004      	beq.n	80046fa <DMA_SetConfig+0x10a>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a5c      	ldr	r2, [pc, #368]	; (8004868 <DMA_SetConfig+0x278>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d101      	bne.n	80046fe <DMA_SetConfig+0x10e>
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <DMA_SetConfig+0x110>
 80046fe:	2300      	movs	r3, #0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00d      	beq.n	8004720 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800470c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d004      	beq.n	8004720 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800471e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a39      	ldr	r2, [pc, #228]	; (800480c <DMA_SetConfig+0x21c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d04a      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a38      	ldr	r2, [pc, #224]	; (8004810 <DMA_SetConfig+0x220>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d045      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a36      	ldr	r2, [pc, #216]	; (8004814 <DMA_SetConfig+0x224>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d040      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a35      	ldr	r2, [pc, #212]	; (8004818 <DMA_SetConfig+0x228>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d03b      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a33      	ldr	r2, [pc, #204]	; (800481c <DMA_SetConfig+0x22c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d036      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a32      	ldr	r2, [pc, #200]	; (8004820 <DMA_SetConfig+0x230>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d031      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a30      	ldr	r2, [pc, #192]	; (8004824 <DMA_SetConfig+0x234>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d02c      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a2f      	ldr	r2, [pc, #188]	; (8004828 <DMA_SetConfig+0x238>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d027      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a2d      	ldr	r2, [pc, #180]	; (800482c <DMA_SetConfig+0x23c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d022      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a2c      	ldr	r2, [pc, #176]	; (8004830 <DMA_SetConfig+0x240>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d01d      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a2a      	ldr	r2, [pc, #168]	; (8004834 <DMA_SetConfig+0x244>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d018      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a29      	ldr	r2, [pc, #164]	; (8004838 <DMA_SetConfig+0x248>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d013      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a27      	ldr	r2, [pc, #156]	; (800483c <DMA_SetConfig+0x24c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00e      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a26      	ldr	r2, [pc, #152]	; (8004840 <DMA_SetConfig+0x250>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d009      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a24      	ldr	r2, [pc, #144]	; (8004844 <DMA_SetConfig+0x254>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d004      	beq.n	80047c0 <DMA_SetConfig+0x1d0>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a23      	ldr	r2, [pc, #140]	; (8004848 <DMA_SetConfig+0x258>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d101      	bne.n	80047c4 <DMA_SetConfig+0x1d4>
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <DMA_SetConfig+0x1d6>
 80047c4:	2300      	movs	r3, #0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d059      	beq.n	800487e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ce:	f003 031f 	and.w	r3, r3, #31
 80047d2:	223f      	movs	r2, #63	; 0x3f
 80047d4:	409a      	lsls	r2, r3
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047e8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b40      	cmp	r3, #64	; 0x40
 80047f8:	d138      	bne.n	800486c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800480a:	e086      	b.n	800491a <DMA_SetConfig+0x32a>
 800480c:	40020010 	.word	0x40020010
 8004810:	40020028 	.word	0x40020028
 8004814:	40020040 	.word	0x40020040
 8004818:	40020058 	.word	0x40020058
 800481c:	40020070 	.word	0x40020070
 8004820:	40020088 	.word	0x40020088
 8004824:	400200a0 	.word	0x400200a0
 8004828:	400200b8 	.word	0x400200b8
 800482c:	40020410 	.word	0x40020410
 8004830:	40020428 	.word	0x40020428
 8004834:	40020440 	.word	0x40020440
 8004838:	40020458 	.word	0x40020458
 800483c:	40020470 	.word	0x40020470
 8004840:	40020488 	.word	0x40020488
 8004844:	400204a0 	.word	0x400204a0
 8004848:	400204b8 	.word	0x400204b8
 800484c:	58025408 	.word	0x58025408
 8004850:	5802541c 	.word	0x5802541c
 8004854:	58025430 	.word	0x58025430
 8004858:	58025444 	.word	0x58025444
 800485c:	58025458 	.word	0x58025458
 8004860:	5802546c 	.word	0x5802546c
 8004864:	58025480 	.word	0x58025480
 8004868:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	60da      	str	r2, [r3, #12]
}
 800487c:	e04d      	b.n	800491a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a29      	ldr	r2, [pc, #164]	; (8004928 <DMA_SetConfig+0x338>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d022      	beq.n	80048ce <DMA_SetConfig+0x2de>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a27      	ldr	r2, [pc, #156]	; (800492c <DMA_SetConfig+0x33c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d01d      	beq.n	80048ce <DMA_SetConfig+0x2de>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a26      	ldr	r2, [pc, #152]	; (8004930 <DMA_SetConfig+0x340>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d018      	beq.n	80048ce <DMA_SetConfig+0x2de>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a24      	ldr	r2, [pc, #144]	; (8004934 <DMA_SetConfig+0x344>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <DMA_SetConfig+0x2de>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a23      	ldr	r2, [pc, #140]	; (8004938 <DMA_SetConfig+0x348>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00e      	beq.n	80048ce <DMA_SetConfig+0x2de>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a21      	ldr	r2, [pc, #132]	; (800493c <DMA_SetConfig+0x34c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d009      	beq.n	80048ce <DMA_SetConfig+0x2de>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a20      	ldr	r2, [pc, #128]	; (8004940 <DMA_SetConfig+0x350>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <DMA_SetConfig+0x2de>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a1e      	ldr	r2, [pc, #120]	; (8004944 <DMA_SetConfig+0x354>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d101      	bne.n	80048d2 <DMA_SetConfig+0x2e2>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <DMA_SetConfig+0x2e4>
 80048d2:	2300      	movs	r3, #0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d020      	beq.n	800491a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048dc:	f003 031f 	and.w	r3, r3, #31
 80048e0:	2201      	movs	r2, #1
 80048e2:	409a      	lsls	r2, r3
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	2b40      	cmp	r3, #64	; 0x40
 80048f6:	d108      	bne.n	800490a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	60da      	str	r2, [r3, #12]
}
 8004908:	e007      	b.n	800491a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	60da      	str	r2, [r3, #12]
}
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	58025408 	.word	0x58025408
 800492c:	5802541c 	.word	0x5802541c
 8004930:	58025430 	.word	0x58025430
 8004934:	58025444 	.word	0x58025444
 8004938:	58025458 	.word	0x58025458
 800493c:	5802546c 	.word	0x5802546c
 8004940:	58025480 	.word	0x58025480
 8004944:	58025494 	.word	0x58025494

08004948 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a42      	ldr	r2, [pc, #264]	; (8004a60 <DMA_CalcBaseAndBitshift+0x118>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d04a      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a41      	ldr	r2, [pc, #260]	; (8004a64 <DMA_CalcBaseAndBitshift+0x11c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d045      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a3f      	ldr	r2, [pc, #252]	; (8004a68 <DMA_CalcBaseAndBitshift+0x120>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d040      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a3e      	ldr	r2, [pc, #248]	; (8004a6c <DMA_CalcBaseAndBitshift+0x124>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d03b      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a3c      	ldr	r2, [pc, #240]	; (8004a70 <DMA_CalcBaseAndBitshift+0x128>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d036      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a3b      	ldr	r2, [pc, #236]	; (8004a74 <DMA_CalcBaseAndBitshift+0x12c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d031      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a39      	ldr	r2, [pc, #228]	; (8004a78 <DMA_CalcBaseAndBitshift+0x130>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d02c      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a38      	ldr	r2, [pc, #224]	; (8004a7c <DMA_CalcBaseAndBitshift+0x134>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d027      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a36      	ldr	r2, [pc, #216]	; (8004a80 <DMA_CalcBaseAndBitshift+0x138>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d022      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a35      	ldr	r2, [pc, #212]	; (8004a84 <DMA_CalcBaseAndBitshift+0x13c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d01d      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a33      	ldr	r2, [pc, #204]	; (8004a88 <DMA_CalcBaseAndBitshift+0x140>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d018      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a32      	ldr	r2, [pc, #200]	; (8004a8c <DMA_CalcBaseAndBitshift+0x144>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d013      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a30      	ldr	r2, [pc, #192]	; (8004a90 <DMA_CalcBaseAndBitshift+0x148>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00e      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a2f      	ldr	r2, [pc, #188]	; (8004a94 <DMA_CalcBaseAndBitshift+0x14c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d009      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a2d      	ldr	r2, [pc, #180]	; (8004a98 <DMA_CalcBaseAndBitshift+0x150>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <DMA_CalcBaseAndBitshift+0xa8>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a2c      	ldr	r2, [pc, #176]	; (8004a9c <DMA_CalcBaseAndBitshift+0x154>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d101      	bne.n	80049f4 <DMA_CalcBaseAndBitshift+0xac>
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <DMA_CalcBaseAndBitshift+0xae>
 80049f4:	2300      	movs	r3, #0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d024      	beq.n	8004a44 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	3b10      	subs	r3, #16
 8004a02:	4a27      	ldr	r2, [pc, #156]	; (8004aa0 <DMA_CalcBaseAndBitshift+0x158>)
 8004a04:	fba2 2303 	umull	r2, r3, r2, r3
 8004a08:	091b      	lsrs	r3, r3, #4
 8004a0a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	4a24      	ldr	r2, [pc, #144]	; (8004aa4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004a14:	5cd3      	ldrb	r3, [r2, r3]
 8004a16:	461a      	mov	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d908      	bls.n	8004a34 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	4b1f      	ldr	r3, [pc, #124]	; (8004aa8 <DMA_CalcBaseAndBitshift+0x160>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	1d1a      	adds	r2, r3, #4
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	659a      	str	r2, [r3, #88]	; 0x58
 8004a32:	e00d      	b.n	8004a50 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	4b1b      	ldr	r3, [pc, #108]	; (8004aa8 <DMA_CalcBaseAndBitshift+0x160>)
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6593      	str	r3, [r2, #88]	; 0x58
 8004a42:	e005      	b.n	8004a50 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	40020010 	.word	0x40020010
 8004a64:	40020028 	.word	0x40020028
 8004a68:	40020040 	.word	0x40020040
 8004a6c:	40020058 	.word	0x40020058
 8004a70:	40020070 	.word	0x40020070
 8004a74:	40020088 	.word	0x40020088
 8004a78:	400200a0 	.word	0x400200a0
 8004a7c:	400200b8 	.word	0x400200b8
 8004a80:	40020410 	.word	0x40020410
 8004a84:	40020428 	.word	0x40020428
 8004a88:	40020440 	.word	0x40020440
 8004a8c:	40020458 	.word	0x40020458
 8004a90:	40020470 	.word	0x40020470
 8004a94:	40020488 	.word	0x40020488
 8004a98:	400204a0 	.word	0x400204a0
 8004a9c:	400204b8 	.word	0x400204b8
 8004aa0:	aaaaaaab 	.word	0xaaaaaaab
 8004aa4:	08013038 	.word	0x08013038
 8004aa8:	fffffc00 	.word	0xfffffc00

08004aac <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d120      	bne.n	8004b02 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d858      	bhi.n	8004b7a <DMA_CheckFifoParam+0xce>
 8004ac8:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <DMA_CheckFifoParam+0x24>)
 8004aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ace:	bf00      	nop
 8004ad0:	08004ae1 	.word	0x08004ae1
 8004ad4:	08004af3 	.word	0x08004af3
 8004ad8:	08004ae1 	.word	0x08004ae1
 8004adc:	08004b7b 	.word	0x08004b7b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d048      	beq.n	8004b7e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004af0:	e045      	b.n	8004b7e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004afa:	d142      	bne.n	8004b82 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b00:	e03f      	b.n	8004b82 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b0a:	d123      	bne.n	8004b54 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b10:	2b03      	cmp	r3, #3
 8004b12:	d838      	bhi.n	8004b86 <DMA_CheckFifoParam+0xda>
 8004b14:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <DMA_CheckFifoParam+0x70>)
 8004b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1a:	bf00      	nop
 8004b1c:	08004b2d 	.word	0x08004b2d
 8004b20:	08004b33 	.word	0x08004b33
 8004b24:	08004b2d 	.word	0x08004b2d
 8004b28:	08004b45 	.word	0x08004b45
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
        break;
 8004b30:	e030      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d025      	beq.n	8004b8a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b42:	e022      	b.n	8004b8a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b4c:	d11f      	bne.n	8004b8e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b52:	e01c      	b.n	8004b8e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d902      	bls.n	8004b62 <DMA_CheckFifoParam+0xb6>
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d003      	beq.n	8004b68 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004b60:	e018      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	73fb      	strb	r3, [r7, #15]
        break;
 8004b66:	e015      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00e      	beq.n	8004b92 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
    break;
 8004b78:	e00b      	b.n	8004b92 <DMA_CheckFifoParam+0xe6>
        break;
 8004b7a:	bf00      	nop
 8004b7c:	e00a      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
        break;
 8004b7e:	bf00      	nop
 8004b80:	e008      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
        break;
 8004b82:	bf00      	nop
 8004b84:	e006      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
        break;
 8004b86:	bf00      	nop
 8004b88:	e004      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
        break;
 8004b8a:	bf00      	nop
 8004b8c:	e002      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
        break;
 8004b8e:	bf00      	nop
 8004b90:	e000      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
    break;
 8004b92:	bf00      	nop
    }
  }

  return status;
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop

08004ba4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a38      	ldr	r2, [pc, #224]	; (8004c98 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d022      	beq.n	8004c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a36      	ldr	r2, [pc, #216]	; (8004c9c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d01d      	beq.n	8004c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a35      	ldr	r2, [pc, #212]	; (8004ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d018      	beq.n	8004c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a33      	ldr	r2, [pc, #204]	; (8004ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d013      	beq.n	8004c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a32      	ldr	r2, [pc, #200]	; (8004ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00e      	beq.n	8004c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a30      	ldr	r2, [pc, #192]	; (8004cac <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d009      	beq.n	8004c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a2f      	ldr	r2, [pc, #188]	; (8004cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d004      	beq.n	8004c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a2d      	ldr	r2, [pc, #180]	; (8004cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d101      	bne.n	8004c06 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004c02:	2301      	movs	r3, #1
 8004c04:	e000      	b.n	8004c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004c06:	2300      	movs	r3, #0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01a      	beq.n	8004c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	3b08      	subs	r3, #8
 8004c14:	4a28      	ldr	r2, [pc, #160]	; (8004cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	091b      	lsrs	r3, r3, #4
 8004c1c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	4b26      	ldr	r3, [pc, #152]	; (8004cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004c22:	4413      	add	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	461a      	mov	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a24      	ldr	r2, [pc, #144]	; (8004cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004c30:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f003 031f 	and.w	r3, r3, #31
 8004c38:	2201      	movs	r2, #1
 8004c3a:	409a      	lsls	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004c40:	e024      	b.n	8004c8c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	3b10      	subs	r3, #16
 8004c4a:	4a1e      	ldr	r2, [pc, #120]	; (8004cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c50:	091b      	lsrs	r3, r3, #4
 8004c52:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	4a1c      	ldr	r2, [pc, #112]	; (8004cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d806      	bhi.n	8004c6a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4a1b      	ldr	r2, [pc, #108]	; (8004ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d902      	bls.n	8004c6a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3308      	adds	r3, #8
 8004c68:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	4b18      	ldr	r3, [pc, #96]	; (8004cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004c6e:	4413      	add	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	461a      	mov	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a16      	ldr	r2, [pc, #88]	; (8004cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004c7c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 031f 	and.w	r3, r3, #31
 8004c84:	2201      	movs	r2, #1
 8004c86:	409a      	lsls	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c8c:	bf00      	nop
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	58025408 	.word	0x58025408
 8004c9c:	5802541c 	.word	0x5802541c
 8004ca0:	58025430 	.word	0x58025430
 8004ca4:	58025444 	.word	0x58025444
 8004ca8:	58025458 	.word	0x58025458
 8004cac:	5802546c 	.word	0x5802546c
 8004cb0:	58025480 	.word	0x58025480
 8004cb4:	58025494 	.word	0x58025494
 8004cb8:	cccccccd 	.word	0xcccccccd
 8004cbc:	16009600 	.word	0x16009600
 8004cc0:	58025880 	.word	0x58025880
 8004cc4:	aaaaaaab 	.word	0xaaaaaaab
 8004cc8:	400204b8 	.word	0x400204b8
 8004ccc:	4002040f 	.word	0x4002040f
 8004cd0:	10008200 	.word	0x10008200
 8004cd4:	40020880 	.word	0x40020880

08004cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d04a      	beq.n	8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d847      	bhi.n	8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a25      	ldr	r2, [pc, #148]	; (8004d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d022      	beq.n	8004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a24      	ldr	r2, [pc, #144]	; (8004d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d01d      	beq.n	8004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a22      	ldr	r2, [pc, #136]	; (8004d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d018      	beq.n	8004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a21      	ldr	r2, [pc, #132]	; (8004d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d013      	beq.n	8004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a1f      	ldr	r2, [pc, #124]	; (8004da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d00e      	beq.n	8004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1e      	ldr	r2, [pc, #120]	; (8004da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d009      	beq.n	8004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a1c      	ldr	r2, [pc, #112]	; (8004da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d004      	beq.n	8004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a1b      	ldr	r2, [pc, #108]	; (8004dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d101      	bne.n	8004d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004d44:	2301      	movs	r3, #1
 8004d46:	e000      	b.n	8004d4a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004d48:	2300      	movs	r3, #0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	4b17      	ldr	r3, [pc, #92]	; (8004db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004d52:	4413      	add	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	461a      	mov	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a15      	ldr	r2, [pc, #84]	; (8004db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004d60:	671a      	str	r2, [r3, #112]	; 0x70
 8004d62:	e009      	b.n	8004d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	4b14      	ldr	r3, [pc, #80]	; (8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004d68:	4413      	add	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a11      	ldr	r2, [pc, #68]	; (8004dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004d76:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	409a      	lsls	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004d84:	bf00      	nop
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	58025408 	.word	0x58025408
 8004d94:	5802541c 	.word	0x5802541c
 8004d98:	58025430 	.word	0x58025430
 8004d9c:	58025444 	.word	0x58025444
 8004da0:	58025458 	.word	0x58025458
 8004da4:	5802546c 	.word	0x5802546c
 8004da8:	58025480 	.word	0x58025480
 8004dac:	58025494 	.word	0x58025494
 8004db0:	1600963f 	.word	0x1600963f
 8004db4:	58025940 	.word	0x58025940
 8004db8:	1000823f 	.word	0x1000823f
 8004dbc:	40020940 	.word	0x40020940

08004dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b089      	sub	sp, #36	; 0x24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004dce:	4b86      	ldr	r3, [pc, #536]	; (8004fe8 <HAL_GPIO_Init+0x228>)
 8004dd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004dd2:	e18c      	b.n	80050ee <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	2101      	movs	r1, #1
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8004de0:	4013      	ands	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 817e 	beq.w	80050e8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f003 0303 	and.w	r3, r3, #3
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d005      	beq.n	8004e04 <HAL_GPIO_Init+0x44>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d130      	bne.n	8004e66 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	2203      	movs	r2, #3
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	43db      	mvns	r3, r3
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	43db      	mvns	r3, r3
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	4013      	ands	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	091b      	lsrs	r3, r3, #4
 8004e50:	f003 0201 	and.w	r2, r3, #1
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	2b03      	cmp	r3, #3
 8004e70:	d017      	beq.n	8004ea2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	2203      	movs	r2, #3
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	43db      	mvns	r3, r3
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	4013      	ands	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	689a      	ldr	r2, [r3, #8]
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	fa02 f303 	lsl.w	r3, r2, r3
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d123      	bne.n	8004ef6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	08da      	lsrs	r2, r3, #3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3208      	adds	r2, #8
 8004eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	220f      	movs	r2, #15
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	691a      	ldr	r2, [r3, #16]
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	08da      	lsrs	r2, r3, #3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3208      	adds	r2, #8
 8004ef0:	69b9      	ldr	r1, [r7, #24]
 8004ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	2203      	movs	r2, #3
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	43db      	mvns	r3, r3
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f003 0203 	and.w	r2, r3, #3
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 80d8 	beq.w	80050e8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f38:	4b2c      	ldr	r3, [pc, #176]	; (8004fec <HAL_GPIO_Init+0x22c>)
 8004f3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f3e:	4a2b      	ldr	r2, [pc, #172]	; (8004fec <HAL_GPIO_Init+0x22c>)
 8004f40:	f043 0302 	orr.w	r3, r3, #2
 8004f44:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f48:	4b28      	ldr	r3, [pc, #160]	; (8004fec <HAL_GPIO_Init+0x22c>)
 8004f4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f56:	4a26      	ldr	r2, [pc, #152]	; (8004ff0 <HAL_GPIO_Init+0x230>)
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	089b      	lsrs	r3, r3, #2
 8004f5c:	3302      	adds	r3, #2
 8004f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	220f      	movs	r2, #15
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	43db      	mvns	r3, r3
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	4013      	ands	r3, r2
 8004f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a1d      	ldr	r2, [pc, #116]	; (8004ff4 <HAL_GPIO_Init+0x234>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d04a      	beq.n	8005018 <HAL_GPIO_Init+0x258>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a1c      	ldr	r2, [pc, #112]	; (8004ff8 <HAL_GPIO_Init+0x238>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d02b      	beq.n	8004fe2 <HAL_GPIO_Init+0x222>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a1b      	ldr	r2, [pc, #108]	; (8004ffc <HAL_GPIO_Init+0x23c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d025      	beq.n	8004fde <HAL_GPIO_Init+0x21e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a1a      	ldr	r2, [pc, #104]	; (8005000 <HAL_GPIO_Init+0x240>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d01f      	beq.n	8004fda <HAL_GPIO_Init+0x21a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a19      	ldr	r2, [pc, #100]	; (8005004 <HAL_GPIO_Init+0x244>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d019      	beq.n	8004fd6 <HAL_GPIO_Init+0x216>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a18      	ldr	r2, [pc, #96]	; (8005008 <HAL_GPIO_Init+0x248>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <HAL_GPIO_Init+0x212>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a17      	ldr	r2, [pc, #92]	; (800500c <HAL_GPIO_Init+0x24c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00d      	beq.n	8004fce <HAL_GPIO_Init+0x20e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a16      	ldr	r2, [pc, #88]	; (8005010 <HAL_GPIO_Init+0x250>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d007      	beq.n	8004fca <HAL_GPIO_Init+0x20a>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a15      	ldr	r2, [pc, #84]	; (8005014 <HAL_GPIO_Init+0x254>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d101      	bne.n	8004fc6 <HAL_GPIO_Init+0x206>
 8004fc2:	2309      	movs	r3, #9
 8004fc4:	e029      	b.n	800501a <HAL_GPIO_Init+0x25a>
 8004fc6:	230a      	movs	r3, #10
 8004fc8:	e027      	b.n	800501a <HAL_GPIO_Init+0x25a>
 8004fca:	2307      	movs	r3, #7
 8004fcc:	e025      	b.n	800501a <HAL_GPIO_Init+0x25a>
 8004fce:	2306      	movs	r3, #6
 8004fd0:	e023      	b.n	800501a <HAL_GPIO_Init+0x25a>
 8004fd2:	2305      	movs	r3, #5
 8004fd4:	e021      	b.n	800501a <HAL_GPIO_Init+0x25a>
 8004fd6:	2304      	movs	r3, #4
 8004fd8:	e01f      	b.n	800501a <HAL_GPIO_Init+0x25a>
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e01d      	b.n	800501a <HAL_GPIO_Init+0x25a>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e01b      	b.n	800501a <HAL_GPIO_Init+0x25a>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e019      	b.n	800501a <HAL_GPIO_Init+0x25a>
 8004fe6:	bf00      	nop
 8004fe8:	58000080 	.word	0x58000080
 8004fec:	58024400 	.word	0x58024400
 8004ff0:	58000400 	.word	0x58000400
 8004ff4:	58020000 	.word	0x58020000
 8004ff8:	58020400 	.word	0x58020400
 8004ffc:	58020800 	.word	0x58020800
 8005000:	58020c00 	.word	0x58020c00
 8005004:	58021000 	.word	0x58021000
 8005008:	58021400 	.word	0x58021400
 800500c:	58021800 	.word	0x58021800
 8005010:	58021c00 	.word	0x58021c00
 8005014:	58022400 	.word	0x58022400
 8005018:	2300      	movs	r3, #0
 800501a:	69fa      	ldr	r2, [r7, #28]
 800501c:	f002 0203 	and.w	r2, r2, #3
 8005020:	0092      	lsls	r2, r2, #2
 8005022:	4093      	lsls	r3, r2
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4313      	orrs	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800502a:	4938      	ldr	r1, [pc, #224]	; (800510c <HAL_GPIO_Init+0x34c>)
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	089b      	lsrs	r3, r3, #2
 8005030:	3302      	adds	r3, #2
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	43db      	mvns	r3, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	4013      	ands	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	4313      	orrs	r3, r2
 800505c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800505e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	43db      	mvns	r3, r3
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	4013      	ands	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	4313      	orrs	r3, r2
 800508a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800508c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	43db      	mvns	r3, r3
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	4013      	ands	r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	43db      	mvns	r3, r3
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	4013      	ands	r3, r2
 80050cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	4313      	orrs	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	3301      	adds	r3, #1
 80050ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	fa22 f303 	lsr.w	r3, r2, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f47f ae6b 	bne.w	8004dd4 <HAL_GPIO_Init+0x14>
  }
}
 80050fe:	bf00      	nop
 8005100:	bf00      	nop
 8005102:	3724      	adds	r7, #36	; 0x24
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	58000400 	.word	0x58000400

08005110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	807b      	strh	r3, [r7, #2]
 800511c:	4613      	mov	r3, r2
 800511e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005120:	787b      	ldrb	r3, [r7, #1]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005126:	887a      	ldrh	r2, [r7, #2]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800512c:	e003      	b.n	8005136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800512e:	887b      	ldrh	r3, [r7, #2]
 8005130:	041a      	lsls	r2, r3, #16
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	619a      	str	r2, [r3, #24]
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
	...

08005144 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800514c:	4b19      	ldr	r3, [pc, #100]	; (80051b4 <HAL_PWREx_ConfigSupply+0x70>)
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b04      	cmp	r3, #4
 8005156:	d00a      	beq.n	800516e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005158:	4b16      	ldr	r3, [pc, #88]	; (80051b4 <HAL_PWREx_ConfigSupply+0x70>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	429a      	cmp	r2, r3
 8005164:	d001      	beq.n	800516a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e01f      	b.n	80051aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	e01d      	b.n	80051aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800516e:	4b11      	ldr	r3, [pc, #68]	; (80051b4 <HAL_PWREx_ConfigSupply+0x70>)
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f023 0207 	bic.w	r2, r3, #7
 8005176:	490f      	ldr	r1, [pc, #60]	; (80051b4 <HAL_PWREx_ConfigSupply+0x70>)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4313      	orrs	r3, r2
 800517c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800517e:	f7fc feef 	bl	8001f60 <HAL_GetTick>
 8005182:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005184:	e009      	b.n	800519a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005186:	f7fc feeb 	bl	8001f60 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005194:	d901      	bls.n	800519a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e007      	b.n	80051aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800519a:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <HAL_PWREx_ConfigSupply+0x70>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a6:	d1ee      	bne.n	8005186 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	58024800 	.word	0x58024800

080051b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08c      	sub	sp, #48	; 0x30
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e3c8      	b.n	800595c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 8087 	beq.w	80052e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051d8:	4b88      	ldr	r3, [pc, #544]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051e2:	4b86      	ldr	r3, [pc, #536]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 80051e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ea:	2b10      	cmp	r3, #16
 80051ec:	d007      	beq.n	80051fe <HAL_RCC_OscConfig+0x46>
 80051ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f0:	2b18      	cmp	r3, #24
 80051f2:	d110      	bne.n	8005216 <HAL_RCC_OscConfig+0x5e>
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d10b      	bne.n	8005216 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051fe:	4b7f      	ldr	r3, [pc, #508]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d06c      	beq.n	80052e4 <HAL_RCC_OscConfig+0x12c>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d168      	bne.n	80052e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e3a2      	b.n	800595c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800521e:	d106      	bne.n	800522e <HAL_RCC_OscConfig+0x76>
 8005220:	4b76      	ldr	r3, [pc, #472]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a75      	ldr	r2, [pc, #468]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 8005226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800522a:	6013      	str	r3, [r2, #0]
 800522c:	e02e      	b.n	800528c <HAL_RCC_OscConfig+0xd4>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10c      	bne.n	8005250 <HAL_RCC_OscConfig+0x98>
 8005236:	4b71      	ldr	r3, [pc, #452]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a70      	ldr	r2, [pc, #448]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 800523c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	4b6e      	ldr	r3, [pc, #440]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a6d      	ldr	r2, [pc, #436]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 8005248:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	e01d      	b.n	800528c <HAL_RCC_OscConfig+0xd4>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005258:	d10c      	bne.n	8005274 <HAL_RCC_OscConfig+0xbc>
 800525a:	4b68      	ldr	r3, [pc, #416]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a67      	ldr	r2, [pc, #412]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 8005260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005264:	6013      	str	r3, [r2, #0]
 8005266:	4b65      	ldr	r3, [pc, #404]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a64      	ldr	r2, [pc, #400]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 800526c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	e00b      	b.n	800528c <HAL_RCC_OscConfig+0xd4>
 8005274:	4b61      	ldr	r3, [pc, #388]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a60      	ldr	r2, [pc, #384]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 800527a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800527e:	6013      	str	r3, [r2, #0]
 8005280:	4b5e      	ldr	r3, [pc, #376]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a5d      	ldr	r2, [pc, #372]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 8005286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800528a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d013      	beq.n	80052bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005294:	f7fc fe64 	bl	8001f60 <HAL_GetTick>
 8005298:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800529c:	f7fc fe60 	bl	8001f60 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b64      	cmp	r3, #100	; 0x64
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e356      	b.n	800595c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052ae:	4b53      	ldr	r3, [pc, #332]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0f0      	beq.n	800529c <HAL_RCC_OscConfig+0xe4>
 80052ba:	e014      	b.n	80052e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052bc:	f7fc fe50 	bl	8001f60 <HAL_GetTick>
 80052c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052c4:	f7fc fe4c 	bl	8001f60 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b64      	cmp	r3, #100	; 0x64
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e342      	b.n	800595c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052d6:	4b49      	ldr	r3, [pc, #292]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1f0      	bne.n	80052c4 <HAL_RCC_OscConfig+0x10c>
 80052e2:	e000      	b.n	80052e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 808c 	beq.w	800540c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052f4:	4b41      	ldr	r3, [pc, #260]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052fc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052fe:	4b3f      	ldr	r3, [pc, #252]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d007      	beq.n	800531a <HAL_RCC_OscConfig+0x162>
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	2b18      	cmp	r3, #24
 800530e:	d137      	bne.n	8005380 <HAL_RCC_OscConfig+0x1c8>
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d132      	bne.n	8005380 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800531a:	4b38      	ldr	r3, [pc, #224]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	d005      	beq.n	8005332 <HAL_RCC_OscConfig+0x17a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e314      	b.n	800595c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005332:	4b32      	ldr	r3, [pc, #200]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f023 0219 	bic.w	r2, r3, #25
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	492f      	ldr	r1, [pc, #188]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 8005340:	4313      	orrs	r3, r2
 8005342:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005344:	f7fc fe0c 	bl	8001f60 <HAL_GetTick>
 8005348:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800534c:	f7fc fe08 	bl	8001f60 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e2fe      	b.n	800595c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800535e:	4b27      	ldr	r3, [pc, #156]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0304 	and.w	r3, r3, #4
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0f0      	beq.n	800534c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800536a:	4b24      	ldr	r3, [pc, #144]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	061b      	lsls	r3, r3, #24
 8005378:	4920      	ldr	r1, [pc, #128]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 800537a:	4313      	orrs	r3, r2
 800537c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800537e:	e045      	b.n	800540c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d026      	beq.n	80053d6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005388:	4b1c      	ldr	r3, [pc, #112]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f023 0219 	bic.w	r2, r3, #25
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	4919      	ldr	r1, [pc, #100]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 8005396:	4313      	orrs	r3, r2
 8005398:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539a:	f7fc fde1 	bl	8001f60 <HAL_GetTick>
 800539e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053a2:	f7fc fddd 	bl	8001f60 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e2d3      	b.n	800595c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053b4:	4b11      	ldr	r3, [pc, #68]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0f0      	beq.n	80053a2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053c0:	4b0e      	ldr	r3, [pc, #56]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	061b      	lsls	r3, r3, #24
 80053ce:	490b      	ldr	r1, [pc, #44]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	604b      	str	r3, [r1, #4]
 80053d4:	e01a      	b.n	800540c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a08      	ldr	r2, [pc, #32]	; (80053fc <HAL_RCC_OscConfig+0x244>)
 80053dc:	f023 0301 	bic.w	r3, r3, #1
 80053e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e2:	f7fc fdbd 	bl	8001f60 <HAL_GetTick>
 80053e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053e8:	e00a      	b.n	8005400 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053ea:	f7fc fdb9 	bl	8001f60 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d903      	bls.n	8005400 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e2af      	b.n	800595c <HAL_RCC_OscConfig+0x7a4>
 80053fc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005400:	4b96      	ldr	r3, [pc, #600]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1ee      	bne.n	80053ea <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	2b00      	cmp	r3, #0
 8005416:	d06a      	beq.n	80054ee <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005418:	4b90      	ldr	r3, [pc, #576]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005420:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005422:	4b8e      	ldr	r3, [pc, #568]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 8005424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005426:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	2b08      	cmp	r3, #8
 800542c:	d007      	beq.n	800543e <HAL_RCC_OscConfig+0x286>
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	2b18      	cmp	r3, #24
 8005432:	d11b      	bne.n	800546c <HAL_RCC_OscConfig+0x2b4>
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	2b01      	cmp	r3, #1
 800543c:	d116      	bne.n	800546c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800543e:	4b87      	ldr	r3, [pc, #540]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005446:	2b00      	cmp	r3, #0
 8005448:	d005      	beq.n	8005456 <HAL_RCC_OscConfig+0x29e>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	2b80      	cmp	r3, #128	; 0x80
 8005450:	d001      	beq.n	8005456 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e282      	b.n	800595c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005456:	4b81      	ldr	r3, [pc, #516]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	061b      	lsls	r3, r3, #24
 8005464:	497d      	ldr	r1, [pc, #500]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 8005466:	4313      	orrs	r3, r2
 8005468:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800546a:	e040      	b.n	80054ee <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d023      	beq.n	80054bc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005474:	4b79      	ldr	r3, [pc, #484]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a78      	ldr	r2, [pc, #480]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 800547a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800547e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005480:	f7fc fd6e 	bl	8001f60 <HAL_GetTick>
 8005484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005488:	f7fc fd6a 	bl	8001f60 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e260      	b.n	800595c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800549a:	4b70      	ldr	r3, [pc, #448]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0f0      	beq.n	8005488 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054a6:	4b6d      	ldr	r3, [pc, #436]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	061b      	lsls	r3, r3, #24
 80054b4:	4969      	ldr	r1, [pc, #420]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60cb      	str	r3, [r1, #12]
 80054ba:	e018      	b.n	80054ee <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80054bc:	4b67      	ldr	r3, [pc, #412]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a66      	ldr	r2, [pc, #408]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 80054c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c8:	f7fc fd4a 	bl	8001f60 <HAL_GetTick>
 80054cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80054d0:	f7fc fd46 	bl	8001f60 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e23c      	b.n	800595c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054e2:	4b5e      	ldr	r3, [pc, #376]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d036      	beq.n	8005568 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d019      	beq.n	8005536 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005502:	4b56      	ldr	r3, [pc, #344]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 8005504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005506:	4a55      	ldr	r2, [pc, #340]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 8005508:	f043 0301 	orr.w	r3, r3, #1
 800550c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800550e:	f7fc fd27 	bl	8001f60 <HAL_GetTick>
 8005512:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005514:	e008      	b.n	8005528 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005516:	f7fc fd23 	bl	8001f60 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d901      	bls.n	8005528 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e219      	b.n	800595c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005528:	4b4c      	ldr	r3, [pc, #304]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 800552a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0f0      	beq.n	8005516 <HAL_RCC_OscConfig+0x35e>
 8005534:	e018      	b.n	8005568 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005536:	4b49      	ldr	r3, [pc, #292]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 8005538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800553a:	4a48      	ldr	r2, [pc, #288]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 800553c:	f023 0301 	bic.w	r3, r3, #1
 8005540:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005542:	f7fc fd0d 	bl	8001f60 <HAL_GetTick>
 8005546:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005548:	e008      	b.n	800555c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800554a:	f7fc fd09 	bl	8001f60 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e1ff      	b.n	800595c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800555c:	4b3f      	ldr	r3, [pc, #252]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 800555e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1f0      	bne.n	800554a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b00      	cmp	r3, #0
 8005572:	d036      	beq.n	80055e2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d019      	beq.n	80055b0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800557c:	4b37      	ldr	r3, [pc, #220]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a36      	ldr	r2, [pc, #216]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 8005582:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005586:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005588:	f7fc fcea 	bl	8001f60 <HAL_GetTick>
 800558c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005590:	f7fc fce6 	bl	8001f60 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e1dc      	b.n	800595c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055a2:	4b2e      	ldr	r3, [pc, #184]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0f0      	beq.n	8005590 <HAL_RCC_OscConfig+0x3d8>
 80055ae:	e018      	b.n	80055e2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055b0:	4b2a      	ldr	r3, [pc, #168]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a29      	ldr	r2, [pc, #164]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 80055b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055bc:	f7fc fcd0 	bl	8001f60 <HAL_GetTick>
 80055c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055c4:	f7fc fccc 	bl	8001f60 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e1c2      	b.n	800595c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055d6:	4b21      	ldr	r3, [pc, #132]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1f0      	bne.n	80055c4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0304 	and.w	r3, r3, #4
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 8086 	beq.w	80056fc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80055f0:	4b1b      	ldr	r3, [pc, #108]	; (8005660 <HAL_RCC_OscConfig+0x4a8>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a1a      	ldr	r2, [pc, #104]	; (8005660 <HAL_RCC_OscConfig+0x4a8>)
 80055f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055fc:	f7fc fcb0 	bl	8001f60 <HAL_GetTick>
 8005600:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005604:	f7fc fcac 	bl	8001f60 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b64      	cmp	r3, #100	; 0x64
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e1a2      	b.n	800595c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005616:	4b12      	ldr	r3, [pc, #72]	; (8005660 <HAL_RCC_OscConfig+0x4a8>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0f0      	beq.n	8005604 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d106      	bne.n	8005638 <HAL_RCC_OscConfig+0x480>
 800562a:	4b0c      	ldr	r3, [pc, #48]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 800562c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562e:	4a0b      	ldr	r2, [pc, #44]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 8005630:	f043 0301 	orr.w	r3, r3, #1
 8005634:	6713      	str	r3, [r2, #112]	; 0x70
 8005636:	e032      	b.n	800569e <HAL_RCC_OscConfig+0x4e6>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d111      	bne.n	8005664 <HAL_RCC_OscConfig+0x4ac>
 8005640:	4b06      	ldr	r3, [pc, #24]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 8005642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005644:	4a05      	ldr	r2, [pc, #20]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 8005646:	f023 0301 	bic.w	r3, r3, #1
 800564a:	6713      	str	r3, [r2, #112]	; 0x70
 800564c:	4b03      	ldr	r3, [pc, #12]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 800564e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005650:	4a02      	ldr	r2, [pc, #8]	; (800565c <HAL_RCC_OscConfig+0x4a4>)
 8005652:	f023 0304 	bic.w	r3, r3, #4
 8005656:	6713      	str	r3, [r2, #112]	; 0x70
 8005658:	e021      	b.n	800569e <HAL_RCC_OscConfig+0x4e6>
 800565a:	bf00      	nop
 800565c:	58024400 	.word	0x58024400
 8005660:	58024800 	.word	0x58024800
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	2b05      	cmp	r3, #5
 800566a:	d10c      	bne.n	8005686 <HAL_RCC_OscConfig+0x4ce>
 800566c:	4b83      	ldr	r3, [pc, #524]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	4a82      	ldr	r2, [pc, #520]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 8005672:	f043 0304 	orr.w	r3, r3, #4
 8005676:	6713      	str	r3, [r2, #112]	; 0x70
 8005678:	4b80      	ldr	r3, [pc, #512]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 800567a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567c:	4a7f      	ldr	r2, [pc, #508]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 800567e:	f043 0301 	orr.w	r3, r3, #1
 8005682:	6713      	str	r3, [r2, #112]	; 0x70
 8005684:	e00b      	b.n	800569e <HAL_RCC_OscConfig+0x4e6>
 8005686:	4b7d      	ldr	r3, [pc, #500]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 8005688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568a:	4a7c      	ldr	r2, [pc, #496]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 800568c:	f023 0301 	bic.w	r3, r3, #1
 8005690:	6713      	str	r3, [r2, #112]	; 0x70
 8005692:	4b7a      	ldr	r3, [pc, #488]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 8005694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005696:	4a79      	ldr	r2, [pc, #484]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 8005698:	f023 0304 	bic.w	r3, r3, #4
 800569c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d015      	beq.n	80056d2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a6:	f7fc fc5b 	bl	8001f60 <HAL_GetTick>
 80056aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056ac:	e00a      	b.n	80056c4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ae:	f7fc fc57 	bl	8001f60 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056bc:	4293      	cmp	r3, r2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e14b      	b.n	800595c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056c4:	4b6d      	ldr	r3, [pc, #436]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 80056c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0ee      	beq.n	80056ae <HAL_RCC_OscConfig+0x4f6>
 80056d0:	e014      	b.n	80056fc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d2:	f7fc fc45 	bl	8001f60 <HAL_GetTick>
 80056d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056d8:	e00a      	b.n	80056f0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056da:	f7fc fc41 	bl	8001f60 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e135      	b.n	800595c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056f0:	4b62      	ldr	r3, [pc, #392]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 80056f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1ee      	bne.n	80056da <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 812a 	beq.w	800595a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005706:	4b5d      	ldr	r3, [pc, #372]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800570e:	2b18      	cmp	r3, #24
 8005710:	f000 80ba 	beq.w	8005888 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	2b02      	cmp	r3, #2
 800571a:	f040 8095 	bne.w	8005848 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800571e:	4b57      	ldr	r3, [pc, #348]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a56      	ldr	r2, [pc, #344]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 8005724:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572a:	f7fc fc19 	bl	8001f60 <HAL_GetTick>
 800572e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005732:	f7fc fc15 	bl	8001f60 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e10b      	b.n	800595c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005744:	4b4d      	ldr	r3, [pc, #308]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1f0      	bne.n	8005732 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005750:	4b4a      	ldr	r3, [pc, #296]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 8005752:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005754:	4b4a      	ldr	r3, [pc, #296]	; (8005880 <HAL_RCC_OscConfig+0x6c8>)
 8005756:	4013      	ands	r3, r2
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005760:	0112      	lsls	r2, r2, #4
 8005762:	430a      	orrs	r2, r1
 8005764:	4945      	ldr	r1, [pc, #276]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 8005766:	4313      	orrs	r3, r2
 8005768:	628b      	str	r3, [r1, #40]	; 0x28
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576e:	3b01      	subs	r3, #1
 8005770:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005778:	3b01      	subs	r3, #1
 800577a:	025b      	lsls	r3, r3, #9
 800577c:	b29b      	uxth	r3, r3
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005784:	3b01      	subs	r3, #1
 8005786:	041b      	lsls	r3, r3, #16
 8005788:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005792:	3b01      	subs	r3, #1
 8005794:	061b      	lsls	r3, r3, #24
 8005796:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800579a:	4938      	ldr	r1, [pc, #224]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 800579c:	4313      	orrs	r3, r2
 800579e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80057a0:	4b36      	ldr	r3, [pc, #216]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	4a35      	ldr	r2, [pc, #212]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 80057a6:	f023 0301 	bic.w	r3, r3, #1
 80057aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057ac:	4b33      	ldr	r3, [pc, #204]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 80057ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057b0:	4b34      	ldr	r3, [pc, #208]	; (8005884 <HAL_RCC_OscConfig+0x6cc>)
 80057b2:	4013      	ands	r3, r2
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80057b8:	00d2      	lsls	r2, r2, #3
 80057ba:	4930      	ldr	r1, [pc, #192]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80057c0:	4b2e      	ldr	r3, [pc, #184]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	f023 020c 	bic.w	r2, r3, #12
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057cc:	492b      	ldr	r1, [pc, #172]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80057d2:	4b2a      	ldr	r3, [pc, #168]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 80057d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d6:	f023 0202 	bic.w	r2, r3, #2
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057de:	4927      	ldr	r1, [pc, #156]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057e4:	4b25      	ldr	r3, [pc, #148]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	4a24      	ldr	r2, [pc, #144]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 80057ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f0:	4b22      	ldr	r3, [pc, #136]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 80057f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f4:	4a21      	ldr	r2, [pc, #132]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 80057f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80057fc:	4b1f      	ldr	r3, [pc, #124]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	4a1e      	ldr	r2, [pc, #120]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 8005802:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005806:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005808:	4b1c      	ldr	r3, [pc, #112]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	4a1b      	ldr	r2, [pc, #108]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 800580e:	f043 0301 	orr.w	r3, r3, #1
 8005812:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005814:	4b19      	ldr	r3, [pc, #100]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a18      	ldr	r2, [pc, #96]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 800581a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800581e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005820:	f7fc fb9e 	bl	8001f60 <HAL_GetTick>
 8005824:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005826:	e008      	b.n	800583a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005828:	f7fc fb9a 	bl	8001f60 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b02      	cmp	r3, #2
 8005834:	d901      	bls.n	800583a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e090      	b.n	800595c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800583a:	4b10      	ldr	r3, [pc, #64]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0f0      	beq.n	8005828 <HAL_RCC_OscConfig+0x670>
 8005846:	e088      	b.n	800595a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005848:	4b0c      	ldr	r3, [pc, #48]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a0b      	ldr	r2, [pc, #44]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 800584e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005854:	f7fc fb84 	bl	8001f60 <HAL_GetTick>
 8005858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800585a:	e008      	b.n	800586e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800585c:	f7fc fb80 	bl	8001f60 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e076      	b.n	800595c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800586e:	4b03      	ldr	r3, [pc, #12]	; (800587c <HAL_RCC_OscConfig+0x6c4>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1f0      	bne.n	800585c <HAL_RCC_OscConfig+0x6a4>
 800587a:	e06e      	b.n	800595a <HAL_RCC_OscConfig+0x7a2>
 800587c:	58024400 	.word	0x58024400
 8005880:	fffffc0c 	.word	0xfffffc0c
 8005884:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005888:	4b36      	ldr	r3, [pc, #216]	; (8005964 <HAL_RCC_OscConfig+0x7ac>)
 800588a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800588e:	4b35      	ldr	r3, [pc, #212]	; (8005964 <HAL_RCC_OscConfig+0x7ac>)
 8005890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005892:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	2b01      	cmp	r3, #1
 800589a:	d031      	beq.n	8005900 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f003 0203 	and.w	r2, r3, #3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d12a      	bne.n	8005900 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	091b      	lsrs	r3, r3, #4
 80058ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d122      	bne.n	8005900 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d11a      	bne.n	8005900 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	0a5b      	lsrs	r3, r3, #9
 80058ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058d8:	429a      	cmp	r2, r3
 80058da:	d111      	bne.n	8005900 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	0c1b      	lsrs	r3, r3, #16
 80058e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d108      	bne.n	8005900 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	0e1b      	lsrs	r3, r3, #24
 80058f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d001      	beq.n	8005904 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e02b      	b.n	800595c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005904:	4b17      	ldr	r3, [pc, #92]	; (8005964 <HAL_RCC_OscConfig+0x7ac>)
 8005906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005908:	08db      	lsrs	r3, r3, #3
 800590a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800590e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	429a      	cmp	r2, r3
 8005918:	d01f      	beq.n	800595a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800591a:	4b12      	ldr	r3, [pc, #72]	; (8005964 <HAL_RCC_OscConfig+0x7ac>)
 800591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591e:	4a11      	ldr	r2, [pc, #68]	; (8005964 <HAL_RCC_OscConfig+0x7ac>)
 8005920:	f023 0301 	bic.w	r3, r3, #1
 8005924:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005926:	f7fc fb1b 	bl	8001f60 <HAL_GetTick>
 800592a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800592c:	bf00      	nop
 800592e:	f7fc fb17 	bl	8001f60 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	4293      	cmp	r3, r2
 8005938:	d0f9      	beq.n	800592e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800593a:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <HAL_RCC_OscConfig+0x7ac>)
 800593c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800593e:	4b0a      	ldr	r3, [pc, #40]	; (8005968 <HAL_RCC_OscConfig+0x7b0>)
 8005940:	4013      	ands	r3, r2
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005946:	00d2      	lsls	r2, r2, #3
 8005948:	4906      	ldr	r1, [pc, #24]	; (8005964 <HAL_RCC_OscConfig+0x7ac>)
 800594a:	4313      	orrs	r3, r2
 800594c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800594e:	4b05      	ldr	r3, [pc, #20]	; (8005964 <HAL_RCC_OscConfig+0x7ac>)
 8005950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005952:	4a04      	ldr	r2, [pc, #16]	; (8005964 <HAL_RCC_OscConfig+0x7ac>)
 8005954:	f043 0301 	orr.w	r3, r3, #1
 8005958:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3730      	adds	r7, #48	; 0x30
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	58024400 	.word	0x58024400
 8005968:	ffff0007 	.word	0xffff0007

0800596c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e19c      	b.n	8005cba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005980:	4b8a      	ldr	r3, [pc, #552]	; (8005bac <HAL_RCC_ClockConfig+0x240>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 030f 	and.w	r3, r3, #15
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d910      	bls.n	80059b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800598e:	4b87      	ldr	r3, [pc, #540]	; (8005bac <HAL_RCC_ClockConfig+0x240>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f023 020f 	bic.w	r2, r3, #15
 8005996:	4985      	ldr	r1, [pc, #532]	; (8005bac <HAL_RCC_ClockConfig+0x240>)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	4313      	orrs	r3, r2
 800599c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800599e:	4b83      	ldr	r3, [pc, #524]	; (8005bac <HAL_RCC_ClockConfig+0x240>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d001      	beq.n	80059b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e184      	b.n	8005cba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0304 	and.w	r3, r3, #4
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d010      	beq.n	80059de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691a      	ldr	r2, [r3, #16]
 80059c0:	4b7b      	ldr	r3, [pc, #492]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d908      	bls.n	80059de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059cc:	4b78      	ldr	r3, [pc, #480]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	4975      	ldr	r1, [pc, #468]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d010      	beq.n	8005a0c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	695a      	ldr	r2, [r3, #20]
 80059ee:	4b70      	ldr	r3, [pc, #448]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d908      	bls.n	8005a0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059fa:	4b6d      	ldr	r3, [pc, #436]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	496a      	ldr	r1, [pc, #424]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0310 	and.w	r3, r3, #16
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d010      	beq.n	8005a3a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	699a      	ldr	r2, [r3, #24]
 8005a1c:	4b64      	ldr	r3, [pc, #400]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d908      	bls.n	8005a3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a28:	4b61      	ldr	r3, [pc, #388]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	495e      	ldr	r1, [pc, #376]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d010      	beq.n	8005a68 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	69da      	ldr	r2, [r3, #28]
 8005a4a:	4b59      	ldr	r3, [pc, #356]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d908      	bls.n	8005a68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a56:	4b56      	ldr	r3, [pc, #344]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	4953      	ldr	r1, [pc, #332]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d010      	beq.n	8005a96 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68da      	ldr	r2, [r3, #12]
 8005a78:	4b4d      	ldr	r3, [pc, #308]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	f003 030f 	and.w	r3, r3, #15
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d908      	bls.n	8005a96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a84:	4b4a      	ldr	r3, [pc, #296]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	f023 020f 	bic.w	r2, r3, #15
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	4947      	ldr	r1, [pc, #284]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d055      	beq.n	8005b4e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005aa2:	4b43      	ldr	r3, [pc, #268]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	4940      	ldr	r1, [pc, #256]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d107      	bne.n	8005acc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005abc:	4b3c      	ldr	r3, [pc, #240]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d121      	bne.n	8005b0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e0f6      	b.n	8005cba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d107      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ad4:	4b36      	ldr	r3, [pc, #216]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d115      	bne.n	8005b0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e0ea      	b.n	8005cba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d107      	bne.n	8005afc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005aec:	4b30      	ldr	r3, [pc, #192]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d109      	bne.n	8005b0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e0de      	b.n	8005cba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005afc:	4b2c      	ldr	r3, [pc, #176]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e0d6      	b.n	8005cba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b0c:	4b28      	ldr	r3, [pc, #160]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	f023 0207 	bic.w	r2, r3, #7
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	4925      	ldr	r1, [pc, #148]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b1e:	f7fc fa1f 	bl	8001f60 <HAL_GetTick>
 8005b22:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b24:	e00a      	b.n	8005b3c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b26:	f7fc fa1b 	bl	8001f60 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e0be      	b.n	8005cba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b3c:	4b1c      	ldr	r3, [pc, #112]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d1eb      	bne.n	8005b26 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d010      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	4b14      	ldr	r3, [pc, #80]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d208      	bcs.n	8005b7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b6a:	4b11      	ldr	r3, [pc, #68]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	f023 020f 	bic.w	r2, r3, #15
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	490e      	ldr	r1, [pc, #56]	; (8005bb0 <HAL_RCC_ClockConfig+0x244>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b7c:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <HAL_RCC_ClockConfig+0x240>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 030f 	and.w	r3, r3, #15
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d214      	bcs.n	8005bb4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b8a:	4b08      	ldr	r3, [pc, #32]	; (8005bac <HAL_RCC_ClockConfig+0x240>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f023 020f 	bic.w	r2, r3, #15
 8005b92:	4906      	ldr	r1, [pc, #24]	; (8005bac <HAL_RCC_ClockConfig+0x240>)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b9a:	4b04      	ldr	r3, [pc, #16]	; (8005bac <HAL_RCC_ClockConfig+0x240>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 030f 	and.w	r3, r3, #15
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d005      	beq.n	8005bb4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e086      	b.n	8005cba <HAL_RCC_ClockConfig+0x34e>
 8005bac:	52002000 	.word	0x52002000
 8005bb0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d010      	beq.n	8005be2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691a      	ldr	r2, [r3, #16]
 8005bc4:	4b3f      	ldr	r3, [pc, #252]	; (8005cc4 <HAL_RCC_ClockConfig+0x358>)
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d208      	bcs.n	8005be2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005bd0:	4b3c      	ldr	r3, [pc, #240]	; (8005cc4 <HAL_RCC_ClockConfig+0x358>)
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	4939      	ldr	r1, [pc, #228]	; (8005cc4 <HAL_RCC_ClockConfig+0x358>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d010      	beq.n	8005c10 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	695a      	ldr	r2, [r3, #20]
 8005bf2:	4b34      	ldr	r3, [pc, #208]	; (8005cc4 <HAL_RCC_ClockConfig+0x358>)
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d208      	bcs.n	8005c10 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005bfe:	4b31      	ldr	r3, [pc, #196]	; (8005cc4 <HAL_RCC_ClockConfig+0x358>)
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	492e      	ldr	r1, [pc, #184]	; (8005cc4 <HAL_RCC_ClockConfig+0x358>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0310 	and.w	r3, r3, #16
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d010      	beq.n	8005c3e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	699a      	ldr	r2, [r3, #24]
 8005c20:	4b28      	ldr	r3, [pc, #160]	; (8005cc4 <HAL_RCC_ClockConfig+0x358>)
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d208      	bcs.n	8005c3e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c2c:	4b25      	ldr	r3, [pc, #148]	; (8005cc4 <HAL_RCC_ClockConfig+0x358>)
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	4922      	ldr	r1, [pc, #136]	; (8005cc4 <HAL_RCC_ClockConfig+0x358>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0320 	and.w	r3, r3, #32
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d010      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69da      	ldr	r2, [r3, #28]
 8005c4e:	4b1d      	ldr	r3, [pc, #116]	; (8005cc4 <HAL_RCC_ClockConfig+0x358>)
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d208      	bcs.n	8005c6c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c5a:	4b1a      	ldr	r3, [pc, #104]	; (8005cc4 <HAL_RCC_ClockConfig+0x358>)
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	4917      	ldr	r1, [pc, #92]	; (8005cc4 <HAL_RCC_ClockConfig+0x358>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c6c:	f000 f834 	bl	8005cd8 <HAL_RCC_GetSysClockFreq>
 8005c70:	4602      	mov	r2, r0
 8005c72:	4b14      	ldr	r3, [pc, #80]	; (8005cc4 <HAL_RCC_ClockConfig+0x358>)
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	0a1b      	lsrs	r3, r3, #8
 8005c78:	f003 030f 	and.w	r3, r3, #15
 8005c7c:	4912      	ldr	r1, [pc, #72]	; (8005cc8 <HAL_RCC_ClockConfig+0x35c>)
 8005c7e:	5ccb      	ldrb	r3, [r1, r3]
 8005c80:	f003 031f 	and.w	r3, r3, #31
 8005c84:	fa22 f303 	lsr.w	r3, r2, r3
 8005c88:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c8a:	4b0e      	ldr	r3, [pc, #56]	; (8005cc4 <HAL_RCC_ClockConfig+0x358>)
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	f003 030f 	and.w	r3, r3, #15
 8005c92:	4a0d      	ldr	r2, [pc, #52]	; (8005cc8 <HAL_RCC_ClockConfig+0x35c>)
 8005c94:	5cd3      	ldrb	r3, [r2, r3]
 8005c96:	f003 031f 	and.w	r3, r3, #31
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca0:	4a0a      	ldr	r2, [pc, #40]	; (8005ccc <HAL_RCC_ClockConfig+0x360>)
 8005ca2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ca4:	4a0a      	ldr	r2, [pc, #40]	; (8005cd0 <HAL_RCC_ClockConfig+0x364>)
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005caa:	4b0a      	ldr	r3, [pc, #40]	; (8005cd4 <HAL_RCC_ClockConfig+0x368>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fb ff28 	bl	8001b04 <HAL_InitTick>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	58024400 	.word	0x58024400
 8005cc8:	08013028 	.word	0x08013028
 8005ccc:	24000074 	.word	0x24000074
 8005cd0:	24000070 	.word	0x24000070
 8005cd4:	24000078 	.word	0x24000078

08005cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b089      	sub	sp, #36	; 0x24
 8005cdc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cde:	4bb3      	ldr	r3, [pc, #716]	; (8005fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ce6:	2b18      	cmp	r3, #24
 8005ce8:	f200 8155 	bhi.w	8005f96 <HAL_RCC_GetSysClockFreq+0x2be>
 8005cec:	a201      	add	r2, pc, #4	; (adr r2, 8005cf4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf2:	bf00      	nop
 8005cf4:	08005d59 	.word	0x08005d59
 8005cf8:	08005f97 	.word	0x08005f97
 8005cfc:	08005f97 	.word	0x08005f97
 8005d00:	08005f97 	.word	0x08005f97
 8005d04:	08005f97 	.word	0x08005f97
 8005d08:	08005f97 	.word	0x08005f97
 8005d0c:	08005f97 	.word	0x08005f97
 8005d10:	08005f97 	.word	0x08005f97
 8005d14:	08005d7f 	.word	0x08005d7f
 8005d18:	08005f97 	.word	0x08005f97
 8005d1c:	08005f97 	.word	0x08005f97
 8005d20:	08005f97 	.word	0x08005f97
 8005d24:	08005f97 	.word	0x08005f97
 8005d28:	08005f97 	.word	0x08005f97
 8005d2c:	08005f97 	.word	0x08005f97
 8005d30:	08005f97 	.word	0x08005f97
 8005d34:	08005d85 	.word	0x08005d85
 8005d38:	08005f97 	.word	0x08005f97
 8005d3c:	08005f97 	.word	0x08005f97
 8005d40:	08005f97 	.word	0x08005f97
 8005d44:	08005f97 	.word	0x08005f97
 8005d48:	08005f97 	.word	0x08005f97
 8005d4c:	08005f97 	.word	0x08005f97
 8005d50:	08005f97 	.word	0x08005f97
 8005d54:	08005d8b 	.word	0x08005d8b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d58:	4b94      	ldr	r3, [pc, #592]	; (8005fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0320 	and.w	r3, r3, #32
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d009      	beq.n	8005d78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d64:	4b91      	ldr	r3, [pc, #580]	; (8005fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	08db      	lsrs	r3, r3, #3
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	4a90      	ldr	r2, [pc, #576]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d70:	fa22 f303 	lsr.w	r3, r2, r3
 8005d74:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005d76:	e111      	b.n	8005f9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d78:	4b8d      	ldr	r3, [pc, #564]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d7a:	61bb      	str	r3, [r7, #24]
      break;
 8005d7c:	e10e      	b.n	8005f9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005d7e:	4b8d      	ldr	r3, [pc, #564]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d80:	61bb      	str	r3, [r7, #24]
      break;
 8005d82:	e10b      	b.n	8005f9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005d84:	4b8c      	ldr	r3, [pc, #560]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005d86:	61bb      	str	r3, [r7, #24]
      break;
 8005d88:	e108      	b.n	8005f9c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d8a:	4b88      	ldr	r3, [pc, #544]	; (8005fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8e:	f003 0303 	and.w	r3, r3, #3
 8005d92:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005d94:	4b85      	ldr	r3, [pc, #532]	; (8005fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d98:	091b      	lsrs	r3, r3, #4
 8005d9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d9e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005da0:	4b82      	ldr	r3, [pc, #520]	; (8005fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005daa:	4b80      	ldr	r3, [pc, #512]	; (8005fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dae:	08db      	lsrs	r3, r3, #3
 8005db0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	fb02 f303 	mul.w	r3, r2, r3
 8005dba:	ee07 3a90 	vmov	s15, r3
 8005dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 80e1 	beq.w	8005f90 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	f000 8083 	beq.w	8005edc <HAL_RCC_GetSysClockFreq+0x204>
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	f200 80a1 	bhi.w	8005f20 <HAL_RCC_GetSysClockFreq+0x248>
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d003      	beq.n	8005dec <HAL_RCC_GetSysClockFreq+0x114>
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d056      	beq.n	8005e98 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005dea:	e099      	b.n	8005f20 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dec:	4b6f      	ldr	r3, [pc, #444]	; (8005fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0320 	and.w	r3, r3, #32
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d02d      	beq.n	8005e54 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005df8:	4b6c      	ldr	r3, [pc, #432]	; (8005fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	08db      	lsrs	r3, r3, #3
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	4a6b      	ldr	r2, [pc, #428]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e04:	fa22 f303 	lsr.w	r3, r2, r3
 8005e08:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	ee07 3a90 	vmov	s15, r3
 8005e10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	ee07 3a90 	vmov	s15, r3
 8005e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e22:	4b62      	ldr	r3, [pc, #392]	; (8005fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e32:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e36:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005fbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005e52:	e087      	b.n	8005f64 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005fc0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e66:	4b51      	ldr	r3, [pc, #324]	; (8005fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e76:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e7a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005fbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e96:	e065      	b.n	8005f64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005fc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eaa:	4b40      	ldr	r3, [pc, #256]	; (8005fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb2:	ee07 3a90 	vmov	s15, r3
 8005eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ebe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005fbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005eda:	e043      	b.n	8005f64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005fc8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eee:	4b2f      	ldr	r3, [pc, #188]	; (8005fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f02:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005fbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f1e:	e021      	b.n	8005f64 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	ee07 3a90 	vmov	s15, r3
 8005f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005fc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f32:	4b1e      	ldr	r3, [pc, #120]	; (8005fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3a:	ee07 3a90 	vmov	s15, r3
 8005f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f46:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005fbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f62:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005f64:	4b11      	ldr	r3, [pc, #68]	; (8005fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f68:	0a5b      	lsrs	r3, r3, #9
 8005f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f6e:	3301      	adds	r3, #1
 8005f70:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	ee07 3a90 	vmov	s15, r3
 8005f78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f88:	ee17 3a90 	vmov	r3, s15
 8005f8c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005f8e:	e005      	b.n	8005f9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	61bb      	str	r3, [r7, #24]
      break;
 8005f94:	e002      	b.n	8005f9c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005f96:	4b07      	ldr	r3, [pc, #28]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f98:	61bb      	str	r3, [r7, #24]
      break;
 8005f9a:	bf00      	nop
  }

  return sysclockfreq;
 8005f9c:	69bb      	ldr	r3, [r7, #24]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3724      	adds	r7, #36	; 0x24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	58024400 	.word	0x58024400
 8005fb0:	03d09000 	.word	0x03d09000
 8005fb4:	003d0900 	.word	0x003d0900
 8005fb8:	007a1200 	.word	0x007a1200
 8005fbc:	46000000 	.word	0x46000000
 8005fc0:	4c742400 	.word	0x4c742400
 8005fc4:	4a742400 	.word	0x4a742400
 8005fc8:	4af42400 	.word	0x4af42400

08005fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005fd2:	f7ff fe81 	bl	8005cd8 <HAL_RCC_GetSysClockFreq>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	4b10      	ldr	r3, [pc, #64]	; (800601c <HAL_RCC_GetHCLKFreq+0x50>)
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	0a1b      	lsrs	r3, r3, #8
 8005fde:	f003 030f 	and.w	r3, r3, #15
 8005fe2:	490f      	ldr	r1, [pc, #60]	; (8006020 <HAL_RCC_GetHCLKFreq+0x54>)
 8005fe4:	5ccb      	ldrb	r3, [r1, r3]
 8005fe6:	f003 031f 	and.w	r3, r3, #31
 8005fea:	fa22 f303 	lsr.w	r3, r2, r3
 8005fee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ff0:	4b0a      	ldr	r3, [pc, #40]	; (800601c <HAL_RCC_GetHCLKFreq+0x50>)
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	f003 030f 	and.w	r3, r3, #15
 8005ff8:	4a09      	ldr	r2, [pc, #36]	; (8006020 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ffa:	5cd3      	ldrb	r3, [r2, r3]
 8005ffc:	f003 031f 	and.w	r3, r3, #31
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	fa22 f303 	lsr.w	r3, r2, r3
 8006006:	4a07      	ldr	r2, [pc, #28]	; (8006024 <HAL_RCC_GetHCLKFreq+0x58>)
 8006008:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800600a:	4a07      	ldr	r2, [pc, #28]	; (8006028 <HAL_RCC_GetHCLKFreq+0x5c>)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006010:	4b04      	ldr	r3, [pc, #16]	; (8006024 <HAL_RCC_GetHCLKFreq+0x58>)
 8006012:	681b      	ldr	r3, [r3, #0]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	58024400 	.word	0x58024400
 8006020:	08013028 	.word	0x08013028
 8006024:	24000074 	.word	0x24000074
 8006028:	24000070 	.word	0x24000070

0800602c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006030:	f7ff ffcc 	bl	8005fcc <HAL_RCC_GetHCLKFreq>
 8006034:	4602      	mov	r2, r0
 8006036:	4b06      	ldr	r3, [pc, #24]	; (8006050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	091b      	lsrs	r3, r3, #4
 800603c:	f003 0307 	and.w	r3, r3, #7
 8006040:	4904      	ldr	r1, [pc, #16]	; (8006054 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006042:	5ccb      	ldrb	r3, [r1, r3]
 8006044:	f003 031f 	and.w	r3, r3, #31
 8006048:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800604c:	4618      	mov	r0, r3
 800604e:	bd80      	pop	{r7, pc}
 8006050:	58024400 	.word	0x58024400
 8006054:	08013028 	.word	0x08013028

08006058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800605c:	f7ff ffb6 	bl	8005fcc <HAL_RCC_GetHCLKFreq>
 8006060:	4602      	mov	r2, r0
 8006062:	4b06      	ldr	r3, [pc, #24]	; (800607c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	0a1b      	lsrs	r3, r3, #8
 8006068:	f003 0307 	and.w	r3, r3, #7
 800606c:	4904      	ldr	r1, [pc, #16]	; (8006080 <HAL_RCC_GetPCLK2Freq+0x28>)
 800606e:	5ccb      	ldrb	r3, [r1, r3]
 8006070:	f003 031f 	and.w	r3, r3, #31
 8006074:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006078:	4618      	mov	r0, r3
 800607a:	bd80      	pop	{r7, pc}
 800607c:	58024400 	.word	0x58024400
 8006080:	08013028 	.word	0x08013028

08006084 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	223f      	movs	r2, #63	; 0x3f
 8006092:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006094:	4b1a      	ldr	r3, [pc, #104]	; (8006100 <HAL_RCC_GetClockConfig+0x7c>)
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	f003 0207 	and.w	r2, r3, #7
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80060a0:	4b17      	ldr	r3, [pc, #92]	; (8006100 <HAL_RCC_GetClockConfig+0x7c>)
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80060ac:	4b14      	ldr	r3, [pc, #80]	; (8006100 <HAL_RCC_GetClockConfig+0x7c>)
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	f003 020f 	and.w	r2, r3, #15
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80060b8:	4b11      	ldr	r3, [pc, #68]	; (8006100 <HAL_RCC_GetClockConfig+0x7c>)
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80060c4:	4b0e      	ldr	r3, [pc, #56]	; (8006100 <HAL_RCC_GetClockConfig+0x7c>)
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80060d0:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <HAL_RCC_GetClockConfig+0x7c>)
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80060dc:	4b08      	ldr	r3, [pc, #32]	; (8006100 <HAL_RCC_GetClockConfig+0x7c>)
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80060e8:	4b06      	ldr	r3, [pc, #24]	; (8006104 <HAL_RCC_GetClockConfig+0x80>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 020f 	and.w	r2, r3, #15
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	601a      	str	r2, [r3, #0]
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	58024400 	.word	0x58024400
 8006104:	52002000 	.word	0x52002000

08006108 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800610c:	b0c6      	sub	sp, #280	; 0x118
 800610e:	af00      	add	r7, sp, #0
 8006110:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006114:	2300      	movs	r3, #0
 8006116:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800611a:	2300      	movs	r3, #0
 800611c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800612c:	2500      	movs	r5, #0
 800612e:	ea54 0305 	orrs.w	r3, r4, r5
 8006132:	d049      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800613a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800613e:	d02f      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006140:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006144:	d828      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006146:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800614a:	d01a      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800614c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006150:	d822      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800615a:	d007      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800615c:	e01c      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800615e:	4bab      	ldr	r3, [pc, #684]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006162:	4aaa      	ldr	r2, [pc, #680]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006168:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800616a:	e01a      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800616c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006170:	3308      	adds	r3, #8
 8006172:	2102      	movs	r1, #2
 8006174:	4618      	mov	r0, r3
 8006176:	f001 fc25 	bl	80079c4 <RCCEx_PLL2_Config>
 800617a:	4603      	mov	r3, r0
 800617c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006180:	e00f      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006186:	3328      	adds	r3, #40	; 0x28
 8006188:	2102      	movs	r1, #2
 800618a:	4618      	mov	r0, r3
 800618c:	f001 fccc 	bl	8007b28 <RCCEx_PLL3_Config>
 8006190:	4603      	mov	r3, r0
 8006192:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006196:	e004      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800619e:	e000      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80061a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10a      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80061aa:	4b98      	ldr	r3, [pc, #608]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80061b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061b8:	4a94      	ldr	r2, [pc, #592]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061ba:	430b      	orrs	r3, r1
 80061bc:	6513      	str	r3, [r2, #80]	; 0x50
 80061be:	e003      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80061c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80061d4:	f04f 0900 	mov.w	r9, #0
 80061d8:	ea58 0309 	orrs.w	r3, r8, r9
 80061dc:	d047      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80061de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e4:	2b04      	cmp	r3, #4
 80061e6:	d82a      	bhi.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80061e8:	a201      	add	r2, pc, #4	; (adr r2, 80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80061ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ee:	bf00      	nop
 80061f0:	08006205 	.word	0x08006205
 80061f4:	08006213 	.word	0x08006213
 80061f8:	08006229 	.word	0x08006229
 80061fc:	08006247 	.word	0x08006247
 8006200:	08006247 	.word	0x08006247
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006204:	4b81      	ldr	r3, [pc, #516]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	4a80      	ldr	r2, [pc, #512]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800620a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800620e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006210:	e01a      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006216:	3308      	adds	r3, #8
 8006218:	2100      	movs	r1, #0
 800621a:	4618      	mov	r0, r3
 800621c:	f001 fbd2 	bl	80079c4 <RCCEx_PLL2_Config>
 8006220:	4603      	mov	r3, r0
 8006222:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006226:	e00f      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800622c:	3328      	adds	r3, #40	; 0x28
 800622e:	2100      	movs	r1, #0
 8006230:	4618      	mov	r0, r3
 8006232:	f001 fc79 	bl	8007b28 <RCCEx_PLL3_Config>
 8006236:	4603      	mov	r3, r0
 8006238:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800623c:	e004      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006244:	e000      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006246:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006248:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10a      	bne.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006250:	4b6e      	ldr	r3, [pc, #440]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006254:	f023 0107 	bic.w	r1, r3, #7
 8006258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800625c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800625e:	4a6b      	ldr	r2, [pc, #428]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006260:	430b      	orrs	r3, r1
 8006262:	6513      	str	r3, [r2, #80]	; 0x50
 8006264:	e003      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006266:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800626a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800626e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006276:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800627a:	f04f 0b00 	mov.w	fp, #0
 800627e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006282:	d05b      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006288:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800628c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006290:	d03b      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006292:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006296:	d834      	bhi.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006298:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800629c:	d037      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800629e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062a2:	d82e      	bhi.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80062a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062a8:	d033      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80062aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062ae:	d828      	bhi.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80062b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062b4:	d01a      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80062b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062ba:	d822      	bhi.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80062c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062c4:	d007      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80062c6:	e01c      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062c8:	4b50      	ldr	r3, [pc, #320]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062cc:	4a4f      	ldr	r2, [pc, #316]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062d4:	e01e      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062da:	3308      	adds	r3, #8
 80062dc:	2100      	movs	r1, #0
 80062de:	4618      	mov	r0, r3
 80062e0:	f001 fb70 	bl	80079c4 <RCCEx_PLL2_Config>
 80062e4:	4603      	mov	r3, r0
 80062e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80062ea:	e013      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f0:	3328      	adds	r3, #40	; 0x28
 80062f2:	2100      	movs	r1, #0
 80062f4:	4618      	mov	r0, r3
 80062f6:	f001 fc17 	bl	8007b28 <RCCEx_PLL3_Config>
 80062fa:	4603      	mov	r3, r0
 80062fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006300:	e008      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006308:	e004      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800630a:	bf00      	nop
 800630c:	e002      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800630e:	bf00      	nop
 8006310:	e000      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006312:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006314:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10b      	bne.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800631c:	4b3b      	ldr	r3, [pc, #236]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800631e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006320:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006328:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800632c:	4a37      	ldr	r2, [pc, #220]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800632e:	430b      	orrs	r3, r1
 8006330:	6593      	str	r3, [r2, #88]	; 0x58
 8006332:	e003      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006334:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006338:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800633c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006344:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006348:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800634c:	2300      	movs	r3, #0
 800634e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006352:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006356:	460b      	mov	r3, r1
 8006358:	4313      	orrs	r3, r2
 800635a:	d05d      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800635c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006360:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006364:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006368:	d03b      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800636a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800636e:	d834      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006370:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006374:	d037      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006376:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800637a:	d82e      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800637c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006380:	d033      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006382:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006386:	d828      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006388:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800638c:	d01a      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800638e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006392:	d822      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006394:	2b00      	cmp	r3, #0
 8006396:	d003      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800639c:	d007      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800639e:	e01c      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063a0:	4b1a      	ldr	r3, [pc, #104]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	4a19      	ldr	r2, [pc, #100]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063ac:	e01e      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b2:	3308      	adds	r3, #8
 80063b4:	2100      	movs	r1, #0
 80063b6:	4618      	mov	r0, r3
 80063b8:	f001 fb04 	bl	80079c4 <RCCEx_PLL2_Config>
 80063bc:	4603      	mov	r3, r0
 80063be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80063c2:	e013      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063c8:	3328      	adds	r3, #40	; 0x28
 80063ca:	2100      	movs	r1, #0
 80063cc:	4618      	mov	r0, r3
 80063ce:	f001 fbab 	bl	8007b28 <RCCEx_PLL3_Config>
 80063d2:	4603      	mov	r3, r0
 80063d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063d8:	e008      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80063e0:	e004      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80063e2:	bf00      	nop
 80063e4:	e002      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80063e6:	bf00      	nop
 80063e8:	e000      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80063ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10d      	bne.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80063f4:	4b05      	ldr	r3, [pc, #20]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80063fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006400:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006404:	4a01      	ldr	r2, [pc, #4]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006406:	430b      	orrs	r3, r1
 8006408:	6593      	str	r3, [r2, #88]	; 0x58
 800640a:	e005      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800640c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006410:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006414:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006420:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006424:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006428:	2300      	movs	r3, #0
 800642a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800642e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006432:	460b      	mov	r3, r1
 8006434:	4313      	orrs	r3, r2
 8006436:	d03a      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800643c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800643e:	2b30      	cmp	r3, #48	; 0x30
 8006440:	d01f      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006442:	2b30      	cmp	r3, #48	; 0x30
 8006444:	d819      	bhi.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006446:	2b20      	cmp	r3, #32
 8006448:	d00c      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800644a:	2b20      	cmp	r3, #32
 800644c:	d815      	bhi.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800644e:	2b00      	cmp	r3, #0
 8006450:	d019      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006452:	2b10      	cmp	r3, #16
 8006454:	d111      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006456:	4baa      	ldr	r3, [pc, #680]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645a:	4aa9      	ldr	r2, [pc, #676]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800645c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006460:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006462:	e011      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006468:	3308      	adds	r3, #8
 800646a:	2102      	movs	r1, #2
 800646c:	4618      	mov	r0, r3
 800646e:	f001 faa9 	bl	80079c4 <RCCEx_PLL2_Config>
 8006472:	4603      	mov	r3, r0
 8006474:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006478:	e006      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006480:	e002      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006482:	bf00      	nop
 8006484:	e000      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006486:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006488:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10a      	bne.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006490:	4b9b      	ldr	r3, [pc, #620]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006494:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800649c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800649e:	4a98      	ldr	r2, [pc, #608]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064a0:	430b      	orrs	r3, r1
 80064a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80064a4:	e003      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80064ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80064ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064be:	2300      	movs	r3, #0
 80064c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064c4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80064c8:	460b      	mov	r3, r1
 80064ca:	4313      	orrs	r3, r2
 80064cc:	d051      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80064ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064d8:	d035      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80064da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064de:	d82e      	bhi.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80064e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064e4:	d031      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80064e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064ea:	d828      	bhi.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80064ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064f0:	d01a      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80064f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064f6:	d822      	bhi.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80064fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006500:	d007      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006502:	e01c      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006504:	4b7e      	ldr	r3, [pc, #504]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	4a7d      	ldr	r2, [pc, #500]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800650a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800650e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006510:	e01c      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006516:	3308      	adds	r3, #8
 8006518:	2100      	movs	r1, #0
 800651a:	4618      	mov	r0, r3
 800651c:	f001 fa52 	bl	80079c4 <RCCEx_PLL2_Config>
 8006520:	4603      	mov	r3, r0
 8006522:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006526:	e011      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800652c:	3328      	adds	r3, #40	; 0x28
 800652e:	2100      	movs	r1, #0
 8006530:	4618      	mov	r0, r3
 8006532:	f001 faf9 	bl	8007b28 <RCCEx_PLL3_Config>
 8006536:	4603      	mov	r3, r0
 8006538:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800653c:	e006      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006544:	e002      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006546:	bf00      	nop
 8006548:	e000      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800654a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800654c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10a      	bne.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006554:	4b6a      	ldr	r3, [pc, #424]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006558:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800655c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006562:	4a67      	ldr	r2, [pc, #412]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006564:	430b      	orrs	r3, r1
 8006566:	6513      	str	r3, [r2, #80]	; 0x50
 8006568:	e003      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800656a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800656e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800657e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006582:	2300      	movs	r3, #0
 8006584:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006588:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800658c:	460b      	mov	r3, r1
 800658e:	4313      	orrs	r3, r2
 8006590:	d053      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800659c:	d033      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800659e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065a2:	d82c      	bhi.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80065a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065a8:	d02f      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80065aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065ae:	d826      	bhi.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80065b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065b4:	d02b      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80065b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065ba:	d820      	bhi.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80065bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065c0:	d012      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80065c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065c6:	d81a      	bhi.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d022      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80065cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d0:	d115      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d6:	3308      	adds	r3, #8
 80065d8:	2101      	movs	r1, #1
 80065da:	4618      	mov	r0, r3
 80065dc:	f001 f9f2 	bl	80079c4 <RCCEx_PLL2_Config>
 80065e0:	4603      	mov	r3, r0
 80065e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80065e6:	e015      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ec:	3328      	adds	r3, #40	; 0x28
 80065ee:	2101      	movs	r1, #1
 80065f0:	4618      	mov	r0, r3
 80065f2:	f001 fa99 	bl	8007b28 <RCCEx_PLL3_Config>
 80065f6:	4603      	mov	r3, r0
 80065f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80065fc:	e00a      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006604:	e006      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006606:	bf00      	nop
 8006608:	e004      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800660a:	bf00      	nop
 800660c:	e002      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800660e:	bf00      	nop
 8006610:	e000      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006612:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006614:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10a      	bne.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800661c:	4b38      	ldr	r3, [pc, #224]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800661e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006620:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800662a:	4a35      	ldr	r2, [pc, #212]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800662c:	430b      	orrs	r3, r1
 800662e:	6513      	str	r3, [r2, #80]	; 0x50
 8006630:	e003      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006632:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006636:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800663a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800663e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006642:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006646:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800664a:	2300      	movs	r3, #0
 800664c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006650:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006654:	460b      	mov	r3, r1
 8006656:	4313      	orrs	r3, r2
 8006658:	d058      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800665a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800665e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006662:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006666:	d033      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800666c:	d82c      	bhi.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800666e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006672:	d02f      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006678:	d826      	bhi.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800667a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800667e:	d02b      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006680:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006684:	d820      	bhi.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800668a:	d012      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800668c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006690:	d81a      	bhi.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006692:	2b00      	cmp	r3, #0
 8006694:	d022      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800669a:	d115      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800669c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a0:	3308      	adds	r3, #8
 80066a2:	2101      	movs	r1, #1
 80066a4:	4618      	mov	r0, r3
 80066a6:	f001 f98d 	bl	80079c4 <RCCEx_PLL2_Config>
 80066aa:	4603      	mov	r3, r0
 80066ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80066b0:	e015      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066b6:	3328      	adds	r3, #40	; 0x28
 80066b8:	2101      	movs	r1, #1
 80066ba:	4618      	mov	r0, r3
 80066bc:	f001 fa34 	bl	8007b28 <RCCEx_PLL3_Config>
 80066c0:	4603      	mov	r3, r0
 80066c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80066c6:	e00a      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80066ce:	e006      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80066d0:	bf00      	nop
 80066d2:	e004      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80066d4:	bf00      	nop
 80066d6:	e002      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80066d8:	bf00      	nop
 80066da:	e000      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80066dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10e      	bne.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80066e6:	4b06      	ldr	r3, [pc, #24]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80066e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80066ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066f6:	4a02      	ldr	r2, [pc, #8]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80066f8:	430b      	orrs	r3, r1
 80066fa:	6593      	str	r3, [r2, #88]	; 0x58
 80066fc:	e006      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x604>
 80066fe:	bf00      	nop
 8006700:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006704:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006708:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800670c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006714:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006718:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800671c:	2300      	movs	r3, #0
 800671e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006722:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006726:	460b      	mov	r3, r1
 8006728:	4313      	orrs	r3, r2
 800672a:	d037      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800672c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006732:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006736:	d00e      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800673c:	d816      	bhi.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800673e:	2b00      	cmp	r3, #0
 8006740:	d018      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006742:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006746:	d111      	bne.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006748:	4bc4      	ldr	r3, [pc, #784]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674c:	4ac3      	ldr	r2, [pc, #780]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800674e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006752:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006754:	e00f      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800675a:	3308      	adds	r3, #8
 800675c:	2101      	movs	r1, #1
 800675e:	4618      	mov	r0, r3
 8006760:	f001 f930 	bl	80079c4 <RCCEx_PLL2_Config>
 8006764:	4603      	mov	r3, r0
 8006766:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800676a:	e004      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006772:	e000      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006776:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10a      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800677e:	4bb7      	ldr	r3, [pc, #732]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006782:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800678a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800678c:	4ab3      	ldr	r2, [pc, #716]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800678e:	430b      	orrs	r3, r1
 8006790:	6513      	str	r3, [r2, #80]	; 0x50
 8006792:	e003      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006794:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006798:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800679c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80067a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067ac:	2300      	movs	r3, #0
 80067ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80067b6:	460b      	mov	r3, r1
 80067b8:	4313      	orrs	r3, r2
 80067ba:	d039      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80067bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067c2:	2b03      	cmp	r3, #3
 80067c4:	d81c      	bhi.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80067c6:	a201      	add	r2, pc, #4	; (adr r2, 80067cc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80067c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067cc:	08006809 	.word	0x08006809
 80067d0:	080067dd 	.word	0x080067dd
 80067d4:	080067eb 	.word	0x080067eb
 80067d8:	08006809 	.word	0x08006809
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067dc:	4b9f      	ldr	r3, [pc, #636]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e0:	4a9e      	ldr	r2, [pc, #632]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80067e8:	e00f      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ee:	3308      	adds	r3, #8
 80067f0:	2102      	movs	r1, #2
 80067f2:	4618      	mov	r0, r3
 80067f4:	f001 f8e6 	bl	80079c4 <RCCEx_PLL2_Config>
 80067f8:	4603      	mov	r3, r0
 80067fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80067fe:	e004      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006806:	e000      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800680a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10a      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006812:	4b92      	ldr	r3, [pc, #584]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006816:	f023 0103 	bic.w	r1, r3, #3
 800681a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800681e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006820:	4a8e      	ldr	r2, [pc, #568]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006822:	430b      	orrs	r3, r1
 8006824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006826:	e003      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006828:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800682c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006838:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800683c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006840:	2300      	movs	r3, #0
 8006842:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006846:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800684a:	460b      	mov	r3, r1
 800684c:	4313      	orrs	r3, r2
 800684e:	f000 8099 	beq.w	8006984 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006852:	4b83      	ldr	r3, [pc, #524]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a82      	ldr	r2, [pc, #520]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800685c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800685e:	f7fb fb7f 	bl	8001f60 <HAL_GetTick>
 8006862:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006866:	e00b      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006868:	f7fb fb7a 	bl	8001f60 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	2b64      	cmp	r3, #100	; 0x64
 8006876:	d903      	bls.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800687e:	e005      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006880:	4b77      	ldr	r3, [pc, #476]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006888:	2b00      	cmp	r3, #0
 800688a:	d0ed      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800688c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006890:	2b00      	cmp	r3, #0
 8006892:	d173      	bne.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006894:	4b71      	ldr	r3, [pc, #452]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006896:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800689c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068a0:	4053      	eors	r3, r2
 80068a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d015      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068aa:	4b6c      	ldr	r3, [pc, #432]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068b6:	4b69      	ldr	r3, [pc, #420]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ba:	4a68      	ldr	r2, [pc, #416]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068c0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068c2:	4b66      	ldr	r3, [pc, #408]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c6:	4a65      	ldr	r2, [pc, #404]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068cc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80068ce:	4a63      	ldr	r2, [pc, #396]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80068d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068e2:	d118      	bne.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e4:	f7fb fb3c 	bl	8001f60 <HAL_GetTick>
 80068e8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068ec:	e00d      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068ee:	f7fb fb37 	bl	8001f60 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80068f8:	1ad2      	subs	r2, r2, r3
 80068fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80068fe:	429a      	cmp	r2, r3
 8006900:	d903      	bls.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8006908:	e005      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800690a:	4b54      	ldr	r3, [pc, #336]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800690c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d0eb      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006916:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800691a:	2b00      	cmp	r3, #0
 800691c:	d129      	bne.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800691e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006922:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800692a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800692e:	d10e      	bne.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006930:	4b4a      	ldr	r3, [pc, #296]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800693c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006940:	091a      	lsrs	r2, r3, #4
 8006942:	4b48      	ldr	r3, [pc, #288]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006944:	4013      	ands	r3, r2
 8006946:	4a45      	ldr	r2, [pc, #276]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006948:	430b      	orrs	r3, r1
 800694a:	6113      	str	r3, [r2, #16]
 800694c:	e005      	b.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800694e:	4b43      	ldr	r3, [pc, #268]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	4a42      	ldr	r2, [pc, #264]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006954:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006958:	6113      	str	r3, [r2, #16]
 800695a:	4b40      	ldr	r3, [pc, #256]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800695c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800695e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006962:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800696a:	4a3c      	ldr	r2, [pc, #240]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800696c:	430b      	orrs	r3, r1
 800696e:	6713      	str	r3, [r2, #112]	; 0x70
 8006970:	e008      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006972:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006976:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800697a:	e003      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006980:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698c:	f002 0301 	and.w	r3, r2, #1
 8006990:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006994:	2300      	movs	r3, #0
 8006996:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800699a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800699e:	460b      	mov	r3, r1
 80069a0:	4313      	orrs	r3, r2
 80069a2:	f000 808f 	beq.w	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80069a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069ac:	2b28      	cmp	r3, #40	; 0x28
 80069ae:	d871      	bhi.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80069b0:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80069b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b6:	bf00      	nop
 80069b8:	08006a9d 	.word	0x08006a9d
 80069bc:	08006a95 	.word	0x08006a95
 80069c0:	08006a95 	.word	0x08006a95
 80069c4:	08006a95 	.word	0x08006a95
 80069c8:	08006a95 	.word	0x08006a95
 80069cc:	08006a95 	.word	0x08006a95
 80069d0:	08006a95 	.word	0x08006a95
 80069d4:	08006a95 	.word	0x08006a95
 80069d8:	08006a69 	.word	0x08006a69
 80069dc:	08006a95 	.word	0x08006a95
 80069e0:	08006a95 	.word	0x08006a95
 80069e4:	08006a95 	.word	0x08006a95
 80069e8:	08006a95 	.word	0x08006a95
 80069ec:	08006a95 	.word	0x08006a95
 80069f0:	08006a95 	.word	0x08006a95
 80069f4:	08006a95 	.word	0x08006a95
 80069f8:	08006a7f 	.word	0x08006a7f
 80069fc:	08006a95 	.word	0x08006a95
 8006a00:	08006a95 	.word	0x08006a95
 8006a04:	08006a95 	.word	0x08006a95
 8006a08:	08006a95 	.word	0x08006a95
 8006a0c:	08006a95 	.word	0x08006a95
 8006a10:	08006a95 	.word	0x08006a95
 8006a14:	08006a95 	.word	0x08006a95
 8006a18:	08006a9d 	.word	0x08006a9d
 8006a1c:	08006a95 	.word	0x08006a95
 8006a20:	08006a95 	.word	0x08006a95
 8006a24:	08006a95 	.word	0x08006a95
 8006a28:	08006a95 	.word	0x08006a95
 8006a2c:	08006a95 	.word	0x08006a95
 8006a30:	08006a95 	.word	0x08006a95
 8006a34:	08006a95 	.word	0x08006a95
 8006a38:	08006a9d 	.word	0x08006a9d
 8006a3c:	08006a95 	.word	0x08006a95
 8006a40:	08006a95 	.word	0x08006a95
 8006a44:	08006a95 	.word	0x08006a95
 8006a48:	08006a95 	.word	0x08006a95
 8006a4c:	08006a95 	.word	0x08006a95
 8006a50:	08006a95 	.word	0x08006a95
 8006a54:	08006a95 	.word	0x08006a95
 8006a58:	08006a9d 	.word	0x08006a9d
 8006a5c:	58024400 	.word	0x58024400
 8006a60:	58024800 	.word	0x58024800
 8006a64:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a6c:	3308      	adds	r3, #8
 8006a6e:	2101      	movs	r1, #1
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 ffa7 	bl	80079c4 <RCCEx_PLL2_Config>
 8006a76:	4603      	mov	r3, r0
 8006a78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006a7c:	e00f      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a82:	3328      	adds	r3, #40	; 0x28
 8006a84:	2101      	movs	r1, #1
 8006a86:	4618      	mov	r0, r3
 8006a88:	f001 f84e 	bl	8007b28 <RCCEx_PLL3_Config>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006a92:	e004      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a9a:	e000      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10a      	bne.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006aa6:	4bbf      	ldr	r3, [pc, #764]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aaa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ab4:	4abb      	ldr	r2, [pc, #748]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ab6:	430b      	orrs	r3, r1
 8006ab8:	6553      	str	r3, [r2, #84]	; 0x54
 8006aba:	e003      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006abc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ac0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006acc:	f002 0302 	and.w	r3, r2, #2
 8006ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ada:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	d041      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aea:	2b05      	cmp	r3, #5
 8006aec:	d824      	bhi.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006aee:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af4:	08006b41 	.word	0x08006b41
 8006af8:	08006b0d 	.word	0x08006b0d
 8006afc:	08006b23 	.word	0x08006b23
 8006b00:	08006b41 	.word	0x08006b41
 8006b04:	08006b41 	.word	0x08006b41
 8006b08:	08006b41 	.word	0x08006b41
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b10:	3308      	adds	r3, #8
 8006b12:	2101      	movs	r1, #1
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 ff55 	bl	80079c4 <RCCEx_PLL2_Config>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006b20:	e00f      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b26:	3328      	adds	r3, #40	; 0x28
 8006b28:	2101      	movs	r1, #1
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 fffc 	bl	8007b28 <RCCEx_PLL3_Config>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006b36:	e004      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b3e:	e000      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10a      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b4a:	4b96      	ldr	r3, [pc, #600]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b4e:	f023 0107 	bic.w	r1, r3, #7
 8006b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b58:	4a92      	ldr	r2, [pc, #584]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b5a:	430b      	orrs	r3, r1
 8006b5c:	6553      	str	r3, [r2, #84]	; 0x54
 8006b5e:	e003      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	f002 0304 	and.w	r3, r2, #4
 8006b74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b7e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b82:	460b      	mov	r3, r1
 8006b84:	4313      	orrs	r3, r2
 8006b86:	d044      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b90:	2b05      	cmp	r3, #5
 8006b92:	d825      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006b94:	a201      	add	r2, pc, #4	; (adr r2, 8006b9c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9a:	bf00      	nop
 8006b9c:	08006be9 	.word	0x08006be9
 8006ba0:	08006bb5 	.word	0x08006bb5
 8006ba4:	08006bcb 	.word	0x08006bcb
 8006ba8:	08006be9 	.word	0x08006be9
 8006bac:	08006be9 	.word	0x08006be9
 8006bb0:	08006be9 	.word	0x08006be9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb8:	3308      	adds	r3, #8
 8006bba:	2101      	movs	r1, #1
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 ff01 	bl	80079c4 <RCCEx_PLL2_Config>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006bc8:	e00f      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bce:	3328      	adds	r3, #40	; 0x28
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 ffa8 	bl	8007b28 <RCCEx_PLL3_Config>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006bde:	e004      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006be6:	e000      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10b      	bne.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bf2:	4b6c      	ldr	r3, [pc, #432]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf6:	f023 0107 	bic.w	r1, r3, #7
 8006bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c02:	4a68      	ldr	r2, [pc, #416]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c04:	430b      	orrs	r3, r1
 8006c06:	6593      	str	r3, [r2, #88]	; 0x58
 8006c08:	e003      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c0e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	f002 0320 	and.w	r3, r2, #32
 8006c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c22:	2300      	movs	r3, #0
 8006c24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c28:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	d055      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c3e:	d033      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c44:	d82c      	bhi.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c4a:	d02f      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c50:	d826      	bhi.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006c52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c56:	d02b      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006c58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c5c:	d820      	bhi.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c62:	d012      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c68:	d81a      	bhi.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d022      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006c6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c72:	d115      	bne.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c78:	3308      	adds	r3, #8
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 fea1 	bl	80079c4 <RCCEx_PLL2_Config>
 8006c82:	4603      	mov	r3, r0
 8006c84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c88:	e015      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c8e:	3328      	adds	r3, #40	; 0x28
 8006c90:	2102      	movs	r1, #2
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 ff48 	bl	8007b28 <RCCEx_PLL3_Config>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c9e:	e00a      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006ca6:	e006      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006ca8:	bf00      	nop
 8006caa:	e004      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006cac:	bf00      	nop
 8006cae:	e002      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006cb0:	bf00      	nop
 8006cb2:	e000      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006cb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cb6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10b      	bne.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cbe:	4b39      	ldr	r3, [pc, #228]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cce:	4a35      	ldr	r2, [pc, #212]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006cd0:	430b      	orrs	r3, r1
 8006cd2:	6553      	str	r3, [r2, #84]	; 0x54
 8006cd4:	e003      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cda:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006cea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cee:	2300      	movs	r3, #0
 8006cf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cf4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	d058      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d06:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006d0a:	d033      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006d0c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006d10:	d82c      	bhi.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d16:	d02f      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d1c:	d826      	bhi.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006d1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d22:	d02b      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006d24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d28:	d820      	bhi.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d2e:	d012      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d34:	d81a      	bhi.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d022      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d3e:	d115      	bne.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d44:	3308      	adds	r3, #8
 8006d46:	2100      	movs	r1, #0
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f000 fe3b 	bl	80079c4 <RCCEx_PLL2_Config>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006d54:	e015      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d5a:	3328      	adds	r3, #40	; 0x28
 8006d5c:	2102      	movs	r1, #2
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 fee2 	bl	8007b28 <RCCEx_PLL3_Config>
 8006d64:	4603      	mov	r3, r0
 8006d66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006d6a:	e00a      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006d72:	e006      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006d74:	bf00      	nop
 8006d76:	e004      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006d78:	bf00      	nop
 8006d7a:	e002      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006d7c:	bf00      	nop
 8006d7e:	e000      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10e      	bne.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d8a:	4b06      	ldr	r3, [pc, #24]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d8e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d9a:	4a02      	ldr	r2, [pc, #8]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d9c:	430b      	orrs	r3, r1
 8006d9e:	6593      	str	r3, [r2, #88]	; 0x58
 8006da0:	e006      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006da2:	bf00      	nop
 8006da4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006dac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006dbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006dc6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	d055      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dd8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006ddc:	d033      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006dde:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006de2:	d82c      	bhi.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006de8:	d02f      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dee:	d826      	bhi.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006df0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006df4:	d02b      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006df6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006dfa:	d820      	bhi.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006dfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e00:	d012      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006e02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e06:	d81a      	bhi.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d022      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e10:	d115      	bne.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e16:	3308      	adds	r3, #8
 8006e18:	2100      	movs	r1, #0
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 fdd2 	bl	80079c4 <RCCEx_PLL2_Config>
 8006e20:	4603      	mov	r3, r0
 8006e22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006e26:	e015      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e2c:	3328      	adds	r3, #40	; 0x28
 8006e2e:	2102      	movs	r1, #2
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 fe79 	bl	8007b28 <RCCEx_PLL3_Config>
 8006e36:	4603      	mov	r3, r0
 8006e38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006e3c:	e00a      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006e44:	e006      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006e46:	bf00      	nop
 8006e48:	e004      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006e4a:	bf00      	nop
 8006e4c:	e002      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006e4e:	bf00      	nop
 8006e50:	e000      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10b      	bne.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006e5c:	4ba0      	ldr	r3, [pc, #640]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e60:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e6c:	4a9c      	ldr	r2, [pc, #624]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e6e:	430b      	orrs	r3, r1
 8006e70:	6593      	str	r3, [r2, #88]	; 0x58
 8006e72:	e003      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e84:	f002 0308 	and.w	r3, r2, #8
 8006e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006e92:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006e96:	460b      	mov	r3, r1
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	d01e      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ea8:	d10c      	bne.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eae:	3328      	adds	r3, #40	; 0x28
 8006eb0:	2102      	movs	r1, #2
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 fe38 	bl	8007b28 <RCCEx_PLL3_Config>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d002      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006ec4:	4b86      	ldr	r3, [pc, #536]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ed4:	4a82      	ldr	r2, [pc, #520]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ed6:	430b      	orrs	r3, r1
 8006ed8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee2:	f002 0310 	and.w	r3, r2, #16
 8006ee6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006eea:	2300      	movs	r3, #0
 8006eec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ef0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	d01e      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f06:	d10c      	bne.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f0c:	3328      	adds	r3, #40	; 0x28
 8006f0e:	2102      	movs	r1, #2
 8006f10:	4618      	mov	r0, r3
 8006f12:	f000 fe09 	bl	8007b28 <RCCEx_PLL3_Config>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f22:	4b6f      	ldr	r3, [pc, #444]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f32:	4a6b      	ldr	r2, [pc, #428]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f34:	430b      	orrs	r3, r1
 8006f36:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f40:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006f44:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f46:	2300      	movs	r3, #0
 8006f48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f4a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4313      	orrs	r3, r2
 8006f52:	d03e      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f60:	d022      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006f62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f66:	d81b      	bhi.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f70:	d00b      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006f72:	e015      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f78:	3308      	adds	r3, #8
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f000 fd21 	bl	80079c4 <RCCEx_PLL2_Config>
 8006f82:	4603      	mov	r3, r0
 8006f84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f88:	e00f      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f8e:	3328      	adds	r3, #40	; 0x28
 8006f90:	2102      	movs	r1, #2
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 fdc8 	bl	8007b28 <RCCEx_PLL3_Config>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f9e:	e004      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006fa6:	e000      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006fa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006faa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10b      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006fb2:	4b4b      	ldr	r3, [pc, #300]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006fc2:	4a47      	ldr	r2, [pc, #284]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fc4:	430b      	orrs	r3, r1
 8006fc6:	6593      	str	r3, [r2, #88]	; 0x58
 8006fc8:	e003      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006fce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fda:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006fde:	673b      	str	r3, [r7, #112]	; 0x70
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	677b      	str	r3, [r7, #116]	; 0x74
 8006fe4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4313      	orrs	r3, r2
 8006fec:	d03b      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ff6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ffa:	d01f      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006ffc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007000:	d818      	bhi.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007006:	d003      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007008:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800700c:	d007      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800700e:	e011      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007010:	4b33      	ldr	r3, [pc, #204]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007014:	4a32      	ldr	r2, [pc, #200]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800701a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800701c:	e00f      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800701e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007022:	3328      	adds	r3, #40	; 0x28
 8007024:	2101      	movs	r1, #1
 8007026:	4618      	mov	r0, r3
 8007028:	f000 fd7e 	bl	8007b28 <RCCEx_PLL3_Config>
 800702c:	4603      	mov	r3, r0
 800702e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007032:	e004      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800703a:	e000      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800703c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800703e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10b      	bne.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007046:	4b26      	ldr	r3, [pc, #152]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800704e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007056:	4a22      	ldr	r2, [pc, #136]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007058:	430b      	orrs	r3, r1
 800705a:	6553      	str	r3, [r2, #84]	; 0x54
 800705c:	e003      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800705e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007062:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800706a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007072:	66bb      	str	r3, [r7, #104]	; 0x68
 8007074:	2300      	movs	r3, #0
 8007076:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007078:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800707c:	460b      	mov	r3, r1
 800707e:	4313      	orrs	r3, r2
 8007080:	d034      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007088:	2b00      	cmp	r3, #0
 800708a:	d003      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800708c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007090:	d007      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007092:	e011      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007094:	4b12      	ldr	r3, [pc, #72]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007098:	4a11      	ldr	r2, [pc, #68]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800709a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800709e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80070a0:	e00e      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a6:	3308      	adds	r3, #8
 80070a8:	2102      	movs	r1, #2
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 fc8a 	bl	80079c4 <RCCEx_PLL2_Config>
 80070b0:	4603      	mov	r3, r0
 80070b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80070b6:	e003      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80070be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10d      	bne.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80070c8:	4b05      	ldr	r3, [pc, #20]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d6:	4a02      	ldr	r2, [pc, #8]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070d8:	430b      	orrs	r3, r1
 80070da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80070dc:	e006      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80070de:	bf00      	nop
 80070e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80070ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80070f8:	663b      	str	r3, [r7, #96]	; 0x60
 80070fa:	2300      	movs	r3, #0
 80070fc:	667b      	str	r3, [r7, #100]	; 0x64
 80070fe:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007102:	460b      	mov	r3, r1
 8007104:	4313      	orrs	r3, r2
 8007106:	d00c      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800710c:	3328      	adds	r3, #40	; 0x28
 800710e:	2102      	movs	r1, #2
 8007110:	4618      	mov	r0, r3
 8007112:	f000 fd09 	bl	8007b28 <RCCEx_PLL3_Config>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800712e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007130:	2300      	movs	r3, #0
 8007132:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007134:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007138:	460b      	mov	r3, r1
 800713a:	4313      	orrs	r3, r2
 800713c:	d036      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800713e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007144:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007148:	d018      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800714a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800714e:	d811      	bhi.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007154:	d014      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800715a:	d80b      	bhi.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800715c:	2b00      	cmp	r3, #0
 800715e:	d011      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007164:	d106      	bne.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007166:	4bb7      	ldr	r3, [pc, #732]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716a:	4ab6      	ldr	r2, [pc, #728]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800716c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007170:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007172:	e008      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800717a:	e004      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800717c:	bf00      	nop
 800717e:	e002      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007180:	bf00      	nop
 8007182:	e000      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007186:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10a      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800718e:	4bad      	ldr	r3, [pc, #692]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007192:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800719a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800719c:	4aa9      	ldr	r2, [pc, #676]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800719e:	430b      	orrs	r3, r1
 80071a0:	6553      	str	r3, [r2, #84]	; 0x54
 80071a2:	e003      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80071ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80071b8:	653b      	str	r3, [r7, #80]	; 0x50
 80071ba:	2300      	movs	r3, #0
 80071bc:	657b      	str	r3, [r7, #84]	; 0x54
 80071be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80071c2:	460b      	mov	r3, r1
 80071c4:	4313      	orrs	r3, r2
 80071c6:	d009      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80071c8:	4b9e      	ldr	r3, [pc, #632]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80071d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d6:	4a9b      	ldr	r2, [pc, #620]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071d8:	430b      	orrs	r3, r1
 80071da:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80071dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80071e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80071ea:	2300      	movs	r3, #0
 80071ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071ee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80071f2:	460b      	mov	r3, r1
 80071f4:	4313      	orrs	r3, r2
 80071f6:	d009      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80071f8:	4b92      	ldr	r3, [pc, #584]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071fc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007206:	4a8f      	ldr	r2, [pc, #572]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007208:	430b      	orrs	r3, r1
 800720a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800720c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007214:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007218:	643b      	str	r3, [r7, #64]	; 0x40
 800721a:	2300      	movs	r3, #0
 800721c:	647b      	str	r3, [r7, #68]	; 0x44
 800721e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007222:	460b      	mov	r3, r1
 8007224:	4313      	orrs	r3, r2
 8007226:	d00e      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007228:	4b86      	ldr	r3, [pc, #536]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	4a85      	ldr	r2, [pc, #532]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800722e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007232:	6113      	str	r3, [r2, #16]
 8007234:	4b83      	ldr	r3, [pc, #524]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007236:	6919      	ldr	r1, [r3, #16]
 8007238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800723c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007240:	4a80      	ldr	r2, [pc, #512]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007242:	430b      	orrs	r3, r1
 8007244:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800724a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007252:	63bb      	str	r3, [r7, #56]	; 0x38
 8007254:	2300      	movs	r3, #0
 8007256:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007258:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800725c:	460b      	mov	r3, r1
 800725e:	4313      	orrs	r3, r2
 8007260:	d009      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007262:	4b78      	ldr	r3, [pc, #480]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007266:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800726a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800726e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007270:	4a74      	ldr	r2, [pc, #464]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007272:	430b      	orrs	r3, r1
 8007274:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800727a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007282:	633b      	str	r3, [r7, #48]	; 0x30
 8007284:	2300      	movs	r3, #0
 8007286:	637b      	str	r3, [r7, #52]	; 0x34
 8007288:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800728c:	460b      	mov	r3, r1
 800728e:	4313      	orrs	r3, r2
 8007290:	d00a      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007292:	4b6c      	ldr	r3, [pc, #432]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007296:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800729a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800729e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a2:	4a68      	ldr	r2, [pc, #416]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072a4:	430b      	orrs	r3, r1
 80072a6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80072a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b0:	2100      	movs	r1, #0
 80072b2:	62b9      	str	r1, [r7, #40]	; 0x28
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072ba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80072be:	460b      	mov	r3, r1
 80072c0:	4313      	orrs	r3, r2
 80072c2:	d011      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072c8:	3308      	adds	r3, #8
 80072ca:	2100      	movs	r1, #0
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fb79 	bl	80079c4 <RCCEx_PLL2_Config>
 80072d2:	4603      	mov	r3, r0
 80072d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80072d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d003      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80072e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f0:	2100      	movs	r1, #0
 80072f2:	6239      	str	r1, [r7, #32]
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	627b      	str	r3, [r7, #36]	; 0x24
 80072fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80072fe:	460b      	mov	r3, r1
 8007300:	4313      	orrs	r3, r2
 8007302:	d011      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007308:	3308      	adds	r3, #8
 800730a:	2101      	movs	r1, #1
 800730c:	4618      	mov	r0, r3
 800730e:	f000 fb59 	bl	80079c4 <RCCEx_PLL2_Config>
 8007312:	4603      	mov	r3, r0
 8007314:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007318:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007320:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007324:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800732c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007330:	2100      	movs	r1, #0
 8007332:	61b9      	str	r1, [r7, #24]
 8007334:	f003 0304 	and.w	r3, r3, #4
 8007338:	61fb      	str	r3, [r7, #28]
 800733a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800733e:	460b      	mov	r3, r1
 8007340:	4313      	orrs	r3, r2
 8007342:	d011      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007348:	3308      	adds	r3, #8
 800734a:	2102      	movs	r1, #2
 800734c:	4618      	mov	r0, r3
 800734e:	f000 fb39 	bl	80079c4 <RCCEx_PLL2_Config>
 8007352:	4603      	mov	r3, r0
 8007354:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007358:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800735c:	2b00      	cmp	r3, #0
 800735e:	d003      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007360:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007364:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	2100      	movs	r1, #0
 8007372:	6139      	str	r1, [r7, #16]
 8007374:	f003 0308 	and.w	r3, r3, #8
 8007378:	617b      	str	r3, [r7, #20]
 800737a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800737e:	460b      	mov	r3, r1
 8007380:	4313      	orrs	r3, r2
 8007382:	d011      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007388:	3328      	adds	r3, #40	; 0x28
 800738a:	2100      	movs	r1, #0
 800738c:	4618      	mov	r0, r3
 800738e:	f000 fbcb 	bl	8007b28 <RCCEx_PLL3_Config>
 8007392:	4603      	mov	r3, r0
 8007394:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8007398:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800739c:	2b00      	cmp	r3, #0
 800739e:	d003      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80073a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80073a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	2100      	movs	r1, #0
 80073b2:	60b9      	str	r1, [r7, #8]
 80073b4:	f003 0310 	and.w	r3, r3, #16
 80073b8:	60fb      	str	r3, [r7, #12]
 80073ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80073be:	460b      	mov	r3, r1
 80073c0:	4313      	orrs	r3, r2
 80073c2:	d011      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073c8:	3328      	adds	r3, #40	; 0x28
 80073ca:	2101      	movs	r1, #1
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 fbab 	bl	8007b28 <RCCEx_PLL3_Config>
 80073d2:	4603      	mov	r3, r0
 80073d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80073d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d003      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80073e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80073e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	2100      	movs	r1, #0
 80073f2:	6039      	str	r1, [r7, #0]
 80073f4:	f003 0320 	and.w	r3, r3, #32
 80073f8:	607b      	str	r3, [r7, #4]
 80073fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80073fe:	460b      	mov	r3, r1
 8007400:	4313      	orrs	r3, r2
 8007402:	d011      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007408:	3328      	adds	r3, #40	; 0x28
 800740a:	2102      	movs	r1, #2
 800740c:	4618      	mov	r0, r3
 800740e:	f000 fb8b 	bl	8007b28 <RCCEx_PLL3_Config>
 8007412:	4603      	mov	r3, r0
 8007414:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007418:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800741c:	2b00      	cmp	r3, #0
 800741e:	d003      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007420:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007424:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8007428:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	e000      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
}
 8007436:	4618      	mov	r0, r3
 8007438:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800743c:	46bd      	mov	sp, r7
 800743e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007442:	bf00      	nop
 8007444:	58024400 	.word	0x58024400

08007448 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800744c:	f7fe fdbe 	bl	8005fcc <HAL_RCC_GetHCLKFreq>
 8007450:	4602      	mov	r2, r0
 8007452:	4b06      	ldr	r3, [pc, #24]	; (800746c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	091b      	lsrs	r3, r3, #4
 8007458:	f003 0307 	and.w	r3, r3, #7
 800745c:	4904      	ldr	r1, [pc, #16]	; (8007470 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800745e:	5ccb      	ldrb	r3, [r1, r3]
 8007460:	f003 031f 	and.w	r3, r3, #31
 8007464:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007468:	4618      	mov	r0, r3
 800746a:	bd80      	pop	{r7, pc}
 800746c:	58024400 	.word	0x58024400
 8007470:	08013028 	.word	0x08013028

08007474 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007474:	b480      	push	{r7}
 8007476:	b089      	sub	sp, #36	; 0x24
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800747c:	4ba1      	ldr	r3, [pc, #644]	; (8007704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800747e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007480:	f003 0303 	and.w	r3, r3, #3
 8007484:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007486:	4b9f      	ldr	r3, [pc, #636]	; (8007704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748a:	0b1b      	lsrs	r3, r3, #12
 800748c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007490:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007492:	4b9c      	ldr	r3, [pc, #624]	; (8007704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007496:	091b      	lsrs	r3, r3, #4
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800749e:	4b99      	ldr	r3, [pc, #612]	; (8007704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a2:	08db      	lsrs	r3, r3, #3
 80074a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	fb02 f303 	mul.w	r3, r2, r3
 80074ae:	ee07 3a90 	vmov	s15, r3
 80074b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 8111 	beq.w	80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	f000 8083 	beq.w	80075d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	f200 80a1 	bhi.w	8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d003      	beq.n	80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d056      	beq.n	800758c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80074de:	e099      	b.n	8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074e0:	4b88      	ldr	r3, [pc, #544]	; (8007704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0320 	and.w	r3, r3, #32
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d02d      	beq.n	8007548 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074ec:	4b85      	ldr	r3, [pc, #532]	; (8007704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	08db      	lsrs	r3, r3, #3
 80074f2:	f003 0303 	and.w	r3, r3, #3
 80074f6:	4a84      	ldr	r2, [pc, #528]	; (8007708 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80074f8:	fa22 f303 	lsr.w	r3, r2, r3
 80074fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	ee07 3a90 	vmov	s15, r3
 8007504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007516:	4b7b      	ldr	r3, [pc, #492]	; (8007704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007526:	ed97 6a03 	vldr	s12, [r7, #12]
 800752a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800770c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800752e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800753a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007542:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007546:	e087      	b.n	8007658 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007552:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007710 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800755a:	4b6a      	ldr	r3, [pc, #424]	; (8007704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800755c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800756a:	ed97 6a03 	vldr	s12, [r7, #12]
 800756e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800770c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800757a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800757e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800758a:	e065      	b.n	8007658 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007596:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800759a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759e:	4b59      	ldr	r3, [pc, #356]	; (8007704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80075b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800770c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075ce:	e043      	b.n	8007658 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007718 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80075de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075e2:	4b48      	ldr	r3, [pc, #288]	; (8007704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ea:	ee07 3a90 	vmov	s15, r3
 80075ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800770c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800760a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800760e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007612:	e021      	b.n	8007658 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	ee07 3a90 	vmov	s15, r3
 800761a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007626:	4b37      	ldr	r3, [pc, #220]	; (8007704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800762e:	ee07 3a90 	vmov	s15, r3
 8007632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007636:	ed97 6a03 	vldr	s12, [r7, #12]
 800763a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800770c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800763e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800764a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800764e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007652:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007656:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007658:	4b2a      	ldr	r3, [pc, #168]	; (8007704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800765a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765c:	0a5b      	lsrs	r3, r3, #9
 800765e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800766e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007672:	edd7 6a07 	vldr	s13, [r7, #28]
 8007676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800767a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800767e:	ee17 2a90 	vmov	r2, s15
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007686:	4b1f      	ldr	r3, [pc, #124]	; (8007704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768a:	0c1b      	lsrs	r3, r3, #16
 800768c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007690:	ee07 3a90 	vmov	s15, r3
 8007694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007698:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800769c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80076a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076ac:	ee17 2a90 	vmov	r2, s15
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80076b4:	4b13      	ldr	r3, [pc, #76]	; (8007704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b8:	0e1b      	lsrs	r3, r3, #24
 80076ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80076d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076da:	ee17 2a90 	vmov	r2, s15
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80076e2:	e008      	b.n	80076f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	609a      	str	r2, [r3, #8]
}
 80076f6:	bf00      	nop
 80076f8:	3724      	adds	r7, #36	; 0x24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	58024400 	.word	0x58024400
 8007708:	03d09000 	.word	0x03d09000
 800770c:	46000000 	.word	0x46000000
 8007710:	4c742400 	.word	0x4c742400
 8007714:	4a742400 	.word	0x4a742400
 8007718:	4af42400 	.word	0x4af42400

0800771c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800771c:	b480      	push	{r7}
 800771e:	b089      	sub	sp, #36	; 0x24
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007724:	4ba1      	ldr	r3, [pc, #644]	; (80079ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007728:	f003 0303 	and.w	r3, r3, #3
 800772c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800772e:	4b9f      	ldr	r3, [pc, #636]	; (80079ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007732:	0d1b      	lsrs	r3, r3, #20
 8007734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007738:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800773a:	4b9c      	ldr	r3, [pc, #624]	; (80079ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800773c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773e:	0a1b      	lsrs	r3, r3, #8
 8007740:	f003 0301 	and.w	r3, r3, #1
 8007744:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007746:	4b99      	ldr	r3, [pc, #612]	; (80079ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800774a:	08db      	lsrs	r3, r3, #3
 800774c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	fb02 f303 	mul.w	r3, r2, r3
 8007756:	ee07 3a90 	vmov	s15, r3
 800775a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 8111 	beq.w	800798c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	2b02      	cmp	r3, #2
 800776e:	f000 8083 	beq.w	8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	2b02      	cmp	r3, #2
 8007776:	f200 80a1 	bhi.w	80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d003      	beq.n	8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d056      	beq.n	8007834 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007786:	e099      	b.n	80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007788:	4b88      	ldr	r3, [pc, #544]	; (80079ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 0320 	and.w	r3, r3, #32
 8007790:	2b00      	cmp	r3, #0
 8007792:	d02d      	beq.n	80077f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007794:	4b85      	ldr	r3, [pc, #532]	; (80079ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	08db      	lsrs	r3, r3, #3
 800779a:	f003 0303 	and.w	r3, r3, #3
 800779e:	4a84      	ldr	r2, [pc, #528]	; (80079b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80077a0:	fa22 f303 	lsr.w	r3, r2, r3
 80077a4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	ee07 3a90 	vmov	s15, r3
 80077ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	ee07 3a90 	vmov	s15, r3
 80077b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077be:	4b7b      	ldr	r3, [pc, #492]	; (80079ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077c6:	ee07 3a90 	vmov	s15, r3
 80077ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80077d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80079b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80077ee:	e087      	b.n	8007900 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	ee07 3a90 	vmov	s15, r3
 80077f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80077fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007802:	4b6a      	ldr	r3, [pc, #424]	; (80079ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007812:	ed97 6a03 	vldr	s12, [r7, #12]
 8007816:	eddf 5a67 	vldr	s11, [pc, #412]	; 80079b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800781a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800781e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800782a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800782e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007832:	e065      	b.n	8007900 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	ee07 3a90 	vmov	s15, r3
 800783a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80079bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007846:	4b59      	ldr	r3, [pc, #356]	; (80079ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784e:	ee07 3a90 	vmov	s15, r3
 8007852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007856:	ed97 6a03 	vldr	s12, [r7, #12]
 800785a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80079b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800785e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800786a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800786e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007876:	e043      	b.n	8007900 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	ee07 3a90 	vmov	s15, r3
 800787e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007882:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80079c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800788a:	4b48      	ldr	r3, [pc, #288]	; (80079ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007892:	ee07 3a90 	vmov	s15, r3
 8007896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800789a:	ed97 6a03 	vldr	s12, [r7, #12]
 800789e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80079b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078ba:	e021      	b.n	8007900 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	ee07 3a90 	vmov	s15, r3
 80078c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80079bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80078ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ce:	4b37      	ldr	r3, [pc, #220]	; (80079ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d6:	ee07 3a90 	vmov	s15, r3
 80078da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078de:	ed97 6a03 	vldr	s12, [r7, #12]
 80078e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80079b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007900:	4b2a      	ldr	r3, [pc, #168]	; (80079ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007904:	0a5b      	lsrs	r3, r3, #9
 8007906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007912:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007916:	ee37 7a87 	vadd.f32	s14, s15, s14
 800791a:	edd7 6a07 	vldr	s13, [r7, #28]
 800791e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007926:	ee17 2a90 	vmov	r2, s15
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800792e:	4b1f      	ldr	r3, [pc, #124]	; (80079ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007932:	0c1b      	lsrs	r3, r3, #16
 8007934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007938:	ee07 3a90 	vmov	s15, r3
 800793c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007940:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007944:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007948:	edd7 6a07 	vldr	s13, [r7, #28]
 800794c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007954:	ee17 2a90 	vmov	r2, s15
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800795c:	4b13      	ldr	r3, [pc, #76]	; (80079ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800795e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007960:	0e1b      	lsrs	r3, r3, #24
 8007962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007966:	ee07 3a90 	vmov	s15, r3
 800796a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007972:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007976:	edd7 6a07 	vldr	s13, [r7, #28]
 800797a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800797e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007982:	ee17 2a90 	vmov	r2, s15
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800798a:	e008      	b.n	800799e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	609a      	str	r2, [r3, #8]
}
 800799e:	bf00      	nop
 80079a0:	3724      	adds	r7, #36	; 0x24
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	58024400 	.word	0x58024400
 80079b0:	03d09000 	.word	0x03d09000
 80079b4:	46000000 	.word	0x46000000
 80079b8:	4c742400 	.word	0x4c742400
 80079bc:	4a742400 	.word	0x4a742400
 80079c0:	4af42400 	.word	0x4af42400

080079c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079d2:	4b53      	ldr	r3, [pc, #332]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 80079d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d6:	f003 0303 	and.w	r3, r3, #3
 80079da:	2b03      	cmp	r3, #3
 80079dc:	d101      	bne.n	80079e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e099      	b.n	8007b16 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80079e2:	4b4f      	ldr	r3, [pc, #316]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a4e      	ldr	r2, [pc, #312]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 80079e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80079ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079ee:	f7fa fab7 	bl	8001f60 <HAL_GetTick>
 80079f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079f4:	e008      	b.n	8007a08 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80079f6:	f7fa fab3 	bl	8001f60 <HAL_GetTick>
 80079fa:	4602      	mov	r2, r0
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d901      	bls.n	8007a08 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a04:	2303      	movs	r3, #3
 8007a06:	e086      	b.n	8007b16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a08:	4b45      	ldr	r3, [pc, #276]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1f0      	bne.n	80079f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007a14:	4b42      	ldr	r3, [pc, #264]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 8007a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a18:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	031b      	lsls	r3, r3, #12
 8007a22:	493f      	ldr	r1, [pc, #252]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 8007a24:	4313      	orrs	r3, r2
 8007a26:	628b      	str	r3, [r1, #40]	; 0x28
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	3b01      	subs	r3, #1
 8007a38:	025b      	lsls	r3, r3, #9
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	3b01      	subs	r3, #1
 8007a44:	041b      	lsls	r3, r3, #16
 8007a46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007a4a:	431a      	orrs	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	3b01      	subs	r3, #1
 8007a52:	061b      	lsls	r3, r3, #24
 8007a54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007a58:	4931      	ldr	r1, [pc, #196]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007a5e:	4b30      	ldr	r3, [pc, #192]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 8007a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	492d      	ldr	r1, [pc, #180]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007a70:	4b2b      	ldr	r3, [pc, #172]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 8007a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a74:	f023 0220 	bic.w	r2, r3, #32
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	4928      	ldr	r1, [pc, #160]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007a82:	4b27      	ldr	r3, [pc, #156]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 8007a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a86:	4a26      	ldr	r2, [pc, #152]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 8007a88:	f023 0310 	bic.w	r3, r3, #16
 8007a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007a8e:	4b24      	ldr	r3, [pc, #144]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 8007a90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a92:	4b24      	ldr	r3, [pc, #144]	; (8007b24 <RCCEx_PLL2_Config+0x160>)
 8007a94:	4013      	ands	r3, r2
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	69d2      	ldr	r2, [r2, #28]
 8007a9a:	00d2      	lsls	r2, r2, #3
 8007a9c:	4920      	ldr	r1, [pc, #128]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007aa2:	4b1f      	ldr	r3, [pc, #124]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 8007aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa6:	4a1e      	ldr	r2, [pc, #120]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 8007aa8:	f043 0310 	orr.w	r3, r3, #16
 8007aac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d106      	bne.n	8007ac2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007ab4:	4b1a      	ldr	r3, [pc, #104]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 8007ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab8:	4a19      	ldr	r2, [pc, #100]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 8007aba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007abe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ac0:	e00f      	b.n	8007ae2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d106      	bne.n	8007ad6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007ac8:	4b15      	ldr	r3, [pc, #84]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 8007aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007acc:	4a14      	ldr	r2, [pc, #80]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 8007ace:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ad2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ad4:	e005      	b.n	8007ae2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007ad6:	4b12      	ldr	r3, [pc, #72]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 8007ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ada:	4a11      	ldr	r2, [pc, #68]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 8007adc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ae0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007ae2:	4b0f      	ldr	r3, [pc, #60]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a0e      	ldr	r2, [pc, #56]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 8007ae8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007aec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aee:	f7fa fa37 	bl	8001f60 <HAL_GetTick>
 8007af2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007af4:	e008      	b.n	8007b08 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007af6:	f7fa fa33 	bl	8001f60 <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d901      	bls.n	8007b08 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e006      	b.n	8007b16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b08:	4b05      	ldr	r3, [pc, #20]	; (8007b20 <RCCEx_PLL2_Config+0x15c>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d0f0      	beq.n	8007af6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	58024400 	.word	0x58024400
 8007b24:	ffff0007 	.word	0xffff0007

08007b28 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b36:	4b53      	ldr	r3, [pc, #332]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3a:	f003 0303 	and.w	r3, r3, #3
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	d101      	bne.n	8007b46 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e099      	b.n	8007c7a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007b46:	4b4f      	ldr	r3, [pc, #316]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a4e      	ldr	r2, [pc, #312]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b52:	f7fa fa05 	bl	8001f60 <HAL_GetTick>
 8007b56:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b58:	e008      	b.n	8007b6c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b5a:	f7fa fa01 	bl	8001f60 <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d901      	bls.n	8007b6c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e086      	b.n	8007c7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b6c:	4b45      	ldr	r3, [pc, #276]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1f0      	bne.n	8007b5a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007b78:	4b42      	ldr	r3, [pc, #264]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	051b      	lsls	r3, r3, #20
 8007b86:	493f      	ldr	r1, [pc, #252]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	628b      	str	r3, [r1, #40]	; 0x28
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	3b01      	subs	r3, #1
 8007b92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	025b      	lsls	r3, r3, #9
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	041b      	lsls	r3, r3, #16
 8007baa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	061b      	lsls	r3, r3, #24
 8007bb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007bbc:	4931      	ldr	r1, [pc, #196]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007bc2:	4b30      	ldr	r3, [pc, #192]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	492d      	ldr	r1, [pc, #180]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007bd4:	4b2b      	ldr	r3, [pc, #172]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	4928      	ldr	r1, [pc, #160]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007be6:	4b27      	ldr	r3, [pc, #156]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bea:	4a26      	ldr	r2, [pc, #152]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bf0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007bf2:	4b24      	ldr	r3, [pc, #144]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bf6:	4b24      	ldr	r3, [pc, #144]	; (8007c88 <RCCEx_PLL3_Config+0x160>)
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	69d2      	ldr	r2, [r2, #28]
 8007bfe:	00d2      	lsls	r2, r2, #3
 8007c00:	4920      	ldr	r1, [pc, #128]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007c06:	4b1f      	ldr	r3, [pc, #124]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0a:	4a1e      	ldr	r2, [pc, #120]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d106      	bne.n	8007c26 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007c18:	4b1a      	ldr	r3, [pc, #104]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1c:	4a19      	ldr	r2, [pc, #100]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007c1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007c22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c24:	e00f      	b.n	8007c46 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d106      	bne.n	8007c3a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007c2c:	4b15      	ldr	r3, [pc, #84]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c30:	4a14      	ldr	r2, [pc, #80]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007c32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c38:	e005      	b.n	8007c46 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007c3a:	4b12      	ldr	r3, [pc, #72]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3e:	4a11      	ldr	r2, [pc, #68]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007c40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007c46:	4b0f      	ldr	r3, [pc, #60]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a0e      	ldr	r2, [pc, #56]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c52:	f7fa f985 	bl	8001f60 <HAL_GetTick>
 8007c56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c58:	e008      	b.n	8007c6c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c5a:	f7fa f981 	bl	8001f60 <HAL_GetTick>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d901      	bls.n	8007c6c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e006      	b.n	8007c7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c6c:	4b05      	ldr	r3, [pc, #20]	; (8007c84 <RCCEx_PLL3_Config+0x15c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d0f0      	beq.n	8007c5a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	58024400 	.word	0x58024400
 8007c88:	ffff0007 	.word	0xffff0007

08007c8c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d101      	bne.n	8007c9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e10f      	b.n	8007ebe <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a87      	ldr	r2, [pc, #540]	; (8007ec8 <HAL_SPI_Init+0x23c>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d00f      	beq.n	8007cce <HAL_SPI_Init+0x42>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a86      	ldr	r2, [pc, #536]	; (8007ecc <HAL_SPI_Init+0x240>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d00a      	beq.n	8007cce <HAL_SPI_Init+0x42>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a84      	ldr	r2, [pc, #528]	; (8007ed0 <HAL_SPI_Init+0x244>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d005      	beq.n	8007cce <HAL_SPI_Init+0x42>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	2b0f      	cmp	r3, #15
 8007cc8:	d901      	bls.n	8007cce <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e0f7      	b.n	8007ebe <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f001 f994 	bl	8008ffc <SPI_GetPacketSize>
 8007cd4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a7b      	ldr	r2, [pc, #492]	; (8007ec8 <HAL_SPI_Init+0x23c>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d00c      	beq.n	8007cfa <HAL_SPI_Init+0x6e>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a79      	ldr	r2, [pc, #484]	; (8007ecc <HAL_SPI_Init+0x240>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d007      	beq.n	8007cfa <HAL_SPI_Init+0x6e>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a78      	ldr	r2, [pc, #480]	; (8007ed0 <HAL_SPI_Init+0x244>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d002      	beq.n	8007cfa <HAL_SPI_Init+0x6e>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2b08      	cmp	r3, #8
 8007cf8:	d811      	bhi.n	8007d1e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007cfe:	4a72      	ldr	r2, [pc, #456]	; (8007ec8 <HAL_SPI_Init+0x23c>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d009      	beq.n	8007d18 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a70      	ldr	r2, [pc, #448]	; (8007ecc <HAL_SPI_Init+0x240>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d004      	beq.n	8007d18 <HAL_SPI_Init+0x8c>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a6f      	ldr	r2, [pc, #444]	; (8007ed0 <HAL_SPI_Init+0x244>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d104      	bne.n	8007d22 <HAL_SPI_Init+0x96>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2b10      	cmp	r3, #16
 8007d1c:	d901      	bls.n	8007d22 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e0cd      	b.n	8007ebe <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d106      	bne.n	8007d3c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7f9 fd68 	bl	800180c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f022 0201 	bic.w	r2, r2, #1
 8007d52:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007d5e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d68:	d119      	bne.n	8007d9e <HAL_SPI_Init+0x112>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d72:	d103      	bne.n	8007d7c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d008      	beq.n	8007d8e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10c      	bne.n	8007d9e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007d88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d8c:	d107      	bne.n	8007d9e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d9c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00f      	beq.n	8007dca <HAL_SPI_Init+0x13e>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	2b06      	cmp	r3, #6
 8007db0:	d90b      	bls.n	8007dca <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	430a      	orrs	r2, r1
 8007dc6:	601a      	str	r2, [r3, #0]
 8007dc8:	e007      	b.n	8007dda <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dd8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	69da      	ldr	r2, [r3, #28]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de2:	431a      	orrs	r2, r3
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	431a      	orrs	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dec:	ea42 0103 	orr.w	r1, r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68da      	ldr	r2, [r3, #12]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e04:	431a      	orrs	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	431a      	orrs	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	431a      	orrs	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	431a      	orrs	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	431a      	orrs	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	431a      	orrs	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e2e:	431a      	orrs	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	431a      	orrs	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e3a:	ea42 0103 	orr.w	r1, r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	430a      	orrs	r2, r1
 8007e48:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d113      	bne.n	8007e7a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e64:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e78:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f022 0201 	bic.w	r2, r2, #1
 8007e88:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00a      	beq.n	8007eac <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	40013000 	.word	0x40013000
 8007ecc:	40003800 	.word	0x40003800
 8007ed0:	40003c00 	.word	0x40003c00

08007ed4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b08c      	sub	sp, #48	; 0x30
 8007ed8:	af02      	add	r7, sp, #8
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
 8007ee0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	3320      	adds	r3, #32
 8007eee:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3330      	adds	r3, #48	; 0x30
 8007ef6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d101      	bne.n	8007f06 <HAL_SPI_TransmitReceive+0x32>
 8007f02:	2302      	movs	r3, #2
 8007f04:	e1fd      	b.n	8008302 <HAL_SPI_TransmitReceive+0x42e>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f0e:	f7fa f827 	bl	8001f60 <HAL_GetTick>
 8007f12:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8007f14:	887b      	ldrh	r3, [r7, #2]
 8007f16:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 8007f18:	887b      	ldrh	r3, [r7, #2]
 8007f1a:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d009      	beq.n	8007f3c <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 8007f28:	2302      	movs	r3, #2
 8007f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007f36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f3a:	e1e2      	b.n	8008302 <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d005      	beq.n	8007f4e <HAL_SPI_TransmitReceive+0x7a>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d002      	beq.n	8007f4e <HAL_SPI_TransmitReceive+0x7a>
 8007f48:	887b      	ldrh	r3, [r7, #2]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d109      	bne.n	8007f62 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f60:	e1cf      	b.n	8008302 <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2205      	movs	r2, #5
 8007f66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	887a      	ldrh	r2, [r7, #2]
 8007f7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	887a      	ldrh	r2, [r7, #2]
 8007f84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	887a      	ldrh	r2, [r7, #2]
 8007f92:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	887a      	ldrh	r2, [r7, #2]
 8007f9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68da      	ldr	r2, [r3, #12]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8007fb8:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	4b82      	ldr	r3, [pc, #520]	; (80081cc <HAL_SPI_TransmitReceive+0x2f8>)
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	8879      	ldrh	r1, [r7, #2]
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	6812      	ldr	r2, [r2, #0]
 8007fca:	430b      	orrs	r3, r1
 8007fcc:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f042 0201 	orr.w	r2, r2, #1
 8007fdc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fe6:	d107      	bne.n	8007ff8 <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ff6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	2b0f      	cmp	r3, #15
 8007ffe:	d970      	bls.n	80080e2 <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008000:	e068      	b.n	80080d4 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	695b      	ldr	r3, [r3, #20]
 8008008:	f003 0302 	and.w	r3, r3, #2
 800800c:	2b02      	cmp	r3, #2
 800800e:	d11a      	bne.n	8008046 <HAL_SPI_TransmitReceive+0x172>
 8008010:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008012:	2b00      	cmp	r3, #0
 8008014:	d017      	beq.n	8008046 <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6812      	ldr	r2, [r2, #0]
 8008020:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008026:	1d1a      	adds	r2, r3, #4
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008032:	b29b      	uxth	r3, r3
 8008034:	3b01      	subs	r3, #1
 8008036:	b29a      	uxth	r2, r3
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008044:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	695a      	ldr	r2, [r3, #20]
 800804c:	f248 0308 	movw	r3, #32776	; 0x8008
 8008050:	4013      	ands	r3, r2
 8008052:	2b00      	cmp	r3, #0
 8008054:	d01a      	beq.n	800808c <HAL_SPI_TransmitReceive+0x1b8>
 8008056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008058:	2b00      	cmp	r3, #0
 800805a:	d017      	beq.n	800808c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008064:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008066:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800806c:	1d1a      	adds	r2, r3, #4
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008078:	b29b      	uxth	r3, r3
 800807a:	3b01      	subs	r3, #1
 800807c:	b29a      	uxth	r2, r3
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800808a:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800808c:	f7f9 ff68 	bl	8001f60 <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008098:	429a      	cmp	r2, r3
 800809a:	d803      	bhi.n	80080a4 <HAL_SPI_TransmitReceive+0x1d0>
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a2:	d102      	bne.n	80080aa <HAL_SPI_TransmitReceive+0x1d6>
 80080a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d114      	bne.n	80080d4 <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 fed8 	bl	8008e60 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e116      	b.n	8008302 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80080d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d193      	bne.n	8008002 <HAL_SPI_TransmitReceive+0x12e>
 80080da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d190      	bne.n	8008002 <HAL_SPI_TransmitReceive+0x12e>
 80080e0:	e0e8      	b.n	80082b4 <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	2b07      	cmp	r3, #7
 80080e8:	f240 80de 	bls.w	80082a8 <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80080ec:	e066      	b.n	80081bc <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	695b      	ldr	r3, [r3, #20]
 80080f4:	f003 0302 	and.w	r3, r3, #2
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d119      	bne.n	8008130 <HAL_SPI_TransmitReceive+0x25c>
 80080fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d016      	beq.n	8008130 <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008106:	881a      	ldrh	r2, [r3, #0]
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008110:	1c9a      	adds	r2, r3, #2
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800811c:	b29b      	uxth	r3, r3
 800811e:	3b01      	subs	r3, #1
 8008120:	b29a      	uxth	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800812e:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	2b01      	cmp	r3, #1
 800813c:	d11a      	bne.n	8008174 <HAL_SPI_TransmitReceive+0x2a0>
 800813e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008140:	2b00      	cmp	r3, #0
 8008142:	d017      	beq.n	8008174 <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008148:	69ba      	ldr	r2, [r7, #24]
 800814a:	8812      	ldrh	r2, [r2, #0]
 800814c:	b292      	uxth	r2, r2
 800814e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008154:	1c9a      	adds	r2, r3, #2
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008160:	b29b      	uxth	r3, r3
 8008162:	3b01      	subs	r3, #1
 8008164:	b29a      	uxth	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008172:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008174:	f7f9 fef4 	bl	8001f60 <HAL_GetTick>
 8008178:	4602      	mov	r2, r0
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008180:	429a      	cmp	r2, r3
 8008182:	d803      	bhi.n	800818c <HAL_SPI_TransmitReceive+0x2b8>
 8008184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800818a:	d102      	bne.n	8008192 <HAL_SPI_TransmitReceive+0x2be>
 800818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818e:	2b00      	cmp	r3, #0
 8008190:	d114      	bne.n	80081bc <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 fe64 	bl	8008e60 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e0a2      	b.n	8008302 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80081bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d195      	bne.n	80080ee <HAL_SPI_TransmitReceive+0x21a>
 80081c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d192      	bne.n	80080ee <HAL_SPI_TransmitReceive+0x21a>
 80081c8:	e074      	b.n	80082b4 <HAL_SPI_TransmitReceive+0x3e0>
 80081ca:	bf00      	nop
 80081cc:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d11b      	bne.n	8008216 <HAL_SPI_TransmitReceive+0x342>
 80081de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d018      	beq.n	8008216 <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	3320      	adds	r3, #32
 80081ee:	7812      	ldrb	r2, [r2, #0]
 80081f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081f6:	1c5a      	adds	r2, r3, #1
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008202:	b29b      	uxth	r3, r3
 8008204:	3b01      	subs	r3, #1
 8008206:	b29a      	uxth	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008214:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	695b      	ldr	r3, [r3, #20]
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b01      	cmp	r3, #1
 8008222:	d11d      	bne.n	8008260 <HAL_SPI_TransmitReceive+0x38c>
 8008224:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008226:	2b00      	cmp	r3, #0
 8008228:	d01a      	beq.n	8008260 <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008236:	7812      	ldrb	r2, [r2, #0]
 8008238:	b2d2      	uxtb	r2, r2
 800823a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008240:	1c5a      	adds	r2, r3, #1
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800824c:	b29b      	uxth	r3, r3
 800824e:	3b01      	subs	r3, #1
 8008250:	b29a      	uxth	r2, r3
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800825e:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008260:	f7f9 fe7e 	bl	8001f60 <HAL_GetTick>
 8008264:	4602      	mov	r2, r0
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800826c:	429a      	cmp	r2, r3
 800826e:	d803      	bhi.n	8008278 <HAL_SPI_TransmitReceive+0x3a4>
 8008270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008276:	d102      	bne.n	800827e <HAL_SPI_TransmitReceive+0x3aa>
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	2b00      	cmp	r3, #0
 800827c:	d114      	bne.n	80082a8 <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f000 fdee 	bl	8008e60 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008292:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e02c      	b.n	8008302 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80082a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d190      	bne.n	80081d0 <HAL_SPI_TransmitReceive+0x2fc>
 80082ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d18d      	bne.n	80081d0 <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ba:	2200      	movs	r2, #0
 80082bc:	2108      	movs	r1, #8
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f000 fe6e 	bl	8008fa0 <SPI_WaitOnFlagUntilTimeout>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d007      	beq.n	80082da <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082d0:	f043 0220 	orr.w	r2, r3, #32
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f000 fdc0 	bl	8008e60 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e001      	b.n	8008302 <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 80082fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008302:	4618      	mov	r0, r3
 8008304:	3728      	adds	r7, #40	; 0x28
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop

0800830c <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	4613      	mov	r3, r2
 8008318:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008324:	2b01      	cmp	r3, #1
 8008326:	d101      	bne.n	800832c <HAL_SPI_Transmit_DMA+0x20>
 8008328:	2302      	movs	r3, #2
 800832a:	e137      	b.n	800859c <HAL_SPI_Transmit_DMA+0x290>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b01      	cmp	r3, #1
 800833e:	d007      	beq.n	8008350 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8008340:	2302      	movs	r3, #2
 8008342:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800834c:	7dfb      	ldrb	r3, [r7, #23]
 800834e:	e125      	b.n	800859c <HAL_SPI_Transmit_DMA+0x290>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d002      	beq.n	800835c <HAL_SPI_Transmit_DMA+0x50>
 8008356:	88fb      	ldrh	r3, [r7, #6]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d107      	bne.n	800836c <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008368:	7dfb      	ldrb	r3, [r7, #23]
 800836a:	e117      	b.n	800859c <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2203      	movs	r2, #3
 8008370:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	88fa      	ldrh	r2, [r7, #6]
 8008386:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	88fa      	ldrh	r2, [r7, #6]
 800838e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80083bc:	d108      	bne.n	80083d0 <HAL_SPI_Transmit_DMA+0xc4>
  {
    SPI_1LINE_TX(hspi);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	e009      	b.n	80083e4 <HAL_SPI_Transmit_DMA+0xd8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80083e2:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	2b0f      	cmp	r3, #15
 80083ea:	d905      	bls.n	80083f8 <HAL_SPI_Transmit_DMA+0xec>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083f6:	d10f      	bne.n	8008418 <HAL_SPI_Transmit_DMA+0x10c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80083fc:	2b07      	cmp	r3, #7
 80083fe:	d913      	bls.n	8008428 <HAL_SPI_Transmit_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800840a:	d00d      	beq.n	8008428 <HAL_SPI_Transmit_DMA+0x11c>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008410:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008412:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008416:	d007      	beq.n	8008428 <HAL_SPI_Transmit_DMA+0x11c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008424:	7dfb      	ldrb	r3, [r7, #23]
 8008426:	e0b9      	b.n	800859c <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	2b07      	cmp	r3, #7
 800842e:	d820      	bhi.n	8008472 <HAL_SPI_Transmit_DMA+0x166>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800843a:	d109      	bne.n	8008450 <HAL_SPI_Transmit_DMA+0x144>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008442:	b29b      	uxth	r3, r3
 8008444:	3301      	adds	r3, #1
 8008446:	105b      	asrs	r3, r3, #1
 8008448:	b29a      	uxth	r2, r3
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800845a:	d11e      	bne.n	800849a <HAL_SPI_Transmit_DMA+0x18e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008462:	b29b      	uxth	r3, r3
 8008464:	3303      	adds	r3, #3
 8008466:	109b      	asrs	r3, r3, #2
 8008468:	b29a      	uxth	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008470:	e013      	b.n	800849a <HAL_SPI_Transmit_DMA+0x18e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	2b0f      	cmp	r3, #15
 8008478:	d80f      	bhi.n	800849a <HAL_SPI_Transmit_DMA+0x18e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008484:	d109      	bne.n	800849a <HAL_SPI_Transmit_DMA+0x18e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800848c:	b29b      	uxth	r3, r3
 800848e:	3301      	adds	r3, #1
 8008490:	105b      	asrs	r3, r3, #1
 8008492:	b29a      	uxth	r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800849e:	4a41      	ldr	r2, [pc, #260]	; (80085a4 <HAL_SPI_Transmit_DMA+0x298>)
 80084a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084a6:	4a40      	ldr	r2, [pc, #256]	; (80085a8 <HAL_SPI_Transmit_DMA+0x29c>)
 80084a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084ae:	4a3f      	ldr	r2, [pc, #252]	; (80085ac <HAL_SPI_Transmit_DMA+0x2a0>)
 80084b0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084b6:	2200      	movs	r2, #0
 80084b8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	689a      	ldr	r2, [r3, #8]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084c8:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084d2:	4619      	mov	r1, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3320      	adds	r3, #32
 80084da:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80084e2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80084e4:	f7fa f980 	bl	80027e8 <HAL_DMA_Start_IT>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d013      	beq.n	8008516 <HAL_SPI_Transmit_DMA+0x20a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084f4:	f043 0210 	orr.w	r2, r3, #16
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2201      	movs	r2, #1
 800850a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8008512:	7dfb      	ldrb	r3, [r7, #23]
 8008514:	e042      	b.n	800859c <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008520:	d108      	bne.n	8008534 <HAL_SPI_Transmit_DMA+0x228>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	6859      	ldr	r1, [r3, #4]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	4b20      	ldr	r3, [pc, #128]	; (80085b0 <HAL_SPI_Transmit_DMA+0x2a4>)
 800852e:	400b      	ands	r3, r1
 8008530:	6053      	str	r3, [r2, #4]
 8008532:	e009      	b.n	8008548 <HAL_SPI_Transmit_DMA+0x23c>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	685a      	ldr	r2, [r3, #4]
 800853a:	4b1d      	ldr	r3, [pc, #116]	; (80085b0 <HAL_SPI_Transmit_DMA+0x2a4>)
 800853c:	4013      	ands	r3, r2
 800853e:	88f9      	ldrh	r1, [r7, #6]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	6812      	ldr	r2, [r2, #0]
 8008544:	430b      	orrs	r3, r1
 8008546:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	689a      	ldr	r2, [r3, #8]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008556:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	691a      	ldr	r2, [r3, #16]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8008566:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f042 0201 	orr.w	r2, r2, #1
 8008576:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008580:	d107      	bne.n	8008592 <HAL_SPI_Transmit_DMA+0x286>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008590:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800859a:	7dfb      	ldrb	r3, [r7, #23]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3718      	adds	r7, #24
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	08008dad 	.word	0x08008dad
 80085a8:	08008d21 	.word	0x08008d21
 80085ac:	08008de5 	.word	0x08008de5
 80085b0:	ffff0000 	.word	0xffff0000

080085b4 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
 80085c0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d101      	bne.n	80085d4 <HAL_SPI_TransmitReceive_DMA+0x20>
 80085d0:	2302      	movs	r3, #2
 80085d2:	e198      	b.n	8008906 <HAL_SPI_TransmitReceive_DMA+0x352>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d007      	beq.n	80085f8 <HAL_SPI_TransmitReceive_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 80085e8:	2302      	movs	r3, #2
 80085ea:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80085f4:	7dfb      	ldrb	r3, [r7, #23]
 80085f6:	e186      	b.n	8008906 <HAL_SPI_TransmitReceive_DMA+0x352>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d005      	beq.n	800860a <HAL_SPI_TransmitReceive_DMA+0x56>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d002      	beq.n	800860a <HAL_SPI_TransmitReceive_DMA+0x56>
 8008604:	887b      	ldrh	r3, [r7, #2]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d107      	bne.n	800861a <HAL_SPI_TransmitReceive_DMA+0x66>
  {
    errorcode = HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008616:	7dfb      	ldrb	r3, [r7, #23]
 8008618:	e175      	b.n	8008906 <HAL_SPI_TransmitReceive_DMA+0x352>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2205      	movs	r2, #5
 800861e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	887a      	ldrh	r2, [r7, #2]
 8008634:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	887a      	ldrh	r2, [r7, #2]
 800863c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	887a      	ldrh	r2, [r7, #2]
 800864a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	887a      	ldrh	r2, [r7, #2]
 8008652:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68da      	ldr	r2, [r3, #12]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8008670:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	689a      	ldr	r2, [r3, #8]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008680:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	2b0f      	cmp	r3, #15
 8008688:	d905      	bls.n	8008696 <HAL_SPI_TransmitReceive_DMA+0xe2>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008694:	d10f      	bne.n	80086b6 <HAL_SPI_TransmitReceive_DMA+0x102>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800869a:	2b07      	cmp	r3, #7
 800869c:	d913      	bls.n	80086c6 <HAL_SPI_TransmitReceive_DMA+0x112>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086a8:	d00d      	beq.n	80086c6 <HAL_SPI_TransmitReceive_DMA+0x112>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086ae:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80086b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086b4:	d007      	beq.n	80086c6 <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80086c2:	7dfb      	ldrb	r3, [r7, #23]
 80086c4:	e11f      	b.n	8008906 <HAL_SPI_TransmitReceive_DMA+0x352>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	2b07      	cmp	r3, #7
 80086cc:	d840      	bhi.n	8008750 <HAL_SPI_TransmitReceive_DMA+0x19c>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086d2:	699b      	ldr	r3, [r3, #24]
 80086d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086d8:	d109      	bne.n	80086ee <HAL_SPI_TransmitReceive_DMA+0x13a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	3301      	adds	r3, #1
 80086e4:	105b      	asrs	r3, r3, #1
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086f8:	d109      	bne.n	800870e <HAL_SPI_TransmitReceive_DMA+0x15a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008700:	b29b      	uxth	r3, r3
 8008702:	3303      	adds	r3, #3
 8008704:	109b      	asrs	r3, r3, #2
 8008706:	b29a      	uxth	r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008718:	d109      	bne.n	800872e <HAL_SPI_TransmitReceive_DMA+0x17a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008720:	b29b      	uxth	r3, r3
 8008722:	3301      	adds	r3, #1
 8008724:	105b      	asrs	r3, r3, #1
 8008726:	b29a      	uxth	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008738:	d12e      	bne.n	8008798 <HAL_SPI_TransmitReceive_DMA+0x1e4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008740:	b29b      	uxth	r3, r3
 8008742:	3303      	adds	r3, #3
 8008744:	109b      	asrs	r3, r3, #2
 8008746:	b29a      	uxth	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800874e:	e023      	b.n	8008798 <HAL_SPI_TransmitReceive_DMA+0x1e4>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	2b0f      	cmp	r3, #15
 8008756:	d81f      	bhi.n	8008798 <HAL_SPI_TransmitReceive_DMA+0x1e4>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008762:	d109      	bne.n	8008778 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800876a:	b29b      	uxth	r3, r3
 800876c:	3301      	adds	r3, #1
 800876e:	105b      	asrs	r3, r3, #1
 8008770:	b29a      	uxth	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008782:	d109      	bne.n	8008798 <HAL_SPI_TransmitReceive_DMA+0x1e4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800878a:	b29b      	uxth	r3, r3
 800878c:	3301      	adds	r3, #1
 800878e:	105b      	asrs	r3, r3, #1
 8008790:	b29a      	uxth	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800879c:	4a5c      	ldr	r2, [pc, #368]	; (8008910 <HAL_SPI_TransmitReceive_DMA+0x35c>)
 800879e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087a4:	4a5b      	ldr	r2, [pc, #364]	; (8008914 <HAL_SPI_TransmitReceive_DMA+0x360>)
 80087a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087ac:	4a5a      	ldr	r2, [pc, #360]	; (8008918 <HAL_SPI_TransmitReceive_DMA+0x364>)
 80087ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087b4:	2200      	movs	r2, #0
 80087b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	3330      	adds	r3, #48	; 0x30
 80087c2:	4619      	mov	r1, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087c8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80087d0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80087d2:	f7fa f809 	bl	80027e8 <HAL_DMA_Start_IT>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d013      	beq.n	8008804 <HAL_SPI_TransmitReceive_DMA+0x250>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087e2:	f043 0210 	orr.w	r2, r3, #16
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8008800:	7dfb      	ldrb	r3, [r7, #23]
 8008802:	e080      	b.n	8008906 <HAL_SPI_TransmitReceive_DMA+0x352>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	689a      	ldr	r2, [r3, #8]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008812:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008818:	2200      	movs	r2, #0
 800881a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008820:	2200      	movs	r2, #0
 8008822:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008828:	2200      	movs	r2, #0
 800882a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008830:	4a39      	ldr	r2, [pc, #228]	; (8008918 <HAL_SPI_TransmitReceive_DMA+0x364>)
 8008832:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800883c:	4619      	mov	r1, r3
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3320      	adds	r3, #32
 8008844:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800884c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800884e:	f7f9 ffcb 	bl	80027e8 <HAL_DMA_Start_IT>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d013      	beq.n	8008880 <HAL_SPI_TransmitReceive_DMA+0x2cc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800885e:	f043 0210 	orr.w	r2, r3, #16
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800887c:	7dfb      	ldrb	r3, [r7, #23]
 800887e:	e042      	b.n	8008906 <HAL_SPI_TransmitReceive_DMA+0x352>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800888a:	d108      	bne.n	800889e <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	6859      	ldr	r1, [r3, #4]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	4b21      	ldr	r3, [pc, #132]	; (800891c <HAL_SPI_TransmitReceive_DMA+0x368>)
 8008898:	400b      	ands	r3, r1
 800889a:	6053      	str	r3, [r2, #4]
 800889c:	e009      	b.n	80088b2 <HAL_SPI_TransmitReceive_DMA+0x2fe>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	685a      	ldr	r2, [r3, #4]
 80088a4:	4b1d      	ldr	r3, [pc, #116]	; (800891c <HAL_SPI_TransmitReceive_DMA+0x368>)
 80088a6:	4013      	ands	r3, r2
 80088a8:	8879      	ldrh	r1, [r7, #2]
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	6812      	ldr	r2, [r2, #0]
 80088ae:	430b      	orrs	r3, r1
 80088b0:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	689a      	ldr	r2, [r3, #8]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088c0:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	691a      	ldr	r2, [r3, #16]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 80088d0:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f042 0201 	orr.w	r2, r2, #1
 80088e0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088ea:	d107      	bne.n	80088fc <HAL_SPI_TransmitReceive_DMA+0x348>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088fa:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8008904:	7dfb      	ldrb	r3, [r7, #23]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3718      	adds	r7, #24
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	08008dc9 	.word	0x08008dc9
 8008914:	08008d67 	.word	0x08008d67
 8008918:	08008de5 	.word	0x08008de5
 800891c:	ffff0000 	.word	0xffff0000

08008920 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b08a      	sub	sp, #40	; 0x28
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008938:	6a3a      	ldr	r2, [r7, #32]
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	4013      	ands	r3, r2
 800893e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008948:	2300      	movs	r3, #0
 800894a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008952:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3330      	adds	r3, #48	; 0x30
 800895a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008962:	2b00      	cmp	r3, #0
 8008964:	d010      	beq.n	8008988 <HAL_SPI_IRQHandler+0x68>
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	f003 0308 	and.w	r3, r3, #8
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00b      	beq.n	8008988 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	699a      	ldr	r2, [r3, #24]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800897e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f9c3 	bl	8008d0c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8008986:	e192      	b.n	8008cae <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800898e:	2b00      	cmp	r3, #0
 8008990:	d113      	bne.n	80089ba <HAL_SPI_IRQHandler+0x9a>
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	f003 0320 	and.w	r3, r3, #32
 8008998:	2b00      	cmp	r3, #0
 800899a:	d10e      	bne.n	80089ba <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d009      	beq.n	80089ba <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	4798      	blx	r3
    hspi->RxISR(hspi);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	4798      	blx	r3
    handled = 1UL;
 80089b6:	2301      	movs	r3, #1
 80089b8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10f      	bne.n	80089e4 <HAL_SPI_IRQHandler+0xc4>
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00a      	beq.n	80089e4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d105      	bne.n	80089e4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	4798      	blx	r3
    handled = 1UL;
 80089e0:	2301      	movs	r3, #1
 80089e2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	f003 0320 	and.w	r3, r3, #32
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d10f      	bne.n	8008a0e <HAL_SPI_IRQHandler+0xee>
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	f003 0302 	and.w	r3, r3, #2
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00a      	beq.n	8008a0e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d105      	bne.n	8008a0e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	4798      	blx	r3
    handled = 1UL;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f040 8147 	bne.w	8008ca4 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	f003 0308 	and.w	r3, r3, #8
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 808b 	beq.w	8008b38 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	699a      	ldr	r2, [r3, #24]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f042 0208 	orr.w	r2, r2, #8
 8008a30:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	699a      	ldr	r2, [r3, #24]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f042 0210 	orr.w	r2, r2, #16
 8008a40:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	699a      	ldr	r2, [r3, #24]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a50:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	691a      	ldr	r2, [r3, #16]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f022 0208 	bic.w	r2, r2, #8
 8008a60:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d13d      	bne.n	8008aec <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008a70:	e036      	b.n	8008ae0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	2b0f      	cmp	r3, #15
 8008a78:	d90b      	bls.n	8008a92 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a82:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008a84:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a8a:	1d1a      	adds	r2, r3, #4
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	665a      	str	r2, [r3, #100]	; 0x64
 8008a90:	e01d      	b.n	8008ace <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	2b07      	cmp	r3, #7
 8008a98:	d90b      	bls.n	8008ab2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	8812      	ldrh	r2, [r2, #0]
 8008aa2:	b292      	uxth	r2, r2
 8008aa4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aaa:	1c9a      	adds	r2, r3, #2
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	665a      	str	r2, [r3, #100]	; 0x64
 8008ab0:	e00d      	b.n	8008ace <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008abe:	7812      	ldrb	r2, [r2, #0]
 8008ac0:	b2d2      	uxtb	r2, r2
 8008ac2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ac8:	1c5a      	adds	r2, r3, #1
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1c2      	bne.n	8008a72 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f9b7 	bl	8008e60 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2201      	movs	r2, #1
 8008af6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d003      	beq.n	8008b0c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f8f7 	bl	8008cf8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008b0a:	e0d0      	b.n	8008cae <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008b0c:	7cfb      	ldrb	r3, [r7, #19]
 8008b0e:	2b05      	cmp	r3, #5
 8008b10:	d103      	bne.n	8008b1a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7f7 fe4e 	bl	80007b4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008b18:	e0c6      	b.n	8008ca8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008b1a:	7cfb      	ldrb	r3, [r7, #19]
 8008b1c:	2b04      	cmp	r3, #4
 8008b1e:	d103      	bne.n	8008b28 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 f8cb 	bl	8008cbc <HAL_SPI_RxCpltCallback>
    return;
 8008b26:	e0bf      	b.n	8008ca8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008b28:	7cfb      	ldrb	r3, [r7, #19]
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	f040 80bc 	bne.w	8008ca8 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f7f7 fe4f 	bl	80007d4 <HAL_SPI_TxCpltCallback>
    return;
 8008b36:	e0b7      	b.n	8008ca8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f000 80b5 	beq.w	8008cae <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00f      	beq.n	8008b6e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b54:	f043 0204 	orr.w	r2, r3, #4
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	699a      	ldr	r2, [r3, #24]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b6c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00f      	beq.n	8008b98 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b7e:	f043 0201 	orr.w	r2, r3, #1
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	699a      	ldr	r2, [r3, #24]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b96:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00f      	beq.n	8008bc2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ba8:	f043 0208 	orr.w	r2, r3, #8
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	699a      	ldr	r2, [r3, #24]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bc0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	f003 0320 	and.w	r3, r3, #32
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00f      	beq.n	8008bec <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bd2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	699a      	ldr	r2, [r3, #24]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f042 0220 	orr.w	r2, r2, #32
 8008bea:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d05a      	beq.n	8008cac <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f022 0201 	bic.w	r2, r2, #1
 8008c04:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6919      	ldr	r1, [r3, #16]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	4b28      	ldr	r3, [pc, #160]	; (8008cb4 <HAL_SPI_IRQHandler+0x394>)
 8008c12:	400b      	ands	r3, r1
 8008c14:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008c1c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008c20:	d138      	bne.n	8008c94 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	689a      	ldr	r2, [r3, #8]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008c30:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d013      	beq.n	8008c62 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c3e:	4a1e      	ldr	r2, [pc, #120]	; (8008cb8 <HAL_SPI_IRQHandler+0x398>)
 8008c40:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fa fb56 	bl	80032f8 <HAL_DMA_Abort_IT>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d007      	beq.n	8008c62 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d020      	beq.n	8008cac <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c6e:	4a12      	ldr	r2, [pc, #72]	; (8008cb8 <HAL_SPI_IRQHandler+0x398>)
 8008c70:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fa fb3e 	bl	80032f8 <HAL_DMA_Abort_IT>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d014      	beq.n	8008cac <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008c92:	e00b      	b.n	8008cac <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f82b 	bl	8008cf8 <HAL_SPI_ErrorCallback>
    return;
 8008ca2:	e003      	b.n	8008cac <HAL_SPI_IRQHandler+0x38c>
    return;
 8008ca4:	bf00      	nop
 8008ca6:	e002      	b.n	8008cae <HAL_SPI_IRQHandler+0x38e>
    return;
 8008ca8:	bf00      	nop
 8008caa:	e000      	b.n	8008cae <HAL_SPI_IRQHandler+0x38e>
    return;
 8008cac:	bf00      	nop
  }
}
 8008cae:	3728      	adds	r7, #40	; 0x28
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	fffffc94 	.word	0xfffffc94
 8008cb8:	08008e2b 	.word	0x08008e2b

08008cbc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008cc4:	bf00      	nop
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008cd8:	bf00      	nop
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008cec:	bf00      	nop
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008d00:	bf00      	nop
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b07      	cmp	r3, #7
 8008d38:	d011      	beq.n	8008d5e <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d3e:	69db      	ldr	r3, [r3, #28]
 8008d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d44:	d103      	bne.n	8008d4e <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f7f7 fd44 	bl	80007d4 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008d4c:	e007      	b.n	8008d5e <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	691a      	ldr	r2, [r3, #16]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f042 0208 	orr.w	r2, r2, #8
 8008d5c:	611a      	str	r2, [r3, #16]
}
 8008d5e:	bf00      	nop
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d72:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	2b07      	cmp	r3, #7
 8008d7e:	d011      	beq.n	8008da4 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d84:	69db      	ldr	r3, [r3, #28]
 8008d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d8a:	d103      	bne.n	8008d94 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f7f7 fd11 	bl	80007b4 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008d92:	e007      	b.n	8008da4 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	691a      	ldr	r2, [r3, #16]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f042 0208 	orr.w	r2, r2, #8
 8008da2:	611a      	str	r2, [r3, #16]
}
 8008da4:	bf00      	nop
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f7ff ff88 	bl	8008cd0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008dc0:	bf00      	nop
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f7ff ff84 	bl	8008ce4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008ddc:	bf00      	nop
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df0:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7fb fbf0 	bl	80045d8 <HAL_DMA_GetError>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d011      	beq.n	8008e22 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f000 f82e 	bl	8008e60 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e0a:	f043 0210 	orr.w	r2, r3, #16
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f7ff ff6b 	bl	8008cf8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008e22:	bf00      	nop
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b084      	sub	sp, #16
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e36:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f7ff ff51 	bl	8008cf8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008e56:	bf00      	nop
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
	...

08008e60 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	695b      	ldr	r3, [r3, #20]
 8008e6e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	699a      	ldr	r2, [r3, #24]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f042 0208 	orr.w	r2, r2, #8
 8008e7e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	699a      	ldr	r2, [r3, #24]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f042 0210 	orr.w	r2, r2, #16
 8008e8e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f022 0201 	bic.w	r2, r2, #1
 8008e9e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	6919      	ldr	r1, [r3, #16]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	4b3c      	ldr	r3, [pc, #240]	; (8008f9c <SPI_CloseTransfer+0x13c>)
 8008eac:	400b      	ands	r3, r1
 8008eae:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	689a      	ldr	r2, [r3, #8]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008ebe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	2b04      	cmp	r3, #4
 8008eca:	d014      	beq.n	8008ef6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f003 0320 	and.w	r3, r3, #32
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00f      	beq.n	8008ef6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008edc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	699a      	ldr	r2, [r3, #24]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f042 0220 	orr.w	r2, r2, #32
 8008ef4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b03      	cmp	r3, #3
 8008f00:	d014      	beq.n	8008f2c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00f      	beq.n	8008f2c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f12:	f043 0204 	orr.w	r2, r3, #4
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	699a      	ldr	r2, [r3, #24]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f2a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00f      	beq.n	8008f56 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f3c:	f043 0201 	orr.w	r2, r3, #1
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	699a      	ldr	r2, [r3, #24]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f54:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00f      	beq.n	8008f80 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f66:	f043 0208 	orr.w	r2, r3, #8
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	699a      	ldr	r2, [r3, #24]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f7e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008f90:	bf00      	nop
 8008f92:	3714      	adds	r7, #20
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr
 8008f9c:	fffffc90 	.word	0xfffffc90

08008fa0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	603b      	str	r3, [r7, #0]
 8008fac:	4613      	mov	r3, r2
 8008fae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008fb0:	e010      	b.n	8008fd4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fb2:	f7f8 ffd5 	bl	8001f60 <HAL_GetTick>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	683a      	ldr	r2, [r7, #0]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d803      	bhi.n	8008fca <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc8:	d102      	bne.n	8008fd0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d101      	bne.n	8008fd4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	e00f      	b.n	8008ff4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	695a      	ldr	r2, [r3, #20]
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	4013      	ands	r3, r2
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	bf0c      	ite	eq
 8008fe4:	2301      	moveq	r3, #1
 8008fe6:	2300      	movne	r3, #0
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	461a      	mov	r2, r3
 8008fec:	79fb      	ldrb	r3, [r7, #7]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d0df      	beq.n	8008fb2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009008:	095b      	lsrs	r3, r3, #5
 800900a:	3301      	adds	r3, #1
 800900c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	3301      	adds	r3, #1
 8009014:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	3307      	adds	r3, #7
 800901a:	08db      	lsrs	r3, r3, #3
 800901c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	fb02 f303 	mul.w	r3, r2, r3
}
 8009026:	4618      	mov	r0, r3
 8009028:	3714      	adds	r7, #20
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr

08009032 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b082      	sub	sp, #8
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d101      	bne.n	8009044 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e049      	b.n	80090d8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b00      	cmp	r3, #0
 800904e:	d106      	bne.n	800905e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f841 	bl	80090e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2202      	movs	r2, #2
 8009062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	3304      	adds	r3, #4
 800906e:	4619      	mov	r1, r3
 8009070:	4610      	mov	r0, r2
 8009072:	f000 fa0d 	bl	8009490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2201      	movs	r2, #1
 800907a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2201      	movs	r2, #1
 800908a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2201      	movs	r2, #1
 8009092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2201      	movs	r2, #1
 80090ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2201      	movs	r2, #1
 80090d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b01      	cmp	r3, #1
 8009106:	d001      	beq.n	800910c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	e05e      	b.n	80091ca <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2202      	movs	r2, #2
 8009110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68da      	ldr	r2, [r3, #12]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f042 0201 	orr.w	r2, r2, #1
 8009122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a2b      	ldr	r2, [pc, #172]	; (80091d8 <HAL_TIM_Base_Start_IT+0xe4>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d02c      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x94>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009136:	d027      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x94>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a27      	ldr	r2, [pc, #156]	; (80091dc <HAL_TIM_Base_Start_IT+0xe8>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d022      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x94>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a26      	ldr	r2, [pc, #152]	; (80091e0 <HAL_TIM_Base_Start_IT+0xec>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d01d      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x94>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a24      	ldr	r2, [pc, #144]	; (80091e4 <HAL_TIM_Base_Start_IT+0xf0>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d018      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x94>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a23      	ldr	r2, [pc, #140]	; (80091e8 <HAL_TIM_Base_Start_IT+0xf4>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d013      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x94>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a21      	ldr	r2, [pc, #132]	; (80091ec <HAL_TIM_Base_Start_IT+0xf8>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d00e      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x94>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a20      	ldr	r2, [pc, #128]	; (80091f0 <HAL_TIM_Base_Start_IT+0xfc>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d009      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x94>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a1e      	ldr	r2, [pc, #120]	; (80091f4 <HAL_TIM_Base_Start_IT+0x100>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d004      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x94>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a1d      	ldr	r2, [pc, #116]	; (80091f8 <HAL_TIM_Base_Start_IT+0x104>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d115      	bne.n	80091b4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	689a      	ldr	r2, [r3, #8]
 800918e:	4b1b      	ldr	r3, [pc, #108]	; (80091fc <HAL_TIM_Base_Start_IT+0x108>)
 8009190:	4013      	ands	r3, r2
 8009192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2b06      	cmp	r3, #6
 8009198:	d015      	beq.n	80091c6 <HAL_TIM_Base_Start_IT+0xd2>
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091a0:	d011      	beq.n	80091c6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f042 0201 	orr.w	r2, r2, #1
 80091b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091b2:	e008      	b.n	80091c6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f042 0201 	orr.w	r2, r2, #1
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	e000      	b.n	80091c8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3714      	adds	r7, #20
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	40010000 	.word	0x40010000
 80091dc:	40000400 	.word	0x40000400
 80091e0:	40000800 	.word	0x40000800
 80091e4:	40000c00 	.word	0x40000c00
 80091e8:	40010400 	.word	0x40010400
 80091ec:	40001800 	.word	0x40001800
 80091f0:	40014000 	.word	0x40014000
 80091f4:	4000e000 	.word	0x4000e000
 80091f8:	4000e400 	.word	0x4000e400
 80091fc:	00010007 	.word	0x00010007

08009200 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	f003 0302 	and.w	r3, r3, #2
 8009212:	2b02      	cmp	r3, #2
 8009214:	d122      	bne.n	800925c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	f003 0302 	and.w	r3, r3, #2
 8009220:	2b02      	cmp	r3, #2
 8009222:	d11b      	bne.n	800925c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f06f 0202 	mvn.w	r2, #2
 800922c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2201      	movs	r2, #1
 8009232:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	699b      	ldr	r3, [r3, #24]
 800923a:	f003 0303 	and.w	r3, r3, #3
 800923e:	2b00      	cmp	r3, #0
 8009240:	d003      	beq.n	800924a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f905 	bl	8009452 <HAL_TIM_IC_CaptureCallback>
 8009248:	e005      	b.n	8009256 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f8f7 	bl	800943e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 f908 	bl	8009466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	f003 0304 	and.w	r3, r3, #4
 8009266:	2b04      	cmp	r3, #4
 8009268:	d122      	bne.n	80092b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	f003 0304 	and.w	r3, r3, #4
 8009274:	2b04      	cmp	r3, #4
 8009276:	d11b      	bne.n	80092b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f06f 0204 	mvn.w	r2, #4
 8009280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2202      	movs	r2, #2
 8009286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009292:	2b00      	cmp	r3, #0
 8009294:	d003      	beq.n	800929e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f8db 	bl	8009452 <HAL_TIM_IC_CaptureCallback>
 800929c:	e005      	b.n	80092aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f8cd 	bl	800943e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 f8de 	bl	8009466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	f003 0308 	and.w	r3, r3, #8
 80092ba:	2b08      	cmp	r3, #8
 80092bc:	d122      	bne.n	8009304 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	f003 0308 	and.w	r3, r3, #8
 80092c8:	2b08      	cmp	r3, #8
 80092ca:	d11b      	bne.n	8009304 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f06f 0208 	mvn.w	r2, #8
 80092d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2204      	movs	r2, #4
 80092da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	69db      	ldr	r3, [r3, #28]
 80092e2:	f003 0303 	and.w	r3, r3, #3
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d003      	beq.n	80092f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f8b1 	bl	8009452 <HAL_TIM_IC_CaptureCallback>
 80092f0:	e005      	b.n	80092fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f8a3 	bl	800943e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 f8b4 	bl	8009466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	f003 0310 	and.w	r3, r3, #16
 800930e:	2b10      	cmp	r3, #16
 8009310:	d122      	bne.n	8009358 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	f003 0310 	and.w	r3, r3, #16
 800931c:	2b10      	cmp	r3, #16
 800931e:	d11b      	bne.n	8009358 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f06f 0210 	mvn.w	r2, #16
 8009328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2208      	movs	r2, #8
 800932e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	69db      	ldr	r3, [r3, #28]
 8009336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800933a:	2b00      	cmp	r3, #0
 800933c:	d003      	beq.n	8009346 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f887 	bl	8009452 <HAL_TIM_IC_CaptureCallback>
 8009344:	e005      	b.n	8009352 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f879 	bl	800943e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f88a 	bl	8009466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	2b01      	cmp	r3, #1
 8009364:	d10e      	bne.n	8009384 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	f003 0301 	and.w	r3, r3, #1
 8009370:	2b01      	cmp	r3, #1
 8009372:	d107      	bne.n	8009384 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f06f 0201 	mvn.w	r2, #1
 800937c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f7f8 fa0e 	bl	80017a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800938e:	2b80      	cmp	r3, #128	; 0x80
 8009390:	d10e      	bne.n	80093b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800939c:	2b80      	cmp	r3, #128	; 0x80
 800939e:	d107      	bne.n	80093b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80093a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f920 	bl	80095f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093be:	d10e      	bne.n	80093de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ca:	2b80      	cmp	r3, #128	; 0x80
 80093cc:	d107      	bne.n	80093de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80093d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f913 	bl	8009604 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e8:	2b40      	cmp	r3, #64	; 0x40
 80093ea:	d10e      	bne.n	800940a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f6:	2b40      	cmp	r3, #64	; 0x40
 80093f8:	d107      	bne.n	800940a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 f838 	bl	800947a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	691b      	ldr	r3, [r3, #16]
 8009410:	f003 0320 	and.w	r3, r3, #32
 8009414:	2b20      	cmp	r3, #32
 8009416:	d10e      	bne.n	8009436 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	f003 0320 	and.w	r3, r3, #32
 8009422:	2b20      	cmp	r3, #32
 8009424:	d107      	bne.n	8009436 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f06f 0220 	mvn.w	r2, #32
 800942e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f8d3 	bl	80095dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009436:	bf00      	nop
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800943e:	b480      	push	{r7}
 8009440:	b083      	sub	sp, #12
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009446:	bf00      	nop
 8009448:	370c      	adds	r7, #12
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr

08009452 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009452:	b480      	push	{r7}
 8009454:	b083      	sub	sp, #12
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800945a:	bf00      	nop
 800945c:	370c      	adds	r7, #12
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr

08009466 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009466:	b480      	push	{r7}
 8009468:	b083      	sub	sp, #12
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800946e:	bf00      	nop
 8009470:	370c      	adds	r7, #12
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800947a:	b480      	push	{r7}
 800947c:	b083      	sub	sp, #12
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009482:	bf00      	nop
 8009484:	370c      	adds	r7, #12
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
	...

08009490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a44      	ldr	r2, [pc, #272]	; (80095b4 <TIM_Base_SetConfig+0x124>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d013      	beq.n	80094d0 <TIM_Base_SetConfig+0x40>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ae:	d00f      	beq.n	80094d0 <TIM_Base_SetConfig+0x40>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a41      	ldr	r2, [pc, #260]	; (80095b8 <TIM_Base_SetConfig+0x128>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d00b      	beq.n	80094d0 <TIM_Base_SetConfig+0x40>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a40      	ldr	r2, [pc, #256]	; (80095bc <TIM_Base_SetConfig+0x12c>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d007      	beq.n	80094d0 <TIM_Base_SetConfig+0x40>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a3f      	ldr	r2, [pc, #252]	; (80095c0 <TIM_Base_SetConfig+0x130>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d003      	beq.n	80094d0 <TIM_Base_SetConfig+0x40>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a3e      	ldr	r2, [pc, #248]	; (80095c4 <TIM_Base_SetConfig+0x134>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d108      	bne.n	80094e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	4313      	orrs	r3, r2
 80094e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a33      	ldr	r2, [pc, #204]	; (80095b4 <TIM_Base_SetConfig+0x124>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d027      	beq.n	800953a <TIM_Base_SetConfig+0xaa>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094f0:	d023      	beq.n	800953a <TIM_Base_SetConfig+0xaa>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a30      	ldr	r2, [pc, #192]	; (80095b8 <TIM_Base_SetConfig+0x128>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d01f      	beq.n	800953a <TIM_Base_SetConfig+0xaa>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a2f      	ldr	r2, [pc, #188]	; (80095bc <TIM_Base_SetConfig+0x12c>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d01b      	beq.n	800953a <TIM_Base_SetConfig+0xaa>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a2e      	ldr	r2, [pc, #184]	; (80095c0 <TIM_Base_SetConfig+0x130>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d017      	beq.n	800953a <TIM_Base_SetConfig+0xaa>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a2d      	ldr	r2, [pc, #180]	; (80095c4 <TIM_Base_SetConfig+0x134>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d013      	beq.n	800953a <TIM_Base_SetConfig+0xaa>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a2c      	ldr	r2, [pc, #176]	; (80095c8 <TIM_Base_SetConfig+0x138>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d00f      	beq.n	800953a <TIM_Base_SetConfig+0xaa>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a2b      	ldr	r2, [pc, #172]	; (80095cc <TIM_Base_SetConfig+0x13c>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d00b      	beq.n	800953a <TIM_Base_SetConfig+0xaa>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4a2a      	ldr	r2, [pc, #168]	; (80095d0 <TIM_Base_SetConfig+0x140>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d007      	beq.n	800953a <TIM_Base_SetConfig+0xaa>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a29      	ldr	r2, [pc, #164]	; (80095d4 <TIM_Base_SetConfig+0x144>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d003      	beq.n	800953a <TIM_Base_SetConfig+0xaa>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a28      	ldr	r2, [pc, #160]	; (80095d8 <TIM_Base_SetConfig+0x148>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d108      	bne.n	800954c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	4313      	orrs	r3, r2
 800954a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	695b      	ldr	r3, [r3, #20]
 8009556:	4313      	orrs	r3, r2
 8009558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	689a      	ldr	r2, [r3, #8]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a10      	ldr	r2, [pc, #64]	; (80095b4 <TIM_Base_SetConfig+0x124>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d00f      	beq.n	8009598 <TIM_Base_SetConfig+0x108>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a12      	ldr	r2, [pc, #72]	; (80095c4 <TIM_Base_SetConfig+0x134>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d00b      	beq.n	8009598 <TIM_Base_SetConfig+0x108>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a11      	ldr	r2, [pc, #68]	; (80095c8 <TIM_Base_SetConfig+0x138>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d007      	beq.n	8009598 <TIM_Base_SetConfig+0x108>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a10      	ldr	r2, [pc, #64]	; (80095cc <TIM_Base_SetConfig+0x13c>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d003      	beq.n	8009598 <TIM_Base_SetConfig+0x108>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a0f      	ldr	r2, [pc, #60]	; (80095d0 <TIM_Base_SetConfig+0x140>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d103      	bne.n	80095a0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	691a      	ldr	r2, [r3, #16]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	615a      	str	r2, [r3, #20]
}
 80095a6:	bf00      	nop
 80095a8:	3714      	adds	r7, #20
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	40010000 	.word	0x40010000
 80095b8:	40000400 	.word	0x40000400
 80095bc:	40000800 	.word	0x40000800
 80095c0:	40000c00 	.word	0x40000c00
 80095c4:	40010400 	.word	0x40010400
 80095c8:	40014000 	.word	0x40014000
 80095cc:	40014400 	.word	0x40014400
 80095d0:	40014800 	.word	0x40014800
 80095d4:	4000e000 	.word	0x4000e000
 80095d8:	4000e400 	.word	0x4000e400

080095dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d101      	bne.n	800962a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	e042      	b.n	80096b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009630:	2b00      	cmp	r3, #0
 8009632:	d106      	bne.n	8009642 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f7f8 f9ef 	bl	8001a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2224      	movs	r2, #36	; 0x24
 8009646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f022 0201 	bic.w	r2, r2, #1
 8009658:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 fce0 	bl	800a020 <UART_SetConfig>
 8009660:	4603      	mov	r3, r0
 8009662:	2b01      	cmp	r3, #1
 8009664:	d101      	bne.n	800966a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	e022      	b.n	80096b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800966e:	2b00      	cmp	r3, #0
 8009670:	d002      	beq.n	8009678 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f001 fb40 	bl	800acf8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	685a      	ldr	r2, [r3, #4]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009686:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	689a      	ldr	r2, [r3, #8]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009696:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f042 0201 	orr.w	r2, r2, #1
 80096a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f001 fbc7 	bl	800ae3c <UART_CheckIdleState>
 80096ae:	4603      	mov	r3, r0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b08a      	sub	sp, #40	; 0x28
 80096bc:	af02      	add	r7, sp, #8
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	603b      	str	r3, [r7, #0]
 80096c4:	4613      	mov	r3, r2
 80096c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ce:	2b20      	cmp	r3, #32
 80096d0:	d17b      	bne.n	80097ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d002      	beq.n	80096de <HAL_UART_Transmit+0x26>
 80096d8:	88fb      	ldrh	r3, [r7, #6]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d101      	bne.n	80096e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	e074      	b.n	80097cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2221      	movs	r2, #33	; 0x21
 80096ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80096f2:	f7f8 fc35 	bl	8001f60 <HAL_GetTick>
 80096f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	88fa      	ldrh	r2, [r7, #6]
 80096fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	88fa      	ldrh	r2, [r7, #6]
 8009704:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009710:	d108      	bne.n	8009724 <HAL_UART_Transmit+0x6c>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d104      	bne.n	8009724 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800971a:	2300      	movs	r3, #0
 800971c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	61bb      	str	r3, [r7, #24]
 8009722:	e003      	b.n	800972c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009728:	2300      	movs	r3, #0
 800972a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800972c:	e030      	b.n	8009790 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	2200      	movs	r2, #0
 8009736:	2180      	movs	r1, #128	; 0x80
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f001 fc29 	bl	800af90 <UART_WaitOnFlagUntilTimeout>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d005      	beq.n	8009750 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2220      	movs	r2, #32
 8009748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800974c:	2303      	movs	r3, #3
 800974e:	e03d      	b.n	80097cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10b      	bne.n	800976e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	881b      	ldrh	r3, [r3, #0]
 800975a:	461a      	mov	r2, r3
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009764:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	3302      	adds	r3, #2
 800976a:	61bb      	str	r3, [r7, #24]
 800976c:	e007      	b.n	800977e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	781a      	ldrb	r2, [r3, #0]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	3301      	adds	r3, #1
 800977c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009784:	b29b      	uxth	r3, r3
 8009786:	3b01      	subs	r3, #1
 8009788:	b29a      	uxth	r2, r3
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009796:	b29b      	uxth	r3, r3
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1c8      	bne.n	800972e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	9300      	str	r3, [sp, #0]
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	2200      	movs	r2, #0
 80097a4:	2140      	movs	r1, #64	; 0x40
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f001 fbf2 	bl	800af90 <UART_WaitOnFlagUntilTimeout>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d005      	beq.n	80097be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2220      	movs	r2, #32
 80097b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80097ba:	2303      	movs	r3, #3
 80097bc:	e006      	b.n	80097cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2220      	movs	r2, #32
 80097c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80097c6:	2300      	movs	r3, #0
 80097c8:	e000      	b.n	80097cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80097ca:	2302      	movs	r3, #2
  }
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3720      	adds	r7, #32
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b08a      	sub	sp, #40	; 0x28
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	4613      	mov	r3, r2
 80097e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097e8:	2b20      	cmp	r3, #32
 80097ea:	d137      	bne.n	800985c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d002      	beq.n	80097f8 <HAL_UART_Receive_IT+0x24>
 80097f2:	88fb      	ldrh	r3, [r7, #6]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e030      	b.n	800985e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a18      	ldr	r2, [pc, #96]	; (8009868 <HAL_UART_Receive_IT+0x94>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d01f      	beq.n	800984c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009816:	2b00      	cmp	r3, #0
 8009818:	d018      	beq.n	800984c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	e853 3f00 	ldrex	r3, [r3]
 8009826:	613b      	str	r3, [r7, #16]
   return(result);
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800982e:	627b      	str	r3, [r7, #36]	; 0x24
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	461a      	mov	r2, r3
 8009836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009838:	623b      	str	r3, [r7, #32]
 800983a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983c:	69f9      	ldr	r1, [r7, #28]
 800983e:	6a3a      	ldr	r2, [r7, #32]
 8009840:	e841 2300 	strex	r3, r2, [r1]
 8009844:	61bb      	str	r3, [r7, #24]
   return(result);
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1e6      	bne.n	800981a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800984c:	88fb      	ldrh	r3, [r7, #6]
 800984e:	461a      	mov	r2, r3
 8009850:	68b9      	ldr	r1, [r7, #8]
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f001 fc04 	bl	800b060 <UART_Start_Receive_IT>
 8009858:	4603      	mov	r3, r0
 800985a:	e000      	b.n	800985e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800985c:	2302      	movs	r3, #2
  }
}
 800985e:	4618      	mov	r0, r3
 8009860:	3728      	adds	r7, #40	; 0x28
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	58000c00 	.word	0x58000c00

0800986c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b0ba      	sub	sp, #232	; 0xe8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	69db      	ldr	r3, [r3, #28]
 800987a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009892:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009896:	f640 030f 	movw	r3, #2063	; 0x80f
 800989a:	4013      	ands	r3, r2
 800989c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80098a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d11b      	bne.n	80098e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80098a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098ac:	f003 0320 	and.w	r3, r3, #32
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d015      	beq.n	80098e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80098b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098b8:	f003 0320 	and.w	r3, r3, #32
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d105      	bne.n	80098cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80098c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d009      	beq.n	80098e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f000 8377 	beq.w	8009fc4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	4798      	blx	r3
      }
      return;
 80098de:	e371      	b.n	8009fc4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80098e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f000 8123 	beq.w	8009b30 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80098ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80098ee:	4b8d      	ldr	r3, [pc, #564]	; (8009b24 <HAL_UART_IRQHandler+0x2b8>)
 80098f0:	4013      	ands	r3, r2
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d106      	bne.n	8009904 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80098f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80098fa:	4b8b      	ldr	r3, [pc, #556]	; (8009b28 <HAL_UART_IRQHandler+0x2bc>)
 80098fc:	4013      	ands	r3, r2
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f000 8116 	beq.w	8009b30 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009908:	f003 0301 	and.w	r3, r3, #1
 800990c:	2b00      	cmp	r3, #0
 800990e:	d011      	beq.n	8009934 <HAL_UART_IRQHandler+0xc8>
 8009910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00b      	beq.n	8009934 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2201      	movs	r2, #1
 8009922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800992a:	f043 0201 	orr.w	r2, r3, #1
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009938:	f003 0302 	and.w	r3, r3, #2
 800993c:	2b00      	cmp	r3, #0
 800993e:	d011      	beq.n	8009964 <HAL_UART_IRQHandler+0xf8>
 8009940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009944:	f003 0301 	and.w	r3, r3, #1
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00b      	beq.n	8009964 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2202      	movs	r2, #2
 8009952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800995a:	f043 0204 	orr.w	r2, r3, #4
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009968:	f003 0304 	and.w	r3, r3, #4
 800996c:	2b00      	cmp	r3, #0
 800996e:	d011      	beq.n	8009994 <HAL_UART_IRQHandler+0x128>
 8009970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009974:	f003 0301 	and.w	r3, r3, #1
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00b      	beq.n	8009994 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2204      	movs	r2, #4
 8009982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800998a:	f043 0202 	orr.w	r2, r3, #2
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009998:	f003 0308 	and.w	r3, r3, #8
 800999c:	2b00      	cmp	r3, #0
 800999e:	d017      	beq.n	80099d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099a4:	f003 0320 	and.w	r3, r3, #32
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d105      	bne.n	80099b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80099ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80099b0:	4b5c      	ldr	r3, [pc, #368]	; (8009b24 <HAL_UART_IRQHandler+0x2b8>)
 80099b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d00b      	beq.n	80099d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2208      	movs	r2, #8
 80099be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099c6:	f043 0208 	orr.w	r2, r3, #8
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80099d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d012      	beq.n	8009a02 <HAL_UART_IRQHandler+0x196>
 80099dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d00c      	beq.n	8009a02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80099f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099f8:	f043 0220 	orr.w	r2, r3, #32
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f000 82dd 	beq.w	8009fc8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a12:	f003 0320 	and.w	r3, r3, #32
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d013      	beq.n	8009a42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a1e:	f003 0320 	and.w	r3, r3, #32
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d105      	bne.n	8009a32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d007      	beq.n	8009a42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d003      	beq.n	8009a42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a56:	2b40      	cmp	r3, #64	; 0x40
 8009a58:	d005      	beq.n	8009a66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009a5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009a5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d054      	beq.n	8009b10 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f001 fc1c 	bl	800b2a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a76:	2b40      	cmp	r3, #64	; 0x40
 8009a78:	d146      	bne.n	8009b08 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	3308      	adds	r3, #8
 8009a80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a88:	e853 3f00 	ldrex	r3, [r3]
 8009a8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009a90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	3308      	adds	r3, #8
 8009aa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009aa6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009ab2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009ab6:	e841 2300 	strex	r3, r2, [r1]
 8009aba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009abe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1d9      	bne.n	8009a7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d017      	beq.n	8009b00 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ad6:	4a15      	ldr	r2, [pc, #84]	; (8009b2c <HAL_UART_IRQHandler+0x2c0>)
 8009ad8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7f9 fc09 	bl	80032f8 <HAL_DMA_Abort_IT>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d019      	beq.n	8009b20 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009afa:	4610      	mov	r0, r2
 8009afc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009afe:	e00f      	b.n	8009b20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fa77 	bl	8009ff4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b06:	e00b      	b.n	8009b20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 fa73 	bl	8009ff4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b0e:	e007      	b.n	8009b20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fa6f 	bl	8009ff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009b1e:	e253      	b.n	8009fc8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b20:	bf00      	nop
    return;
 8009b22:	e251      	b.n	8009fc8 <HAL_UART_IRQHandler+0x75c>
 8009b24:	10000001 	.word	0x10000001
 8009b28:	04000120 	.word	0x04000120
 8009b2c:	0800b371 	.word	0x0800b371

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	f040 81e7 	bne.w	8009f08 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b3e:	f003 0310 	and.w	r3, r3, #16
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f000 81e0 	beq.w	8009f08 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b4c:	f003 0310 	and.w	r3, r3, #16
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f000 81d9 	beq.w	8009f08 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2210      	movs	r2, #16
 8009b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b68:	2b40      	cmp	r3, #64	; 0x40
 8009b6a:	f040 8151 	bne.w	8009e10 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a96      	ldr	r2, [pc, #600]	; (8009dd0 <HAL_UART_IRQHandler+0x564>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d068      	beq.n	8009c4e <HAL_UART_IRQHandler+0x3e2>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a93      	ldr	r2, [pc, #588]	; (8009dd4 <HAL_UART_IRQHandler+0x568>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d061      	beq.n	8009c4e <HAL_UART_IRQHandler+0x3e2>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a91      	ldr	r2, [pc, #580]	; (8009dd8 <HAL_UART_IRQHandler+0x56c>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d05a      	beq.n	8009c4e <HAL_UART_IRQHandler+0x3e2>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a8e      	ldr	r2, [pc, #568]	; (8009ddc <HAL_UART_IRQHandler+0x570>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d053      	beq.n	8009c4e <HAL_UART_IRQHandler+0x3e2>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a8c      	ldr	r2, [pc, #560]	; (8009de0 <HAL_UART_IRQHandler+0x574>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d04c      	beq.n	8009c4e <HAL_UART_IRQHandler+0x3e2>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a89      	ldr	r2, [pc, #548]	; (8009de4 <HAL_UART_IRQHandler+0x578>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d045      	beq.n	8009c4e <HAL_UART_IRQHandler+0x3e2>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a87      	ldr	r2, [pc, #540]	; (8009de8 <HAL_UART_IRQHandler+0x57c>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d03e      	beq.n	8009c4e <HAL_UART_IRQHandler+0x3e2>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a84      	ldr	r2, [pc, #528]	; (8009dec <HAL_UART_IRQHandler+0x580>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d037      	beq.n	8009c4e <HAL_UART_IRQHandler+0x3e2>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a82      	ldr	r2, [pc, #520]	; (8009df0 <HAL_UART_IRQHandler+0x584>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d030      	beq.n	8009c4e <HAL_UART_IRQHandler+0x3e2>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a7f      	ldr	r2, [pc, #508]	; (8009df4 <HAL_UART_IRQHandler+0x588>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d029      	beq.n	8009c4e <HAL_UART_IRQHandler+0x3e2>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a7d      	ldr	r2, [pc, #500]	; (8009df8 <HAL_UART_IRQHandler+0x58c>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d022      	beq.n	8009c4e <HAL_UART_IRQHandler+0x3e2>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a7a      	ldr	r2, [pc, #488]	; (8009dfc <HAL_UART_IRQHandler+0x590>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d01b      	beq.n	8009c4e <HAL_UART_IRQHandler+0x3e2>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a78      	ldr	r2, [pc, #480]	; (8009e00 <HAL_UART_IRQHandler+0x594>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d014      	beq.n	8009c4e <HAL_UART_IRQHandler+0x3e2>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a75      	ldr	r2, [pc, #468]	; (8009e04 <HAL_UART_IRQHandler+0x598>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d00d      	beq.n	8009c4e <HAL_UART_IRQHandler+0x3e2>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a73      	ldr	r2, [pc, #460]	; (8009e08 <HAL_UART_IRQHandler+0x59c>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d006      	beq.n	8009c4e <HAL_UART_IRQHandler+0x3e2>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a70      	ldr	r2, [pc, #448]	; (8009e0c <HAL_UART_IRQHandler+0x5a0>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d106      	bne.n	8009c5c <HAL_UART_IRQHandler+0x3f0>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	e005      	b.n	8009c68 <HAL_UART_IRQHandler+0x3fc>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f000 81ab 	beq.w	8009fcc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c80:	429a      	cmp	r2, r3
 8009c82:	f080 81a3 	bcs.w	8009fcc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c96:	69db      	ldr	r3, [r3, #28]
 8009c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c9c:	f000 8087 	beq.w	8009dae <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cac:	e853 3f00 	ldrex	r3, [r3]
 8009cb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009cb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009cb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009cca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009cce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009cd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009cda:	e841 2300 	strex	r3, r2, [r1]
 8009cde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009ce2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1da      	bne.n	8009ca0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	3308      	adds	r3, #8
 8009cf0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cf4:	e853 3f00 	ldrex	r3, [r3]
 8009cf8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009cfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cfc:	f023 0301 	bic.w	r3, r3, #1
 8009d00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	3308      	adds	r3, #8
 8009d0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009d0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009d12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009d16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009d1a:	e841 2300 	strex	r3, r2, [r1]
 8009d1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009d20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d1e1      	bne.n	8009cea <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	3308      	adds	r3, #8
 8009d2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d30:	e853 3f00 	ldrex	r3, [r3]
 8009d34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	3308      	adds	r3, #8
 8009d46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009d4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009d4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009d50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d52:	e841 2300 	strex	r3, r2, [r1]
 8009d56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009d58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d1e3      	bne.n	8009d26 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2220      	movs	r2, #32
 8009d62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d74:	e853 3f00 	ldrex	r3, [r3]
 8009d78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d7c:	f023 0310 	bic.w	r3, r3, #16
 8009d80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	461a      	mov	r2, r3
 8009d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d90:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d96:	e841 2300 	strex	r3, r2, [r1]
 8009d9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1e4      	bne.n	8009d6c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7f8 ff87 	bl	8002cbc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2202      	movs	r2, #2
 8009db2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	1ad3      	subs	r3, r2, r3
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 f91d 	bl	800a008 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009dce:	e0fd      	b.n	8009fcc <HAL_UART_IRQHandler+0x760>
 8009dd0:	40020010 	.word	0x40020010
 8009dd4:	40020028 	.word	0x40020028
 8009dd8:	40020040 	.word	0x40020040
 8009ddc:	40020058 	.word	0x40020058
 8009de0:	40020070 	.word	0x40020070
 8009de4:	40020088 	.word	0x40020088
 8009de8:	400200a0 	.word	0x400200a0
 8009dec:	400200b8 	.word	0x400200b8
 8009df0:	40020410 	.word	0x40020410
 8009df4:	40020428 	.word	0x40020428
 8009df8:	40020440 	.word	0x40020440
 8009dfc:	40020458 	.word	0x40020458
 8009e00:	40020470 	.word	0x40020470
 8009e04:	40020488 	.word	0x40020488
 8009e08:	400204a0 	.word	0x400204a0
 8009e0c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	1ad3      	subs	r3, r2, r3
 8009e20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f000 80cf 	beq.w	8009fd0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009e32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f000 80ca 	beq.w	8009fd0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e44:	e853 3f00 	ldrex	r3, [r3]
 8009e48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	461a      	mov	r2, r3
 8009e5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e5e:	647b      	str	r3, [r7, #68]	; 0x44
 8009e60:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e66:	e841 2300 	strex	r3, r2, [r1]
 8009e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1e4      	bne.n	8009e3c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	3308      	adds	r3, #8
 8009e78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7c:	e853 3f00 	ldrex	r3, [r3]
 8009e80:	623b      	str	r3, [r7, #32]
   return(result);
 8009e82:	6a3a      	ldr	r2, [r7, #32]
 8009e84:	4b55      	ldr	r3, [pc, #340]	; (8009fdc <HAL_UART_IRQHandler+0x770>)
 8009e86:	4013      	ands	r3, r2
 8009e88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	3308      	adds	r3, #8
 8009e92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009e96:	633a      	str	r2, [r7, #48]	; 0x30
 8009e98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e9e:	e841 2300 	strex	r3, r2, [r1]
 8009ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1e3      	bne.n	8009e72 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2220      	movs	r2, #32
 8009eae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	e853 3f00 	ldrex	r3, [r3]
 8009eca:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f023 0310 	bic.w	r3, r3, #16
 8009ed2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	461a      	mov	r2, r3
 8009edc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009ee0:	61fb      	str	r3, [r7, #28]
 8009ee2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee4:	69b9      	ldr	r1, [r7, #24]
 8009ee6:	69fa      	ldr	r2, [r7, #28]
 8009ee8:	e841 2300 	strex	r3, r2, [r1]
 8009eec:	617b      	str	r3, [r7, #20]
   return(result);
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1e4      	bne.n	8009ebe <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009efa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009efe:	4619      	mov	r1, r3
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 f881 	bl	800a008 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f06:	e063      	b.n	8009fd0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00e      	beq.n	8009f32 <HAL_UART_IRQHandler+0x6c6>
 8009f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d008      	beq.n	8009f32 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009f28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f001 ff7e 	bl	800be2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f30:	e051      	b.n	8009fd6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d014      	beq.n	8009f68 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d105      	bne.n	8009f56 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d008      	beq.n	8009f68 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d03a      	beq.n	8009fd4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	4798      	blx	r3
    }
    return;
 8009f66:	e035      	b.n	8009fd4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d009      	beq.n	8009f88 <HAL_UART_IRQHandler+0x71c>
 8009f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d003      	beq.n	8009f88 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f001 fa0b 	bl	800b39c <UART_EndTransmit_IT>
    return;
 8009f86:	e026      	b.n	8009fd6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d009      	beq.n	8009fa8 <HAL_UART_IRQHandler+0x73c>
 8009f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d003      	beq.n	8009fa8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f001 ff57 	bl	800be54 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fa6:	e016      	b.n	8009fd6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d010      	beq.n	8009fd6 <HAL_UART_IRQHandler+0x76a>
 8009fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	da0c      	bge.n	8009fd6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f001 ff3f 	bl	800be40 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fc2:	e008      	b.n	8009fd6 <HAL_UART_IRQHandler+0x76a>
      return;
 8009fc4:	bf00      	nop
 8009fc6:	e006      	b.n	8009fd6 <HAL_UART_IRQHandler+0x76a>
    return;
 8009fc8:	bf00      	nop
 8009fca:	e004      	b.n	8009fd6 <HAL_UART_IRQHandler+0x76a>
      return;
 8009fcc:	bf00      	nop
 8009fce:	e002      	b.n	8009fd6 <HAL_UART_IRQHandler+0x76a>
      return;
 8009fd0:	bf00      	nop
 8009fd2:	e000      	b.n	8009fd6 <HAL_UART_IRQHandler+0x76a>
    return;
 8009fd4:	bf00      	nop
  }
}
 8009fd6:	37e8      	adds	r7, #232	; 0xe8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	effffffe 	.word	0xeffffffe

08009fe0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009fe8:	bf00      	nop
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ffc:	bf00      	nop
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	460b      	mov	r3, r1
 800a012:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a014:	bf00      	nop
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a024:	b092      	sub	sp, #72	; 0x48
 800a026:	af00      	add	r7, sp, #0
 800a028:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	689a      	ldr	r2, [r3, #8]
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	691b      	ldr	r3, [r3, #16]
 800a038:	431a      	orrs	r2, r3
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	695b      	ldr	r3, [r3, #20]
 800a03e:	431a      	orrs	r2, r3
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	69db      	ldr	r3, [r3, #28]
 800a044:	4313      	orrs	r3, r2
 800a046:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	4bbe      	ldr	r3, [pc, #760]	; (800a348 <UART_SetConfig+0x328>)
 800a050:	4013      	ands	r3, r2
 800a052:	697a      	ldr	r2, [r7, #20]
 800a054:	6812      	ldr	r2, [r2, #0]
 800a056:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a058:	430b      	orrs	r3, r1
 800a05a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	68da      	ldr	r2, [r3, #12]
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	430a      	orrs	r2, r1
 800a070:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	699b      	ldr	r3, [r3, #24]
 800a076:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4ab3      	ldr	r2, [pc, #716]	; (800a34c <UART_SetConfig+0x32c>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d004      	beq.n	800a08c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	6a1b      	ldr	r3, [r3, #32]
 800a086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a088:	4313      	orrs	r3, r2
 800a08a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	689a      	ldr	r2, [r3, #8]
 800a092:	4baf      	ldr	r3, [pc, #700]	; (800a350 <UART_SetConfig+0x330>)
 800a094:	4013      	ands	r3, r2
 800a096:	697a      	ldr	r2, [r7, #20]
 800a098:	6812      	ldr	r2, [r2, #0]
 800a09a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a09c:	430b      	orrs	r3, r1
 800a09e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a6:	f023 010f 	bic.w	r1, r3, #15
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	430a      	orrs	r2, r1
 800a0b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4aa6      	ldr	r2, [pc, #664]	; (800a354 <UART_SetConfig+0x334>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d177      	bne.n	800a1b0 <UART_SetConfig+0x190>
 800a0c0:	4ba5      	ldr	r3, [pc, #660]	; (800a358 <UART_SetConfig+0x338>)
 800a0c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0c8:	2b28      	cmp	r3, #40	; 0x28
 800a0ca:	d86d      	bhi.n	800a1a8 <UART_SetConfig+0x188>
 800a0cc:	a201      	add	r2, pc, #4	; (adr r2, 800a0d4 <UART_SetConfig+0xb4>)
 800a0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d2:	bf00      	nop
 800a0d4:	0800a179 	.word	0x0800a179
 800a0d8:	0800a1a9 	.word	0x0800a1a9
 800a0dc:	0800a1a9 	.word	0x0800a1a9
 800a0e0:	0800a1a9 	.word	0x0800a1a9
 800a0e4:	0800a1a9 	.word	0x0800a1a9
 800a0e8:	0800a1a9 	.word	0x0800a1a9
 800a0ec:	0800a1a9 	.word	0x0800a1a9
 800a0f0:	0800a1a9 	.word	0x0800a1a9
 800a0f4:	0800a181 	.word	0x0800a181
 800a0f8:	0800a1a9 	.word	0x0800a1a9
 800a0fc:	0800a1a9 	.word	0x0800a1a9
 800a100:	0800a1a9 	.word	0x0800a1a9
 800a104:	0800a1a9 	.word	0x0800a1a9
 800a108:	0800a1a9 	.word	0x0800a1a9
 800a10c:	0800a1a9 	.word	0x0800a1a9
 800a110:	0800a1a9 	.word	0x0800a1a9
 800a114:	0800a189 	.word	0x0800a189
 800a118:	0800a1a9 	.word	0x0800a1a9
 800a11c:	0800a1a9 	.word	0x0800a1a9
 800a120:	0800a1a9 	.word	0x0800a1a9
 800a124:	0800a1a9 	.word	0x0800a1a9
 800a128:	0800a1a9 	.word	0x0800a1a9
 800a12c:	0800a1a9 	.word	0x0800a1a9
 800a130:	0800a1a9 	.word	0x0800a1a9
 800a134:	0800a191 	.word	0x0800a191
 800a138:	0800a1a9 	.word	0x0800a1a9
 800a13c:	0800a1a9 	.word	0x0800a1a9
 800a140:	0800a1a9 	.word	0x0800a1a9
 800a144:	0800a1a9 	.word	0x0800a1a9
 800a148:	0800a1a9 	.word	0x0800a1a9
 800a14c:	0800a1a9 	.word	0x0800a1a9
 800a150:	0800a1a9 	.word	0x0800a1a9
 800a154:	0800a199 	.word	0x0800a199
 800a158:	0800a1a9 	.word	0x0800a1a9
 800a15c:	0800a1a9 	.word	0x0800a1a9
 800a160:	0800a1a9 	.word	0x0800a1a9
 800a164:	0800a1a9 	.word	0x0800a1a9
 800a168:	0800a1a9 	.word	0x0800a1a9
 800a16c:	0800a1a9 	.word	0x0800a1a9
 800a170:	0800a1a9 	.word	0x0800a1a9
 800a174:	0800a1a1 	.word	0x0800a1a1
 800a178:	2301      	movs	r3, #1
 800a17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a17e:	e326      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a180:	2304      	movs	r3, #4
 800a182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a186:	e322      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a188:	2308      	movs	r3, #8
 800a18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a18e:	e31e      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a190:	2310      	movs	r3, #16
 800a192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a196:	e31a      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a198:	2320      	movs	r3, #32
 800a19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a19e:	e316      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a1a0:	2340      	movs	r3, #64	; 0x40
 800a1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1a6:	e312      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a1a8:	2380      	movs	r3, #128	; 0x80
 800a1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ae:	e30e      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a69      	ldr	r2, [pc, #420]	; (800a35c <UART_SetConfig+0x33c>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d130      	bne.n	800a21c <UART_SetConfig+0x1fc>
 800a1ba:	4b67      	ldr	r3, [pc, #412]	; (800a358 <UART_SetConfig+0x338>)
 800a1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1be:	f003 0307 	and.w	r3, r3, #7
 800a1c2:	2b05      	cmp	r3, #5
 800a1c4:	d826      	bhi.n	800a214 <UART_SetConfig+0x1f4>
 800a1c6:	a201      	add	r2, pc, #4	; (adr r2, 800a1cc <UART_SetConfig+0x1ac>)
 800a1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1cc:	0800a1e5 	.word	0x0800a1e5
 800a1d0:	0800a1ed 	.word	0x0800a1ed
 800a1d4:	0800a1f5 	.word	0x0800a1f5
 800a1d8:	0800a1fd 	.word	0x0800a1fd
 800a1dc:	0800a205 	.word	0x0800a205
 800a1e0:	0800a20d 	.word	0x0800a20d
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ea:	e2f0      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a1ec:	2304      	movs	r3, #4
 800a1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1f2:	e2ec      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a1f4:	2308      	movs	r3, #8
 800a1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1fa:	e2e8      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a1fc:	2310      	movs	r3, #16
 800a1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a202:	e2e4      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a204:	2320      	movs	r3, #32
 800a206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a20a:	e2e0      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a20c:	2340      	movs	r3, #64	; 0x40
 800a20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a212:	e2dc      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a214:	2380      	movs	r3, #128	; 0x80
 800a216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a21a:	e2d8      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a4f      	ldr	r2, [pc, #316]	; (800a360 <UART_SetConfig+0x340>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d130      	bne.n	800a288 <UART_SetConfig+0x268>
 800a226:	4b4c      	ldr	r3, [pc, #304]	; (800a358 <UART_SetConfig+0x338>)
 800a228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a22a:	f003 0307 	and.w	r3, r3, #7
 800a22e:	2b05      	cmp	r3, #5
 800a230:	d826      	bhi.n	800a280 <UART_SetConfig+0x260>
 800a232:	a201      	add	r2, pc, #4	; (adr r2, 800a238 <UART_SetConfig+0x218>)
 800a234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a238:	0800a251 	.word	0x0800a251
 800a23c:	0800a259 	.word	0x0800a259
 800a240:	0800a261 	.word	0x0800a261
 800a244:	0800a269 	.word	0x0800a269
 800a248:	0800a271 	.word	0x0800a271
 800a24c:	0800a279 	.word	0x0800a279
 800a250:	2300      	movs	r3, #0
 800a252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a256:	e2ba      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a258:	2304      	movs	r3, #4
 800a25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a25e:	e2b6      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a260:	2308      	movs	r3, #8
 800a262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a266:	e2b2      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a268:	2310      	movs	r3, #16
 800a26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a26e:	e2ae      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a270:	2320      	movs	r3, #32
 800a272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a276:	e2aa      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a278:	2340      	movs	r3, #64	; 0x40
 800a27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a27e:	e2a6      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a280:	2380      	movs	r3, #128	; 0x80
 800a282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a286:	e2a2      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a35      	ldr	r2, [pc, #212]	; (800a364 <UART_SetConfig+0x344>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d130      	bne.n	800a2f4 <UART_SetConfig+0x2d4>
 800a292:	4b31      	ldr	r3, [pc, #196]	; (800a358 <UART_SetConfig+0x338>)
 800a294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a296:	f003 0307 	and.w	r3, r3, #7
 800a29a:	2b05      	cmp	r3, #5
 800a29c:	d826      	bhi.n	800a2ec <UART_SetConfig+0x2cc>
 800a29e:	a201      	add	r2, pc, #4	; (adr r2, 800a2a4 <UART_SetConfig+0x284>)
 800a2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a4:	0800a2bd 	.word	0x0800a2bd
 800a2a8:	0800a2c5 	.word	0x0800a2c5
 800a2ac:	0800a2cd 	.word	0x0800a2cd
 800a2b0:	0800a2d5 	.word	0x0800a2d5
 800a2b4:	0800a2dd 	.word	0x0800a2dd
 800a2b8:	0800a2e5 	.word	0x0800a2e5
 800a2bc:	2300      	movs	r3, #0
 800a2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2c2:	e284      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a2c4:	2304      	movs	r3, #4
 800a2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ca:	e280      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a2cc:	2308      	movs	r3, #8
 800a2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2d2:	e27c      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a2d4:	2310      	movs	r3, #16
 800a2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2da:	e278      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a2dc:	2320      	movs	r3, #32
 800a2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2e2:	e274      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a2e4:	2340      	movs	r3, #64	; 0x40
 800a2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ea:	e270      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a2ec:	2380      	movs	r3, #128	; 0x80
 800a2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2f2:	e26c      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a1b      	ldr	r2, [pc, #108]	; (800a368 <UART_SetConfig+0x348>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d142      	bne.n	800a384 <UART_SetConfig+0x364>
 800a2fe:	4b16      	ldr	r3, [pc, #88]	; (800a358 <UART_SetConfig+0x338>)
 800a300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a302:	f003 0307 	and.w	r3, r3, #7
 800a306:	2b05      	cmp	r3, #5
 800a308:	d838      	bhi.n	800a37c <UART_SetConfig+0x35c>
 800a30a:	a201      	add	r2, pc, #4	; (adr r2, 800a310 <UART_SetConfig+0x2f0>)
 800a30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a310:	0800a329 	.word	0x0800a329
 800a314:	0800a331 	.word	0x0800a331
 800a318:	0800a339 	.word	0x0800a339
 800a31c:	0800a341 	.word	0x0800a341
 800a320:	0800a36d 	.word	0x0800a36d
 800a324:	0800a375 	.word	0x0800a375
 800a328:	2300      	movs	r3, #0
 800a32a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a32e:	e24e      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a330:	2304      	movs	r3, #4
 800a332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a336:	e24a      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a338:	2308      	movs	r3, #8
 800a33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a33e:	e246      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a340:	2310      	movs	r3, #16
 800a342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a346:	e242      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a348:	cfff69f3 	.word	0xcfff69f3
 800a34c:	58000c00 	.word	0x58000c00
 800a350:	11fff4ff 	.word	0x11fff4ff
 800a354:	40011000 	.word	0x40011000
 800a358:	58024400 	.word	0x58024400
 800a35c:	40004400 	.word	0x40004400
 800a360:	40004800 	.word	0x40004800
 800a364:	40004c00 	.word	0x40004c00
 800a368:	40005000 	.word	0x40005000
 800a36c:	2320      	movs	r3, #32
 800a36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a372:	e22c      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a374:	2340      	movs	r3, #64	; 0x40
 800a376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a37a:	e228      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a37c:	2380      	movs	r3, #128	; 0x80
 800a37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a382:	e224      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4ab1      	ldr	r2, [pc, #708]	; (800a650 <UART_SetConfig+0x630>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d176      	bne.n	800a47c <UART_SetConfig+0x45c>
 800a38e:	4bb1      	ldr	r3, [pc, #708]	; (800a654 <UART_SetConfig+0x634>)
 800a390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a392:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a396:	2b28      	cmp	r3, #40	; 0x28
 800a398:	d86c      	bhi.n	800a474 <UART_SetConfig+0x454>
 800a39a:	a201      	add	r2, pc, #4	; (adr r2, 800a3a0 <UART_SetConfig+0x380>)
 800a39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a0:	0800a445 	.word	0x0800a445
 800a3a4:	0800a475 	.word	0x0800a475
 800a3a8:	0800a475 	.word	0x0800a475
 800a3ac:	0800a475 	.word	0x0800a475
 800a3b0:	0800a475 	.word	0x0800a475
 800a3b4:	0800a475 	.word	0x0800a475
 800a3b8:	0800a475 	.word	0x0800a475
 800a3bc:	0800a475 	.word	0x0800a475
 800a3c0:	0800a44d 	.word	0x0800a44d
 800a3c4:	0800a475 	.word	0x0800a475
 800a3c8:	0800a475 	.word	0x0800a475
 800a3cc:	0800a475 	.word	0x0800a475
 800a3d0:	0800a475 	.word	0x0800a475
 800a3d4:	0800a475 	.word	0x0800a475
 800a3d8:	0800a475 	.word	0x0800a475
 800a3dc:	0800a475 	.word	0x0800a475
 800a3e0:	0800a455 	.word	0x0800a455
 800a3e4:	0800a475 	.word	0x0800a475
 800a3e8:	0800a475 	.word	0x0800a475
 800a3ec:	0800a475 	.word	0x0800a475
 800a3f0:	0800a475 	.word	0x0800a475
 800a3f4:	0800a475 	.word	0x0800a475
 800a3f8:	0800a475 	.word	0x0800a475
 800a3fc:	0800a475 	.word	0x0800a475
 800a400:	0800a45d 	.word	0x0800a45d
 800a404:	0800a475 	.word	0x0800a475
 800a408:	0800a475 	.word	0x0800a475
 800a40c:	0800a475 	.word	0x0800a475
 800a410:	0800a475 	.word	0x0800a475
 800a414:	0800a475 	.word	0x0800a475
 800a418:	0800a475 	.word	0x0800a475
 800a41c:	0800a475 	.word	0x0800a475
 800a420:	0800a465 	.word	0x0800a465
 800a424:	0800a475 	.word	0x0800a475
 800a428:	0800a475 	.word	0x0800a475
 800a42c:	0800a475 	.word	0x0800a475
 800a430:	0800a475 	.word	0x0800a475
 800a434:	0800a475 	.word	0x0800a475
 800a438:	0800a475 	.word	0x0800a475
 800a43c:	0800a475 	.word	0x0800a475
 800a440:	0800a46d 	.word	0x0800a46d
 800a444:	2301      	movs	r3, #1
 800a446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a44a:	e1c0      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a44c:	2304      	movs	r3, #4
 800a44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a452:	e1bc      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a454:	2308      	movs	r3, #8
 800a456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a45a:	e1b8      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a45c:	2310      	movs	r3, #16
 800a45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a462:	e1b4      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a464:	2320      	movs	r3, #32
 800a466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a46a:	e1b0      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a46c:	2340      	movs	r3, #64	; 0x40
 800a46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a472:	e1ac      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a474:	2380      	movs	r3, #128	; 0x80
 800a476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a47a:	e1a8      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a75      	ldr	r2, [pc, #468]	; (800a658 <UART_SetConfig+0x638>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d130      	bne.n	800a4e8 <UART_SetConfig+0x4c8>
 800a486:	4b73      	ldr	r3, [pc, #460]	; (800a654 <UART_SetConfig+0x634>)
 800a488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a48a:	f003 0307 	and.w	r3, r3, #7
 800a48e:	2b05      	cmp	r3, #5
 800a490:	d826      	bhi.n	800a4e0 <UART_SetConfig+0x4c0>
 800a492:	a201      	add	r2, pc, #4	; (adr r2, 800a498 <UART_SetConfig+0x478>)
 800a494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a498:	0800a4b1 	.word	0x0800a4b1
 800a49c:	0800a4b9 	.word	0x0800a4b9
 800a4a0:	0800a4c1 	.word	0x0800a4c1
 800a4a4:	0800a4c9 	.word	0x0800a4c9
 800a4a8:	0800a4d1 	.word	0x0800a4d1
 800a4ac:	0800a4d9 	.word	0x0800a4d9
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4b6:	e18a      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a4b8:	2304      	movs	r3, #4
 800a4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4be:	e186      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a4c0:	2308      	movs	r3, #8
 800a4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4c6:	e182      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a4c8:	2310      	movs	r3, #16
 800a4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ce:	e17e      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a4d0:	2320      	movs	r3, #32
 800a4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4d6:	e17a      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a4d8:	2340      	movs	r3, #64	; 0x40
 800a4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4de:	e176      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a4e0:	2380      	movs	r3, #128	; 0x80
 800a4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4e6:	e172      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a5b      	ldr	r2, [pc, #364]	; (800a65c <UART_SetConfig+0x63c>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d130      	bne.n	800a554 <UART_SetConfig+0x534>
 800a4f2:	4b58      	ldr	r3, [pc, #352]	; (800a654 <UART_SetConfig+0x634>)
 800a4f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4f6:	f003 0307 	and.w	r3, r3, #7
 800a4fa:	2b05      	cmp	r3, #5
 800a4fc:	d826      	bhi.n	800a54c <UART_SetConfig+0x52c>
 800a4fe:	a201      	add	r2, pc, #4	; (adr r2, 800a504 <UART_SetConfig+0x4e4>)
 800a500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a504:	0800a51d 	.word	0x0800a51d
 800a508:	0800a525 	.word	0x0800a525
 800a50c:	0800a52d 	.word	0x0800a52d
 800a510:	0800a535 	.word	0x0800a535
 800a514:	0800a53d 	.word	0x0800a53d
 800a518:	0800a545 	.word	0x0800a545
 800a51c:	2300      	movs	r3, #0
 800a51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a522:	e154      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a524:	2304      	movs	r3, #4
 800a526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a52a:	e150      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a52c:	2308      	movs	r3, #8
 800a52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a532:	e14c      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a534:	2310      	movs	r3, #16
 800a536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a53a:	e148      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a53c:	2320      	movs	r3, #32
 800a53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a542:	e144      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a544:	2340      	movs	r3, #64	; 0x40
 800a546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a54a:	e140      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a54c:	2380      	movs	r3, #128	; 0x80
 800a54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a552:	e13c      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a41      	ldr	r2, [pc, #260]	; (800a660 <UART_SetConfig+0x640>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	f040 8082 	bne.w	800a664 <UART_SetConfig+0x644>
 800a560:	4b3c      	ldr	r3, [pc, #240]	; (800a654 <UART_SetConfig+0x634>)
 800a562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a564:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a568:	2b28      	cmp	r3, #40	; 0x28
 800a56a:	d86d      	bhi.n	800a648 <UART_SetConfig+0x628>
 800a56c:	a201      	add	r2, pc, #4	; (adr r2, 800a574 <UART_SetConfig+0x554>)
 800a56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a572:	bf00      	nop
 800a574:	0800a619 	.word	0x0800a619
 800a578:	0800a649 	.word	0x0800a649
 800a57c:	0800a649 	.word	0x0800a649
 800a580:	0800a649 	.word	0x0800a649
 800a584:	0800a649 	.word	0x0800a649
 800a588:	0800a649 	.word	0x0800a649
 800a58c:	0800a649 	.word	0x0800a649
 800a590:	0800a649 	.word	0x0800a649
 800a594:	0800a621 	.word	0x0800a621
 800a598:	0800a649 	.word	0x0800a649
 800a59c:	0800a649 	.word	0x0800a649
 800a5a0:	0800a649 	.word	0x0800a649
 800a5a4:	0800a649 	.word	0x0800a649
 800a5a8:	0800a649 	.word	0x0800a649
 800a5ac:	0800a649 	.word	0x0800a649
 800a5b0:	0800a649 	.word	0x0800a649
 800a5b4:	0800a629 	.word	0x0800a629
 800a5b8:	0800a649 	.word	0x0800a649
 800a5bc:	0800a649 	.word	0x0800a649
 800a5c0:	0800a649 	.word	0x0800a649
 800a5c4:	0800a649 	.word	0x0800a649
 800a5c8:	0800a649 	.word	0x0800a649
 800a5cc:	0800a649 	.word	0x0800a649
 800a5d0:	0800a649 	.word	0x0800a649
 800a5d4:	0800a631 	.word	0x0800a631
 800a5d8:	0800a649 	.word	0x0800a649
 800a5dc:	0800a649 	.word	0x0800a649
 800a5e0:	0800a649 	.word	0x0800a649
 800a5e4:	0800a649 	.word	0x0800a649
 800a5e8:	0800a649 	.word	0x0800a649
 800a5ec:	0800a649 	.word	0x0800a649
 800a5f0:	0800a649 	.word	0x0800a649
 800a5f4:	0800a639 	.word	0x0800a639
 800a5f8:	0800a649 	.word	0x0800a649
 800a5fc:	0800a649 	.word	0x0800a649
 800a600:	0800a649 	.word	0x0800a649
 800a604:	0800a649 	.word	0x0800a649
 800a608:	0800a649 	.word	0x0800a649
 800a60c:	0800a649 	.word	0x0800a649
 800a610:	0800a649 	.word	0x0800a649
 800a614:	0800a641 	.word	0x0800a641
 800a618:	2301      	movs	r3, #1
 800a61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a61e:	e0d6      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a620:	2304      	movs	r3, #4
 800a622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a626:	e0d2      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a628:	2308      	movs	r3, #8
 800a62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a62e:	e0ce      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a630:	2310      	movs	r3, #16
 800a632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a636:	e0ca      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a638:	2320      	movs	r3, #32
 800a63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a63e:	e0c6      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a640:	2340      	movs	r3, #64	; 0x40
 800a642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a646:	e0c2      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a648:	2380      	movs	r3, #128	; 0x80
 800a64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a64e:	e0be      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a650:	40011400 	.word	0x40011400
 800a654:	58024400 	.word	0x58024400
 800a658:	40007800 	.word	0x40007800
 800a65c:	40007c00 	.word	0x40007c00
 800a660:	40011800 	.word	0x40011800
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4aad      	ldr	r2, [pc, #692]	; (800a920 <UART_SetConfig+0x900>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d176      	bne.n	800a75c <UART_SetConfig+0x73c>
 800a66e:	4bad      	ldr	r3, [pc, #692]	; (800a924 <UART_SetConfig+0x904>)
 800a670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a672:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a676:	2b28      	cmp	r3, #40	; 0x28
 800a678:	d86c      	bhi.n	800a754 <UART_SetConfig+0x734>
 800a67a:	a201      	add	r2, pc, #4	; (adr r2, 800a680 <UART_SetConfig+0x660>)
 800a67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a680:	0800a725 	.word	0x0800a725
 800a684:	0800a755 	.word	0x0800a755
 800a688:	0800a755 	.word	0x0800a755
 800a68c:	0800a755 	.word	0x0800a755
 800a690:	0800a755 	.word	0x0800a755
 800a694:	0800a755 	.word	0x0800a755
 800a698:	0800a755 	.word	0x0800a755
 800a69c:	0800a755 	.word	0x0800a755
 800a6a0:	0800a72d 	.word	0x0800a72d
 800a6a4:	0800a755 	.word	0x0800a755
 800a6a8:	0800a755 	.word	0x0800a755
 800a6ac:	0800a755 	.word	0x0800a755
 800a6b0:	0800a755 	.word	0x0800a755
 800a6b4:	0800a755 	.word	0x0800a755
 800a6b8:	0800a755 	.word	0x0800a755
 800a6bc:	0800a755 	.word	0x0800a755
 800a6c0:	0800a735 	.word	0x0800a735
 800a6c4:	0800a755 	.word	0x0800a755
 800a6c8:	0800a755 	.word	0x0800a755
 800a6cc:	0800a755 	.word	0x0800a755
 800a6d0:	0800a755 	.word	0x0800a755
 800a6d4:	0800a755 	.word	0x0800a755
 800a6d8:	0800a755 	.word	0x0800a755
 800a6dc:	0800a755 	.word	0x0800a755
 800a6e0:	0800a73d 	.word	0x0800a73d
 800a6e4:	0800a755 	.word	0x0800a755
 800a6e8:	0800a755 	.word	0x0800a755
 800a6ec:	0800a755 	.word	0x0800a755
 800a6f0:	0800a755 	.word	0x0800a755
 800a6f4:	0800a755 	.word	0x0800a755
 800a6f8:	0800a755 	.word	0x0800a755
 800a6fc:	0800a755 	.word	0x0800a755
 800a700:	0800a745 	.word	0x0800a745
 800a704:	0800a755 	.word	0x0800a755
 800a708:	0800a755 	.word	0x0800a755
 800a70c:	0800a755 	.word	0x0800a755
 800a710:	0800a755 	.word	0x0800a755
 800a714:	0800a755 	.word	0x0800a755
 800a718:	0800a755 	.word	0x0800a755
 800a71c:	0800a755 	.word	0x0800a755
 800a720:	0800a74d 	.word	0x0800a74d
 800a724:	2301      	movs	r3, #1
 800a726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a72a:	e050      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a72c:	2304      	movs	r3, #4
 800a72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a732:	e04c      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a734:	2308      	movs	r3, #8
 800a736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a73a:	e048      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a73c:	2310      	movs	r3, #16
 800a73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a742:	e044      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a744:	2320      	movs	r3, #32
 800a746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a74a:	e040      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a74c:	2340      	movs	r3, #64	; 0x40
 800a74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a752:	e03c      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a754:	2380      	movs	r3, #128	; 0x80
 800a756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a75a:	e038      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a71      	ldr	r2, [pc, #452]	; (800a928 <UART_SetConfig+0x908>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d130      	bne.n	800a7c8 <UART_SetConfig+0x7a8>
 800a766:	4b6f      	ldr	r3, [pc, #444]	; (800a924 <UART_SetConfig+0x904>)
 800a768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a76a:	f003 0307 	and.w	r3, r3, #7
 800a76e:	2b05      	cmp	r3, #5
 800a770:	d826      	bhi.n	800a7c0 <UART_SetConfig+0x7a0>
 800a772:	a201      	add	r2, pc, #4	; (adr r2, 800a778 <UART_SetConfig+0x758>)
 800a774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a778:	0800a791 	.word	0x0800a791
 800a77c:	0800a799 	.word	0x0800a799
 800a780:	0800a7a1 	.word	0x0800a7a1
 800a784:	0800a7a9 	.word	0x0800a7a9
 800a788:	0800a7b1 	.word	0x0800a7b1
 800a78c:	0800a7b9 	.word	0x0800a7b9
 800a790:	2302      	movs	r3, #2
 800a792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a796:	e01a      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a798:	2304      	movs	r3, #4
 800a79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a79e:	e016      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a7a0:	2308      	movs	r3, #8
 800a7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7a6:	e012      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a7a8:	2310      	movs	r3, #16
 800a7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ae:	e00e      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a7b0:	2320      	movs	r3, #32
 800a7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7b6:	e00a      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a7b8:	2340      	movs	r3, #64	; 0x40
 800a7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7be:	e006      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a7c0:	2380      	movs	r3, #128	; 0x80
 800a7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7c6:	e002      	b.n	800a7ce <UART_SetConfig+0x7ae>
 800a7c8:	2380      	movs	r3, #128	; 0x80
 800a7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a55      	ldr	r2, [pc, #340]	; (800a928 <UART_SetConfig+0x908>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	f040 80f8 	bne.w	800a9ca <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a7da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a7de:	2b20      	cmp	r3, #32
 800a7e0:	dc46      	bgt.n	800a870 <UART_SetConfig+0x850>
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	db75      	blt.n	800a8d2 <UART_SetConfig+0x8b2>
 800a7e6:	3b02      	subs	r3, #2
 800a7e8:	2b1e      	cmp	r3, #30
 800a7ea:	d872      	bhi.n	800a8d2 <UART_SetConfig+0x8b2>
 800a7ec:	a201      	add	r2, pc, #4	; (adr r2, 800a7f4 <UART_SetConfig+0x7d4>)
 800a7ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f2:	bf00      	nop
 800a7f4:	0800a877 	.word	0x0800a877
 800a7f8:	0800a8d3 	.word	0x0800a8d3
 800a7fc:	0800a87f 	.word	0x0800a87f
 800a800:	0800a8d3 	.word	0x0800a8d3
 800a804:	0800a8d3 	.word	0x0800a8d3
 800a808:	0800a8d3 	.word	0x0800a8d3
 800a80c:	0800a88f 	.word	0x0800a88f
 800a810:	0800a8d3 	.word	0x0800a8d3
 800a814:	0800a8d3 	.word	0x0800a8d3
 800a818:	0800a8d3 	.word	0x0800a8d3
 800a81c:	0800a8d3 	.word	0x0800a8d3
 800a820:	0800a8d3 	.word	0x0800a8d3
 800a824:	0800a8d3 	.word	0x0800a8d3
 800a828:	0800a8d3 	.word	0x0800a8d3
 800a82c:	0800a89f 	.word	0x0800a89f
 800a830:	0800a8d3 	.word	0x0800a8d3
 800a834:	0800a8d3 	.word	0x0800a8d3
 800a838:	0800a8d3 	.word	0x0800a8d3
 800a83c:	0800a8d3 	.word	0x0800a8d3
 800a840:	0800a8d3 	.word	0x0800a8d3
 800a844:	0800a8d3 	.word	0x0800a8d3
 800a848:	0800a8d3 	.word	0x0800a8d3
 800a84c:	0800a8d3 	.word	0x0800a8d3
 800a850:	0800a8d3 	.word	0x0800a8d3
 800a854:	0800a8d3 	.word	0x0800a8d3
 800a858:	0800a8d3 	.word	0x0800a8d3
 800a85c:	0800a8d3 	.word	0x0800a8d3
 800a860:	0800a8d3 	.word	0x0800a8d3
 800a864:	0800a8d3 	.word	0x0800a8d3
 800a868:	0800a8d3 	.word	0x0800a8d3
 800a86c:	0800a8c5 	.word	0x0800a8c5
 800a870:	2b40      	cmp	r3, #64	; 0x40
 800a872:	d02a      	beq.n	800a8ca <UART_SetConfig+0x8aa>
 800a874:	e02d      	b.n	800a8d2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a876:	f7fc fde7 	bl	8007448 <HAL_RCCEx_GetD3PCLK1Freq>
 800a87a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a87c:	e02f      	b.n	800a8de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a87e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a882:	4618      	mov	r0, r3
 800a884:	f7fc fdf6 	bl	8007474 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a88c:	e027      	b.n	800a8de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a88e:	f107 0318 	add.w	r3, r7, #24
 800a892:	4618      	mov	r0, r3
 800a894:	f7fc ff42 	bl	800771c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a89c:	e01f      	b.n	800a8de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a89e:	4b21      	ldr	r3, [pc, #132]	; (800a924 <UART_SetConfig+0x904>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f003 0320 	and.w	r3, r3, #32
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d009      	beq.n	800a8be <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8aa:	4b1e      	ldr	r3, [pc, #120]	; (800a924 <UART_SetConfig+0x904>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	08db      	lsrs	r3, r3, #3
 800a8b0:	f003 0303 	and.w	r3, r3, #3
 800a8b4:	4a1d      	ldr	r2, [pc, #116]	; (800a92c <UART_SetConfig+0x90c>)
 800a8b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8bc:	e00f      	b.n	800a8de <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a8be:	4b1b      	ldr	r3, [pc, #108]	; (800a92c <UART_SetConfig+0x90c>)
 800a8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8c2:	e00c      	b.n	800a8de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8c4:	4b1a      	ldr	r3, [pc, #104]	; (800a930 <UART_SetConfig+0x910>)
 800a8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8c8:	e009      	b.n	800a8de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8d0:	e005      	b.n	800a8de <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a8dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a8de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f000 81ee 	beq.w	800acc2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ea:	4a12      	ldr	r2, [pc, #72]	; (800a934 <UART_SetConfig+0x914>)
 800a8ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8f8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	685a      	ldr	r2, [r3, #4]
 800a8fe:	4613      	mov	r3, r2
 800a900:	005b      	lsls	r3, r3, #1
 800a902:	4413      	add	r3, r2
 800a904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a906:	429a      	cmp	r2, r3
 800a908:	d305      	bcc.n	800a916 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a912:	429a      	cmp	r2, r3
 800a914:	d910      	bls.n	800a938 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a91c:	e1d1      	b.n	800acc2 <UART_SetConfig+0xca2>
 800a91e:	bf00      	nop
 800a920:	40011c00 	.word	0x40011c00
 800a924:	58024400 	.word	0x58024400
 800a928:	58000c00 	.word	0x58000c00
 800a92c:	03d09000 	.word	0x03d09000
 800a930:	003d0900 	.word	0x003d0900
 800a934:	08013040 	.word	0x08013040
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a93a:	2200      	movs	r2, #0
 800a93c:	60bb      	str	r3, [r7, #8]
 800a93e:	60fa      	str	r2, [r7, #12]
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a944:	4ac0      	ldr	r2, [pc, #768]	; (800ac48 <UART_SetConfig+0xc28>)
 800a946:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	2200      	movs	r2, #0
 800a94e:	603b      	str	r3, [r7, #0]
 800a950:	607a      	str	r2, [r7, #4]
 800a952:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a956:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a95a:	f7f5 fd29 	bl	80003b0 <__aeabi_uldivmod>
 800a95e:	4602      	mov	r2, r0
 800a960:	460b      	mov	r3, r1
 800a962:	4610      	mov	r0, r2
 800a964:	4619      	mov	r1, r3
 800a966:	f04f 0200 	mov.w	r2, #0
 800a96a:	f04f 0300 	mov.w	r3, #0
 800a96e:	020b      	lsls	r3, r1, #8
 800a970:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a974:	0202      	lsls	r2, r0, #8
 800a976:	6979      	ldr	r1, [r7, #20]
 800a978:	6849      	ldr	r1, [r1, #4]
 800a97a:	0849      	lsrs	r1, r1, #1
 800a97c:	2000      	movs	r0, #0
 800a97e:	460c      	mov	r4, r1
 800a980:	4605      	mov	r5, r0
 800a982:	eb12 0804 	adds.w	r8, r2, r4
 800a986:	eb43 0905 	adc.w	r9, r3, r5
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	469a      	mov	sl, r3
 800a992:	4693      	mov	fp, r2
 800a994:	4652      	mov	r2, sl
 800a996:	465b      	mov	r3, fp
 800a998:	4640      	mov	r0, r8
 800a99a:	4649      	mov	r1, r9
 800a99c:	f7f5 fd08 	bl	80003b0 <__aeabi_uldivmod>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9ae:	d308      	bcc.n	800a9c2 <UART_SetConfig+0x9a2>
 800a9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9b6:	d204      	bcs.n	800a9c2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9be:	60da      	str	r2, [r3, #12]
 800a9c0:	e17f      	b.n	800acc2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a9c8:	e17b      	b.n	800acc2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	69db      	ldr	r3, [r3, #28]
 800a9ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9d2:	f040 80bd 	bne.w	800ab50 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a9d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a9da:	2b20      	cmp	r3, #32
 800a9dc:	dc48      	bgt.n	800aa70 <UART_SetConfig+0xa50>
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	db7b      	blt.n	800aada <UART_SetConfig+0xaba>
 800a9e2:	2b20      	cmp	r3, #32
 800a9e4:	d879      	bhi.n	800aada <UART_SetConfig+0xaba>
 800a9e6:	a201      	add	r2, pc, #4	; (adr r2, 800a9ec <UART_SetConfig+0x9cc>)
 800a9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ec:	0800aa77 	.word	0x0800aa77
 800a9f0:	0800aa7f 	.word	0x0800aa7f
 800a9f4:	0800aadb 	.word	0x0800aadb
 800a9f8:	0800aadb 	.word	0x0800aadb
 800a9fc:	0800aa87 	.word	0x0800aa87
 800aa00:	0800aadb 	.word	0x0800aadb
 800aa04:	0800aadb 	.word	0x0800aadb
 800aa08:	0800aadb 	.word	0x0800aadb
 800aa0c:	0800aa97 	.word	0x0800aa97
 800aa10:	0800aadb 	.word	0x0800aadb
 800aa14:	0800aadb 	.word	0x0800aadb
 800aa18:	0800aadb 	.word	0x0800aadb
 800aa1c:	0800aadb 	.word	0x0800aadb
 800aa20:	0800aadb 	.word	0x0800aadb
 800aa24:	0800aadb 	.word	0x0800aadb
 800aa28:	0800aadb 	.word	0x0800aadb
 800aa2c:	0800aaa7 	.word	0x0800aaa7
 800aa30:	0800aadb 	.word	0x0800aadb
 800aa34:	0800aadb 	.word	0x0800aadb
 800aa38:	0800aadb 	.word	0x0800aadb
 800aa3c:	0800aadb 	.word	0x0800aadb
 800aa40:	0800aadb 	.word	0x0800aadb
 800aa44:	0800aadb 	.word	0x0800aadb
 800aa48:	0800aadb 	.word	0x0800aadb
 800aa4c:	0800aadb 	.word	0x0800aadb
 800aa50:	0800aadb 	.word	0x0800aadb
 800aa54:	0800aadb 	.word	0x0800aadb
 800aa58:	0800aadb 	.word	0x0800aadb
 800aa5c:	0800aadb 	.word	0x0800aadb
 800aa60:	0800aadb 	.word	0x0800aadb
 800aa64:	0800aadb 	.word	0x0800aadb
 800aa68:	0800aadb 	.word	0x0800aadb
 800aa6c:	0800aacd 	.word	0x0800aacd
 800aa70:	2b40      	cmp	r3, #64	; 0x40
 800aa72:	d02e      	beq.n	800aad2 <UART_SetConfig+0xab2>
 800aa74:	e031      	b.n	800aada <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa76:	f7fb fad9 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 800aa7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aa7c:	e033      	b.n	800aae6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa7e:	f7fb faeb 	bl	8006058 <HAL_RCC_GetPCLK2Freq>
 800aa82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aa84:	e02f      	b.n	800aae6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7fc fcf2 	bl	8007474 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa94:	e027      	b.n	800aae6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa96:	f107 0318 	add.w	r3, r7, #24
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7fc fe3e 	bl	800771c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaa4:	e01f      	b.n	800aae6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aaa6:	4b69      	ldr	r3, [pc, #420]	; (800ac4c <UART_SetConfig+0xc2c>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f003 0320 	and.w	r3, r3, #32
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d009      	beq.n	800aac6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aab2:	4b66      	ldr	r3, [pc, #408]	; (800ac4c <UART_SetConfig+0xc2c>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	08db      	lsrs	r3, r3, #3
 800aab8:	f003 0303 	and.w	r3, r3, #3
 800aabc:	4a64      	ldr	r2, [pc, #400]	; (800ac50 <UART_SetConfig+0xc30>)
 800aabe:	fa22 f303 	lsr.w	r3, r2, r3
 800aac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aac4:	e00f      	b.n	800aae6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800aac6:	4b62      	ldr	r3, [pc, #392]	; (800ac50 <UART_SetConfig+0xc30>)
 800aac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaca:	e00c      	b.n	800aae6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aacc:	4b61      	ldr	r3, [pc, #388]	; (800ac54 <UART_SetConfig+0xc34>)
 800aace:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aad0:	e009      	b.n	800aae6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aad8:	e005      	b.n	800aae6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800aada:	2300      	movs	r3, #0
 800aadc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aade:	2301      	movs	r3, #1
 800aae0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aae4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f000 80ea 	beq.w	800acc2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf2:	4a55      	ldr	r2, [pc, #340]	; (800ac48 <UART_SetConfig+0xc28>)
 800aaf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaf8:	461a      	mov	r2, r3
 800aafa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aafc:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab00:	005a      	lsls	r2, r3, #1
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	085b      	lsrs	r3, r3, #1
 800ab08:	441a      	add	r2, r3
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab12:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab16:	2b0f      	cmp	r3, #15
 800ab18:	d916      	bls.n	800ab48 <UART_SetConfig+0xb28>
 800ab1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab20:	d212      	bcs.n	800ab48 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	f023 030f 	bic.w	r3, r3, #15
 800ab2a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2e:	085b      	lsrs	r3, r3, #1
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	f003 0307 	and.w	r3, r3, #7
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ab44:	60da      	str	r2, [r3, #12]
 800ab46:	e0bc      	b.n	800acc2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ab4e:	e0b8      	b.n	800acc2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ab54:	2b20      	cmp	r3, #32
 800ab56:	dc4b      	bgt.n	800abf0 <UART_SetConfig+0xbd0>
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f2c0 8087 	blt.w	800ac6c <UART_SetConfig+0xc4c>
 800ab5e:	2b20      	cmp	r3, #32
 800ab60:	f200 8084 	bhi.w	800ac6c <UART_SetConfig+0xc4c>
 800ab64:	a201      	add	r2, pc, #4	; (adr r2, 800ab6c <UART_SetConfig+0xb4c>)
 800ab66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab6a:	bf00      	nop
 800ab6c:	0800abf7 	.word	0x0800abf7
 800ab70:	0800abff 	.word	0x0800abff
 800ab74:	0800ac6d 	.word	0x0800ac6d
 800ab78:	0800ac6d 	.word	0x0800ac6d
 800ab7c:	0800ac07 	.word	0x0800ac07
 800ab80:	0800ac6d 	.word	0x0800ac6d
 800ab84:	0800ac6d 	.word	0x0800ac6d
 800ab88:	0800ac6d 	.word	0x0800ac6d
 800ab8c:	0800ac17 	.word	0x0800ac17
 800ab90:	0800ac6d 	.word	0x0800ac6d
 800ab94:	0800ac6d 	.word	0x0800ac6d
 800ab98:	0800ac6d 	.word	0x0800ac6d
 800ab9c:	0800ac6d 	.word	0x0800ac6d
 800aba0:	0800ac6d 	.word	0x0800ac6d
 800aba4:	0800ac6d 	.word	0x0800ac6d
 800aba8:	0800ac6d 	.word	0x0800ac6d
 800abac:	0800ac27 	.word	0x0800ac27
 800abb0:	0800ac6d 	.word	0x0800ac6d
 800abb4:	0800ac6d 	.word	0x0800ac6d
 800abb8:	0800ac6d 	.word	0x0800ac6d
 800abbc:	0800ac6d 	.word	0x0800ac6d
 800abc0:	0800ac6d 	.word	0x0800ac6d
 800abc4:	0800ac6d 	.word	0x0800ac6d
 800abc8:	0800ac6d 	.word	0x0800ac6d
 800abcc:	0800ac6d 	.word	0x0800ac6d
 800abd0:	0800ac6d 	.word	0x0800ac6d
 800abd4:	0800ac6d 	.word	0x0800ac6d
 800abd8:	0800ac6d 	.word	0x0800ac6d
 800abdc:	0800ac6d 	.word	0x0800ac6d
 800abe0:	0800ac6d 	.word	0x0800ac6d
 800abe4:	0800ac6d 	.word	0x0800ac6d
 800abe8:	0800ac6d 	.word	0x0800ac6d
 800abec:	0800ac5f 	.word	0x0800ac5f
 800abf0:	2b40      	cmp	r3, #64	; 0x40
 800abf2:	d037      	beq.n	800ac64 <UART_SetConfig+0xc44>
 800abf4:	e03a      	b.n	800ac6c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abf6:	f7fb fa19 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 800abfa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800abfc:	e03c      	b.n	800ac78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abfe:	f7fb fa2b 	bl	8006058 <HAL_RCC_GetPCLK2Freq>
 800ac02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ac04:	e038      	b.n	800ac78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fc fc32 	bl	8007474 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac14:	e030      	b.n	800ac78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac16:	f107 0318 	add.w	r3, r7, #24
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7fc fd7e 	bl	800771c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac24:	e028      	b.n	800ac78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac26:	4b09      	ldr	r3, [pc, #36]	; (800ac4c <UART_SetConfig+0xc2c>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f003 0320 	and.w	r3, r3, #32
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d012      	beq.n	800ac58 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac32:	4b06      	ldr	r3, [pc, #24]	; (800ac4c <UART_SetConfig+0xc2c>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	08db      	lsrs	r3, r3, #3
 800ac38:	f003 0303 	and.w	r3, r3, #3
 800ac3c:	4a04      	ldr	r2, [pc, #16]	; (800ac50 <UART_SetConfig+0xc30>)
 800ac3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac44:	e018      	b.n	800ac78 <UART_SetConfig+0xc58>
 800ac46:	bf00      	nop
 800ac48:	08013040 	.word	0x08013040
 800ac4c:	58024400 	.word	0x58024400
 800ac50:	03d09000 	.word	0x03d09000
 800ac54:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ac58:	4b24      	ldr	r3, [pc, #144]	; (800acec <UART_SetConfig+0xccc>)
 800ac5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac5c:	e00c      	b.n	800ac78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac5e:	4b24      	ldr	r3, [pc, #144]	; (800acf0 <UART_SetConfig+0xcd0>)
 800ac60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac62:	e009      	b.n	800ac78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac6a:	e005      	b.n	800ac78 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ac70:	2301      	movs	r3, #1
 800ac72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ac76:	bf00      	nop
    }

    if (pclk != 0U)
 800ac78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d021      	beq.n	800acc2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac82:	4a1c      	ldr	r2, [pc, #112]	; (800acf4 <UART_SetConfig+0xcd4>)
 800ac84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac88:	461a      	mov	r2, r3
 800ac8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac8c:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	085b      	lsrs	r3, r3, #1
 800ac96:	441a      	add	r2, r3
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aca0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca4:	2b0f      	cmp	r3, #15
 800aca6:	d909      	bls.n	800acbc <UART_SetConfig+0xc9c>
 800aca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acae:	d205      	bcs.n	800acbc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800acb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb2:	b29a      	uxth	r2, r3
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	60da      	str	r2, [r3, #12]
 800acba:	e002      	b.n	800acc2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800acbc:	2301      	movs	r3, #1
 800acbe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	2201      	movs	r2, #1
 800acc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	2201      	movs	r2, #1
 800acce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2200      	movs	r2, #0
 800acd6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	2200      	movs	r2, #0
 800acdc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800acde:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3748      	adds	r7, #72	; 0x48
 800ace6:	46bd      	mov	sp, r7
 800ace8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800acec:	03d09000 	.word	0x03d09000
 800acf0:	003d0900 	.word	0x003d0900
 800acf4:	08013040 	.word	0x08013040

0800acf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad04:	f003 0301 	and.w	r3, r3, #1
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d00a      	beq.n	800ad22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	430a      	orrs	r2, r1
 800ad20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad26:	f003 0302 	and.w	r3, r3, #2
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00a      	beq.n	800ad44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	430a      	orrs	r2, r1
 800ad42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad48:	f003 0304 	and.w	r3, r3, #4
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d00a      	beq.n	800ad66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	430a      	orrs	r2, r1
 800ad64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad6a:	f003 0308 	and.w	r3, r3, #8
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d00a      	beq.n	800ad88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	430a      	orrs	r2, r1
 800ad86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad8c:	f003 0310 	and.w	r3, r3, #16
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00a      	beq.n	800adaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	430a      	orrs	r2, r1
 800ada8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adae:	f003 0320 	and.w	r3, r3, #32
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d00a      	beq.n	800adcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	430a      	orrs	r2, r1
 800adca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800add4:	2b00      	cmp	r3, #0
 800add6:	d01a      	beq.n	800ae0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	430a      	orrs	r2, r1
 800adec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adf6:	d10a      	bne.n	800ae0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	430a      	orrs	r2, r1
 800ae0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d00a      	beq.n	800ae30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	430a      	orrs	r2, r1
 800ae2e:	605a      	str	r2, [r3, #4]
  }
}
 800ae30:	bf00      	nop
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b098      	sub	sp, #96	; 0x60
 800ae40:	af02      	add	r7, sp, #8
 800ae42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae4c:	f7f7 f888 	bl	8001f60 <HAL_GetTick>
 800ae50:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f003 0308 	and.w	r3, r3, #8
 800ae5c:	2b08      	cmp	r3, #8
 800ae5e:	d12f      	bne.n	800aec0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae64:	9300      	str	r3, [sp, #0]
 800ae66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 f88e 	bl	800af90 <UART_WaitOnFlagUntilTimeout>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d022      	beq.n	800aec0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae82:	e853 3f00 	ldrex	r3, [r3]
 800ae86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae8e:	653b      	str	r3, [r7, #80]	; 0x50
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	461a      	mov	r2, r3
 800ae96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae98:	647b      	str	r3, [r7, #68]	; 0x44
 800ae9a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aea0:	e841 2300 	strex	r3, r2, [r1]
 800aea4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1e6      	bne.n	800ae7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2220      	movs	r2, #32
 800aeb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aebc:	2303      	movs	r3, #3
 800aebe:	e063      	b.n	800af88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f003 0304 	and.w	r3, r3, #4
 800aeca:	2b04      	cmp	r3, #4
 800aecc:	d149      	bne.n	800af62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aece:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aed2:	9300      	str	r3, [sp, #0]
 800aed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aed6:	2200      	movs	r2, #0
 800aed8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 f857 	bl	800af90 <UART_WaitOnFlagUntilTimeout>
 800aee2:	4603      	mov	r3, r0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d03c      	beq.n	800af62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef0:	e853 3f00 	ldrex	r3, [r3]
 800aef4:	623b      	str	r3, [r7, #32]
   return(result);
 800aef6:	6a3b      	ldr	r3, [r7, #32]
 800aef8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aefc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	461a      	mov	r2, r3
 800af04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af06:	633b      	str	r3, [r7, #48]	; 0x30
 800af08:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af0e:	e841 2300 	strex	r3, r2, [r1]
 800af12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1e6      	bne.n	800aee8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	3308      	adds	r3, #8
 800af20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	e853 3f00 	ldrex	r3, [r3]
 800af28:	60fb      	str	r3, [r7, #12]
   return(result);
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f023 0301 	bic.w	r3, r3, #1
 800af30:	64bb      	str	r3, [r7, #72]	; 0x48
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	3308      	adds	r3, #8
 800af38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af3a:	61fa      	str	r2, [r7, #28]
 800af3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3e:	69b9      	ldr	r1, [r7, #24]
 800af40:	69fa      	ldr	r2, [r7, #28]
 800af42:	e841 2300 	strex	r3, r2, [r1]
 800af46:	617b      	str	r3, [r7, #20]
   return(result);
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1e5      	bne.n	800af1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2220      	movs	r2, #32
 800af52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af5e:	2303      	movs	r3, #3
 800af60:	e012      	b.n	800af88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2220      	movs	r2, #32
 800af66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2220      	movs	r2, #32
 800af6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800af86:	2300      	movs	r3, #0
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3758      	adds	r7, #88	; 0x58
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	603b      	str	r3, [r7, #0]
 800af9c:	4613      	mov	r3, r2
 800af9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afa0:	e049      	b.n	800b036 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa8:	d045      	beq.n	800b036 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afaa:	f7f6 ffd9 	bl	8001f60 <HAL_GetTick>
 800afae:	4602      	mov	r2, r0
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	1ad3      	subs	r3, r2, r3
 800afb4:	69ba      	ldr	r2, [r7, #24]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d302      	bcc.n	800afc0 <UART_WaitOnFlagUntilTimeout+0x30>
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d101      	bne.n	800afc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800afc0:	2303      	movs	r3, #3
 800afc2:	e048      	b.n	800b056 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f003 0304 	and.w	r3, r3, #4
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d031      	beq.n	800b036 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	69db      	ldr	r3, [r3, #28]
 800afd8:	f003 0308 	and.w	r3, r3, #8
 800afdc:	2b08      	cmp	r3, #8
 800afde:	d110      	bne.n	800b002 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2208      	movs	r2, #8
 800afe6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f000 f95b 	bl	800b2a4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2208      	movs	r2, #8
 800aff2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2200      	movs	r2, #0
 800affa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	e029      	b.n	800b056 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	69db      	ldr	r3, [r3, #28]
 800b008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b00c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b010:	d111      	bne.n	800b036 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b01a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f000 f941 	bl	800b2a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2220      	movs	r2, #32
 800b026:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b032:	2303      	movs	r3, #3
 800b034:	e00f      	b.n	800b056 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	69da      	ldr	r2, [r3, #28]
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	4013      	ands	r3, r2
 800b040:	68ba      	ldr	r2, [r7, #8]
 800b042:	429a      	cmp	r2, r3
 800b044:	bf0c      	ite	eq
 800b046:	2301      	moveq	r3, #1
 800b048:	2300      	movne	r3, #0
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	461a      	mov	r2, r3
 800b04e:	79fb      	ldrb	r3, [r7, #7]
 800b050:	429a      	cmp	r2, r3
 800b052:	d0a6      	beq.n	800afa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b054:	2300      	movs	r3, #0
}
 800b056:	4618      	mov	r0, r3
 800b058:	3710      	adds	r7, #16
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
	...

0800b060 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b060:	b480      	push	{r7}
 800b062:	b0a3      	sub	sp, #140	; 0x8c
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	4613      	mov	r3, r2
 800b06c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	68ba      	ldr	r2, [r7, #8]
 800b072:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	88fa      	ldrh	r2, [r7, #6]
 800b078:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	88fa      	ldrh	r2, [r7, #6]
 800b080:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2200      	movs	r2, #0
 800b088:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b092:	d10e      	bne.n	800b0b2 <UART_Start_Receive_IT+0x52>
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	691b      	ldr	r3, [r3, #16]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d105      	bne.n	800b0a8 <UART_Start_Receive_IT+0x48>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b0a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b0a6:	e02d      	b.n	800b104 <UART_Start_Receive_IT+0xa4>
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	22ff      	movs	r2, #255	; 0xff
 800b0ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b0b0:	e028      	b.n	800b104 <UART_Start_Receive_IT+0xa4>
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d10d      	bne.n	800b0d6 <UART_Start_Receive_IT+0x76>
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	691b      	ldr	r3, [r3, #16]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d104      	bne.n	800b0cc <UART_Start_Receive_IT+0x6c>
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	22ff      	movs	r2, #255	; 0xff
 800b0c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b0ca:	e01b      	b.n	800b104 <UART_Start_Receive_IT+0xa4>
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	227f      	movs	r2, #127	; 0x7f
 800b0d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b0d4:	e016      	b.n	800b104 <UART_Start_Receive_IT+0xa4>
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0de:	d10d      	bne.n	800b0fc <UART_Start_Receive_IT+0x9c>
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	691b      	ldr	r3, [r3, #16]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d104      	bne.n	800b0f2 <UART_Start_Receive_IT+0x92>
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	227f      	movs	r2, #127	; 0x7f
 800b0ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b0f0:	e008      	b.n	800b104 <UART_Start_Receive_IT+0xa4>
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	223f      	movs	r2, #63	; 0x3f
 800b0f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b0fa:	e003      	b.n	800b104 <UART_Start_Receive_IT+0xa4>
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2200      	movs	r2, #0
 800b100:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2200      	movs	r2, #0
 800b108:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2222      	movs	r2, #34	; 0x22
 800b110:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	3308      	adds	r3, #8
 800b11a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b11c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b11e:	e853 3f00 	ldrex	r3, [r3]
 800b122:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b124:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b126:	f043 0301 	orr.w	r3, r3, #1
 800b12a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	3308      	adds	r3, #8
 800b134:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b138:	673a      	str	r2, [r7, #112]	; 0x70
 800b13a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b13e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b140:	e841 2300 	strex	r3, r2, [r1]
 800b144:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b146:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1e3      	bne.n	800b114 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b154:	d14f      	bne.n	800b1f6 <UART_Start_Receive_IT+0x196>
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b15c:	88fa      	ldrh	r2, [r7, #6]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d349      	bcc.n	800b1f6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b16a:	d107      	bne.n	800b17c <UART_Start_Receive_IT+0x11c>
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	691b      	ldr	r3, [r3, #16]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d103      	bne.n	800b17c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	4a47      	ldr	r2, [pc, #284]	; (800b294 <UART_Start_Receive_IT+0x234>)
 800b178:	675a      	str	r2, [r3, #116]	; 0x74
 800b17a:	e002      	b.n	800b182 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	4a46      	ldr	r2, [pc, #280]	; (800b298 <UART_Start_Receive_IT+0x238>)
 800b180:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	691b      	ldr	r3, [r3, #16]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d01a      	beq.n	800b1c0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b192:	e853 3f00 	ldrex	r3, [r3]
 800b196:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b19a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b19e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b1ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b1ae:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b1b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b1b4:	e841 2300 	strex	r3, r2, [r1]
 800b1b8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b1ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d1e4      	bne.n	800b18a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	3308      	adds	r3, #8
 800b1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1ca:	e853 3f00 	ldrex	r3, [r3]
 800b1ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	3308      	adds	r3, #8
 800b1de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b1e0:	64ba      	str	r2, [r7, #72]	; 0x48
 800b1e2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b1e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1e8:	e841 2300 	strex	r3, r2, [r1]
 800b1ec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b1ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d1e5      	bne.n	800b1c0 <UART_Start_Receive_IT+0x160>
 800b1f4:	e046      	b.n	800b284 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1fe:	d107      	bne.n	800b210 <UART_Start_Receive_IT+0x1b0>
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d103      	bne.n	800b210 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	4a24      	ldr	r2, [pc, #144]	; (800b29c <UART_Start_Receive_IT+0x23c>)
 800b20c:	675a      	str	r2, [r3, #116]	; 0x74
 800b20e:	e002      	b.n	800b216 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	4a23      	ldr	r2, [pc, #140]	; (800b2a0 <UART_Start_Receive_IT+0x240>)
 800b214:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	691b      	ldr	r3, [r3, #16]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d019      	beq.n	800b252 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b226:	e853 3f00 	ldrex	r3, [r3]
 800b22a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b232:	677b      	str	r3, [r7, #116]	; 0x74
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	461a      	mov	r2, r3
 800b23a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b23c:	637b      	str	r3, [r7, #52]	; 0x34
 800b23e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b240:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b242:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b244:	e841 2300 	strex	r3, r2, [r1]
 800b248:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d1e6      	bne.n	800b21e <UART_Start_Receive_IT+0x1be>
 800b250:	e018      	b.n	800b284 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	e853 3f00 	ldrex	r3, [r3]
 800b25e:	613b      	str	r3, [r7, #16]
   return(result);
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	f043 0320 	orr.w	r3, r3, #32
 800b266:	67bb      	str	r3, [r7, #120]	; 0x78
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	461a      	mov	r2, r3
 800b26e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b270:	623b      	str	r3, [r7, #32]
 800b272:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b274:	69f9      	ldr	r1, [r7, #28]
 800b276:	6a3a      	ldr	r2, [r7, #32]
 800b278:	e841 2300 	strex	r3, r2, [r1]
 800b27c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1e6      	bne.n	800b252 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b284:	2300      	movs	r3, #0
}
 800b286:	4618      	mov	r0, r3
 800b288:	378c      	adds	r7, #140	; 0x8c
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	0800bac5 	.word	0x0800bac5
 800b298:	0800b765 	.word	0x0800b765
 800b29c:	0800b5ad 	.word	0x0800b5ad
 800b2a0:	0800b3f5 	.word	0x0800b3f5

0800b2a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b095      	sub	sp, #84	; 0x54
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2b4:	e853 3f00 	ldrex	r3, [r3]
 800b2b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b2c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2ca:	643b      	str	r3, [r7, #64]	; 0x40
 800b2cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b2d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b2d2:	e841 2300 	strex	r3, r2, [r1]
 800b2d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d1e6      	bne.n	800b2ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	3308      	adds	r3, #8
 800b2e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e6:	6a3b      	ldr	r3, [r7, #32]
 800b2e8:	e853 3f00 	ldrex	r3, [r3]
 800b2ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2ee:	69fa      	ldr	r2, [r7, #28]
 800b2f0:	4b1e      	ldr	r3, [pc, #120]	; (800b36c <UART_EndRxTransfer+0xc8>)
 800b2f2:	4013      	ands	r3, r2
 800b2f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	3308      	adds	r3, #8
 800b2fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b300:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b302:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b306:	e841 2300 	strex	r3, r2, [r1]
 800b30a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1e5      	bne.n	800b2de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b316:	2b01      	cmp	r3, #1
 800b318:	d118      	bne.n	800b34c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	e853 3f00 	ldrex	r3, [r3]
 800b326:	60bb      	str	r3, [r7, #8]
   return(result);
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	f023 0310 	bic.w	r3, r3, #16
 800b32e:	647b      	str	r3, [r7, #68]	; 0x44
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	461a      	mov	r2, r3
 800b336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b338:	61bb      	str	r3, [r7, #24]
 800b33a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33c:	6979      	ldr	r1, [r7, #20]
 800b33e:	69ba      	ldr	r2, [r7, #24]
 800b340:	e841 2300 	strex	r3, r2, [r1]
 800b344:	613b      	str	r3, [r7, #16]
   return(result);
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d1e6      	bne.n	800b31a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2220      	movs	r2, #32
 800b350:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b360:	bf00      	nop
 800b362:	3754      	adds	r7, #84	; 0x54
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr
 800b36c:	effffffe 	.word	0xeffffffe

0800b370 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b37c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2200      	movs	r2, #0
 800b382:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2200      	movs	r2, #0
 800b38a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b38e:	68f8      	ldr	r0, [r7, #12]
 800b390:	f7fe fe30 	bl	8009ff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b394:	bf00      	nop
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b088      	sub	sp, #32
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	e853 3f00 	ldrex	r3, [r3]
 800b3b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3b8:	61fb      	str	r3, [r7, #28]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	461a      	mov	r2, r3
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	61bb      	str	r3, [r7, #24]
 800b3c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c6:	6979      	ldr	r1, [r7, #20]
 800b3c8:	69ba      	ldr	r2, [r7, #24]
 800b3ca:	e841 2300 	strex	r3, r2, [r1]
 800b3ce:	613b      	str	r3, [r7, #16]
   return(result);
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d1e6      	bne.n	800b3a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2220      	movs	r2, #32
 800b3da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f7fe fdfb 	bl	8009fe0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3ea:	bf00      	nop
 800b3ec:	3720      	adds	r7, #32
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
	...

0800b3f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b09c      	sub	sp, #112	; 0x70
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b402:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b40c:	2b22      	cmp	r3, #34	; 0x22
 800b40e:	f040 80be 	bne.w	800b58e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b418:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b41c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b420:	b2d9      	uxtb	r1, r3
 800b422:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b426:	b2da      	uxtb	r2, r3
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b42c:	400a      	ands	r2, r1
 800b42e:	b2d2      	uxtb	r2, r2
 800b430:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b436:	1c5a      	adds	r2, r3, #1
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b442:	b29b      	uxth	r3, r3
 800b444:	3b01      	subs	r3, #1
 800b446:	b29a      	uxth	r2, r3
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b454:	b29b      	uxth	r3, r3
 800b456:	2b00      	cmp	r3, #0
 800b458:	f040 80a1 	bne.w	800b59e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b464:	e853 3f00 	ldrex	r3, [r3]
 800b468:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b46a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b46c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b470:	66bb      	str	r3, [r7, #104]	; 0x68
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	461a      	mov	r2, r3
 800b478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b47a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b47c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b47e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b480:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b482:	e841 2300 	strex	r3, r2, [r1]
 800b486:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d1e6      	bne.n	800b45c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	3308      	adds	r3, #8
 800b494:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b498:	e853 3f00 	ldrex	r3, [r3]
 800b49c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4a0:	f023 0301 	bic.w	r3, r3, #1
 800b4a4:	667b      	str	r3, [r7, #100]	; 0x64
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	3308      	adds	r3, #8
 800b4ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b4ae:	647a      	str	r2, [r7, #68]	; 0x44
 800b4b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b4b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4b6:	e841 2300 	strex	r3, r2, [r1]
 800b4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b4bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d1e5      	bne.n	800b48e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2220      	movs	r2, #32
 800b4c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a33      	ldr	r2, [pc, #204]	; (800b5a8 <UART_RxISR_8BIT+0x1b4>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d01f      	beq.n	800b520 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d018      	beq.n	800b520 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f6:	e853 3f00 	ldrex	r3, [r3]
 800b4fa:	623b      	str	r3, [r7, #32]
   return(result);
 800b4fc:	6a3b      	ldr	r3, [r7, #32]
 800b4fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b502:	663b      	str	r3, [r7, #96]	; 0x60
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	461a      	mov	r2, r3
 800b50a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b50c:	633b      	str	r3, [r7, #48]	; 0x30
 800b50e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b510:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b514:	e841 2300 	strex	r3, r2, [r1]
 800b518:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d1e6      	bne.n	800b4ee <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b524:	2b01      	cmp	r3, #1
 800b526:	d12e      	bne.n	800b586 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2200      	movs	r2, #0
 800b52c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	e853 3f00 	ldrex	r3, [r3]
 800b53a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f023 0310 	bic.w	r3, r3, #16
 800b542:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	461a      	mov	r2, r3
 800b54a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b54c:	61fb      	str	r3, [r7, #28]
 800b54e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b550:	69b9      	ldr	r1, [r7, #24]
 800b552:	69fa      	ldr	r2, [r7, #28]
 800b554:	e841 2300 	strex	r3, r2, [r1]
 800b558:	617b      	str	r3, [r7, #20]
   return(result);
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1e6      	bne.n	800b52e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	69db      	ldr	r3, [r3, #28]
 800b566:	f003 0310 	and.w	r3, r3, #16
 800b56a:	2b10      	cmp	r3, #16
 800b56c:	d103      	bne.n	800b576 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2210      	movs	r2, #16
 800b574:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b57c:	4619      	mov	r1, r3
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f7fe fd42 	bl	800a008 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b584:	e00b      	b.n	800b59e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f7f5 f8bc 	bl	8000704 <HAL_UART_RxCpltCallback>
}
 800b58c:	e007      	b.n	800b59e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	699a      	ldr	r2, [r3, #24]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f042 0208 	orr.w	r2, r2, #8
 800b59c:	619a      	str	r2, [r3, #24]
}
 800b59e:	bf00      	nop
 800b5a0:	3770      	adds	r7, #112	; 0x70
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	58000c00 	.word	0x58000c00

0800b5ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b09c      	sub	sp, #112	; 0x70
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b5ba:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5c4:	2b22      	cmp	r3, #34	; 0x22
 800b5c6:	f040 80be 	bne.w	800b746 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5d8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b5da:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800b5de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b5e2:	4013      	ands	r3, r2
 800b5e4:	b29a      	uxth	r2, r3
 800b5e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ee:	1c9a      	adds	r2, r3, #2
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	3b01      	subs	r3, #1
 800b5fe:	b29a      	uxth	r2, r3
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	2b00      	cmp	r3, #0
 800b610:	f040 80a1 	bne.w	800b756 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b61a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b61c:	e853 3f00 	ldrex	r3, [r3]
 800b620:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b624:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b628:	667b      	str	r3, [r7, #100]	; 0x64
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	461a      	mov	r2, r3
 800b630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b632:	657b      	str	r3, [r7, #84]	; 0x54
 800b634:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b636:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b638:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b63a:	e841 2300 	strex	r3, r2, [r1]
 800b63e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b642:	2b00      	cmp	r3, #0
 800b644:	d1e6      	bne.n	800b614 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	3308      	adds	r3, #8
 800b64c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b650:	e853 3f00 	ldrex	r3, [r3]
 800b654:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b658:	f023 0301 	bic.w	r3, r3, #1
 800b65c:	663b      	str	r3, [r7, #96]	; 0x60
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	3308      	adds	r3, #8
 800b664:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b666:	643a      	str	r2, [r7, #64]	; 0x40
 800b668:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b66a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b66c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b66e:	e841 2300 	strex	r3, r2, [r1]
 800b672:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b676:	2b00      	cmp	r3, #0
 800b678:	d1e5      	bne.n	800b646 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2220      	movs	r2, #32
 800b67e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2200      	movs	r2, #0
 800b68c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	4a33      	ldr	r2, [pc, #204]	; (800b760 <UART_RxISR_16BIT+0x1b4>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d01f      	beq.n	800b6d8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d018      	beq.n	800b6d8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ac:	6a3b      	ldr	r3, [r7, #32]
 800b6ae:	e853 3f00 	ldrex	r3, [r3]
 800b6b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b6ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6c6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6cc:	e841 2300 	strex	r3, r2, [r1]
 800b6d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d1e6      	bne.n	800b6a6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d12e      	bne.n	800b73e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	e853 3f00 	ldrex	r3, [r3]
 800b6f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	f023 0310 	bic.w	r3, r3, #16
 800b6fa:	65bb      	str	r3, [r7, #88]	; 0x58
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	461a      	mov	r2, r3
 800b702:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b704:	61bb      	str	r3, [r7, #24]
 800b706:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b708:	6979      	ldr	r1, [r7, #20]
 800b70a:	69ba      	ldr	r2, [r7, #24]
 800b70c:	e841 2300 	strex	r3, r2, [r1]
 800b710:	613b      	str	r3, [r7, #16]
   return(result);
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d1e6      	bne.n	800b6e6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	69db      	ldr	r3, [r3, #28]
 800b71e:	f003 0310 	and.w	r3, r3, #16
 800b722:	2b10      	cmp	r3, #16
 800b724:	d103      	bne.n	800b72e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	2210      	movs	r2, #16
 800b72c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b734:	4619      	mov	r1, r3
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f7fe fc66 	bl	800a008 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b73c:	e00b      	b.n	800b756 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f7f4 ffe0 	bl	8000704 <HAL_UART_RxCpltCallback>
}
 800b744:	e007      	b.n	800b756 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	699a      	ldr	r2, [r3, #24]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f042 0208 	orr.w	r2, r2, #8
 800b754:	619a      	str	r2, [r3, #24]
}
 800b756:	bf00      	nop
 800b758:	3770      	adds	r7, #112	; 0x70
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	58000c00 	.word	0x58000c00

0800b764 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b0ac      	sub	sp, #176	; 0xb0
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b772:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	69db      	ldr	r3, [r3, #28]
 800b77c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b79a:	2b22      	cmp	r3, #34	; 0x22
 800b79c:	f040 8180 	bne.w	800baa0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b7a6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b7aa:	e123      	b.n	800b9f4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b7b6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b7ba:	b2d9      	uxtb	r1, r3
 800b7bc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b7c0:	b2da      	uxtb	r2, r3
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7c6:	400a      	ands	r2, r1
 800b7c8:	b2d2      	uxtb	r2, r2
 800b7ca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7d0:	1c5a      	adds	r2, r3, #1
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	b29a      	uxth	r2, r3
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	69db      	ldr	r3, [r3, #28]
 800b7ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b7f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7f6:	f003 0307 	and.w	r3, r3, #7
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d053      	beq.n	800b8a6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b7fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b802:	f003 0301 	and.w	r3, r3, #1
 800b806:	2b00      	cmp	r3, #0
 800b808:	d011      	beq.n	800b82e <UART_RxISR_8BIT_FIFOEN+0xca>
 800b80a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b80e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00b      	beq.n	800b82e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2201      	movs	r2, #1
 800b81c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b824:	f043 0201 	orr.w	r2, r3, #1
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b82e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b832:	f003 0302 	and.w	r3, r3, #2
 800b836:	2b00      	cmp	r3, #0
 800b838:	d011      	beq.n	800b85e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b83a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b83e:	f003 0301 	and.w	r3, r3, #1
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00b      	beq.n	800b85e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2202      	movs	r2, #2
 800b84c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b854:	f043 0204 	orr.w	r2, r3, #4
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b85e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b862:	f003 0304 	and.w	r3, r3, #4
 800b866:	2b00      	cmp	r3, #0
 800b868:	d011      	beq.n	800b88e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b86a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b86e:	f003 0301 	and.w	r3, r3, #1
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00b      	beq.n	800b88e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2204      	movs	r2, #4
 800b87c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b884:	f043 0202 	orr.w	r2, r3, #2
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b894:	2b00      	cmp	r3, #0
 800b896:	d006      	beq.n	800b8a6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f7fe fbab 	bl	8009ff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	f040 80a0 	bne.w	800b9f4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8bc:	e853 3f00 	ldrex	r3, [r3]
 800b8c0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800b8c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b8d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b8d8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8da:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b8dc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b8de:	e841 2300 	strex	r3, r2, [r1]
 800b8e2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800b8e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d1e4      	bne.n	800b8b4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	3308      	adds	r3, #8
 800b8f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8f4:	e853 3f00 	ldrex	r3, [r3]
 800b8f8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b8fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b8fc:	4b6e      	ldr	r3, [pc, #440]	; (800bab8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800b8fe:	4013      	ands	r3, r2
 800b900:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	3308      	adds	r3, #8
 800b90a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b90e:	66ba      	str	r2, [r7, #104]	; 0x68
 800b910:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b912:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b914:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b916:	e841 2300 	strex	r3, r2, [r1]
 800b91a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b91c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d1e3      	bne.n	800b8ea <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2220      	movs	r2, #32
 800b926:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2200      	movs	r2, #0
 800b934:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4a60      	ldr	r2, [pc, #384]	; (800babc <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d021      	beq.n	800b984 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d01a      	beq.n	800b984 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b956:	e853 3f00 	ldrex	r3, [r3]
 800b95a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b95c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b95e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b962:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	461a      	mov	r2, r3
 800b96c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b970:	657b      	str	r3, [r7, #84]	; 0x54
 800b972:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b974:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b976:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b978:	e841 2300 	strex	r3, r2, [r1]
 800b97c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b97e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b980:	2b00      	cmp	r3, #0
 800b982:	d1e4      	bne.n	800b94e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d130      	bne.n	800b9ee <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b99a:	e853 3f00 	ldrex	r3, [r3]
 800b99e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a2:	f023 0310 	bic.w	r3, r3, #16
 800b9a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b9b4:	643b      	str	r3, [r7, #64]	; 0x40
 800b9b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b9ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9bc:	e841 2300 	strex	r3, r2, [r1]
 800b9c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d1e4      	bne.n	800b992 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	69db      	ldr	r3, [r3, #28]
 800b9ce:	f003 0310 	and.w	r3, r3, #16
 800b9d2:	2b10      	cmp	r3, #16
 800b9d4:	d103      	bne.n	800b9de <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2210      	movs	r2, #16
 800b9dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f7fe fb0e 	bl	800a008 <HAL_UARTEx_RxEventCallback>
 800b9ec:	e002      	b.n	800b9f4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f7f4 fe88 	bl	8000704 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b9f4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d006      	beq.n	800ba0a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800b9fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ba00:	f003 0320 	and.w	r3, r3, #32
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f47f aed1 	bne.w	800b7ac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba10:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ba14:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d049      	beq.n	800bab0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ba22:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d242      	bcs.n	800bab0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	3308      	adds	r3, #8
 800ba30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba32:	6a3b      	ldr	r3, [r7, #32]
 800ba34:	e853 3f00 	ldrex	r3, [r3]
 800ba38:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba3a:	69fb      	ldr	r3, [r7, #28]
 800ba3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	3308      	adds	r3, #8
 800ba4a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ba4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ba50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba56:	e841 2300 	strex	r3, r2, [r1]
 800ba5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d1e3      	bne.n	800ba2a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	4a16      	ldr	r2, [pc, #88]	; (800bac0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ba66:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	e853 3f00 	ldrex	r3, [r3]
 800ba74:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	f043 0320 	orr.w	r3, r3, #32
 800ba7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	461a      	mov	r2, r3
 800ba86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ba8a:	61bb      	str	r3, [r7, #24]
 800ba8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba8e:	6979      	ldr	r1, [r7, #20]
 800ba90:	69ba      	ldr	r2, [r7, #24]
 800ba92:	e841 2300 	strex	r3, r2, [r1]
 800ba96:	613b      	str	r3, [r7, #16]
   return(result);
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d1e4      	bne.n	800ba68 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ba9e:	e007      	b.n	800bab0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	699a      	ldr	r2, [r3, #24]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f042 0208 	orr.w	r2, r2, #8
 800baae:	619a      	str	r2, [r3, #24]
}
 800bab0:	bf00      	nop
 800bab2:	37b0      	adds	r7, #176	; 0xb0
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	effffffe 	.word	0xeffffffe
 800babc:	58000c00 	.word	0x58000c00
 800bac0:	0800b3f5 	.word	0x0800b3f5

0800bac4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b0ae      	sub	sp, #184	; 0xb8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bad2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	69db      	ldr	r3, [r3, #28]
 800badc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bafa:	2b22      	cmp	r3, #34	; 0x22
 800bafc:	f040 8184 	bne.w	800be08 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bb06:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bb0a:	e127      	b.n	800bd5c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb12:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800bb1e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800bb22:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800bb26:	4013      	ands	r3, r2
 800bb28:	b29a      	uxth	r2, r3
 800bb2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb34:	1c9a      	adds	r2, r3, #2
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	3b01      	subs	r3, #1
 800bb44:	b29a      	uxth	r2, r3
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	69db      	ldr	r3, [r3, #28]
 800bb52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bb56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bb5a:	f003 0307 	and.w	r3, r3, #7
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d053      	beq.n	800bc0a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bb62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bb66:	f003 0301 	and.w	r3, r3, #1
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d011      	beq.n	800bb92 <UART_RxISR_16BIT_FIFOEN+0xce>
 800bb6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bb72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d00b      	beq.n	800bb92 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb88:	f043 0201 	orr.w	r2, r3, #1
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bb96:	f003 0302 	and.w	r3, r3, #2
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d011      	beq.n	800bbc2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800bb9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bba2:	f003 0301 	and.w	r3, r3, #1
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d00b      	beq.n	800bbc2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2202      	movs	r2, #2
 800bbb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbb8:	f043 0204 	orr.w	r2, r3, #4
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bbc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bbc6:	f003 0304 	and.w	r3, r3, #4
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d011      	beq.n	800bbf2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800bbce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bbd2:	f003 0301 	and.w	r3, r3, #1
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d00b      	beq.n	800bbf2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2204      	movs	r2, #4
 800bbe0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbe8:	f043 0202 	orr.w	r2, r3, #2
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d006      	beq.n	800bc0a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f7fe f9f9 	bl	8009ff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	f040 80a2 	bne.w	800bd5c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc20:	e853 3f00 	ldrex	r3, [r3]
 800bc24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bc26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	461a      	mov	r2, r3
 800bc36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bc3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bc3e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bc42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc46:	e841 2300 	strex	r3, r2, [r1]
 800bc4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bc4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d1e2      	bne.n	800bc18 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	3308      	adds	r3, #8
 800bc58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc5c:	e853 3f00 	ldrex	r3, [r3]
 800bc60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bc62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc64:	4b6e      	ldr	r3, [pc, #440]	; (800be20 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800bc66:	4013      	ands	r3, r2
 800bc68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	3308      	adds	r3, #8
 800bc72:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800bc76:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bc78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bc7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bc7e:	e841 2300 	strex	r3, r2, [r1]
 800bc82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bc84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d1e3      	bne.n	800bc52 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2220      	movs	r2, #32
 800bc8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4a60      	ldr	r2, [pc, #384]	; (800be24 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d021      	beq.n	800bcec <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d01a      	beq.n	800bcec <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcbe:	e853 3f00 	ldrex	r3, [r3]
 800bcc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bcc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bcca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bcd8:	65bb      	str	r3, [r7, #88]	; 0x58
 800bcda:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bcde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bce0:	e841 2300 	strex	r3, r2, [r1]
 800bce4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d1e4      	bne.n	800bcb6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d130      	bne.n	800bd56 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd02:	e853 3f00 	ldrex	r3, [r3]
 800bd06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bd08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd0a:	f023 0310 	bic.w	r3, r3, #16
 800bd0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	461a      	mov	r2, r3
 800bd18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd1c:	647b      	str	r3, [r7, #68]	; 0x44
 800bd1e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd24:	e841 2300 	strex	r3, r2, [r1]
 800bd28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bd2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d1e4      	bne.n	800bcfa <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	69db      	ldr	r3, [r3, #28]
 800bd36:	f003 0310 	and.w	r3, r3, #16
 800bd3a:	2b10      	cmp	r3, #16
 800bd3c:	d103      	bne.n	800bd46 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	2210      	movs	r2, #16
 800bd44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f7fe f95a 	bl	800a008 <HAL_UARTEx_RxEventCallback>
 800bd54:	e002      	b.n	800bd5c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f7f4 fcd4 	bl	8000704 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bd5c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d006      	beq.n	800bd72 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800bd64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bd68:	f003 0320 	and.w	r3, r3, #32
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f47f aecd 	bne.w	800bb0c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd78:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bd7c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d049      	beq.n	800be18 <UART_RxISR_16BIT_FIFOEN+0x354>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bd8a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d242      	bcs.n	800be18 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	3308      	adds	r3, #8
 800bd98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9c:	e853 3f00 	ldrex	r3, [r3]
 800bda0:	623b      	str	r3, [r7, #32]
   return(result);
 800bda2:	6a3b      	ldr	r3, [r7, #32]
 800bda4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bda8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	3308      	adds	r3, #8
 800bdb2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bdb6:	633a      	str	r2, [r7, #48]	; 0x30
 800bdb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdbe:	e841 2300 	strex	r3, r2, [r1]
 800bdc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d1e3      	bne.n	800bd92 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4a16      	ldr	r2, [pc, #88]	; (800be28 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800bdce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	e853 3f00 	ldrex	r3, [r3]
 800bddc:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f043 0320 	orr.w	r3, r3, #32
 800bde4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	461a      	mov	r2, r3
 800bdee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bdf2:	61fb      	str	r3, [r7, #28]
 800bdf4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf6:	69b9      	ldr	r1, [r7, #24]
 800bdf8:	69fa      	ldr	r2, [r7, #28]
 800bdfa:	e841 2300 	strex	r3, r2, [r1]
 800bdfe:	617b      	str	r3, [r7, #20]
   return(result);
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1e4      	bne.n	800bdd0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800be06:	e007      	b.n	800be18 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	699a      	ldr	r2, [r3, #24]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f042 0208 	orr.w	r2, r2, #8
 800be16:	619a      	str	r2, [r3, #24]
}
 800be18:	bf00      	nop
 800be1a:	37b8      	adds	r7, #184	; 0xb8
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	effffffe 	.word	0xeffffffe
 800be24:	58000c00 	.word	0x58000c00
 800be28:	0800b5ad 	.word	0x0800b5ad

0800be2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800be34:	bf00      	nop
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800be48:	bf00      	nop
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800be5c:	bf00      	nop
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800be68:	b480      	push	{r7}
 800be6a:	b085      	sub	sp, #20
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800be76:	2b01      	cmp	r3, #1
 800be78:	d101      	bne.n	800be7e <HAL_UARTEx_DisableFifoMode+0x16>
 800be7a:	2302      	movs	r3, #2
 800be7c:	e027      	b.n	800bece <HAL_UARTEx_DisableFifoMode+0x66>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2201      	movs	r2, #1
 800be82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2224      	movs	r2, #36	; 0x24
 800be8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f022 0201 	bic.w	r2, r2, #1
 800bea4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800beac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2200      	movs	r2, #0
 800beb2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	68fa      	ldr	r2, [r7, #12]
 800beba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2220      	movs	r2, #32
 800bec0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2200      	movs	r2, #0
 800bec8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800becc:	2300      	movs	r3, #0
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3714      	adds	r7, #20
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr

0800beda <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800beda:	b580      	push	{r7, lr}
 800bedc:	b084      	sub	sp, #16
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
 800bee2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800beea:	2b01      	cmp	r3, #1
 800beec:	d101      	bne.n	800bef2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800beee:	2302      	movs	r3, #2
 800bef0:	e02d      	b.n	800bf4e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2201      	movs	r2, #1
 800bef6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2224      	movs	r2, #36	; 0x24
 800befe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f022 0201 	bic.w	r2, r2, #1
 800bf18:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	683a      	ldr	r2, [r7, #0]
 800bf2a:	430a      	orrs	r2, r1
 800bf2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 f850 	bl	800bfd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	68fa      	ldr	r2, [r7, #12]
 800bf3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2220      	movs	r2, #32
 800bf40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bf4c:	2300      	movs	r3, #0
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3710      	adds	r7, #16
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}

0800bf56 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf56:	b580      	push	{r7, lr}
 800bf58:	b084      	sub	sp, #16
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]
 800bf5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d101      	bne.n	800bf6e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bf6a:	2302      	movs	r3, #2
 800bf6c:	e02d      	b.n	800bfca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2201      	movs	r2, #1
 800bf72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2224      	movs	r2, #36	; 0x24
 800bf7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	681a      	ldr	r2, [r3, #0]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f022 0201 	bic.w	r2, r2, #1
 800bf94:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	683a      	ldr	r2, [r7, #0]
 800bfa6:	430a      	orrs	r2, r1
 800bfa8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 f812 	bl	800bfd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	68fa      	ldr	r2, [r7, #12]
 800bfb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2220      	movs	r2, #32
 800bfbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bfc8:	2300      	movs	r3, #0
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3710      	adds	r7, #16
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
	...

0800bfd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b085      	sub	sp, #20
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d108      	bne.n	800bff6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2201      	movs	r2, #1
 800bff0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bff4:	e031      	b.n	800c05a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bff6:	2310      	movs	r3, #16
 800bff8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bffa:	2310      	movs	r3, #16
 800bffc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	0e5b      	lsrs	r3, r3, #25
 800c006:	b2db      	uxtb	r3, r3
 800c008:	f003 0307 	and.w	r3, r3, #7
 800c00c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	0f5b      	lsrs	r3, r3, #29
 800c016:	b2db      	uxtb	r3, r3
 800c018:	f003 0307 	and.w	r3, r3, #7
 800c01c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c01e:	7bbb      	ldrb	r3, [r7, #14]
 800c020:	7b3a      	ldrb	r2, [r7, #12]
 800c022:	4911      	ldr	r1, [pc, #68]	; (800c068 <UARTEx_SetNbDataToProcess+0x94>)
 800c024:	5c8a      	ldrb	r2, [r1, r2]
 800c026:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c02a:	7b3a      	ldrb	r2, [r7, #12]
 800c02c:	490f      	ldr	r1, [pc, #60]	; (800c06c <UARTEx_SetNbDataToProcess+0x98>)
 800c02e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c030:	fb93 f3f2 	sdiv	r3, r3, r2
 800c034:	b29a      	uxth	r2, r3
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c03c:	7bfb      	ldrb	r3, [r7, #15]
 800c03e:	7b7a      	ldrb	r2, [r7, #13]
 800c040:	4909      	ldr	r1, [pc, #36]	; (800c068 <UARTEx_SetNbDataToProcess+0x94>)
 800c042:	5c8a      	ldrb	r2, [r1, r2]
 800c044:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c048:	7b7a      	ldrb	r2, [r7, #13]
 800c04a:	4908      	ldr	r1, [pc, #32]	; (800c06c <UARTEx_SetNbDataToProcess+0x98>)
 800c04c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c04e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c052:	b29a      	uxth	r2, r3
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c05a:	bf00      	nop
 800c05c:	3714      	adds	r7, #20
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr
 800c066:	bf00      	nop
 800c068:	08013058 	.word	0x08013058
 800c06c:	08013060 	.word	0x08013060

0800c070 <__NVIC_SetPriority>:
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	4603      	mov	r3, r0
 800c078:	6039      	str	r1, [r7, #0]
 800c07a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c07c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c080:	2b00      	cmp	r3, #0
 800c082:	db0a      	blt.n	800c09a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	b2da      	uxtb	r2, r3
 800c088:	490c      	ldr	r1, [pc, #48]	; (800c0bc <__NVIC_SetPriority+0x4c>)
 800c08a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c08e:	0112      	lsls	r2, r2, #4
 800c090:	b2d2      	uxtb	r2, r2
 800c092:	440b      	add	r3, r1
 800c094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c098:	e00a      	b.n	800c0b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	b2da      	uxtb	r2, r3
 800c09e:	4908      	ldr	r1, [pc, #32]	; (800c0c0 <__NVIC_SetPriority+0x50>)
 800c0a0:	88fb      	ldrh	r3, [r7, #6]
 800c0a2:	f003 030f 	and.w	r3, r3, #15
 800c0a6:	3b04      	subs	r3, #4
 800c0a8:	0112      	lsls	r2, r2, #4
 800c0aa:	b2d2      	uxtb	r2, r2
 800c0ac:	440b      	add	r3, r1
 800c0ae:	761a      	strb	r2, [r3, #24]
}
 800c0b0:	bf00      	nop
 800c0b2:	370c      	adds	r7, #12
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr
 800c0bc:	e000e100 	.word	0xe000e100
 800c0c0:	e000ed00 	.word	0xe000ed00

0800c0c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c0c8:	4b05      	ldr	r3, [pc, #20]	; (800c0e0 <SysTick_Handler+0x1c>)
 800c0ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c0cc:	f001 fd38 	bl	800db40 <xTaskGetSchedulerState>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d001      	beq.n	800c0da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c0d6:	f002 fb1f 	bl	800e718 <xPortSysTickHandler>
  }
}
 800c0da:	bf00      	nop
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	e000e010 	.word	0xe000e010

0800c0e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c0e8:	2100      	movs	r1, #0
 800c0ea:	f06f 0004 	mvn.w	r0, #4
 800c0ee:	f7ff ffbf 	bl	800c070 <__NVIC_SetPriority>
#endif
}
 800c0f2:	bf00      	nop
 800c0f4:	bd80      	pop	{r7, pc}
	...

0800c0f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c0f8:	b480      	push	{r7}
 800c0fa:	b083      	sub	sp, #12
 800c0fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0fe:	f3ef 8305 	mrs	r3, IPSR
 800c102:	603b      	str	r3, [r7, #0]
  return(result);
 800c104:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c106:	2b00      	cmp	r3, #0
 800c108:	d003      	beq.n	800c112 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c10a:	f06f 0305 	mvn.w	r3, #5
 800c10e:	607b      	str	r3, [r7, #4]
 800c110:	e00c      	b.n	800c12c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c112:	4b0a      	ldr	r3, [pc, #40]	; (800c13c <osKernelInitialize+0x44>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d105      	bne.n	800c126 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c11a:	4b08      	ldr	r3, [pc, #32]	; (800c13c <osKernelInitialize+0x44>)
 800c11c:	2201      	movs	r2, #1
 800c11e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c120:	2300      	movs	r3, #0
 800c122:	607b      	str	r3, [r7, #4]
 800c124:	e002      	b.n	800c12c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c126:	f04f 33ff 	mov.w	r3, #4294967295
 800c12a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c12c:	687b      	ldr	r3, [r7, #4]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	370c      	adds	r7, #12
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop
 800c13c:	2400cbb4 	.word	0x2400cbb4

0800c140 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c146:	f3ef 8305 	mrs	r3, IPSR
 800c14a:	603b      	str	r3, [r7, #0]
  return(result);
 800c14c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d003      	beq.n	800c15a <osKernelStart+0x1a>
    stat = osErrorISR;
 800c152:	f06f 0305 	mvn.w	r3, #5
 800c156:	607b      	str	r3, [r7, #4]
 800c158:	e010      	b.n	800c17c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c15a:	4b0b      	ldr	r3, [pc, #44]	; (800c188 <osKernelStart+0x48>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2b01      	cmp	r3, #1
 800c160:	d109      	bne.n	800c176 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c162:	f7ff ffbf 	bl	800c0e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c166:	4b08      	ldr	r3, [pc, #32]	; (800c188 <osKernelStart+0x48>)
 800c168:	2202      	movs	r2, #2
 800c16a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c16c:	f001 f87c 	bl	800d268 <vTaskStartScheduler>
      stat = osOK;
 800c170:	2300      	movs	r3, #0
 800c172:	607b      	str	r3, [r7, #4]
 800c174:	e002      	b.n	800c17c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c176:	f04f 33ff 	mov.w	r3, #4294967295
 800c17a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c17c:	687b      	ldr	r3, [r7, #4]
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3708      	adds	r7, #8
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	2400cbb4 	.word	0x2400cbb4

0800c18c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b08e      	sub	sp, #56	; 0x38
 800c190:	af04      	add	r7, sp, #16
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c198:	2300      	movs	r3, #0
 800c19a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c19c:	f3ef 8305 	mrs	r3, IPSR
 800c1a0:	617b      	str	r3, [r7, #20]
  return(result);
 800c1a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d17e      	bne.n	800c2a6 <osThreadNew+0x11a>
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d07b      	beq.n	800c2a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c1ae:	2380      	movs	r3, #128	; 0x80
 800c1b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c1b2:	2318      	movs	r3, #24
 800c1b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c1ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c1be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d045      	beq.n	800c252 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d002      	beq.n	800c1d4 <osThreadNew+0x48>
        name = attr->name;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	699b      	ldr	r3, [r3, #24]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d002      	beq.n	800c1e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	699b      	ldr	r3, [r3, #24]
 800c1e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c1e2:	69fb      	ldr	r3, [r7, #28]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d008      	beq.n	800c1fa <osThreadNew+0x6e>
 800c1e8:	69fb      	ldr	r3, [r7, #28]
 800c1ea:	2b38      	cmp	r3, #56	; 0x38
 800c1ec:	d805      	bhi.n	800c1fa <osThreadNew+0x6e>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	f003 0301 	and.w	r3, r3, #1
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d001      	beq.n	800c1fe <osThreadNew+0x72>
        return (NULL);
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	e054      	b.n	800c2a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	695b      	ldr	r3, [r3, #20]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d003      	beq.n	800c20e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	695b      	ldr	r3, [r3, #20]
 800c20a:	089b      	lsrs	r3, r3, #2
 800c20c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	689b      	ldr	r3, [r3, #8]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d00e      	beq.n	800c234 <osThreadNew+0xa8>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	2ba7      	cmp	r3, #167	; 0xa7
 800c21c:	d90a      	bls.n	800c234 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c222:	2b00      	cmp	r3, #0
 800c224:	d006      	beq.n	800c234 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	695b      	ldr	r3, [r3, #20]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d002      	beq.n	800c234 <osThreadNew+0xa8>
        mem = 1;
 800c22e:	2301      	movs	r3, #1
 800c230:	61bb      	str	r3, [r7, #24]
 800c232:	e010      	b.n	800c256 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	689b      	ldr	r3, [r3, #8]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d10c      	bne.n	800c256 <osThreadNew+0xca>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d108      	bne.n	800c256 <osThreadNew+0xca>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	691b      	ldr	r3, [r3, #16]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d104      	bne.n	800c256 <osThreadNew+0xca>
          mem = 0;
 800c24c:	2300      	movs	r3, #0
 800c24e:	61bb      	str	r3, [r7, #24]
 800c250:	e001      	b.n	800c256 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c252:	2300      	movs	r3, #0
 800c254:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d110      	bne.n	800c27e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c264:	9202      	str	r2, [sp, #8]
 800c266:	9301      	str	r3, [sp, #4]
 800c268:	69fb      	ldr	r3, [r7, #28]
 800c26a:	9300      	str	r3, [sp, #0]
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	6a3a      	ldr	r2, [r7, #32]
 800c270:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c272:	68f8      	ldr	r0, [r7, #12]
 800c274:	f000 fe0c 	bl	800ce90 <xTaskCreateStatic>
 800c278:	4603      	mov	r3, r0
 800c27a:	613b      	str	r3, [r7, #16]
 800c27c:	e013      	b.n	800c2a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d110      	bne.n	800c2a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c284:	6a3b      	ldr	r3, [r7, #32]
 800c286:	b29a      	uxth	r2, r3
 800c288:	f107 0310 	add.w	r3, r7, #16
 800c28c:	9301      	str	r3, [sp, #4]
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	9300      	str	r3, [sp, #0]
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c296:	68f8      	ldr	r0, [r7, #12]
 800c298:	f000 fe57 	bl	800cf4a <xTaskCreate>
 800c29c:	4603      	mov	r3, r0
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d001      	beq.n	800c2a6 <osThreadNew+0x11a>
            hTask = NULL;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c2a6:	693b      	ldr	r3, [r7, #16]
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3728      	adds	r7, #40	; 0x28
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2b8:	f3ef 8305 	mrs	r3, IPSR
 800c2bc:	60bb      	str	r3, [r7, #8]
  return(result);
 800c2be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d003      	beq.n	800c2cc <osDelay+0x1c>
    stat = osErrorISR;
 800c2c4:	f06f 0305 	mvn.w	r3, #5
 800c2c8:	60fb      	str	r3, [r7, #12]
 800c2ca:	e007      	b.n	800c2dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d002      	beq.n	800c2dc <osDelay+0x2c>
      vTaskDelay(ticks);
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 ff92 	bl	800d200 <vTaskDelay>
    }
  }

  return (stat);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3710      	adds	r7, #16
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
	...

0800c2e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c2e8:	b480      	push	{r7}
 800c2ea:	b085      	sub	sp, #20
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	4a07      	ldr	r2, [pc, #28]	; (800c314 <vApplicationGetIdleTaskMemory+0x2c>)
 800c2f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	4a06      	ldr	r2, [pc, #24]	; (800c318 <vApplicationGetIdleTaskMemory+0x30>)
 800c2fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2280      	movs	r2, #128	; 0x80
 800c304:	601a      	str	r2, [r3, #0]
}
 800c306:	bf00      	nop
 800c308:	3714      	adds	r7, #20
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop
 800c314:	2400cbb8 	.word	0x2400cbb8
 800c318:	2400cc60 	.word	0x2400cc60

0800c31c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c31c:	b480      	push	{r7}
 800c31e:	b085      	sub	sp, #20
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	4a07      	ldr	r2, [pc, #28]	; (800c348 <vApplicationGetTimerTaskMemory+0x2c>)
 800c32c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	4a06      	ldr	r2, [pc, #24]	; (800c34c <vApplicationGetTimerTaskMemory+0x30>)
 800c332:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c33a:	601a      	str	r2, [r3, #0]
}
 800c33c:	bf00      	nop
 800c33e:	3714      	adds	r7, #20
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr
 800c348:	2400ce60 	.word	0x2400ce60
 800c34c:	2400cf08 	.word	0x2400cf08

0800c350 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f103 0208 	add.w	r2, r3, #8
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f04f 32ff 	mov.w	r2, #4294967295
 800c368:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f103 0208 	add.w	r2, r3, #8
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f103 0208 	add.w	r2, r3, #8
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2200      	movs	r2, #0
 800c382:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c384:	bf00      	nop
 800c386:	370c      	adds	r7, #12
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c390:	b480      	push	{r7}
 800c392:	b083      	sub	sp, #12
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2200      	movs	r2, #0
 800c39c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c39e:	bf00      	nop
 800c3a0:	370c      	adds	r7, #12
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr

0800c3aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c3aa:	b480      	push	{r7}
 800c3ac:	b085      	sub	sp, #20
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
 800c3b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	68fa      	ldr	r2, [r7, #12]
 800c3be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	689a      	ldr	r2, [r3, #8]
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	683a      	ldr	r2, [r7, #0]
 800c3ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	683a      	ldr	r2, [r7, #0]
 800c3d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	687a      	ldr	r2, [r7, #4]
 800c3da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	1c5a      	adds	r2, r3, #1
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	601a      	str	r2, [r3, #0]
}
 800c3e6:	bf00      	nop
 800c3e8:	3714      	adds	r7, #20
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr

0800c3f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c3f2:	b480      	push	{r7}
 800c3f4:	b085      	sub	sp, #20
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
 800c3fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c408:	d103      	bne.n	800c412 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	60fb      	str	r3, [r7, #12]
 800c410:	e00c      	b.n	800c42c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	3308      	adds	r3, #8
 800c416:	60fb      	str	r3, [r7, #12]
 800c418:	e002      	b.n	800c420 <vListInsert+0x2e>
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	60fb      	str	r3, [r7, #12]
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	68ba      	ldr	r2, [r7, #8]
 800c428:	429a      	cmp	r2, r3
 800c42a:	d2f6      	bcs.n	800c41a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	685a      	ldr	r2, [r3, #4]
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	68fa      	ldr	r2, [r7, #12]
 800c440:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	683a      	ldr	r2, [r7, #0]
 800c446:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	1c5a      	adds	r2, r3, #1
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	601a      	str	r2, [r3, #0]
}
 800c458:	bf00      	nop
 800c45a:	3714      	adds	r7, #20
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c464:	b480      	push	{r7}
 800c466:	b085      	sub	sp, #20
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	691b      	ldr	r3, [r3, #16]
 800c470:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	6892      	ldr	r2, [r2, #8]
 800c47a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	689b      	ldr	r3, [r3, #8]
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	6852      	ldr	r2, [r2, #4]
 800c484:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d103      	bne.n	800c498 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	689a      	ldr	r2, [r3, #8]
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	1e5a      	subs	r2, r3, #1
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3714      	adds	r7, #20
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr

0800c4b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d10a      	bne.n	800c4e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d0:	f383 8811 	msr	BASEPRI, r3
 800c4d4:	f3bf 8f6f 	isb	sy
 800c4d8:	f3bf 8f4f 	dsb	sy
 800c4dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c4de:	bf00      	nop
 800c4e0:	e7fe      	b.n	800c4e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c4e2:	f002 f887 	bl	800e5f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ee:	68f9      	ldr	r1, [r7, #12]
 800c4f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c4f2:	fb01 f303 	mul.w	r3, r1, r3
 800c4f6:	441a      	add	r2, r3
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2200      	movs	r2, #0
 800c500:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681a      	ldr	r2, [r3, #0]
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c512:	3b01      	subs	r3, #1
 800c514:	68f9      	ldr	r1, [r7, #12]
 800c516:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c518:	fb01 f303 	mul.w	r3, r1, r3
 800c51c:	441a      	add	r2, r3
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	22ff      	movs	r2, #255	; 0xff
 800c526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	22ff      	movs	r2, #255	; 0xff
 800c52e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d114      	bne.n	800c562 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	691b      	ldr	r3, [r3, #16]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d01a      	beq.n	800c576 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	3310      	adds	r3, #16
 800c544:	4618      	mov	r0, r3
 800c546:	f001 f939 	bl	800d7bc <xTaskRemoveFromEventList>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d012      	beq.n	800c576 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c550:	4b0c      	ldr	r3, [pc, #48]	; (800c584 <xQueueGenericReset+0xcc>)
 800c552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c556:	601a      	str	r2, [r3, #0]
 800c558:	f3bf 8f4f 	dsb	sy
 800c55c:	f3bf 8f6f 	isb	sy
 800c560:	e009      	b.n	800c576 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	3310      	adds	r3, #16
 800c566:	4618      	mov	r0, r3
 800c568:	f7ff fef2 	bl	800c350 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	3324      	adds	r3, #36	; 0x24
 800c570:	4618      	mov	r0, r3
 800c572:	f7ff feed 	bl	800c350 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c576:	f002 f86d 	bl	800e654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c57a:	2301      	movs	r3, #1
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	e000ed04 	.word	0xe000ed04

0800c588 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b08e      	sub	sp, #56	; 0x38
 800c58c:	af02      	add	r7, sp, #8
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	607a      	str	r2, [r7, #4]
 800c594:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d10a      	bne.n	800c5b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a0:	f383 8811 	msr	BASEPRI, r3
 800c5a4:	f3bf 8f6f 	isb	sy
 800c5a8:	f3bf 8f4f 	dsb	sy
 800c5ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c5ae:	bf00      	nop
 800c5b0:	e7fe      	b.n	800c5b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d10a      	bne.n	800c5ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5bc:	f383 8811 	msr	BASEPRI, r3
 800c5c0:	f3bf 8f6f 	isb	sy
 800c5c4:	f3bf 8f4f 	dsb	sy
 800c5c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c5ca:	bf00      	nop
 800c5cc:	e7fe      	b.n	800c5cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d002      	beq.n	800c5da <xQueueGenericCreateStatic+0x52>
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d001      	beq.n	800c5de <xQueueGenericCreateStatic+0x56>
 800c5da:	2301      	movs	r3, #1
 800c5dc:	e000      	b.n	800c5e0 <xQueueGenericCreateStatic+0x58>
 800c5de:	2300      	movs	r3, #0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d10a      	bne.n	800c5fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e8:	f383 8811 	msr	BASEPRI, r3
 800c5ec:	f3bf 8f6f 	isb	sy
 800c5f0:	f3bf 8f4f 	dsb	sy
 800c5f4:	623b      	str	r3, [r7, #32]
}
 800c5f6:	bf00      	nop
 800c5f8:	e7fe      	b.n	800c5f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d102      	bne.n	800c606 <xQueueGenericCreateStatic+0x7e>
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d101      	bne.n	800c60a <xQueueGenericCreateStatic+0x82>
 800c606:	2301      	movs	r3, #1
 800c608:	e000      	b.n	800c60c <xQueueGenericCreateStatic+0x84>
 800c60a:	2300      	movs	r3, #0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d10a      	bne.n	800c626 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c614:	f383 8811 	msr	BASEPRI, r3
 800c618:	f3bf 8f6f 	isb	sy
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	61fb      	str	r3, [r7, #28]
}
 800c622:	bf00      	nop
 800c624:	e7fe      	b.n	800c624 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c626:	2350      	movs	r3, #80	; 0x50
 800c628:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	2b50      	cmp	r3, #80	; 0x50
 800c62e:	d00a      	beq.n	800c646 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c634:	f383 8811 	msr	BASEPRI, r3
 800c638:	f3bf 8f6f 	isb	sy
 800c63c:	f3bf 8f4f 	dsb	sy
 800c640:	61bb      	str	r3, [r7, #24]
}
 800c642:	bf00      	nop
 800c644:	e7fe      	b.n	800c644 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c646:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d00d      	beq.n	800c66e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c654:	2201      	movs	r2, #1
 800c656:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c65a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c660:	9300      	str	r3, [sp, #0]
 800c662:	4613      	mov	r3, r2
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	68b9      	ldr	r1, [r7, #8]
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f000 f805 	bl	800c678 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c670:	4618      	mov	r0, r3
 800c672:	3730      	adds	r7, #48	; 0x30
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}

0800c678 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b084      	sub	sp, #16
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	60f8      	str	r0, [r7, #12]
 800c680:	60b9      	str	r1, [r7, #8]
 800c682:	607a      	str	r2, [r7, #4]
 800c684:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d103      	bne.n	800c694 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	69ba      	ldr	r2, [r7, #24]
 800c690:	601a      	str	r2, [r3, #0]
 800c692:	e002      	b.n	800c69a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c694:	69bb      	ldr	r3, [r7, #24]
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c69a:	69bb      	ldr	r3, [r7, #24]
 800c69c:	68fa      	ldr	r2, [r7, #12]
 800c69e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	68ba      	ldr	r2, [r7, #8]
 800c6a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c6a6:	2101      	movs	r1, #1
 800c6a8:	69b8      	ldr	r0, [r7, #24]
 800c6aa:	f7ff ff05 	bl	800c4b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c6ae:	69bb      	ldr	r3, [r7, #24]
 800c6b0:	78fa      	ldrb	r2, [r7, #3]
 800c6b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c6b6:	bf00      	nop
 800c6b8:	3710      	adds	r7, #16
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
	...

0800c6c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b08e      	sub	sp, #56	; 0x38
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	60f8      	str	r0, [r7, #12]
 800c6c8:	60b9      	str	r1, [r7, #8]
 800c6ca:	607a      	str	r2, [r7, #4]
 800c6cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d10a      	bne.n	800c6f2 <xQueueGenericSend+0x32>
	__asm volatile
 800c6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e0:	f383 8811 	msr	BASEPRI, r3
 800c6e4:	f3bf 8f6f 	isb	sy
 800c6e8:	f3bf 8f4f 	dsb	sy
 800c6ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c6ee:	bf00      	nop
 800c6f0:	e7fe      	b.n	800c6f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d103      	bne.n	800c700 <xQueueGenericSend+0x40>
 800c6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d101      	bne.n	800c704 <xQueueGenericSend+0x44>
 800c700:	2301      	movs	r3, #1
 800c702:	e000      	b.n	800c706 <xQueueGenericSend+0x46>
 800c704:	2300      	movs	r3, #0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d10a      	bne.n	800c720 <xQueueGenericSend+0x60>
	__asm volatile
 800c70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c70e:	f383 8811 	msr	BASEPRI, r3
 800c712:	f3bf 8f6f 	isb	sy
 800c716:	f3bf 8f4f 	dsb	sy
 800c71a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c71c:	bf00      	nop
 800c71e:	e7fe      	b.n	800c71e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	2b02      	cmp	r3, #2
 800c724:	d103      	bne.n	800c72e <xQueueGenericSend+0x6e>
 800c726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c72a:	2b01      	cmp	r3, #1
 800c72c:	d101      	bne.n	800c732 <xQueueGenericSend+0x72>
 800c72e:	2301      	movs	r3, #1
 800c730:	e000      	b.n	800c734 <xQueueGenericSend+0x74>
 800c732:	2300      	movs	r3, #0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d10a      	bne.n	800c74e <xQueueGenericSend+0x8e>
	__asm volatile
 800c738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73c:	f383 8811 	msr	BASEPRI, r3
 800c740:	f3bf 8f6f 	isb	sy
 800c744:	f3bf 8f4f 	dsb	sy
 800c748:	623b      	str	r3, [r7, #32]
}
 800c74a:	bf00      	nop
 800c74c:	e7fe      	b.n	800c74c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c74e:	f001 f9f7 	bl	800db40 <xTaskGetSchedulerState>
 800c752:	4603      	mov	r3, r0
 800c754:	2b00      	cmp	r3, #0
 800c756:	d102      	bne.n	800c75e <xQueueGenericSend+0x9e>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d101      	bne.n	800c762 <xQueueGenericSend+0xa2>
 800c75e:	2301      	movs	r3, #1
 800c760:	e000      	b.n	800c764 <xQueueGenericSend+0xa4>
 800c762:	2300      	movs	r3, #0
 800c764:	2b00      	cmp	r3, #0
 800c766:	d10a      	bne.n	800c77e <xQueueGenericSend+0xbe>
	__asm volatile
 800c768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76c:	f383 8811 	msr	BASEPRI, r3
 800c770:	f3bf 8f6f 	isb	sy
 800c774:	f3bf 8f4f 	dsb	sy
 800c778:	61fb      	str	r3, [r7, #28]
}
 800c77a:	bf00      	nop
 800c77c:	e7fe      	b.n	800c77c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c77e:	f001 ff39 	bl	800e5f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d302      	bcc.n	800c794 <xQueueGenericSend+0xd4>
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	2b02      	cmp	r3, #2
 800c792:	d129      	bne.n	800c7e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c794:	683a      	ldr	r2, [r7, #0]
 800c796:	68b9      	ldr	r1, [r7, #8]
 800c798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c79a:	f000 fa0b 	bl	800cbb4 <prvCopyDataToQueue>
 800c79e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d010      	beq.n	800c7ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7aa:	3324      	adds	r3, #36	; 0x24
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f001 f805 	bl	800d7bc <xTaskRemoveFromEventList>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d013      	beq.n	800c7e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c7b8:	4b3f      	ldr	r3, [pc, #252]	; (800c8b8 <xQueueGenericSend+0x1f8>)
 800c7ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7be:	601a      	str	r2, [r3, #0]
 800c7c0:	f3bf 8f4f 	dsb	sy
 800c7c4:	f3bf 8f6f 	isb	sy
 800c7c8:	e00a      	b.n	800c7e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d007      	beq.n	800c7e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c7d0:	4b39      	ldr	r3, [pc, #228]	; (800c8b8 <xQueueGenericSend+0x1f8>)
 800c7d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7d6:	601a      	str	r2, [r3, #0]
 800c7d8:	f3bf 8f4f 	dsb	sy
 800c7dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c7e0:	f001 ff38 	bl	800e654 <vPortExitCritical>
				return pdPASS;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	e063      	b.n	800c8b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d103      	bne.n	800c7f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c7ee:	f001 ff31 	bl	800e654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	e05c      	b.n	800c8b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c7f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d106      	bne.n	800c80a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c7fc:	f107 0314 	add.w	r3, r7, #20
 800c800:	4618      	mov	r0, r3
 800c802:	f001 f83f 	bl	800d884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c806:	2301      	movs	r3, #1
 800c808:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c80a:	f001 ff23 	bl	800e654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c80e:	f000 fd9b 	bl	800d348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c812:	f001 feef 	bl	800e5f4 <vPortEnterCritical>
 800c816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c818:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c81c:	b25b      	sxtb	r3, r3
 800c81e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c822:	d103      	bne.n	800c82c <xQueueGenericSend+0x16c>
 800c824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c826:	2200      	movs	r2, #0
 800c828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c832:	b25b      	sxtb	r3, r3
 800c834:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c838:	d103      	bne.n	800c842 <xQueueGenericSend+0x182>
 800c83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83c:	2200      	movs	r2, #0
 800c83e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c842:	f001 ff07 	bl	800e654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c846:	1d3a      	adds	r2, r7, #4
 800c848:	f107 0314 	add.w	r3, r7, #20
 800c84c:	4611      	mov	r1, r2
 800c84e:	4618      	mov	r0, r3
 800c850:	f001 f82e 	bl	800d8b0 <xTaskCheckForTimeOut>
 800c854:	4603      	mov	r3, r0
 800c856:	2b00      	cmp	r3, #0
 800c858:	d124      	bne.n	800c8a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c85a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c85c:	f000 faa2 	bl	800cda4 <prvIsQueueFull>
 800c860:	4603      	mov	r3, r0
 800c862:	2b00      	cmp	r3, #0
 800c864:	d018      	beq.n	800c898 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c868:	3310      	adds	r3, #16
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	4611      	mov	r1, r2
 800c86e:	4618      	mov	r0, r3
 800c870:	f000 ff54 	bl	800d71c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c876:	f000 fa2d 	bl	800ccd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c87a:	f000 fd73 	bl	800d364 <xTaskResumeAll>
 800c87e:	4603      	mov	r3, r0
 800c880:	2b00      	cmp	r3, #0
 800c882:	f47f af7c 	bne.w	800c77e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c886:	4b0c      	ldr	r3, [pc, #48]	; (800c8b8 <xQueueGenericSend+0x1f8>)
 800c888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c88c:	601a      	str	r2, [r3, #0]
 800c88e:	f3bf 8f4f 	dsb	sy
 800c892:	f3bf 8f6f 	isb	sy
 800c896:	e772      	b.n	800c77e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c89a:	f000 fa1b 	bl	800ccd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c89e:	f000 fd61 	bl	800d364 <xTaskResumeAll>
 800c8a2:	e76c      	b.n	800c77e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c8a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8a6:	f000 fa15 	bl	800ccd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c8aa:	f000 fd5b 	bl	800d364 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c8ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3738      	adds	r7, #56	; 0x38
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}
 800c8b8:	e000ed04 	.word	0xe000ed04

0800c8bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b090      	sub	sp, #64	; 0x40
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	60b9      	str	r1, [r7, #8]
 800c8c6:	607a      	str	r2, [r7, #4]
 800c8c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d10a      	bne.n	800c8ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d8:	f383 8811 	msr	BASEPRI, r3
 800c8dc:	f3bf 8f6f 	isb	sy
 800c8e0:	f3bf 8f4f 	dsb	sy
 800c8e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c8e6:	bf00      	nop
 800c8e8:	e7fe      	b.n	800c8e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d103      	bne.n	800c8f8 <xQueueGenericSendFromISR+0x3c>
 800c8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d101      	bne.n	800c8fc <xQueueGenericSendFromISR+0x40>
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	e000      	b.n	800c8fe <xQueueGenericSendFromISR+0x42>
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d10a      	bne.n	800c918 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c906:	f383 8811 	msr	BASEPRI, r3
 800c90a:	f3bf 8f6f 	isb	sy
 800c90e:	f3bf 8f4f 	dsb	sy
 800c912:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c914:	bf00      	nop
 800c916:	e7fe      	b.n	800c916 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	2b02      	cmp	r3, #2
 800c91c:	d103      	bne.n	800c926 <xQueueGenericSendFromISR+0x6a>
 800c91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c922:	2b01      	cmp	r3, #1
 800c924:	d101      	bne.n	800c92a <xQueueGenericSendFromISR+0x6e>
 800c926:	2301      	movs	r3, #1
 800c928:	e000      	b.n	800c92c <xQueueGenericSendFromISR+0x70>
 800c92a:	2300      	movs	r3, #0
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d10a      	bne.n	800c946 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c934:	f383 8811 	msr	BASEPRI, r3
 800c938:	f3bf 8f6f 	isb	sy
 800c93c:	f3bf 8f4f 	dsb	sy
 800c940:	623b      	str	r3, [r7, #32]
}
 800c942:	bf00      	nop
 800c944:	e7fe      	b.n	800c944 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c946:	f001 ff37 	bl	800e7b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c94a:	f3ef 8211 	mrs	r2, BASEPRI
 800c94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c952:	f383 8811 	msr	BASEPRI, r3
 800c956:	f3bf 8f6f 	isb	sy
 800c95a:	f3bf 8f4f 	dsb	sy
 800c95e:	61fa      	str	r2, [r7, #28]
 800c960:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c962:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c964:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c96e:	429a      	cmp	r2, r3
 800c970:	d302      	bcc.n	800c978 <xQueueGenericSendFromISR+0xbc>
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	2b02      	cmp	r3, #2
 800c976:	d12f      	bne.n	800c9d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c97e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c986:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c988:	683a      	ldr	r2, [r7, #0]
 800c98a:	68b9      	ldr	r1, [r7, #8]
 800c98c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c98e:	f000 f911 	bl	800cbb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c992:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c99a:	d112      	bne.n	800c9c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d016      	beq.n	800c9d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a6:	3324      	adds	r3, #36	; 0x24
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f000 ff07 	bl	800d7bc <xTaskRemoveFromEventList>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d00e      	beq.n	800c9d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d00b      	beq.n	800c9d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2201      	movs	r2, #1
 800c9be:	601a      	str	r2, [r3, #0]
 800c9c0:	e007      	b.n	800c9d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c9c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	b2db      	uxtb	r3, r3
 800c9ca:	b25a      	sxtb	r2, r3
 800c9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c9d6:	e001      	b.n	800c9dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9de:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c9e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c9e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3740      	adds	r7, #64	; 0x40
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
	...

0800c9f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b08c      	sub	sp, #48	; 0x30
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	60f8      	str	r0, [r7, #12]
 800c9fc:	60b9      	str	r1, [r7, #8]
 800c9fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ca00:	2300      	movs	r3, #0
 800ca02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ca08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d10a      	bne.n	800ca24 <xQueueReceive+0x30>
	__asm volatile
 800ca0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca12:	f383 8811 	msr	BASEPRI, r3
 800ca16:	f3bf 8f6f 	isb	sy
 800ca1a:	f3bf 8f4f 	dsb	sy
 800ca1e:	623b      	str	r3, [r7, #32]
}
 800ca20:	bf00      	nop
 800ca22:	e7fe      	b.n	800ca22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d103      	bne.n	800ca32 <xQueueReceive+0x3e>
 800ca2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d101      	bne.n	800ca36 <xQueueReceive+0x42>
 800ca32:	2301      	movs	r3, #1
 800ca34:	e000      	b.n	800ca38 <xQueueReceive+0x44>
 800ca36:	2300      	movs	r3, #0
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d10a      	bne.n	800ca52 <xQueueReceive+0x5e>
	__asm volatile
 800ca3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca40:	f383 8811 	msr	BASEPRI, r3
 800ca44:	f3bf 8f6f 	isb	sy
 800ca48:	f3bf 8f4f 	dsb	sy
 800ca4c:	61fb      	str	r3, [r7, #28]
}
 800ca4e:	bf00      	nop
 800ca50:	e7fe      	b.n	800ca50 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca52:	f001 f875 	bl	800db40 <xTaskGetSchedulerState>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d102      	bne.n	800ca62 <xQueueReceive+0x6e>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d101      	bne.n	800ca66 <xQueueReceive+0x72>
 800ca62:	2301      	movs	r3, #1
 800ca64:	e000      	b.n	800ca68 <xQueueReceive+0x74>
 800ca66:	2300      	movs	r3, #0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d10a      	bne.n	800ca82 <xQueueReceive+0x8e>
	__asm volatile
 800ca6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca70:	f383 8811 	msr	BASEPRI, r3
 800ca74:	f3bf 8f6f 	isb	sy
 800ca78:	f3bf 8f4f 	dsb	sy
 800ca7c:	61bb      	str	r3, [r7, #24]
}
 800ca7e:	bf00      	nop
 800ca80:	e7fe      	b.n	800ca80 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca82:	f001 fdb7 	bl	800e5f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca8a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d01f      	beq.n	800cad2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ca92:	68b9      	ldr	r1, [r7, #8]
 800ca94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca96:	f000 f8f7 	bl	800cc88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ca9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9c:	1e5a      	subs	r2, r3, #1
 800ca9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800caa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa4:	691b      	ldr	r3, [r3, #16]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d00f      	beq.n	800caca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800caaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caac:	3310      	adds	r3, #16
 800caae:	4618      	mov	r0, r3
 800cab0:	f000 fe84 	bl	800d7bc <xTaskRemoveFromEventList>
 800cab4:	4603      	mov	r3, r0
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d007      	beq.n	800caca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800caba:	4b3d      	ldr	r3, [pc, #244]	; (800cbb0 <xQueueReceive+0x1bc>)
 800cabc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cac0:	601a      	str	r2, [r3, #0]
 800cac2:	f3bf 8f4f 	dsb	sy
 800cac6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800caca:	f001 fdc3 	bl	800e654 <vPortExitCritical>
				return pdPASS;
 800cace:	2301      	movs	r3, #1
 800cad0:	e069      	b.n	800cba6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d103      	bne.n	800cae0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cad8:	f001 fdbc 	bl	800e654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cadc:	2300      	movs	r3, #0
 800cade:	e062      	b.n	800cba6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d106      	bne.n	800caf4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cae6:	f107 0310 	add.w	r3, r7, #16
 800caea:	4618      	mov	r0, r3
 800caec:	f000 feca 	bl	800d884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800caf0:	2301      	movs	r3, #1
 800caf2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800caf4:	f001 fdae 	bl	800e654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800caf8:	f000 fc26 	bl	800d348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cafc:	f001 fd7a 	bl	800e5f4 <vPortEnterCritical>
 800cb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb06:	b25b      	sxtb	r3, r3
 800cb08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb0c:	d103      	bne.n	800cb16 <xQueueReceive+0x122>
 800cb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb10:	2200      	movs	r2, #0
 800cb12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb1c:	b25b      	sxtb	r3, r3
 800cb1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb22:	d103      	bne.n	800cb2c <xQueueReceive+0x138>
 800cb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb26:	2200      	movs	r2, #0
 800cb28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb2c:	f001 fd92 	bl	800e654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb30:	1d3a      	adds	r2, r7, #4
 800cb32:	f107 0310 	add.w	r3, r7, #16
 800cb36:	4611      	mov	r1, r2
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f000 feb9 	bl	800d8b0 <xTaskCheckForTimeOut>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d123      	bne.n	800cb8c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb46:	f000 f917 	bl	800cd78 <prvIsQueueEmpty>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d017      	beq.n	800cb80 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb52:	3324      	adds	r3, #36	; 0x24
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	4611      	mov	r1, r2
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f000 fddf 	bl	800d71c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cb5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb60:	f000 f8b8 	bl	800ccd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cb64:	f000 fbfe 	bl	800d364 <xTaskResumeAll>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d189      	bne.n	800ca82 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cb6e:	4b10      	ldr	r3, [pc, #64]	; (800cbb0 <xQueueReceive+0x1bc>)
 800cb70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb74:	601a      	str	r2, [r3, #0]
 800cb76:	f3bf 8f4f 	dsb	sy
 800cb7a:	f3bf 8f6f 	isb	sy
 800cb7e:	e780      	b.n	800ca82 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cb80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb82:	f000 f8a7 	bl	800ccd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb86:	f000 fbed 	bl	800d364 <xTaskResumeAll>
 800cb8a:	e77a      	b.n	800ca82 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cb8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb8e:	f000 f8a1 	bl	800ccd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb92:	f000 fbe7 	bl	800d364 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb98:	f000 f8ee 	bl	800cd78 <prvIsQueueEmpty>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	f43f af6f 	beq.w	800ca82 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cba4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3730      	adds	r7, #48	; 0x30
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
 800cbae:	bf00      	nop
 800cbb0:	e000ed04 	.word	0xe000ed04

0800cbb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b086      	sub	sp, #24
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	60f8      	str	r0, [r7, #12]
 800cbbc:	60b9      	str	r1, [r7, #8]
 800cbbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d10d      	bne.n	800cbee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d14d      	bne.n	800cc76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	689b      	ldr	r3, [r3, #8]
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f000 ffcc 	bl	800db7c <xTaskPriorityDisinherit>
 800cbe4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	609a      	str	r2, [r3, #8]
 800cbec:	e043      	b.n	800cc76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d119      	bne.n	800cc28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	6858      	ldr	r0, [r3, #4]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	68b9      	ldr	r1, [r7, #8]
 800cc00:	f005 fb04 	bl	801220c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	685a      	ldr	r2, [r3, #4]
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc0c:	441a      	add	r2, r3
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	685a      	ldr	r2, [r3, #4]
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	689b      	ldr	r3, [r3, #8]
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d32b      	bcc.n	800cc76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681a      	ldr	r2, [r3, #0]
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	605a      	str	r2, [r3, #4]
 800cc26:	e026      	b.n	800cc76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	68d8      	ldr	r0, [r3, #12]
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc30:	461a      	mov	r2, r3
 800cc32:	68b9      	ldr	r1, [r7, #8]
 800cc34:	f005 faea 	bl	801220c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	68da      	ldr	r2, [r3, #12]
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc40:	425b      	negs	r3, r3
 800cc42:	441a      	add	r2, r3
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	68da      	ldr	r2, [r3, #12]
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d207      	bcs.n	800cc64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	689a      	ldr	r2, [r3, #8]
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc5c:	425b      	negs	r3, r3
 800cc5e:	441a      	add	r2, r3
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2b02      	cmp	r3, #2
 800cc68:	d105      	bne.n	800cc76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d002      	beq.n	800cc76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	3b01      	subs	r3, #1
 800cc74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	1c5a      	adds	r2, r3, #1
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cc7e:	697b      	ldr	r3, [r7, #20]
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3718      	adds	r7, #24
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}

0800cc88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d018      	beq.n	800cccc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	68da      	ldr	r2, [r3, #12]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cca2:	441a      	add	r2, r3
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	68da      	ldr	r2, [r3, #12]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	689b      	ldr	r3, [r3, #8]
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d303      	bcc.n	800ccbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681a      	ldr	r2, [r3, #0]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	68d9      	ldr	r1, [r3, #12]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	6838      	ldr	r0, [r7, #0]
 800ccc8:	f005 faa0 	bl	801220c <memcpy>
	}
}
 800cccc:	bf00      	nop
 800ccce:	3708      	adds	r7, #8
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ccdc:	f001 fc8a 	bl	800e5f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cce6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cce8:	e011      	b.n	800cd0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d012      	beq.n	800cd18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	3324      	adds	r3, #36	; 0x24
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f000 fd60 	bl	800d7bc <xTaskRemoveFromEventList>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d001      	beq.n	800cd06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cd02:	f000 fe37 	bl	800d974 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cd06:	7bfb      	ldrb	r3, [r7, #15]
 800cd08:	3b01      	subs	r3, #1
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	dce9      	bgt.n	800ccea <prvUnlockQueue+0x16>
 800cd16:	e000      	b.n	800cd1a <prvUnlockQueue+0x46>
					break;
 800cd18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	22ff      	movs	r2, #255	; 0xff
 800cd1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cd22:	f001 fc97 	bl	800e654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cd26:	f001 fc65 	bl	800e5f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd32:	e011      	b.n	800cd58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	691b      	ldr	r3, [r3, #16]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d012      	beq.n	800cd62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	3310      	adds	r3, #16
 800cd40:	4618      	mov	r0, r3
 800cd42:	f000 fd3b 	bl	800d7bc <xTaskRemoveFromEventList>
 800cd46:	4603      	mov	r3, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d001      	beq.n	800cd50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cd4c:	f000 fe12 	bl	800d974 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cd50:	7bbb      	ldrb	r3, [r7, #14]
 800cd52:	3b01      	subs	r3, #1
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	dce9      	bgt.n	800cd34 <prvUnlockQueue+0x60>
 800cd60:	e000      	b.n	800cd64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cd62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	22ff      	movs	r2, #255	; 0xff
 800cd68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cd6c:	f001 fc72 	bl	800e654 <vPortExitCritical>
}
 800cd70:	bf00      	nop
 800cd72:	3710      	adds	r7, #16
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd80:	f001 fc38 	bl	800e5f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d102      	bne.n	800cd92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	60fb      	str	r3, [r7, #12]
 800cd90:	e001      	b.n	800cd96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cd92:	2300      	movs	r3, #0
 800cd94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd96:	f001 fc5d 	bl	800e654 <vPortExitCritical>

	return xReturn;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3710      	adds	r7, #16
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cdac:	f001 fc22 	bl	800e5f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d102      	bne.n	800cdc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	60fb      	str	r3, [r7, #12]
 800cdc0:	e001      	b.n	800cdc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cdc6:	f001 fc45 	bl	800e654 <vPortExitCritical>

	return xReturn;
 800cdca:	68fb      	ldr	r3, [r7, #12]
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3710      	adds	r7, #16
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b085      	sub	sp, #20
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cdde:	2300      	movs	r3, #0
 800cde0:	60fb      	str	r3, [r7, #12]
 800cde2:	e014      	b.n	800ce0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cde4:	4a0f      	ldr	r2, [pc, #60]	; (800ce24 <vQueueAddToRegistry+0x50>)
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d10b      	bne.n	800ce08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cdf0:	490c      	ldr	r1, [pc, #48]	; (800ce24 <vQueueAddToRegistry+0x50>)
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	683a      	ldr	r2, [r7, #0]
 800cdf6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cdfa:	4a0a      	ldr	r2, [pc, #40]	; (800ce24 <vQueueAddToRegistry+0x50>)
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	00db      	lsls	r3, r3, #3
 800ce00:	4413      	add	r3, r2
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ce06:	e006      	b.n	800ce16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	60fb      	str	r3, [r7, #12]
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	2b07      	cmp	r3, #7
 800ce12:	d9e7      	bls.n	800cde4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ce14:	bf00      	nop
 800ce16:	bf00      	nop
 800ce18:	3714      	adds	r7, #20
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr
 800ce22:	bf00      	nop
 800ce24:	2400df08 	.word	0x2400df08

0800ce28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b086      	sub	sp, #24
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	60f8      	str	r0, [r7, #12]
 800ce30:	60b9      	str	r1, [r7, #8]
 800ce32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ce38:	f001 fbdc 	bl	800e5f4 <vPortEnterCritical>
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce42:	b25b      	sxtb	r3, r3
 800ce44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce48:	d103      	bne.n	800ce52 <vQueueWaitForMessageRestricted+0x2a>
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce58:	b25b      	sxtb	r3, r3
 800ce5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce5e:	d103      	bne.n	800ce68 <vQueueWaitForMessageRestricted+0x40>
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	2200      	movs	r2, #0
 800ce64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce68:	f001 fbf4 	bl	800e654 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d106      	bne.n	800ce82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	3324      	adds	r3, #36	; 0x24
 800ce78:	687a      	ldr	r2, [r7, #4]
 800ce7a:	68b9      	ldr	r1, [r7, #8]
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f000 fc71 	bl	800d764 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ce82:	6978      	ldr	r0, [r7, #20]
 800ce84:	f7ff ff26 	bl	800ccd4 <prvUnlockQueue>
	}
 800ce88:	bf00      	nop
 800ce8a:	3718      	adds	r7, #24
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b08e      	sub	sp, #56	; 0x38
 800ce94:	af04      	add	r7, sp, #16
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	60b9      	str	r1, [r7, #8]
 800ce9a:	607a      	str	r2, [r7, #4]
 800ce9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ce9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d10a      	bne.n	800ceba <xTaskCreateStatic+0x2a>
	__asm volatile
 800cea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea8:	f383 8811 	msr	BASEPRI, r3
 800ceac:	f3bf 8f6f 	isb	sy
 800ceb0:	f3bf 8f4f 	dsb	sy
 800ceb4:	623b      	str	r3, [r7, #32]
}
 800ceb6:	bf00      	nop
 800ceb8:	e7fe      	b.n	800ceb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ceba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d10a      	bne.n	800ced6 <xTaskCreateStatic+0x46>
	__asm volatile
 800cec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec4:	f383 8811 	msr	BASEPRI, r3
 800cec8:	f3bf 8f6f 	isb	sy
 800cecc:	f3bf 8f4f 	dsb	sy
 800ced0:	61fb      	str	r3, [r7, #28]
}
 800ced2:	bf00      	nop
 800ced4:	e7fe      	b.n	800ced4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ced6:	23a8      	movs	r3, #168	; 0xa8
 800ced8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	2ba8      	cmp	r3, #168	; 0xa8
 800cede:	d00a      	beq.n	800cef6 <xTaskCreateStatic+0x66>
	__asm volatile
 800cee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee4:	f383 8811 	msr	BASEPRI, r3
 800cee8:	f3bf 8f6f 	isb	sy
 800ceec:	f3bf 8f4f 	dsb	sy
 800cef0:	61bb      	str	r3, [r7, #24]
}
 800cef2:	bf00      	nop
 800cef4:	e7fe      	b.n	800cef4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cef6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d01e      	beq.n	800cf3c <xTaskCreateStatic+0xac>
 800cefe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d01b      	beq.n	800cf3c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf06:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cf08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf0c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf10:	2202      	movs	r2, #2
 800cf12:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cf16:	2300      	movs	r3, #0
 800cf18:	9303      	str	r3, [sp, #12]
 800cf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1c:	9302      	str	r3, [sp, #8]
 800cf1e:	f107 0314 	add.w	r3, r7, #20
 800cf22:	9301      	str	r3, [sp, #4]
 800cf24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf26:	9300      	str	r3, [sp, #0]
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	68b9      	ldr	r1, [r7, #8]
 800cf2e:	68f8      	ldr	r0, [r7, #12]
 800cf30:	f000 f850 	bl	800cfd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf36:	f000 f8f3 	bl	800d120 <prvAddNewTaskToReadyList>
 800cf3a:	e001      	b.n	800cf40 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cf40:	697b      	ldr	r3, [r7, #20]
	}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3728      	adds	r7, #40	; 0x28
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b08c      	sub	sp, #48	; 0x30
 800cf4e:	af04      	add	r7, sp, #16
 800cf50:	60f8      	str	r0, [r7, #12]
 800cf52:	60b9      	str	r1, [r7, #8]
 800cf54:	603b      	str	r3, [r7, #0]
 800cf56:	4613      	mov	r3, r2
 800cf58:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cf5a:	88fb      	ldrh	r3, [r7, #6]
 800cf5c:	009b      	lsls	r3, r3, #2
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f001 fc6a 	bl	800e838 <pvPortMalloc>
 800cf64:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d00e      	beq.n	800cf8a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cf6c:	20a8      	movs	r0, #168	; 0xa8
 800cf6e:	f001 fc63 	bl	800e838 <pvPortMalloc>
 800cf72:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cf74:	69fb      	ldr	r3, [r7, #28]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d003      	beq.n	800cf82 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cf7a:	69fb      	ldr	r3, [r7, #28]
 800cf7c:	697a      	ldr	r2, [r7, #20]
 800cf7e:	631a      	str	r2, [r3, #48]	; 0x30
 800cf80:	e005      	b.n	800cf8e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cf82:	6978      	ldr	r0, [r7, #20]
 800cf84:	f001 fd24 	bl	800e9d0 <vPortFree>
 800cf88:	e001      	b.n	800cf8e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cf8e:	69fb      	ldr	r3, [r7, #28]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d017      	beq.n	800cfc4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cf94:	69fb      	ldr	r3, [r7, #28]
 800cf96:	2200      	movs	r2, #0
 800cf98:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cf9c:	88fa      	ldrh	r2, [r7, #6]
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	9303      	str	r3, [sp, #12]
 800cfa2:	69fb      	ldr	r3, [r7, #28]
 800cfa4:	9302      	str	r3, [sp, #8]
 800cfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa8:	9301      	str	r3, [sp, #4]
 800cfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfac:	9300      	str	r3, [sp, #0]
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	68b9      	ldr	r1, [r7, #8]
 800cfb2:	68f8      	ldr	r0, [r7, #12]
 800cfb4:	f000 f80e 	bl	800cfd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cfb8:	69f8      	ldr	r0, [r7, #28]
 800cfba:	f000 f8b1 	bl	800d120 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	61bb      	str	r3, [r7, #24]
 800cfc2:	e002      	b.n	800cfca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cfc4:	f04f 33ff 	mov.w	r3, #4294967295
 800cfc8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cfca:	69bb      	ldr	r3, [r7, #24]
	}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	3720      	adds	r7, #32
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b088      	sub	sp, #32
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	60f8      	str	r0, [r7, #12]
 800cfdc:	60b9      	str	r1, [r7, #8]
 800cfde:	607a      	str	r2, [r7, #4]
 800cfe0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	461a      	mov	r2, r3
 800cfec:	21a5      	movs	r1, #165	; 0xa5
 800cfee:	f005 f81b 	bl	8012028 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cff6:	6879      	ldr	r1, [r7, #4]
 800cff8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cffc:	440b      	add	r3, r1
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	4413      	add	r3, r2
 800d002:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d004:	69bb      	ldr	r3, [r7, #24]
 800d006:	f023 0307 	bic.w	r3, r3, #7
 800d00a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	f003 0307 	and.w	r3, r3, #7
 800d012:	2b00      	cmp	r3, #0
 800d014:	d00a      	beq.n	800d02c <prvInitialiseNewTask+0x58>
	__asm volatile
 800d016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01a:	f383 8811 	msr	BASEPRI, r3
 800d01e:	f3bf 8f6f 	isb	sy
 800d022:	f3bf 8f4f 	dsb	sy
 800d026:	617b      	str	r3, [r7, #20]
}
 800d028:	bf00      	nop
 800d02a:	e7fe      	b.n	800d02a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d01f      	beq.n	800d072 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d032:	2300      	movs	r3, #0
 800d034:	61fb      	str	r3, [r7, #28]
 800d036:	e012      	b.n	800d05e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d038:	68ba      	ldr	r2, [r7, #8]
 800d03a:	69fb      	ldr	r3, [r7, #28]
 800d03c:	4413      	add	r3, r2
 800d03e:	7819      	ldrb	r1, [r3, #0]
 800d040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d042:	69fb      	ldr	r3, [r7, #28]
 800d044:	4413      	add	r3, r2
 800d046:	3334      	adds	r3, #52	; 0x34
 800d048:	460a      	mov	r2, r1
 800d04a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	4413      	add	r3, r2
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d006      	beq.n	800d066 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d058:	69fb      	ldr	r3, [r7, #28]
 800d05a:	3301      	adds	r3, #1
 800d05c:	61fb      	str	r3, [r7, #28]
 800d05e:	69fb      	ldr	r3, [r7, #28]
 800d060:	2b0f      	cmp	r3, #15
 800d062:	d9e9      	bls.n	800d038 <prvInitialiseNewTask+0x64>
 800d064:	e000      	b.n	800d068 <prvInitialiseNewTask+0x94>
			{
				break;
 800d066:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06a:	2200      	movs	r2, #0
 800d06c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d070:	e003      	b.n	800d07a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d074:	2200      	movs	r2, #0
 800d076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d07c:	2b37      	cmp	r3, #55	; 0x37
 800d07e:	d901      	bls.n	800d084 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d080:	2337      	movs	r3, #55	; 0x37
 800d082:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d088:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d08c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d08e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d092:	2200      	movs	r2, #0
 800d094:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d098:	3304      	adds	r3, #4
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7ff f978 	bl	800c390 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a2:	3318      	adds	r3, #24
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f7ff f973 	bl	800c390 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d2:	3354      	adds	r3, #84	; 0x54
 800d0d4:	224c      	movs	r2, #76	; 0x4c
 800d0d6:	2100      	movs	r1, #0
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f004 ffa5 	bl	8012028 <memset>
 800d0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e0:	4a0c      	ldr	r2, [pc, #48]	; (800d114 <prvInitialiseNewTask+0x140>)
 800d0e2:	659a      	str	r2, [r3, #88]	; 0x58
 800d0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e6:	4a0c      	ldr	r2, [pc, #48]	; (800d118 <prvInitialiseNewTask+0x144>)
 800d0e8:	65da      	str	r2, [r3, #92]	; 0x5c
 800d0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ec:	4a0b      	ldr	r2, [pc, #44]	; (800d11c <prvInitialiseNewTask+0x148>)
 800d0ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d0f0:	683a      	ldr	r2, [r7, #0]
 800d0f2:	68f9      	ldr	r1, [r7, #12]
 800d0f4:	69b8      	ldr	r0, [r7, #24]
 800d0f6:	f001 f951 	bl	800e39c <pxPortInitialiseStack>
 800d0fa:	4602      	mov	r2, r0
 800d0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d102:	2b00      	cmp	r3, #0
 800d104:	d002      	beq.n	800d10c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d10a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d10c:	bf00      	nop
 800d10e:	3720      	adds	r7, #32
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}
 800d114:	24015de4 	.word	0x24015de4
 800d118:	24015e4c 	.word	0x24015e4c
 800d11c:	24015eb4 	.word	0x24015eb4

0800d120 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d128:	f001 fa64 	bl	800e5f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d12c:	4b2d      	ldr	r3, [pc, #180]	; (800d1e4 <prvAddNewTaskToReadyList+0xc4>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	3301      	adds	r3, #1
 800d132:	4a2c      	ldr	r2, [pc, #176]	; (800d1e4 <prvAddNewTaskToReadyList+0xc4>)
 800d134:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d136:	4b2c      	ldr	r3, [pc, #176]	; (800d1e8 <prvAddNewTaskToReadyList+0xc8>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d109      	bne.n	800d152 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d13e:	4a2a      	ldr	r2, [pc, #168]	; (800d1e8 <prvAddNewTaskToReadyList+0xc8>)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d144:	4b27      	ldr	r3, [pc, #156]	; (800d1e4 <prvAddNewTaskToReadyList+0xc4>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d110      	bne.n	800d16e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d14c:	f000 fc36 	bl	800d9bc <prvInitialiseTaskLists>
 800d150:	e00d      	b.n	800d16e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d152:	4b26      	ldr	r3, [pc, #152]	; (800d1ec <prvAddNewTaskToReadyList+0xcc>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d109      	bne.n	800d16e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d15a:	4b23      	ldr	r3, [pc, #140]	; (800d1e8 <prvAddNewTaskToReadyList+0xc8>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d164:	429a      	cmp	r2, r3
 800d166:	d802      	bhi.n	800d16e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d168:	4a1f      	ldr	r2, [pc, #124]	; (800d1e8 <prvAddNewTaskToReadyList+0xc8>)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d16e:	4b20      	ldr	r3, [pc, #128]	; (800d1f0 <prvAddNewTaskToReadyList+0xd0>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	3301      	adds	r3, #1
 800d174:	4a1e      	ldr	r2, [pc, #120]	; (800d1f0 <prvAddNewTaskToReadyList+0xd0>)
 800d176:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d178:	4b1d      	ldr	r3, [pc, #116]	; (800d1f0 <prvAddNewTaskToReadyList+0xd0>)
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d184:	4b1b      	ldr	r3, [pc, #108]	; (800d1f4 <prvAddNewTaskToReadyList+0xd4>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	429a      	cmp	r2, r3
 800d18a:	d903      	bls.n	800d194 <prvAddNewTaskToReadyList+0x74>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d190:	4a18      	ldr	r2, [pc, #96]	; (800d1f4 <prvAddNewTaskToReadyList+0xd4>)
 800d192:	6013      	str	r3, [r2, #0]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d198:	4613      	mov	r3, r2
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	4413      	add	r3, r2
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	4a15      	ldr	r2, [pc, #84]	; (800d1f8 <prvAddNewTaskToReadyList+0xd8>)
 800d1a2:	441a      	add	r2, r3
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	3304      	adds	r3, #4
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	4610      	mov	r0, r2
 800d1ac:	f7ff f8fd 	bl	800c3aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d1b0:	f001 fa50 	bl	800e654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d1b4:	4b0d      	ldr	r3, [pc, #52]	; (800d1ec <prvAddNewTaskToReadyList+0xcc>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d00e      	beq.n	800d1da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d1bc:	4b0a      	ldr	r3, [pc, #40]	; (800d1e8 <prvAddNewTaskToReadyList+0xc8>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d207      	bcs.n	800d1da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d1ca:	4b0c      	ldr	r3, [pc, #48]	; (800d1fc <prvAddNewTaskToReadyList+0xdc>)
 800d1cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1d0:	601a      	str	r2, [r3, #0]
 800d1d2:	f3bf 8f4f 	dsb	sy
 800d1d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1da:	bf00      	nop
 800d1dc:	3708      	adds	r7, #8
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
 800d1e2:	bf00      	nop
 800d1e4:	2400e41c 	.word	0x2400e41c
 800d1e8:	2400df48 	.word	0x2400df48
 800d1ec:	2400e428 	.word	0x2400e428
 800d1f0:	2400e438 	.word	0x2400e438
 800d1f4:	2400e424 	.word	0x2400e424
 800d1f8:	2400df4c 	.word	0x2400df4c
 800d1fc:	e000ed04 	.word	0xe000ed04

0800d200 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d200:	b580      	push	{r7, lr}
 800d202:	b084      	sub	sp, #16
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d208:	2300      	movs	r3, #0
 800d20a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d017      	beq.n	800d242 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d212:	4b13      	ldr	r3, [pc, #76]	; (800d260 <vTaskDelay+0x60>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d00a      	beq.n	800d230 <vTaskDelay+0x30>
	__asm volatile
 800d21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21e:	f383 8811 	msr	BASEPRI, r3
 800d222:	f3bf 8f6f 	isb	sy
 800d226:	f3bf 8f4f 	dsb	sy
 800d22a:	60bb      	str	r3, [r7, #8]
}
 800d22c:	bf00      	nop
 800d22e:	e7fe      	b.n	800d22e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d230:	f000 f88a 	bl	800d348 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d234:	2100      	movs	r1, #0
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 fd0e 	bl	800dc58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d23c:	f000 f892 	bl	800d364 <xTaskResumeAll>
 800d240:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d107      	bne.n	800d258 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d248:	4b06      	ldr	r3, [pc, #24]	; (800d264 <vTaskDelay+0x64>)
 800d24a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d24e:	601a      	str	r2, [r3, #0]
 800d250:	f3bf 8f4f 	dsb	sy
 800d254:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d258:	bf00      	nop
 800d25a:	3710      	adds	r7, #16
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	2400e444 	.word	0x2400e444
 800d264:	e000ed04 	.word	0xe000ed04

0800d268 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b08a      	sub	sp, #40	; 0x28
 800d26c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d26e:	2300      	movs	r3, #0
 800d270:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d272:	2300      	movs	r3, #0
 800d274:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d276:	463a      	mov	r2, r7
 800d278:	1d39      	adds	r1, r7, #4
 800d27a:	f107 0308 	add.w	r3, r7, #8
 800d27e:	4618      	mov	r0, r3
 800d280:	f7ff f832 	bl	800c2e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d284:	6839      	ldr	r1, [r7, #0]
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	68ba      	ldr	r2, [r7, #8]
 800d28a:	9202      	str	r2, [sp, #8]
 800d28c:	9301      	str	r3, [sp, #4]
 800d28e:	2300      	movs	r3, #0
 800d290:	9300      	str	r3, [sp, #0]
 800d292:	2300      	movs	r3, #0
 800d294:	460a      	mov	r2, r1
 800d296:	4924      	ldr	r1, [pc, #144]	; (800d328 <vTaskStartScheduler+0xc0>)
 800d298:	4824      	ldr	r0, [pc, #144]	; (800d32c <vTaskStartScheduler+0xc4>)
 800d29a:	f7ff fdf9 	bl	800ce90 <xTaskCreateStatic>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	4a23      	ldr	r2, [pc, #140]	; (800d330 <vTaskStartScheduler+0xc8>)
 800d2a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d2a4:	4b22      	ldr	r3, [pc, #136]	; (800d330 <vTaskStartScheduler+0xc8>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d002      	beq.n	800d2b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	617b      	str	r3, [r7, #20]
 800d2b0:	e001      	b.n	800d2b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d102      	bne.n	800d2c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d2bc:	f000 fd20 	bl	800dd00 <xTimerCreateTimerTask>
 800d2c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	2b01      	cmp	r3, #1
 800d2c6:	d11b      	bne.n	800d300 <vTaskStartScheduler+0x98>
	__asm volatile
 800d2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2cc:	f383 8811 	msr	BASEPRI, r3
 800d2d0:	f3bf 8f6f 	isb	sy
 800d2d4:	f3bf 8f4f 	dsb	sy
 800d2d8:	613b      	str	r3, [r7, #16]
}
 800d2da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d2dc:	4b15      	ldr	r3, [pc, #84]	; (800d334 <vTaskStartScheduler+0xcc>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	3354      	adds	r3, #84	; 0x54
 800d2e2:	4a15      	ldr	r2, [pc, #84]	; (800d338 <vTaskStartScheduler+0xd0>)
 800d2e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d2e6:	4b15      	ldr	r3, [pc, #84]	; (800d33c <vTaskStartScheduler+0xd4>)
 800d2e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d2ee:	4b14      	ldr	r3, [pc, #80]	; (800d340 <vTaskStartScheduler+0xd8>)
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d2f4:	4b13      	ldr	r3, [pc, #76]	; (800d344 <vTaskStartScheduler+0xdc>)
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d2fa:	f001 f8d9 	bl	800e4b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d2fe:	e00e      	b.n	800d31e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d306:	d10a      	bne.n	800d31e <vTaskStartScheduler+0xb6>
	__asm volatile
 800d308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d30c:	f383 8811 	msr	BASEPRI, r3
 800d310:	f3bf 8f6f 	isb	sy
 800d314:	f3bf 8f4f 	dsb	sy
 800d318:	60fb      	str	r3, [r7, #12]
}
 800d31a:	bf00      	nop
 800d31c:	e7fe      	b.n	800d31c <vTaskStartScheduler+0xb4>
}
 800d31e:	bf00      	nop
 800d320:	3718      	adds	r7, #24
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop
 800d328:	08012ef0 	.word	0x08012ef0
 800d32c:	0800d98d 	.word	0x0800d98d
 800d330:	2400e440 	.word	0x2400e440
 800d334:	2400df48 	.word	0x2400df48
 800d338:	24000118 	.word	0x24000118
 800d33c:	2400e43c 	.word	0x2400e43c
 800d340:	2400e428 	.word	0x2400e428
 800d344:	2400e420 	.word	0x2400e420

0800d348 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d348:	b480      	push	{r7}
 800d34a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d34c:	4b04      	ldr	r3, [pc, #16]	; (800d360 <vTaskSuspendAll+0x18>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	3301      	adds	r3, #1
 800d352:	4a03      	ldr	r2, [pc, #12]	; (800d360 <vTaskSuspendAll+0x18>)
 800d354:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d356:	bf00      	nop
 800d358:	46bd      	mov	sp, r7
 800d35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35e:	4770      	bx	lr
 800d360:	2400e444 	.word	0x2400e444

0800d364 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d36a:	2300      	movs	r3, #0
 800d36c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d36e:	2300      	movs	r3, #0
 800d370:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d372:	4b42      	ldr	r3, [pc, #264]	; (800d47c <xTaskResumeAll+0x118>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d10a      	bne.n	800d390 <xTaskResumeAll+0x2c>
	__asm volatile
 800d37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37e:	f383 8811 	msr	BASEPRI, r3
 800d382:	f3bf 8f6f 	isb	sy
 800d386:	f3bf 8f4f 	dsb	sy
 800d38a:	603b      	str	r3, [r7, #0]
}
 800d38c:	bf00      	nop
 800d38e:	e7fe      	b.n	800d38e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d390:	f001 f930 	bl	800e5f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d394:	4b39      	ldr	r3, [pc, #228]	; (800d47c <xTaskResumeAll+0x118>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	3b01      	subs	r3, #1
 800d39a:	4a38      	ldr	r2, [pc, #224]	; (800d47c <xTaskResumeAll+0x118>)
 800d39c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d39e:	4b37      	ldr	r3, [pc, #220]	; (800d47c <xTaskResumeAll+0x118>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d162      	bne.n	800d46c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d3a6:	4b36      	ldr	r3, [pc, #216]	; (800d480 <xTaskResumeAll+0x11c>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d05e      	beq.n	800d46c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d3ae:	e02f      	b.n	800d410 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3b0:	4b34      	ldr	r3, [pc, #208]	; (800d484 <xTaskResumeAll+0x120>)
 800d3b2:	68db      	ldr	r3, [r3, #12]
 800d3b4:	68db      	ldr	r3, [r3, #12]
 800d3b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	3318      	adds	r3, #24
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7ff f851 	bl	800c464 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	3304      	adds	r3, #4
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7ff f84c 	bl	800c464 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3d0:	4b2d      	ldr	r3, [pc, #180]	; (800d488 <xTaskResumeAll+0x124>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d903      	bls.n	800d3e0 <xTaskResumeAll+0x7c>
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3dc:	4a2a      	ldr	r2, [pc, #168]	; (800d488 <xTaskResumeAll+0x124>)
 800d3de:	6013      	str	r3, [r2, #0]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	4413      	add	r3, r2
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	4a27      	ldr	r2, [pc, #156]	; (800d48c <xTaskResumeAll+0x128>)
 800d3ee:	441a      	add	r2, r3
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	3304      	adds	r3, #4
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	4610      	mov	r0, r2
 800d3f8:	f7fe ffd7 	bl	800c3aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d400:	4b23      	ldr	r3, [pc, #140]	; (800d490 <xTaskResumeAll+0x12c>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d406:	429a      	cmp	r2, r3
 800d408:	d302      	bcc.n	800d410 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d40a:	4b22      	ldr	r3, [pc, #136]	; (800d494 <xTaskResumeAll+0x130>)
 800d40c:	2201      	movs	r2, #1
 800d40e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d410:	4b1c      	ldr	r3, [pc, #112]	; (800d484 <xTaskResumeAll+0x120>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d1cb      	bne.n	800d3b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d001      	beq.n	800d422 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d41e:	f000 fb6f 	bl	800db00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d422:	4b1d      	ldr	r3, [pc, #116]	; (800d498 <xTaskResumeAll+0x134>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d010      	beq.n	800d450 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d42e:	f000 f847 	bl	800d4c0 <xTaskIncrementTick>
 800d432:	4603      	mov	r3, r0
 800d434:	2b00      	cmp	r3, #0
 800d436:	d002      	beq.n	800d43e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d438:	4b16      	ldr	r3, [pc, #88]	; (800d494 <xTaskResumeAll+0x130>)
 800d43a:	2201      	movs	r2, #1
 800d43c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	3b01      	subs	r3, #1
 800d442:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d1f1      	bne.n	800d42e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d44a:	4b13      	ldr	r3, [pc, #76]	; (800d498 <xTaskResumeAll+0x134>)
 800d44c:	2200      	movs	r2, #0
 800d44e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d450:	4b10      	ldr	r3, [pc, #64]	; (800d494 <xTaskResumeAll+0x130>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d009      	beq.n	800d46c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d458:	2301      	movs	r3, #1
 800d45a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d45c:	4b0f      	ldr	r3, [pc, #60]	; (800d49c <xTaskResumeAll+0x138>)
 800d45e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d462:	601a      	str	r2, [r3, #0]
 800d464:	f3bf 8f4f 	dsb	sy
 800d468:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d46c:	f001 f8f2 	bl	800e654 <vPortExitCritical>

	return xAlreadyYielded;
 800d470:	68bb      	ldr	r3, [r7, #8]
}
 800d472:	4618      	mov	r0, r3
 800d474:	3710      	adds	r7, #16
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	2400e444 	.word	0x2400e444
 800d480:	2400e41c 	.word	0x2400e41c
 800d484:	2400e3dc 	.word	0x2400e3dc
 800d488:	2400e424 	.word	0x2400e424
 800d48c:	2400df4c 	.word	0x2400df4c
 800d490:	2400df48 	.word	0x2400df48
 800d494:	2400e430 	.word	0x2400e430
 800d498:	2400e42c 	.word	0x2400e42c
 800d49c:	e000ed04 	.word	0xe000ed04

0800d4a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b083      	sub	sp, #12
 800d4a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d4a6:	4b05      	ldr	r3, [pc, #20]	; (800d4bc <xTaskGetTickCount+0x1c>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d4ac:	687b      	ldr	r3, [r7, #4]
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	370c      	adds	r7, #12
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b8:	4770      	bx	lr
 800d4ba:	bf00      	nop
 800d4bc:	2400e420 	.word	0x2400e420

0800d4c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b086      	sub	sp, #24
 800d4c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4ca:	4b4f      	ldr	r3, [pc, #316]	; (800d608 <xTaskIncrementTick+0x148>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	f040 808f 	bne.w	800d5f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d4d4:	4b4d      	ldr	r3, [pc, #308]	; (800d60c <xTaskIncrementTick+0x14c>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	3301      	adds	r3, #1
 800d4da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d4dc:	4a4b      	ldr	r2, [pc, #300]	; (800d60c <xTaskIncrementTick+0x14c>)
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d120      	bne.n	800d52a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d4e8:	4b49      	ldr	r3, [pc, #292]	; (800d610 <xTaskIncrementTick+0x150>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d00a      	beq.n	800d508 <xTaskIncrementTick+0x48>
	__asm volatile
 800d4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f6:	f383 8811 	msr	BASEPRI, r3
 800d4fa:	f3bf 8f6f 	isb	sy
 800d4fe:	f3bf 8f4f 	dsb	sy
 800d502:	603b      	str	r3, [r7, #0]
}
 800d504:	bf00      	nop
 800d506:	e7fe      	b.n	800d506 <xTaskIncrementTick+0x46>
 800d508:	4b41      	ldr	r3, [pc, #260]	; (800d610 <xTaskIncrementTick+0x150>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	60fb      	str	r3, [r7, #12]
 800d50e:	4b41      	ldr	r3, [pc, #260]	; (800d614 <xTaskIncrementTick+0x154>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	4a3f      	ldr	r2, [pc, #252]	; (800d610 <xTaskIncrementTick+0x150>)
 800d514:	6013      	str	r3, [r2, #0]
 800d516:	4a3f      	ldr	r2, [pc, #252]	; (800d614 <xTaskIncrementTick+0x154>)
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	6013      	str	r3, [r2, #0]
 800d51c:	4b3e      	ldr	r3, [pc, #248]	; (800d618 <xTaskIncrementTick+0x158>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	3301      	adds	r3, #1
 800d522:	4a3d      	ldr	r2, [pc, #244]	; (800d618 <xTaskIncrementTick+0x158>)
 800d524:	6013      	str	r3, [r2, #0]
 800d526:	f000 faeb 	bl	800db00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d52a:	4b3c      	ldr	r3, [pc, #240]	; (800d61c <xTaskIncrementTick+0x15c>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	693a      	ldr	r2, [r7, #16]
 800d530:	429a      	cmp	r2, r3
 800d532:	d349      	bcc.n	800d5c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d534:	4b36      	ldr	r3, [pc, #216]	; (800d610 <xTaskIncrementTick+0x150>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d104      	bne.n	800d548 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d53e:	4b37      	ldr	r3, [pc, #220]	; (800d61c <xTaskIncrementTick+0x15c>)
 800d540:	f04f 32ff 	mov.w	r2, #4294967295
 800d544:	601a      	str	r2, [r3, #0]
					break;
 800d546:	e03f      	b.n	800d5c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d548:	4b31      	ldr	r3, [pc, #196]	; (800d610 <xTaskIncrementTick+0x150>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	68db      	ldr	r3, [r3, #12]
 800d550:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d558:	693a      	ldr	r2, [r7, #16]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d203      	bcs.n	800d568 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d560:	4a2e      	ldr	r2, [pc, #184]	; (800d61c <xTaskIncrementTick+0x15c>)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d566:	e02f      	b.n	800d5c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	3304      	adds	r3, #4
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7fe ff79 	bl	800c464 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d576:	2b00      	cmp	r3, #0
 800d578:	d004      	beq.n	800d584 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	3318      	adds	r3, #24
 800d57e:	4618      	mov	r0, r3
 800d580:	f7fe ff70 	bl	800c464 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d588:	4b25      	ldr	r3, [pc, #148]	; (800d620 <xTaskIncrementTick+0x160>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d903      	bls.n	800d598 <xTaskIncrementTick+0xd8>
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d594:	4a22      	ldr	r2, [pc, #136]	; (800d620 <xTaskIncrementTick+0x160>)
 800d596:	6013      	str	r3, [r2, #0]
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d59c:	4613      	mov	r3, r2
 800d59e:	009b      	lsls	r3, r3, #2
 800d5a0:	4413      	add	r3, r2
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	4a1f      	ldr	r2, [pc, #124]	; (800d624 <xTaskIncrementTick+0x164>)
 800d5a6:	441a      	add	r2, r3
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	3304      	adds	r3, #4
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	4610      	mov	r0, r2
 800d5b0:	f7fe fefb 	bl	800c3aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5b8:	4b1b      	ldr	r3, [pc, #108]	; (800d628 <xTaskIncrementTick+0x168>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d3b8      	bcc.n	800d534 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5c6:	e7b5      	b.n	800d534 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d5c8:	4b17      	ldr	r3, [pc, #92]	; (800d628 <xTaskIncrementTick+0x168>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ce:	4915      	ldr	r1, [pc, #84]	; (800d624 <xTaskIncrementTick+0x164>)
 800d5d0:	4613      	mov	r3, r2
 800d5d2:	009b      	lsls	r3, r3, #2
 800d5d4:	4413      	add	r3, r2
 800d5d6:	009b      	lsls	r3, r3, #2
 800d5d8:	440b      	add	r3, r1
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d901      	bls.n	800d5e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d5e4:	4b11      	ldr	r3, [pc, #68]	; (800d62c <xTaskIncrementTick+0x16c>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d007      	beq.n	800d5fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	617b      	str	r3, [r7, #20]
 800d5f0:	e004      	b.n	800d5fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d5f2:	4b0f      	ldr	r3, [pc, #60]	; (800d630 <xTaskIncrementTick+0x170>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	3301      	adds	r3, #1
 800d5f8:	4a0d      	ldr	r2, [pc, #52]	; (800d630 <xTaskIncrementTick+0x170>)
 800d5fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d5fc:	697b      	ldr	r3, [r7, #20]
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3718      	adds	r7, #24
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop
 800d608:	2400e444 	.word	0x2400e444
 800d60c:	2400e420 	.word	0x2400e420
 800d610:	2400e3d4 	.word	0x2400e3d4
 800d614:	2400e3d8 	.word	0x2400e3d8
 800d618:	2400e434 	.word	0x2400e434
 800d61c:	2400e43c 	.word	0x2400e43c
 800d620:	2400e424 	.word	0x2400e424
 800d624:	2400df4c 	.word	0x2400df4c
 800d628:	2400df48 	.word	0x2400df48
 800d62c:	2400e430 	.word	0x2400e430
 800d630:	2400e42c 	.word	0x2400e42c

0800d634 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b084      	sub	sp, #16
 800d638:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d63a:	4b32      	ldr	r3, [pc, #200]	; (800d704 <vTaskSwitchContext+0xd0>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d003      	beq.n	800d64a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d642:	4b31      	ldr	r3, [pc, #196]	; (800d708 <vTaskSwitchContext+0xd4>)
 800d644:	2201      	movs	r2, #1
 800d646:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d648:	e057      	b.n	800d6fa <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 800d64a:	4b2f      	ldr	r3, [pc, #188]	; (800d708 <vTaskSwitchContext+0xd4>)
 800d64c:	2200      	movs	r2, #0
 800d64e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d650:	4b2e      	ldr	r3, [pc, #184]	; (800d70c <vTaskSwitchContext+0xd8>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	681a      	ldr	r2, [r3, #0]
 800d656:	4b2d      	ldr	r3, [pc, #180]	; (800d70c <vTaskSwitchContext+0xd8>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d808      	bhi.n	800d672 <vTaskSwitchContext+0x3e>
 800d660:	4b2a      	ldr	r3, [pc, #168]	; (800d70c <vTaskSwitchContext+0xd8>)
 800d662:	681a      	ldr	r2, [r3, #0]
 800d664:	4b29      	ldr	r3, [pc, #164]	; (800d70c <vTaskSwitchContext+0xd8>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	3334      	adds	r3, #52	; 0x34
 800d66a:	4619      	mov	r1, r3
 800d66c:	4610      	mov	r0, r2
 800d66e:	f7f3 f81d 	bl	80006ac <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d672:	4b27      	ldr	r3, [pc, #156]	; (800d710 <vTaskSwitchContext+0xdc>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	60fb      	str	r3, [r7, #12]
 800d678:	e010      	b.n	800d69c <vTaskSwitchContext+0x68>
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d10a      	bne.n	800d696 <vTaskSwitchContext+0x62>
	__asm volatile
 800d680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d684:	f383 8811 	msr	BASEPRI, r3
 800d688:	f3bf 8f6f 	isb	sy
 800d68c:	f3bf 8f4f 	dsb	sy
 800d690:	607b      	str	r3, [r7, #4]
}
 800d692:	bf00      	nop
 800d694:	e7fe      	b.n	800d694 <vTaskSwitchContext+0x60>
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	3b01      	subs	r3, #1
 800d69a:	60fb      	str	r3, [r7, #12]
 800d69c:	491d      	ldr	r1, [pc, #116]	; (800d714 <vTaskSwitchContext+0xe0>)
 800d69e:	68fa      	ldr	r2, [r7, #12]
 800d6a0:	4613      	mov	r3, r2
 800d6a2:	009b      	lsls	r3, r3, #2
 800d6a4:	4413      	add	r3, r2
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	440b      	add	r3, r1
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d0e4      	beq.n	800d67a <vTaskSwitchContext+0x46>
 800d6b0:	68fa      	ldr	r2, [r7, #12]
 800d6b2:	4613      	mov	r3, r2
 800d6b4:	009b      	lsls	r3, r3, #2
 800d6b6:	4413      	add	r3, r2
 800d6b8:	009b      	lsls	r3, r3, #2
 800d6ba:	4a16      	ldr	r2, [pc, #88]	; (800d714 <vTaskSwitchContext+0xe0>)
 800d6bc:	4413      	add	r3, r2
 800d6be:	60bb      	str	r3, [r7, #8]
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	685a      	ldr	r2, [r3, #4]
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	605a      	str	r2, [r3, #4]
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	685a      	ldr	r2, [r3, #4]
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	3308      	adds	r3, #8
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d104      	bne.n	800d6e0 <vTaskSwitchContext+0xac>
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	685a      	ldr	r2, [r3, #4]
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	605a      	str	r2, [r3, #4]
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	4a09      	ldr	r2, [pc, #36]	; (800d70c <vTaskSwitchContext+0xd8>)
 800d6e8:	6013      	str	r3, [r2, #0]
 800d6ea:	4a09      	ldr	r2, [pc, #36]	; (800d710 <vTaskSwitchContext+0xdc>)
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d6f0:	4b06      	ldr	r3, [pc, #24]	; (800d70c <vTaskSwitchContext+0xd8>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	3354      	adds	r3, #84	; 0x54
 800d6f6:	4a08      	ldr	r2, [pc, #32]	; (800d718 <vTaskSwitchContext+0xe4>)
 800d6f8:	6013      	str	r3, [r2, #0]
}
 800d6fa:	bf00      	nop
 800d6fc:	3710      	adds	r7, #16
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
 800d702:	bf00      	nop
 800d704:	2400e444 	.word	0x2400e444
 800d708:	2400e430 	.word	0x2400e430
 800d70c:	2400df48 	.word	0x2400df48
 800d710:	2400e424 	.word	0x2400e424
 800d714:	2400df4c 	.word	0x2400df4c
 800d718:	24000118 	.word	0x24000118

0800d71c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d10a      	bne.n	800d742 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d730:	f383 8811 	msr	BASEPRI, r3
 800d734:	f3bf 8f6f 	isb	sy
 800d738:	f3bf 8f4f 	dsb	sy
 800d73c:	60fb      	str	r3, [r7, #12]
}
 800d73e:	bf00      	nop
 800d740:	e7fe      	b.n	800d740 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d742:	4b07      	ldr	r3, [pc, #28]	; (800d760 <vTaskPlaceOnEventList+0x44>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	3318      	adds	r3, #24
 800d748:	4619      	mov	r1, r3
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f7fe fe51 	bl	800c3f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d750:	2101      	movs	r1, #1
 800d752:	6838      	ldr	r0, [r7, #0]
 800d754:	f000 fa80 	bl	800dc58 <prvAddCurrentTaskToDelayedList>
}
 800d758:	bf00      	nop
 800d75a:	3710      	adds	r7, #16
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}
 800d760:	2400df48 	.word	0x2400df48

0800d764 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d764:	b580      	push	{r7, lr}
 800d766:	b086      	sub	sp, #24
 800d768:	af00      	add	r7, sp, #0
 800d76a:	60f8      	str	r0, [r7, #12]
 800d76c:	60b9      	str	r1, [r7, #8]
 800d76e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d10a      	bne.n	800d78c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77a:	f383 8811 	msr	BASEPRI, r3
 800d77e:	f3bf 8f6f 	isb	sy
 800d782:	f3bf 8f4f 	dsb	sy
 800d786:	617b      	str	r3, [r7, #20]
}
 800d788:	bf00      	nop
 800d78a:	e7fe      	b.n	800d78a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d78c:	4b0a      	ldr	r3, [pc, #40]	; (800d7b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	3318      	adds	r3, #24
 800d792:	4619      	mov	r1, r3
 800d794:	68f8      	ldr	r0, [r7, #12]
 800d796:	f7fe fe08 	bl	800c3aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d002      	beq.n	800d7a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d7a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d7a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d7a6:	6879      	ldr	r1, [r7, #4]
 800d7a8:	68b8      	ldr	r0, [r7, #8]
 800d7aa:	f000 fa55 	bl	800dc58 <prvAddCurrentTaskToDelayedList>
	}
 800d7ae:	bf00      	nop
 800d7b0:	3718      	adds	r7, #24
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	2400df48 	.word	0x2400df48

0800d7bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b086      	sub	sp, #24
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	68db      	ldr	r3, [r3, #12]
 800d7c8:	68db      	ldr	r3, [r3, #12]
 800d7ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d10a      	bne.n	800d7e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d6:	f383 8811 	msr	BASEPRI, r3
 800d7da:	f3bf 8f6f 	isb	sy
 800d7de:	f3bf 8f4f 	dsb	sy
 800d7e2:	60fb      	str	r3, [r7, #12]
}
 800d7e4:	bf00      	nop
 800d7e6:	e7fe      	b.n	800d7e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	3318      	adds	r3, #24
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f7fe fe39 	bl	800c464 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7f2:	4b1e      	ldr	r3, [pc, #120]	; (800d86c <xTaskRemoveFromEventList+0xb0>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d11d      	bne.n	800d836 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	3304      	adds	r3, #4
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7fe fe30 	bl	800c464 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d808:	4b19      	ldr	r3, [pc, #100]	; (800d870 <xTaskRemoveFromEventList+0xb4>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d903      	bls.n	800d818 <xTaskRemoveFromEventList+0x5c>
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d814:	4a16      	ldr	r2, [pc, #88]	; (800d870 <xTaskRemoveFromEventList+0xb4>)
 800d816:	6013      	str	r3, [r2, #0]
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d81c:	4613      	mov	r3, r2
 800d81e:	009b      	lsls	r3, r3, #2
 800d820:	4413      	add	r3, r2
 800d822:	009b      	lsls	r3, r3, #2
 800d824:	4a13      	ldr	r2, [pc, #76]	; (800d874 <xTaskRemoveFromEventList+0xb8>)
 800d826:	441a      	add	r2, r3
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	3304      	adds	r3, #4
 800d82c:	4619      	mov	r1, r3
 800d82e:	4610      	mov	r0, r2
 800d830:	f7fe fdbb 	bl	800c3aa <vListInsertEnd>
 800d834:	e005      	b.n	800d842 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	3318      	adds	r3, #24
 800d83a:	4619      	mov	r1, r3
 800d83c:	480e      	ldr	r0, [pc, #56]	; (800d878 <xTaskRemoveFromEventList+0xbc>)
 800d83e:	f7fe fdb4 	bl	800c3aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d846:	4b0d      	ldr	r3, [pc, #52]	; (800d87c <xTaskRemoveFromEventList+0xc0>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d905      	bls.n	800d85c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d850:	2301      	movs	r3, #1
 800d852:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d854:	4b0a      	ldr	r3, [pc, #40]	; (800d880 <xTaskRemoveFromEventList+0xc4>)
 800d856:	2201      	movs	r2, #1
 800d858:	601a      	str	r2, [r3, #0]
 800d85a:	e001      	b.n	800d860 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d85c:	2300      	movs	r3, #0
 800d85e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d860:	697b      	ldr	r3, [r7, #20]
}
 800d862:	4618      	mov	r0, r3
 800d864:	3718      	adds	r7, #24
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	2400e444 	.word	0x2400e444
 800d870:	2400e424 	.word	0x2400e424
 800d874:	2400df4c 	.word	0x2400df4c
 800d878:	2400e3dc 	.word	0x2400e3dc
 800d87c:	2400df48 	.word	0x2400df48
 800d880:	2400e430 	.word	0x2400e430

0800d884 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d884:	b480      	push	{r7}
 800d886:	b083      	sub	sp, #12
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d88c:	4b06      	ldr	r3, [pc, #24]	; (800d8a8 <vTaskInternalSetTimeOutState+0x24>)
 800d88e:	681a      	ldr	r2, [r3, #0]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d894:	4b05      	ldr	r3, [pc, #20]	; (800d8ac <vTaskInternalSetTimeOutState+0x28>)
 800d896:	681a      	ldr	r2, [r3, #0]
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	605a      	str	r2, [r3, #4]
}
 800d89c:	bf00      	nop
 800d89e:	370c      	adds	r7, #12
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr
 800d8a8:	2400e434 	.word	0x2400e434
 800d8ac:	2400e420 	.word	0x2400e420

0800d8b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b088      	sub	sp, #32
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d10a      	bne.n	800d8d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c4:	f383 8811 	msr	BASEPRI, r3
 800d8c8:	f3bf 8f6f 	isb	sy
 800d8cc:	f3bf 8f4f 	dsb	sy
 800d8d0:	613b      	str	r3, [r7, #16]
}
 800d8d2:	bf00      	nop
 800d8d4:	e7fe      	b.n	800d8d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d10a      	bne.n	800d8f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e0:	f383 8811 	msr	BASEPRI, r3
 800d8e4:	f3bf 8f6f 	isb	sy
 800d8e8:	f3bf 8f4f 	dsb	sy
 800d8ec:	60fb      	str	r3, [r7, #12]
}
 800d8ee:	bf00      	nop
 800d8f0:	e7fe      	b.n	800d8f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d8f2:	f000 fe7f 	bl	800e5f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d8f6:	4b1d      	ldr	r3, [pc, #116]	; (800d96c <xTaskCheckForTimeOut+0xbc>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	69ba      	ldr	r2, [r7, #24]
 800d902:	1ad3      	subs	r3, r2, r3
 800d904:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d90e:	d102      	bne.n	800d916 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d910:	2300      	movs	r3, #0
 800d912:	61fb      	str	r3, [r7, #28]
 800d914:	e023      	b.n	800d95e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	4b15      	ldr	r3, [pc, #84]	; (800d970 <xTaskCheckForTimeOut+0xc0>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	429a      	cmp	r2, r3
 800d920:	d007      	beq.n	800d932 <xTaskCheckForTimeOut+0x82>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	69ba      	ldr	r2, [r7, #24]
 800d928:	429a      	cmp	r2, r3
 800d92a:	d302      	bcc.n	800d932 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d92c:	2301      	movs	r3, #1
 800d92e:	61fb      	str	r3, [r7, #28]
 800d930:	e015      	b.n	800d95e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	697a      	ldr	r2, [r7, #20]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d20b      	bcs.n	800d954 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	1ad2      	subs	r2, r2, r3
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f7ff ff9b 	bl	800d884 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d94e:	2300      	movs	r3, #0
 800d950:	61fb      	str	r3, [r7, #28]
 800d952:	e004      	b.n	800d95e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	2200      	movs	r2, #0
 800d958:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d95a:	2301      	movs	r3, #1
 800d95c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d95e:	f000 fe79 	bl	800e654 <vPortExitCritical>

	return xReturn;
 800d962:	69fb      	ldr	r3, [r7, #28]
}
 800d964:	4618      	mov	r0, r3
 800d966:	3720      	adds	r7, #32
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	2400e420 	.word	0x2400e420
 800d970:	2400e434 	.word	0x2400e434

0800d974 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d974:	b480      	push	{r7}
 800d976:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d978:	4b03      	ldr	r3, [pc, #12]	; (800d988 <vTaskMissedYield+0x14>)
 800d97a:	2201      	movs	r2, #1
 800d97c:	601a      	str	r2, [r3, #0]
}
 800d97e:	bf00      	nop
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr
 800d988:	2400e430 	.word	0x2400e430

0800d98c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d994:	f000 f852 	bl	800da3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d998:	4b06      	ldr	r3, [pc, #24]	; (800d9b4 <prvIdleTask+0x28>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	d9f9      	bls.n	800d994 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d9a0:	4b05      	ldr	r3, [pc, #20]	; (800d9b8 <prvIdleTask+0x2c>)
 800d9a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9a6:	601a      	str	r2, [r3, #0]
 800d9a8:	f3bf 8f4f 	dsb	sy
 800d9ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d9b0:	e7f0      	b.n	800d994 <prvIdleTask+0x8>
 800d9b2:	bf00      	nop
 800d9b4:	2400df4c 	.word	0x2400df4c
 800d9b8:	e000ed04 	.word	0xe000ed04

0800d9bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b082      	sub	sp, #8
 800d9c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	607b      	str	r3, [r7, #4]
 800d9c6:	e00c      	b.n	800d9e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d9c8:	687a      	ldr	r2, [r7, #4]
 800d9ca:	4613      	mov	r3, r2
 800d9cc:	009b      	lsls	r3, r3, #2
 800d9ce:	4413      	add	r3, r2
 800d9d0:	009b      	lsls	r3, r3, #2
 800d9d2:	4a12      	ldr	r2, [pc, #72]	; (800da1c <prvInitialiseTaskLists+0x60>)
 800d9d4:	4413      	add	r3, r2
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7fe fcba 	bl	800c350 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	3301      	adds	r3, #1
 800d9e0:	607b      	str	r3, [r7, #4]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2b37      	cmp	r3, #55	; 0x37
 800d9e6:	d9ef      	bls.n	800d9c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d9e8:	480d      	ldr	r0, [pc, #52]	; (800da20 <prvInitialiseTaskLists+0x64>)
 800d9ea:	f7fe fcb1 	bl	800c350 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d9ee:	480d      	ldr	r0, [pc, #52]	; (800da24 <prvInitialiseTaskLists+0x68>)
 800d9f0:	f7fe fcae 	bl	800c350 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d9f4:	480c      	ldr	r0, [pc, #48]	; (800da28 <prvInitialiseTaskLists+0x6c>)
 800d9f6:	f7fe fcab 	bl	800c350 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d9fa:	480c      	ldr	r0, [pc, #48]	; (800da2c <prvInitialiseTaskLists+0x70>)
 800d9fc:	f7fe fca8 	bl	800c350 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800da00:	480b      	ldr	r0, [pc, #44]	; (800da30 <prvInitialiseTaskLists+0x74>)
 800da02:	f7fe fca5 	bl	800c350 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800da06:	4b0b      	ldr	r3, [pc, #44]	; (800da34 <prvInitialiseTaskLists+0x78>)
 800da08:	4a05      	ldr	r2, [pc, #20]	; (800da20 <prvInitialiseTaskLists+0x64>)
 800da0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800da0c:	4b0a      	ldr	r3, [pc, #40]	; (800da38 <prvInitialiseTaskLists+0x7c>)
 800da0e:	4a05      	ldr	r2, [pc, #20]	; (800da24 <prvInitialiseTaskLists+0x68>)
 800da10:	601a      	str	r2, [r3, #0]
}
 800da12:	bf00      	nop
 800da14:	3708      	adds	r7, #8
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop
 800da1c:	2400df4c 	.word	0x2400df4c
 800da20:	2400e3ac 	.word	0x2400e3ac
 800da24:	2400e3c0 	.word	0x2400e3c0
 800da28:	2400e3dc 	.word	0x2400e3dc
 800da2c:	2400e3f0 	.word	0x2400e3f0
 800da30:	2400e408 	.word	0x2400e408
 800da34:	2400e3d4 	.word	0x2400e3d4
 800da38:	2400e3d8 	.word	0x2400e3d8

0800da3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b082      	sub	sp, #8
 800da40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da42:	e019      	b.n	800da78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800da44:	f000 fdd6 	bl	800e5f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da48:	4b10      	ldr	r3, [pc, #64]	; (800da8c <prvCheckTasksWaitingTermination+0x50>)
 800da4a:	68db      	ldr	r3, [r3, #12]
 800da4c:	68db      	ldr	r3, [r3, #12]
 800da4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	3304      	adds	r3, #4
 800da54:	4618      	mov	r0, r3
 800da56:	f7fe fd05 	bl	800c464 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800da5a:	4b0d      	ldr	r3, [pc, #52]	; (800da90 <prvCheckTasksWaitingTermination+0x54>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	3b01      	subs	r3, #1
 800da60:	4a0b      	ldr	r2, [pc, #44]	; (800da90 <prvCheckTasksWaitingTermination+0x54>)
 800da62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800da64:	4b0b      	ldr	r3, [pc, #44]	; (800da94 <prvCheckTasksWaitingTermination+0x58>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	3b01      	subs	r3, #1
 800da6a:	4a0a      	ldr	r2, [pc, #40]	; (800da94 <prvCheckTasksWaitingTermination+0x58>)
 800da6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800da6e:	f000 fdf1 	bl	800e654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f000 f810 	bl	800da98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da78:	4b06      	ldr	r3, [pc, #24]	; (800da94 <prvCheckTasksWaitingTermination+0x58>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d1e1      	bne.n	800da44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800da80:	bf00      	nop
 800da82:	bf00      	nop
 800da84:	3708      	adds	r7, #8
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	bf00      	nop
 800da8c:	2400e3f0 	.word	0x2400e3f0
 800da90:	2400e41c 	.word	0x2400e41c
 800da94:	2400e404 	.word	0x2400e404

0800da98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	3354      	adds	r3, #84	; 0x54
 800daa4:	4618      	mov	r0, r3
 800daa6:	f004 fae9 	bl	801207c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d108      	bne.n	800dac6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dab8:	4618      	mov	r0, r3
 800daba:	f000 ff89 	bl	800e9d0 <vPortFree>
				vPortFree( pxTCB );
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 ff86 	bl	800e9d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dac4:	e018      	b.n	800daf8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d103      	bne.n	800dad8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f000 ff7d 	bl	800e9d0 <vPortFree>
	}
 800dad6:	e00f      	b.n	800daf8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800dade:	2b02      	cmp	r3, #2
 800dae0:	d00a      	beq.n	800daf8 <prvDeleteTCB+0x60>
	__asm volatile
 800dae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae6:	f383 8811 	msr	BASEPRI, r3
 800daea:	f3bf 8f6f 	isb	sy
 800daee:	f3bf 8f4f 	dsb	sy
 800daf2:	60fb      	str	r3, [r7, #12]
}
 800daf4:	bf00      	nop
 800daf6:	e7fe      	b.n	800daf6 <prvDeleteTCB+0x5e>
	}
 800daf8:	bf00      	nop
 800dafa:	3710      	adds	r7, #16
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}

0800db00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800db00:	b480      	push	{r7}
 800db02:	b083      	sub	sp, #12
 800db04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db06:	4b0c      	ldr	r3, [pc, #48]	; (800db38 <prvResetNextTaskUnblockTime+0x38>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d104      	bne.n	800db1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800db10:	4b0a      	ldr	r3, [pc, #40]	; (800db3c <prvResetNextTaskUnblockTime+0x3c>)
 800db12:	f04f 32ff 	mov.w	r2, #4294967295
 800db16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800db18:	e008      	b.n	800db2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db1a:	4b07      	ldr	r3, [pc, #28]	; (800db38 <prvResetNextTaskUnblockTime+0x38>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	68db      	ldr	r3, [r3, #12]
 800db20:	68db      	ldr	r3, [r3, #12]
 800db22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	4a04      	ldr	r2, [pc, #16]	; (800db3c <prvResetNextTaskUnblockTime+0x3c>)
 800db2a:	6013      	str	r3, [r2, #0]
}
 800db2c:	bf00      	nop
 800db2e:	370c      	adds	r7, #12
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr
 800db38:	2400e3d4 	.word	0x2400e3d4
 800db3c:	2400e43c 	.word	0x2400e43c

0800db40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800db40:	b480      	push	{r7}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800db46:	4b0b      	ldr	r3, [pc, #44]	; (800db74 <xTaskGetSchedulerState+0x34>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d102      	bne.n	800db54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800db4e:	2301      	movs	r3, #1
 800db50:	607b      	str	r3, [r7, #4]
 800db52:	e008      	b.n	800db66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db54:	4b08      	ldr	r3, [pc, #32]	; (800db78 <xTaskGetSchedulerState+0x38>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d102      	bne.n	800db62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800db5c:	2302      	movs	r3, #2
 800db5e:	607b      	str	r3, [r7, #4]
 800db60:	e001      	b.n	800db66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800db62:	2300      	movs	r3, #0
 800db64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800db66:	687b      	ldr	r3, [r7, #4]
	}
 800db68:	4618      	mov	r0, r3
 800db6a:	370c      	adds	r7, #12
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr
 800db74:	2400e428 	.word	0x2400e428
 800db78:	2400e444 	.word	0x2400e444

0800db7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b086      	sub	sp, #24
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800db88:	2300      	movs	r3, #0
 800db8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d056      	beq.n	800dc40 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800db92:	4b2e      	ldr	r3, [pc, #184]	; (800dc4c <xTaskPriorityDisinherit+0xd0>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	693a      	ldr	r2, [r7, #16]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d00a      	beq.n	800dbb2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800db9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba0:	f383 8811 	msr	BASEPRI, r3
 800dba4:	f3bf 8f6f 	isb	sy
 800dba8:	f3bf 8f4f 	dsb	sy
 800dbac:	60fb      	str	r3, [r7, #12]
}
 800dbae:	bf00      	nop
 800dbb0:	e7fe      	b.n	800dbb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d10a      	bne.n	800dbd0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800dbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbbe:	f383 8811 	msr	BASEPRI, r3
 800dbc2:	f3bf 8f6f 	isb	sy
 800dbc6:	f3bf 8f4f 	dsb	sy
 800dbca:	60bb      	str	r3, [r7, #8]
}
 800dbcc:	bf00      	nop
 800dbce:	e7fe      	b.n	800dbce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbd4:	1e5a      	subs	r2, r3, #1
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d02c      	beq.n	800dc40 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d128      	bne.n	800dc40 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	3304      	adds	r3, #4
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7fe fc36 	bl	800c464 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc10:	4b0f      	ldr	r3, [pc, #60]	; (800dc50 <xTaskPriorityDisinherit+0xd4>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	429a      	cmp	r2, r3
 800dc16:	d903      	bls.n	800dc20 <xTaskPriorityDisinherit+0xa4>
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc1c:	4a0c      	ldr	r2, [pc, #48]	; (800dc50 <xTaskPriorityDisinherit+0xd4>)
 800dc1e:	6013      	str	r3, [r2, #0]
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc24:	4613      	mov	r3, r2
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	4413      	add	r3, r2
 800dc2a:	009b      	lsls	r3, r3, #2
 800dc2c:	4a09      	ldr	r2, [pc, #36]	; (800dc54 <xTaskPriorityDisinherit+0xd8>)
 800dc2e:	441a      	add	r2, r3
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	3304      	adds	r3, #4
 800dc34:	4619      	mov	r1, r3
 800dc36:	4610      	mov	r0, r2
 800dc38:	f7fe fbb7 	bl	800c3aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc40:	697b      	ldr	r3, [r7, #20]
	}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3718      	adds	r7, #24
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	bf00      	nop
 800dc4c:	2400df48 	.word	0x2400df48
 800dc50:	2400e424 	.word	0x2400e424
 800dc54:	2400df4c 	.word	0x2400df4c

0800dc58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b084      	sub	sp, #16
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dc62:	4b21      	ldr	r3, [pc, #132]	; (800dce8 <prvAddCurrentTaskToDelayedList+0x90>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc68:	4b20      	ldr	r3, [pc, #128]	; (800dcec <prvAddCurrentTaskToDelayedList+0x94>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	3304      	adds	r3, #4
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7fe fbf8 	bl	800c464 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc7a:	d10a      	bne.n	800dc92 <prvAddCurrentTaskToDelayedList+0x3a>
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d007      	beq.n	800dc92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc82:	4b1a      	ldr	r3, [pc, #104]	; (800dcec <prvAddCurrentTaskToDelayedList+0x94>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	3304      	adds	r3, #4
 800dc88:	4619      	mov	r1, r3
 800dc8a:	4819      	ldr	r0, [pc, #100]	; (800dcf0 <prvAddCurrentTaskToDelayedList+0x98>)
 800dc8c:	f7fe fb8d 	bl	800c3aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dc90:	e026      	b.n	800dce0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dc92:	68fa      	ldr	r2, [r7, #12]
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	4413      	add	r3, r2
 800dc98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dc9a:	4b14      	ldr	r3, [pc, #80]	; (800dcec <prvAddCurrentTaskToDelayedList+0x94>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	68ba      	ldr	r2, [r7, #8]
 800dca0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dca2:	68ba      	ldr	r2, [r7, #8]
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d209      	bcs.n	800dcbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dcaa:	4b12      	ldr	r3, [pc, #72]	; (800dcf4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dcac:	681a      	ldr	r2, [r3, #0]
 800dcae:	4b0f      	ldr	r3, [pc, #60]	; (800dcec <prvAddCurrentTaskToDelayedList+0x94>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	3304      	adds	r3, #4
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	4610      	mov	r0, r2
 800dcb8:	f7fe fb9b 	bl	800c3f2 <vListInsert>
}
 800dcbc:	e010      	b.n	800dce0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dcbe:	4b0e      	ldr	r3, [pc, #56]	; (800dcf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	4b0a      	ldr	r3, [pc, #40]	; (800dcec <prvAddCurrentTaskToDelayedList+0x94>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	3304      	adds	r3, #4
 800dcc8:	4619      	mov	r1, r3
 800dcca:	4610      	mov	r0, r2
 800dccc:	f7fe fb91 	bl	800c3f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dcd0:	4b0a      	ldr	r3, [pc, #40]	; (800dcfc <prvAddCurrentTaskToDelayedList+0xa4>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	68ba      	ldr	r2, [r7, #8]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d202      	bcs.n	800dce0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dcda:	4a08      	ldr	r2, [pc, #32]	; (800dcfc <prvAddCurrentTaskToDelayedList+0xa4>)
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	6013      	str	r3, [r2, #0]
}
 800dce0:	bf00      	nop
 800dce2:	3710      	adds	r7, #16
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	2400e420 	.word	0x2400e420
 800dcec:	2400df48 	.word	0x2400df48
 800dcf0:	2400e408 	.word	0x2400e408
 800dcf4:	2400e3d8 	.word	0x2400e3d8
 800dcf8:	2400e3d4 	.word	0x2400e3d4
 800dcfc:	2400e43c 	.word	0x2400e43c

0800dd00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b08a      	sub	sp, #40	; 0x28
 800dd04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dd06:	2300      	movs	r3, #0
 800dd08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dd0a:	f000 fb07 	bl	800e31c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dd0e:	4b1c      	ldr	r3, [pc, #112]	; (800dd80 <xTimerCreateTimerTask+0x80>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d021      	beq.n	800dd5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dd16:	2300      	movs	r3, #0
 800dd18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dd1e:	1d3a      	adds	r2, r7, #4
 800dd20:	f107 0108 	add.w	r1, r7, #8
 800dd24:	f107 030c 	add.w	r3, r7, #12
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7fe faf7 	bl	800c31c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dd2e:	6879      	ldr	r1, [r7, #4]
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	68fa      	ldr	r2, [r7, #12]
 800dd34:	9202      	str	r2, [sp, #8]
 800dd36:	9301      	str	r3, [sp, #4]
 800dd38:	2302      	movs	r3, #2
 800dd3a:	9300      	str	r3, [sp, #0]
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	460a      	mov	r2, r1
 800dd40:	4910      	ldr	r1, [pc, #64]	; (800dd84 <xTimerCreateTimerTask+0x84>)
 800dd42:	4811      	ldr	r0, [pc, #68]	; (800dd88 <xTimerCreateTimerTask+0x88>)
 800dd44:	f7ff f8a4 	bl	800ce90 <xTaskCreateStatic>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	4a10      	ldr	r2, [pc, #64]	; (800dd8c <xTimerCreateTimerTask+0x8c>)
 800dd4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dd4e:	4b0f      	ldr	r3, [pc, #60]	; (800dd8c <xTimerCreateTimerTask+0x8c>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d001      	beq.n	800dd5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dd56:	2301      	movs	r3, #1
 800dd58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d10a      	bne.n	800dd76 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd64:	f383 8811 	msr	BASEPRI, r3
 800dd68:	f3bf 8f6f 	isb	sy
 800dd6c:	f3bf 8f4f 	dsb	sy
 800dd70:	613b      	str	r3, [r7, #16]
}
 800dd72:	bf00      	nop
 800dd74:	e7fe      	b.n	800dd74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dd76:	697b      	ldr	r3, [r7, #20]
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3718      	adds	r7, #24
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	2400e478 	.word	0x2400e478
 800dd84:	08012ef8 	.word	0x08012ef8
 800dd88:	0800dec5 	.word	0x0800dec5
 800dd8c:	2400e47c 	.word	0x2400e47c

0800dd90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b08a      	sub	sp, #40	; 0x28
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	60f8      	str	r0, [r7, #12]
 800dd98:	60b9      	str	r1, [r7, #8]
 800dd9a:	607a      	str	r2, [r7, #4]
 800dd9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d10a      	bne.n	800ddbe <xTimerGenericCommand+0x2e>
	__asm volatile
 800dda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddac:	f383 8811 	msr	BASEPRI, r3
 800ddb0:	f3bf 8f6f 	isb	sy
 800ddb4:	f3bf 8f4f 	dsb	sy
 800ddb8:	623b      	str	r3, [r7, #32]
}
 800ddba:	bf00      	nop
 800ddbc:	e7fe      	b.n	800ddbc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ddbe:	4b1a      	ldr	r3, [pc, #104]	; (800de28 <xTimerGenericCommand+0x98>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d02a      	beq.n	800de1c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	2b05      	cmp	r3, #5
 800ddd6:	dc18      	bgt.n	800de0a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ddd8:	f7ff feb2 	bl	800db40 <xTaskGetSchedulerState>
 800dddc:	4603      	mov	r3, r0
 800ddde:	2b02      	cmp	r3, #2
 800dde0:	d109      	bne.n	800ddf6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dde2:	4b11      	ldr	r3, [pc, #68]	; (800de28 <xTimerGenericCommand+0x98>)
 800dde4:	6818      	ldr	r0, [r3, #0]
 800dde6:	f107 0110 	add.w	r1, r7, #16
 800ddea:	2300      	movs	r3, #0
 800ddec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddee:	f7fe fc67 	bl	800c6c0 <xQueueGenericSend>
 800ddf2:	6278      	str	r0, [r7, #36]	; 0x24
 800ddf4:	e012      	b.n	800de1c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ddf6:	4b0c      	ldr	r3, [pc, #48]	; (800de28 <xTimerGenericCommand+0x98>)
 800ddf8:	6818      	ldr	r0, [r3, #0]
 800ddfa:	f107 0110 	add.w	r1, r7, #16
 800ddfe:	2300      	movs	r3, #0
 800de00:	2200      	movs	r2, #0
 800de02:	f7fe fc5d 	bl	800c6c0 <xQueueGenericSend>
 800de06:	6278      	str	r0, [r7, #36]	; 0x24
 800de08:	e008      	b.n	800de1c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800de0a:	4b07      	ldr	r3, [pc, #28]	; (800de28 <xTimerGenericCommand+0x98>)
 800de0c:	6818      	ldr	r0, [r3, #0]
 800de0e:	f107 0110 	add.w	r1, r7, #16
 800de12:	2300      	movs	r3, #0
 800de14:	683a      	ldr	r2, [r7, #0]
 800de16:	f7fe fd51 	bl	800c8bc <xQueueGenericSendFromISR>
 800de1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800de1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3728      	adds	r7, #40	; 0x28
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
 800de26:	bf00      	nop
 800de28:	2400e478 	.word	0x2400e478

0800de2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b088      	sub	sp, #32
 800de30:	af02      	add	r7, sp, #8
 800de32:	6078      	str	r0, [r7, #4]
 800de34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de36:	4b22      	ldr	r3, [pc, #136]	; (800dec0 <prvProcessExpiredTimer+0x94>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	68db      	ldr	r3, [r3, #12]
 800de3c:	68db      	ldr	r3, [r3, #12]
 800de3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	3304      	adds	r3, #4
 800de44:	4618      	mov	r0, r3
 800de46:	f7fe fb0d 	bl	800c464 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de50:	f003 0304 	and.w	r3, r3, #4
 800de54:	2b00      	cmp	r3, #0
 800de56:	d022      	beq.n	800de9e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	699a      	ldr	r2, [r3, #24]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	18d1      	adds	r1, r2, r3
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	683a      	ldr	r2, [r7, #0]
 800de64:	6978      	ldr	r0, [r7, #20]
 800de66:	f000 f8d1 	bl	800e00c <prvInsertTimerInActiveList>
 800de6a:	4603      	mov	r3, r0
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d01f      	beq.n	800deb0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de70:	2300      	movs	r3, #0
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	2300      	movs	r3, #0
 800de76:	687a      	ldr	r2, [r7, #4]
 800de78:	2100      	movs	r1, #0
 800de7a:	6978      	ldr	r0, [r7, #20]
 800de7c:	f7ff ff88 	bl	800dd90 <xTimerGenericCommand>
 800de80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d113      	bne.n	800deb0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800de88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de8c:	f383 8811 	msr	BASEPRI, r3
 800de90:	f3bf 8f6f 	isb	sy
 800de94:	f3bf 8f4f 	dsb	sy
 800de98:	60fb      	str	r3, [r7, #12]
}
 800de9a:	bf00      	nop
 800de9c:	e7fe      	b.n	800de9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dea4:	f023 0301 	bic.w	r3, r3, #1
 800dea8:	b2da      	uxtb	r2, r3
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	6a1b      	ldr	r3, [r3, #32]
 800deb4:	6978      	ldr	r0, [r7, #20]
 800deb6:	4798      	blx	r3
}
 800deb8:	bf00      	nop
 800deba:	3718      	adds	r7, #24
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}
 800dec0:	2400e470 	.word	0x2400e470

0800dec4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b084      	sub	sp, #16
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800decc:	f107 0308 	add.w	r3, r7, #8
 800ded0:	4618      	mov	r0, r3
 800ded2:	f000 f857 	bl	800df84 <prvGetNextExpireTime>
 800ded6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	4619      	mov	r1, r3
 800dedc:	68f8      	ldr	r0, [r7, #12]
 800dede:	f000 f803 	bl	800dee8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dee2:	f000 f8d5 	bl	800e090 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dee6:	e7f1      	b.n	800decc <prvTimerTask+0x8>

0800dee8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800def2:	f7ff fa29 	bl	800d348 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800def6:	f107 0308 	add.w	r3, r7, #8
 800defa:	4618      	mov	r0, r3
 800defc:	f000 f866 	bl	800dfcc <prvSampleTimeNow>
 800df00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d130      	bne.n	800df6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d10a      	bne.n	800df24 <prvProcessTimerOrBlockTask+0x3c>
 800df0e:	687a      	ldr	r2, [r7, #4]
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	429a      	cmp	r2, r3
 800df14:	d806      	bhi.n	800df24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800df16:	f7ff fa25 	bl	800d364 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800df1a:	68f9      	ldr	r1, [r7, #12]
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f7ff ff85 	bl	800de2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800df22:	e024      	b.n	800df6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d008      	beq.n	800df3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800df2a:	4b13      	ldr	r3, [pc, #76]	; (800df78 <prvProcessTimerOrBlockTask+0x90>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d101      	bne.n	800df38 <prvProcessTimerOrBlockTask+0x50>
 800df34:	2301      	movs	r3, #1
 800df36:	e000      	b.n	800df3a <prvProcessTimerOrBlockTask+0x52>
 800df38:	2300      	movs	r3, #0
 800df3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800df3c:	4b0f      	ldr	r3, [pc, #60]	; (800df7c <prvProcessTimerOrBlockTask+0x94>)
 800df3e:	6818      	ldr	r0, [r3, #0]
 800df40:	687a      	ldr	r2, [r7, #4]
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	1ad3      	subs	r3, r2, r3
 800df46:	683a      	ldr	r2, [r7, #0]
 800df48:	4619      	mov	r1, r3
 800df4a:	f7fe ff6d 	bl	800ce28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800df4e:	f7ff fa09 	bl	800d364 <xTaskResumeAll>
 800df52:	4603      	mov	r3, r0
 800df54:	2b00      	cmp	r3, #0
 800df56:	d10a      	bne.n	800df6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800df58:	4b09      	ldr	r3, [pc, #36]	; (800df80 <prvProcessTimerOrBlockTask+0x98>)
 800df5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df5e:	601a      	str	r2, [r3, #0]
 800df60:	f3bf 8f4f 	dsb	sy
 800df64:	f3bf 8f6f 	isb	sy
}
 800df68:	e001      	b.n	800df6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800df6a:	f7ff f9fb 	bl	800d364 <xTaskResumeAll>
}
 800df6e:	bf00      	nop
 800df70:	3710      	adds	r7, #16
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
 800df76:	bf00      	nop
 800df78:	2400e474 	.word	0x2400e474
 800df7c:	2400e478 	.word	0x2400e478
 800df80:	e000ed04 	.word	0xe000ed04

0800df84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800df84:	b480      	push	{r7}
 800df86:	b085      	sub	sp, #20
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800df8c:	4b0e      	ldr	r3, [pc, #56]	; (800dfc8 <prvGetNextExpireTime+0x44>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d101      	bne.n	800df9a <prvGetNextExpireTime+0x16>
 800df96:	2201      	movs	r2, #1
 800df98:	e000      	b.n	800df9c <prvGetNextExpireTime+0x18>
 800df9a:	2200      	movs	r2, #0
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d105      	bne.n	800dfb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dfa8:	4b07      	ldr	r3, [pc, #28]	; (800dfc8 <prvGetNextExpireTime+0x44>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	60fb      	str	r3, [r7, #12]
 800dfb2:	e001      	b.n	800dfb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3714      	adds	r7, #20
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc4:	4770      	bx	lr
 800dfc6:	bf00      	nop
 800dfc8:	2400e470 	.word	0x2400e470

0800dfcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b084      	sub	sp, #16
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dfd4:	f7ff fa64 	bl	800d4a0 <xTaskGetTickCount>
 800dfd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dfda:	4b0b      	ldr	r3, [pc, #44]	; (800e008 <prvSampleTimeNow+0x3c>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	68fa      	ldr	r2, [r7, #12]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d205      	bcs.n	800dff0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dfe4:	f000 f936 	bl	800e254 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2201      	movs	r2, #1
 800dfec:	601a      	str	r2, [r3, #0]
 800dfee:	e002      	b.n	800dff6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2200      	movs	r2, #0
 800dff4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dff6:	4a04      	ldr	r2, [pc, #16]	; (800e008 <prvSampleTimeNow+0x3c>)
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dffc:	68fb      	ldr	r3, [r7, #12]
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	2400e480 	.word	0x2400e480

0800e00c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b086      	sub	sp, #24
 800e010:	af00      	add	r7, sp, #0
 800e012:	60f8      	str	r0, [r7, #12]
 800e014:	60b9      	str	r1, [r7, #8]
 800e016:	607a      	str	r2, [r7, #4]
 800e018:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e01a:	2300      	movs	r3, #0
 800e01c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	68ba      	ldr	r2, [r7, #8]
 800e022:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	68fa      	ldr	r2, [r7, #12]
 800e028:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e02a:	68ba      	ldr	r2, [r7, #8]
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d812      	bhi.n	800e058 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e032:	687a      	ldr	r2, [r7, #4]
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	1ad2      	subs	r2, r2, r3
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	699b      	ldr	r3, [r3, #24]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d302      	bcc.n	800e046 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e040:	2301      	movs	r3, #1
 800e042:	617b      	str	r3, [r7, #20]
 800e044:	e01b      	b.n	800e07e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e046:	4b10      	ldr	r3, [pc, #64]	; (800e088 <prvInsertTimerInActiveList+0x7c>)
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	3304      	adds	r3, #4
 800e04e:	4619      	mov	r1, r3
 800e050:	4610      	mov	r0, r2
 800e052:	f7fe f9ce 	bl	800c3f2 <vListInsert>
 800e056:	e012      	b.n	800e07e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e058:	687a      	ldr	r2, [r7, #4]
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	429a      	cmp	r2, r3
 800e05e:	d206      	bcs.n	800e06e <prvInsertTimerInActiveList+0x62>
 800e060:	68ba      	ldr	r2, [r7, #8]
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	429a      	cmp	r2, r3
 800e066:	d302      	bcc.n	800e06e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e068:	2301      	movs	r3, #1
 800e06a:	617b      	str	r3, [r7, #20]
 800e06c:	e007      	b.n	800e07e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e06e:	4b07      	ldr	r3, [pc, #28]	; (800e08c <prvInsertTimerInActiveList+0x80>)
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	3304      	adds	r3, #4
 800e076:	4619      	mov	r1, r3
 800e078:	4610      	mov	r0, r2
 800e07a:	f7fe f9ba 	bl	800c3f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e07e:	697b      	ldr	r3, [r7, #20]
}
 800e080:	4618      	mov	r0, r3
 800e082:	3718      	adds	r7, #24
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}
 800e088:	2400e474 	.word	0x2400e474
 800e08c:	2400e470 	.word	0x2400e470

0800e090 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b08e      	sub	sp, #56	; 0x38
 800e094:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e096:	e0ca      	b.n	800e22e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	da18      	bge.n	800e0d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e09e:	1d3b      	adds	r3, r7, #4
 800e0a0:	3304      	adds	r3, #4
 800e0a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d10a      	bne.n	800e0c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ae:	f383 8811 	msr	BASEPRI, r3
 800e0b2:	f3bf 8f6f 	isb	sy
 800e0b6:	f3bf 8f4f 	dsb	sy
 800e0ba:	61fb      	str	r3, [r7, #28]
}
 800e0bc:	bf00      	nop
 800e0be:	e7fe      	b.n	800e0be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0c6:	6850      	ldr	r0, [r2, #4]
 800e0c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0ca:	6892      	ldr	r2, [r2, #8]
 800e0cc:	4611      	mov	r1, r2
 800e0ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	f2c0 80ab 	blt.w	800e22e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0de:	695b      	ldr	r3, [r3, #20]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d004      	beq.n	800e0ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e6:	3304      	adds	r3, #4
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7fe f9bb 	bl	800c464 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e0ee:	463b      	mov	r3, r7
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f7ff ff6b 	bl	800dfcc <prvSampleTimeNow>
 800e0f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2b09      	cmp	r3, #9
 800e0fc:	f200 8096 	bhi.w	800e22c <prvProcessReceivedCommands+0x19c>
 800e100:	a201      	add	r2, pc, #4	; (adr r2, 800e108 <prvProcessReceivedCommands+0x78>)
 800e102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e106:	bf00      	nop
 800e108:	0800e131 	.word	0x0800e131
 800e10c:	0800e131 	.word	0x0800e131
 800e110:	0800e131 	.word	0x0800e131
 800e114:	0800e1a5 	.word	0x0800e1a5
 800e118:	0800e1b9 	.word	0x0800e1b9
 800e11c:	0800e203 	.word	0x0800e203
 800e120:	0800e131 	.word	0x0800e131
 800e124:	0800e131 	.word	0x0800e131
 800e128:	0800e1a5 	.word	0x0800e1a5
 800e12c:	0800e1b9 	.word	0x0800e1b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e136:	f043 0301 	orr.w	r3, r3, #1
 800e13a:	b2da      	uxtb	r2, r3
 800e13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e13e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e142:	68ba      	ldr	r2, [r7, #8]
 800e144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e146:	699b      	ldr	r3, [r3, #24]
 800e148:	18d1      	adds	r1, r2, r3
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e14e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e150:	f7ff ff5c 	bl	800e00c <prvInsertTimerInActiveList>
 800e154:	4603      	mov	r3, r0
 800e156:	2b00      	cmp	r3, #0
 800e158:	d069      	beq.n	800e22e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e15c:	6a1b      	ldr	r3, [r3, #32]
 800e15e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e160:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e168:	f003 0304 	and.w	r3, r3, #4
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d05e      	beq.n	800e22e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e170:	68ba      	ldr	r2, [r7, #8]
 800e172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e174:	699b      	ldr	r3, [r3, #24]
 800e176:	441a      	add	r2, r3
 800e178:	2300      	movs	r3, #0
 800e17a:	9300      	str	r3, [sp, #0]
 800e17c:	2300      	movs	r3, #0
 800e17e:	2100      	movs	r1, #0
 800e180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e182:	f7ff fe05 	bl	800dd90 <xTimerGenericCommand>
 800e186:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e188:	6a3b      	ldr	r3, [r7, #32]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d14f      	bne.n	800e22e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e192:	f383 8811 	msr	BASEPRI, r3
 800e196:	f3bf 8f6f 	isb	sy
 800e19a:	f3bf 8f4f 	dsb	sy
 800e19e:	61bb      	str	r3, [r7, #24]
}
 800e1a0:	bf00      	nop
 800e1a2:	e7fe      	b.n	800e1a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1aa:	f023 0301 	bic.w	r3, r3, #1
 800e1ae:	b2da      	uxtb	r2, r3
 800e1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e1b6:	e03a      	b.n	800e22e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1be:	f043 0301 	orr.w	r3, r3, #1
 800e1c2:	b2da      	uxtb	r2, r3
 800e1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e1ca:	68ba      	ldr	r2, [r7, #8]
 800e1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d2:	699b      	ldr	r3, [r3, #24]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d10a      	bne.n	800e1ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1dc:	f383 8811 	msr	BASEPRI, r3
 800e1e0:	f3bf 8f6f 	isb	sy
 800e1e4:	f3bf 8f4f 	dsb	sy
 800e1e8:	617b      	str	r3, [r7, #20]
}
 800e1ea:	bf00      	nop
 800e1ec:	e7fe      	b.n	800e1ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f0:	699a      	ldr	r2, [r3, #24]
 800e1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f4:	18d1      	adds	r1, r2, r3
 800e1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1fc:	f7ff ff06 	bl	800e00c <prvInsertTimerInActiveList>
					break;
 800e200:	e015      	b.n	800e22e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e208:	f003 0302 	and.w	r3, r3, #2
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d103      	bne.n	800e218 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e212:	f000 fbdd 	bl	800e9d0 <vPortFree>
 800e216:	e00a      	b.n	800e22e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e21a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e21e:	f023 0301 	bic.w	r3, r3, #1
 800e222:	b2da      	uxtb	r2, r3
 800e224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e22a:	e000      	b.n	800e22e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800e22c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e22e:	4b08      	ldr	r3, [pc, #32]	; (800e250 <prvProcessReceivedCommands+0x1c0>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	1d39      	adds	r1, r7, #4
 800e234:	2200      	movs	r2, #0
 800e236:	4618      	mov	r0, r3
 800e238:	f7fe fbdc 	bl	800c9f4 <xQueueReceive>
 800e23c:	4603      	mov	r3, r0
 800e23e:	2b00      	cmp	r3, #0
 800e240:	f47f af2a 	bne.w	800e098 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e244:	bf00      	nop
 800e246:	bf00      	nop
 800e248:	3730      	adds	r7, #48	; 0x30
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	2400e478 	.word	0x2400e478

0800e254 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b088      	sub	sp, #32
 800e258:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e25a:	e048      	b.n	800e2ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e25c:	4b2d      	ldr	r3, [pc, #180]	; (800e314 <prvSwitchTimerLists+0xc0>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	68db      	ldr	r3, [r3, #12]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e266:	4b2b      	ldr	r3, [pc, #172]	; (800e314 <prvSwitchTimerLists+0xc0>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	68db      	ldr	r3, [r3, #12]
 800e26c:	68db      	ldr	r3, [r3, #12]
 800e26e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	3304      	adds	r3, #4
 800e274:	4618      	mov	r0, r3
 800e276:	f7fe f8f5 	bl	800c464 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	6a1b      	ldr	r3, [r3, #32]
 800e27e:	68f8      	ldr	r0, [r7, #12]
 800e280:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e288:	f003 0304 	and.w	r3, r3, #4
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d02e      	beq.n	800e2ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	699b      	ldr	r3, [r3, #24]
 800e294:	693a      	ldr	r2, [r7, #16]
 800e296:	4413      	add	r3, r2
 800e298:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e29a:	68ba      	ldr	r2, [r7, #8]
 800e29c:	693b      	ldr	r3, [r7, #16]
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d90e      	bls.n	800e2c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	68ba      	ldr	r2, [r7, #8]
 800e2a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	68fa      	ldr	r2, [r7, #12]
 800e2ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e2ae:	4b19      	ldr	r3, [pc, #100]	; (800e314 <prvSwitchTimerLists+0xc0>)
 800e2b0:	681a      	ldr	r2, [r3, #0]
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	3304      	adds	r3, #4
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	4610      	mov	r0, r2
 800e2ba:	f7fe f89a 	bl	800c3f2 <vListInsert>
 800e2be:	e016      	b.n	800e2ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	9300      	str	r3, [sp, #0]
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	693a      	ldr	r2, [r7, #16]
 800e2c8:	2100      	movs	r1, #0
 800e2ca:	68f8      	ldr	r0, [r7, #12]
 800e2cc:	f7ff fd60 	bl	800dd90 <xTimerGenericCommand>
 800e2d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d10a      	bne.n	800e2ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2dc:	f383 8811 	msr	BASEPRI, r3
 800e2e0:	f3bf 8f6f 	isb	sy
 800e2e4:	f3bf 8f4f 	dsb	sy
 800e2e8:	603b      	str	r3, [r7, #0]
}
 800e2ea:	bf00      	nop
 800e2ec:	e7fe      	b.n	800e2ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e2ee:	4b09      	ldr	r3, [pc, #36]	; (800e314 <prvSwitchTimerLists+0xc0>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d1b1      	bne.n	800e25c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e2f8:	4b06      	ldr	r3, [pc, #24]	; (800e314 <prvSwitchTimerLists+0xc0>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e2fe:	4b06      	ldr	r3, [pc, #24]	; (800e318 <prvSwitchTimerLists+0xc4>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	4a04      	ldr	r2, [pc, #16]	; (800e314 <prvSwitchTimerLists+0xc0>)
 800e304:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e306:	4a04      	ldr	r2, [pc, #16]	; (800e318 <prvSwitchTimerLists+0xc4>)
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	6013      	str	r3, [r2, #0]
}
 800e30c:	bf00      	nop
 800e30e:	3718      	adds	r7, #24
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}
 800e314:	2400e470 	.word	0x2400e470
 800e318:	2400e474 	.word	0x2400e474

0800e31c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b082      	sub	sp, #8
 800e320:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e322:	f000 f967 	bl	800e5f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e326:	4b15      	ldr	r3, [pc, #84]	; (800e37c <prvCheckForValidListAndQueue+0x60>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d120      	bne.n	800e370 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e32e:	4814      	ldr	r0, [pc, #80]	; (800e380 <prvCheckForValidListAndQueue+0x64>)
 800e330:	f7fe f80e 	bl	800c350 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e334:	4813      	ldr	r0, [pc, #76]	; (800e384 <prvCheckForValidListAndQueue+0x68>)
 800e336:	f7fe f80b 	bl	800c350 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e33a:	4b13      	ldr	r3, [pc, #76]	; (800e388 <prvCheckForValidListAndQueue+0x6c>)
 800e33c:	4a10      	ldr	r2, [pc, #64]	; (800e380 <prvCheckForValidListAndQueue+0x64>)
 800e33e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e340:	4b12      	ldr	r3, [pc, #72]	; (800e38c <prvCheckForValidListAndQueue+0x70>)
 800e342:	4a10      	ldr	r2, [pc, #64]	; (800e384 <prvCheckForValidListAndQueue+0x68>)
 800e344:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e346:	2300      	movs	r3, #0
 800e348:	9300      	str	r3, [sp, #0]
 800e34a:	4b11      	ldr	r3, [pc, #68]	; (800e390 <prvCheckForValidListAndQueue+0x74>)
 800e34c:	4a11      	ldr	r2, [pc, #68]	; (800e394 <prvCheckForValidListAndQueue+0x78>)
 800e34e:	2110      	movs	r1, #16
 800e350:	200a      	movs	r0, #10
 800e352:	f7fe f919 	bl	800c588 <xQueueGenericCreateStatic>
 800e356:	4603      	mov	r3, r0
 800e358:	4a08      	ldr	r2, [pc, #32]	; (800e37c <prvCheckForValidListAndQueue+0x60>)
 800e35a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e35c:	4b07      	ldr	r3, [pc, #28]	; (800e37c <prvCheckForValidListAndQueue+0x60>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d005      	beq.n	800e370 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e364:	4b05      	ldr	r3, [pc, #20]	; (800e37c <prvCheckForValidListAndQueue+0x60>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	490b      	ldr	r1, [pc, #44]	; (800e398 <prvCheckForValidListAndQueue+0x7c>)
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7fe fd32 	bl	800cdd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e370:	f000 f970 	bl	800e654 <vPortExitCritical>
}
 800e374:	bf00      	nop
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}
 800e37a:	bf00      	nop
 800e37c:	2400e478 	.word	0x2400e478
 800e380:	2400e448 	.word	0x2400e448
 800e384:	2400e45c 	.word	0x2400e45c
 800e388:	2400e470 	.word	0x2400e470
 800e38c:	2400e474 	.word	0x2400e474
 800e390:	2400e524 	.word	0x2400e524
 800e394:	2400e484 	.word	0x2400e484
 800e398:	08012f00 	.word	0x08012f00

0800e39c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e39c:	b480      	push	{r7}
 800e39e:	b085      	sub	sp, #20
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	3b04      	subs	r3, #4
 800e3ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e3b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	3b04      	subs	r3, #4
 800e3ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	f023 0201 	bic.w	r2, r3, #1
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	3b04      	subs	r3, #4
 800e3ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e3cc:	4a0c      	ldr	r2, [pc, #48]	; (800e400 <pxPortInitialiseStack+0x64>)
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	3b14      	subs	r3, #20
 800e3d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e3d8:	687a      	ldr	r2, [r7, #4]
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	3b04      	subs	r3, #4
 800e3e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f06f 0202 	mvn.w	r2, #2
 800e3ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	3b20      	subs	r3, #32
 800e3f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3714      	adds	r7, #20
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fe:	4770      	bx	lr
 800e400:	0800e405 	.word	0x0800e405

0800e404 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e404:	b480      	push	{r7}
 800e406:	b085      	sub	sp, #20
 800e408:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e40a:	2300      	movs	r3, #0
 800e40c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e40e:	4b12      	ldr	r3, [pc, #72]	; (800e458 <prvTaskExitError+0x54>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e416:	d00a      	beq.n	800e42e <prvTaskExitError+0x2a>
	__asm volatile
 800e418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e41c:	f383 8811 	msr	BASEPRI, r3
 800e420:	f3bf 8f6f 	isb	sy
 800e424:	f3bf 8f4f 	dsb	sy
 800e428:	60fb      	str	r3, [r7, #12]
}
 800e42a:	bf00      	nop
 800e42c:	e7fe      	b.n	800e42c <prvTaskExitError+0x28>
	__asm volatile
 800e42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e432:	f383 8811 	msr	BASEPRI, r3
 800e436:	f3bf 8f6f 	isb	sy
 800e43a:	f3bf 8f4f 	dsb	sy
 800e43e:	60bb      	str	r3, [r7, #8]
}
 800e440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e442:	bf00      	nop
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d0fc      	beq.n	800e444 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e44a:	bf00      	nop
 800e44c:	bf00      	nop
 800e44e:	3714      	adds	r7, #20
 800e450:	46bd      	mov	sp, r7
 800e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e456:	4770      	bx	lr
 800e458:	24000080 	.word	0x24000080
 800e45c:	00000000 	.word	0x00000000

0800e460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e460:	4b07      	ldr	r3, [pc, #28]	; (800e480 <pxCurrentTCBConst2>)
 800e462:	6819      	ldr	r1, [r3, #0]
 800e464:	6808      	ldr	r0, [r1, #0]
 800e466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e46a:	f380 8809 	msr	PSP, r0
 800e46e:	f3bf 8f6f 	isb	sy
 800e472:	f04f 0000 	mov.w	r0, #0
 800e476:	f380 8811 	msr	BASEPRI, r0
 800e47a:	4770      	bx	lr
 800e47c:	f3af 8000 	nop.w

0800e480 <pxCurrentTCBConst2>:
 800e480:	2400df48 	.word	0x2400df48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e484:	bf00      	nop
 800e486:	bf00      	nop

0800e488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e488:	4808      	ldr	r0, [pc, #32]	; (800e4ac <prvPortStartFirstTask+0x24>)
 800e48a:	6800      	ldr	r0, [r0, #0]
 800e48c:	6800      	ldr	r0, [r0, #0]
 800e48e:	f380 8808 	msr	MSP, r0
 800e492:	f04f 0000 	mov.w	r0, #0
 800e496:	f380 8814 	msr	CONTROL, r0
 800e49a:	b662      	cpsie	i
 800e49c:	b661      	cpsie	f
 800e49e:	f3bf 8f4f 	dsb	sy
 800e4a2:	f3bf 8f6f 	isb	sy
 800e4a6:	df00      	svc	0
 800e4a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e4aa:	bf00      	nop
 800e4ac:	e000ed08 	.word	0xe000ed08

0800e4b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b086      	sub	sp, #24
 800e4b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e4b6:	4b46      	ldr	r3, [pc, #280]	; (800e5d0 <xPortStartScheduler+0x120>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4a46      	ldr	r2, [pc, #280]	; (800e5d4 <xPortStartScheduler+0x124>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d10a      	bne.n	800e4d6 <xPortStartScheduler+0x26>
	__asm volatile
 800e4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c4:	f383 8811 	msr	BASEPRI, r3
 800e4c8:	f3bf 8f6f 	isb	sy
 800e4cc:	f3bf 8f4f 	dsb	sy
 800e4d0:	613b      	str	r3, [r7, #16]
}
 800e4d2:	bf00      	nop
 800e4d4:	e7fe      	b.n	800e4d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e4d6:	4b3e      	ldr	r3, [pc, #248]	; (800e5d0 <xPortStartScheduler+0x120>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	4a3f      	ldr	r2, [pc, #252]	; (800e5d8 <xPortStartScheduler+0x128>)
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	d10a      	bne.n	800e4f6 <xPortStartScheduler+0x46>
	__asm volatile
 800e4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e4:	f383 8811 	msr	BASEPRI, r3
 800e4e8:	f3bf 8f6f 	isb	sy
 800e4ec:	f3bf 8f4f 	dsb	sy
 800e4f0:	60fb      	str	r3, [r7, #12]
}
 800e4f2:	bf00      	nop
 800e4f4:	e7fe      	b.n	800e4f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e4f6:	4b39      	ldr	r3, [pc, #228]	; (800e5dc <xPortStartScheduler+0x12c>)
 800e4f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	781b      	ldrb	r3, [r3, #0]
 800e4fe:	b2db      	uxtb	r3, r3
 800e500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	22ff      	movs	r2, #255	; 0xff
 800e506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	781b      	ldrb	r3, [r3, #0]
 800e50c:	b2db      	uxtb	r3, r3
 800e50e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e510:	78fb      	ldrb	r3, [r7, #3]
 800e512:	b2db      	uxtb	r3, r3
 800e514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e518:	b2da      	uxtb	r2, r3
 800e51a:	4b31      	ldr	r3, [pc, #196]	; (800e5e0 <xPortStartScheduler+0x130>)
 800e51c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e51e:	4b31      	ldr	r3, [pc, #196]	; (800e5e4 <xPortStartScheduler+0x134>)
 800e520:	2207      	movs	r2, #7
 800e522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e524:	e009      	b.n	800e53a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e526:	4b2f      	ldr	r3, [pc, #188]	; (800e5e4 <xPortStartScheduler+0x134>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	3b01      	subs	r3, #1
 800e52c:	4a2d      	ldr	r2, [pc, #180]	; (800e5e4 <xPortStartScheduler+0x134>)
 800e52e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e530:	78fb      	ldrb	r3, [r7, #3]
 800e532:	b2db      	uxtb	r3, r3
 800e534:	005b      	lsls	r3, r3, #1
 800e536:	b2db      	uxtb	r3, r3
 800e538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e53a:	78fb      	ldrb	r3, [r7, #3]
 800e53c:	b2db      	uxtb	r3, r3
 800e53e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e542:	2b80      	cmp	r3, #128	; 0x80
 800e544:	d0ef      	beq.n	800e526 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e546:	4b27      	ldr	r3, [pc, #156]	; (800e5e4 <xPortStartScheduler+0x134>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f1c3 0307 	rsb	r3, r3, #7
 800e54e:	2b04      	cmp	r3, #4
 800e550:	d00a      	beq.n	800e568 <xPortStartScheduler+0xb8>
	__asm volatile
 800e552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e556:	f383 8811 	msr	BASEPRI, r3
 800e55a:	f3bf 8f6f 	isb	sy
 800e55e:	f3bf 8f4f 	dsb	sy
 800e562:	60bb      	str	r3, [r7, #8]
}
 800e564:	bf00      	nop
 800e566:	e7fe      	b.n	800e566 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e568:	4b1e      	ldr	r3, [pc, #120]	; (800e5e4 <xPortStartScheduler+0x134>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	021b      	lsls	r3, r3, #8
 800e56e:	4a1d      	ldr	r2, [pc, #116]	; (800e5e4 <xPortStartScheduler+0x134>)
 800e570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e572:	4b1c      	ldr	r3, [pc, #112]	; (800e5e4 <xPortStartScheduler+0x134>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e57a:	4a1a      	ldr	r2, [pc, #104]	; (800e5e4 <xPortStartScheduler+0x134>)
 800e57c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	b2da      	uxtb	r2, r3
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e586:	4b18      	ldr	r3, [pc, #96]	; (800e5e8 <xPortStartScheduler+0x138>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	4a17      	ldr	r2, [pc, #92]	; (800e5e8 <xPortStartScheduler+0x138>)
 800e58c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e592:	4b15      	ldr	r3, [pc, #84]	; (800e5e8 <xPortStartScheduler+0x138>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	4a14      	ldr	r2, [pc, #80]	; (800e5e8 <xPortStartScheduler+0x138>)
 800e598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e59c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e59e:	f000 f8dd 	bl	800e75c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e5a2:	4b12      	ldr	r3, [pc, #72]	; (800e5ec <xPortStartScheduler+0x13c>)
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e5a8:	f000 f8fc 	bl	800e7a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e5ac:	4b10      	ldr	r3, [pc, #64]	; (800e5f0 <xPortStartScheduler+0x140>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4a0f      	ldr	r2, [pc, #60]	; (800e5f0 <xPortStartScheduler+0x140>)
 800e5b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e5b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e5b8:	f7ff ff66 	bl	800e488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e5bc:	f7ff f83a 	bl	800d634 <vTaskSwitchContext>
	prvTaskExitError();
 800e5c0:	f7ff ff20 	bl	800e404 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e5c4:	2300      	movs	r3, #0
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3718      	adds	r7, #24
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
 800e5ce:	bf00      	nop
 800e5d0:	e000ed00 	.word	0xe000ed00
 800e5d4:	410fc271 	.word	0x410fc271
 800e5d8:	410fc270 	.word	0x410fc270
 800e5dc:	e000e400 	.word	0xe000e400
 800e5e0:	2400e574 	.word	0x2400e574
 800e5e4:	2400e578 	.word	0x2400e578
 800e5e8:	e000ed20 	.word	0xe000ed20
 800e5ec:	24000080 	.word	0x24000080
 800e5f0:	e000ef34 	.word	0xe000ef34

0800e5f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b083      	sub	sp, #12
 800e5f8:	af00      	add	r7, sp, #0
	__asm volatile
 800e5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5fe:	f383 8811 	msr	BASEPRI, r3
 800e602:	f3bf 8f6f 	isb	sy
 800e606:	f3bf 8f4f 	dsb	sy
 800e60a:	607b      	str	r3, [r7, #4]
}
 800e60c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e60e:	4b0f      	ldr	r3, [pc, #60]	; (800e64c <vPortEnterCritical+0x58>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	3301      	adds	r3, #1
 800e614:	4a0d      	ldr	r2, [pc, #52]	; (800e64c <vPortEnterCritical+0x58>)
 800e616:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e618:	4b0c      	ldr	r3, [pc, #48]	; (800e64c <vPortEnterCritical+0x58>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	2b01      	cmp	r3, #1
 800e61e:	d10f      	bne.n	800e640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e620:	4b0b      	ldr	r3, [pc, #44]	; (800e650 <vPortEnterCritical+0x5c>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	b2db      	uxtb	r3, r3
 800e626:	2b00      	cmp	r3, #0
 800e628:	d00a      	beq.n	800e640 <vPortEnterCritical+0x4c>
	__asm volatile
 800e62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e62e:	f383 8811 	msr	BASEPRI, r3
 800e632:	f3bf 8f6f 	isb	sy
 800e636:	f3bf 8f4f 	dsb	sy
 800e63a:	603b      	str	r3, [r7, #0]
}
 800e63c:	bf00      	nop
 800e63e:	e7fe      	b.n	800e63e <vPortEnterCritical+0x4a>
	}
}
 800e640:	bf00      	nop
 800e642:	370c      	adds	r7, #12
 800e644:	46bd      	mov	sp, r7
 800e646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64a:	4770      	bx	lr
 800e64c:	24000080 	.word	0x24000080
 800e650:	e000ed04 	.word	0xe000ed04

0800e654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e654:	b480      	push	{r7}
 800e656:	b083      	sub	sp, #12
 800e658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e65a:	4b12      	ldr	r3, [pc, #72]	; (800e6a4 <vPortExitCritical+0x50>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d10a      	bne.n	800e678 <vPortExitCritical+0x24>
	__asm volatile
 800e662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e666:	f383 8811 	msr	BASEPRI, r3
 800e66a:	f3bf 8f6f 	isb	sy
 800e66e:	f3bf 8f4f 	dsb	sy
 800e672:	607b      	str	r3, [r7, #4]
}
 800e674:	bf00      	nop
 800e676:	e7fe      	b.n	800e676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e678:	4b0a      	ldr	r3, [pc, #40]	; (800e6a4 <vPortExitCritical+0x50>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	3b01      	subs	r3, #1
 800e67e:	4a09      	ldr	r2, [pc, #36]	; (800e6a4 <vPortExitCritical+0x50>)
 800e680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e682:	4b08      	ldr	r3, [pc, #32]	; (800e6a4 <vPortExitCritical+0x50>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d105      	bne.n	800e696 <vPortExitCritical+0x42>
 800e68a:	2300      	movs	r3, #0
 800e68c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	f383 8811 	msr	BASEPRI, r3
}
 800e694:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e696:	bf00      	nop
 800e698:	370c      	adds	r7, #12
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr
 800e6a2:	bf00      	nop
 800e6a4:	24000080 	.word	0x24000080
	...

0800e6b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e6b0:	f3ef 8009 	mrs	r0, PSP
 800e6b4:	f3bf 8f6f 	isb	sy
 800e6b8:	4b15      	ldr	r3, [pc, #84]	; (800e710 <pxCurrentTCBConst>)
 800e6ba:	681a      	ldr	r2, [r3, #0]
 800e6bc:	f01e 0f10 	tst.w	lr, #16
 800e6c0:	bf08      	it	eq
 800e6c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e6c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ca:	6010      	str	r0, [r2, #0]
 800e6cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e6d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e6d4:	f380 8811 	msr	BASEPRI, r0
 800e6d8:	f3bf 8f4f 	dsb	sy
 800e6dc:	f3bf 8f6f 	isb	sy
 800e6e0:	f7fe ffa8 	bl	800d634 <vTaskSwitchContext>
 800e6e4:	f04f 0000 	mov.w	r0, #0
 800e6e8:	f380 8811 	msr	BASEPRI, r0
 800e6ec:	bc09      	pop	{r0, r3}
 800e6ee:	6819      	ldr	r1, [r3, #0]
 800e6f0:	6808      	ldr	r0, [r1, #0]
 800e6f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6f6:	f01e 0f10 	tst.w	lr, #16
 800e6fa:	bf08      	it	eq
 800e6fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e700:	f380 8809 	msr	PSP, r0
 800e704:	f3bf 8f6f 	isb	sy
 800e708:	4770      	bx	lr
 800e70a:	bf00      	nop
 800e70c:	f3af 8000 	nop.w

0800e710 <pxCurrentTCBConst>:
 800e710:	2400df48 	.word	0x2400df48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e714:	bf00      	nop
 800e716:	bf00      	nop

0800e718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
	__asm volatile
 800e71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e722:	f383 8811 	msr	BASEPRI, r3
 800e726:	f3bf 8f6f 	isb	sy
 800e72a:	f3bf 8f4f 	dsb	sy
 800e72e:	607b      	str	r3, [r7, #4]
}
 800e730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e732:	f7fe fec5 	bl	800d4c0 <xTaskIncrementTick>
 800e736:	4603      	mov	r3, r0
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d003      	beq.n	800e744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e73c:	4b06      	ldr	r3, [pc, #24]	; (800e758 <xPortSysTickHandler+0x40>)
 800e73e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e742:	601a      	str	r2, [r3, #0]
 800e744:	2300      	movs	r3, #0
 800e746:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	f383 8811 	msr	BASEPRI, r3
}
 800e74e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e750:	bf00      	nop
 800e752:	3708      	adds	r7, #8
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}
 800e758:	e000ed04 	.word	0xe000ed04

0800e75c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e75c:	b480      	push	{r7}
 800e75e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e760:	4b0b      	ldr	r3, [pc, #44]	; (800e790 <vPortSetupTimerInterrupt+0x34>)
 800e762:	2200      	movs	r2, #0
 800e764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e766:	4b0b      	ldr	r3, [pc, #44]	; (800e794 <vPortSetupTimerInterrupt+0x38>)
 800e768:	2200      	movs	r2, #0
 800e76a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e76c:	4b0a      	ldr	r3, [pc, #40]	; (800e798 <vPortSetupTimerInterrupt+0x3c>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4a0a      	ldr	r2, [pc, #40]	; (800e79c <vPortSetupTimerInterrupt+0x40>)
 800e772:	fba2 2303 	umull	r2, r3, r2, r3
 800e776:	099b      	lsrs	r3, r3, #6
 800e778:	4a09      	ldr	r2, [pc, #36]	; (800e7a0 <vPortSetupTimerInterrupt+0x44>)
 800e77a:	3b01      	subs	r3, #1
 800e77c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e77e:	4b04      	ldr	r3, [pc, #16]	; (800e790 <vPortSetupTimerInterrupt+0x34>)
 800e780:	2207      	movs	r2, #7
 800e782:	601a      	str	r2, [r3, #0]
}
 800e784:	bf00      	nop
 800e786:	46bd      	mov	sp, r7
 800e788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78c:	4770      	bx	lr
 800e78e:	bf00      	nop
 800e790:	e000e010 	.word	0xe000e010
 800e794:	e000e018 	.word	0xe000e018
 800e798:	24000070 	.word	0x24000070
 800e79c:	10624dd3 	.word	0x10624dd3
 800e7a0:	e000e014 	.word	0xe000e014

0800e7a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e7a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e7b4 <vPortEnableVFP+0x10>
 800e7a8:	6801      	ldr	r1, [r0, #0]
 800e7aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e7ae:	6001      	str	r1, [r0, #0]
 800e7b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e7b2:	bf00      	nop
 800e7b4:	e000ed88 	.word	0xe000ed88

0800e7b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b085      	sub	sp, #20
 800e7bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e7be:	f3ef 8305 	mrs	r3, IPSR
 800e7c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2b0f      	cmp	r3, #15
 800e7c8:	d914      	bls.n	800e7f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e7ca:	4a17      	ldr	r2, [pc, #92]	; (800e828 <vPortValidateInterruptPriority+0x70>)
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	4413      	add	r3, r2
 800e7d0:	781b      	ldrb	r3, [r3, #0]
 800e7d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e7d4:	4b15      	ldr	r3, [pc, #84]	; (800e82c <vPortValidateInterruptPriority+0x74>)
 800e7d6:	781b      	ldrb	r3, [r3, #0]
 800e7d8:	7afa      	ldrb	r2, [r7, #11]
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d20a      	bcs.n	800e7f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e2:	f383 8811 	msr	BASEPRI, r3
 800e7e6:	f3bf 8f6f 	isb	sy
 800e7ea:	f3bf 8f4f 	dsb	sy
 800e7ee:	607b      	str	r3, [r7, #4]
}
 800e7f0:	bf00      	nop
 800e7f2:	e7fe      	b.n	800e7f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e7f4:	4b0e      	ldr	r3, [pc, #56]	; (800e830 <vPortValidateInterruptPriority+0x78>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e7fc:	4b0d      	ldr	r3, [pc, #52]	; (800e834 <vPortValidateInterruptPriority+0x7c>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	429a      	cmp	r2, r3
 800e802:	d90a      	bls.n	800e81a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e808:	f383 8811 	msr	BASEPRI, r3
 800e80c:	f3bf 8f6f 	isb	sy
 800e810:	f3bf 8f4f 	dsb	sy
 800e814:	603b      	str	r3, [r7, #0]
}
 800e816:	bf00      	nop
 800e818:	e7fe      	b.n	800e818 <vPortValidateInterruptPriority+0x60>
	}
 800e81a:	bf00      	nop
 800e81c:	3714      	adds	r7, #20
 800e81e:	46bd      	mov	sp, r7
 800e820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e824:	4770      	bx	lr
 800e826:	bf00      	nop
 800e828:	e000e3f0 	.word	0xe000e3f0
 800e82c:	2400e574 	.word	0x2400e574
 800e830:	e000ed0c 	.word	0xe000ed0c
 800e834:	2400e578 	.word	0x2400e578

0800e838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b08a      	sub	sp, #40	; 0x28
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e840:	2300      	movs	r3, #0
 800e842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e844:	f7fe fd80 	bl	800d348 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e848:	4b5b      	ldr	r3, [pc, #364]	; (800e9b8 <pvPortMalloc+0x180>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d101      	bne.n	800e854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e850:	f000 f920 	bl	800ea94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e854:	4b59      	ldr	r3, [pc, #356]	; (800e9bc <pvPortMalloc+0x184>)
 800e856:	681a      	ldr	r2, [r3, #0]
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	4013      	ands	r3, r2
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	f040 8093 	bne.w	800e988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d01d      	beq.n	800e8a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e868:	2208      	movs	r2, #8
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	4413      	add	r3, r2
 800e86e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f003 0307 	and.w	r3, r3, #7
 800e876:	2b00      	cmp	r3, #0
 800e878:	d014      	beq.n	800e8a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f023 0307 	bic.w	r3, r3, #7
 800e880:	3308      	adds	r3, #8
 800e882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f003 0307 	and.w	r3, r3, #7
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d00a      	beq.n	800e8a4 <pvPortMalloc+0x6c>
	__asm volatile
 800e88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e892:	f383 8811 	msr	BASEPRI, r3
 800e896:	f3bf 8f6f 	isb	sy
 800e89a:	f3bf 8f4f 	dsb	sy
 800e89e:	617b      	str	r3, [r7, #20]
}
 800e8a0:	bf00      	nop
 800e8a2:	e7fe      	b.n	800e8a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d06e      	beq.n	800e988 <pvPortMalloc+0x150>
 800e8aa:	4b45      	ldr	r3, [pc, #276]	; (800e9c0 <pvPortMalloc+0x188>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	687a      	ldr	r2, [r7, #4]
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d869      	bhi.n	800e988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e8b4:	4b43      	ldr	r3, [pc, #268]	; (800e9c4 <pvPortMalloc+0x18c>)
 800e8b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e8b8:	4b42      	ldr	r3, [pc, #264]	; (800e9c4 <pvPortMalloc+0x18c>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e8be:	e004      	b.n	800e8ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	687a      	ldr	r2, [r7, #4]
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d903      	bls.n	800e8dc <pvPortMalloc+0xa4>
 800e8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d1f1      	bne.n	800e8c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e8dc:	4b36      	ldr	r3, [pc, #216]	; (800e9b8 <pvPortMalloc+0x180>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d050      	beq.n	800e988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e8e6:	6a3b      	ldr	r3, [r7, #32]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	2208      	movs	r2, #8
 800e8ec:	4413      	add	r3, r2
 800e8ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f2:	681a      	ldr	r2, [r3, #0]
 800e8f4:	6a3b      	ldr	r3, [r7, #32]
 800e8f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8fa:	685a      	ldr	r2, [r3, #4]
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	1ad2      	subs	r2, r2, r3
 800e900:	2308      	movs	r3, #8
 800e902:	005b      	lsls	r3, r3, #1
 800e904:	429a      	cmp	r2, r3
 800e906:	d91f      	bls.n	800e948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	4413      	add	r3, r2
 800e90e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e910:	69bb      	ldr	r3, [r7, #24]
 800e912:	f003 0307 	and.w	r3, r3, #7
 800e916:	2b00      	cmp	r3, #0
 800e918:	d00a      	beq.n	800e930 <pvPortMalloc+0xf8>
	__asm volatile
 800e91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e91e:	f383 8811 	msr	BASEPRI, r3
 800e922:	f3bf 8f6f 	isb	sy
 800e926:	f3bf 8f4f 	dsb	sy
 800e92a:	613b      	str	r3, [r7, #16]
}
 800e92c:	bf00      	nop
 800e92e:	e7fe      	b.n	800e92e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e932:	685a      	ldr	r2, [r3, #4]
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	1ad2      	subs	r2, r2, r3
 800e938:	69bb      	ldr	r3, [r7, #24]
 800e93a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e93e:	687a      	ldr	r2, [r7, #4]
 800e940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e942:	69b8      	ldr	r0, [r7, #24]
 800e944:	f000 f908 	bl	800eb58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e948:	4b1d      	ldr	r3, [pc, #116]	; (800e9c0 <pvPortMalloc+0x188>)
 800e94a:	681a      	ldr	r2, [r3, #0]
 800e94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	1ad3      	subs	r3, r2, r3
 800e952:	4a1b      	ldr	r2, [pc, #108]	; (800e9c0 <pvPortMalloc+0x188>)
 800e954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e956:	4b1a      	ldr	r3, [pc, #104]	; (800e9c0 <pvPortMalloc+0x188>)
 800e958:	681a      	ldr	r2, [r3, #0]
 800e95a:	4b1b      	ldr	r3, [pc, #108]	; (800e9c8 <pvPortMalloc+0x190>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	429a      	cmp	r2, r3
 800e960:	d203      	bcs.n	800e96a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e962:	4b17      	ldr	r3, [pc, #92]	; (800e9c0 <pvPortMalloc+0x188>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	4a18      	ldr	r2, [pc, #96]	; (800e9c8 <pvPortMalloc+0x190>)
 800e968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96c:	685a      	ldr	r2, [r3, #4]
 800e96e:	4b13      	ldr	r3, [pc, #76]	; (800e9bc <pvPortMalloc+0x184>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	431a      	orrs	r2, r3
 800e974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97a:	2200      	movs	r2, #0
 800e97c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e97e:	4b13      	ldr	r3, [pc, #76]	; (800e9cc <pvPortMalloc+0x194>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	3301      	adds	r3, #1
 800e984:	4a11      	ldr	r2, [pc, #68]	; (800e9cc <pvPortMalloc+0x194>)
 800e986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e988:	f7fe fcec 	bl	800d364 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	f003 0307 	and.w	r3, r3, #7
 800e992:	2b00      	cmp	r3, #0
 800e994:	d00a      	beq.n	800e9ac <pvPortMalloc+0x174>
	__asm volatile
 800e996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e99a:	f383 8811 	msr	BASEPRI, r3
 800e99e:	f3bf 8f6f 	isb	sy
 800e9a2:	f3bf 8f4f 	dsb	sy
 800e9a6:	60fb      	str	r3, [r7, #12]
}
 800e9a8:	bf00      	nop
 800e9aa:	e7fe      	b.n	800e9aa <pvPortMalloc+0x172>
	return pvReturn;
 800e9ac:	69fb      	ldr	r3, [r7, #28]
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3728      	adds	r7, #40	; 0x28
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}
 800e9b6:	bf00      	nop
 800e9b8:	24015d84 	.word	0x24015d84
 800e9bc:	24015d98 	.word	0x24015d98
 800e9c0:	24015d88 	.word	0x24015d88
 800e9c4:	24015d7c 	.word	0x24015d7c
 800e9c8:	24015d8c 	.word	0x24015d8c
 800e9cc:	24015d90 	.word	0x24015d90

0800e9d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b086      	sub	sp, #24
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d04d      	beq.n	800ea7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e9e2:	2308      	movs	r3, #8
 800e9e4:	425b      	negs	r3, r3
 800e9e6:	697a      	ldr	r2, [r7, #20]
 800e9e8:	4413      	add	r3, r2
 800e9ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	685a      	ldr	r2, [r3, #4]
 800e9f4:	4b24      	ldr	r3, [pc, #144]	; (800ea88 <vPortFree+0xb8>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	4013      	ands	r3, r2
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d10a      	bne.n	800ea14 <vPortFree+0x44>
	__asm volatile
 800e9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea02:	f383 8811 	msr	BASEPRI, r3
 800ea06:	f3bf 8f6f 	isb	sy
 800ea0a:	f3bf 8f4f 	dsb	sy
 800ea0e:	60fb      	str	r3, [r7, #12]
}
 800ea10:	bf00      	nop
 800ea12:	e7fe      	b.n	800ea12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d00a      	beq.n	800ea32 <vPortFree+0x62>
	__asm volatile
 800ea1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea20:	f383 8811 	msr	BASEPRI, r3
 800ea24:	f3bf 8f6f 	isb	sy
 800ea28:	f3bf 8f4f 	dsb	sy
 800ea2c:	60bb      	str	r3, [r7, #8]
}
 800ea2e:	bf00      	nop
 800ea30:	e7fe      	b.n	800ea30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ea32:	693b      	ldr	r3, [r7, #16]
 800ea34:	685a      	ldr	r2, [r3, #4]
 800ea36:	4b14      	ldr	r3, [pc, #80]	; (800ea88 <vPortFree+0xb8>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	4013      	ands	r3, r2
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d01e      	beq.n	800ea7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ea40:	693b      	ldr	r3, [r7, #16]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d11a      	bne.n	800ea7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ea48:	693b      	ldr	r3, [r7, #16]
 800ea4a:	685a      	ldr	r2, [r3, #4]
 800ea4c:	4b0e      	ldr	r3, [pc, #56]	; (800ea88 <vPortFree+0xb8>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	43db      	mvns	r3, r3
 800ea52:	401a      	ands	r2, r3
 800ea54:	693b      	ldr	r3, [r7, #16]
 800ea56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ea58:	f7fe fc76 	bl	800d348 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ea5c:	693b      	ldr	r3, [r7, #16]
 800ea5e:	685a      	ldr	r2, [r3, #4]
 800ea60:	4b0a      	ldr	r3, [pc, #40]	; (800ea8c <vPortFree+0xbc>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	4413      	add	r3, r2
 800ea66:	4a09      	ldr	r2, [pc, #36]	; (800ea8c <vPortFree+0xbc>)
 800ea68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ea6a:	6938      	ldr	r0, [r7, #16]
 800ea6c:	f000 f874 	bl	800eb58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ea70:	4b07      	ldr	r3, [pc, #28]	; (800ea90 <vPortFree+0xc0>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	3301      	adds	r3, #1
 800ea76:	4a06      	ldr	r2, [pc, #24]	; (800ea90 <vPortFree+0xc0>)
 800ea78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ea7a:	f7fe fc73 	bl	800d364 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ea7e:	bf00      	nop
 800ea80:	3718      	adds	r7, #24
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}
 800ea86:	bf00      	nop
 800ea88:	24015d98 	.word	0x24015d98
 800ea8c:	24015d88 	.word	0x24015d88
 800ea90:	24015d94 	.word	0x24015d94

0800ea94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ea94:	b480      	push	{r7}
 800ea96:	b085      	sub	sp, #20
 800ea98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ea9a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800ea9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eaa0:	4b27      	ldr	r3, [pc, #156]	; (800eb40 <prvHeapInit+0xac>)
 800eaa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	f003 0307 	and.w	r3, r3, #7
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d00c      	beq.n	800eac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	3307      	adds	r3, #7
 800eab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f023 0307 	bic.w	r3, r3, #7
 800eaba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eabc:	68ba      	ldr	r2, [r7, #8]
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	1ad3      	subs	r3, r2, r3
 800eac2:	4a1f      	ldr	r2, [pc, #124]	; (800eb40 <prvHeapInit+0xac>)
 800eac4:	4413      	add	r3, r2
 800eac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eacc:	4a1d      	ldr	r2, [pc, #116]	; (800eb44 <prvHeapInit+0xb0>)
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ead2:	4b1c      	ldr	r3, [pc, #112]	; (800eb44 <prvHeapInit+0xb0>)
 800ead4:	2200      	movs	r2, #0
 800ead6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	68ba      	ldr	r2, [r7, #8]
 800eadc:	4413      	add	r3, r2
 800eade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eae0:	2208      	movs	r2, #8
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	1a9b      	subs	r3, r3, r2
 800eae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	f023 0307 	bic.w	r3, r3, #7
 800eaee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	4a15      	ldr	r2, [pc, #84]	; (800eb48 <prvHeapInit+0xb4>)
 800eaf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eaf6:	4b14      	ldr	r3, [pc, #80]	; (800eb48 <prvHeapInit+0xb4>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	2200      	movs	r2, #0
 800eafc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eafe:	4b12      	ldr	r3, [pc, #72]	; (800eb48 <prvHeapInit+0xb4>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	2200      	movs	r2, #0
 800eb04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	68fa      	ldr	r2, [r7, #12]
 800eb0e:	1ad2      	subs	r2, r2, r3
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eb14:	4b0c      	ldr	r3, [pc, #48]	; (800eb48 <prvHeapInit+0xb4>)
 800eb16:	681a      	ldr	r2, [r3, #0]
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	685b      	ldr	r3, [r3, #4]
 800eb20:	4a0a      	ldr	r2, [pc, #40]	; (800eb4c <prvHeapInit+0xb8>)
 800eb22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	685b      	ldr	r3, [r3, #4]
 800eb28:	4a09      	ldr	r2, [pc, #36]	; (800eb50 <prvHeapInit+0xbc>)
 800eb2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eb2c:	4b09      	ldr	r3, [pc, #36]	; (800eb54 <prvHeapInit+0xc0>)
 800eb2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eb32:	601a      	str	r2, [r3, #0]
}
 800eb34:	bf00      	nop
 800eb36:	3714      	adds	r7, #20
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3e:	4770      	bx	lr
 800eb40:	2400e57c 	.word	0x2400e57c
 800eb44:	24015d7c 	.word	0x24015d7c
 800eb48:	24015d84 	.word	0x24015d84
 800eb4c:	24015d8c 	.word	0x24015d8c
 800eb50:	24015d88 	.word	0x24015d88
 800eb54:	24015d98 	.word	0x24015d98

0800eb58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b085      	sub	sp, #20
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eb60:	4b28      	ldr	r3, [pc, #160]	; (800ec04 <prvInsertBlockIntoFreeList+0xac>)
 800eb62:	60fb      	str	r3, [r7, #12]
 800eb64:	e002      	b.n	800eb6c <prvInsertBlockIntoFreeList+0x14>
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	60fb      	str	r3, [r7, #12]
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	687a      	ldr	r2, [r7, #4]
 800eb72:	429a      	cmp	r2, r3
 800eb74:	d8f7      	bhi.n	800eb66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	685b      	ldr	r3, [r3, #4]
 800eb7e:	68ba      	ldr	r2, [r7, #8]
 800eb80:	4413      	add	r3, r2
 800eb82:	687a      	ldr	r2, [r7, #4]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d108      	bne.n	800eb9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	685a      	ldr	r2, [r3, #4]
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	685b      	ldr	r3, [r3, #4]
 800eb90:	441a      	add	r2, r3
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	685b      	ldr	r3, [r3, #4]
 800eba2:	68ba      	ldr	r2, [r7, #8]
 800eba4:	441a      	add	r2, r3
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	d118      	bne.n	800ebe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	681a      	ldr	r2, [r3, #0]
 800ebb2:	4b15      	ldr	r3, [pc, #84]	; (800ec08 <prvInsertBlockIntoFreeList+0xb0>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	d00d      	beq.n	800ebd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	685a      	ldr	r2, [r3, #4]
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	685b      	ldr	r3, [r3, #4]
 800ebc4:	441a      	add	r2, r3
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	681a      	ldr	r2, [r3, #0]
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	601a      	str	r2, [r3, #0]
 800ebd4:	e008      	b.n	800ebe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ebd6:	4b0c      	ldr	r3, [pc, #48]	; (800ec08 <prvInsertBlockIntoFreeList+0xb0>)
 800ebd8:	681a      	ldr	r2, [r3, #0]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	601a      	str	r2, [r3, #0]
 800ebde:	e003      	b.n	800ebe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	681a      	ldr	r2, [r3, #0]
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ebe8:	68fa      	ldr	r2, [r7, #12]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d002      	beq.n	800ebf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	687a      	ldr	r2, [r7, #4]
 800ebf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ebf6:	bf00      	nop
 800ebf8:	3714      	adds	r7, #20
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec00:	4770      	bx	lr
 800ec02:	bf00      	nop
 800ec04:	24015d7c 	.word	0x24015d7c
 800ec08:	24015d84 	.word	0x24015d84

0800ec0c <loopback_tcps>:
uint8_t* msg_v4 = "IPv4 mode";
uint8_t* msg_v6 = "IPv6 mode";
uint8_t* msg_dual = "Dual IP mode";

int32_t loopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port, uint8_t loopback_mode)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b088      	sub	sp, #32
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6039      	str	r1, [r7, #0]
 800ec14:	4611      	mov	r1, r2
 800ec16:	461a      	mov	r2, r3
 800ec18:	4603      	mov	r3, r0
 800ec1a:	71fb      	strb	r3, [r7, #7]
 800ec1c:	460b      	mov	r3, r1
 800ec1e:	80bb      	strh	r3, [r7, #4]
 800ec20:	4613      	mov	r3, r2
 800ec22:	71bb      	strb	r3, [r7, #6]
    int32_t ret;
    datasize_t sentsize=0;
 800ec24:	2300      	movs	r3, #0
 800ec26:	83fb      	strh	r3, [r7, #30]
    int8_t status,inter;
    uint8_t tmp = 0;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	777b      	strb	r3, [r7, #29]
    datasize_t received_size;
    uint8_t arg_tmp8;
    uint8_t* mode_msg;

    if(loopback_mode == AS_IPV4)
 800ec2c:	79bb      	ldrb	r3, [r7, #6]
 800ec2e:	2b02      	cmp	r3, #2
 800ec30:	d103      	bne.n	800ec3a <loopback_tcps+0x2e>
    {
       mode_msg = msg_v4;
 800ec32:	4bb0      	ldr	r3, [pc, #704]	; (800eef4 <loopback_tcps+0x2e8>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	61bb      	str	r3, [r7, #24]
 800ec38:	e009      	b.n	800ec4e <loopback_tcps+0x42>
    }else if(loopback_mode == AS_IPV6)
 800ec3a:	79bb      	ldrb	r3, [r7, #6]
 800ec3c:	2b17      	cmp	r3, #23
 800ec3e:	d103      	bne.n	800ec48 <loopback_tcps+0x3c>
    {
       mode_msg = msg_v6;
 800ec40:	4bad      	ldr	r3, [pc, #692]	; (800eef8 <loopback_tcps+0x2ec>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	61bb      	str	r3, [r7, #24]
 800ec46:	e002      	b.n	800ec4e <loopback_tcps+0x42>
    }else
    {
       mode_msg = msg_dual;
 800ec48:	4bac      	ldr	r3, [pc, #688]	; (800eefc <loopback_tcps+0x2f0>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	61bb      	str	r3, [r7, #24]
    }
    #ifdef _LOOPBACK_DEBUG_
        uint8_t dst_ip[16], ext_status;
        uint16_t dst_port;
    #endif
        getsockopt(sn, SO_STATUS, &status);
 800ec4e:	f107 0213 	add.w	r2, r7, #19
 800ec52:	79fb      	ldrb	r3, [r7, #7]
 800ec54:	210a      	movs	r1, #10
 800ec56:	4618      	mov	r0, r3
 800ec58:	f001 fdbe 	bl	80107d8 <getsockopt>
        switch(status)
 800ec5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec60:	2b1c      	cmp	r3, #28
 800ec62:	f200 813a 	bhi.w	800eeda <loopback_tcps+0x2ce>
 800ec66:	a201      	add	r2, pc, #4	; (adr r2, 800ec6c <loopback_tcps+0x60>)
 800ec68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec6c:	0800ee81 	.word	0x0800ee81
 800ec70:	0800eedb 	.word	0x0800eedb
 800ec74:	0800eedb 	.word	0x0800eedb
 800ec78:	0800eedb 	.word	0x0800eedb
 800ec7c:	0800eedb 	.word	0x0800eedb
 800ec80:	0800eedb 	.word	0x0800eedb
 800ec84:	0800eedb 	.word	0x0800eedb
 800ec88:	0800eedb 	.word	0x0800eedb
 800ec8c:	0800eedb 	.word	0x0800eedb
 800ec90:	0800eedb 	.word	0x0800eedb
 800ec94:	0800eedb 	.word	0x0800eedb
 800ec98:	0800eedb 	.word	0x0800eedb
 800ec9c:	0800eedb 	.word	0x0800eedb
 800eca0:	0800eedb 	.word	0x0800eedb
 800eca4:	0800eedb 	.word	0x0800eedb
 800eca8:	0800eedb 	.word	0x0800eedb
 800ecac:	0800eedb 	.word	0x0800eedb
 800ecb0:	0800eedb 	.word	0x0800eedb
 800ecb4:	0800eedb 	.word	0x0800eedb
 800ecb8:	0800ee5d 	.word	0x0800ee5d
 800ecbc:	0800eedb 	.word	0x0800eedb
 800ecc0:	0800eedb 	.word	0x0800eedb
 800ecc4:	0800eedb 	.word	0x0800eedb
 800ecc8:	0800ece1 	.word	0x0800ece1
 800eccc:	0800eedb 	.word	0x0800eedb
 800ecd0:	0800eedb 	.word	0x0800eedb
 800ecd4:	0800eedb 	.word	0x0800eedb
 800ecd8:	0800eedb 	.word	0x0800eedb
 800ecdc:	0800edad 	.word	0x0800edad
        {
        case SOCK_ESTABLISHED :
            ctlsocket(sn,CS_GET_INTERRUPT,&inter);
 800ece0:	f107 0212 	add.w	r2, r7, #18
 800ece4:	79fb      	ldrb	r3, [r7, #7]
 800ece6:	2105      	movs	r1, #5
 800ece8:	4618      	mov	r0, r3
 800ecea:	f001 fc85 	bl	80105f8 <ctlsocket>
            if(inter & Sn_IR_CON)
 800ecee:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800ecf2:	b2db      	uxtb	r3, r3
 800ecf4:	f003 0301 	and.w	r3, r3, #1
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d008      	beq.n	800ed0e <loopback_tcps+0x102>
                            sn, dst_ip[0], dst_ip[1], dst_ip[2], dst_ip[3]);
                }
                getsockopt(sn,SO_DESTPORT,&dst_port);
                printf("Peer Port : %d\r\n", dst_port);
            #endif
                arg_tmp8 = Sn_IR_CON;
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	73fb      	strb	r3, [r7, #15]
                ctlsocket(sn,CS_CLR_INTERRUPT,&arg_tmp8);
 800ed00:	f107 020f 	add.w	r2, r7, #15
 800ed04:	79fb      	ldrb	r3, [r7, #7]
 800ed06:	2104      	movs	r1, #4
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f001 fc75 	bl	80105f8 <ctlsocket>
            }
            getsockopt(sn,SO_RECVBUF,&received_size);
 800ed0e:	f107 0210 	add.w	r2, r7, #16
 800ed12:	79fb      	ldrb	r3, [r7, #7]
 800ed14:	2109      	movs	r1, #9
 800ed16:	4618      	mov	r0, r3
 800ed18:	f001 fd5e 	bl	80107d8 <getsockopt>

            if(received_size > 0){
 800ed1c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	f340 80dc 	ble.w	800eede <loopback_tcps+0x2d2>
                if(received_size > DATA_BUF_SIZE) received_size = DATA_BUF_SIZE;
 800ed26:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ed2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ed2e:	dd02      	ble.n	800ed36 <loopback_tcps+0x12a>
 800ed30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ed34:	823b      	strh	r3, [r7, #16]
                ret = recv(sn, buf, received_size);
 800ed36:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800ed3a:	79fb      	ldrb	r3, [r7, #7]
 800ed3c:	6839      	ldr	r1, [r7, #0]
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f001 fbae 	bl	80104a0 <recv>
 800ed44:	4603      	mov	r3, r0
 800ed46:	617b      	str	r3, [r7, #20]

                if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	dc01      	bgt.n	800ed52 <loopback_tcps+0x146>
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	e0cb      	b.n	800eeea <loopback_tcps+0x2de>
                received_size = (uint16_t) ret;
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	b21b      	sxth	r3, r3
 800ed56:	823b      	strh	r3, [r7, #16]
                sentsize = 0;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	83fb      	strh	r3, [r7, #30]

                while(received_size != sentsize)
 800ed5c:	e01f      	b.n	800ed9e <loopback_tcps+0x192>
                {
                    ret = send(sn, buf+sentsize, received_size-sentsize);
 800ed5e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ed62:	683a      	ldr	r2, [r7, #0]
 800ed64:	18d1      	adds	r1, r2, r3
 800ed66:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ed6a:	b29a      	uxth	r2, r3
 800ed6c:	8bfb      	ldrh	r3, [r7, #30]
 800ed6e:	1ad3      	subs	r3, r2, r3
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	b21a      	sxth	r2, r3
 800ed74:	79fb      	ldrb	r3, [r7, #7]
 800ed76:	4618      	mov	r0, r3
 800ed78:	f001 fab0 	bl	80102dc <send>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	617b      	str	r3, [r7, #20]
                    if(ret < 0)
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	da05      	bge.n	800ed92 <loopback_tcps+0x186>
                    {
                        close(sn);
 800ed86:	79fb      	ldrb	r3, [r7, #7]
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f001 f86f 	bl	800fe6c <close>
                        return ret;
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	e0ab      	b.n	800eeea <loopback_tcps+0x2de>
                    }
                    sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	b29a      	uxth	r2, r3
 800ed96:	8bfb      	ldrh	r3, [r7, #30]
 800ed98:	4413      	add	r3, r2
 800ed9a:	b29b      	uxth	r3, r3
 800ed9c:	83fb      	strh	r3, [r7, #30]
                while(received_size != sentsize)
 800ed9e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800eda2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d1d9      	bne.n	800ed5e <loopback_tcps+0x152>
                }
            }
            break;
 800edaa:	e098      	b.n	800eede <loopback_tcps+0x2d2>
        case SOCK_CLOSE_WAIT :
            #ifdef _LOOPBACK_DEBUG_
                printf("%d:CloseWait\r\n",sn);
            #endif
            getsockopt(sn, SO_RECVBUF, &received_size);
 800edac:	f107 0210 	add.w	r2, r7, #16
 800edb0:	79fb      	ldrb	r3, [r7, #7]
 800edb2:	2109      	movs	r1, #9
 800edb4:	4618      	mov	r0, r3
 800edb6:	f001 fd0f 	bl	80107d8 <getsockopt>
            if(received_size > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 800edba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	dd41      	ble.n	800ee46 <loopback_tcps+0x23a>
            {
                if(received_size > DATA_BUF_SIZE) received_size = DATA_BUF_SIZE;
 800edc2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800edc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800edca:	dd02      	ble.n	800edd2 <loopback_tcps+0x1c6>
 800edcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800edd0:	823b      	strh	r3, [r7, #16]
                ret = recv(sn, buf, received_size);
 800edd2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800edd6:	79fb      	ldrb	r3, [r7, #7]
 800edd8:	6839      	ldr	r1, [r7, #0]
 800edda:	4618      	mov	r0, r3
 800eddc:	f001 fb60 	bl	80104a0 <recv>
 800ede0:	4603      	mov	r3, r0
 800ede2:	617b      	str	r3, [r7, #20]

                if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	dc01      	bgt.n	800edee <loopback_tcps+0x1e2>
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	e07d      	b.n	800eeea <loopback_tcps+0x2de>
                received_size = (uint16_t) ret;
 800edee:	697b      	ldr	r3, [r7, #20]
 800edf0:	b21b      	sxth	r3, r3
 800edf2:	823b      	strh	r3, [r7, #16]
                sentsize = 0;
 800edf4:	2300      	movs	r3, #0
 800edf6:	83fb      	strh	r3, [r7, #30]

                while(received_size != sentsize)
 800edf8:	e01f      	b.n	800ee3a <loopback_tcps+0x22e>
                {
                    ret = send(sn, buf+sentsize, received_size-sentsize);
 800edfa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800edfe:	683a      	ldr	r2, [r7, #0]
 800ee00:	18d1      	adds	r1, r2, r3
 800ee02:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ee06:	b29a      	uxth	r2, r3
 800ee08:	8bfb      	ldrh	r3, [r7, #30]
 800ee0a:	1ad3      	subs	r3, r2, r3
 800ee0c:	b29b      	uxth	r3, r3
 800ee0e:	b21a      	sxth	r2, r3
 800ee10:	79fb      	ldrb	r3, [r7, #7]
 800ee12:	4618      	mov	r0, r3
 800ee14:	f001 fa62 	bl	80102dc <send>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	617b      	str	r3, [r7, #20]
                    if(ret < 0)
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	da05      	bge.n	800ee2e <loopback_tcps+0x222>
                    {
                        close(sn);
 800ee22:	79fb      	ldrb	r3, [r7, #7]
 800ee24:	4618      	mov	r0, r3
 800ee26:	f001 f821 	bl	800fe6c <close>
                        return ret;
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	e05d      	b.n	800eeea <loopback_tcps+0x2de>
                    }
                    sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 800ee2e:	697b      	ldr	r3, [r7, #20]
 800ee30:	b29a      	uxth	r2, r3
 800ee32:	8bfb      	ldrh	r3, [r7, #30]
 800ee34:	4413      	add	r3, r2
 800ee36:	b29b      	uxth	r3, r3
 800ee38:	83fb      	strh	r3, [r7, #30]
                while(received_size != sentsize)
 800ee3a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ee3e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d1d9      	bne.n	800edfa <loopback_tcps+0x1ee>
                }
            }

            if((ret = disconnect(sn)) != SOCK_OK) return ret;
 800ee46:	79fb      	ldrb	r3, [r7, #7]
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f001 f9d5 	bl	80101f8 <disconnect>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	617b      	str	r3, [r7, #20]
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	2b01      	cmp	r3, #1
 800ee56:	d044      	beq.n	800eee2 <loopback_tcps+0x2d6>
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	e046      	b.n	800eeea <loopback_tcps+0x2de>
                #ifdef _LOOPBACK_DEBUG_
                    printf("%d:Socket Closed\r\n", sn);
                #endif
            break;
        case SOCK_INIT :
            if( (ret = listen(sn)) != SOCK_OK) return ret;
 800ee5c:	79fb      	ldrb	r3, [r7, #7]
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f001 f872 	bl	800ff48 <listen>
 800ee64:	4603      	mov	r3, r0
 800ee66:	617b      	str	r3, [r7, #20]
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	2b01      	cmp	r3, #1
 800ee6c:	d001      	beq.n	800ee72 <loopback_tcps+0x266>
 800ee6e:	697b      	ldr	r3, [r7, #20]
 800ee70:	e03b      	b.n	800eeea <loopback_tcps+0x2de>
                #ifdef _LOOPBACK_DEBUG_
                    printf("%d:Listen, TCP server loopback, port [%d] as %s\r\n", sn, port, mode_msg);
                #endif
                    printf("%d:Listen, TCP server loopback, port [%d] as %s\r\n", sn, port, mode_msg);
 800ee72:	79f9      	ldrb	r1, [r7, #7]
 800ee74:	88ba      	ldrh	r2, [r7, #4]
 800ee76:	69bb      	ldr	r3, [r7, #24]
 800ee78:	4821      	ldr	r0, [pc, #132]	; (800ef00 <loopback_tcps+0x2f4>)
 800ee7a:	f002 ff8f 	bl	8011d9c <iprintf>
            break;
 800ee7e:	e033      	b.n	800eee8 <loopback_tcps+0x2dc>
        case SOCK_CLOSED:
            #ifdef _LOOPBACK_DEBUG_
                printf("%d:TCP server loopback start\r\n",sn);
            #endif
                switch(loopback_mode)
 800ee80:	79bb      	ldrb	r3, [r7, #6]
 800ee82:	2b17      	cmp	r3, #23
 800ee84:	d00f      	beq.n	800eea6 <loopback_tcps+0x29a>
 800ee86:	2b17      	cmp	r3, #23
 800ee88:	dc1f      	bgt.n	800eeca <loopback_tcps+0x2be>
 800ee8a:	2b02      	cmp	r3, #2
 800ee8c:	d002      	beq.n	800ee94 <loopback_tcps+0x288>
 800ee8e:	2b0b      	cmp	r3, #11
 800ee90:	d012      	beq.n	800eeb8 <loopback_tcps+0x2ac>
                    break;
                case AS_IPDUAL:
                    tmp = socket(sn, Sn_MR_TCPD, port, SOCK_IO_NONBLOCK);
                    break;
                default:
                    break;
 800ee92:	e01a      	b.n	800eeca <loopback_tcps+0x2be>
                    tmp = socket(sn, Sn_MR_TCP4, port, SOCK_IO_NONBLOCK);
 800ee94:	88ba      	ldrh	r2, [r7, #4]
 800ee96:	79f8      	ldrb	r0, [r7, #7]
 800ee98:	2301      	movs	r3, #1
 800ee9a:	2101      	movs	r1, #1
 800ee9c:	f000 fde8 	bl	800fa70 <socket>
 800eea0:	4603      	mov	r3, r0
 800eea2:	777b      	strb	r3, [r7, #29]
                    break;
 800eea4:	e012      	b.n	800eecc <loopback_tcps+0x2c0>
                    tmp = socket(sn, Sn_MR_TCP6, port, SOCK_IO_NONBLOCK);
 800eea6:	88ba      	ldrh	r2, [r7, #4]
 800eea8:	79f8      	ldrb	r0, [r7, #7]
 800eeaa:	2301      	movs	r3, #1
 800eeac:	2109      	movs	r1, #9
 800eeae:	f000 fddf 	bl	800fa70 <socket>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	777b      	strb	r3, [r7, #29]
                    break;
 800eeb6:	e009      	b.n	800eecc <loopback_tcps+0x2c0>
                    tmp = socket(sn, Sn_MR_TCPD, port, SOCK_IO_NONBLOCK);
 800eeb8:	88ba      	ldrh	r2, [r7, #4]
 800eeba:	79f8      	ldrb	r0, [r7, #7]
 800eebc:	2301      	movs	r3, #1
 800eebe:	210d      	movs	r1, #13
 800eec0:	f000 fdd6 	bl	800fa70 <socket>
 800eec4:	4603      	mov	r3, r0
 800eec6:	777b      	strb	r3, [r7, #29]
                    break;
 800eec8:	e000      	b.n	800eecc <loopback_tcps+0x2c0>
                    break;
 800eeca:	bf00      	nop
                }
                if(tmp != sn)    /* reinitialize the socket */
 800eecc:	7f7a      	ldrb	r2, [r7, #29]
 800eece:	79fb      	ldrb	r3, [r7, #7]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d008      	beq.n	800eee6 <loopback_tcps+0x2da>
                {
                    #ifdef _LOOPBACK_DEBUG_
                        printf("%d : Fail to create socket.\r\n",sn);
                    #endif
                    return SOCKERR_SOCKNUM;
 800eed4:	f04f 33ff 	mov.w	r3, #4294967295
 800eed8:	e007      	b.n	800eeea <loopback_tcps+0x2de>
                printf("%d:Socket opened[%d]\r\n",sn, getSn_SR(sn));
                sock_state[sn] = 1;
            #endif
            break;
        default:
            break;
 800eeda:	bf00      	nop
 800eedc:	e004      	b.n	800eee8 <loopback_tcps+0x2dc>
            break;
 800eede:	bf00      	nop
 800eee0:	e002      	b.n	800eee8 <loopback_tcps+0x2dc>
            break;
 800eee2:	bf00      	nop
 800eee4:	e000      	b.n	800eee8 <loopback_tcps+0x2dc>
            break;
 800eee6:	bf00      	nop
        }
    return 1;
 800eee8:	2301      	movs	r3, #1
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	3720      	adds	r7, #32
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}
 800eef2:	bf00      	nop
 800eef4:	24000088 	.word	0x24000088
 800eef8:	2400008c 	.word	0x2400008c
 800eefc:	24000090 	.word	0x24000090
 800ef00:	08012f30 	.word	0x08012f30

0800ef04 <tcps_status>:


int8_t tcps_status(uint8_t sn, uint16_t port, uint8_t TCP_mode)
{
 800ef04:	b590      	push	{r4, r7, lr}
 800ef06:	f5ad 4d0e 	sub.w	sp, sp, #36352	; 0x8e00
 800ef0a:	b099      	sub	sp, #100	; 0x64
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	4604      	mov	r4, r0
 800ef10:	4608      	mov	r0, r1
 800ef12:	4611      	mov	r1, r2
 800ef14:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800ef18:	f6a3 6359 	subw	r3, r3, #3673	; 0xe59
 800ef1c:	4622      	mov	r2, r4
 800ef1e:	701a      	strb	r2, [r3, #0]
 800ef20:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800ef24:	f6a3 635c 	subw	r3, r3, #3676	; 0xe5c
 800ef28:	4602      	mov	r2, r0
 800ef2a:	801a      	strh	r2, [r3, #0]
 800ef2c:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800ef30:	f6a3 635a 	subw	r3, r3, #3674	; 0xe5a
 800ef34:	460a      	mov	r2, r1
 800ef36:	701a      	strb	r2, [r3, #0]
    int32_t ret;
    datasize_t sentsize=0;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	f648 625e 	movw	r2, #36446	; 0x8e5e
 800ef3e:	443a      	add	r2, r7
 800ef40:	8013      	strh	r3, [r2, #0]
    int8_t status,inter;
    uint8_t tmp = 0;
 800ef42:	2300      	movs	r3, #0
 800ef44:	f648 625d 	movw	r2, #36445	; 0x8e5d
 800ef48:	443a      	add	r2, r7
 800ef4a:	7013      	strb	r3, [r2, #0]
    datasize_t received_size;
    uint8_t arg_tmp8;
    uint8_t* mode_msg;
    uint32_t pre_time = 0, now_time = 0;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	f648 6258 	movw	r2, #36440	; 0x8e58
 800ef52:	443a      	add	r2, r7
 800ef54:	6013      	str	r3, [r2, #0]
 800ef56:	2300      	movs	r3, #0
 800ef58:	f648 6254 	movw	r2, #36436	; 0x8e54
 800ef5c:	443a      	add	r2, r7
 800ef5e:	6013      	str	r3, [r2, #0]
    uint32_t recv_delay = 0;
 800ef60:	2300      	movs	r3, #0
 800ef62:	f648 6250 	movw	r2, #36432	; 0x8e50
 800ef66:	443a      	add	r2, r7
 800ef68:	6013      	str	r3, [r2, #0]

    uint8_t* msg_v4 = "IPv4 mode";
 800ef6a:	4bb5      	ldr	r3, [pc, #724]	; (800f240 <tcps_status+0x33c>)
 800ef6c:	f648 624c 	movw	r2, #36428	; 0x8e4c
 800ef70:	443a      	add	r2, r7
 800ef72:	6013      	str	r3, [r2, #0]
    uint8_t* msg_v6 = "IPv6 mode";
 800ef74:	4bb3      	ldr	r3, [pc, #716]	; (800f244 <tcps_status+0x340>)
 800ef76:	f648 6248 	movw	r2, #36424	; 0x8e48
 800ef7a:	443a      	add	r2, r7
 800ef7c:	6013      	str	r3, [r2, #0]
    uint8_t* msg_dual = "Dual IP mode";
 800ef7e:	4bb2      	ldr	r3, [pc, #712]	; (800f248 <tcps_status+0x344>)
 800ef80:	f648 6244 	movw	r2, #36420	; 0x8e44
 800ef84:	443a      	add	r2, r7
 800ef86:	6013      	str	r3, [r2, #0]
    datasize_t delay_cnt =0 ,  delay_dumy= 0;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	f648 6242 	movw	r2, #36418	; 0x8e42
 800ef8e:	443a      	add	r2, r7
 800ef90:	8013      	strh	r3, [r2, #0]
 800ef92:	2300      	movs	r3, #0
 800ef94:	f648 6240 	movw	r2, #36416	; 0x8e40
 800ef98:	443a      	add	r2, r7
 800ef9a:	8013      	strh	r3, [r2, #0]
    uint16_t save_size[10000];

    uint8_t buf[16384];
    static uint8_t conn_status = 0;
    mode_msg = msg_v4;
 800ef9c:	f648 634c 	movw	r3, #36428	; 0x8e4c
 800efa0:	443b      	add	r3, r7
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	f648 623c 	movw	r2, #36412	; 0x8e3c
 800efa8:	443a      	add	r2, r7
 800efaa:	6013      	str	r3, [r2, #0]
    #ifdef _LOOPBACK_DEBUG_
        uint8_t dst_ip[16], ext_status;
        uint16_t dst_port;
    #endif
        //getsockopt(sn, SO_STATUS, &status);
        status = getSn_SR(sn);
 800efac:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800efb0:	f6a3 6359 	subw	r3, r3, #3673	; 0xe59
 800efb4:	781b      	ldrb	r3, [r3, #0]
 800efb6:	009b      	lsls	r3, r3, #2
 800efb8:	3301      	adds	r3, #1
 800efba:	00db      	lsls	r3, r3, #3
 800efbc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800efc0:	4618      	mov	r0, r3
 800efc2:	f000 fbdb 	bl	800f77c <WIZCHIP_READ>
 800efc6:	4603      	mov	r3, r0
 800efc8:	f648 623b 	movw	r2, #36411	; 0x8e3b
 800efcc:	443a      	add	r2, r7
 800efce:	7013      	strb	r3, [r2, #0]
        switch(status)
 800efd0:	f648 633b 	movw	r3, #36411	; 0x8e3b
 800efd4:	443b      	add	r3, r7
 800efd6:	f993 3000 	ldrsb.w	r3, [r3]
 800efda:	2b1c      	cmp	r3, #28
 800efdc:	f200 81f6 	bhi.w	800f3cc <tcps_status+0x4c8>
 800efe0:	a201      	add	r2, pc, #4	; (adr r2, 800efe8 <tcps_status+0xe4>)
 800efe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efe6:	bf00      	nop
 800efe8:	0800f31b 	.word	0x0800f31b
 800efec:	0800f3cd 	.word	0x0800f3cd
 800eff0:	0800f3cd 	.word	0x0800f3cd
 800eff4:	0800f3cd 	.word	0x0800f3cd
 800eff8:	0800f3cd 	.word	0x0800f3cd
 800effc:	0800f3cd 	.word	0x0800f3cd
 800f000:	0800f3cd 	.word	0x0800f3cd
 800f004:	0800f3cd 	.word	0x0800f3cd
 800f008:	0800f3cd 	.word	0x0800f3cd
 800f00c:	0800f3cd 	.word	0x0800f3cd
 800f010:	0800f3cd 	.word	0x0800f3cd
 800f014:	0800f3cd 	.word	0x0800f3cd
 800f018:	0800f3cd 	.word	0x0800f3cd
 800f01c:	0800f3cd 	.word	0x0800f3cd
 800f020:	0800f3cd 	.word	0x0800f3cd
 800f024:	0800f3cd 	.word	0x0800f3cd
 800f028:	0800f3cd 	.word	0x0800f3cd
 800f02c:	0800f3cd 	.word	0x0800f3cd
 800f030:	0800f3cd 	.word	0x0800f3cd
 800f034:	0800f2bf 	.word	0x0800f2bf
 800f038:	0800f3cd 	.word	0x0800f3cd
 800f03c:	0800f3cd 	.word	0x0800f3cd
 800f040:	0800f3cd 	.word	0x0800f3cd
 800f044:	0800f05d 	.word	0x0800f05d
 800f048:	0800f3cd 	.word	0x0800f3cd
 800f04c:	0800f3cd 	.word	0x0800f3cd
 800f050:	0800f3cd 	.word	0x0800f3cd
 800f054:	0800f3cd 	.word	0x0800f3cd
 800f058:	0800f121 	.word	0x0800f121
        {
        case SOCK_ESTABLISHED :
            if(conn_status == 1)
 800f05c:	4b7b      	ldr	r3, [pc, #492]	; (800f24c <tcps_status+0x348>)
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	2b01      	cmp	r3, #1
 800f062:	d129      	bne.n	800f0b8 <tcps_status+0x1b4>
            {
            ctlsocket(sn,CS_GET_INTERRUPT,&inter);
 800f064:	f648 6233 	movw	r2, #36403	; 0x8e33
 800f068:	443a      	add	r2, r7
 800f06a:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800f06e:	f6a3 6359 	subw	r3, r3, #3673	; 0xe59
 800f072:	781b      	ldrb	r3, [r3, #0]
 800f074:	2105      	movs	r1, #5
 800f076:	4618      	mov	r0, r3
 800f078:	f001 fabe 	bl	80105f8 <ctlsocket>
            if(inter & Sn_IR_CON)
 800f07c:	f648 6333 	movw	r3, #36403	; 0x8e33
 800f080:	443b      	add	r3, r7
 800f082:	f993 3000 	ldrsb.w	r3, [r3]
 800f086:	b2db      	uxtb	r3, r3
 800f088:	f003 0301 	and.w	r3, r3, #1
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d013      	beq.n	800f0b8 <tcps_status+0x1b4>
                            sn, dst_ip[0], dst_ip[1], dst_ip[2], dst_ip[3]);
                }
                getsockopt(sn,SO_DESTPORT,&dst_port);
                printf("Peer Port : %d\r\n", dst_port);
            #endif
                arg_tmp8 = Sn_IR_CON;
 800f090:	2301      	movs	r3, #1
 800f092:	f648 622f 	movw	r2, #36399	; 0x8e2f
 800f096:	443a      	add	r2, r7
 800f098:	7013      	strb	r3, [r2, #0]
                ctlsocket(sn,CS_CLR_INTERRUPT,&arg_tmp8);
 800f09a:	f648 622f 	movw	r2, #36399	; 0x8e2f
 800f09e:	443a      	add	r2, r7
 800f0a0:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800f0a4:	f6a3 6359 	subw	r3, r3, #3673	; 0xe59
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	2104      	movs	r1, #4
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f001 faa3 	bl	80105f8 <ctlsocket>
                conn_status = 0;
 800f0b2:	4b66      	ldr	r3, [pc, #408]	; (800f24c <tcps_status+0x348>)
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	701a      	strb	r2, [r3, #0]
            for(delay_cnt=0; delay_cnt< 10000; delay_cnt++)
            {
                delay_dumy++;
            }
#endif
            received_size = getSn_RX_RSR(sn);
 800f0b8:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800f0bc:	f6a3 6359 	subw	r3, r3, #3673	; 0xe59
 800f0c0:	781b      	ldrb	r3, [r3, #0]
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f000 fbc2 	bl	800f84c <getSn_RX_RSR>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	f648 6230 	movw	r2, #36400	; 0x8e30
 800f0ce:	443a      	add	r2, r7
 800f0d0:	8013      	strh	r3, [r2, #0]
            if(recv_delay<10000)
                save_size[recv_delay] =(uint16_t)received_size;
            recv_delay++;
            #endif
            #if 1
            if(check_break() == 1)
 800f0d2:	f7f1 fc11 	bl	80008f8 <check_break>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	f000 8179 	beq.w	800f3d0 <tcps_status+0x4cc>
                 break;
            #endif
            if(received_size > 0){
 800f0de:	f648 6330 	movw	r3, #36400	; 0x8e30
 800f0e2:	443b      	add	r3, r7
 800f0e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	f340 8173 	ble.w	800f3d4 <tcps_status+0x4d0>
                printf("r%d c%ld\r\n", (uint16_t)received_size, recv_delay);
                recv_delay = 0;
                #endif
                //if(received_size > DATA_BUF_SIZE) received_size = DATA_BUF_SIZE;
                //ret = recv(sn, buf, received_size);
                TRACE_ON();
 800f0ee:	f7f1 fc1d 	bl	800092c <TRACE_ON>
                recv_iperf(sn, buf, received_size);
 800f0f2:	f648 6330 	movw	r3, #36400	; 0x8e30
 800f0f6:	443b      	add	r3, r7
 800f0f8:	f9b3 1000 	ldrsh.w	r1, [r3]
 800f0fc:	4b54      	ldr	r3, [pc, #336]	; (800f250 <tcps_status+0x34c>)
 800f0fe:	f503 430e 	add.w	r3, r3, #36352	; 0x8e00
 800f102:	f103 0360 	add.w	r3, r3, #96	; 0x60
 800f106:	443b      	add	r3, r7
 800f108:	f507 6266 	add.w	r2, r7, #3680	; 0xe60
 800f10c:	f6a2 6259 	subw	r2, r2, #3673	; 0xe59
 800f110:	7810      	ldrb	r0, [r2, #0]
 800f112:	460a      	mov	r2, r1
 800f114:	4619      	mov	r1, r3
 800f116:	f001 fa43 	bl	80105a0 <recv_iperf>
                TRACE_OFF();
 800f11a:	f7f1 fc13 	bl	8000944 <TRACE_OFF>
                #endif
                #endif
            }
            }
            #endif
            break;
 800f11e:	e159      	b.n	800f3d4 <tcps_status+0x4d0>
        case SOCK_CLOSE_WAIT :
            #ifdef _LOOPBACK_DEBUG_
                printf("%d:CloseWait\r\n",sn);
            #endif
            getsockopt(sn, SO_RECVBUF, &received_size);
 800f120:	f648 6230 	movw	r2, #36400	; 0x8e30
 800f124:	443a      	add	r2, r7
 800f126:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800f12a:	f6a3 6359 	subw	r3, r3, #3673	; 0xe59
 800f12e:	781b      	ldrb	r3, [r3, #0]
 800f130:	2109      	movs	r1, #9
 800f132:	4618      	mov	r0, r3
 800f134:	f001 fb50 	bl	80107d8 <getsockopt>
            if(received_size > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 800f138:	f648 6330 	movw	r3, #36400	; 0x8e30
 800f13c:	443b      	add	r3, r7
 800f13e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f142:	2b00      	cmp	r3, #0
 800f144:	f340 80a1 	ble.w	800f28a <tcps_status+0x386>
            {
                if(received_size > DATA_BUF_SIZE) received_size = DATA_BUF_SIZE;
 800f148:	f648 6330 	movw	r3, #36400	; 0x8e30
 800f14c:	443b      	add	r3, r7
 800f14e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f152:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f156:	dd05      	ble.n	800f164 <tcps_status+0x260>
 800f158:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f15c:	f648 6230 	movw	r2, #36400	; 0x8e30
 800f160:	443a      	add	r2, r7
 800f162:	8013      	strh	r3, [r2, #0]
                ret = recv(sn, buf, received_size);
 800f164:	f648 6330 	movw	r3, #36400	; 0x8e30
 800f168:	443b      	add	r3, r7
 800f16a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800f16e:	4b38      	ldr	r3, [pc, #224]	; (800f250 <tcps_status+0x34c>)
 800f170:	f503 430e 	add.w	r3, r3, #36352	; 0x8e00
 800f174:	f103 0360 	add.w	r3, r3, #96	; 0x60
 800f178:	443b      	add	r3, r7
 800f17a:	f507 6266 	add.w	r2, r7, #3680	; 0xe60
 800f17e:	f6a2 6259 	subw	r2, r2, #3673	; 0xe59
 800f182:	7810      	ldrb	r0, [r2, #0]
 800f184:	460a      	mov	r2, r1
 800f186:	4619      	mov	r1, r3
 800f188:	f001 f98a 	bl	80104a0 <recv>
 800f18c:	4603      	mov	r3, r0
 800f18e:	f648 6234 	movw	r2, #36404	; 0x8e34
 800f192:	443a      	add	r2, r7
 800f194:	6013      	str	r3, [r2, #0]

                if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 800f196:	f648 6334 	movw	r3, #36404	; 0x8e34
 800f19a:	443b      	add	r3, r7
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	dc05      	bgt.n	800f1ae <tcps_status+0x2aa>
 800f1a2:	f648 6334 	movw	r3, #36404	; 0x8e34
 800f1a6:	443b      	add	r3, r7
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	b25b      	sxtb	r3, r3
 800f1ac:	e118      	b.n	800f3e0 <tcps_status+0x4dc>
                received_size = (uint16_t) ret;
 800f1ae:	f648 6334 	movw	r3, #36404	; 0x8e34
 800f1b2:	443b      	add	r3, r7
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	b21b      	sxth	r3, r3
 800f1b8:	f648 6230 	movw	r2, #36400	; 0x8e30
 800f1bc:	443a      	add	r2, r7
 800f1be:	8013      	strh	r3, [r2, #0]
                sentsize = 0;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	f648 625e 	movw	r2, #36446	; 0x8e5e
 800f1c6:	443a      	add	r2, r7
 800f1c8:	8013      	strh	r3, [r2, #0]

                while(received_size != sentsize)
 800f1ca:	e052      	b.n	800f272 <tcps_status+0x36e>
                {
                    ret = send(sn, buf+sentsize, received_size-sentsize);
 800f1cc:	f648 635e 	movw	r3, #36446	; 0x8e5e
 800f1d0:	443b      	add	r3, r7
 800f1d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f1d6:	4b1e      	ldr	r3, [pc, #120]	; (800f250 <tcps_status+0x34c>)
 800f1d8:	f503 430e 	add.w	r3, r3, #36352	; 0x8e00
 800f1dc:	f103 0360 	add.w	r3, r3, #96	; 0x60
 800f1e0:	443b      	add	r3, r7
 800f1e2:	1899      	adds	r1, r3, r2
 800f1e4:	f648 6330 	movw	r3, #36400	; 0x8e30
 800f1e8:	443b      	add	r3, r7
 800f1ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1ee:	b29a      	uxth	r2, r3
 800f1f0:	f648 635e 	movw	r3, #36446	; 0x8e5e
 800f1f4:	443b      	add	r3, r7
 800f1f6:	881b      	ldrh	r3, [r3, #0]
 800f1f8:	1ad3      	subs	r3, r2, r3
 800f1fa:	b29b      	uxth	r3, r3
 800f1fc:	b21a      	sxth	r2, r3
 800f1fe:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800f202:	f6a3 6359 	subw	r3, r3, #3673	; 0xe59
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	4618      	mov	r0, r3
 800f20a:	f001 f867 	bl	80102dc <send>
 800f20e:	4603      	mov	r3, r0
 800f210:	f648 6234 	movw	r2, #36404	; 0x8e34
 800f214:	443a      	add	r2, r7
 800f216:	6013      	str	r3, [r2, #0]
                    if(ret < 0)
 800f218:	f648 6334 	movw	r3, #36404	; 0x8e34
 800f21c:	443b      	add	r3, r7
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	2b00      	cmp	r3, #0
 800f222:	da17      	bge.n	800f254 <tcps_status+0x350>
                    {
                        close(sn);
 800f224:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800f228:	f6a3 6359 	subw	r3, r3, #3673	; 0xe59
 800f22c:	781b      	ldrb	r3, [r3, #0]
 800f22e:	4618      	mov	r0, r3
 800f230:	f000 fe1c 	bl	800fe6c <close>
                        return ret;
 800f234:	f648 6334 	movw	r3, #36404	; 0x8e34
 800f238:	443b      	add	r3, r7
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	b25b      	sxtb	r3, r3
 800f23e:	e0cf      	b.n	800f3e0 <tcps_status+0x4dc>
 800f240:	08012f08 	.word	0x08012f08
 800f244:	08012f14 	.word	0x08012f14
 800f248:	08012f20 	.word	0x08012f20
 800f24c:	24015da4 	.word	0x24015da4
 800f250:	ffff71ac 	.word	0xffff71ac
                    }
                    sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 800f254:	f648 6334 	movw	r3, #36404	; 0x8e34
 800f258:	443b      	add	r3, r7
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	b29a      	uxth	r2, r3
 800f25e:	f648 635e 	movw	r3, #36446	; 0x8e5e
 800f262:	443b      	add	r3, r7
 800f264:	881b      	ldrh	r3, [r3, #0]
 800f266:	4413      	add	r3, r2
 800f268:	b29b      	uxth	r3, r3
 800f26a:	f648 625e 	movw	r2, #36446	; 0x8e5e
 800f26e:	443a      	add	r2, r7
 800f270:	8013      	strh	r3, [r2, #0]
                while(received_size != sentsize)
 800f272:	f648 6330 	movw	r3, #36400	; 0x8e30
 800f276:	443b      	add	r3, r7
 800f278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f27c:	f648 625e 	movw	r2, #36446	; 0x8e5e
 800f280:	443a      	add	r2, r7
 800f282:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f286:	429a      	cmp	r2, r3
 800f288:	d1a0      	bne.n	800f1cc <tcps_status+0x2c8>
                }
            }

            if((ret = disconnect(sn)) != SOCK_OK) return ret;
 800f28a:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800f28e:	f6a3 6359 	subw	r3, r3, #3673	; 0xe59
 800f292:	781b      	ldrb	r3, [r3, #0]
 800f294:	4618      	mov	r0, r3
 800f296:	f000 ffaf 	bl	80101f8 <disconnect>
 800f29a:	4603      	mov	r3, r0
 800f29c:	f648 6234 	movw	r2, #36404	; 0x8e34
 800f2a0:	443a      	add	r2, r7
 800f2a2:	6013      	str	r3, [r2, #0]
 800f2a4:	f648 6334 	movw	r3, #36404	; 0x8e34
 800f2a8:	443b      	add	r3, r7
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	f000 8093 	beq.w	800f3d8 <tcps_status+0x4d4>
 800f2b2:	f648 6334 	movw	r3, #36404	; 0x8e34
 800f2b6:	443b      	add	r3, r7
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	b25b      	sxtb	r3, r3
 800f2bc:	e090      	b.n	800f3e0 <tcps_status+0x4dc>
                #ifdef _LOOPBACK_DEBUG_
                    printf("%d:Socket Closed\r\n", sn);
                #endif
            break;
        case SOCK_INIT :
            if( (ret = listen(sn)) != SOCK_OK) return ret;
 800f2be:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800f2c2:	f6a3 6359 	subw	r3, r3, #3673	; 0xe59
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f000 fe3d 	bl	800ff48 <listen>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	f648 6234 	movw	r2, #36404	; 0x8e34
 800f2d4:	443a      	add	r2, r7
 800f2d6:	6013      	str	r3, [r2, #0]
 800f2d8:	f648 6334 	movw	r3, #36404	; 0x8e34
 800f2dc:	443b      	add	r3, r7
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	d005      	beq.n	800f2f0 <tcps_status+0x3ec>
 800f2e4:	f648 6334 	movw	r3, #36404	; 0x8e34
 800f2e8:	443b      	add	r3, r7
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	b25b      	sxtb	r3, r3
 800f2ee:	e077      	b.n	800f3e0 <tcps_status+0x4dc>
                #ifdef _LOOPBACK_DEBUG_
                    printf("%d:Listen, TCP server loopback, port [%d] as %s\r\n", sn, port, mode_msg);
                #endif
                    printf("%d:Listen, TCP server loopback, port [%d] as %s\r\n", sn, port, mode_msg);
 800f2f0:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800f2f4:	f6a3 6359 	subw	r3, r3, #3673	; 0xe59
 800f2f8:	7819      	ldrb	r1, [r3, #0]
 800f2fa:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800f2fe:	f6a3 635c 	subw	r3, r3, #3676	; 0xe5c
 800f302:	881a      	ldrh	r2, [r3, #0]
 800f304:	f648 633c 	movw	r3, #36412	; 0x8e3c
 800f308:	443b      	add	r3, r7
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	4837      	ldr	r0, [pc, #220]	; (800f3ec <tcps_status+0x4e8>)
 800f30e:	f002 fd45 	bl	8011d9c <iprintf>
                    conn_status = 1;
 800f312:	4b37      	ldr	r3, [pc, #220]	; (800f3f0 <tcps_status+0x4ec>)
 800f314:	2201      	movs	r2, #1
 800f316:	701a      	strb	r2, [r3, #0]
            break;
 800f318:	e061      	b.n	800f3de <tcps_status+0x4da>
        case SOCK_CLOSED:
            #ifdef _LOOPBACK_DEBUG_
                printf("%d:TCP server loopback start\r\n",sn);
            #endif
                switch(TCP_mode)
 800f31a:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800f31e:	f6a3 635a 	subw	r3, r3, #3674	; 0xe5a
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	2b17      	cmp	r3, #23
 800f326:	d01a      	beq.n	800f35e <tcps_status+0x45a>
 800f328:	2b17      	cmp	r3, #23
 800f32a:	dc40      	bgt.n	800f3ae <tcps_status+0x4aa>
 800f32c:	2b02      	cmp	r3, #2
 800f32e:	d002      	beq.n	800f336 <tcps_status+0x432>
 800f330:	2b0b      	cmp	r3, #11
 800f332:	d028      	beq.n	800f386 <tcps_status+0x482>
                    break;
                case AS_IPDUAL:
                    tmp = socket(sn, Sn_MR_TCPD, port, SOCK_IO_NONBLOCK);
                    break;
                default:
                    break;
 800f334:	e03b      	b.n	800f3ae <tcps_status+0x4aa>
                    tmp = socket(sn, Sn_MR_TCP4, port, SOCK_IO_NONBLOCK);
 800f336:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800f33a:	f6a3 635c 	subw	r3, r3, #3676	; 0xe5c
 800f33e:	881a      	ldrh	r2, [r3, #0]
 800f340:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800f344:	f6a3 6359 	subw	r3, r3, #3673	; 0xe59
 800f348:	7818      	ldrb	r0, [r3, #0]
 800f34a:	2301      	movs	r3, #1
 800f34c:	2101      	movs	r1, #1
 800f34e:	f000 fb8f 	bl	800fa70 <socket>
 800f352:	4603      	mov	r3, r0
 800f354:	f648 625d 	movw	r2, #36445	; 0x8e5d
 800f358:	443a      	add	r2, r7
 800f35a:	7013      	strb	r3, [r2, #0]
                    break;
 800f35c:	e028      	b.n	800f3b0 <tcps_status+0x4ac>
                    tmp = socket(sn, Sn_MR_TCP6, port, SOCK_IO_NONBLOCK);
 800f35e:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800f362:	f6a3 635c 	subw	r3, r3, #3676	; 0xe5c
 800f366:	881a      	ldrh	r2, [r3, #0]
 800f368:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800f36c:	f6a3 6359 	subw	r3, r3, #3673	; 0xe59
 800f370:	7818      	ldrb	r0, [r3, #0]
 800f372:	2301      	movs	r3, #1
 800f374:	2109      	movs	r1, #9
 800f376:	f000 fb7b 	bl	800fa70 <socket>
 800f37a:	4603      	mov	r3, r0
 800f37c:	f648 625d 	movw	r2, #36445	; 0x8e5d
 800f380:	443a      	add	r2, r7
 800f382:	7013      	strb	r3, [r2, #0]
                    break;
 800f384:	e014      	b.n	800f3b0 <tcps_status+0x4ac>
                    tmp = socket(sn, Sn_MR_TCPD, port, SOCK_IO_NONBLOCK);
 800f386:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800f38a:	f6a3 635c 	subw	r3, r3, #3676	; 0xe5c
 800f38e:	881a      	ldrh	r2, [r3, #0]
 800f390:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800f394:	f6a3 6359 	subw	r3, r3, #3673	; 0xe59
 800f398:	7818      	ldrb	r0, [r3, #0]
 800f39a:	2301      	movs	r3, #1
 800f39c:	210d      	movs	r1, #13
 800f39e:	f000 fb67 	bl	800fa70 <socket>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	f648 625d 	movw	r2, #36445	; 0x8e5d
 800f3a8:	443a      	add	r2, r7
 800f3aa:	7013      	strb	r3, [r2, #0]
                    break;
 800f3ac:	e000      	b.n	800f3b0 <tcps_status+0x4ac>
                    break;
 800f3ae:	bf00      	nop
                }
                if(tmp != sn)    /* reinitialize the socket */
 800f3b0:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800f3b4:	f6a3 6359 	subw	r3, r3, #3673	; 0xe59
 800f3b8:	f648 625d 	movw	r2, #36445	; 0x8e5d
 800f3bc:	443a      	add	r2, r7
 800f3be:	7812      	ldrb	r2, [r2, #0]
 800f3c0:	781b      	ldrb	r3, [r3, #0]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d00a      	beq.n	800f3dc <tcps_status+0x4d8>
                {
                    #ifdef _LOOPBACK_DEBUG_
                        printf("%d : Fail to create socket.\r\n",sn);
                    #endif
                    return SOCKERR_SOCKNUM;
 800f3c6:	f04f 33ff 	mov.w	r3, #4294967295
 800f3ca:	e009      	b.n	800f3e0 <tcps_status+0x4dc>
                printf("%d:Socket opened[%d]\r\n",sn, getSn_SR(sn));
                //sock_state[sn] = 1;
            #endif
            break;
        default:
            break;
 800f3cc:	bf00      	nop
 800f3ce:	e006      	b.n	800f3de <tcps_status+0x4da>
                 break;
 800f3d0:	bf00      	nop
 800f3d2:	e004      	b.n	800f3de <tcps_status+0x4da>
            break;
 800f3d4:	bf00      	nop
 800f3d6:	e002      	b.n	800f3de <tcps_status+0x4da>
            break;
 800f3d8:	bf00      	nop
 800f3da:	e000      	b.n	800f3de <tcps_status+0x4da>
            break;
 800f3dc:	bf00      	nop
        }
    return 1;
 800f3de:	2301      	movs	r3, #1
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f507 470e 	add.w	r7, r7, #36352	; 0x8e00
 800f3e6:	3764      	adds	r7, #100	; 0x64
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd90      	pop	{r4, r7, pc}
 800f3ec:	08012f30 	.word	0x08012f30
 800f3f0:	24015da4 	.word	0x24015da4

0800f3f4 <iperf_tcpc>:
int32_t iperf_tcpc(uint8_t sn, uint8_t* buf, uint8_t* destip, uint16_t destport, uint32_t size, uint16_t count, uint8_t loopback_mode)
{
 800f3f4:	b590      	push	{r4, r7, lr}
 800f3f6:	b08f      	sub	sp, #60	; 0x3c
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	60b9      	str	r1, [r7, #8]
 800f3fc:	607a      	str	r2, [r7, #4]
 800f3fe:	461a      	mov	r2, r3
 800f400:	4603      	mov	r3, r0
 800f402:	73fb      	strb	r3, [r7, #15]
 800f404:	4613      	mov	r3, r2
 800f406:	81bb      	strh	r3, [r7, #12]

        int32_t ret; // return value for SOCK_ERRORs
        datasize_t sentsize=0;
 800f408:	2300      	movs	r3, #0
 800f40a:	867b      	strh	r3, [r7, #50]	; 0x32
        uint8_t status,inter,addr_len;
        datasize_t send_size;
        datasize_t received_size;
        uint8_t tmp = 0;
 800f40c:	2300      	movs	r3, #0
 800f40e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        wiz_IPAddress destinfo;
        uint32_t i, j;
        //uint32_t lens = sizeof(wiznet_logo);
        // Socket Status Transitions
        // Check the W6100 Socket n status register (Sn_SR, The 'Sn_SR' controlled by Sn_CR command or Packet send/recv status)
        getsockopt(sn,SO_STATUS,&status);
 800f412:	f107 0229 	add.w	r2, r7, #41	; 0x29
 800f416:	7bfb      	ldrb	r3, [r7, #15]
 800f418:	210a      	movs	r1, #10
 800f41a:	4618      	mov	r0, r3
 800f41c:	f001 f9dc 	bl	80107d8 <getsockopt>

        switch(status)
 800f420:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800f424:	2b1c      	cmp	r3, #28
 800f426:	f200 817f 	bhi.w	800f728 <iperf_tcpc+0x334>
 800f42a:	a201      	add	r2, pc, #4	; (adr r2, 800f430 <iperf_tcpc+0x3c>)
 800f42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f430:	0800f67d 	.word	0x0800f67d
 800f434:	0800f729 	.word	0x0800f729
 800f438:	0800f729 	.word	0x0800f729
 800f43c:	0800f729 	.word	0x0800f729
 800f440:	0800f729 	.word	0x0800f729
 800f444:	0800f729 	.word	0x0800f729
 800f448:	0800f729 	.word	0x0800f729
 800f44c:	0800f729 	.word	0x0800f729
 800f450:	0800f729 	.word	0x0800f729
 800f454:	0800f729 	.word	0x0800f729
 800f458:	0800f729 	.word	0x0800f729
 800f45c:	0800f729 	.word	0x0800f729
 800f460:	0800f729 	.word	0x0800f729
 800f464:	0800f729 	.word	0x0800f729
 800f468:	0800f729 	.word	0x0800f729
 800f46c:	0800f729 	.word	0x0800f729
 800f470:	0800f729 	.word	0x0800f729
 800f474:	0800f729 	.word	0x0800f729
 800f478:	0800f729 	.word	0x0800f729
 800f47c:	0800f639 	.word	0x0800f639
 800f480:	0800f729 	.word	0x0800f729
 800f484:	0800f729 	.word	0x0800f729
 800f488:	0800f729 	.word	0x0800f729
 800f48c:	0800f4a5 	.word	0x0800f4a5
 800f490:	0800f729 	.word	0x0800f729
 800f494:	0800f729 	.word	0x0800f729
 800f498:	0800f729 	.word	0x0800f729
 800f49c:	0800f729 	.word	0x0800f729
 800f4a0:	0800f57d 	.word	0x0800f57d
        {
        case SOCK_ESTABLISHED :
            ctlsocket(sn,CS_GET_INTERRUPT,&inter);
 800f4a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f4a8:	7bfb      	ldrb	r3, [r7, #15]
 800f4aa:	2105      	movs	r1, #5
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f001 f8a3 	bl	80105f8 <ctlsocket>
            if(inter & Sn_IR_CON)   // Socket n interrupt register mask; TCP CON interrupt = connection with peer is successful
 800f4b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f4b6:	f003 0301 	and.w	r3, r3, #1
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d009      	beq.n	800f4d2 <iperf_tcpc+0xde>
            {
            #ifdef _LOOPBACK_DEBUG_
                    printf("%d:Connected to - %d.%d.%d.%d : %d\r\n",sn, destip[0], destip[1], destip[2], destip[3], destport);
            #endif
                arg_tmp8 = Sn_IR_CON;
 800f4be:	2301      	movs	r3, #1
 800f4c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                ctlsocket(sn,CS_CLR_INTERRUPT,&arg_tmp8);// this interrupt should be write the bit cleared to '1'
 800f4c4:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800f4c8:	7bfb      	ldrb	r3, [r7, #15]
 800f4ca:	2104      	movs	r1, #4
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f001 f893 	bl	80105f8 <ctlsocket>
            }
            #if 1
            // 20230420 taylor


            for(j=0; j<count; j++)
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f4d6:	e02e      	b.n	800f536 <iperf_tcpc+0x142>
                #endif
#if 0
                send_size = lens;
                //buf = wiznet_logo;
#else
                send_size = size;
 800f4d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4da:	857b      	strh	r3, [r7, #42]	; 0x2a
#endif
                sentsize = 0;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	867b      	strh	r3, [r7, #50]	; 0x32

                while(send_size != sentsize)
 800f4e0:	e020      	b.n	800f524 <iperf_tcpc+0x130>
                {
                    ret = send(sn, buf+sentsize, send_size-sentsize); // Data send process (User's buffer -> Destination through H/W Tx socket buffer)
 800f4e2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f4e6:	68ba      	ldr	r2, [r7, #8]
 800f4e8:	18d1      	adds	r1, r2, r3
 800f4ea:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800f4ec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f4ee:	1ad3      	subs	r3, r2, r3
 800f4f0:	b29b      	uxth	r3, r3
 800f4f2:	b21a      	sxth	r2, r3
 800f4f4:	7bfb      	ldrb	r3, [r7, #15]
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f000 fef0 	bl	80102dc <send>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	637b      	str	r3, [r7, #52]	; 0x34
                    //ret = send_t2(sn, buf+sentsize, send_size-sentsize);
                    if(ret < 0) // Send Error occurred (sent data length < 0)
 800f500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f502:	2b00      	cmp	r3, #0
 800f504:	da08      	bge.n	800f518 <iperf_tcpc+0x124>
                    {
                        printf("Send Error Occured\r\n");
 800f506:	488d      	ldr	r0, [pc, #564]	; (800f73c <iperf_tcpc+0x348>)
 800f508:	f002 fcae 	bl	8011e68 <puts>
                        close(sn); // socket close
 800f50c:	7bfb      	ldrb	r3, [r7, #15]
 800f50e:	4618      	mov	r0, r3
 800f510:	f000 fcac 	bl	800fe6c <close>
                        return ret;
 800f514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f516:	e10d      	b.n	800f734 <iperf_tcpc+0x340>
                    }
                    sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 800f518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f51a:	b29a      	uxth	r2, r3
 800f51c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f51e:	4413      	add	r3, r2
 800f520:	b29b      	uxth	r3, r3
 800f522:	867b      	strh	r3, [r7, #50]	; 0x32
                while(send_size != sentsize)
 800f524:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800f528:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d1d8      	bne.n	800f4e2 <iperf_tcpc+0xee>
            for(j=0; j<count; j++)
 800f530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f532:	3301      	adds	r3, #1
 800f534:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f536:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800f53a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f53c:	429a      	cmp	r2, r3
 800f53e:	d3cb      	bcc.n	800f4d8 <iperf_tcpc+0xe4>
                }
            }

            if((ret=disconnect(sn)) != SOCK_OK)
 800f540:	7bfb      	ldrb	r3, [r7, #15]
 800f542:	4618      	mov	r0, r3
 800f544:	f000 fe58 	bl	80101f8 <disconnect>
 800f548:	4603      	mov	r3, r0
 800f54a:	637b      	str	r3, [r7, #52]	; 0x34
 800f54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f54e:	2b01      	cmp	r3, #1
 800f550:	d012      	beq.n	800f578 <iperf_tcpc+0x184>
            {
                //close(sn);
                // disconnect failed
                if(ret == SOCK_BUSY)
 800f552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f554:	2b00      	cmp	r3, #0
 800f556:	d10d      	bne.n	800f574 <iperf_tcpc+0x180>
                {
                    if((ret=disconnect(sn)) != SOCK_OK)
 800f558:	7bfb      	ldrb	r3, [r7, #15]
 800f55a:	4618      	mov	r0, r3
 800f55c:	f000 fe4c 	bl	80101f8 <disconnect>
 800f560:	4603      	mov	r3, r0
 800f562:	637b      	str	r3, [r7, #52]	; 0x34
 800f564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f566:	2b01      	cmp	r3, #1
 800f568:	d004      	beq.n	800f574 <iperf_tcpc+0x180>
                    {
                        printf("disconnect\r\n");
 800f56a:	4875      	ldr	r0, [pc, #468]	; (800f740 <iperf_tcpc+0x34c>)
 800f56c:	f002 fc7c 	bl	8011e68 <puts>
                        return 56783192;
 800f570:	4b74      	ldr	r3, [pc, #464]	; (800f744 <iperf_tcpc+0x350>)
 800f572:	e0df      	b.n	800f734 <iperf_tcpc+0x340>
                    }
                }
                return 56783192;
 800f574:	4b73      	ldr	r3, [pc, #460]	; (800f744 <iperf_tcpc+0x350>)
 800f576:	e0dd      	b.n	800f734 <iperf_tcpc+0x340>
            }
            else
            {
                // disconnected
                return 31925678;
 800f578:	4b73      	ldr	r3, [pc, #460]	; (800f748 <iperf_tcpc+0x354>)
 800f57a:	e0db      	b.n	800f734 <iperf_tcpc+0x340>

        case SOCK_CLOSE_WAIT :
        #ifdef _LOOPBACK_DEBUG_
                printf("%d:CloseWait\r\n",sn);
        #endif
            getsockopt(sn, SO_RECVBUF, &received_size);
 800f57c:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800f580:	7bfb      	ldrb	r3, [r7, #15]
 800f582:	2109      	movs	r1, #9
 800f584:	4618      	mov	r0, r3
 800f586:	f001 f927 	bl	80107d8 <getsockopt>

            if((received_size = getSn_RX_RSR(sn)) > 0) // Sn_RX_RSR: Socket n Received Size Register, Receiving data length
 800f58a:	7bfb      	ldrb	r3, [r7, #15]
 800f58c:	4618      	mov	r0, r3
 800f58e:	f000 f95d 	bl	800f84c <getSn_RX_RSR>
 800f592:	4603      	mov	r3, r0
 800f594:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f596:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	dd41      	ble.n	800f622 <iperf_tcpc+0x22e>
            {
                if(received_size > DATA_BUF_SIZE) received_size = DATA_BUF_SIZE; // DATA_BUF_SIZE means user defined buffer size (array)
 800f59e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f5a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f5a6:	dd02      	ble.n	800f5ae <iperf_tcpc+0x1ba>
 800f5a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f5ac:	84fb      	strh	r3, [r7, #38]	; 0x26
                ret = recv(sn, buf, received_size); // Data Receive process (H/W Rx socket buffer -> User's buffer)
 800f5ae:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800f5b2:	7bfb      	ldrb	r3, [r7, #15]
 800f5b4:	68b9      	ldr	r1, [r7, #8]
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f000 ff72 	bl	80104a0 <recv>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	637b      	str	r3, [r7, #52]	; 0x34

                if(ret <= 0) return ret; // If the received data length <= 0, receive failed and process end
 800f5c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	dc01      	bgt.n	800f5ca <iperf_tcpc+0x1d6>
 800f5c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5c8:	e0b4      	b.n	800f734 <iperf_tcpc+0x340>
                received_size = (uint16_t) ret;
 800f5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5cc:	b21b      	sxth	r3, r3
 800f5ce:	84fb      	strh	r3, [r7, #38]	; 0x26
                sentsize = 0;
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	867b      	strh	r3, [r7, #50]	; 0x32

                // Data sentsize control
                while(received_size != sentsize)
 800f5d4:	e01f      	b.n	800f616 <iperf_tcpc+0x222>
                {
                    ret = send(sn, buf+sentsize, received_size-sentsize); // Data send process (User's buffer -> Destination through H/W Tx socket buffer)
 800f5d6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f5da:	68ba      	ldr	r2, [r7, #8]
 800f5dc:	18d1      	adds	r1, r2, r3
 800f5de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f5e2:	b29a      	uxth	r2, r3
 800f5e4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f5e6:	1ad3      	subs	r3, r2, r3
 800f5e8:	b29b      	uxth	r3, r3
 800f5ea:	b21a      	sxth	r2, r3
 800f5ec:	7bfb      	ldrb	r3, [r7, #15]
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f000 fe74 	bl	80102dc <send>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	637b      	str	r3, [r7, #52]	; 0x34
                    if(ret < 0) // Send Error occurred (sent data length < 0)
 800f5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	da05      	bge.n	800f60a <iperf_tcpc+0x216>
                    {
                        close(sn); // socket close
 800f5fe:	7bfb      	ldrb	r3, [r7, #15]
 800f600:	4618      	mov	r0, r3
 800f602:	f000 fc33 	bl	800fe6c <close>
                        return ret;
 800f606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f608:	e094      	b.n	800f734 <iperf_tcpc+0x340>
                    }
                    sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 800f60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f60c:	b29a      	uxth	r2, r3
 800f60e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f610:	4413      	add	r3, r2
 800f612:	b29b      	uxth	r3, r3
 800f614:	867b      	strh	r3, [r7, #50]	; 0x32
                while(received_size != sentsize)
 800f616:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f61a:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 800f61e:	429a      	cmp	r2, r3
 800f620:	d1d9      	bne.n	800f5d6 <iperf_tcpc+0x1e2>
                }
            }
            if((ret=disconnect(sn)) != SOCK_OK) return ret;
 800f622:	7bfb      	ldrb	r3, [r7, #15]
 800f624:	4618      	mov	r0, r3
 800f626:	f000 fde7 	bl	80101f8 <disconnect>
 800f62a:	4603      	mov	r3, r0
 800f62c:	637b      	str	r3, [r7, #52]	; 0x34
 800f62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f630:	2b01      	cmp	r3, #1
 800f632:	d07b      	beq.n	800f72c <iperf_tcpc+0x338>
 800f634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f636:	e07d      	b.n	800f734 <iperf_tcpc+0x340>
                        ((uint16_t)destip[14] << 8) | ((uint16_t)destip[15]));
                    printf("%d\r\n", destport);
                }
        #endif

            if(loopback_mode == AS_IPV4)
 800f638:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800f63c:	2b02      	cmp	r3, #2
 800f63e:	d108      	bne.n	800f652 <iperf_tcpc+0x25e>
              ret = connect(sn, destip, destport, 4); /* Try to connect to TCP server(Socket, DestIP, DestPort) */
 800f640:	89ba      	ldrh	r2, [r7, #12]
 800f642:	7bf8      	ldrb	r0, [r7, #15]
 800f644:	2304      	movs	r3, #4
 800f646:	6879      	ldr	r1, [r7, #4]
 800f648:	f000 fcc8 	bl	800ffdc <connect>
 800f64c:	4603      	mov	r3, r0
 800f64e:	637b      	str	r3, [r7, #52]	; 0x34
 800f650:	e00b      	b.n	800f66a <iperf_tcpc+0x276>
            else if(loopback_mode == AS_IPV6)
 800f652:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800f656:	2b17      	cmp	r3, #23
 800f658:	d107      	bne.n	800f66a <iperf_tcpc+0x276>
              ret = connect(sn, destip, destport, 16); /* Try to connect to TCP server(Socket, DestIP, DestPort) */
 800f65a:	89ba      	ldrh	r2, [r7, #12]
 800f65c:	7bf8      	ldrb	r0, [r7, #15]
 800f65e:	2310      	movs	r3, #16
 800f660:	6879      	ldr	r1, [r7, #4]
 800f662:	f000 fcbb 	bl	800ffdc <connect>
 800f666:	4603      	mov	r3, r0
 800f668:	637b      	str	r3, [r7, #52]	; 0x34

            printf("SOCK Status: %d\r\n", ret);
 800f66a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f66c:	4837      	ldr	r0, [pc, #220]	; (800f74c <iperf_tcpc+0x358>)
 800f66e:	f002 fb95 	bl	8011d9c <iprintf>

            if( ret != SOCK_OK) return ret; //  Try to TCP connect to the TCP server (destination)
 800f672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f674:	2b01      	cmp	r3, #1
 800f676:	d05b      	beq.n	800f730 <iperf_tcpc+0x33c>
 800f678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f67a:	e05b      	b.n	800f734 <iperf_tcpc+0x340>
            break;

        case SOCK_CLOSED:
            switch(loopback_mode)
 800f67c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800f680:	2b17      	cmp	r3, #23
 800f682:	d015      	beq.n	800f6b0 <iperf_tcpc+0x2bc>
 800f684:	2b17      	cmp	r3, #23
 800f686:	dc31      	bgt.n	800f6ec <iperf_tcpc+0x2f8>
 800f688:	2b02      	cmp	r3, #2
 800f68a:	d002      	beq.n	800f692 <iperf_tcpc+0x29e>
 800f68c:	2b0b      	cmp	r3, #11
 800f68e:	d01e      	beq.n	800f6ce <iperf_tcpc+0x2da>
                break;
            case AS_IPDUAL:
                tmp = socket(sn, Sn_MR_TCPD, any_port++, SOCK_IO_NONBLOCK);
                break;
            default:
                break;
 800f690:	e02c      	b.n	800f6ec <iperf_tcpc+0x2f8>
                tmp = socket(sn, Sn_MR_TCP4, any_port++, SOCK_IO_NONBLOCK);
 800f692:	4b2f      	ldr	r3, [pc, #188]	; (800f750 <iperf_tcpc+0x35c>)
 800f694:	881a      	ldrh	r2, [r3, #0]
 800f696:	1c53      	adds	r3, r2, #1
 800f698:	b299      	uxth	r1, r3
 800f69a:	4b2d      	ldr	r3, [pc, #180]	; (800f750 <iperf_tcpc+0x35c>)
 800f69c:	8019      	strh	r1, [r3, #0]
 800f69e:	7bf8      	ldrb	r0, [r7, #15]
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	2101      	movs	r1, #1
 800f6a4:	f000 f9e4 	bl	800fa70 <socket>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
                break;
 800f6ae:	e01e      	b.n	800f6ee <iperf_tcpc+0x2fa>
                tmp = socket(sn, Sn_MR_TCP6, any_port++, SOCK_IO_NONBLOCK);
 800f6b0:	4b27      	ldr	r3, [pc, #156]	; (800f750 <iperf_tcpc+0x35c>)
 800f6b2:	881a      	ldrh	r2, [r3, #0]
 800f6b4:	1c53      	adds	r3, r2, #1
 800f6b6:	b299      	uxth	r1, r3
 800f6b8:	4b25      	ldr	r3, [pc, #148]	; (800f750 <iperf_tcpc+0x35c>)
 800f6ba:	8019      	strh	r1, [r3, #0]
 800f6bc:	7bf8      	ldrb	r0, [r7, #15]
 800f6be:	2301      	movs	r3, #1
 800f6c0:	2109      	movs	r1, #9
 800f6c2:	f000 f9d5 	bl	800fa70 <socket>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
                break;
 800f6cc:	e00f      	b.n	800f6ee <iperf_tcpc+0x2fa>
                tmp = socket(sn, Sn_MR_TCPD, any_port++, SOCK_IO_NONBLOCK);
 800f6ce:	4b20      	ldr	r3, [pc, #128]	; (800f750 <iperf_tcpc+0x35c>)
 800f6d0:	881a      	ldrh	r2, [r3, #0]
 800f6d2:	1c53      	adds	r3, r2, #1
 800f6d4:	b299      	uxth	r1, r3
 800f6d6:	4b1e      	ldr	r3, [pc, #120]	; (800f750 <iperf_tcpc+0x35c>)
 800f6d8:	8019      	strh	r1, [r3, #0]
 800f6da:	7bf8      	ldrb	r0, [r7, #15]
 800f6dc:	2301      	movs	r3, #1
 800f6de:	210d      	movs	r1, #13
 800f6e0:	f000 f9c6 	bl	800fa70 <socket>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
                break;
 800f6ea:	e000      	b.n	800f6ee <iperf_tcpc+0x2fa>
                break;
 800f6ec:	bf00      	nop
            }

            if(tmp != sn){    /* reinitialize the socket */
 800f6ee:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 800f6f2:	7bfb      	ldrb	r3, [r7, #15]
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d002      	beq.n	800f6fe <iperf_tcpc+0x30a>
            #ifdef _LOOPBACK_DEBUG_
                    printf("%d : Fail to create socket.\r\n",sn);
            #endif
                return SOCKERR_SOCKNUM;
 800f6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f6fc:	e01a      	b.n	800f734 <iperf_tcpc+0x340>
            }
            printf("%d:Socket opened[%d]\r\n",sn, getSn_SR(sn));
 800f6fe:	7bfc      	ldrb	r4, [r7, #15]
 800f700:	7bfb      	ldrb	r3, [r7, #15]
 800f702:	009b      	lsls	r3, r3, #2
 800f704:	3301      	adds	r3, #1
 800f706:	00db      	lsls	r3, r3, #3
 800f708:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f70c:	4618      	mov	r0, r3
 800f70e:	f000 f835 	bl	800f77c <WIZCHIP_READ>
 800f712:	4603      	mov	r3, r0
 800f714:	461a      	mov	r2, r3
 800f716:	4621      	mov	r1, r4
 800f718:	480e      	ldr	r0, [pc, #56]	; (800f754 <iperf_tcpc+0x360>)
 800f71a:	f002 fb3f 	bl	8011d9c <iprintf>
            sock_state[sn] = 1;
 800f71e:	7bfb      	ldrb	r3, [r7, #15]
 800f720:	4a0d      	ldr	r2, [pc, #52]	; (800f758 <iperf_tcpc+0x364>)
 800f722:	2101      	movs	r1, #1
 800f724:	54d1      	strb	r1, [r2, r3]

            break;
 800f726:	e004      	b.n	800f732 <iperf_tcpc+0x33e>
        default:
            break;
 800f728:	bf00      	nop
 800f72a:	e002      	b.n	800f732 <iperf_tcpc+0x33e>
            break;
 800f72c:	bf00      	nop
 800f72e:	e000      	b.n	800f732 <iperf_tcpc+0x33e>
            break;
 800f730:	bf00      	nop
        }
        return 1;
 800f732:	2301      	movs	r3, #1

}
 800f734:	4618      	mov	r0, r3
 800f736:	373c      	adds	r7, #60	; 0x3c
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd90      	pop	{r4, r7, pc}
 800f73c:	08012f64 	.word	0x08012f64
 800f740:	08012f78 	.word	0x08012f78
 800f744:	03627158 	.word	0x03627158
 800f748:	01e725ae 	.word	0x01e725ae
 800f74c:	08012f84 	.word	0x08012f84
 800f750:	24000084 	.word	0x24000084
 800f754:	08012f98 	.word	0x08012f98
 800f758:	24015d9c 	.word	0x24015d9c

0800f75c <WIZCHIP_WRITE>:

#define _W6100_SPI_OP_          _WIZCHIP_SPI_VDM_OP_

//////////////////////////////////////////////////
void WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b082      	sub	sp, #8
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	460b      	mov	r3, r1
 800f766:	70fb      	strb	r3, [r7, #3]
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
   WIZCHIP_CRITICAL_EXIT();
#else
   dma_write_data(AddrSel, &wb, 1);
 800f768:	1cfb      	adds	r3, r7, #3
 800f76a:	2201      	movs	r2, #1
 800f76c:	4619      	mov	r1, r3
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	f7f1 f840 	bl	80007f4 <dma_write_data>
#endif
}
 800f774:	bf00      	nop
 800f776:	3708      	adds	r7, #8
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}

0800f77c <WIZCHIP_READ>:

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b084      	sub	sp, #16
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
   WIZCHIP_CRITICAL_EXIT();
#else
   dma_read_data(AddrSel, &ret, 1);
 800f784:	f107 030f 	add.w	r3, r7, #15
 800f788:	2201      	movs	r2, #1
 800f78a:	4619      	mov	r1, r3
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	f7f1 f871 	bl	8000874 <dma_read_data>
#endif
   return ret;
 800f792:	7bfb      	ldrb	r3, [r7, #15]
}
 800f794:	4618      	mov	r0, r3
 800f796:	3710      	adds	r7, #16
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}

0800f79c <WIZCHIP_WRITE_BUF>:

void WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, datasize_t len)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b084      	sub	sp, #16
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	60f8      	str	r0, [r7, #12]
 800f7a4:	60b9      	str	r1, [r7, #8]
 800f7a6:	4613      	mov	r3, r2
 800f7a8:	80fb      	strh	r3, [r7, #6]
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
   WIZCHIP_CRITICAL_EXIT();
#else
   dma_write_data(AddrSel, pBuf, len);
 800f7aa:	88fb      	ldrh	r3, [r7, #6]
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	68b9      	ldr	r1, [r7, #8]
 800f7b0:	68f8      	ldr	r0, [r7, #12]
 800f7b2:	f7f1 f81f 	bl	80007f4 <dma_write_data>
#endif
}
 800f7b6:	bf00      	nop
 800f7b8:	3710      	adds	r7, #16
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}

0800f7be <WIZCHIP_READ_BUF>:

void WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, datasize_t len)
{
 800f7be:	b580      	push	{r7, lr}
 800f7c0:	b084      	sub	sp, #16
 800f7c2:	af00      	add	r7, sp, #0
 800f7c4:	60f8      	str	r0, [r7, #12]
 800f7c6:	60b9      	str	r1, [r7, #8]
 800f7c8:	4613      	mov	r3, r2
 800f7ca:	80fb      	strh	r3, [r7, #6]
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!!"
#endif
   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
   WIZCHIP_CRITICAL_EXIT();
#else
   dma_read_data(AddrSel, pBuf, len);
 800f7cc:	88fb      	ldrh	r3, [r7, #6]
 800f7ce:	461a      	mov	r2, r3
 800f7d0:	68b9      	ldr	r1, [r7, #8]
 800f7d2:	68f8      	ldr	r0, [r7, #12]
 800f7d4:	f7f1 f84e 	bl	8000874 <dma_read_data>
#endif
}
 800f7d8:	bf00      	nop
 800f7da:	3710      	adds	r7, #16
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd80      	pop	{r7, pc}

0800f7e0 <getSn_TX_FSR>:

datasize_t getSn_TX_FSR(uint8_t sn)
{
 800f7e0:	b590      	push	{r4, r7, lr}
 800f7e2:	b085      	sub	sp, #20
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	71fb      	strb	r3, [r7, #7]
   datasize_t prev_val=-1,val=0;
 800f7ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f7ee:	81bb      	strh	r3, [r7, #12]
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	81fb      	strh	r3, [r7, #14]
   do
   {
      prev_val = val;
 800f7f4:	89fb      	ldrh	r3, [r7, #14]
 800f7f6:	81bb      	strh	r3, [r7, #12]
      val = WIZCHIP_READ(_Sn_TX_FSR_(sn));
 800f7f8:	79fb      	ldrb	r3, [r7, #7]
 800f7fa:	009b      	lsls	r3, r3, #2
 800f7fc:	3301      	adds	r3, #1
 800f7fe:	00db      	lsls	r3, r3, #3
 800f800:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 800f804:	4618      	mov	r0, r3
 800f806:	f7ff ffb9 	bl	800f77c <WIZCHIP_READ>
 800f80a:	4603      	mov	r3, r0
 800f80c:	81fb      	strh	r3, [r7, #14]
      val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(_Sn_TX_FSR_(sn),1));
 800f80e:	89fb      	ldrh	r3, [r7, #14]
 800f810:	021b      	lsls	r3, r3, #8
 800f812:	b29c      	uxth	r4, r3
 800f814:	79fb      	ldrb	r3, [r7, #7]
 800f816:	009b      	lsls	r3, r3, #2
 800f818:	3301      	adds	r3, #1
 800f81a:	00da      	lsls	r2, r3, #3
 800f81c:	4b0a      	ldr	r3, [pc, #40]	; (800f848 <getSn_TX_FSR+0x68>)
 800f81e:	4413      	add	r3, r2
 800f820:	4618      	mov	r0, r3
 800f822:	f7ff ffab 	bl	800f77c <WIZCHIP_READ>
 800f826:	4603      	mov	r3, r0
 800f828:	b29b      	uxth	r3, r3
 800f82a:	4423      	add	r3, r4
 800f82c:	b29b      	uxth	r3, r3
 800f82e:	81fb      	strh	r3, [r7, #14]
   }while (val != prev_val);
 800f830:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f834:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f838:	429a      	cmp	r2, r3
 800f83a:	d1db      	bne.n	800f7f4 <getSn_TX_FSR+0x14>
   return val;
 800f83c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800f840:	4618      	mov	r0, r3
 800f842:	3714      	adds	r7, #20
 800f844:	46bd      	mov	sp, r7
 800f846:	bd90      	pop	{r4, r7, pc}
 800f848:	00020500 	.word	0x00020500

0800f84c <getSn_RX_RSR>:

datasize_t getSn_RX_RSR(uint8_t sn)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b084      	sub	sp, #16
 800f850:	af00      	add	r7, sp, #0
 800f852:	4603      	mov	r3, r0
 800f854:	71fb      	strb	r3, [r7, #7]
      prev_val = val;
      val = WIZCHIP_READ(_Sn_RX_RSR_(sn));
      val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(_Sn_RX_RSR_(sn),1));
   }while (val != prev_val);
   #else
   uint8_t temp_data[3]={0,};
 800f856:	4b10      	ldr	r3, [pc, #64]	; (800f898 <getSn_RX_RSR+0x4c>)
 800f858:	881b      	ldrh	r3, [r3, #0]
 800f85a:	813b      	strh	r3, [r7, #8]
 800f85c:	2300      	movs	r3, #0
 800f85e:	72bb      	strb	r3, [r7, #10]
   datasize_t val=0;
 800f860:	2300      	movs	r3, #0
 800f862:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_READ_BUF(_Sn_RX_RSR_(sn),temp_data, 2);
 800f864:	79fb      	ldrb	r3, [r7, #7]
 800f866:	009b      	lsls	r3, r3, #2
 800f868:	3301      	adds	r3, #1
 800f86a:	00db      	lsls	r3, r3, #3
 800f86c:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
 800f870:	4618      	mov	r0, r3
 800f872:	f107 0308 	add.w	r3, r7, #8
 800f876:	2202      	movs	r2, #2
 800f878:	4619      	mov	r1, r3
 800f87a:	f7ff ffa0 	bl	800f7be <WIZCHIP_READ_BUF>
   val = (temp_data[0]<<8)|(temp_data[1]);
 800f87e:	7a3b      	ldrb	r3, [r7, #8]
 800f880:	021b      	lsls	r3, r3, #8
 800f882:	b21a      	sxth	r2, r3
 800f884:	7a7b      	ldrb	r3, [r7, #9]
 800f886:	b21b      	sxth	r3, r3
 800f888:	4313      	orrs	r3, r2
 800f88a:	81fb      	strh	r3, [r7, #14]
   #endif
   return val;
 800f88c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800f890:	4618      	mov	r0, r3
 800f892:	3710      	adds	r7, #16
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}
 800f898:	08012fdc 	.word	0x08012fdc

0800f89c <getSn_RX_RD1>:
datasize_t getSn_RX_RD1(uint8_t sn)//_Sn_RX_RD_(sn)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b084      	sub	sp, #16
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	71fb      	strb	r3, [r7, #7]
   uint8_t temp_data[3]={0,};
 800f8a6:	4b10      	ldr	r3, [pc, #64]	; (800f8e8 <getSn_RX_RD1+0x4c>)
 800f8a8:	881b      	ldrh	r3, [r3, #0]
 800f8aa:	813b      	strh	r3, [r7, #8]
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	72bb      	strb	r3, [r7, #10]
   datasize_t val=0;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_READ_BUF(_Sn_RX_RD_(sn),temp_data, 2);
 800f8b4:	79fb      	ldrb	r3, [r7, #7]
 800f8b6:	009b      	lsls	r3, r3, #2
 800f8b8:	3301      	adds	r3, #1
 800f8ba:	00db      	lsls	r3, r3, #3
 800f8bc:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f107 0308 	add.w	r3, r7, #8
 800f8c6:	2202      	movs	r2, #2
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	f7ff ff78 	bl	800f7be <WIZCHIP_READ_BUF>
   val = (temp_data[0]<<8)|(temp_data[1]);
 800f8ce:	7a3b      	ldrb	r3, [r7, #8]
 800f8d0:	021b      	lsls	r3, r3, #8
 800f8d2:	b21a      	sxth	r2, r3
 800f8d4:	7a7b      	ldrb	r3, [r7, #9]
 800f8d6:	b21b      	sxth	r3, r3
 800f8d8:	4313      	orrs	r3, r2
 800f8da:	81fb      	strh	r3, [r7, #14]
   return val;
 800f8dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3710      	adds	r7, #16
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}
 800f8e8:	08012fdc 	.word	0x08012fdc

0800f8ec <setSn_RX_RD1>:
void setSn_RX_RD1(uint8_t sn, datasize_t _ptr)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b084      	sub	sp, #16
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	460a      	mov	r2, r1
 800f8f6:	71fb      	strb	r3, [r7, #7]
 800f8f8:	4613      	mov	r3, r2
 800f8fa:	80bb      	strh	r3, [r7, #4]
   uint8_t temp_data[3]={0,};
 800f8fc:	4b0f      	ldr	r3, [pc, #60]	; (800f93c <setSn_RX_RD1+0x50>)
 800f8fe:	881b      	ldrh	r3, [r3, #0]
 800f900:	81bb      	strh	r3, [r7, #12]
 800f902:	2300      	movs	r3, #0
 800f904:	73bb      	strb	r3, [r7, #14]
   temp_data[0] = (_ptr>>8)&0x00ff;
 800f906:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f90a:	121b      	asrs	r3, r3, #8
 800f90c:	b21b      	sxth	r3, r3
 800f90e:	b2db      	uxtb	r3, r3
 800f910:	733b      	strb	r3, [r7, #12]
   temp_data[1] = _ptr&0x00ff;
 800f912:	88bb      	ldrh	r3, [r7, #4]
 800f914:	b2db      	uxtb	r3, r3
 800f916:	737b      	strb	r3, [r7, #13]
   WIZCHIP_WRITE_BUF(_Sn_RX_RD_(sn),temp_data, 2);
 800f918:	79fb      	ldrb	r3, [r7, #7]
 800f91a:	009b      	lsls	r3, r3, #2
 800f91c:	3301      	adds	r3, #1
 800f91e:	00db      	lsls	r3, r3, #3
 800f920:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 800f924:	4618      	mov	r0, r3
 800f926:	f107 030c 	add.w	r3, r7, #12
 800f92a:	2202      	movs	r2, #2
 800f92c:	4619      	mov	r1, r3
 800f92e:	f7ff ff35 	bl	800f79c <WIZCHIP_WRITE_BUF>
}
 800f932:	bf00      	nop
 800f934:	3710      	adds	r7, #16
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	bf00      	nop
 800f93c:	08012fdc 	.word	0x08012fdc

0800f940 <wiz_send_data>:
void wiz_send_data(uint8_t sn, uint8_t *wizdata, datasize_t len)
{
 800f940:	b590      	push	{r4, r7, lr}
 800f942:	b085      	sub	sp, #20
 800f944:	af00      	add	r7, sp, #0
 800f946:	4603      	mov	r3, r0
 800f948:	6039      	str	r1, [r7, #0]
 800f94a:	71fb      	strb	r3, [r7, #7]
 800f94c:	4613      	mov	r3, r2
 800f94e:	80bb      	strh	r3, [r7, #4]
   datasize_t ptr = 0;
 800f950:	2300      	movs	r3, #0
 800f952:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800f954:	2300      	movs	r3, #0
 800f956:	60bb      	str	r3, [r7, #8]
   ptr = getSn_TX_WR(sn);
 800f958:	79fb      	ldrb	r3, [r7, #7]
 800f95a:	009b      	lsls	r3, r3, #2
 800f95c:	3301      	adds	r3, #1
 800f95e:	00db      	lsls	r3, r3, #3
 800f960:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800f964:	4618      	mov	r0, r3
 800f966:	f7ff ff09 	bl	800f77c <WIZCHIP_READ>
 800f96a:	4603      	mov	r3, r0
 800f96c:	b29b      	uxth	r3, r3
 800f96e:	021b      	lsls	r3, r3, #8
 800f970:	b29c      	uxth	r4, r3
 800f972:	79fb      	ldrb	r3, [r7, #7]
 800f974:	009b      	lsls	r3, r3, #2
 800f976:	3301      	adds	r3, #1
 800f978:	00da      	lsls	r2, r3, #3
 800f97a:	4b20      	ldr	r3, [pc, #128]	; (800f9fc <wiz_send_data+0xbc>)
 800f97c:	4413      	add	r3, r2
 800f97e:	4618      	mov	r0, r3
 800f980:	f7ff fefc 	bl	800f77c <WIZCHIP_READ>
 800f984:	4603      	mov	r3, r0
 800f986:	b29b      	uxth	r3, r3
 800f988:	4423      	add	r3, r4
 800f98a:	b29b      	uxth	r3, r3
 800f98c:	81fb      	strh	r3, [r7, #14]
   addrsel = ((uint32_t)ptr << 8) + WIZCHIP_TXBUF_BLOCK(sn);
 800f98e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f992:	021b      	lsls	r3, r3, #8
 800f994:	79fa      	ldrb	r2, [r7, #7]
 800f996:	0092      	lsls	r2, r2, #2
 800f998:	3202      	adds	r2, #2
 800f99a:	00d2      	lsls	r2, r2, #3
 800f99c:	4413      	add	r3, r2
 800f99e:	60bb      	str	r3, [r7, #8]
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800f9a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	6839      	ldr	r1, [r7, #0]
 800f9a8:	68b8      	ldr	r0, [r7, #8]
 800f9aa:	f7ff fef7 	bl	800f79c <WIZCHIP_WRITE_BUF>
   ptr += len;
 800f9ae:	89fa      	ldrh	r2, [r7, #14]
 800f9b0:	88bb      	ldrh	r3, [r7, #4]
 800f9b2:	4413      	add	r3, r2
 800f9b4:	b29b      	uxth	r3, r3
 800f9b6:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800f9b8:	79fb      	ldrb	r3, [r7, #7]
 800f9ba:	009b      	lsls	r3, r3, #2
 800f9bc:	3301      	adds	r3, #1
 800f9be:	00db      	lsls	r3, r3, #3
 800f9c0:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800f9c4:	461a      	mov	r2, r3
 800f9c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f9ca:	121b      	asrs	r3, r3, #8
 800f9cc:	b21b      	sxth	r3, r3
 800f9ce:	b2db      	uxtb	r3, r3
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	4610      	mov	r0, r2
 800f9d4:	f7ff fec2 	bl	800f75c <WIZCHIP_WRITE>
 800f9d8:	79fb      	ldrb	r3, [r7, #7]
 800f9da:	009b      	lsls	r3, r3, #2
 800f9dc:	3301      	adds	r3, #1
 800f9de:	00da      	lsls	r2, r3, #3
 800f9e0:	4b06      	ldr	r3, [pc, #24]	; (800f9fc <wiz_send_data+0xbc>)
 800f9e2:	4413      	add	r3, r2
 800f9e4:	461a      	mov	r2, r3
 800f9e6:	89fb      	ldrh	r3, [r7, #14]
 800f9e8:	b2db      	uxtb	r3, r3
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	4610      	mov	r0, r2
 800f9ee:	f7ff feb5 	bl	800f75c <WIZCHIP_WRITE>
}
 800f9f2:	bf00      	nop
 800f9f4:	3714      	adds	r7, #20
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd90      	pop	{r4, r7, pc}
 800f9fa:	bf00      	nop
 800f9fc:	00020d00 	.word	0x00020d00

0800fa00 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, datasize_t len)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b084      	sub	sp, #16
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	4603      	mov	r3, r0
 800fa08:	6039      	str	r1, [r7, #0]
 800fa0a:	71fb      	strb	r3, [r7, #7]
 800fa0c:	4613      	mov	r3, r2
 800fa0e:	80bb      	strh	r3, [r7, #4]
   datasize_t ptr = 0;
 800fa10:	2300      	movs	r3, #0
 800fa12:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800fa14:	2300      	movs	r3, #0
 800fa16:	60bb      	str	r3, [r7, #8]
   if(len == 0) return;
 800fa18:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d022      	beq.n	800fa66 <wiz_recv_data+0x66>
   //ptr = getSn_RX_RD(sn);
   ptr = getSn_RX_RD1(sn);
 800fa20:	79fb      	ldrb	r3, [r7, #7]
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7ff ff3a 	bl	800f89c <getSn_RX_RD1>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	81fb      	strh	r3, [r7, #14]
   addrsel = ((uint32_t)ptr << 8) + WIZCHIP_RXBUF_BLOCK(sn);
 800fa2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fa30:	021b      	lsls	r3, r3, #8
 800fa32:	79fa      	ldrb	r2, [r7, #7]
 800fa34:	0092      	lsls	r2, r2, #2
 800fa36:	3203      	adds	r2, #3
 800fa38:	00d2      	lsls	r2, r2, #3
 800fa3a:	4413      	add	r3, r2
 800fa3c:	60bb      	str	r3, [r7, #8]
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800fa3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fa42:	461a      	mov	r2, r3
 800fa44:	6839      	ldr	r1, [r7, #0]
 800fa46:	68b8      	ldr	r0, [r7, #8]
 800fa48:	f7ff feb9 	bl	800f7be <WIZCHIP_READ_BUF>
   ptr += len;
 800fa4c:	89fa      	ldrh	r2, [r7, #14]
 800fa4e:	88bb      	ldrh	r3, [r7, #4]
 800fa50:	4413      	add	r3, r2
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	81fb      	strh	r3, [r7, #14]
   //setSn_RX_RD(sn,ptr);
   setSn_RX_RD1(sn,ptr);
 800fa56:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fa5a:	79fb      	ldrb	r3, [r7, #7]
 800fa5c:	4611      	mov	r1, r2
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f7ff ff44 	bl	800f8ec <setSn_RX_RD1>
 800fa64:	e000      	b.n	800fa68 <wiz_recv_data+0x68>
   if(len == 0) return;
 800fa66:	bf00      	nop
}
 800fa68:	3710      	adds	r7, #16
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
	...

0800fa70 <socket>:
   }while(0);



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{ 
 800fa70:	b590      	push	{r4, r7, lr}
 800fa72:	b08d      	sub	sp, #52	; 0x34
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	4604      	mov	r4, r0
 800fa78:	4608      	mov	r0, r1
 800fa7a:	4611      	mov	r1, r2
 800fa7c:	461a      	mov	r2, r3
 800fa7e:	4623      	mov	r3, r4
 800fa80:	71fb      	strb	r3, [r7, #7]
 800fa82:	4603      	mov	r3, r0
 800fa84:	71bb      	strb	r3, [r7, #6]
 800fa86:	460b      	mov	r3, r1
 800fa88:	80bb      	strh	r3, [r7, #4]
 800fa8a:	4613      	mov	r3, r2
 800fa8c:	70fb      	strb	r3, [r7, #3]
   uint8_t taddr[16];
   uint16_t local_port=0;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	83fb      	strh	r3, [r7, #30]
   CHECK_SOCKNUM(); 
 800fa92:	79fb      	ldrb	r3, [r7, #7]
 800fa94:	2b07      	cmp	r3, #7
 800fa96:	d902      	bls.n	800fa9e <socket+0x2e>
 800fa98:	f04f 33ff 	mov.w	r3, #4294967295
 800fa9c:	e1d6      	b.n	800fe4c <socket+0x3dc>
   switch (protocol & 0x0F)
 800fa9e:	79bb      	ldrb	r3, [r7, #6]
 800faa0:	f003 030f 	and.w	r3, r3, #15
 800faa4:	2b01      	cmp	r3, #1
 800faa6:	d029      	beq.n	800fafc <socket+0x8c>
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	f340 80bf 	ble.w	800fc2c <socket+0x1bc>
 800faae:	2b0e      	cmp	r3, #14
 800fab0:	f300 80bc 	bgt.w	800fc2c <socket+0x1bc>
 800fab4:	2b02      	cmp	r3, #2
 800fab6:	f2c0 80b9 	blt.w	800fc2c <socket+0x1bc>
 800faba:	461a      	mov	r2, r3
 800fabc:	2301      	movs	r3, #1
 800fabe:	4093      	lsls	r3, r2
 800fac0:	f644 428c 	movw	r2, #19596	; 0x4c8c
 800fac4:	401a      	ands	r2, r3
 800fac6:	2a00      	cmp	r2, #0
 800fac8:	bf14      	ite	ne
 800faca:	2201      	movne	r2, #1
 800facc:	2200      	moveq	r2, #0
 800face:	b2d2      	uxtb	r2, r2
 800fad0:	2a00      	cmp	r2, #0
 800fad2:	f040 80ae 	bne.w	800fc32 <socket+0x1c2>
 800fad6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800fada:	2a00      	cmp	r2, #0
 800fadc:	bf14      	ite	ne
 800fade:	2201      	movne	r2, #1
 800fae0:	2200      	moveq	r2, #0
 800fae2:	b2d2      	uxtb	r2, r2
 800fae4:	2a00      	cmp	r2, #0
 800fae6:	d155      	bne.n	800fb94 <socket+0x124>
 800fae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800faec:	2b00      	cmp	r3, #0
 800faee:	bf14      	ite	ne
 800faf0:	2301      	movne	r3, #1
 800faf2:	2300      	moveq	r3, #0
 800faf4:	b2db      	uxtb	r3, r3
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d126      	bne.n	800fb48 <socket+0xd8>
 800fafa:	e097      	b.n	800fc2c <socket+0x1bc>
   {
      case Sn_MR_TCP4 :
         getSIPR(taddr);
 800fafc:	f107 030c 	add.w	r3, r7, #12
 800fb00:	2204      	movs	r2, #4
 800fb02:	4619      	mov	r1, r3
 800fb04:	4876      	ldr	r0, [pc, #472]	; (800fce0 <socket+0x270>)
 800fb06:	f7ff fe5a 	bl	800f7be <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 4);
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800fb0e:	2300      	movs	r3, #0
 800fb10:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800fb14:	e00e      	b.n	800fb34 <socket+0xc4>
 800fb16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fb1a:	3330      	adds	r3, #48	; 0x30
 800fb1c:	443b      	add	r3, r7
 800fb1e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800fb22:	b29a      	uxth	r2, r3
 800fb24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fb26:	4413      	add	r3, r2
 800fb28:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800fb2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fb2e:	3301      	adds	r3, #1
 800fb30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800fb34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fb38:	2b03      	cmp	r3, #3
 800fb3a:	d9ec      	bls.n	800fb16 <socket+0xa6>
 800fb3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d179      	bne.n	800fc36 <socket+0x1c6>
 800fb42:	f06f 030b 	mvn.w	r3, #11
 800fb46:	e181      	b.n	800fe4c <socket+0x3dc>
         break;
      case Sn_MR_TCP6 :
         getLLAR(taddr);
 800fb48:	f107 030c 	add.w	r3, r7, #12
 800fb4c:	2210      	movs	r2, #16
 800fb4e:	4619      	mov	r1, r3
 800fb50:	4864      	ldr	r0, [pc, #400]	; (800fce4 <socket+0x274>)
 800fb52:	f7ff fe34 	bl	800f7be <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 16);
 800fb56:	2300      	movs	r3, #0
 800fb58:	857b      	strh	r3, [r7, #42]	; 0x2a
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800fb60:	e00e      	b.n	800fb80 <socket+0x110>
 800fb62:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fb66:	3330      	adds	r3, #48	; 0x30
 800fb68:	443b      	add	r3, r7
 800fb6a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800fb6e:	b29a      	uxth	r2, r3
 800fb70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fb72:	4413      	add	r3, r2
 800fb74:	857b      	strh	r3, [r7, #42]	; 0x2a
 800fb76:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fb7a:	3301      	adds	r3, #1
 800fb7c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800fb80:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fb84:	2b0f      	cmp	r3, #15
 800fb86:	d9ec      	bls.n	800fb62 <socket+0xf2>
 800fb88:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d155      	bne.n	800fc3a <socket+0x1ca>
 800fb8e:	f06f 030b 	mvn.w	r3, #11
 800fb92:	e15b      	b.n	800fe4c <socket+0x3dc>
         //getGUAR(taddr);
         //CHECK_IPZERO(taddr, 16);
         break;
      case Sn_MR_TCPD :  
         getSIPR(taddr);
 800fb94:	f107 030c 	add.w	r3, r7, #12
 800fb98:	2204      	movs	r2, #4
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	4850      	ldr	r0, [pc, #320]	; (800fce0 <socket+0x270>)
 800fb9e:	f7ff fe0e 	bl	800f7be <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 4);
 800fba2:	2300      	movs	r3, #0
 800fba4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fba6:	2300      	movs	r3, #0
 800fba8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fbac:	e00e      	b.n	800fbcc <socket+0x15c>
 800fbae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800fbb2:	3330      	adds	r3, #48	; 0x30
 800fbb4:	443b      	add	r3, r7
 800fbb6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800fbba:	b29a      	uxth	r2, r3
 800fbbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fbbe:	4413      	add	r3, r2
 800fbc0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fbc2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fbcc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800fbd0:	2b03      	cmp	r3, #3
 800fbd2:	d9ec      	bls.n	800fbae <socket+0x13e>
 800fbd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d102      	bne.n	800fbe0 <socket+0x170>
 800fbda:	f06f 030b 	mvn.w	r3, #11
 800fbde:	e135      	b.n	800fe4c <socket+0x3dc>
         getLLAR(taddr);
 800fbe0:	f107 030c 	add.w	r3, r7, #12
 800fbe4:	2210      	movs	r2, #16
 800fbe6:	4619      	mov	r1, r3
 800fbe8:	483e      	ldr	r0, [pc, #248]	; (800fce4 <socket+0x274>)
 800fbea:	f7ff fde8 	bl	800f7be <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 16);
 800fbee:	2300      	movs	r3, #0
 800fbf0:	847b      	strh	r3, [r7, #34]	; 0x22
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800fbf8:	e00e      	b.n	800fc18 <socket+0x1a8>
 800fbfa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fbfe:	3330      	adds	r3, #48	; 0x30
 800fc00:	443b      	add	r3, r7
 800fc02:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800fc06:	b29a      	uxth	r2, r3
 800fc08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc0a:	4413      	add	r3, r2
 800fc0c:	847b      	strh	r3, [r7, #34]	; 0x22
 800fc0e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fc12:	3301      	adds	r3, #1
 800fc14:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800fc18:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fc1c:	2b0f      	cmp	r3, #15
 800fc1e:	d9ec      	bls.n	800fbfa <socket+0x18a>
 800fc20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d10b      	bne.n	800fc3e <socket+0x1ce>
 800fc26:	f06f 030b 	mvn.w	r3, #11
 800fc2a:	e10f      	b.n	800fe4c <socket+0x3dc>
      case Sn_MR_MACRAW :
      case Sn_MR_IPRAW4 :
      case Sn_MR_IPRAW6 :
         break; 
      default :
        return SOCKERR_SOCKMODE;
 800fc2c:	f06f 0304 	mvn.w	r3, #4
 800fc30:	e10c      	b.n	800fe4c <socket+0x3dc>
         break; 
 800fc32:	bf00      	nop
 800fc34:	e004      	b.n	800fc40 <socket+0x1d0>
         break;
 800fc36:	bf00      	nop
 800fc38:	e002      	b.n	800fc40 <socket+0x1d0>
         break;
 800fc3a:	bf00      	nop
 800fc3c:	e000      	b.n	800fc40 <socket+0x1d0>
         break;
 800fc3e:	bf00      	nop
   } 

   if((flag & 0x04)) return SOCKERR_SOCKFLAG;
 800fc40:	78fb      	ldrb	r3, [r7, #3]
 800fc42:	f003 0304 	and.w	r3, r3, #4
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d002      	beq.n	800fc50 <socket+0x1e0>
 800fc4a:	f06f 0305 	mvn.w	r3, #5
 800fc4e:	e0fd      	b.n	800fe4c <socket+0x3dc>
   if(flag != 0)
 800fc50:	78fb      	ldrb	r3, [r7, #3]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d049      	beq.n	800fcea <socket+0x27a>
   {
      switch(protocol)
 800fc56:	79bb      	ldrb	r3, [r7, #6]
 800fc58:	2b0d      	cmp	r3, #13
 800fc5a:	bf8c      	ite	hi
 800fc5c:	2201      	movhi	r2, #1
 800fc5e:	2200      	movls	r2, #0
 800fc60:	b2d2      	uxtb	r2, r2
 800fc62:	2a00      	cmp	r2, #0
 800fc64:	d135      	bne.n	800fcd2 <socket+0x262>
 800fc66:	2201      	movs	r2, #1
 800fc68:	fa02 f303 	lsl.w	r3, r2, r3
 800fc6c:	f242 2202 	movw	r2, #8706	; 0x2202
 800fc70:	401a      	ands	r2, r3
 800fc72:	2a00      	cmp	r2, #0
 800fc74:	bf14      	ite	ne
 800fc76:	2201      	movne	r2, #1
 800fc78:	2200      	moveq	r2, #0
 800fc7a:	b2d2      	uxtb	r2, r2
 800fc7c:	2a00      	cmp	r2, #0
 800fc7e:	d11a      	bne.n	800fcb6 <socket+0x246>
 800fc80:	f640 0208 	movw	r2, #2056	; 0x808
 800fc84:	401a      	ands	r2, r3
 800fc86:	2a00      	cmp	r2, #0
 800fc88:	bf14      	ite	ne
 800fc8a:	2201      	movne	r2, #1
 800fc8c:	2200      	moveq	r2, #0
 800fc8e:	b2d2      	uxtb	r2, r2
 800fc90:	2a00      	cmp	r2, #0
 800fc92:	d118      	bne.n	800fcc6 <socket+0x256>
 800fc94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	bf14      	ite	ne
 800fc9c:	2301      	movne	r3, #1
 800fc9e:	2300      	moveq	r3, #0
 800fca0:	b2db      	uxtb	r3, r3
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d015      	beq.n	800fcd2 <socket+0x262>
      {
         case Sn_MR_MACRAW:
            if((flag & (SF_DHA_MANUAL | SF_FORCE_ARP)) != 0)
 800fca6:	78fb      	ldrb	r3, [r7, #3]
 800fca8:	f003 0303 	and.w	r3, r3, #3
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d012      	beq.n	800fcd6 <socket+0x266>
            	return SOCKERR_SOCKFLAG;
 800fcb0:	f06f 0305 	mvn.w	r3, #5
 800fcb4:	e0ca      	b.n	800fe4c <socket+0x3dc>
            break;
         case Sn_MR_TCP4:
         case Sn_MR_TCP6:
         case Sn_MR_TCPD:     
            if((flag & (SF_MULTI_ENABLE | SF_UNI_BLOCK)) !=0)
 800fcb6:	78fb      	ldrb	r3, [r7, #3]
 800fcb8:	f003 0390 	and.w	r3, r3, #144	; 0x90
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d00c      	beq.n	800fcda <socket+0x26a>
            	return SOCKERR_SOCKFLAG;
 800fcc0:	f06f 0305 	mvn.w	r3, #5
 800fcc4:	e0c2      	b.n	800fe4c <socket+0x3dc>
            break;
         case Sn_MR_IPRAW4:
         case Sn_MR_IPRAW6:
            if(flag !=0)
 800fcc6:	78fb      	ldrb	r3, [r7, #3]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d00d      	beq.n	800fce8 <socket+0x278>
            	return SOCKERR_SOCKFLAG;
 800fccc:	f06f 0305 	mvn.w	r3, #5
 800fcd0:	e0bc      	b.n	800fe4c <socket+0x3dc>
            break;
         default:
            break;
 800fcd2:	bf00      	nop
 800fcd4:	e009      	b.n	800fcea <socket+0x27a>
            break;
 800fcd6:	bf00      	nop
 800fcd8:	e007      	b.n	800fcea <socket+0x27a>
            break;
 800fcda:	bf00      	nop
 800fcdc:	e005      	b.n	800fcea <socket+0x27a>
 800fcde:	bf00      	nop
 800fce0:	00413800 	.word	0x00413800
 800fce4:	00414000 	.word	0x00414000
            break;
 800fce8:	bf00      	nop
      }
   }
   close(sn);
 800fcea:	79fb      	ldrb	r3, [r7, #7]
 800fcec:	4618      	mov	r0, r3
 800fcee:	f000 f8bd 	bl	800fe6c <close>
   setSn_MR(sn,(protocol | (flag & 0xF0)));
 800fcf2:	79fb      	ldrb	r3, [r7, #7]
 800fcf4:	009b      	lsls	r3, r3, #2
 800fcf6:	3301      	adds	r3, #1
 800fcf8:	00db      	lsls	r3, r3, #3
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fd00:	f023 030f 	bic.w	r3, r3, #15
 800fd04:	b25a      	sxtb	r2, r3
 800fd06:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800fd0a:	4313      	orrs	r3, r2
 800fd0c:	b25b      	sxtb	r3, r3
 800fd0e:	b2db      	uxtb	r3, r3
 800fd10:	4619      	mov	r1, r3
 800fd12:	f7ff fd23 	bl	800f75c <WIZCHIP_WRITE>
   setSn_MR2(sn, flag & 0x03);  
 800fd16:	79fb      	ldrb	r3, [r7, #7]
 800fd18:	009b      	lsls	r3, r3, #2
 800fd1a:	3301      	adds	r3, #1
 800fd1c:	00db      	lsls	r3, r3, #3
 800fd1e:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 800fd22:	461a      	mov	r2, r3
 800fd24:	78fb      	ldrb	r3, [r7, #3]
 800fd26:	f003 0303 	and.w	r3, r3, #3
 800fd2a:	b2db      	uxtb	r3, r3
 800fd2c:	4619      	mov	r1, r3
 800fd2e:	4610      	mov	r0, r2
 800fd30:	f7ff fd14 	bl	800f75c <WIZCHIP_WRITE>
   if(!port)
 800fd34:	88bb      	ldrh	r3, [r7, #4]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d110      	bne.n	800fd5c <socket+0x2ec>
   {
      port = sock_any_port++;
 800fd3a:	4b46      	ldr	r3, [pc, #280]	; (800fe54 <socket+0x3e4>)
 800fd3c:	881b      	ldrh	r3, [r3, #0]
 800fd3e:	1c5a      	adds	r2, r3, #1
 800fd40:	b291      	uxth	r1, r2
 800fd42:	4a44      	ldr	r2, [pc, #272]	; (800fe54 <socket+0x3e4>)
 800fd44:	8011      	strh	r1, [r2, #0]
 800fd46:	80bb      	strh	r3, [r7, #4]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800fd48:	4b42      	ldr	r3, [pc, #264]	; (800fe54 <socket+0x3e4>)
 800fd4a:	881b      	ldrh	r3, [r3, #0]
 800fd4c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800fd50:	4293      	cmp	r3, r2
 800fd52:	d103      	bne.n	800fd5c <socket+0x2ec>
 800fd54:	4b3f      	ldr	r3, [pc, #252]	; (800fe54 <socket+0x3e4>)
 800fd56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fd5a:	801a      	strh	r2, [r3, #0]
   }
   setSn_PORTR(sn,port);
 800fd5c:	79fb      	ldrb	r3, [r7, #7]
 800fd5e:	009b      	lsls	r3, r3, #2
 800fd60:	3301      	adds	r3, #1
 800fd62:	00db      	lsls	r3, r3, #3
 800fd64:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 800fd68:	461a      	mov	r2, r3
 800fd6a:	88bb      	ldrh	r3, [r7, #4]
 800fd6c:	0a1b      	lsrs	r3, r3, #8
 800fd6e:	b29b      	uxth	r3, r3
 800fd70:	b2db      	uxtb	r3, r3
 800fd72:	4619      	mov	r1, r3
 800fd74:	4610      	mov	r0, r2
 800fd76:	f7ff fcf1 	bl	800f75c <WIZCHIP_WRITE>
 800fd7a:	79fb      	ldrb	r3, [r7, #7]
 800fd7c:	009b      	lsls	r3, r3, #2
 800fd7e:	3301      	adds	r3, #1
 800fd80:	00da      	lsls	r2, r3, #3
 800fd82:	4b35      	ldr	r3, [pc, #212]	; (800fe58 <socket+0x3e8>)
 800fd84:	4413      	add	r3, r2
 800fd86:	461a      	mov	r2, r3
 800fd88:	88bb      	ldrh	r3, [r7, #4]
 800fd8a:	b2db      	uxtb	r3, r3
 800fd8c:	4619      	mov	r1, r3
 800fd8e:	4610      	mov	r0, r2
 800fd90:	f7ff fce4 	bl	800f75c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800fd94:	79fb      	ldrb	r3, [r7, #7]
 800fd96:	009b      	lsls	r3, r3, #2
 800fd98:	3301      	adds	r3, #1
 800fd9a:	00db      	lsls	r3, r3, #3
 800fd9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fda0:	2101      	movs	r1, #1
 800fda2:	4618      	mov	r0, r3
 800fda4:	f7ff fcda 	bl	800f75c <WIZCHIP_WRITE>

   while(getSn_CR(sn));
 800fda8:	bf00      	nop
 800fdaa:	79fb      	ldrb	r3, [r7, #7]
 800fdac:	009b      	lsls	r3, r3, #2
 800fdae:	3301      	adds	r3, #1
 800fdb0:	00db      	lsls	r3, r3, #3
 800fdb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7ff fce0 	bl	800f77c <WIZCHIP_READ>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d1f3      	bne.n	800fdaa <socket+0x33a>

   sock_io_mode &= ~(1 <<sn);
 800fdc2:	79fb      	ldrb	r3, [r7, #7]
 800fdc4:	2201      	movs	r2, #1
 800fdc6:	fa02 f303 	lsl.w	r3, r2, r3
 800fdca:	b21b      	sxth	r3, r3
 800fdcc:	43db      	mvns	r3, r3
 800fdce:	b21a      	sxth	r2, r3
 800fdd0:	4b22      	ldr	r3, [pc, #136]	; (800fe5c <socket+0x3ec>)
 800fdd2:	881b      	ldrh	r3, [r3, #0]
 800fdd4:	b21b      	sxth	r3, r3
 800fdd6:	4013      	ands	r3, r2
 800fdd8:	b21b      	sxth	r3, r3
 800fdda:	b29a      	uxth	r2, r3
 800fddc:	4b1f      	ldr	r3, [pc, #124]	; (800fe5c <socket+0x3ec>)
 800fdde:	801a      	strh	r2, [r3, #0]
   sock_io_mode |= ((flag & (SF_IO_NONBLOCK>>3)) << sn);
 800fde0:	78fb      	ldrb	r3, [r7, #3]
 800fde2:	f003 0201 	and.w	r2, r3, #1
 800fde6:	79fb      	ldrb	r3, [r7, #7]
 800fde8:	fa02 f303 	lsl.w	r3, r2, r3
 800fdec:	b21a      	sxth	r2, r3
 800fdee:	4b1b      	ldr	r3, [pc, #108]	; (800fe5c <socket+0x3ec>)
 800fdf0:	881b      	ldrh	r3, [r3, #0]
 800fdf2:	b21b      	sxth	r3, r3
 800fdf4:	4313      	orrs	r3, r2
 800fdf6:	b21b      	sxth	r3, r3
 800fdf8:	b29a      	uxth	r2, r3
 800fdfa:	4b18      	ldr	r3, [pc, #96]	; (800fe5c <socket+0x3ec>)
 800fdfc:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800fdfe:	79fb      	ldrb	r3, [r7, #7]
 800fe00:	2201      	movs	r2, #1
 800fe02:	fa02 f303 	lsl.w	r3, r2, r3
 800fe06:	b21b      	sxth	r3, r3
 800fe08:	43db      	mvns	r3, r3
 800fe0a:	b21a      	sxth	r2, r3
 800fe0c:	4b14      	ldr	r3, [pc, #80]	; (800fe60 <socket+0x3f0>)
 800fe0e:	881b      	ldrh	r3, [r3, #0]
 800fe10:	b21b      	sxth	r3, r3
 800fe12:	4013      	ands	r3, r2
 800fe14:	b21b      	sxth	r3, r3
 800fe16:	b29a      	uxth	r2, r3
 800fe18:	4b11      	ldr	r3, [pc, #68]	; (800fe60 <socket+0x3f0>)
 800fe1a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800fe1c:	79fb      	ldrb	r3, [r7, #7]
 800fe1e:	4a11      	ldr	r2, [pc, #68]	; (800fe64 <socket+0x3f4>)
 800fe20:	2100      	movs	r1, #0
 800fe22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 800fe26:	79fb      	ldrb	r3, [r7, #7]
 800fe28:	4a0f      	ldr	r2, [pc, #60]	; (800fe68 <socket+0x3f8>)
 800fe2a:	2100      	movs	r1, #0
 800fe2c:	54d1      	strb	r1, [r2, r3]

   while(getSn_SR(sn) == SOCK_CLOSED) ;
 800fe2e:	bf00      	nop
 800fe30:	79fb      	ldrb	r3, [r7, #7]
 800fe32:	009b      	lsls	r3, r3, #2
 800fe34:	3301      	adds	r3, #1
 800fe36:	00db      	lsls	r3, r3, #3
 800fe38:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7ff fc9d 	bl	800f77c <WIZCHIP_READ>
 800fe42:	4603      	mov	r3, r0
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d0f3      	beq.n	800fe30 <socket+0x3c0>
//   printf("[%d]%d\r\n", sn, getSn_PORTR(sn));
   return sn;
 800fe48:	f997 3007 	ldrsb.w	r3, [r7, #7]
}  
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3734      	adds	r7, #52	; 0x34
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd90      	pop	{r4, r7, pc}
 800fe54:	24000094 	.word	0x24000094
 800fe58:	00011500 	.word	0x00011500
 800fe5c:	24015da6 	.word	0x24015da6
 800fe60:	24015da8 	.word	0x24015da8
 800fe64:	24015dac 	.word	0x24015dac
 800fe68:	24015dbc 	.word	0x24015dbc

0800fe6c <close>:


int8_t close(uint8_t sn)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b082      	sub	sp, #8
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	4603      	mov	r3, r0
 800fe74:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800fe76:	79fb      	ldrb	r3, [r7, #7]
 800fe78:	2b07      	cmp	r3, #7
 800fe7a:	d902      	bls.n	800fe82 <close+0x16>
 800fe7c:	f04f 33ff 	mov.w	r3, #4294967295
 800fe80:	e055      	b.n	800ff2e <close+0xc2>
   setSn_CR(sn,Sn_CR_CLOSE);
 800fe82:	79fb      	ldrb	r3, [r7, #7]
 800fe84:	009b      	lsls	r3, r3, #2
 800fe86:	3301      	adds	r3, #1
 800fe88:	00db      	lsls	r3, r3, #3
 800fe8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe8e:	2110      	movs	r1, #16
 800fe90:	4618      	mov	r0, r3
 800fe92:	f7ff fc63 	bl	800f75c <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 800fe96:	bf00      	nop
 800fe98:	79fb      	ldrb	r3, [r7, #7]
 800fe9a:	009b      	lsls	r3, r3, #2
 800fe9c:	3301      	adds	r3, #1
 800fe9e:	00db      	lsls	r3, r3, #3
 800fea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fea4:	4618      	mov	r0, r3
 800fea6:	f7ff fc69 	bl	800f77c <WIZCHIP_READ>
 800feaa:	4603      	mov	r3, r0
 800feac:	2b00      	cmp	r3, #0
 800feae:	d1f3      	bne.n	800fe98 <close+0x2c>
   /* clear all interrupt of SOCKETn. */
   setSn_IRCLR(sn, 0xFF);
 800feb0:	79fb      	ldrb	r3, [r7, #7]
 800feb2:	009b      	lsls	r3, r3, #2
 800feb4:	3301      	adds	r3, #1
 800feb6:	00db      	lsls	r3, r3, #3
 800feb8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800febc:	21ff      	movs	r1, #255	; 0xff
 800febe:	4618      	mov	r0, r3
 800fec0:	f7ff fc4c 	bl	800f75c <WIZCHIP_WRITE>
   /* Release the sock_io_mode of SOCKETn. */
   sock_io_mode &= ~(1<<sn); 
 800fec4:	79fb      	ldrb	r3, [r7, #7]
 800fec6:	2201      	movs	r2, #1
 800fec8:	fa02 f303 	lsl.w	r3, r2, r3
 800fecc:	b21b      	sxth	r3, r3
 800fece:	43db      	mvns	r3, r3
 800fed0:	b21a      	sxth	r2, r3
 800fed2:	4b19      	ldr	r3, [pc, #100]	; (800ff38 <close+0xcc>)
 800fed4:	881b      	ldrh	r3, [r3, #0]
 800fed6:	b21b      	sxth	r3, r3
 800fed8:	4013      	ands	r3, r2
 800feda:	b21b      	sxth	r3, r3
 800fedc:	b29a      	uxth	r2, r3
 800fede:	4b16      	ldr	r3, [pc, #88]	; (800ff38 <close+0xcc>)
 800fee0:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800fee2:	79fb      	ldrb	r3, [r7, #7]
 800fee4:	4a15      	ldr	r2, [pc, #84]	; (800ff3c <close+0xd0>)
 800fee6:	2100      	movs	r1, #0
 800fee8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_is_sending &= ~(1<<sn);
 800feec:	79fb      	ldrb	r3, [r7, #7]
 800feee:	2201      	movs	r2, #1
 800fef0:	fa02 f303 	lsl.w	r3, r2, r3
 800fef4:	b21b      	sxth	r3, r3
 800fef6:	43db      	mvns	r3, r3
 800fef8:	b21a      	sxth	r2, r3
 800fefa:	4b11      	ldr	r3, [pc, #68]	; (800ff40 <close+0xd4>)
 800fefc:	881b      	ldrh	r3, [r3, #0]
 800fefe:	b21b      	sxth	r3, r3
 800ff00:	4013      	ands	r3, r2
 800ff02:	b21b      	sxth	r3, r3
 800ff04:	b29a      	uxth	r2, r3
 800ff06:	4b0e      	ldr	r3, [pc, #56]	; (800ff40 <close+0xd4>)
 800ff08:	801a      	strh	r2, [r3, #0]
   sock_pack_info[sn] = PACK_NONE;
 800ff0a:	79fb      	ldrb	r3, [r7, #7]
 800ff0c:	4a0d      	ldr	r2, [pc, #52]	; (800ff44 <close+0xd8>)
 800ff0e:	2100      	movs	r1, #0
 800ff10:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) != SOCK_CLOSED);
 800ff12:	bf00      	nop
 800ff14:	79fb      	ldrb	r3, [r7, #7]
 800ff16:	009b      	lsls	r3, r3, #2
 800ff18:	3301      	adds	r3, #1
 800ff1a:	00db      	lsls	r3, r3, #3
 800ff1c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ff20:	4618      	mov	r0, r3
 800ff22:	f7ff fc2b 	bl	800f77c <WIZCHIP_READ>
 800ff26:	4603      	mov	r3, r0
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d1f3      	bne.n	800ff14 <close+0xa8>
   return SOCK_OK;
 800ff2c:	2301      	movs	r3, #1
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3708      	adds	r7, #8
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}
 800ff36:	bf00      	nop
 800ff38:	24015da6 	.word	0x24015da6
 800ff3c:	24015dac 	.word	0x24015dac
 800ff40:	24015da8 	.word	0x24015da8
 800ff44:	24015dbc 	.word	0x24015dbc

0800ff48 <listen>:


int8_t listen(uint8_t sn)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b082      	sub	sp, #8
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	4603      	mov	r3, r0
 800ff50:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800ff52:	79fb      	ldrb	r3, [r7, #7]
 800ff54:	2b07      	cmp	r3, #7
 800ff56:	d902      	bls.n	800ff5e <listen+0x16>
 800ff58:	f04f 33ff 	mov.w	r3, #4294967295
 800ff5c:	e03a      	b.n	800ffd4 <listen+0x8c>
   CHECK_SOCKINIT();
 800ff5e:	79fb      	ldrb	r3, [r7, #7]
 800ff60:	009b      	lsls	r3, r3, #2
 800ff62:	3301      	adds	r3, #1
 800ff64:	00db      	lsls	r3, r3, #3
 800ff66:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f7ff fc06 	bl	800f77c <WIZCHIP_READ>
 800ff70:	4603      	mov	r3, r0
 800ff72:	2b13      	cmp	r3, #19
 800ff74:	d002      	beq.n	800ff7c <listen+0x34>
 800ff76:	f06f 0302 	mvn.w	r3, #2
 800ff7a:	e02b      	b.n	800ffd4 <listen+0x8c>
   setSn_CR(sn,Sn_CR_LISTEN);
 800ff7c:	79fb      	ldrb	r3, [r7, #7]
 800ff7e:	009b      	lsls	r3, r3, #2
 800ff80:	3301      	adds	r3, #1
 800ff82:	00db      	lsls	r3, r3, #3
 800ff84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff88:	2102      	movs	r1, #2
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f7ff fbe6 	bl	800f75c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800ff90:	bf00      	nop
 800ff92:	79fb      	ldrb	r3, [r7, #7]
 800ff94:	009b      	lsls	r3, r3, #2
 800ff96:	3301      	adds	r3, #1
 800ff98:	00db      	lsls	r3, r3, #3
 800ff9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7ff fbec 	bl	800f77c <WIZCHIP_READ>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d1f3      	bne.n	800ff92 <listen+0x4a>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800ffaa:	e006      	b.n	800ffba <listen+0x72>
   {
      close(sn);
 800ffac:	79fb      	ldrb	r3, [r7, #7]
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7ff ff5c 	bl	800fe6c <close>
      return SOCKERR_SOCKCLOSED;
 800ffb4:	f06f 0303 	mvn.w	r3, #3
 800ffb8:	e00c      	b.n	800ffd4 <listen+0x8c>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800ffba:	79fb      	ldrb	r3, [r7, #7]
 800ffbc:	009b      	lsls	r3, r3, #2
 800ffbe:	3301      	adds	r3, #1
 800ffc0:	00db      	lsls	r3, r3, #3
 800ffc2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f7ff fbd8 	bl	800f77c <WIZCHIP_READ>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	2b14      	cmp	r3, #20
 800ffd0:	d1ec      	bne.n	800ffac <listen+0x64>
   }
   return SOCK_OK;
 800ffd2:	2301      	movs	r3, #1
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3708      	adds	r7, #8
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}

0800ffdc <connect>:


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port, uint8_t addrlen)
{ 
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b084      	sub	sp, #16
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6039      	str	r1, [r7, #0]
 800ffe4:	4611      	mov	r1, r2
 800ffe6:	461a      	mov	r2, r3
 800ffe8:	4603      	mov	r3, r0
 800ffea:	71fb      	strb	r3, [r7, #7]
 800ffec:	460b      	mov	r3, r1
 800ffee:	80bb      	strh	r3, [r7, #4]
 800fff0:	4613      	mov	r3, r2
 800fff2:	71bb      	strb	r3, [r7, #6]

   CHECK_SOCKNUM();
 800fff4:	79fb      	ldrb	r3, [r7, #7]
 800fff6:	2b07      	cmp	r3, #7
 800fff8:	d902      	bls.n	8010000 <connect+0x24>
 800fffa:	f04f 33ff 	mov.w	r3, #4294967295
 800fffe:	e0f3      	b.n	80101e8 <connect+0x20c>
   CHECK_TCPMODE();
 8010000:	79fb      	ldrb	r3, [r7, #7]
 8010002:	009b      	lsls	r3, r3, #2
 8010004:	3301      	adds	r3, #1
 8010006:	00db      	lsls	r3, r3, #3
 8010008:	4618      	mov	r0, r3
 801000a:	f7ff fbb7 	bl	800f77c <WIZCHIP_READ>
 801000e:	4603      	mov	r3, r0
 8010010:	f003 0303 	and.w	r3, r3, #3
 8010014:	2b01      	cmp	r3, #1
 8010016:	d002      	beq.n	801001e <connect+0x42>
 8010018:	f06f 0304 	mvn.w	r3, #4
 801001c:	e0e4      	b.n	80101e8 <connect+0x20c>
   CHECK_SOCKINIT();
 801001e:	79fb      	ldrb	r3, [r7, #7]
 8010020:	009b      	lsls	r3, r3, #2
 8010022:	3301      	adds	r3, #1
 8010024:	00db      	lsls	r3, r3, #3
 8010026:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801002a:	4618      	mov	r0, r3
 801002c:	f7ff fba6 	bl	800f77c <WIZCHIP_READ>
 8010030:	4603      	mov	r3, r0
 8010032:	2b13      	cmp	r3, #19
 8010034:	d002      	beq.n	801003c <connect+0x60>
 8010036:	f06f 0302 	mvn.w	r3, #2
 801003a:	e0d5      	b.n	80101e8 <connect+0x20c>
  
   CHECK_IPZERO(addr, addrlen);
 801003c:	2300      	movs	r3, #0
 801003e:	81fb      	strh	r3, [r7, #14]
 8010040:	2300      	movs	r3, #0
 8010042:	737b      	strb	r3, [r7, #13]
 8010044:	e00a      	b.n	801005c <connect+0x80>
 8010046:	7b7b      	ldrb	r3, [r7, #13]
 8010048:	683a      	ldr	r2, [r7, #0]
 801004a:	4413      	add	r3, r2
 801004c:	781b      	ldrb	r3, [r3, #0]
 801004e:	b29a      	uxth	r2, r3
 8010050:	89fb      	ldrh	r3, [r7, #14]
 8010052:	4413      	add	r3, r2
 8010054:	81fb      	strh	r3, [r7, #14]
 8010056:	7b7b      	ldrb	r3, [r7, #13]
 8010058:	3301      	adds	r3, #1
 801005a:	737b      	strb	r3, [r7, #13]
 801005c:	7b7a      	ldrb	r2, [r7, #13]
 801005e:	79bb      	ldrb	r3, [r7, #6]
 8010060:	429a      	cmp	r2, r3
 8010062:	d3f0      	bcc.n	8010046 <connect+0x6a>
 8010064:	89fb      	ldrh	r3, [r7, #14]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d102      	bne.n	8010070 <connect+0x94>
 801006a:	f06f 030b 	mvn.w	r3, #11
 801006e:	e0bb      	b.n	80101e8 <connect+0x20c>
   if(port == 0)
 8010070:	88bb      	ldrh	r3, [r7, #4]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d102      	bne.n	801007c <connect+0xa0>
	   return SOCKERR_PORTZERO;
 8010076:	f06f 030a 	mvn.w	r3, #10
 801007a:	e0b5      	b.n	80101e8 <connect+0x20c>

   setSn_DPORTR(sn, port);
 801007c:	79fb      	ldrb	r3, [r7, #7]
 801007e:	009b      	lsls	r3, r3, #2
 8010080:	3301      	adds	r3, #1
 8010082:	00db      	lsls	r3, r3, #3
 8010084:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
 8010088:	461a      	mov	r2, r3
 801008a:	88bb      	ldrh	r3, [r7, #4]
 801008c:	0a1b      	lsrs	r3, r3, #8
 801008e:	b29b      	uxth	r3, r3
 8010090:	b2db      	uxtb	r3, r3
 8010092:	4619      	mov	r1, r3
 8010094:	4610      	mov	r0, r2
 8010096:	f7ff fb61 	bl	800f75c <WIZCHIP_WRITE>
 801009a:	79fb      	ldrb	r3, [r7, #7]
 801009c:	009b      	lsls	r3, r3, #2
 801009e:	3301      	adds	r3, #1
 80100a0:	00da      	lsls	r2, r3, #3
 80100a2:	4b53      	ldr	r3, [pc, #332]	; (80101f0 <connect+0x214>)
 80100a4:	4413      	add	r3, r2
 80100a6:	461a      	mov	r2, r3
 80100a8:	88bb      	ldrh	r3, [r7, #4]
 80100aa:	b2db      	uxtb	r3, r3
 80100ac:	4619      	mov	r1, r3
 80100ae:	4610      	mov	r0, r2
 80100b0:	f7ff fb54 	bl	800f75c <WIZCHIP_WRITE>
  
   if (addrlen == 16)     // addrlen=16, Sn_MR_TCP6(1001), Sn_MR_TCPD(1101))
 80100b4:	79bb      	ldrb	r3, [r7, #6]
 80100b6:	2b10      	cmp	r3, #16
 80100b8:	d124      	bne.n	8010104 <connect+0x128>
   {
      if( getSn_MR(sn) & 0x08)  
 80100ba:	79fb      	ldrb	r3, [r7, #7]
 80100bc:	009b      	lsls	r3, r3, #2
 80100be:	3301      	adds	r3, #1
 80100c0:	00db      	lsls	r3, r3, #3
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7ff fb5a 	bl	800f77c <WIZCHIP_READ>
 80100c8:	4603      	mov	r3, r0
 80100ca:	f003 0308 	and.w	r3, r3, #8
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d015      	beq.n	80100fe <connect+0x122>
      {
         setSn_DIP6R(sn,addr);
 80100d2:	79fb      	ldrb	r3, [r7, #7]
 80100d4:	009b      	lsls	r3, r3, #2
 80100d6:	3301      	adds	r3, #1
 80100d8:	00db      	lsls	r3, r3, #3
 80100da:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 80100de:	2210      	movs	r2, #16
 80100e0:	6839      	ldr	r1, [r7, #0]
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7ff fb5a 	bl	800f79c <WIZCHIP_WRITE_BUF>
         setSn_CR(sn,Sn_CR_CONNECT6);
 80100e8:	79fb      	ldrb	r3, [r7, #7]
 80100ea:	009b      	lsls	r3, r3, #2
 80100ec:	3301      	adds	r3, #1
 80100ee:	00db      	lsls	r3, r3, #3
 80100f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80100f4:	2184      	movs	r1, #132	; 0x84
 80100f6:	4618      	mov	r0, r3
 80100f8:	f7ff fb30 	bl	800f75c <WIZCHIP_WRITE>
 80100fc:	e024      	b.n	8010148 <connect+0x16c>
      }
      else return SOCKERR_SOCKMODE;
 80100fe:	f06f 0304 	mvn.w	r3, #4
 8010102:	e071      	b.n	80101e8 <connect+0x20c>
   } 
   else           // addrlen=4, Sn_MR_TCP4(0001), Sn_MR_TCPD(1101)
   {
      if(getSn_MR(sn) == Sn_MR_TCP6) return SOCKERR_SOCKMODE;
 8010104:	79fb      	ldrb	r3, [r7, #7]
 8010106:	009b      	lsls	r3, r3, #2
 8010108:	3301      	adds	r3, #1
 801010a:	00db      	lsls	r3, r3, #3
 801010c:	4618      	mov	r0, r3
 801010e:	f7ff fb35 	bl	800f77c <WIZCHIP_READ>
 8010112:	4603      	mov	r3, r0
 8010114:	2b09      	cmp	r3, #9
 8010116:	d102      	bne.n	801011e <connect+0x142>
 8010118:	f06f 0304 	mvn.w	r3, #4
 801011c:	e064      	b.n	80101e8 <connect+0x20c>
      setSn_DIPR(sn,addr);
 801011e:	79fb      	ldrb	r3, [r7, #7]
 8010120:	009b      	lsls	r3, r3, #2
 8010122:	3301      	adds	r3, #1
 8010124:	00db      	lsls	r3, r3, #3
 8010126:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 801012a:	2204      	movs	r2, #4
 801012c:	6839      	ldr	r1, [r7, #0]
 801012e:	4618      	mov	r0, r3
 8010130:	f7ff fb34 	bl	800f79c <WIZCHIP_WRITE_BUF>
      setSn_CR(sn,Sn_CR_CONNECT);
 8010134:	79fb      	ldrb	r3, [r7, #7]
 8010136:	009b      	lsls	r3, r3, #2
 8010138:	3301      	adds	r3, #1
 801013a:	00db      	lsls	r3, r3, #3
 801013c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010140:	2104      	movs	r1, #4
 8010142:	4618      	mov	r0, r3
 8010144:	f7ff fb0a 	bl	800f75c <WIZCHIP_WRITE>
   }
   while(getSn_CR(sn));
 8010148:	bf00      	nop
 801014a:	79fb      	ldrb	r3, [r7, #7]
 801014c:	009b      	lsls	r3, r3, #2
 801014e:	3301      	adds	r3, #1
 8010150:	00db      	lsls	r3, r3, #3
 8010152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010156:	4618      	mov	r0, r3
 8010158:	f7ff fb10 	bl	800f77c <WIZCHIP_READ>
 801015c:	4603      	mov	r3, r0
 801015e:	2b00      	cmp	r3, #0
 8010160:	d1f3      	bne.n	801014a <connect+0x16e>

   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8010162:	4b24      	ldr	r3, [pc, #144]	; (80101f4 <connect+0x218>)
 8010164:	881b      	ldrh	r3, [r3, #0]
 8010166:	461a      	mov	r2, r3
 8010168:	79fb      	ldrb	r3, [r7, #7]
 801016a:	fa42 f303 	asr.w	r3, r2, r3
 801016e:	f003 0301 	and.w	r3, r3, #1
 8010172:	2b00      	cmp	r3, #0
 8010174:	d02b      	beq.n	80101ce <connect+0x1f2>
 8010176:	2300      	movs	r3, #0
 8010178:	e036      	b.n	80101e8 <connect+0x20c>

   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
      if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 801017a:	79fb      	ldrb	r3, [r7, #7]
 801017c:	009b      	lsls	r3, r3, #2
 801017e:	3301      	adds	r3, #1
 8010180:	00db      	lsls	r3, r3, #3
 8010182:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010186:	4618      	mov	r0, r3
 8010188:	f7ff faf8 	bl	800f77c <WIZCHIP_READ>
 801018c:	4603      	mov	r3, r0
 801018e:	f003 0308 	and.w	r3, r3, #8
 8010192:	2b00      	cmp	r3, #0
 8010194:	d00c      	beq.n	80101b0 <connect+0x1d4>
      {
         setSn_IRCLR(sn, Sn_IR_TIMEOUT);
 8010196:	79fb      	ldrb	r3, [r7, #7]
 8010198:	009b      	lsls	r3, r3, #2
 801019a:	3301      	adds	r3, #1
 801019c:	00db      	lsls	r3, r3, #3
 801019e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80101a2:	2108      	movs	r1, #8
 80101a4:	4618      	mov	r0, r3
 80101a6:	f7ff fad9 	bl	800f75c <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80101aa:	f06f 030c 	mvn.w	r3, #12
 80101ae:	e01b      	b.n	80101e8 <connect+0x20c>
      }
      if (getSn_SR(sn) == SOCK_CLOSED)
 80101b0:	79fb      	ldrb	r3, [r7, #7]
 80101b2:	009b      	lsls	r3, r3, #2
 80101b4:	3301      	adds	r3, #1
 80101b6:	00db      	lsls	r3, r3, #3
 80101b8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80101bc:	4618      	mov	r0, r3
 80101be:	f7ff fadd 	bl	800f77c <WIZCHIP_READ>
 80101c2:	4603      	mov	r3, r0
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d102      	bne.n	80101ce <connect+0x1f2>
      {
         return SOCKERR_SOCKCLOSED;
 80101c8:	f06f 0303 	mvn.w	r3, #3
 80101cc:	e00c      	b.n	80101e8 <connect+0x20c>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80101ce:	79fb      	ldrb	r3, [r7, #7]
 80101d0:	009b      	lsls	r3, r3, #2
 80101d2:	3301      	adds	r3, #1
 80101d4:	00db      	lsls	r3, r3, #3
 80101d6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80101da:	4618      	mov	r0, r3
 80101dc:	f7ff face 	bl	800f77c <WIZCHIP_READ>
 80101e0:	4603      	mov	r3, r0
 80101e2:	2b17      	cmp	r3, #23
 80101e4:	d1c9      	bne.n	801017a <connect+0x19e>
      }
   } 
   return SOCK_OK;
 80101e6:	2301      	movs	r3, #1
}
 80101e8:	4618      	mov	r0, r3
 80101ea:	3710      	adds	r7, #16
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}
 80101f0:	00014100 	.word	0x00014100
 80101f4:	24015da6 	.word	0x24015da6

080101f8 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b082      	sub	sp, #8
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	4603      	mov	r3, r0
 8010200:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8010202:	79fb      	ldrb	r3, [r7, #7]
 8010204:	2b07      	cmp	r3, #7
 8010206:	d902      	bls.n	801020e <disconnect+0x16>
 8010208:	f04f 33ff 	mov.w	r3, #4294967295
 801020c:	e05f      	b.n	80102ce <disconnect+0xd6>
   CHECK_TCPMODE();
 801020e:	79fb      	ldrb	r3, [r7, #7]
 8010210:	009b      	lsls	r3, r3, #2
 8010212:	3301      	adds	r3, #1
 8010214:	00db      	lsls	r3, r3, #3
 8010216:	4618      	mov	r0, r3
 8010218:	f7ff fab0 	bl	800f77c <WIZCHIP_READ>
 801021c:	4603      	mov	r3, r0
 801021e:	f003 0303 	and.w	r3, r3, #3
 8010222:	2b01      	cmp	r3, #1
 8010224:	d002      	beq.n	801022c <disconnect+0x34>
 8010226:	f06f 0304 	mvn.w	r3, #4
 801022a:	e050      	b.n	80102ce <disconnect+0xd6>
   if(getSn_SR(sn) != SOCK_CLOSED)
 801022c:	79fb      	ldrb	r3, [r7, #7]
 801022e:	009b      	lsls	r3, r3, #2
 8010230:	3301      	adds	r3, #1
 8010232:	00db      	lsls	r3, r3, #3
 8010234:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010238:	4618      	mov	r0, r3
 801023a:	f7ff fa9f 	bl	800f77c <WIZCHIP_READ>
 801023e:	4603      	mov	r3, r0
 8010240:	2b00      	cmp	r3, #0
 8010242:	d043      	beq.n	80102cc <disconnect+0xd4>
   {
      setSn_CR(sn,Sn_CR_DISCON);
 8010244:	79fb      	ldrb	r3, [r7, #7]
 8010246:	009b      	lsls	r3, r3, #2
 8010248:	3301      	adds	r3, #1
 801024a:	00db      	lsls	r3, r3, #3
 801024c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010250:	2108      	movs	r1, #8
 8010252:	4618      	mov	r0, r3
 8010254:	f7ff fa82 	bl	800f75c <WIZCHIP_WRITE>
      /* wait to process the command... */
      while(getSn_CR(sn));
 8010258:	bf00      	nop
 801025a:	79fb      	ldrb	r3, [r7, #7]
 801025c:	009b      	lsls	r3, r3, #2
 801025e:	3301      	adds	r3, #1
 8010260:	00db      	lsls	r3, r3, #3
 8010262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010266:	4618      	mov	r0, r3
 8010268:	f7ff fa88 	bl	800f77c <WIZCHIP_READ>
 801026c:	4603      	mov	r3, r0
 801026e:	2b00      	cmp	r3, #0
 8010270:	d1f3      	bne.n	801025a <disconnect+0x62>
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8010272:	4b19      	ldr	r3, [pc, #100]	; (80102d8 <disconnect+0xe0>)
 8010274:	881b      	ldrh	r3, [r3, #0]
 8010276:	461a      	mov	r2, r3
 8010278:	79fb      	ldrb	r3, [r7, #7]
 801027a:	fa42 f303 	asr.w	r3, r2, r3
 801027e:	f003 0301 	and.w	r3, r3, #1
 8010282:	2b00      	cmp	r3, #0
 8010284:	d016      	beq.n	80102b4 <disconnect+0xbc>
 8010286:	2300      	movs	r3, #0
 8010288:	e021      	b.n	80102ce <disconnect+0xd6>
      while(getSn_SR(sn) != SOCK_CLOSED)
      {
         if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 801028a:	79fb      	ldrb	r3, [r7, #7]
 801028c:	009b      	lsls	r3, r3, #2
 801028e:	3301      	adds	r3, #1
 8010290:	00db      	lsls	r3, r3, #3
 8010292:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010296:	4618      	mov	r0, r3
 8010298:	f7ff fa70 	bl	800f77c <WIZCHIP_READ>
 801029c:	4603      	mov	r3, r0
 801029e:	f003 0308 	and.w	r3, r3, #8
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d006      	beq.n	80102b4 <disconnect+0xbc>
         {
            close(sn);
 80102a6:	79fb      	ldrb	r3, [r7, #7]
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7ff fddf 	bl	800fe6c <close>
            return SOCKERR_TIMEOUT;
 80102ae:	f06f 030c 	mvn.w	r3, #12
 80102b2:	e00c      	b.n	80102ce <disconnect+0xd6>
      while(getSn_SR(sn) != SOCK_CLOSED)
 80102b4:	79fb      	ldrb	r3, [r7, #7]
 80102b6:	009b      	lsls	r3, r3, #2
 80102b8:	3301      	adds	r3, #1
 80102ba:	00db      	lsls	r3, r3, #3
 80102bc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80102c0:	4618      	mov	r0, r3
 80102c2:	f7ff fa5b 	bl	800f77c <WIZCHIP_READ>
 80102c6:	4603      	mov	r3, r0
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d1de      	bne.n	801028a <disconnect+0x92>
         }
      }
   }
   return SOCK_OK;
 80102cc:	2301      	movs	r3, #1
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3708      	adds	r7, #8
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}
 80102d6:	bf00      	nop
 80102d8:	24015da6 	.word	0x24015da6

080102dc <send>:


datasize_t send(uint8_t sn, uint8_t * buf, datasize_t len)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b084      	sub	sp, #16
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	4603      	mov	r3, r0
 80102e4:	6039      	str	r1, [r7, #0]
 80102e6:	71fb      	strb	r3, [r7, #7]
 80102e8:	4613      	mov	r3, r2
 80102ea:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80102ec:	2300      	movs	r3, #0
 80102ee:	73fb      	strb	r3, [r7, #15]
   datasize_t freesize=0;
 80102f0:	2300      	movs	r3, #0
 80102f2:	81bb      	strh	r3, [r7, #12]
    */
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE(Sn_MR_TCP4);
   /************/

   freesize = getSn_TxMAX(sn);
 80102f4:	79fb      	ldrb	r3, [r7, #7]
 80102f6:	009b      	lsls	r3, r3, #2
 80102f8:	3301      	adds	r3, #1
 80102fa:	00db      	lsls	r3, r3, #3
 80102fc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8010300:	4618      	mov	r0, r3
 8010302:	f7ff fa3b 	bl	800f77c <WIZCHIP_READ>
 8010306:	4603      	mov	r3, r0
 8010308:	029b      	lsls	r3, r3, #10
 801030a:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 801030c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8010310:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010314:	429a      	cmp	r2, r3
 8010316:	dd01      	ble.n	801031c <send+0x40>
 8010318:	89bb      	ldrh	r3, [r7, #12]
 801031a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = (datasize_t)getSn_TX_FSR(sn);
 801031c:	79fb      	ldrb	r3, [r7, #7]
 801031e:	4618      	mov	r0, r3
 8010320:	f7ff fa5e 	bl	800f7e0 <getSn_TX_FSR>
 8010324:	4603      	mov	r3, r0
 8010326:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8010328:	79fb      	ldrb	r3, [r7, #7]
 801032a:	009b      	lsls	r3, r3, #2
 801032c:	3301      	adds	r3, #1
 801032e:	00db      	lsls	r3, r3, #3
 8010330:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010334:	4618      	mov	r0, r3
 8010336:	f7ff fa21 	bl	800f77c <WIZCHIP_READ>
 801033a:	4603      	mov	r3, r0
 801033c:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 801033e:	7bfb      	ldrb	r3, [r7, #15]
 8010340:	2b17      	cmp	r3, #23
 8010342:	d00c      	beq.n	801035e <send+0x82>
 8010344:	7bfb      	ldrb	r3, [r7, #15]
 8010346:	2b1c      	cmp	r3, #28
 8010348:	d009      	beq.n	801035e <send+0x82>
      {
         if(tmp == SOCK_CLOSED) close(sn);
 801034a:	7bfb      	ldrb	r3, [r7, #15]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d103      	bne.n	8010358 <send+0x7c>
 8010350:	79fb      	ldrb	r3, [r7, #7]
 8010352:	4618      	mov	r0, r3
 8010354:	f7ff fd8a 	bl	800fe6c <close>
         return SOCKERR_SOCKSTATUS;
 8010358:	f06f 0306 	mvn.w	r3, #6
 801035c:	e097      	b.n	801048e <send+0x1b2>
      }
      if(len <= freesize) break;
 801035e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8010362:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010366:	429a      	cmp	r2, r3
 8010368:	dd0b      	ble.n	8010382 <send+0xa6>
      if( sock_io_mode & (1<<sn) ) return SOCK_BUSY;  
 801036a:	4b4b      	ldr	r3, [pc, #300]	; (8010498 <send+0x1bc>)
 801036c:	881b      	ldrh	r3, [r3, #0]
 801036e:	461a      	mov	r2, r3
 8010370:	79fb      	ldrb	r3, [r7, #7]
 8010372:	fa42 f303 	asr.w	r3, r2, r3
 8010376:	f003 0301 	and.w	r3, r3, #1
 801037a:	2b00      	cmp	r3, #0
 801037c:	d0ce      	beq.n	801031c <send+0x40>
 801037e:	2300      	movs	r3, #0
 8010380:	e085      	b.n	801048e <send+0x1b2>
      if(len <= freesize) break;
 8010382:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8010384:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8010388:	79fb      	ldrb	r3, [r7, #7]
 801038a:	6839      	ldr	r1, [r7, #0]
 801038c:	4618      	mov	r0, r3
 801038e:	f7ff fad7 	bl	800f940 <wiz_send_data>
   if(sock_is_sending & (1<<sn))
 8010392:	4b42      	ldr	r3, [pc, #264]	; (801049c <send+0x1c0>)
 8010394:	881b      	ldrh	r3, [r3, #0]
 8010396:	461a      	mov	r2, r3
 8010398:	79fb      	ldrb	r3, [r7, #7]
 801039a:	fa42 f303 	asr.w	r3, r2, r3
 801039e:	f003 0301 	and.w	r3, r3, #1
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d04d      	beq.n	8010442 <send+0x166>
   {
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 80103a6:	e034      	b.n	8010412 <send+0x136>
      {    
         tmp = getSn_SR(sn);
 80103a8:	79fb      	ldrb	r3, [r7, #7]
 80103aa:	009b      	lsls	r3, r3, #2
 80103ac:	3301      	adds	r3, #1
 80103ae:	00db      	lsls	r3, r3, #3
 80103b0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80103b4:	4618      	mov	r0, r3
 80103b6:	f7ff f9e1 	bl	800f77c <WIZCHIP_READ>
 80103ba:	4603      	mov	r3, r0
 80103bc:	73fb      	strb	r3, [r7, #15]
         if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT) )
 80103be:	7bfb      	ldrb	r3, [r7, #15]
 80103c0:	2b17      	cmp	r3, #23
 80103c2:	d01a      	beq.n	80103fa <send+0x11e>
 80103c4:	7bfb      	ldrb	r3, [r7, #15]
 80103c6:	2b1c      	cmp	r3, #28
 80103c8:	d017      	beq.n	80103fa <send+0x11e>
         {
            if( (tmp == SOCK_CLOSED) || (getSn_IR(sn) & Sn_IR_TIMEOUT) ) close(sn);
 80103ca:	7bfb      	ldrb	r3, [r7, #15]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d00d      	beq.n	80103ec <send+0x110>
 80103d0:	79fb      	ldrb	r3, [r7, #7]
 80103d2:	009b      	lsls	r3, r3, #2
 80103d4:	3301      	adds	r3, #1
 80103d6:	00db      	lsls	r3, r3, #3
 80103d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80103dc:	4618      	mov	r0, r3
 80103de:	f7ff f9cd 	bl	800f77c <WIZCHIP_READ>
 80103e2:	4603      	mov	r3, r0
 80103e4:	f003 0308 	and.w	r3, r3, #8
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d003      	beq.n	80103f4 <send+0x118>
 80103ec:	79fb      	ldrb	r3, [r7, #7]
 80103ee:	4618      	mov	r0, r3
 80103f0:	f7ff fd3c 	bl	800fe6c <close>
            return SOCKERR_SOCKSTATUS;
 80103f4:	f06f 0306 	mvn.w	r3, #6
 80103f8:	e049      	b.n	801048e <send+0x1b2>
         }
         if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80103fa:	4b27      	ldr	r3, [pc, #156]	; (8010498 <send+0x1bc>)
 80103fc:	881b      	ldrh	r3, [r3, #0]
 80103fe:	461a      	mov	r2, r3
 8010400:	79fb      	ldrb	r3, [r7, #7]
 8010402:	fa42 f303 	asr.w	r3, r2, r3
 8010406:	f003 0301 	and.w	r3, r3, #1
 801040a:	2b00      	cmp	r3, #0
 801040c:	d001      	beq.n	8010412 <send+0x136>
 801040e:	2300      	movs	r3, #0
 8010410:	e03d      	b.n	801048e <send+0x1b2>
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8010412:	79fb      	ldrb	r3, [r7, #7]
 8010414:	009b      	lsls	r3, r3, #2
 8010416:	3301      	adds	r3, #1
 8010418:	00db      	lsls	r3, r3, #3
 801041a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801041e:	4618      	mov	r0, r3
 8010420:	f7ff f9ac 	bl	800f77c <WIZCHIP_READ>
 8010424:	4603      	mov	r3, r0
 8010426:	f003 0310 	and.w	r3, r3, #16
 801042a:	2b00      	cmp	r3, #0
 801042c:	d0bc      	beq.n	80103a8 <send+0xcc>
      } 
      setSn_IRCLR(sn, Sn_IR_SENDOK);
 801042e:	79fb      	ldrb	r3, [r7, #7]
 8010430:	009b      	lsls	r3, r3, #2
 8010432:	3301      	adds	r3, #1
 8010434:	00db      	lsls	r3, r3, #3
 8010436:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 801043a:	2110      	movs	r1, #16
 801043c:	4618      	mov	r0, r3
 801043e:	f7ff f98d 	bl	800f75c <WIZCHIP_WRITE>
   }
   setSn_CR(sn,Sn_CR_SEND);
 8010442:	79fb      	ldrb	r3, [r7, #7]
 8010444:	009b      	lsls	r3, r3, #2
 8010446:	3301      	adds	r3, #1
 8010448:	00db      	lsls	r3, r3, #3
 801044a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801044e:	2120      	movs	r1, #32
 8010450:	4618      	mov	r0, r3
 8010452:	f7ff f983 	bl	800f75c <WIZCHIP_WRITE>
 
   while(getSn_CR(sn));   // wait to process the command...
 8010456:	bf00      	nop
 8010458:	79fb      	ldrb	r3, [r7, #7]
 801045a:	009b      	lsls	r3, r3, #2
 801045c:	3301      	adds	r3, #1
 801045e:	00db      	lsls	r3, r3, #3
 8010460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010464:	4618      	mov	r0, r3
 8010466:	f7ff f989 	bl	800f77c <WIZCHIP_READ>
 801046a:	4603      	mov	r3, r0
 801046c:	2b00      	cmp	r3, #0
 801046e:	d1f3      	bne.n	8010458 <send+0x17c>
   sock_is_sending |= (1<<sn);
 8010470:	79fb      	ldrb	r3, [r7, #7]
 8010472:	2201      	movs	r2, #1
 8010474:	fa02 f303 	lsl.w	r3, r2, r3
 8010478:	b21a      	sxth	r2, r3
 801047a:	4b08      	ldr	r3, [pc, #32]	; (801049c <send+0x1c0>)
 801047c:	881b      	ldrh	r3, [r3, #0]
 801047e:	b21b      	sxth	r3, r3
 8010480:	4313      	orrs	r3, r2
 8010482:	b21b      	sxth	r3, r3
 8010484:	b29a      	uxth	r2, r3
 8010486:	4b05      	ldr	r3, [pc, #20]	; (801049c <send+0x1c0>)
 8010488:	801a      	strh	r2, [r3, #0]
 
   return len;
 801048a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 801048e:	4618      	mov	r0, r3
 8010490:	3710      	adds	r7, #16
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}
 8010496:	bf00      	nop
 8010498:	24015da6 	.word	0x24015da6
 801049c:	24015da8 	.word	0x24015da8

080104a0 <recv>:
 
   return len;
}

datasize_t recv(uint8_t sn, uint8_t * buf, datasize_t len)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b084      	sub	sp, #16
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	4603      	mov	r3, r0
 80104a8:	6039      	str	r1, [r7, #0]
 80104aa:	71fb      	strb	r3, [r7, #7]
 80104ac:	4613      	mov	r3, r2
 80104ae:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80104b0:	2300      	movs	r3, #0
 80104b2:	73fb      	strb	r3, [r7, #15]
   datasize_t recvsize = 0;
 80104b4:	2300      	movs	r3, #0
 80104b6:	81bb      	strh	r3, [r7, #12]
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE();
   //CHECK_SOCKDATA();
   /************/
 
   recvsize = getSn_RxMAX(sn); 
 80104b8:	79fb      	ldrb	r3, [r7, #7]
 80104ba:	009b      	lsls	r3, r3, #2
 80104bc:	3301      	adds	r3, #1
 80104be:	00db      	lsls	r3, r3, #3
 80104c0:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 80104c4:	4618      	mov	r0, r3
 80104c6:	f7ff f959 	bl	800f77c <WIZCHIP_READ>
 80104ca:	4603      	mov	r3, r0
 80104cc:	029b      	lsls	r3, r3, #10
 80104ce:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80104d0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80104d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80104d8:	429a      	cmp	r2, r3
 80104da:	da01      	bge.n	80104e0 <recv+0x40>
 80104dc:	89bb      	ldrh	r3, [r7, #12]
 80104de:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      recvsize = (datasize_t)getSn_RX_RSR(sn);
 80104e0:	79fb      	ldrb	r3, [r7, #7]
 80104e2:	4618      	mov	r0, r3
 80104e4:	f7ff f9b2 	bl	800f84c <getSn_RX_RSR>
 80104e8:	4603      	mov	r3, r0
 80104ea:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80104ec:	79fb      	ldrb	r3, [r7, #7]
 80104ee:	009b      	lsls	r3, r3, #2
 80104f0:	3301      	adds	r3, #1
 80104f2:	00db      	lsls	r3, r3, #3
 80104f4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80104f8:	4618      	mov	r0, r3
 80104fa:	f7ff f93f 	bl	800f77c <WIZCHIP_READ>
 80104fe:	4603      	mov	r3, r0
 8010500:	73fb      	strb	r3, [r7, #15]
      if (tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT)
 8010502:	7bfb      	ldrb	r3, [r7, #15]
 8010504:	2b17      	cmp	r3, #23
 8010506:	d00c      	beq.n	8010522 <recv+0x82>
 8010508:	7bfb      	ldrb	r3, [r7, #15]
 801050a:	2b1c      	cmp	r3, #28
 801050c:	d009      	beq.n	8010522 <recv+0x82>
      {
         if(tmp == SOCK_CLOSED) close(sn);
 801050e:	7bfb      	ldrb	r3, [r7, #15]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d103      	bne.n	801051c <recv+0x7c>
 8010514:	79fb      	ldrb	r3, [r7, #7]
 8010516:	4618      	mov	r0, r3
 8010518:	f7ff fca8 	bl	800fe6c <close>
         return SOCKERR_SOCKSTATUS;
 801051c:	f06f 0306 	mvn.w	r3, #6
 8010520:	e038      	b.n	8010594 <recv+0xf4>
      }
      if(recvsize) break;
 8010522:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d10b      	bne.n	8010542 <recv+0xa2>
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 801052a:	4b1c      	ldr	r3, [pc, #112]	; (801059c <recv+0xfc>)
 801052c:	881b      	ldrh	r3, [r3, #0]
 801052e:	461a      	mov	r2, r3
 8010530:	79fb      	ldrb	r3, [r7, #7]
 8010532:	fa42 f303 	asr.w	r3, r2, r3
 8010536:	f003 0301 	and.w	r3, r3, #1
 801053a:	2b00      	cmp	r3, #0
 801053c:	d0d0      	beq.n	80104e0 <recv+0x40>
 801053e:	2300      	movs	r3, #0
 8010540:	e028      	b.n	8010594 <recv+0xf4>
      if(recvsize) break;
 8010542:	bf00      	nop
   }
   if(recvsize < len) len = recvsize;
 8010544:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8010548:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801054c:	429a      	cmp	r2, r3
 801054e:	da01      	bge.n	8010554 <recv+0xb4>
 8010550:	89bb      	ldrh	r3, [r7, #12]
 8010552:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len); 
 8010554:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8010558:	79fb      	ldrb	r3, [r7, #7]
 801055a:	6839      	ldr	r1, [r7, #0]
 801055c:	4618      	mov	r0, r3
 801055e:	f7ff fa4f 	bl	800fa00 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV); 
 8010562:	79fb      	ldrb	r3, [r7, #7]
 8010564:	009b      	lsls	r3, r3, #2
 8010566:	3301      	adds	r3, #1
 8010568:	00db      	lsls	r3, r3, #3
 801056a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801056e:	2140      	movs	r1, #64	; 0x40
 8010570:	4618      	mov	r0, r3
 8010572:	f7ff f8f3 	bl	800f75c <WIZCHIP_WRITE>
   while(getSn_CR(sn));  
 8010576:	bf00      	nop
 8010578:	79fb      	ldrb	r3, [r7, #7]
 801057a:	009b      	lsls	r3, r3, #2
 801057c:	3301      	adds	r3, #1
 801057e:	00db      	lsls	r3, r3, #3
 8010580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010584:	4618      	mov	r0, r3
 8010586:	f7ff f8f9 	bl	800f77c <WIZCHIP_READ>
 801058a:	4603      	mov	r3, r0
 801058c:	2b00      	cmp	r3, #0
 801058e:	d1f3      	bne.n	8010578 <recv+0xd8>
   return len;
 8010590:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8010594:	4618      	mov	r0, r3
 8010596:	3710      	adds	r7, #16
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}
 801059c:	24015da6 	.word	0x24015da6

080105a0 <recv_iperf>:


datasize_t recv_iperf(uint8_t sn, uint8_t * buf, datasize_t len)
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b082      	sub	sp, #8
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	4603      	mov	r3, r0
 80105a8:	6039      	str	r1, [r7, #0]
 80105aa:	71fb      	strb	r3, [r7, #7]
 80105ac:	4613      	mov	r3, r2
 80105ae:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80105b0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80105b4:	79fb      	ldrb	r3, [r7, #7]
 80105b6:	6839      	ldr	r1, [r7, #0]
 80105b8:	4618      	mov	r0, r3
 80105ba:	f7ff fa21 	bl	800fa00 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80105be:	79fb      	ldrb	r3, [r7, #7]
 80105c0:	009b      	lsls	r3, r3, #2
 80105c2:	3301      	adds	r3, #1
 80105c4:	00db      	lsls	r3, r3, #3
 80105c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80105ca:	2140      	movs	r1, #64	; 0x40
 80105cc:	4618      	mov	r0, r3
 80105ce:	f7ff f8c5 	bl	800f75c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80105d2:	bf00      	nop
 80105d4:	79fb      	ldrb	r3, [r7, #7]
 80105d6:	009b      	lsls	r3, r3, #2
 80105d8:	3301      	adds	r3, #1
 80105da:	00db      	lsls	r3, r3, #3
 80105dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80105e0:	4618      	mov	r0, r3
 80105e2:	f7ff f8cb 	bl	800f77c <WIZCHIP_READ>
 80105e6:	4603      	mov	r3, r0
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d1f3      	bne.n	80105d4 <recv_iperf+0x34>

   return len;
 80105ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 80105f0:	4618      	mov	r0, r3
 80105f2:	3708      	adds	r7, #8
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bd80      	pop	{r7, pc}

080105f8 <ctlsocket>:
 
   return pack_len;
}

int8_t ctlsocket(uint8_t sn, ctlsock_type cstype, void* arg)
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b084      	sub	sp, #16
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	4603      	mov	r3, r0
 8010600:	603a      	str	r2, [r7, #0]
 8010602:	71fb      	strb	r3, [r7, #7]
 8010604:	460b      	mov	r3, r1
 8010606:	71bb      	strb	r3, [r7, #6]
   uint8_t tmp = 0;
 8010608:	2300      	movs	r3, #0
 801060a:	73fb      	strb	r3, [r7, #15]
   CHECK_SOCKNUM();
 801060c:	79fb      	ldrb	r3, [r7, #7]
 801060e:	2b07      	cmp	r3, #7
 8010610:	d902      	bls.n	8010618 <ctlsocket+0x20>
 8010612:	f04f 33ff 	mov.w	r3, #4294967295
 8010616:	e0d8      	b.n	80107ca <ctlsocket+0x1d2>
   tmp = *((uint8_t*)arg); 
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	73fb      	strb	r3, [r7, #15]
   switch(cstype)
 801061e:	79bb      	ldrb	r3, [r7, #6]
 8010620:	2b09      	cmp	r3, #9
 8010622:	f200 80ce 	bhi.w	80107c2 <ctlsocket+0x1ca>
 8010626:	a201      	add	r2, pc, #4	; (adr r2, 801062c <ctlsocket+0x34>)
 8010628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801062c:	08010655 	.word	0x08010655
 8010630:	080106a3 	.word	0x080106a3
 8010634:	080106bd 	.word	0x080106bd
 8010638:	080106db 	.word	0x080106db
 801063c:	080106f9 	.word	0x080106f9
 8010640:	0801071f 	.word	0x0801071f
 8010644:	0801073b 	.word	0x0801073b
 8010648:	08010761 	.word	0x08010761
 801064c:	0801077d 	.word	0x0801077d
 8010650:	080107a7 	.word	0x080107a7
   {
      case CS_SET_IOMODE:
         if(tmp == SOCK_IO_NONBLOCK)  sock_io_mode |= (1<<sn);
 8010654:	7bfb      	ldrb	r3, [r7, #15]
 8010656:	2b01      	cmp	r3, #1
 8010658:	d10d      	bne.n	8010676 <ctlsocket+0x7e>
 801065a:	79fb      	ldrb	r3, [r7, #7]
 801065c:	2201      	movs	r2, #1
 801065e:	fa02 f303 	lsl.w	r3, r2, r3
 8010662:	b21a      	sxth	r2, r3
 8010664:	4b5b      	ldr	r3, [pc, #364]	; (80107d4 <ctlsocket+0x1dc>)
 8010666:	881b      	ldrh	r3, [r3, #0]
 8010668:	b21b      	sxth	r3, r3
 801066a:	4313      	orrs	r3, r2
 801066c:	b21b      	sxth	r3, r3
 801066e:	b29a      	uxth	r2, r3
 8010670:	4b58      	ldr	r3, [pc, #352]	; (80107d4 <ctlsocket+0x1dc>)
 8010672:	801a      	strh	r2, [r3, #0]
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
         else return SOCKERR_ARG;
         break;
 8010674:	e0a8      	b.n	80107c8 <ctlsocket+0x1d0>
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 8010676:	7bfb      	ldrb	r3, [r7, #15]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d10f      	bne.n	801069c <ctlsocket+0xa4>
 801067c:	79fb      	ldrb	r3, [r7, #7]
 801067e:	2201      	movs	r2, #1
 8010680:	fa02 f303 	lsl.w	r3, r2, r3
 8010684:	b21b      	sxth	r3, r3
 8010686:	43db      	mvns	r3, r3
 8010688:	b21a      	sxth	r2, r3
 801068a:	4b52      	ldr	r3, [pc, #328]	; (80107d4 <ctlsocket+0x1dc>)
 801068c:	881b      	ldrh	r3, [r3, #0]
 801068e:	b21b      	sxth	r3, r3
 8010690:	4013      	ands	r3, r2
 8010692:	b21b      	sxth	r3, r3
 8010694:	b29a      	uxth	r2, r3
 8010696:	4b4f      	ldr	r3, [pc, #316]	; (80107d4 <ctlsocket+0x1dc>)
 8010698:	801a      	strh	r2, [r3, #0]
         break;
 801069a:	e095      	b.n	80107c8 <ctlsocket+0x1d0>
         else return SOCKERR_ARG;
 801069c:	f06f 0309 	mvn.w	r3, #9
 80106a0:	e093      	b.n	80107ca <ctlsocket+0x1d2>
      case CS_GET_IOMODE: 
         *((uint8_t*)arg) = (uint8_t)((sock_io_mode >> sn) & 0x0001);
 80106a2:	4b4c      	ldr	r3, [pc, #304]	; (80107d4 <ctlsocket+0x1dc>)
 80106a4:	881b      	ldrh	r3, [r3, #0]
 80106a6:	461a      	mov	r2, r3
 80106a8:	79fb      	ldrb	r3, [r7, #7]
 80106aa:	fa42 f303 	asr.w	r3, r2, r3
 80106ae:	b2db      	uxtb	r3, r3
 80106b0:	f003 0301 	and.w	r3, r3, #1
 80106b4:	b2da      	uxtb	r2, r3
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	701a      	strb	r2, [r3, #0]
         break;
 80106ba:	e085      	b.n	80107c8 <ctlsocket+0x1d0>
      case CS_GET_MAXTXBUF:
         *((datasize_t*)arg) = getSn_TxMAX(sn);
 80106bc:	79fb      	ldrb	r3, [r7, #7]
 80106be:	009b      	lsls	r3, r3, #2
 80106c0:	3301      	adds	r3, #1
 80106c2:	00db      	lsls	r3, r3, #3
 80106c4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80106c8:	4618      	mov	r0, r3
 80106ca:	f7ff f857 	bl	800f77c <WIZCHIP_READ>
 80106ce:	4603      	mov	r3, r0
 80106d0:	029b      	lsls	r3, r3, #10
 80106d2:	b21a      	sxth	r2, r3
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	801a      	strh	r2, [r3, #0]
         break;
 80106d8:	e076      	b.n	80107c8 <ctlsocket+0x1d0>
      case CS_GET_MAXRXBUF:  
         *((datasize_t*)arg) = getSn_RxMAX(sn);
 80106da:	79fb      	ldrb	r3, [r7, #7]
 80106dc:	009b      	lsls	r3, r3, #2
 80106de:	3301      	adds	r3, #1
 80106e0:	00db      	lsls	r3, r3, #3
 80106e2:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 80106e6:	4618      	mov	r0, r3
 80106e8:	f7ff f848 	bl	800f77c <WIZCHIP_READ>
 80106ec:	4603      	mov	r3, r0
 80106ee:	029b      	lsls	r3, r3, #10
 80106f0:	b21a      	sxth	r2, r3
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	801a      	strh	r2, [r3, #0]
         break;
 80106f6:	e067      	b.n	80107c8 <ctlsocket+0x1d0>
      case CS_CLR_INTERRUPT:
         if( tmp > SIK_ALL) return SOCKERR_ARG;
 80106f8:	7bfb      	ldrb	r3, [r7, #15]
 80106fa:	2b1f      	cmp	r3, #31
 80106fc:	d902      	bls.n	8010704 <ctlsocket+0x10c>
 80106fe:	f06f 0309 	mvn.w	r3, #9
 8010702:	e062      	b.n	80107ca <ctlsocket+0x1d2>
         setSn_IRCLR(sn,tmp);
 8010704:	79fb      	ldrb	r3, [r7, #7]
 8010706:	009b      	lsls	r3, r3, #2
 8010708:	3301      	adds	r3, #1
 801070a:	00db      	lsls	r3, r3, #3
 801070c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8010710:	461a      	mov	r2, r3
 8010712:	7bfb      	ldrb	r3, [r7, #15]
 8010714:	4619      	mov	r1, r3
 8010716:	4610      	mov	r0, r2
 8010718:	f7ff f820 	bl	800f75c <WIZCHIP_WRITE>
         break;
 801071c:	e054      	b.n	80107c8 <ctlsocket+0x1d0>
      case CS_GET_INTERRUPT:
         *((uint8_t*)arg) = getSn_IR(sn);
 801071e:	79fb      	ldrb	r3, [r7, #7]
 8010720:	009b      	lsls	r3, r3, #2
 8010722:	3301      	adds	r3, #1
 8010724:	00db      	lsls	r3, r3, #3
 8010726:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801072a:	4618      	mov	r0, r3
 801072c:	f7ff f826 	bl	800f77c <WIZCHIP_READ>
 8010730:	4603      	mov	r3, r0
 8010732:	461a      	mov	r2, r3
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	701a      	strb	r2, [r3, #0]
         break;
 8010738:	e046      	b.n	80107c8 <ctlsocket+0x1d0>
      case CS_SET_INTMASK:
         if( tmp > SIK_ALL) return SOCKERR_ARG;
 801073a:	7bfb      	ldrb	r3, [r7, #15]
 801073c:	2b1f      	cmp	r3, #31
 801073e:	d902      	bls.n	8010746 <ctlsocket+0x14e>
 8010740:	f06f 0309 	mvn.w	r3, #9
 8010744:	e041      	b.n	80107ca <ctlsocket+0x1d2>
         setSn_IMR(sn,tmp);
 8010746:	79fb      	ldrb	r3, [r7, #7]
 8010748:	009b      	lsls	r3, r3, #2
 801074a:	3301      	adds	r3, #1
 801074c:	00db      	lsls	r3, r3, #3
 801074e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8010752:	461a      	mov	r2, r3
 8010754:	7bfb      	ldrb	r3, [r7, #15]
 8010756:	4619      	mov	r1, r3
 8010758:	4610      	mov	r0, r2
 801075a:	f7fe ffff 	bl	800f75c <WIZCHIP_WRITE>
         break;
 801075e:	e033      	b.n	80107c8 <ctlsocket+0x1d0>
      case CS_GET_INTMASK:
         *((uint8_t*)arg) = getSn_IMR(sn);
 8010760:	79fb      	ldrb	r3, [r7, #7]
 8010762:	009b      	lsls	r3, r3, #2
 8010764:	3301      	adds	r3, #1
 8010766:	00db      	lsls	r3, r3, #3
 8010768:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 801076c:	4618      	mov	r0, r3
 801076e:	f7ff f805 	bl	800f77c <WIZCHIP_READ>
 8010772:	4603      	mov	r3, r0
 8010774:	461a      	mov	r2, r3
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	701a      	strb	r2, [r3, #0]
         break;
 801077a:	e025      	b.n	80107c8 <ctlsocket+0x1d0>
      case CS_SET_PREFER:
    	  if((tmp & 0x03) == 0x01) return SOCKERR_ARG;
 801077c:	7bfb      	ldrb	r3, [r7, #15]
 801077e:	f003 0303 	and.w	r3, r3, #3
 8010782:	2b01      	cmp	r3, #1
 8010784:	d102      	bne.n	801078c <ctlsocket+0x194>
 8010786:	f06f 0309 	mvn.w	r3, #9
 801078a:	e01e      	b.n	80107ca <ctlsocket+0x1d2>
    	  setSn_PSR(sn, tmp);
 801078c:	79fb      	ldrb	r3, [r7, #7]
 801078e:	009b      	lsls	r3, r3, #2
 8010790:	3301      	adds	r3, #1
 8010792:	00db      	lsls	r3, r3, #3
 8010794:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010798:	461a      	mov	r2, r3
 801079a:	7bfb      	ldrb	r3, [r7, #15]
 801079c:	4619      	mov	r1, r3
 801079e:	4610      	mov	r0, r2
 80107a0:	f7fe ffdc 	bl	800f75c <WIZCHIP_WRITE>
    	  break;
 80107a4:	e010      	b.n	80107c8 <ctlsocket+0x1d0>
      case CS_GET_PREFER:
    	  *(uint8_t*) arg = getSn_PSR(sn);
 80107a6:	79fb      	ldrb	r3, [r7, #7]
 80107a8:	009b      	lsls	r3, r3, #2
 80107aa:	3301      	adds	r3, #1
 80107ac:	00db      	lsls	r3, r3, #3
 80107ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7fe ffe2 	bl	800f77c <WIZCHIP_READ>
 80107b8:	4603      	mov	r3, r0
 80107ba:	461a      	mov	r2, r3
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	701a      	strb	r2, [r3, #0]
    	  break;
 80107c0:	e002      	b.n	80107c8 <ctlsocket+0x1d0>
      default:
         return SOCKERR_ARG;
 80107c2:	f06f 0309 	mvn.w	r3, #9
 80107c6:	e000      	b.n	80107ca <ctlsocket+0x1d2>
   }
   return SOCK_OK;
 80107c8:	2301      	movs	r3, #1
}
 80107ca:	4618      	mov	r0, r3
 80107cc:	3710      	adds	r7, #16
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd80      	pop	{r7, pc}
 80107d2:	bf00      	nop
 80107d4:	24015da6 	.word	0x24015da6

080107d8 <getsockopt>:
   } 
   return SOCK_OK;
}

int8_t getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 80107d8:	b590      	push	{r4, r7, lr}
 80107da:	b083      	sub	sp, #12
 80107dc:	af00      	add	r7, sp, #0
 80107de:	4603      	mov	r3, r0
 80107e0:	603a      	str	r2, [r7, #0]
 80107e2:	71fb      	strb	r3, [r7, #7]
 80107e4:	460b      	mov	r3, r1
 80107e6:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 80107e8:	79fb      	ldrb	r3, [r7, #7]
 80107ea:	2b07      	cmp	r3, #7
 80107ec:	d902      	bls.n	80107f4 <getsockopt+0x1c>
 80107ee:	f04f 33ff 	mov.w	r3, #4294967295
 80107f2:	e19e      	b.n	8010b32 <getsockopt+0x35a>
   switch(sotype)
 80107f4:	79bb      	ldrb	r3, [r7, #6]
 80107f6:	2b0e      	cmp	r3, #14
 80107f8:	f200 8197 	bhi.w	8010b2a <getsockopt+0x352>
 80107fc:	a201      	add	r2, pc, #4	; (adr r2, 8010804 <getsockopt+0x2c>)
 80107fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010802:	bf00      	nop
 8010804:	08010841 	.word	0x08010841
 8010808:	08010899 	.word	0x08010899
 801080c:	080108b5 	.word	0x080108b5
 8010810:	080108d1 	.word	0x080108d1
 8010814:	0801090b 	.word	0x0801090b
 8010818:	08010985 	.word	0x08010985
 801081c:	08010b2b 	.word	0x08010b2b
 8010820:	080109bf 	.word	0x080109bf
 8010824:	080109f9 	.word	0x080109f9
 8010828:	08010a0b 	.word	0x08010a0b
 801082c:	08010a1d 	.word	0x08010a1d
 8010830:	08010a39 	.word	0x08010a39
 8010834:	08010a77 	.word	0x08010a77
 8010838:	08010b0f 	.word	0x08010b0f
 801083c:	08010acb 	.word	0x08010acb
   {
      case SO_FLAG:
         *(uint8_t*)arg = (getSn_MR(sn) & 0xF0) | (getSn_MR2(sn)) | ((uint8_t)(((sock_io_mode >> sn) & 0x0001) << 3));
 8010840:	79fb      	ldrb	r3, [r7, #7]
 8010842:	009b      	lsls	r3, r3, #2
 8010844:	3301      	adds	r3, #1
 8010846:	00db      	lsls	r3, r3, #3
 8010848:	4618      	mov	r0, r3
 801084a:	f7fe ff97 	bl	800f77c <WIZCHIP_READ>
 801084e:	4603      	mov	r3, r0
 8010850:	b25b      	sxtb	r3, r3
 8010852:	f023 030f 	bic.w	r3, r3, #15
 8010856:	b25c      	sxtb	r4, r3
 8010858:	79fb      	ldrb	r3, [r7, #7]
 801085a:	009b      	lsls	r3, r3, #2
 801085c:	3301      	adds	r3, #1
 801085e:	00db      	lsls	r3, r3, #3
 8010860:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8010864:	4618      	mov	r0, r3
 8010866:	f7fe ff89 	bl	800f77c <WIZCHIP_READ>
 801086a:	4603      	mov	r3, r0
 801086c:	b25b      	sxtb	r3, r3
 801086e:	4323      	orrs	r3, r4
 8010870:	b25a      	sxtb	r2, r3
 8010872:	4bb2      	ldr	r3, [pc, #712]	; (8010b3c <getsockopt+0x364>)
 8010874:	881b      	ldrh	r3, [r3, #0]
 8010876:	4619      	mov	r1, r3
 8010878:	79fb      	ldrb	r3, [r7, #7]
 801087a:	fa41 f303 	asr.w	r3, r1, r3
 801087e:	b2db      	uxtb	r3, r3
 8010880:	00db      	lsls	r3, r3, #3
 8010882:	b2db      	uxtb	r3, r3
 8010884:	b25b      	sxtb	r3, r3
 8010886:	f003 0308 	and.w	r3, r3, #8
 801088a:	b25b      	sxtb	r3, r3
 801088c:	4313      	orrs	r3, r2
 801088e:	b25b      	sxtb	r3, r3
 8010890:	b2da      	uxtb	r2, r3
 8010892:	683b      	ldr	r3, [r7, #0]
 8010894:	701a      	strb	r2, [r3, #0]
         break;
 8010896:	e14b      	b.n	8010b30 <getsockopt+0x358>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTLR(sn);
 8010898:	79fb      	ldrb	r3, [r7, #7]
 801089a:	009b      	lsls	r3, r3, #2
 801089c:	3301      	adds	r3, #1
 801089e:	00db      	lsls	r3, r3, #3
 80108a0:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80108a4:	4618      	mov	r0, r3
 80108a6:	f7fe ff69 	bl	800f77c <WIZCHIP_READ>
 80108aa:	4603      	mov	r3, r0
 80108ac:	461a      	mov	r2, r3
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	701a      	strb	r2, [r3, #0]
         break;
 80108b2:	e13d      	b.n	8010b30 <getsockopt+0x358>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOSR(sn);
 80108b4:	79fb      	ldrb	r3, [r7, #7]
 80108b6:	009b      	lsls	r3, r3, #2
 80108b8:	3301      	adds	r3, #1
 80108ba:	00db      	lsls	r3, r3, #3
 80108bc:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 80108c0:	4618      	mov	r0, r3
 80108c2:	f7fe ff5b 	bl	800f77c <WIZCHIP_READ>
 80108c6:	4603      	mov	r3, r0
 80108c8:	461a      	mov	r2, r3
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	701a      	strb	r2, [r3, #0]
         break;
 80108ce:	e12f      	b.n	8010b30 <getsockopt+0x358>
      case SO_MSS: 
         *(uint16_t*) arg = getSn_MSSR(sn);
 80108d0:	79fb      	ldrb	r3, [r7, #7]
 80108d2:	009b      	lsls	r3, r3, #2
 80108d4:	3301      	adds	r3, #1
 80108d6:	00db      	lsls	r3, r3, #3
 80108d8:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80108dc:	4618      	mov	r0, r3
 80108de:	f7fe ff4d 	bl	800f77c <WIZCHIP_READ>
 80108e2:	4603      	mov	r3, r0
 80108e4:	b29b      	uxth	r3, r3
 80108e6:	021b      	lsls	r3, r3, #8
 80108e8:	b29c      	uxth	r4, r3
 80108ea:	79fb      	ldrb	r3, [r7, #7]
 80108ec:	009b      	lsls	r3, r3, #2
 80108ee:	3301      	adds	r3, #1
 80108f0:	00da      	lsls	r2, r3, #3
 80108f2:	4b93      	ldr	r3, [pc, #588]	; (8010b40 <getsockopt+0x368>)
 80108f4:	4413      	add	r3, r2
 80108f6:	4618      	mov	r0, r3
 80108f8:	f7fe ff40 	bl	800f77c <WIZCHIP_READ>
 80108fc:	4603      	mov	r3, r0
 80108fe:	b29b      	uxth	r3, r3
 8010900:	4423      	add	r3, r4
 8010902:	b29a      	uxth	r2, r3
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	801a      	strh	r2, [r3, #0]
         break;
 8010908:	e112      	b.n	8010b30 <getsockopt+0x358>
      case SO_DESTIP:
         CHECK_TCPMODE();
 801090a:	79fb      	ldrb	r3, [r7, #7]
 801090c:	009b      	lsls	r3, r3, #2
 801090e:	3301      	adds	r3, #1
 8010910:	00db      	lsls	r3, r3, #3
 8010912:	4618      	mov	r0, r3
 8010914:	f7fe ff32 	bl	800f77c <WIZCHIP_READ>
 8010918:	4603      	mov	r3, r0
 801091a:	f003 0303 	and.w	r3, r3, #3
 801091e:	2b01      	cmp	r3, #1
 8010920:	d002      	beq.n	8010928 <getsockopt+0x150>
 8010922:	f06f 0304 	mvn.w	r3, #4
 8010926:	e104      	b.n	8010b32 <getsockopt+0x35a>
         if(getSn_ESR(sn) & TCPSOCK_MODE) //IPv6 ?
 8010928:	79fb      	ldrb	r3, [r7, #7]
 801092a:	009b      	lsls	r3, r3, #2
 801092c:	3301      	adds	r3, #1
 801092e:	00db      	lsls	r3, r3, #3
 8010930:	f503 5344 	add.w	r3, r3, #12544	; 0x3100
 8010934:	4618      	mov	r0, r3
 8010936:	f7fe ff21 	bl	800f77c <WIZCHIP_READ>
 801093a:	4603      	mov	r3, r0
 801093c:	f003 0304 	and.w	r3, r3, #4
 8010940:	2b00      	cmp	r3, #0
 8010942:	d00f      	beq.n	8010964 <getsockopt+0x18c>
         {
            getSn_DIP6R(sn, ((wiz_IPAddress*)arg)->ip);
 8010944:	79fb      	ldrb	r3, [r7, #7]
 8010946:	009b      	lsls	r3, r3, #2
 8010948:	3301      	adds	r3, #1
 801094a:	00db      	lsls	r3, r3, #3
 801094c:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8010950:	4618      	mov	r0, r3
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	2210      	movs	r2, #16
 8010956:	4619      	mov	r1, r3
 8010958:	f7fe ff31 	bl	800f7be <WIZCHIP_READ_BUF>
            ((wiz_IPAddress*)arg)->len = 16;
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	2210      	movs	r2, #16
 8010960:	741a      	strb	r2, [r3, #16]
         else
         {
            getSn_DIPR(sn, ((wiz_IPAddress*)arg)->ip);
            ((wiz_IPAddress*)arg)->len = 4;
         } 
         break;
 8010962:	e0e5      	b.n	8010b30 <getsockopt+0x358>
            getSn_DIPR(sn, ((wiz_IPAddress*)arg)->ip);
 8010964:	79fb      	ldrb	r3, [r7, #7]
 8010966:	009b      	lsls	r3, r3, #2
 8010968:	3301      	adds	r3, #1
 801096a:	00db      	lsls	r3, r3, #3
 801096c:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8010970:	4618      	mov	r0, r3
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	2204      	movs	r2, #4
 8010976:	4619      	mov	r1, r3
 8010978:	f7fe ff21 	bl	800f7be <WIZCHIP_READ_BUF>
            ((wiz_IPAddress*)arg)->len = 4;
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	2204      	movs	r2, #4
 8010980:	741a      	strb	r2, [r3, #16]
         break;
 8010982:	e0d5      	b.n	8010b30 <getsockopt+0x358>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORTR(sn);
 8010984:	79fb      	ldrb	r3, [r7, #7]
 8010986:	009b      	lsls	r3, r3, #2
 8010988:	3301      	adds	r3, #1
 801098a:	00db      	lsls	r3, r3, #3
 801098c:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
 8010990:	4618      	mov	r0, r3
 8010992:	f7fe fef3 	bl	800f77c <WIZCHIP_READ>
 8010996:	4603      	mov	r3, r0
 8010998:	b29b      	uxth	r3, r3
 801099a:	021b      	lsls	r3, r3, #8
 801099c:	b29c      	uxth	r4, r3
 801099e:	79fb      	ldrb	r3, [r7, #7]
 80109a0:	009b      	lsls	r3, r3, #2
 80109a2:	3301      	adds	r3, #1
 80109a4:	00da      	lsls	r2, r3, #3
 80109a6:	4b67      	ldr	r3, [pc, #412]	; (8010b44 <getsockopt+0x36c>)
 80109a8:	4413      	add	r3, r2
 80109aa:	4618      	mov	r0, r3
 80109ac:	f7fe fee6 	bl	800f77c <WIZCHIP_READ>
 80109b0:	4603      	mov	r3, r0
 80109b2:	b29b      	uxth	r3, r3
 80109b4:	4423      	add	r3, r4
 80109b6:	b29a      	uxth	r2, r3
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	801a      	strh	r2, [r3, #0]
         break; 
 80109bc:	e0b8      	b.n	8010b30 <getsockopt+0x358>
      case SO_KEEPALIVEAUTO:
         CHECK_TCPMODE();
 80109be:	79fb      	ldrb	r3, [r7, #7]
 80109c0:	009b      	lsls	r3, r3, #2
 80109c2:	3301      	adds	r3, #1
 80109c4:	00db      	lsls	r3, r3, #3
 80109c6:	4618      	mov	r0, r3
 80109c8:	f7fe fed8 	bl	800f77c <WIZCHIP_READ>
 80109cc:	4603      	mov	r3, r0
 80109ce:	f003 0303 	and.w	r3, r3, #3
 80109d2:	2b01      	cmp	r3, #1
 80109d4:	d002      	beq.n	80109dc <getsockopt+0x204>
 80109d6:	f06f 0304 	mvn.w	r3, #4
 80109da:	e0aa      	b.n	8010b32 <getsockopt+0x35a>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 80109dc:	79fb      	ldrb	r3, [r7, #7]
 80109de:	009b      	lsls	r3, r3, #2
 80109e0:	3301      	adds	r3, #1
 80109e2:	00db      	lsls	r3, r3, #3
 80109e4:	f503 33c4 	add.w	r3, r3, #100352	; 0x18800
 80109e8:	4618      	mov	r0, r3
 80109ea:	f7fe fec7 	bl	800f77c <WIZCHIP_READ>
 80109ee:	4603      	mov	r3, r0
 80109f0:	b29a      	uxth	r2, r3
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	801a      	strh	r2, [r3, #0]
         break;
 80109f6:	e09b      	b.n	8010b30 <getsockopt+0x358>
      case SO_SENDBUF:
         *(datasize_t*) arg = getSn_TX_FSR(sn);
 80109f8:	79fb      	ldrb	r3, [r7, #7]
 80109fa:	4618      	mov	r0, r3
 80109fc:	f7fe fef0 	bl	800f7e0 <getSn_TX_FSR>
 8010a00:	4603      	mov	r3, r0
 8010a02:	461a      	mov	r2, r3
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	801a      	strh	r2, [r3, #0]
         break;
 8010a08:	e092      	b.n	8010b30 <getsockopt+0x358>
      case SO_RECVBUF:
         *(datasize_t*) arg = getSn_RX_RSR(sn);
 8010a0a:	79fb      	ldrb	r3, [r7, #7]
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f7fe ff1d 	bl	800f84c <getSn_RX_RSR>
 8010a12:	4603      	mov	r3, r0
 8010a14:	461a      	mov	r2, r3
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	801a      	strh	r2, [r3, #0]
         break;
 8010a1a:	e089      	b.n	8010b30 <getsockopt+0x358>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 8010a1c:	79fb      	ldrb	r3, [r7, #7]
 8010a1e:	009b      	lsls	r3, r3, #2
 8010a20:	3301      	adds	r3, #1
 8010a22:	00db      	lsls	r3, r3, #3
 8010a24:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f7fe fea7 	bl	800f77c <WIZCHIP_READ>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	461a      	mov	r2, r3
 8010a32:	683b      	ldr	r3, [r7, #0]
 8010a34:	701a      	strb	r2, [r3, #0]
         break;
 8010a36:	e07b      	b.n	8010b30 <getsockopt+0x358>
      case SO_EXTSTATUS:
         CHECK_TCPMODE();
 8010a38:	79fb      	ldrb	r3, [r7, #7]
 8010a3a:	009b      	lsls	r3, r3, #2
 8010a3c:	3301      	adds	r3, #1
 8010a3e:	00db      	lsls	r3, r3, #3
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7fe fe9b 	bl	800f77c <WIZCHIP_READ>
 8010a46:	4603      	mov	r3, r0
 8010a48:	f003 0303 	and.w	r3, r3, #3
 8010a4c:	2b01      	cmp	r3, #1
 8010a4e:	d002      	beq.n	8010a56 <getsockopt+0x27e>
 8010a50:	f06f 0304 	mvn.w	r3, #4
 8010a54:	e06d      	b.n	8010b32 <getsockopt+0x35a>
         *(uint8_t*) arg = getSn_ESR(sn) & 0x07;
 8010a56:	79fb      	ldrb	r3, [r7, #7]
 8010a58:	009b      	lsls	r3, r3, #2
 8010a5a:	3301      	adds	r3, #1
 8010a5c:	00db      	lsls	r3, r3, #3
 8010a5e:	f503 5344 	add.w	r3, r3, #12544	; 0x3100
 8010a62:	4618      	mov	r0, r3
 8010a64:	f7fe fe8a 	bl	800f77c <WIZCHIP_READ>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	f003 0307 	and.w	r3, r3, #7
 8010a6e:	b2da      	uxtb	r2, r3
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	701a      	strb	r2, [r3, #0]
         break;
 8010a74:	e05c      	b.n	8010b30 <getsockopt+0x358>
      case SO_REMAINSIZE:
         if(getSn_MR(sn)==SOCK_CLOSED) return SOCKERR_SOCKSTATUS;
 8010a76:	79fb      	ldrb	r3, [r7, #7]
 8010a78:	009b      	lsls	r3, r3, #2
 8010a7a:	3301      	adds	r3, #1
 8010a7c:	00db      	lsls	r3, r3, #3
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7fe fe7c 	bl	800f77c <WIZCHIP_READ>
 8010a84:	4603      	mov	r3, r0
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d102      	bne.n	8010a90 <getsockopt+0x2b8>
 8010a8a:	f06f 0306 	mvn.w	r3, #6
 8010a8e:	e050      	b.n	8010b32 <getsockopt+0x35a>
         if(getSn_MR(sn) & 0x01)   *(uint16_t*)arg = getSn_RX_RSR(sn);
 8010a90:	79fb      	ldrb	r3, [r7, #7]
 8010a92:	009b      	lsls	r3, r3, #2
 8010a94:	3301      	adds	r3, #1
 8010a96:	00db      	lsls	r3, r3, #3
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f7fe fe6f 	bl	800f77c <WIZCHIP_READ>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	f003 0301 	and.w	r3, r3, #1
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d008      	beq.n	8010aba <getsockopt+0x2e2>
 8010aa8:	79fb      	ldrb	r3, [r7, #7]
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f7fe fece 	bl	800f84c <getSn_RX_RSR>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	b29a      	uxth	r2, r3
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	801a      	strh	r2, [r3, #0]
         else                      *(uint16_t*)arg = sock_remained_size[sn];
         break;
 8010ab8:	e03a      	b.n	8010b30 <getsockopt+0x358>
         else                      *(uint16_t*)arg = sock_remained_size[sn];
 8010aba:	79fb      	ldrb	r3, [r7, #7]
 8010abc:	4a22      	ldr	r2, [pc, #136]	; (8010b48 <getsockopt+0x370>)
 8010abe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010ac2:	b29a      	uxth	r2, r3
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	801a      	strh	r2, [r3, #0]
         break;
 8010ac8:	e032      	b.n	8010b30 <getsockopt+0x358>
      case SO_PACKINFO:
         if(getSn_MR(sn)==SOCK_CLOSED) return SOCKERR_SOCKSTATUS;
 8010aca:	79fb      	ldrb	r3, [r7, #7]
 8010acc:	009b      	lsls	r3, r3, #2
 8010ace:	3301      	adds	r3, #1
 8010ad0:	00db      	lsls	r3, r3, #3
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f7fe fe52 	bl	800f77c <WIZCHIP_READ>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d102      	bne.n	8010ae4 <getsockopt+0x30c>
 8010ade:	f06f 0306 	mvn.w	r3, #6
 8010ae2:	e026      	b.n	8010b32 <getsockopt+0x35a>
         if(getSn_MR(sn) & 0x01)       return SOCKERR_SOCKMODE;
 8010ae4:	79fb      	ldrb	r3, [r7, #7]
 8010ae6:	009b      	lsls	r3, r3, #2
 8010ae8:	3301      	adds	r3, #1
 8010aea:	00db      	lsls	r3, r3, #3
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7fe fe45 	bl	800f77c <WIZCHIP_READ>
 8010af2:	4603      	mov	r3, r0
 8010af4:	f003 0301 	and.w	r3, r3, #1
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d002      	beq.n	8010b02 <getsockopt+0x32a>
 8010afc:	f06f 0304 	mvn.w	r3, #4
 8010b00:	e017      	b.n	8010b32 <getsockopt+0x35a>
         else *(uint8_t*)arg = sock_pack_info[sn];
 8010b02:	79fb      	ldrb	r3, [r7, #7]
 8010b04:	4a11      	ldr	r2, [pc, #68]	; (8010b4c <getsockopt+0x374>)
 8010b06:	5cd2      	ldrb	r2, [r2, r3]
 8010b08:	683b      	ldr	r3, [r7, #0]
 8010b0a:	701a      	strb	r2, [r3, #0]
         break;
 8010b0c:	e010      	b.n	8010b30 <getsockopt+0x358>
      case SO_MODE:
         *(uint8_t*) arg = 0x0F & getSn_MR(sn);
 8010b0e:	79fb      	ldrb	r3, [r7, #7]
 8010b10:	009b      	lsls	r3, r3, #2
 8010b12:	3301      	adds	r3, #1
 8010b14:	00db      	lsls	r3, r3, #3
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7fe fe30 	bl	800f77c <WIZCHIP_READ>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	f003 030f 	and.w	r3, r3, #15
 8010b22:	b2da      	uxtb	r2, r3
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	701a      	strb	r2, [r3, #0]
         break;
 8010b28:	e002      	b.n	8010b30 <getsockopt+0x358>
      default:
         return SOCKERR_SOCKOPT;
 8010b2a:	f06f 0301 	mvn.w	r3, #1
 8010b2e:	e000      	b.n	8010b32 <getsockopt+0x35a>
   }
   return SOCK_OK;
 8010b30:	2301      	movs	r3, #1
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	370c      	adds	r7, #12
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd90      	pop	{r4, r7, pc}
 8010b3a:	bf00      	nop
 8010b3c:	24015da6 	.word	0x24015da6
 8010b40:	00011100 	.word	0x00011100
 8010b44:	00014100 	.word	0x00014100
 8010b48:	24015dac 	.word	0x24015dac
 8010b4c:	24015dbc 	.word	0x24015dbc

08010b50 <wizchip_cris_enter>:
 * @details @ref wizchip_cris_enter() provides the default protection while @ref _WIZCHIP_ is accessed. \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_exit()
 */
void wizchip_cris_enter(void)   {}
 8010b50:	b480      	push	{r7}
 8010b52:	af00      	add	r7, sp, #0
 8010b54:	bf00      	nop
 8010b56:	46bd      	mov	sp, r7
 8010b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5c:	4770      	bx	lr

08010b5e <wizchip_cris_exit>:
 * @details @ref wizchip_cris_exit provides the default protection while @ref _WIZCHIP_ is accessed\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_enter()
 */
void wizchip_cris_exit(void)   {}
 8010b5e:	b480      	push	{r7}
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	bf00      	nop
 8010b64:	46bd      	mov	sp, r7
 8010b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6a:	4770      	bx	lr

08010b6c <wizchip_cs_select>:
 * @details @ref wizchip_cs_select() provides the default selection @ref _WIZCHIP_,\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_deselect()
 */
void wizchip_cs_select(void)   {}
 8010b6c:	b480      	push	{r7}
 8010b6e:	af00      	add	r7, sp, #0
 8010b70:	bf00      	nop
 8010b72:	46bd      	mov	sp, r7
 8010b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b78:	4770      	bx	lr

08010b7a <wizchip_cs_deselect>:
 * @details @ref wizchip_cs_deselect() provides the default de-selection @ref _WIZCHIP_, \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_select()
 */
void wizchip_cs_deselect(void)   {}
 8010b7a:	b480      	push	{r7}
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	bf00      	nop
 8010b80:	46bd      	mov	sp, r7
 8010b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b86:	4770      	bx	lr

08010b88 <wizchip_spi_read>:
 * @details @ref wizchip_spi_read() provides the default read one byte data from SPI of @ref _WIZCHIP_,\n
 *          but it is null function.
 * @return uint8_t 
 * @todo It should be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
uint8_t wizchip_spi_read(void)        {return 0;}
 8010b88:	b480      	push	{r7}
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	4618      	mov	r0, r3
 8010b90:	46bd      	mov	sp, r7
 8010b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b96:	4770      	bx	lr

08010b98 <wizchip_spi_write>:
 *          but it is null function.
 * @param wb uint8_t data to be written
 * @return void 
 * @todo It should be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
void wizchip_spi_write(uint8_t wb) {}
 8010b98:	b480      	push	{r7}
 8010b9a:	b083      	sub	sp, #12
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	71fb      	strb	r3, [r7, #7]
 8010ba2:	bf00      	nop
 8010ba4:	370c      	adds	r7, #12
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bac:	4770      	bx	lr
	...

08010bb0 <wizchip_spi_read_buf>:
 * @return void
 * @note It is use @ref wizchip_spi_read() as default. \n
 *       It can be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
void wizchip_spi_read_buf(uint8_t* buf, datasize_t len)
{
 8010bb0:	b590      	push	{r4, r7, lr}
 8010bb2:	b085      	sub	sp, #20
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
 8010bb8:	460b      	mov	r3, r1
 8010bba:	807b      	strh	r3, [r7, #2]
   for(datasize_t i=0; i < len; i++) *buf++ = WIZCHIP.IF.SPI._read_byte();
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	81fb      	strh	r3, [r7, #14]
 8010bc0:	e00d      	b.n	8010bde <wizchip_spi_read_buf+0x2e>
 8010bc2:	4b0c      	ldr	r3, [pc, #48]	; (8010bf4 <wizchip_spi_read_buf+0x44>)
 8010bc4:	699b      	ldr	r3, [r3, #24]
 8010bc6:	687c      	ldr	r4, [r7, #4]
 8010bc8:	1c62      	adds	r2, r4, #1
 8010bca:	607a      	str	r2, [r7, #4]
 8010bcc:	4798      	blx	r3
 8010bce:	4603      	mov	r3, r0
 8010bd0:	7023      	strb	r3, [r4, #0]
 8010bd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010bd6:	b29b      	uxth	r3, r3
 8010bd8:	3301      	adds	r3, #1
 8010bda:	b29b      	uxth	r3, r3
 8010bdc:	81fb      	strh	r3, [r7, #14]
 8010bde:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010be2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010be6:	429a      	cmp	r2, r3
 8010be8:	dbeb      	blt.n	8010bc2 <wizchip_spi_read_buf+0x12>
}
 8010bea:	bf00      	nop
 8010bec:	bf00      	nop
 8010bee:	3714      	adds	r7, #20
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bd90      	pop	{r4, r7, pc}
 8010bf4:	24000098 	.word	0x24000098

08010bf8 <wizchip_spi_write_buf>:
 * @return void
 * @note It is use @ref wizchip_spi_write() as default. \n
 *       It can be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
void wizchip_spi_write_buf(uint8_t* buf, datasize_t len)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b084      	sub	sp, #16
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
 8010c00:	460b      	mov	r3, r1
 8010c02:	807b      	strh	r3, [r7, #2]
   for(datasize_t i=0; i < len; i++) WIZCHIP.IF.SPI._write_byte(*buf++);
 8010c04:	2300      	movs	r3, #0
 8010c06:	81fb      	strh	r3, [r7, #14]
 8010c08:	e00d      	b.n	8010c26 <wizchip_spi_write_buf+0x2e>
 8010c0a:	4b0c      	ldr	r3, [pc, #48]	; (8010c3c <wizchip_spi_write_buf+0x44>)
 8010c0c:	69da      	ldr	r2, [r3, #28]
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	1c59      	adds	r1, r3, #1
 8010c12:	6079      	str	r1, [r7, #4]
 8010c14:	781b      	ldrb	r3, [r3, #0]
 8010c16:	4618      	mov	r0, r3
 8010c18:	4790      	blx	r2
 8010c1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010c1e:	b29b      	uxth	r3, r3
 8010c20:	3301      	adds	r3, #1
 8010c22:	b29b      	uxth	r3, r3
 8010c24:	81fb      	strh	r3, [r7, #14]
 8010c26:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010c2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	dbeb      	blt.n	8010c0a <wizchip_spi_write_buf+0x12>
}
 8010c32:	bf00      	nop
 8010c34:	bf00      	nop
 8010c36:	3710      	adds	r7, #16
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}
 8010c3c:	24000098 	.word	0x24000098

08010c40 <reg_wizchip_cs_cbfunc>:
   if(!cris_ex)   WIZCHIP.CRIS._e_x_i_t_  = wizchip_cris_exit;
   else           WIZCHIP.CRIS._e_x_i_t_  = cris_ex;
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8010c40:	b480      	push	{r7}
 8010c42:	b083      	sub	sp, #12
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	6039      	str	r1, [r7, #0]
   if(!cs_sel)    WIZCHIP.CS._s_e_l_e_c_t_   = wizchip_cs_select;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d103      	bne.n	8010c58 <reg_wizchip_cs_cbfunc+0x18>
 8010c50:	4b0b      	ldr	r3, [pc, #44]	; (8010c80 <reg_wizchip_cs_cbfunc+0x40>)
 8010c52:	4a0c      	ldr	r2, [pc, #48]	; (8010c84 <reg_wizchip_cs_cbfunc+0x44>)
 8010c54:	611a      	str	r2, [r3, #16]
 8010c56:	e002      	b.n	8010c5e <reg_wizchip_cs_cbfunc+0x1e>
   else           WIZCHIP.CS._s_e_l_e_c_t_   = cs_sel; 
 8010c58:	4a09      	ldr	r2, [pc, #36]	; (8010c80 <reg_wizchip_cs_cbfunc+0x40>)
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6113      	str	r3, [r2, #16]
   if(!cs_desel)  WIZCHIP.CS._d_e_s_e_l_e_c_t_ = wizchip_cs_deselect;
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d103      	bne.n	8010c6c <reg_wizchip_cs_cbfunc+0x2c>
 8010c64:	4b06      	ldr	r3, [pc, #24]	; (8010c80 <reg_wizchip_cs_cbfunc+0x40>)
 8010c66:	4a08      	ldr	r2, [pc, #32]	; (8010c88 <reg_wizchip_cs_cbfunc+0x48>)
 8010c68:	615a      	str	r2, [r3, #20]
   else           WIZCHIP.CS._d_e_s_e_l_e_c_t_ = cs_desel;
}
 8010c6a:	e002      	b.n	8010c72 <reg_wizchip_cs_cbfunc+0x32>
   else           WIZCHIP.CS._d_e_s_e_l_e_c_t_ = cs_desel;
 8010c6c:	4a04      	ldr	r2, [pc, #16]	; (8010c80 <reg_wizchip_cs_cbfunc+0x40>)
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	6153      	str	r3, [r2, #20]
}
 8010c72:	bf00      	nop
 8010c74:	370c      	adds	r7, #12
 8010c76:	46bd      	mov	sp, r7
 8010c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7c:	4770      	bx	lr
 8010c7e:	bf00      	nop
 8010c80:	24000098 	.word	0x24000098
 8010c84:	08010b6d 	.word	0x08010b6d
 8010c88:	08010b7b 	.word	0x08010b7b

08010c8c <reg_wizchip_spi_cbfunc>:
#if (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_)
void reg_wizchip_spi_cbfunc( uint8_t (*spi_rb)(void), 
                             void (*spi_wb)(uint8_t wb),
                             void (*spi_rbuf)(uint8_t* buf, datasize_t len),
                             void (*spi_wbuf)(uint8_t* buf, datasize_t len) )
{
 8010c8c:	b480      	push	{r7}
 8010c8e:	b085      	sub	sp, #20
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	60f8      	str	r0, [r7, #12]
 8010c94:	60b9      	str	r1, [r7, #8]
 8010c96:	607a      	str	r2, [r7, #4]
 8010c98:	603b      	str	r3, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8010c9a:	bf00      	nop
 8010c9c:	4b19      	ldr	r3, [pc, #100]	; (8010d04 <reg_wizchip_spi_cbfunc+0x78>)
 8010c9e:	881b      	ldrh	r3, [r3, #0]
 8010ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d0f9      	beq.n	8010c9c <reg_wizchip_spi_cbfunc+0x10>
   
   if(!spi_rb)    WIZCHIP.IF.SPI._read_byte      = wizchip_spi_read;
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d103      	bne.n	8010cb6 <reg_wizchip_spi_cbfunc+0x2a>
 8010cae:	4b15      	ldr	r3, [pc, #84]	; (8010d04 <reg_wizchip_spi_cbfunc+0x78>)
 8010cb0:	4a15      	ldr	r2, [pc, #84]	; (8010d08 <reg_wizchip_spi_cbfunc+0x7c>)
 8010cb2:	619a      	str	r2, [r3, #24]
 8010cb4:	e002      	b.n	8010cbc <reg_wizchip_spi_cbfunc+0x30>
   else           WIZCHIP.IF.SPI._read_byte      = spi_rb;
 8010cb6:	4a13      	ldr	r2, [pc, #76]	; (8010d04 <reg_wizchip_spi_cbfunc+0x78>)
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	6193      	str	r3, [r2, #24]
   if(!spi_wb)    WIZCHIP.IF.SPI._write_byte     = wizchip_spi_write;
 8010cbc:	68bb      	ldr	r3, [r7, #8]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d103      	bne.n	8010cca <reg_wizchip_spi_cbfunc+0x3e>
 8010cc2:	4b10      	ldr	r3, [pc, #64]	; (8010d04 <reg_wizchip_spi_cbfunc+0x78>)
 8010cc4:	4a11      	ldr	r2, [pc, #68]	; (8010d0c <reg_wizchip_spi_cbfunc+0x80>)
 8010cc6:	61da      	str	r2, [r3, #28]
 8010cc8:	e002      	b.n	8010cd0 <reg_wizchip_spi_cbfunc+0x44>
   else           WIZCHIP.IF.SPI._write_byte     = spi_wb;
 8010cca:	4a0e      	ldr	r2, [pc, #56]	; (8010d04 <reg_wizchip_spi_cbfunc+0x78>)
 8010ccc:	68bb      	ldr	r3, [r7, #8]
 8010cce:	61d3      	str	r3, [r2, #28]

   if(!spi_rbuf)  WIZCHIP.IF.SPI._read_byte_buf  = wizchip_spi_read_buf;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d103      	bne.n	8010cde <reg_wizchip_spi_cbfunc+0x52>
 8010cd6:	4b0b      	ldr	r3, [pc, #44]	; (8010d04 <reg_wizchip_spi_cbfunc+0x78>)
 8010cd8:	4a0d      	ldr	r2, [pc, #52]	; (8010d10 <reg_wizchip_spi_cbfunc+0x84>)
 8010cda:	621a      	str	r2, [r3, #32]
 8010cdc:	e002      	b.n	8010ce4 <reg_wizchip_spi_cbfunc+0x58>
   else           WIZCHIP.IF.SPI._read_byte_buf  = spi_rbuf;
 8010cde:	4a09      	ldr	r2, [pc, #36]	; (8010d04 <reg_wizchip_spi_cbfunc+0x78>)
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6213      	str	r3, [r2, #32]
   if(!spi_wbuf)  WIZCHIP.IF.SPI._write_byte_buf = wizchip_spi_write_buf;
 8010ce4:	683b      	ldr	r3, [r7, #0]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d103      	bne.n	8010cf2 <reg_wizchip_spi_cbfunc+0x66>
 8010cea:	4b06      	ldr	r3, [pc, #24]	; (8010d04 <reg_wizchip_spi_cbfunc+0x78>)
 8010cec:	4a09      	ldr	r2, [pc, #36]	; (8010d14 <reg_wizchip_spi_cbfunc+0x88>)
 8010cee:	625a      	str	r2, [r3, #36]	; 0x24
   else           WIZCHIP.IF.SPI._write_byte_buf = spi_wbuf;
}
 8010cf0:	e002      	b.n	8010cf8 <reg_wizchip_spi_cbfunc+0x6c>
   else           WIZCHIP.IF.SPI._write_byte_buf = spi_wbuf;
 8010cf2:	4a04      	ldr	r2, [pc, #16]	; (8010d04 <reg_wizchip_spi_cbfunc+0x78>)
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	6253      	str	r3, [r2, #36]	; 0x24
}
 8010cf8:	bf00      	nop
 8010cfa:	3714      	adds	r7, #20
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d02:	4770      	bx	lr
 8010d04:	24000098 	.word	0x24000098
 8010d08:	08010b89 	.word	0x08010b89
 8010d0c:	08010b99 	.word	0x08010b99
 8010d10:	08010bb1 	.word	0x08010bb1
 8010d14:	08010bf9 	.word	0x08010bf9

08010d18 <ctlwizchip>:
#endif

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8010d18:	b590      	push	{r4, r7, lr}
 8010d1a:	b087      	sub	sp, #28
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	4603      	mov	r3, r0
 8010d20:	6039      	str	r1, [r7, #0]
 8010d22:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = *(uint8_t*) arg;
 8010d24:	683b      	ldr	r3, [r7, #0]
 8010d26:	781b      	ldrb	r3, [r3, #0]
 8010d28:	75fb      	strb	r3, [r7, #23]

   uint8_t* ptmp[2] = {0,0};
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	60fb      	str	r3, [r7, #12]
 8010d2e:	2300      	movs	r3, #0
 8010d30:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8010d32:	79fb      	ldrb	r3, [r7, #7]
 8010d34:	2b17      	cmp	r3, #23
 8010d36:	f200 8163 	bhi.w	8011000 <ctlwizchip+0x2e8>
 8010d3a:	a201      	add	r2, pc, #4	; (adr r2, 8010d40 <ctlwizchip+0x28>)
 8010d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d40:	08010da1 	.word	0x08010da1
 8010d44:	08010ddb 	.word	0x08010ddb
 8010d48:	08010e15 	.word	0x08010e15
 8010d4c:	08010e29 	.word	0x08010e29
 8010d50:	08010e2f 	.word	0x08010e2f
 8010d54:	08010e4f 	.word	0x08010e4f
 8010d58:	08010e5b 	.word	0x08010e5b
 8010d5c:	08010e67 	.word	0x08010e67
 8010d60:	08010e73 	.word	0x08010e73
 8010d64:	08010e7f 	.word	0x08010e7f
 8010d68:	08010ea1 	.word	0x08010ea1
 8010d6c:	08010ec3 	.word	0x08010ec3
 8010d70:	08010ef9 	.word	0x08010ef9
 8010d74:	08010f0b 	.word	0x08010f0b
 8010d78:	08010f45 	.word	0x08010f45
 8010d7c:	08010f6b 	.word	0x08010f6b
 8010d80:	08010fa9 	.word	0x08010fa9
 8010d84:	08010fbd 	.word	0x08010fbd
 8010d88:	08010fc3 	.word	0x08010fc3
 8010d8c:	08010fcb 	.word	0x08010fcb
 8010d90:	08010fd3 	.word	0x08010fd3
 8010d94:	08010fdb 	.word	0x08010fdb
 8010d98:	08010fe5 	.word	0x08010fe5
 8010d9c:	08010ff3 	.word	0x08010ff3
   {
      case CW_SYS_LOCK:
         if(tmp & SYS_CHIP_LOCK) CHIPLOCK();
 8010da0:	7dfb      	ldrb	r3, [r7, #23]
 8010da2:	f003 0304 	and.w	r3, r3, #4
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d003      	beq.n	8010db2 <ctlwizchip+0x9a>
 8010daa:	21ff      	movs	r1, #255	; 0xff
 8010dac:	489b      	ldr	r0, [pc, #620]	; (801101c <ctlwizchip+0x304>)
 8010dae:	f7fe fcd5 	bl	800f75c <WIZCHIP_WRITE>
         if(tmp & SYS_NET_LOCK)  NETLOCK();
 8010db2:	7dfb      	ldrb	r3, [r7, #23]
 8010db4:	f003 0302 	and.w	r3, r3, #2
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d003      	beq.n	8010dc4 <ctlwizchip+0xac>
 8010dbc:	21c5      	movs	r1, #197	; 0xc5
 8010dbe:	4898      	ldr	r0, [pc, #608]	; (8011020 <ctlwizchip+0x308>)
 8010dc0:	f7fe fccc 	bl	800f75c <WIZCHIP_WRITE>
         if(tmp & SYS_PHY_LOCK)  PHYLOCK();
 8010dc4:	7dfb      	ldrb	r3, [r7, #23]
 8010dc6:	f003 0301 	and.w	r3, r3, #1
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	f000 811b 	beq.w	8011006 <ctlwizchip+0x2ee>
 8010dd0:	21ff      	movs	r1, #255	; 0xff
 8010dd2:	4894      	ldr	r0, [pc, #592]	; (8011024 <ctlwizchip+0x30c>)
 8010dd4:	f7fe fcc2 	bl	800f75c <WIZCHIP_WRITE>
         break;
 8010dd8:	e115      	b.n	8011006 <ctlwizchip+0x2ee>
      case CW_SYS_UNLOCK:
         if(tmp & SYS_CHIP_LOCK) CHIPUNLOCK();
 8010dda:	7dfb      	ldrb	r3, [r7, #23]
 8010ddc:	f003 0304 	and.w	r3, r3, #4
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d003      	beq.n	8010dec <ctlwizchip+0xd4>
 8010de4:	21ce      	movs	r1, #206	; 0xce
 8010de6:	488d      	ldr	r0, [pc, #564]	; (801101c <ctlwizchip+0x304>)
 8010de8:	f7fe fcb8 	bl	800f75c <WIZCHIP_WRITE>
         if(tmp & SYS_NET_LOCK)  NETUNLOCK();
 8010dec:	7dfb      	ldrb	r3, [r7, #23]
 8010dee:	f003 0302 	and.w	r3, r3, #2
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d003      	beq.n	8010dfe <ctlwizchip+0xe6>
 8010df6:	213a      	movs	r1, #58	; 0x3a
 8010df8:	4889      	ldr	r0, [pc, #548]	; (8011020 <ctlwizchip+0x308>)
 8010dfa:	f7fe fcaf 	bl	800f75c <WIZCHIP_WRITE>
         if(tmp & SYS_PHY_LOCK)  PHYUNLOCK();
 8010dfe:	7dfb      	ldrb	r3, [r7, #23]
 8010e00:	f003 0301 	and.w	r3, r3, #1
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	f000 8100 	beq.w	801100a <ctlwizchip+0x2f2>
 8010e0a:	2153      	movs	r1, #83	; 0x53
 8010e0c:	4885      	ldr	r0, [pc, #532]	; (8011024 <ctlwizchip+0x30c>)
 8010e0e:	f7fe fca5 	bl	800f75c <WIZCHIP_WRITE>
         break;
 8010e12:	e0fa      	b.n	801100a <ctlwizchip+0x2f2>
      case CW_GET_SYSLOCK:
         *(uint8_t*)arg = getSYSR() >> 5;
 8010e14:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8010e18:	f7fe fcb0 	bl	800f77c <WIZCHIP_READ>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	095b      	lsrs	r3, r3, #5
 8010e20:	b2da      	uxtb	r2, r3
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	701a      	strb	r2, [r3, #0]
         break;
 8010e26:	e0f3      	b.n	8011010 <ctlwizchip+0x2f8>
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8010e28:	f000 f958 	bl	80110dc <wizchip_sw_reset>
         break;
 8010e2c:	e0f0      	b.n	8011010 <ctlwizchip+0x2f8>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d004      	beq.n	8010e3e <ctlwizchip+0x126>
         {
            ptmp[0] = (uint8_t*)arg;
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	3308      	adds	r3, #8
 8010e3c:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	693a      	ldr	r2, [r7, #16]
 8010e42:	4611      	mov	r1, r2
 8010e44:	4618      	mov	r0, r3
 8010e46:	f000 f9fd 	bl	8011244 <wizchip_init>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	e0e1      	b.n	8011012 <ctlwizchip+0x2fa>
      case CW_GET_INTERRUPT:
        *(intr_kind*)arg = wizchip_getinterrupt();
 8010e4e:	f000 fabf 	bl	80113d0 <wizchip_getinterrupt>
 8010e52:	4602      	mov	r2, r0
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	601a      	str	r2, [r3, #0]
         break;
 8010e58:	e0da      	b.n	8011010 <ctlwizchip+0x2f8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*(intr_kind*)arg);
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f000 fa7c 	bl	801135c <wizchip_clrinterrupt>
         break;
 8010e64:	e0d4      	b.n	8011010 <ctlwizchip+0x2f8>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*(intr_kind*)arg);
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f000 face 	bl	801140c <wizchip_setinterruptmask>
         break;         
 8010e70:	e0ce      	b.n	8011010 <ctlwizchip+0x2f8>
      case CW_GET_INTRMASK:
         *(intr_kind*)arg = wizchip_getinterruptmask();
 8010e72:	f000 faf1 	bl	8011458 <wizchip_getinterruptmask>
 8010e76:	4602      	mov	r2, r0
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	601a      	str	r2, [r3, #0]
         break;   
 8010e7c:	e0c8      	b.n	8011010 <ctlwizchip+0x2f8>
      case CW_SET_INTRTIME:
         setINTPTMR(*(uint16_t*)arg);
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	881b      	ldrh	r3, [r3, #0]
 8010e82:	0a1b      	lsrs	r3, r3, #8
 8010e84:	b29b      	uxth	r3, r3
 8010e86:	b2db      	uxtb	r3, r3
 8010e88:	4619      	mov	r1, r3
 8010e8a:	4867      	ldr	r0, [pc, #412]	; (8011028 <ctlwizchip+0x310>)
 8010e8c:	f7fe fc66 	bl	800f75c <WIZCHIP_WRITE>
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	881b      	ldrh	r3, [r3, #0]
 8010e94:	b2db      	uxtb	r3, r3
 8010e96:	4619      	mov	r1, r3
 8010e98:	4864      	ldr	r0, [pc, #400]	; (801102c <ctlwizchip+0x314>)
 8010e9a:	f7fe fc5f 	bl	800f75c <WIZCHIP_WRITE>
         break;
 8010e9e:	e0b7      	b.n	8011010 <ctlwizchip+0x2f8>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTPTMR();
 8010ea0:	4861      	ldr	r0, [pc, #388]	; (8011028 <ctlwizchip+0x310>)
 8010ea2:	f7fe fc6b 	bl	800f77c <WIZCHIP_READ>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	b29b      	uxth	r3, r3
 8010eaa:	021b      	lsls	r3, r3, #8
 8010eac:	b29c      	uxth	r4, r3
 8010eae:	485f      	ldr	r0, [pc, #380]	; (801102c <ctlwizchip+0x314>)
 8010eb0:	f7fe fc64 	bl	800f77c <WIZCHIP_READ>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	b29b      	uxth	r3, r3
 8010eb8:	4423      	add	r3, r4
 8010eba:	b29a      	uxth	r2, r3
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	801a      	strh	r2, [r3, #0]
         break;   
 8010ec0:	e0a6      	b.n	8011010 <ctlwizchip+0x2f8>
      case CW_SET_IEN:
         tmp = getSYCR1();
 8010ec2:	485b      	ldr	r0, [pc, #364]	; (8011030 <ctlwizchip+0x318>)
 8010ec4:	f7fe fc5a 	bl	800f77c <WIZCHIP_READ>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	75fb      	strb	r3, [r7, #23]
         if(*(uint8_t*)arg == 1) setSYCR1(tmp | SYCR1_IEN);
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	781b      	ldrb	r3, [r3, #0]
 8010ed0:	2b01      	cmp	r3, #1
 8010ed2:	d108      	bne.n	8010ee6 <ctlwizchip+0x1ce>
 8010ed4:	7dfb      	ldrb	r3, [r7, #23]
 8010ed6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010eda:	b2db      	uxtb	r3, r3
 8010edc:	4619      	mov	r1, r3
 8010ede:	4854      	ldr	r0, [pc, #336]	; (8011030 <ctlwizchip+0x318>)
 8010ee0:	f7fe fc3c 	bl	800f75c <WIZCHIP_WRITE>
         else                      setSYCR1(tmp & ~SYCR1_IEN);
         break;
 8010ee4:	e094      	b.n	8011010 <ctlwizchip+0x2f8>
         else                      setSYCR1(tmp & ~SYCR1_IEN);
 8010ee6:	7dfb      	ldrb	r3, [r7, #23]
 8010ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010eec:	b2db      	uxtb	r3, r3
 8010eee:	4619      	mov	r1, r3
 8010ef0:	484f      	ldr	r0, [pc, #316]	; (8011030 <ctlwizchip+0x318>)
 8010ef2:	f7fe fc33 	bl	800f75c <WIZCHIP_WRITE>
         break;
 8010ef6:	e08b      	b.n	8011010 <ctlwizchip+0x2f8>
      case CW_GET_IEN:
         *((uint8_t*)arg) = getSYCR1() >> 7;
 8010ef8:	484d      	ldr	r0, [pc, #308]	; (8011030 <ctlwizchip+0x318>)
 8010efa:	f7fe fc3f 	bl	800f77c <WIZCHIP_READ>
 8010efe:	4603      	mov	r3, r0
 8010f00:	09db      	lsrs	r3, r3, #7
 8010f02:	b2da      	uxtb	r2, r3
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	701a      	strb	r2, [r3, #0]
         break;
 8010f08:	e082      	b.n	8011010 <ctlwizchip+0x2f8>
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8010f0a:	4b4a      	ldr	r3, [pc, #296]	; (8011034 <ctlwizchip+0x31c>)
 8010f0c:	789a      	ldrb	r2, [r3, #2]
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	3301      	adds	r3, #1
 8010f16:	4a47      	ldr	r2, [pc, #284]	; (8011034 <ctlwizchip+0x31c>)
 8010f18:	78d2      	ldrb	r2, [r2, #3]
 8010f1a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	3302      	adds	r3, #2
 8010f20:	4a44      	ldr	r2, [pc, #272]	; (8011034 <ctlwizchip+0x31c>)
 8010f22:	7912      	ldrb	r2, [r2, #4]
 8010f24:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	3303      	adds	r3, #3
 8010f2a:	4a42      	ldr	r2, [pc, #264]	; (8011034 <ctlwizchip+0x31c>)
 8010f2c:	7952      	ldrb	r2, [r2, #5]
 8010f2e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8010f30:	683b      	ldr	r3, [r7, #0]
 8010f32:	3304      	adds	r3, #4
 8010f34:	4a3f      	ldr	r2, [pc, #252]	; (8011034 <ctlwizchip+0x31c>)
 8010f36:	7992      	ldrb	r2, [r2, #6]
 8010f38:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	3305      	adds	r3, #5
 8010f3e:	2200      	movs	r2, #0
 8010f40:	701a      	strb	r2, [r3, #0]
         break;   
 8010f42:	e065      	b.n	8011010 <ctlwizchip+0x2f8>
      case CW_GET_VER:
         *(uint16_t*)arg = getVER();
 8010f44:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010f48:	f7fe fc18 	bl	800f77c <WIZCHIP_READ>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	b29b      	uxth	r3, r3
 8010f50:	021b      	lsls	r3, r3, #8
 8010f52:	b29c      	uxth	r4, r3
 8010f54:	f44f 7040 	mov.w	r0, #768	; 0x300
 8010f58:	f7fe fc10 	bl	800f77c <WIZCHIP_READ>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	b29b      	uxth	r3, r3
 8010f60:	4423      	add	r3, r4
 8010f62:	b29a      	uxth	r2, r3
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	801a      	strh	r2, [r3, #0]
         break;
 8010f68:	e052      	b.n	8011010 <ctlwizchip+0x2f8>
      case CW_SET_SYSCLK:
         tmp = getSYCR1();
 8010f6a:	4831      	ldr	r0, [pc, #196]	; (8011030 <ctlwizchip+0x318>)
 8010f6c:	f7fe fc06 	bl	800f77c <WIZCHIP_READ>
 8010f70:	4603      	mov	r3, r0
 8010f72:	75fb      	strb	r3, [r7, #23]
         if(*(uint8_t*)arg == SYSCLK_100MHZ)     setSYCR1(tmp & ~SYCR1_CLKSEL);
 8010f74:	683b      	ldr	r3, [r7, #0]
 8010f76:	781b      	ldrb	r3, [r3, #0]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d108      	bne.n	8010f8e <ctlwizchip+0x276>
 8010f7c:	7dfb      	ldrb	r3, [r7, #23]
 8010f7e:	f023 0301 	bic.w	r3, r3, #1
 8010f82:	b2db      	uxtb	r3, r3
 8010f84:	4619      	mov	r1, r3
 8010f86:	482a      	ldr	r0, [pc, #168]	; (8011030 <ctlwizchip+0x318>)
 8010f88:	f7fe fbe8 	bl	800f75c <WIZCHIP_WRITE>
         else if(*(uint8_t*)arg == SYSCLK_25MHZ) setSYCR1(tmp |  SYCR1_CLKSEL);
         break;
 8010f8c:	e03f      	b.n	801100e <ctlwizchip+0x2f6>
         else if(*(uint8_t*)arg == SYSCLK_25MHZ) setSYCR1(tmp |  SYCR1_CLKSEL);
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	781b      	ldrb	r3, [r3, #0]
 8010f92:	2b01      	cmp	r3, #1
 8010f94:	d13b      	bne.n	801100e <ctlwizchip+0x2f6>
 8010f96:	7dfb      	ldrb	r3, [r7, #23]
 8010f98:	f043 0301 	orr.w	r3, r3, #1
 8010f9c:	b2db      	uxtb	r3, r3
 8010f9e:	4619      	mov	r1, r3
 8010fa0:	4823      	ldr	r0, [pc, #140]	; (8011030 <ctlwizchip+0x318>)
 8010fa2:	f7fe fbdb 	bl	800f75c <WIZCHIP_WRITE>
         break;
 8010fa6:	e032      	b.n	801100e <ctlwizchip+0x2f6>
      case CW_GET_SYSCLK:
         *(uint8_t*)arg = (getSYCR1() & SYCR1_CLKSEL);
 8010fa8:	4821      	ldr	r0, [pc, #132]	; (8011030 <ctlwizchip+0x318>)
 8010faa:	f7fe fbe7 	bl	800f77c <WIZCHIP_READ>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	f003 0301 	and.w	r3, r3, #1
 8010fb4:	b2da      	uxtb	r2, r3
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	701a      	strb	r2, [r3, #0]
         break;
 8010fba:	e029      	b.n	8011010 <ctlwizchip+0x2f8>
      case CW_RESET_PHY:
         wizphy_reset();
 8010fbc:	f000 fa7a 	bl	80114b4 <wizphy_reset>
         break;
 8010fc0:	e026      	b.n	8011010 <ctlwizchip+0x2f8>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8010fc2:	6838      	ldr	r0, [r7, #0]
 8010fc4:	f000 fa96 	bl	80114f4 <wizphy_setphyconf>
         break;
 8010fc8:	e022      	b.n	8011010 <ctlwizchip+0x2f8>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8010fca:	6838      	ldr	r0, [r7, #0]
 8010fcc:	f000 fade 	bl	801158c <wizphy_getphyconf>
         break;
 8010fd0:	e01e      	b.n	8011010 <ctlwizchip+0x2f8>
      case CW_GET_PHYSTATUS:
         wizphy_getphystatus((wiz_PhyConf*)arg);
 8010fd2:	6838      	ldr	r0, [r7, #0]
 8010fd4:	f000 fb1a 	bl	801160c <wizphy_getphystatus>
         break;
 8010fd8:	e01a      	b.n	8011010 <ctlwizchip+0x2f8>
      case CW_SET_PHYPOWMODE:
         wizphy_setphypmode(tmp);
 8010fda:	7dfb      	ldrb	r3, [r7, #23]
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f000 fb55 	bl	801168c <wizphy_setphypmode>
         break;
 8010fe2:	e015      	b.n	8011010 <ctlwizchip+0x2f8>
      case CW_GET_PHYPOWMODE:
         *(uint8_t*)arg = wizphy_getphypmode();
 8010fe4:	f000 fb74 	bl	80116d0 <wizphy_getphypmode>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	b2da      	uxtb	r2, r3
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	701a      	strb	r2, [r3, #0]
         break;
 8010ff0:	e00e      	b.n	8011010 <ctlwizchip+0x2f8>
      case CW_GET_PHYLINK:
         *(uint8_t*)arg = wizphy_getphylink();
 8010ff2:	f000 fa51 	bl	8011498 <wizphy_getphylink>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	b2da      	uxtb	r2, r3
 8010ffa:	683b      	ldr	r3, [r7, #0]
 8010ffc:	701a      	strb	r2, [r3, #0]
         break;
 8010ffe:	e007      	b.n	8011010 <ctlwizchip+0x2f8>
      default:
         return -1;
 8011000:	f04f 33ff 	mov.w	r3, #4294967295
 8011004:	e005      	b.n	8011012 <ctlwizchip+0x2fa>
         break;
 8011006:	bf00      	nop
 8011008:	e002      	b.n	8011010 <ctlwizchip+0x2f8>
         break;
 801100a:	bf00      	nop
 801100c:	e000      	b.n	8011010 <ctlwizchip+0x2f8>
         break;
 801100e:	bf00      	nop
   }
   return 0;
 8011010:	2300      	movs	r3, #0
}
 8011012:	4618      	mov	r0, r3
 8011014:	371c      	adds	r7, #28
 8011016:	46bd      	mov	sp, r7
 8011018:	bd90      	pop	{r4, r7, pc}
 801101a:	bf00      	nop
 801101c:	0041f400 	.word	0x0041f400
 8011020:	0041f500 	.word	0x0041f500
 8011024:	0041f600 	.word	0x0041f600
 8011028:	0041c500 	.word	0x0041c500
 801102c:	0041c600 	.word	0x0041c600
 8011030:	00200500 	.word	0x00200500
 8011034:	24000098 	.word	0x24000098

08011038 <ctlnetwork>:

int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b082      	sub	sp, #8
 801103c:	af00      	add	r7, sp, #0
 801103e:	4603      	mov	r3, r0
 8011040:	6039      	str	r1, [r7, #0]
 8011042:	71fb      	strb	r3, [r7, #7]
   switch(cntype)
 8011044:	79fb      	ldrb	r3, [r7, #7]
 8011046:	2b07      	cmp	r3, #7
 8011048:	d83d      	bhi.n	80110c6 <ctlnetwork+0x8e>
 801104a:	a201      	add	r2, pc, #4	; (adr r2, 8011050 <ctlnetwork+0x18>)
 801104c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011050:	08011071 	.word	0x08011071
 8011054:	08011079 	.word	0x08011079
 8011058:	08011081 	.word	0x08011081
 801105c:	0801108d 	.word	0x0801108d
 8011060:	08011099 	.word	0x08011099
 8011064:	080110a1 	.word	0x080110a1
 8011068:	080110a9 	.word	0x080110a9
 801106c:	080110b7 	.word	0x080110b7
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8011070:	6838      	ldr	r0, [r7, #0]
 8011072:	f000 fb3f 	bl	80116f4 <wizchip_setnetinfo>
         break;
 8011076:	e029      	b.n	80110cc <ctlnetwork+0x94>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8011078:	6838      	ldr	r0, [r7, #0]
 801107a:	f000 fbb9 	bl	80117f0 <wizchip_getnetinfo>
         break;
 801107e:	e025      	b.n	80110cc <ctlnetwork+0x94>
      case CN_SET_NETMODE:
         wizchip_setnetmode(*(netmode_type*)arg);
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	4618      	mov	r0, r3
 8011086:	f000 fc33 	bl	80118f0 <wizchip_setnetmode>
         break;
 801108a:	e01f      	b.n	80110cc <ctlnetwork+0x94>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 801108c:	f000 fc5c 	bl	8011948 <wizchip_getnetmode>
 8011090:	4602      	mov	r2, r0
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	601a      	str	r2, [r3, #0]
         break;
 8011096:	e019      	b.n	80110cc <ctlnetwork+0x94>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8011098:	6838      	ldr	r0, [r7, #0]
 801109a:	f000 fc83 	bl	80119a4 <wizchip_settimeout>
         break;
 801109e:	e015      	b.n	80110cc <ctlnetwork+0x94>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 80110a0:	6838      	ldr	r0, [r7, #0]
 80110a2:	f000 fcbf 	bl	8011a24 <wizchip_gettimeout>
         break;
 80110a6:	e011      	b.n	80110cc <ctlnetwork+0x94>
      case CN_SET_PREFER:
         setSLPSR(*(uint8_t*)arg);
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	781b      	ldrb	r3, [r3, #0]
 80110ac:	4619      	mov	r1, r3
 80110ae:	480a      	ldr	r0, [pc, #40]	; (80110d8 <ctlnetwork+0xa0>)
 80110b0:	f7fe fb54 	bl	800f75c <WIZCHIP_WRITE>
         break;
 80110b4:	e00a      	b.n	80110cc <ctlnetwork+0x94>
      case CN_GET_PREFER:
    	  *(uint8_t*)arg= getSLPSR();
 80110b6:	4808      	ldr	r0, [pc, #32]	; (80110d8 <ctlnetwork+0xa0>)
 80110b8:	f7fe fb60 	bl	800f77c <WIZCHIP_READ>
 80110bc:	4603      	mov	r3, r0
 80110be:	461a      	mov	r2, r3
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	701a      	strb	r2, [r3, #0]
         break;
 80110c4:	e002      	b.n	80110cc <ctlnetwork+0x94>
      default:
         return -1;
 80110c6:	f04f 33ff 	mov.w	r3, #4294967295
 80110ca:	e000      	b.n	80110ce <ctlnetwork+0x96>
   }
   return 0;
 80110cc:	2300      	movs	r3, #0
}
 80110ce:	4618      	mov	r0, r3
 80110d0:	3708      	adds	r7, #8
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd80      	pop	{r7, pc}
 80110d6:	bf00      	nop
 80110d8:	00212c00 	.word	0x00212c00

080110dc <wizchip_sw_reset>:
          break;
   }
}

void wizchip_sw_reset(void)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b096      	sub	sp, #88	; 0x58
 80110e0:	af00      	add	r7, sp, #0
   uint8_t gw[4], sn[4], sip[4], gw6[16], sn6[16], lla[16], gua[16];
   uint8_t mac[6];
   uint8_t islock = getSYSR();
 80110e2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80110e6:	f7fe fb49 	bl	800f77c <WIZCHIP_READ>
 80110ea:	4603      	mov	r3, r0
 80110ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

   CHIPUNLOCK();
 80110f0:	21ce      	movs	r1, #206	; 0xce
 80110f2:	4849      	ldr	r0, [pc, #292]	; (8011218 <wizchip_sw_reset+0x13c>)
 80110f4:	f7fe fb32 	bl	800f75c <WIZCHIP_WRITE>

   getSHAR(mac);
 80110f8:	463b      	mov	r3, r7
 80110fa:	2206      	movs	r2, #6
 80110fc:	4619      	mov	r1, r3
 80110fe:	4847      	ldr	r0, [pc, #284]	; (801121c <wizchip_sw_reset+0x140>)
 8011100:	f7fe fb5d 	bl	800f7be <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);	getGA6R(gw6); getSUB6R(sn6); getLLAR(lla); getGUAR(gua);
 8011104:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011108:	2204      	movs	r2, #4
 801110a:	4619      	mov	r1, r3
 801110c:	4844      	ldr	r0, [pc, #272]	; (8011220 <wizchip_sw_reset+0x144>)
 801110e:	f7fe fb56 	bl	800f7be <WIZCHIP_READ_BUF>
 8011112:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011116:	2204      	movs	r2, #4
 8011118:	4619      	mov	r1, r3
 801111a:	4842      	ldr	r0, [pc, #264]	; (8011224 <wizchip_sw_reset+0x148>)
 801111c:	f7fe fb4f 	bl	800f7be <WIZCHIP_READ_BUF>
 8011120:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011124:	2204      	movs	r2, #4
 8011126:	4619      	mov	r1, r3
 8011128:	483f      	ldr	r0, [pc, #252]	; (8011228 <wizchip_sw_reset+0x14c>)
 801112a:	f7fe fb48 	bl	800f7be <WIZCHIP_READ_BUF>
 801112e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011132:	2210      	movs	r2, #16
 8011134:	4619      	mov	r1, r3
 8011136:	483d      	ldr	r0, [pc, #244]	; (801122c <wizchip_sw_reset+0x150>)
 8011138:	f7fe fb41 	bl	800f7be <WIZCHIP_READ_BUF>
 801113c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011140:	2210      	movs	r2, #16
 8011142:	4619      	mov	r1, r3
 8011144:	483a      	ldr	r0, [pc, #232]	; (8011230 <wizchip_sw_reset+0x154>)
 8011146:	f7fe fb3a 	bl	800f7be <WIZCHIP_READ_BUF>
 801114a:	f107 0318 	add.w	r3, r7, #24
 801114e:	2210      	movs	r2, #16
 8011150:	4619      	mov	r1, r3
 8011152:	4838      	ldr	r0, [pc, #224]	; (8011234 <wizchip_sw_reset+0x158>)
 8011154:	f7fe fb33 	bl	800f7be <WIZCHIP_READ_BUF>
 8011158:	f107 0308 	add.w	r3, r7, #8
 801115c:	2210      	movs	r2, #16
 801115e:	4619      	mov	r1, r3
 8011160:	4835      	ldr	r0, [pc, #212]	; (8011238 <wizchip_sw_reset+0x15c>)
 8011162:	f7fe fb2c 	bl	800f7be <WIZCHIP_READ_BUF>
   setSYCR0(SYCR0_RST);
 8011166:	2100      	movs	r1, #0
 8011168:	4834      	ldr	r0, [pc, #208]	; (801123c <wizchip_sw_reset+0x160>)
 801116a:	f7fe faf7 	bl	800f75c <WIZCHIP_WRITE>
   getSYCR0(); // for delay
 801116e:	4833      	ldr	r0, [pc, #204]	; (801123c <wizchip_sw_reset+0x160>)
 8011170:	f7fe fb04 	bl	800f77c <WIZCHIP_READ>

   NETUNLOCK();
 8011174:	213a      	movs	r1, #58	; 0x3a
 8011176:	4832      	ldr	r0, [pc, #200]	; (8011240 <wizchip_sw_reset+0x164>)
 8011178:	f7fe faf0 	bl	800f75c <WIZCHIP_WRITE>

   setSHAR(mac);
 801117c:	463b      	mov	r3, r7
 801117e:	2206      	movs	r2, #6
 8011180:	4619      	mov	r1, r3
 8011182:	4826      	ldr	r0, [pc, #152]	; (801121c <wizchip_sw_reset+0x140>)
 8011184:	f7fe fb0a 	bl	800f79c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8011188:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801118c:	2204      	movs	r2, #4
 801118e:	4619      	mov	r1, r3
 8011190:	4823      	ldr	r0, [pc, #140]	; (8011220 <wizchip_sw_reset+0x144>)
 8011192:	f7fe fb03 	bl	800f79c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8011196:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801119a:	2204      	movs	r2, #4
 801119c:	4619      	mov	r1, r3
 801119e:	4821      	ldr	r0, [pc, #132]	; (8011224 <wizchip_sw_reset+0x148>)
 80111a0:	f7fe fafc 	bl	800f79c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80111a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80111a8:	2204      	movs	r2, #4
 80111aa:	4619      	mov	r1, r3
 80111ac:	481e      	ldr	r0, [pc, #120]	; (8011228 <wizchip_sw_reset+0x14c>)
 80111ae:	f7fe faf5 	bl	800f79c <WIZCHIP_WRITE_BUF>
   setGA6R(gw6); 
 80111b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80111b6:	2210      	movs	r2, #16
 80111b8:	4619      	mov	r1, r3
 80111ba:	481c      	ldr	r0, [pc, #112]	; (801122c <wizchip_sw_reset+0x150>)
 80111bc:	f7fe faee 	bl	800f79c <WIZCHIP_WRITE_BUF>
   setSUB6R(sn6); 
 80111c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80111c4:	2210      	movs	r2, #16
 80111c6:	4619      	mov	r1, r3
 80111c8:	4819      	ldr	r0, [pc, #100]	; (8011230 <wizchip_sw_reset+0x154>)
 80111ca:	f7fe fae7 	bl	800f79c <WIZCHIP_WRITE_BUF>
   setLLAR(lla);
 80111ce:	f107 0318 	add.w	r3, r7, #24
 80111d2:	2210      	movs	r2, #16
 80111d4:	4619      	mov	r1, r3
 80111d6:	4817      	ldr	r0, [pc, #92]	; (8011234 <wizchip_sw_reset+0x158>)
 80111d8:	f7fe fae0 	bl	800f79c <WIZCHIP_WRITE_BUF>
   setGUAR(gua);
 80111dc:	f107 0308 	add.w	r3, r7, #8
 80111e0:	2210      	movs	r2, #16
 80111e2:	4619      	mov	r1, r3
 80111e4:	4814      	ldr	r0, [pc, #80]	; (8011238 <wizchip_sw_reset+0x15c>)
 80111e6:	f7fe fad9 	bl	800f79c <WIZCHIP_WRITE_BUF>
   if(islock & SYSR_CHPL) CHIPLOCK();
 80111ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	da03      	bge.n	80111fa <wizchip_sw_reset+0x11e>
 80111f2:	21ff      	movs	r1, #255	; 0xff
 80111f4:	4808      	ldr	r0, [pc, #32]	; (8011218 <wizchip_sw_reset+0x13c>)
 80111f6:	f7fe fab1 	bl	800f75c <WIZCHIP_WRITE>
   if(islock & SYSR_NETL) NETLOCK();
 80111fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80111fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011202:	2b00      	cmp	r3, #0
 8011204:	d003      	beq.n	801120e <wizchip_sw_reset+0x132>
 8011206:	21c5      	movs	r1, #197	; 0xc5
 8011208:	480d      	ldr	r0, [pc, #52]	; (8011240 <wizchip_sw_reset+0x164>)
 801120a:	f7fe faa7 	bl	800f75c <WIZCHIP_WRITE>
}
 801120e:	bf00      	nop
 8011210:	3758      	adds	r7, #88	; 0x58
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop
 8011218:	0041f400 	.word	0x0041f400
 801121c:	00412000 	.word	0x00412000
 8011220:	00413000 	.word	0x00413000
 8011224:	00413400 	.word	0x00413400
 8011228:	00413800 	.word	0x00413800
 801122c:	00417000 	.word	0x00417000
 8011230:	00416000 	.word	0x00416000
 8011234:	00414000 	.word	0x00414000
 8011238:	00415000 	.word	0x00415000
 801123c:	00200400 	.word	0x00200400
 8011240:	0041f500 	.word	0x0041f500

08011244 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b084      	sub	sp, #16
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
 801124c:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 801124e:	2300      	movs	r3, #0
 8011250:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8011252:	f7ff ff43 	bl	80110dc <wizchip_sw_reset>
   if(txsize)
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d03b      	beq.n	80112d4 <wizchip_init+0x90>
   {
      tmp = 0;
 801125c:	2300      	movs	r3, #0
 801125e:	73bb      	strb	r3, [r7, #14]
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8011260:	2300      	movs	r3, #0
 8011262:	73fb      	strb	r3, [r7, #15]
 8011264:	e015      	b.n	8011292 <wizchip_init+0x4e>
			{
				tmp += txsize[i];		
 8011266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801126a:	687a      	ldr	r2, [r7, #4]
 801126c:	4413      	add	r3, r2
 801126e:	781a      	ldrb	r2, [r3, #0]
 8011270:	7bbb      	ldrb	r3, [r7, #14]
 8011272:	4413      	add	r3, r2
 8011274:	b2db      	uxtb	r3, r3
 8011276:	73bb      	strb	r3, [r7, #14]
				if(tmp > 2*_WIZCHIP_SOCK_NUM_) return -1;		
 8011278:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801127c:	2b10      	cmp	r3, #16
 801127e:	dd02      	ble.n	8011286 <wizchip_init+0x42>
 8011280:	f04f 33ff 	mov.w	r3, #4294967295
 8011284:	e066      	b.n	8011354 <wizchip_init+0x110>
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8011286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801128a:	b2db      	uxtb	r3, r3
 801128c:	3301      	adds	r3, #1
 801128e:	b2db      	uxtb	r3, r3
 8011290:	73fb      	strb	r3, [r7, #15]
 8011292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011296:	2b07      	cmp	r3, #7
 8011298:	dde5      	ble.n	8011266 <wizchip_init+0x22>
			}
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++) setSn_TXBUF_SIZE(i, txsize[i]);			
 801129a:	2300      	movs	r3, #0
 801129c:	73fb      	strb	r3, [r7, #15]
 801129e:	e015      	b.n	80112cc <wizchip_init+0x88>
 80112a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112a4:	009b      	lsls	r3, r3, #2
 80112a6:	3301      	adds	r3, #1
 80112a8:	00db      	lsls	r3, r3, #3
 80112aa:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80112ae:	4618      	mov	r0, r3
 80112b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112b4:	687a      	ldr	r2, [r7, #4]
 80112b6:	4413      	add	r3, r2
 80112b8:	781b      	ldrb	r3, [r3, #0]
 80112ba:	4619      	mov	r1, r3
 80112bc:	f7fe fa4e 	bl	800f75c <WIZCHIP_WRITE>
 80112c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112c4:	b2db      	uxtb	r3, r3
 80112c6:	3301      	adds	r3, #1
 80112c8:	b2db      	uxtb	r3, r3
 80112ca:	73fb      	strb	r3, [r7, #15]
 80112cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112d0:	2b07      	cmp	r3, #7
 80112d2:	dde5      	ble.n	80112a0 <wizchip_init+0x5c>
   }
   if(rxsize)
 80112d4:	683b      	ldr	r3, [r7, #0]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d03b      	beq.n	8011352 <wizchip_init+0x10e>
   {
      tmp = 0;
 80112da:	2300      	movs	r3, #0
 80112dc:	73bb      	strb	r3, [r7, #14]
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80112de:	2300      	movs	r3, #0
 80112e0:	73fb      	strb	r3, [r7, #15]
 80112e2:	e015      	b.n	8011310 <wizchip_init+0xcc>
			{
				tmp += rxsize[i];		
 80112e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112e8:	683a      	ldr	r2, [r7, #0]
 80112ea:	4413      	add	r3, r2
 80112ec:	781a      	ldrb	r2, [r3, #0]
 80112ee:	7bbb      	ldrb	r3, [r7, #14]
 80112f0:	4413      	add	r3, r2
 80112f2:	b2db      	uxtb	r3, r3
 80112f4:	73bb      	strb	r3, [r7, #14]
				if(tmp > 2*_WIZCHIP_SOCK_NUM_) return -1;		
 80112f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80112fa:	2b10      	cmp	r3, #16
 80112fc:	dd02      	ble.n	8011304 <wizchip_init+0xc0>
 80112fe:	f04f 33ff 	mov.w	r3, #4294967295
 8011302:	e027      	b.n	8011354 <wizchip_init+0x110>
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8011304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011308:	b2db      	uxtb	r3, r3
 801130a:	3301      	adds	r3, #1
 801130c:	b2db      	uxtb	r3, r3
 801130e:	73fb      	strb	r3, [r7, #15]
 8011310:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011314:	2b07      	cmp	r3, #7
 8011316:	dde5      	ble.n	80112e4 <wizchip_init+0xa0>
			}
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++) setSn_RXBUF_SIZE(i, rxsize[i]);
 8011318:	2300      	movs	r3, #0
 801131a:	73fb      	strb	r3, [r7, #15]
 801131c:	e015      	b.n	801134a <wizchip_init+0x106>
 801131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011322:	009b      	lsls	r3, r3, #2
 8011324:	3301      	adds	r3, #1
 8011326:	00db      	lsls	r3, r3, #3
 8011328:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 801132c:	4618      	mov	r0, r3
 801132e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011332:	683a      	ldr	r2, [r7, #0]
 8011334:	4413      	add	r3, r2
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	4619      	mov	r1, r3
 801133a:	f7fe fa0f 	bl	800f75c <WIZCHIP_WRITE>
 801133e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011342:	b2db      	uxtb	r3, r3
 8011344:	3301      	adds	r3, #1
 8011346:	b2db      	uxtb	r3, r3
 8011348:	73fb      	strb	r3, [r7, #15]
 801134a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801134e:	2b07      	cmp	r3, #7
 8011350:	dde5      	ble.n	801131e <wizchip_init+0xda>
   }
   return 0;
 8011352:	2300      	movs	r3, #0
}
 8011354:	4618      	mov	r0, r3
 8011356:	3710      	adds	r7, #16
 8011358:	46bd      	mov	sp, r7
 801135a:	bd80      	pop	{r7, pc}

0801135c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b084      	sub	sp, #16
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
   int i;
   uint8_t ir   = (uint8_t)intr;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	72fb      	strb	r3, [r7, #11]
   uint8_t sir  = (uint8_t)((uint32_t)intr >> 8);
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	0a1b      	lsrs	r3, r3, #8
 801136c:	72bb      	strb	r3, [r7, #10]
   uint8_t slir = (uint8_t)((uint32_t)intr >> 16);
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	0c1b      	lsrs	r3, r3, #16
 8011372:	727b      	strb	r3, [r7, #9]
   setIRCLR(ir);
 8011374:	7afb      	ldrb	r3, [r7, #11]
 8011376:	4619      	mov	r1, r3
 8011378:	4813      	ldr	r0, [pc, #76]	; (80113c8 <wizchip_clrinterrupt+0x6c>)
 801137a:	f7fe f9ef 	bl	800f75c <WIZCHIP_WRITE>
   for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 801137e:	2300      	movs	r3, #0
 8011380:	60fb      	str	r3, [r7, #12]
 8011382:	e014      	b.n	80113ae <wizchip_clrinterrupt+0x52>
   {
   	if(sir&(1<<i))   	setSn_IRCLR(i,0xFF);
 8011384:	7aba      	ldrb	r2, [r7, #10]
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	fa42 f303 	asr.w	r3, r2, r3
 801138c:	f003 0301 	and.w	r3, r3, #1
 8011390:	2b00      	cmp	r3, #0
 8011392:	d009      	beq.n	80113a8 <wizchip_clrinterrupt+0x4c>
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	009b      	lsls	r3, r3, #2
 8011398:	3301      	adds	r3, #1
 801139a:	00db      	lsls	r3, r3, #3
 801139c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80113a0:	21ff      	movs	r1, #255	; 0xff
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7fe f9da 	bl	800f75c <WIZCHIP_WRITE>
   for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	3301      	adds	r3, #1
 80113ac:	60fb      	str	r3, [r7, #12]
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	2b07      	cmp	r3, #7
 80113b2:	dde7      	ble.n	8011384 <wizchip_clrinterrupt+0x28>
   }
   setSLIRCLR(slir);
 80113b4:	7a7b      	ldrb	r3, [r7, #9]
 80113b6:	4619      	mov	r1, r3
 80113b8:	4804      	ldr	r0, [pc, #16]	; (80113cc <wizchip_clrinterrupt+0x70>)
 80113ba:	f7fe f9cf 	bl	800f75c <WIZCHIP_WRITE>
}
 80113be:	bf00      	nop
 80113c0:	3710      	adds	r7, #16
 80113c2:	46bd      	mov	sp, r7
 80113c4:	bd80      	pop	{r7, pc}
 80113c6:	bf00      	nop
 80113c8:	00210800 	.word	0x00210800
 80113cc:	00212800 	.word	0x00212800

080113d0 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80113d0:	b590      	push	{r4, r7, lr}
 80113d2:	b083      	sub	sp, #12
 80113d4:	af00      	add	r7, sp, #0
   uint32_t ret;
   ret = (((uint32_t)getSLIR())<<16) | (((uint32_t)getSIR())<<8) | (((uint32_t)getIR()));
 80113d6:	480b      	ldr	r0, [pc, #44]	; (8011404 <wizchip_getinterrupt+0x34>)
 80113d8:	f7fe f9d0 	bl	800f77c <WIZCHIP_READ>
 80113dc:	4603      	mov	r3, r0
 80113de:	041c      	lsls	r4, r3, #16
 80113e0:	4809      	ldr	r0, [pc, #36]	; (8011408 <wizchip_getinterrupt+0x38>)
 80113e2:	f7fe f9cb 	bl	800f77c <WIZCHIP_READ>
 80113e6:	4603      	mov	r3, r0
 80113e8:	021b      	lsls	r3, r3, #8
 80113ea:	431c      	orrs	r4, r3
 80113ec:	f44f 1004 	mov.w	r0, #2162688	; 0x210000
 80113f0:	f7fe f9c4 	bl	800f77c <WIZCHIP_READ>
 80113f4:	4603      	mov	r3, r0
 80113f6:	4323      	orrs	r3, r4
 80113f8:	607b      	str	r3, [r7, #4]
   return (intr_kind)ret;
 80113fa:	687b      	ldr	r3, [r7, #4]
}
 80113fc:	4618      	mov	r0, r3
 80113fe:	370c      	adds	r7, #12
 8011400:	46bd      	mov	sp, r7
 8011402:	bd90      	pop	{r4, r7, pc}
 8011404:	00210200 	.word	0x00210200
 8011408:	00210100 	.word	0x00210100

0801140c <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b084      	sub	sp, #16
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
   uint8_t imr   = (uint8_t)intr;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	73fb      	strb	r3, [r7, #15]
   uint8_t simr  = (uint8_t)((uint32_t)intr >> 8);
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	0a1b      	lsrs	r3, r3, #8
 801141c:	73bb      	strb	r3, [r7, #14]
   uint8_t slimr = (uint8_t)((uint32_t)intr >> 16);
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	0c1b      	lsrs	r3, r3, #16
 8011422:	737b      	strb	r3, [r7, #13]
   setIMR(imr);
 8011424:	7bfb      	ldrb	r3, [r7, #15]
 8011426:	4619      	mov	r1, r3
 8011428:	4808      	ldr	r0, [pc, #32]	; (801144c <wizchip_setinterruptmask+0x40>)
 801142a:	f7fe f997 	bl	800f75c <WIZCHIP_WRITE>
   setSIMR(simr);
 801142e:	7bbb      	ldrb	r3, [r7, #14]
 8011430:	4619      	mov	r1, r3
 8011432:	4807      	ldr	r0, [pc, #28]	; (8011450 <wizchip_setinterruptmask+0x44>)
 8011434:	f7fe f992 	bl	800f75c <WIZCHIP_WRITE>
   setSLIMR(slimr);
 8011438:	7b7b      	ldrb	r3, [r7, #13]
 801143a:	4619      	mov	r1, r3
 801143c:	4805      	ldr	r0, [pc, #20]	; (8011454 <wizchip_setinterruptmask+0x48>)
 801143e:	f7fe f98d 	bl	800f75c <WIZCHIP_WRITE>
}
 8011442:	bf00      	nop
 8011444:	3710      	adds	r7, #16
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}
 801144a:	bf00      	nop
 801144c:	00210400 	.word	0x00210400
 8011450:	00211400 	.word	0x00211400
 8011454:	00212400 	.word	0x00212400

08011458 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8011458:	b590      	push	{r4, r7, lr}
 801145a:	b083      	sub	sp, #12
 801145c:	af00      	add	r7, sp, #0
   uint32_t ret;
   ret = (((uint32_t)getSLIMR())<<16) | (((uint32_t)getSIMR())<<8) | (((uint32_t)getIMR()));
 801145e:	480b      	ldr	r0, [pc, #44]	; (801148c <wizchip_getinterruptmask+0x34>)
 8011460:	f7fe f98c 	bl	800f77c <WIZCHIP_READ>
 8011464:	4603      	mov	r3, r0
 8011466:	041c      	lsls	r4, r3, #16
 8011468:	4809      	ldr	r0, [pc, #36]	; (8011490 <wizchip_getinterruptmask+0x38>)
 801146a:	f7fe f987 	bl	800f77c <WIZCHIP_READ>
 801146e:	4603      	mov	r3, r0
 8011470:	021b      	lsls	r3, r3, #8
 8011472:	431c      	orrs	r4, r3
 8011474:	4807      	ldr	r0, [pc, #28]	; (8011494 <wizchip_getinterruptmask+0x3c>)
 8011476:	f7fe f981 	bl	800f77c <WIZCHIP_READ>
 801147a:	4603      	mov	r3, r0
 801147c:	4323      	orrs	r3, r4
 801147e:	607b      	str	r3, [r7, #4]
   return (intr_kind)ret;
 8011480:	687b      	ldr	r3, [r7, #4]
}
 8011482:	4618      	mov	r0, r3
 8011484:	370c      	adds	r7, #12
 8011486:	46bd      	mov	sp, r7
 8011488:	bd90      	pop	{r4, r7, pc}
 801148a:	bf00      	nop
 801148c:	00212400 	.word	0x00212400
 8011490:	00211400 	.word	0x00211400
 8011494:	00210400 	.word	0x00210400

08011498 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   return (getPHYSR() & PHYSR_LNK);
 801149c:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80114a0:	f7fe f96c 	bl	800f77c <WIZCHIP_READ>
 80114a4:	4603      	mov	r3, r0
 80114a6:	b25b      	sxtb	r3, r3
 80114a8:	f003 0301 	and.w	r3, r3, #1
 80114ac:	b25b      	sxtb	r3, r3
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
   if(wiz_mdio_read(PHYRAR_BMSR) & BMSR_LINK_STATUS) return PHY_LINK_ON;
   return PHY_LINK_OFF;
#endif  
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	bd80      	pop	{r7, pc}
	...

080114b4 <wizphy_reset>:

void wizphy_reset(void)
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b082      	sub	sp, #8
 80114b8:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = getPHYCR1() | PHYCR1_RST;
 80114ba:	480c      	ldr	r0, [pc, #48]	; (80114ec <wizphy_reset+0x38>)
 80114bc:	f7fe f95e 	bl	800f77c <WIZCHIP_READ>
 80114c0:	4603      	mov	r3, r0
 80114c2:	f043 0301 	orr.w	r3, r3, #1
 80114c6:	71fb      	strb	r3, [r7, #7]
   PHYUNLOCK();
 80114c8:	2153      	movs	r1, #83	; 0x53
 80114ca:	4809      	ldr	r0, [pc, #36]	; (80114f0 <wizphy_reset+0x3c>)
 80114cc:	f7fe f946 	bl	800f75c <WIZCHIP_WRITE>
   setPHYCR1(tmp);
 80114d0:	79fb      	ldrb	r3, [r7, #7]
 80114d2:	4619      	mov	r1, r3
 80114d4:	4805      	ldr	r0, [pc, #20]	; (80114ec <wizphy_reset+0x38>)
 80114d6:	f7fe f941 	bl	800f75c <WIZCHIP_WRITE>
   PHYLOCK();
 80114da:	21ff      	movs	r1, #255	; 0xff
 80114dc:	4804      	ldr	r0, [pc, #16]	; (80114f0 <wizphy_reset+0x3c>)
 80114de:	f7fe f93d 	bl	800f75c <WIZCHIP_WRITE>
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
	wiz_mdio_write(PHYRAR_BMCR, wiz_mdio_read(PHYRAR_BMCR) | BMCR_RST);
	while(wiz_mdio_read(PHYRAR_BMCR) & BMCR_RST);
#endif
}
 80114e2:	bf00      	nop
 80114e4:	3708      	adds	r7, #8
 80114e6:	46bd      	mov	sp, r7
 80114e8:	bd80      	pop	{r7, pc}
 80114ea:	bf00      	nop
 80114ec:	00301d00 	.word	0x00301d00
 80114f0:	0041f600 	.word	0x0041f600

080114f4 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b084      	sub	sp, #16
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = 0;
 80114fc:	2300      	movs	r3, #0
 80114fe:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_TE)
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	781b      	ldrb	r3, [r3, #0]
 8011504:	2b02      	cmp	r3, #2
 8011506:	d10d      	bne.n	8011524 <wizphy_setphyconf+0x30>
   {
      setPHYCR1(getPHYCR1() | PHYCR1_TE);
 8011508:	481e      	ldr	r0, [pc, #120]	; (8011584 <wizphy_setphyconf+0x90>)
 801150a:	f7fe f937 	bl	800f77c <WIZCHIP_READ>
 801150e:	4603      	mov	r3, r0
 8011510:	f043 0308 	orr.w	r3, r3, #8
 8011514:	b2db      	uxtb	r3, r3
 8011516:	4619      	mov	r1, r3
 8011518:	481a      	ldr	r0, [pc, #104]	; (8011584 <wizphy_setphyconf+0x90>)
 801151a:	f7fe f91f 	bl	800f75c <WIZCHIP_WRITE>
      tmp = PHYCR0_AUTO;
 801151e:	2300      	movs	r3, #0
 8011520:	73fb      	strb	r3, [r7, #15]
 8011522:	e025      	b.n	8011570 <wizphy_setphyconf+0x7c>
   }
   else
   {
      setPHYCR1(getPHYCR1() & ~PHYCR1_TE);
 8011524:	4817      	ldr	r0, [pc, #92]	; (8011584 <wizphy_setphyconf+0x90>)
 8011526:	f7fe f929 	bl	800f77c <WIZCHIP_READ>
 801152a:	4603      	mov	r3, r0
 801152c:	f023 0308 	bic.w	r3, r3, #8
 8011530:	b2db      	uxtb	r3, r3
 8011532:	4619      	mov	r1, r3
 8011534:	4813      	ldr	r0, [pc, #76]	; (8011584 <wizphy_setphyconf+0x90>)
 8011536:	f7fe f911 	bl	800f75c <WIZCHIP_WRITE>
      if(phyconf->mode == PHY_MODE_AUTONEGO) tmp = PHYCR0_AUTO;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	781b      	ldrb	r3, [r3, #0]
 801153e:	2b01      	cmp	r3, #1
 8011540:	d102      	bne.n	8011548 <wizphy_setphyconf+0x54>
 8011542:	2300      	movs	r3, #0
 8011544:	73fb      	strb	r3, [r7, #15]
 8011546:	e013      	b.n	8011570 <wizphy_setphyconf+0x7c>
      else
      {
         tmp |= 0x04;
 8011548:	7bfb      	ldrb	r3, [r7, #15]
 801154a:	f043 0304 	orr.w	r3, r3, #4
 801154e:	73fb      	strb	r3, [r7, #15]
         if(phyconf->speed  == PHY_SPEED_10)    tmp |= 0x02;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	785b      	ldrb	r3, [r3, #1]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d103      	bne.n	8011560 <wizphy_setphyconf+0x6c>
 8011558:	7bfb      	ldrb	r3, [r7, #15]
 801155a:	f043 0302 	orr.w	r3, r3, #2
 801155e:	73fb      	strb	r3, [r7, #15]
         if(phyconf->duplex == PHY_DUPLEX_HALF) tmp |= 0x01;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	789b      	ldrb	r3, [r3, #2]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d103      	bne.n	8011570 <wizphy_setphyconf+0x7c>
 8011568:	7bfb      	ldrb	r3, [r7, #15]
 801156a:	f043 0301 	orr.w	r3, r3, #1
 801156e:	73fb      	strb	r3, [r7, #15]
      }
   }
   setPHYCR0(tmp);
 8011570:	7bfb      	ldrb	r3, [r7, #15]
 8011572:	4619      	mov	r1, r3
 8011574:	4804      	ldr	r0, [pc, #16]	; (8011588 <wizphy_setphyconf+0x94>)
 8011576:	f7fe f8f1 	bl	800f75c <WIZCHIP_WRITE>
         if(phyconf->speed == PHY_SPEED_100)    tmp |= BMCR_SPD;
      }
      wiz_mdio_write(PHYRAR_BMCR, tmp);
   }
#endif   
}
 801157a:	bf00      	nop
 801157c:	3710      	adds	r7, #16
 801157e:	46bd      	mov	sp, r7
 8011580:	bd80      	pop	{r7, pc}
 8011582:	bf00      	nop
 8011584:	00301d00 	.word	0x00301d00
 8011588:	00301c00 	.word	0x00301c00

0801158c <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b084      	sub	sp, #16
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = 0;
 8011594:	2300      	movs	r3, #0
 8011596:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYSR();
 8011598:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 801159c:	f7fe f8ee 	bl	800f77c <WIZCHIP_READ>
 80115a0:	4603      	mov	r3, r0
 80115a2:	73fb      	strb	r3, [r7, #15]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
 80115a4:	4818      	ldr	r0, [pc, #96]	; (8011608 <wizphy_getphyconf+0x7c>)
 80115a6:	f7fe f8e9 	bl	800f77c <WIZCHIP_READ>
 80115aa:	4603      	mov	r3, r0
 80115ac:	f003 0308 	and.w	r3, r3, #8
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d003      	beq.n	80115bc <wizphy_getphyconf+0x30>
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	2202      	movs	r2, #2
 80115b8:	701a      	strb	r2, [r3, #0]
 80115ba:	e00a      	b.n	80115d2 <wizphy_getphyconf+0x46>
   else                        phyconf->mode = (tmp & (1<<5)) ? PHY_MODE_MANUAL : PHY_MODE_AUTONEGO ;
 80115bc:	7bfb      	ldrb	r3, [r7, #15]
 80115be:	f003 0320 	and.w	r3, r3, #32
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	bf0c      	ite	eq
 80115c6:	2301      	moveq	r3, #1
 80115c8:	2300      	movne	r3, #0
 80115ca:	b2db      	uxtb	r3, r3
 80115cc:	461a      	mov	r2, r3
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	701a      	strb	r2, [r3, #0]
   phyconf->speed  = (tmp & (1<<4)) ? PHY_SPEED_10    : PHY_SPEED_100;
 80115d2:	7bfb      	ldrb	r3, [r7, #15]
 80115d4:	f003 0310 	and.w	r3, r3, #16
 80115d8:	2b00      	cmp	r3, #0
 80115da:	bf0c      	ite	eq
 80115dc:	2301      	moveq	r3, #1
 80115de:	2300      	movne	r3, #0
 80115e0:	b2db      	uxtb	r3, r3
 80115e2:	461a      	mov	r2, r3
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	705a      	strb	r2, [r3, #1]
   phyconf->duplex = (tmp & (1<<3)) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
 80115e8:	7bfb      	ldrb	r3, [r7, #15]
 80115ea:	f003 0308 	and.w	r3, r3, #8
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	bf0c      	ite	eq
 80115f2:	2301      	moveq	r3, #1
 80115f4:	2300      	movne	r3, #0
 80115f6:	b2db      	uxtb	r3, r3
 80115f8:	461a      	mov	r2, r3
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	709a      	strb	r2, [r3, #2]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
   else phyconf->mode   = (tmp & BMCR_ANE) ? PHY_MODE_AUTONEGO : PHY_MODE_MANUAL;
   phyconf->duplex = (tmp & BMCR_DPX) ? PHY_DUPLEX_FULL   : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & BMCR_SPD) ? PHY_SPEED_100     : PHY_SPEED_10;
#endif
}
 80115fe:	bf00      	nop
 8011600:	3710      	adds	r7, #16
 8011602:	46bd      	mov	sp, r7
 8011604:	bd80      	pop	{r7, pc}
 8011606:	bf00      	nop
 8011608:	00301d00 	.word	0x00301d00

0801160c <wizphy_getphystatus>:

void wizphy_getphystatus(wiz_PhyConf* phyconf)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b084      	sub	sp, #16
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8011614:	2300      	movs	r3, #0
 8011616:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYSR();
 8011618:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 801161c:	f7fe f8ae 	bl	800f77c <WIZCHIP_READ>
 8011620:	4603      	mov	r3, r0
 8011622:	73fb      	strb	r3, [r7, #15]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
 8011624:	4818      	ldr	r0, [pc, #96]	; (8011688 <wizphy_getphystatus+0x7c>)
 8011626:	f7fe f8a9 	bl	800f77c <WIZCHIP_READ>
 801162a:	4603      	mov	r3, r0
 801162c:	f003 0308 	and.w	r3, r3, #8
 8011630:	2b00      	cmp	r3, #0
 8011632:	d003      	beq.n	801163c <wizphy_getphystatus+0x30>
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	2202      	movs	r2, #2
 8011638:	701a      	strb	r2, [r3, #0]
 801163a:	e00a      	b.n	8011652 <wizphy_getphystatus+0x46>
   else phyconf->mode   = (tmp & (1<<5))    ? PHY_MODE_MANUAL : PHY_MODE_AUTONEGO ;
 801163c:	7bfb      	ldrb	r3, [r7, #15]
 801163e:	f003 0320 	and.w	r3, r3, #32
 8011642:	2b00      	cmp	r3, #0
 8011644:	bf0c      	ite	eq
 8011646:	2301      	moveq	r3, #1
 8011648:	2300      	movne	r3, #0
 801164a:	b2db      	uxtb	r3, r3
 801164c:	461a      	mov	r2, r3
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	701a      	strb	r2, [r3, #0]
   phyconf->speed  = (tmp & PHYSR_SPD) ? PHY_SPEED_10    : PHY_SPEED_100;
 8011652:	7bfb      	ldrb	r3, [r7, #15]
 8011654:	f003 0302 	and.w	r3, r3, #2
 8011658:	2b00      	cmp	r3, #0
 801165a:	bf0c      	ite	eq
 801165c:	2301      	moveq	r3, #1
 801165e:	2300      	movne	r3, #0
 8011660:	b2db      	uxtb	r3, r3
 8011662:	461a      	mov	r2, r3
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	705a      	strb	r2, [r3, #1]
   phyconf->duplex = (tmp & PHYSR_DPX) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
 8011668:	7bfb      	ldrb	r3, [r7, #15]
 801166a:	f003 0304 	and.w	r3, r3, #4
 801166e:	2b00      	cmp	r3, #0
 8011670:	bf0c      	ite	eq
 8011672:	2301      	moveq	r3, #1
 8011674:	2300      	movne	r3, #0
 8011676:	b2db      	uxtb	r3, r3
 8011678:	461a      	mov	r2, r3
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	709a      	strb	r2, [r3, #2]
}
 801167e:	bf00      	nop
 8011680:	3710      	adds	r7, #16
 8011682:	46bd      	mov	sp, r7
 8011684:	bd80      	pop	{r7, pc}
 8011686:	bf00      	nop
 8011688:	00301d00 	.word	0x00301d00

0801168c <wizphy_setphypmode>:

void wizphy_setphypmode(uint8_t pmode)
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b084      	sub	sp, #16
 8011690:	af00      	add	r7, sp, #0
 8011692:	4603      	mov	r3, r0
 8011694:	71fb      	strb	r3, [r7, #7]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = getPHYCR1();
 8011696:	480d      	ldr	r0, [pc, #52]	; (80116cc <wizphy_setphypmode+0x40>)
 8011698:	f7fe f870 	bl	800f77c <WIZCHIP_READ>
 801169c:	4603      	mov	r3, r0
 801169e:	73fb      	strb	r3, [r7, #15]
   if (pmode == PHY_POWER_DOWN)    tmp |= PHYCR1_PWDN;
 80116a0:	79fb      	ldrb	r3, [r7, #7]
 80116a2:	2b01      	cmp	r3, #1
 80116a4:	d104      	bne.n	80116b0 <wizphy_setphypmode+0x24>
 80116a6:	7bfb      	ldrb	r3, [r7, #15]
 80116a8:	f043 0320 	orr.w	r3, r3, #32
 80116ac:	73fb      	strb	r3, [r7, #15]
 80116ae:	e003      	b.n	80116b8 <wizphy_setphypmode+0x2c>
   else                            tmp &= ~PHYCR1_PWDN;
 80116b0:	7bfb      	ldrb	r3, [r7, #15]
 80116b2:	f023 0320 	bic.w	r3, r3, #32
 80116b6:	73fb      	strb	r3, [r7, #15]
   setPHYCR1(tmp);
 80116b8:	7bfb      	ldrb	r3, [r7, #15]
 80116ba:	4619      	mov	r1, r3
 80116bc:	4803      	ldr	r0, [pc, #12]	; (80116cc <wizphy_setphypmode+0x40>)
 80116be:	f7fe f84d 	bl	800f75c <WIZCHIP_WRITE>
   tmp = wiz_mdio_read(PHYRAR_BMCR);
   if (pmode == PHY_POWER_DOWN)    tmp |= BMCR_PWDN;
   else                            tmp &= ~BMCR_PWDN;
   wiz_mdio_write(PHYRAR_BMCR, tmp);
#endif   
}
 80116c2:	bf00      	nop
 80116c4:	3710      	adds	r7, #16
 80116c6:	46bd      	mov	sp, r7
 80116c8:	bd80      	pop	{r7, pc}
 80116ca:	bf00      	nop
 80116cc:	00301d00 	.word	0x00301d00

080116d0 <wizphy_getphypmode>:

int8_t wizphy_getphypmode(void)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   if (getPHYCR1() & PHYCR1_PWDN)              return PHY_POWER_DOWN;
 80116d4:	4806      	ldr	r0, [pc, #24]	; (80116f0 <wizphy_getphypmode+0x20>)
 80116d6:	f7fe f851 	bl	800f77c <WIZCHIP_READ>
 80116da:	4603      	mov	r3, r0
 80116dc:	f003 0320 	and.w	r3, r3, #32
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d001      	beq.n	80116e8 <wizphy_getphypmode+0x18>
 80116e4:	2301      	movs	r3, #1
 80116e6:	e000      	b.n	80116ea <wizphy_getphypmode+0x1a>
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
   if (wiz_mdio_read(PHYRAR_BMCR) & BMCR_PWDN) return PHY_POWER_DOWN;
#endif   
   return PHY_POWER_NORM;
 80116e8:	2300      	movs	r3, #0
}
 80116ea:	4618      	mov	r0, r3
 80116ec:	bd80      	pop	{r7, pc}
 80116ee:	bf00      	nop
 80116f0:	00301d00 	.word	0x00301d00

080116f4 <wizchip_setnetinfo>:

void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b084      	sub	sp, #16
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
   uint8_t i=0;
 80116fc:	2300      	movs	r3, #0
 80116fe:	73fb      	strb	r3, [r7, #15]
   setSHAR(pnetinfo->mac);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2206      	movs	r2, #6
 8011704:	4619      	mov	r1, r3
 8011706:	482f      	ldr	r0, [pc, #188]	; (80117c4 <wizchip_setnetinfo+0xd0>)
 8011708:	f7fe f848 	bl	800f79c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	330e      	adds	r3, #14
 8011710:	2204      	movs	r2, #4
 8011712:	4619      	mov	r1, r3
 8011714:	482c      	ldr	r0, [pc, #176]	; (80117c8 <wizchip_setnetinfo+0xd4>)
 8011716:	f7fe f841 	bl	800f79c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	330a      	adds	r3, #10
 801171e:	2204      	movs	r2, #4
 8011720:	4619      	mov	r1, r3
 8011722:	482a      	ldr	r0, [pc, #168]	; (80117cc <wizchip_setnetinfo+0xd8>)
 8011724:	f7fe f83a 	bl	800f79c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);   
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	3306      	adds	r3, #6
 801172c:	2204      	movs	r2, #4
 801172e:	4619      	mov	r1, r3
 8011730:	4827      	ldr	r0, [pc, #156]	; (80117d0 <wizchip_setnetinfo+0xdc>)
 8011732:	f7fe f833 	bl	800f79c <WIZCHIP_WRITE_BUF>
   setGA6R(pnetinfo->gw6);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	3342      	adds	r3, #66	; 0x42
 801173a:	2210      	movs	r2, #16
 801173c:	4619      	mov	r1, r3
 801173e:	4825      	ldr	r0, [pc, #148]	; (80117d4 <wizchip_setnetinfo+0xe0>)
 8011740:	f7fe f82c 	bl	800f79c <WIZCHIP_WRITE_BUF>
   setSUB6R(pnetinfo->sn6);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	3332      	adds	r3, #50	; 0x32
 8011748:	2210      	movs	r2, #16
 801174a:	4619      	mov	r1, r3
 801174c:	4822      	ldr	r0, [pc, #136]	; (80117d8 <wizchip_setnetinfo+0xe4>)
 801174e:	f7fe f825 	bl	800f79c <WIZCHIP_WRITE_BUF>
   setLLAR(pnetinfo->lla);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	3312      	adds	r3, #18
 8011756:	2210      	movs	r2, #16
 8011758:	4619      	mov	r1, r3
 801175a:	4820      	ldr	r0, [pc, #128]	; (80117dc <wizchip_setnetinfo+0xe8>)
 801175c:	f7fe f81e 	bl	800f79c <WIZCHIP_WRITE_BUF>
   setGUAR(pnetinfo->gua);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	3322      	adds	r3, #34	; 0x22
 8011764:	2210      	movs	r2, #16
 8011766:	4619      	mov	r1, r3
 8011768:	481d      	ldr	r0, [pc, #116]	; (80117e0 <wizchip_setnetinfo+0xec>)
 801176a:	f7fe f817 	bl	800f79c <WIZCHIP_WRITE_BUF>

   for(i=0; i<4; i++)  _DNS_[i]  = pnetinfo->dns[i];
 801176e:	2300      	movs	r3, #0
 8011770:	73fb      	strb	r3, [r7, #15]
 8011772:	e00a      	b.n	801178a <wizchip_setnetinfo+0x96>
 8011774:	7bfa      	ldrb	r2, [r7, #15]
 8011776:	7bfb      	ldrb	r3, [r7, #15]
 8011778:	6879      	ldr	r1, [r7, #4]
 801177a:	440a      	add	r2, r1
 801177c:	f892 1052 	ldrb.w	r1, [r2, #82]	; 0x52
 8011780:	4a18      	ldr	r2, [pc, #96]	; (80117e4 <wizchip_setnetinfo+0xf0>)
 8011782:	54d1      	strb	r1, [r2, r3]
 8011784:	7bfb      	ldrb	r3, [r7, #15]
 8011786:	3301      	adds	r3, #1
 8011788:	73fb      	strb	r3, [r7, #15]
 801178a:	7bfb      	ldrb	r3, [r7, #15]
 801178c:	2b03      	cmp	r3, #3
 801178e:	d9f1      	bls.n	8011774 <wizchip_setnetinfo+0x80>
   for(i=0; i<16; i++) _DNS6_[i] = pnetinfo->dns6[i];
 8011790:	2300      	movs	r3, #0
 8011792:	73fb      	strb	r3, [r7, #15]
 8011794:	e00a      	b.n	80117ac <wizchip_setnetinfo+0xb8>
 8011796:	7bfa      	ldrb	r2, [r7, #15]
 8011798:	7bfb      	ldrb	r3, [r7, #15]
 801179a:	6879      	ldr	r1, [r7, #4]
 801179c:	440a      	add	r2, r1
 801179e:	f892 1056 	ldrb.w	r1, [r2, #86]	; 0x56
 80117a2:	4a11      	ldr	r2, [pc, #68]	; (80117e8 <wizchip_setnetinfo+0xf4>)
 80117a4:	54d1      	strb	r1, [r2, r3]
 80117a6:	7bfb      	ldrb	r3, [r7, #15]
 80117a8:	3301      	adds	r3, #1
 80117aa:	73fb      	strb	r3, [r7, #15]
 80117ac:	7bfb      	ldrb	r3, [r7, #15]
 80117ae:	2b0f      	cmp	r3, #15
 80117b0:	d9f1      	bls.n	8011796 <wizchip_setnetinfo+0xa2>

   _IPMODE_   = pnetinfo->ipmode;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80117b8:	4b0c      	ldr	r3, [pc, #48]	; (80117ec <wizchip_setnetinfo+0xf8>)
 80117ba:	701a      	strb	r2, [r3, #0]
}
 80117bc:	bf00      	nop
 80117be:	3710      	adds	r7, #16
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}
 80117c4:	00412000 	.word	0x00412000
 80117c8:	00413000 	.word	0x00413000
 80117cc:	00413400 	.word	0x00413400
 80117d0:	00413800 	.word	0x00413800
 80117d4:	00417000 	.word	0x00417000
 80117d8:	00416000 	.word	0x00416000
 80117dc:	00414000 	.word	0x00414000
 80117e0:	00415000 	.word	0x00415000
 80117e4:	24015dc4 	.word	0x24015dc4
 80117e8:	24015dc8 	.word	0x24015dc8
 80117ec:	24015dd8 	.word	0x24015dd8

080117f0 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b084      	sub	sp, #16
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
   uint8_t i = 0;
 80117f8:	2300      	movs	r3, #0
 80117fa:	73fb      	strb	r3, [r7, #15]
   getSHAR(pnetinfo->mac);
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2206      	movs	r2, #6
 8011800:	4619      	mov	r1, r3
 8011802:	4830      	ldr	r0, [pc, #192]	; (80118c4 <wizchip_getnetinfo+0xd4>)
 8011804:	f7fd ffdb 	bl	800f7be <WIZCHIP_READ_BUF>

   getGAR(pnetinfo->gw);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	330e      	adds	r3, #14
 801180c:	2204      	movs	r2, #4
 801180e:	4619      	mov	r1, r3
 8011810:	482d      	ldr	r0, [pc, #180]	; (80118c8 <wizchip_getnetinfo+0xd8>)
 8011812:	f7fd ffd4 	bl	800f7be <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	330a      	adds	r3, #10
 801181a:	2204      	movs	r2, #4
 801181c:	4619      	mov	r1, r3
 801181e:	482b      	ldr	r0, [pc, #172]	; (80118cc <wizchip_getnetinfo+0xdc>)
 8011820:	f7fd ffcd 	bl	800f7be <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	3306      	adds	r3, #6
 8011828:	2204      	movs	r2, #4
 801182a:	4619      	mov	r1, r3
 801182c:	4828      	ldr	r0, [pc, #160]	; (80118d0 <wizchip_getnetinfo+0xe0>)
 801182e:	f7fd ffc6 	bl	800f7be <WIZCHIP_READ_BUF>
   
   getGA6R(pnetinfo->gw6);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	3342      	adds	r3, #66	; 0x42
 8011836:	2210      	movs	r2, #16
 8011838:	4619      	mov	r1, r3
 801183a:	4826      	ldr	r0, [pc, #152]	; (80118d4 <wizchip_getnetinfo+0xe4>)
 801183c:	f7fd ffbf 	bl	800f7be <WIZCHIP_READ_BUF>
   getSUB6R(pnetinfo->sn6);
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	3332      	adds	r3, #50	; 0x32
 8011844:	2210      	movs	r2, #16
 8011846:	4619      	mov	r1, r3
 8011848:	4823      	ldr	r0, [pc, #140]	; (80118d8 <wizchip_getnetinfo+0xe8>)
 801184a:	f7fd ffb8 	bl	800f7be <WIZCHIP_READ_BUF>
   getLLAR(pnetinfo->lla);
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	3312      	adds	r3, #18
 8011852:	2210      	movs	r2, #16
 8011854:	4619      	mov	r1, r3
 8011856:	4821      	ldr	r0, [pc, #132]	; (80118dc <wizchip_getnetinfo+0xec>)
 8011858:	f7fd ffb1 	bl	800f7be <WIZCHIP_READ_BUF>
   getGUAR(pnetinfo->gua);
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	3322      	adds	r3, #34	; 0x22
 8011860:	2210      	movs	r2, #16
 8011862:	4619      	mov	r1, r3
 8011864:	481e      	ldr	r0, [pc, #120]	; (80118e0 <wizchip_getnetinfo+0xf0>)
 8011866:	f7fd ffaa 	bl	800f7be <WIZCHIP_READ_BUF>
   for(i=0; i<4; i++)  pnetinfo->dns[i] = _DNS_[i];
 801186a:	2300      	movs	r3, #0
 801186c:	73fb      	strb	r3, [r7, #15]
 801186e:	e00b      	b.n	8011888 <wizchip_getnetinfo+0x98>
 8011870:	7bfa      	ldrb	r2, [r7, #15]
 8011872:	7bfb      	ldrb	r3, [r7, #15]
 8011874:	491b      	ldr	r1, [pc, #108]	; (80118e4 <wizchip_getnetinfo+0xf4>)
 8011876:	5c89      	ldrb	r1, [r1, r2]
 8011878:	687a      	ldr	r2, [r7, #4]
 801187a:	4413      	add	r3, r2
 801187c:	460a      	mov	r2, r1
 801187e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8011882:	7bfb      	ldrb	r3, [r7, #15]
 8011884:	3301      	adds	r3, #1
 8011886:	73fb      	strb	r3, [r7, #15]
 8011888:	7bfb      	ldrb	r3, [r7, #15]
 801188a:	2b03      	cmp	r3, #3
 801188c:	d9f0      	bls.n	8011870 <wizchip_getnetinfo+0x80>
   for(i=0; i<16; i++) pnetinfo->dns6[i]  = _DNS6_[i];
 801188e:	2300      	movs	r3, #0
 8011890:	73fb      	strb	r3, [r7, #15]
 8011892:	e00b      	b.n	80118ac <wizchip_getnetinfo+0xbc>
 8011894:	7bfa      	ldrb	r2, [r7, #15]
 8011896:	7bfb      	ldrb	r3, [r7, #15]
 8011898:	4913      	ldr	r1, [pc, #76]	; (80118e8 <wizchip_getnetinfo+0xf8>)
 801189a:	5c89      	ldrb	r1, [r1, r2]
 801189c:	687a      	ldr	r2, [r7, #4]
 801189e:	4413      	add	r3, r2
 80118a0:	460a      	mov	r2, r1
 80118a2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 80118a6:	7bfb      	ldrb	r3, [r7, #15]
 80118a8:	3301      	adds	r3, #1
 80118aa:	73fb      	strb	r3, [r7, #15]
 80118ac:	7bfb      	ldrb	r3, [r7, #15]
 80118ae:	2b0f      	cmp	r3, #15
 80118b0:	d9f0      	bls.n	8011894 <wizchip_getnetinfo+0xa4>

   pnetinfo->ipmode = _IPMODE_;
 80118b2:	4b0e      	ldr	r3, [pc, #56]	; (80118ec <wizchip_getnetinfo+0xfc>)
 80118b4:	781a      	ldrb	r2, [r3, #0]
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
 80118bc:	bf00      	nop
 80118be:	3710      	adds	r7, #16
 80118c0:	46bd      	mov	sp, r7
 80118c2:	bd80      	pop	{r7, pc}
 80118c4:	00412000 	.word	0x00412000
 80118c8:	00413000 	.word	0x00413000
 80118cc:	00413400 	.word	0x00413400
 80118d0:	00413800 	.word	0x00413800
 80118d4:	00417000 	.word	0x00417000
 80118d8:	00416000 	.word	0x00416000
 80118dc:	00414000 	.word	0x00414000
 80118e0:	00415000 	.word	0x00415000
 80118e4:	24015dc4 	.word	0x24015dc4
 80118e8:	24015dc8 	.word	0x24015dc8
 80118ec:	24015dd8 	.word	0x24015dd8

080118f0 <wizchip_setnetmode>:

void wizchip_setnetmode(netmode_type netmode)
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b084      	sub	sp, #16
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
   uint32_t tmp = (uint32_t) netmode;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	60fb      	str	r3, [r7, #12]
   setNETMR ((uint8_t)tmp);
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	b2db      	uxtb	r3, r3
 8011900:	4619      	mov	r1, r3
 8011902:	480e      	ldr	r0, [pc, #56]	; (801193c <wizchip_setnetmode+0x4c>)
 8011904:	f7fd ff2a 	bl	800f75c <WIZCHIP_WRITE>
   setNETMR2((uint8_t)(tmp>>8));
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	0a1b      	lsrs	r3, r3, #8
 801190c:	b2db      	uxtb	r3, r3
 801190e:	4619      	mov	r1, r3
 8011910:	480b      	ldr	r0, [pc, #44]	; (8011940 <wizchip_setnetmode+0x50>)
 8011912:	f7fd ff23 	bl	800f75c <WIZCHIP_WRITE>
   setNET4MR((uint8_t)(tmp>>16));
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	0c1b      	lsrs	r3, r3, #16
 801191a:	b2db      	uxtb	r3, r3
 801191c:	4619      	mov	r1, r3
 801191e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8011922:	f7fd ff1b 	bl	800f75c <WIZCHIP_WRITE>
   setNET6MR((uint8_t)(tmp>>24));
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	0e1b      	lsrs	r3, r3, #24
 801192a:	b2db      	uxtb	r3, r3
 801192c:	4619      	mov	r1, r3
 801192e:	4805      	ldr	r0, [pc, #20]	; (8011944 <wizchip_setnetmode+0x54>)
 8011930:	f7fd ff14 	bl	800f75c <WIZCHIP_WRITE>
}
 8011934:	bf00      	nop
 8011936:	3710      	adds	r7, #16
 8011938:	46bd      	mov	sp, r7
 801193a:	bd80      	pop	{r7, pc}
 801193c:	00400800 	.word	0x00400800
 8011940:	00400900 	.word	0x00400900
 8011944:	00400400 	.word	0x00400400

08011948 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8011948:	b590      	push	{r4, r7, lr}
 801194a:	b083      	sub	sp, #12
 801194c:	af00      	add	r7, sp, #0
   uint32_t ret = 0;
 801194e:	2300      	movs	r3, #0
 8011950:	607b      	str	r3, [r7, #4]
   ret = getNETMR();
 8011952:	4811      	ldr	r0, [pc, #68]	; (8011998 <wizchip_getnetmode+0x50>)
 8011954:	f7fd ff12 	bl	800f77c <WIZCHIP_READ>
 8011958:	4603      	mov	r3, r0
 801195a:	607b      	str	r3, [r7, #4]
   ret = (ret << 8)  + getNETMR2();
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	021c      	lsls	r4, r3, #8
 8011960:	480e      	ldr	r0, [pc, #56]	; (801199c <wizchip_getnetmode+0x54>)
 8011962:	f7fd ff0b 	bl	800f77c <WIZCHIP_READ>
 8011966:	4603      	mov	r3, r0
 8011968:	4423      	add	r3, r4
 801196a:	607b      	str	r3, [r7, #4]
   ret = (ret << 16) + getNET4MR();
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	041c      	lsls	r4, r3, #16
 8011970:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8011974:	f7fd ff02 	bl	800f77c <WIZCHIP_READ>
 8011978:	4603      	mov	r3, r0
 801197a:	4423      	add	r3, r4
 801197c:	607b      	str	r3, [r7, #4]
   ret = (ret << 24) + getNET6MR();
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	061c      	lsls	r4, r3, #24
 8011982:	4807      	ldr	r0, [pc, #28]	; (80119a0 <wizchip_getnetmode+0x58>)
 8011984:	f7fd fefa 	bl	800f77c <WIZCHIP_READ>
 8011988:	4603      	mov	r3, r0
 801198a:	4423      	add	r3, r4
 801198c:	607b      	str	r3, [r7, #4]
   return (netmode_type)ret;
 801198e:	687b      	ldr	r3, [r7, #4]
}
 8011990:	4618      	mov	r0, r3
 8011992:	370c      	adds	r7, #12
 8011994:	46bd      	mov	sp, r7
 8011996:	bd90      	pop	{r4, r7, pc}
 8011998:	00400800 	.word	0x00400800
 801199c:	00400900 	.word	0x00400900
 80119a0:	00400400 	.word	0x00400400

080119a4 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b082      	sub	sp, #8
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
   setRCR(nettime->s_retry_cnt);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	781b      	ldrb	r3, [r3, #0]
 80119b0:	4619      	mov	r1, r3
 80119b2:	4817      	ldr	r0, [pc, #92]	; (8011a10 <wizchip_settimeout+0x6c>)
 80119b4:	f7fd fed2 	bl	800f75c <WIZCHIP_WRITE>
   setRTR(nettime->s_time_100us);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	885b      	ldrh	r3, [r3, #2]
 80119bc:	0a1b      	lsrs	r3, r3, #8
 80119be:	b29b      	uxth	r3, r3
 80119c0:	b2db      	uxtb	r3, r3
 80119c2:	4619      	mov	r1, r3
 80119c4:	f44f 0084 	mov.w	r0, #4325376	; 0x420000
 80119c8:	f7fd fec8 	bl	800f75c <WIZCHIP_WRITE>
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	885b      	ldrh	r3, [r3, #2]
 80119d0:	b2db      	uxtb	r3, r3
 80119d2:	4619      	mov	r1, r3
 80119d4:	480f      	ldr	r0, [pc, #60]	; (8011a14 <wizchip_settimeout+0x70>)
 80119d6:	f7fd fec1 	bl	800f75c <WIZCHIP_WRITE>
   setSLRCR(nettime->sl_retry_cnt);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	791b      	ldrb	r3, [r3, #4]
 80119de:	4619      	mov	r1, r3
 80119e0:	480d      	ldr	r0, [pc, #52]	; (8011a18 <wizchip_settimeout+0x74>)
 80119e2:	f7fd febb 	bl	800f75c <WIZCHIP_WRITE>
   setSLRTR(nettime->sl_time_100us);
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	88db      	ldrh	r3, [r3, #6]
 80119ea:	0a1b      	lsrs	r3, r3, #8
 80119ec:	b29b      	uxth	r3, r3
 80119ee:	b2db      	uxtb	r3, r3
 80119f0:	4619      	mov	r1, r3
 80119f2:	480a      	ldr	r0, [pc, #40]	; (8011a1c <wizchip_settimeout+0x78>)
 80119f4:	f7fd feb2 	bl	800f75c <WIZCHIP_WRITE>
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	88db      	ldrh	r3, [r3, #6]
 80119fc:	b2db      	uxtb	r3, r3
 80119fe:	4619      	mov	r1, r3
 8011a00:	4807      	ldr	r0, [pc, #28]	; (8011a20 <wizchip_settimeout+0x7c>)
 8011a02:	f7fd feab 	bl	800f75c <WIZCHIP_WRITE>
}
 8011a06:	bf00      	nop
 8011a08:	3708      	adds	r7, #8
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	bd80      	pop	{r7, pc}
 8011a0e:	bf00      	nop
 8011a10:	00420400 	.word	0x00420400
 8011a14:	00420100 	.word	0x00420100
 8011a18:	00420c00 	.word	0x00420c00
 8011a1c:	00420800 	.word	0x00420800
 8011a20:	00420900 	.word	0x00420900

08011a24 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8011a24:	b590      	push	{r4, r7, lr}
 8011a26:	b083      	sub	sp, #12
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
   nettime->s_retry_cnt   = getRCR();
 8011a2c:	4819      	ldr	r0, [pc, #100]	; (8011a94 <wizchip_gettimeout+0x70>)
 8011a2e:	f7fd fea5 	bl	800f77c <WIZCHIP_READ>
 8011a32:	4603      	mov	r3, r0
 8011a34:	461a      	mov	r2, r3
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	701a      	strb	r2, [r3, #0]
   nettime->s_time_100us  = getRTR();
 8011a3a:	f44f 0084 	mov.w	r0, #4325376	; 0x420000
 8011a3e:	f7fd fe9d 	bl	800f77c <WIZCHIP_READ>
 8011a42:	4603      	mov	r3, r0
 8011a44:	b29b      	uxth	r3, r3
 8011a46:	021b      	lsls	r3, r3, #8
 8011a48:	b29c      	uxth	r4, r3
 8011a4a:	4813      	ldr	r0, [pc, #76]	; (8011a98 <wizchip_gettimeout+0x74>)
 8011a4c:	f7fd fe96 	bl	800f77c <WIZCHIP_READ>
 8011a50:	4603      	mov	r3, r0
 8011a52:	b29b      	uxth	r3, r3
 8011a54:	4423      	add	r3, r4
 8011a56:	b29a      	uxth	r2, r3
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	805a      	strh	r2, [r3, #2]
   nettime->sl_retry_cnt  = getSLRCR();
 8011a5c:	480f      	ldr	r0, [pc, #60]	; (8011a9c <wizchip_gettimeout+0x78>)
 8011a5e:	f7fd fe8d 	bl	800f77c <WIZCHIP_READ>
 8011a62:	4603      	mov	r3, r0
 8011a64:	461a      	mov	r2, r3
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	711a      	strb	r2, [r3, #4]
   nettime->sl_time_100us = getSLRTR();
 8011a6a:	480d      	ldr	r0, [pc, #52]	; (8011aa0 <wizchip_gettimeout+0x7c>)
 8011a6c:	f7fd fe86 	bl	800f77c <WIZCHIP_READ>
 8011a70:	4603      	mov	r3, r0
 8011a72:	b29b      	uxth	r3, r3
 8011a74:	021b      	lsls	r3, r3, #8
 8011a76:	b29c      	uxth	r4, r3
 8011a78:	480a      	ldr	r0, [pc, #40]	; (8011aa4 <wizchip_gettimeout+0x80>)
 8011a7a:	f7fd fe7f 	bl	800f77c <WIZCHIP_READ>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	b29b      	uxth	r3, r3
 8011a82:	4423      	add	r3, r4
 8011a84:	b29a      	uxth	r2, r3
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	80da      	strh	r2, [r3, #6]
}
 8011a8a:	bf00      	nop
 8011a8c:	370c      	adds	r7, #12
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd90      	pop	{r4, r7, pc}
 8011a92:	bf00      	nop
 8011a94:	00420400 	.word	0x00420400
 8011a98:	00420100 	.word	0x00420100
 8011a9c:	00420c00 	.word	0x00420c00
 8011aa0:	00420800 	.word	0x00420800
 8011aa4:	00420900 	.word	0x00420900

08011aa8 <calloc>:
 8011aa8:	4b02      	ldr	r3, [pc, #8]	; (8011ab4 <calloc+0xc>)
 8011aaa:	460a      	mov	r2, r1
 8011aac:	4601      	mov	r1, r0
 8011aae:	6818      	ldr	r0, [r3, #0]
 8011ab0:	f000 b802 	b.w	8011ab8 <_calloc_r>
 8011ab4:	24000118 	.word	0x24000118

08011ab8 <_calloc_r>:
 8011ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011aba:	fba1 2402 	umull	r2, r4, r1, r2
 8011abe:	b94c      	cbnz	r4, 8011ad4 <_calloc_r+0x1c>
 8011ac0:	4611      	mov	r1, r2
 8011ac2:	9201      	str	r2, [sp, #4]
 8011ac4:	f000 f82e 	bl	8011b24 <_malloc_r>
 8011ac8:	9a01      	ldr	r2, [sp, #4]
 8011aca:	4605      	mov	r5, r0
 8011acc:	b930      	cbnz	r0, 8011adc <_calloc_r+0x24>
 8011ace:	4628      	mov	r0, r5
 8011ad0:	b003      	add	sp, #12
 8011ad2:	bd30      	pop	{r4, r5, pc}
 8011ad4:	220c      	movs	r2, #12
 8011ad6:	6002      	str	r2, [r0, #0]
 8011ad8:	2500      	movs	r5, #0
 8011ada:	e7f8      	b.n	8011ace <_calloc_r+0x16>
 8011adc:	4621      	mov	r1, r4
 8011ade:	f000 faa3 	bl	8012028 <memset>
 8011ae2:	e7f4      	b.n	8011ace <_calloc_r+0x16>

08011ae4 <sbrk_aligned>:
 8011ae4:	b570      	push	{r4, r5, r6, lr}
 8011ae6:	4e0e      	ldr	r6, [pc, #56]	; (8011b20 <sbrk_aligned+0x3c>)
 8011ae8:	460c      	mov	r4, r1
 8011aea:	6831      	ldr	r1, [r6, #0]
 8011aec:	4605      	mov	r5, r0
 8011aee:	b911      	cbnz	r1, 8011af6 <sbrk_aligned+0x12>
 8011af0:	f000 fb3e 	bl	8012170 <_sbrk_r>
 8011af4:	6030      	str	r0, [r6, #0]
 8011af6:	4621      	mov	r1, r4
 8011af8:	4628      	mov	r0, r5
 8011afa:	f000 fb39 	bl	8012170 <_sbrk_r>
 8011afe:	1c43      	adds	r3, r0, #1
 8011b00:	d00a      	beq.n	8011b18 <sbrk_aligned+0x34>
 8011b02:	1cc4      	adds	r4, r0, #3
 8011b04:	f024 0403 	bic.w	r4, r4, #3
 8011b08:	42a0      	cmp	r0, r4
 8011b0a:	d007      	beq.n	8011b1c <sbrk_aligned+0x38>
 8011b0c:	1a21      	subs	r1, r4, r0
 8011b0e:	4628      	mov	r0, r5
 8011b10:	f000 fb2e 	bl	8012170 <_sbrk_r>
 8011b14:	3001      	adds	r0, #1
 8011b16:	d101      	bne.n	8011b1c <sbrk_aligned+0x38>
 8011b18:	f04f 34ff 	mov.w	r4, #4294967295
 8011b1c:	4620      	mov	r0, r4
 8011b1e:	bd70      	pop	{r4, r5, r6, pc}
 8011b20:	24015de0 	.word	0x24015de0

08011b24 <_malloc_r>:
 8011b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b28:	1ccd      	adds	r5, r1, #3
 8011b2a:	f025 0503 	bic.w	r5, r5, #3
 8011b2e:	3508      	adds	r5, #8
 8011b30:	2d0c      	cmp	r5, #12
 8011b32:	bf38      	it	cc
 8011b34:	250c      	movcc	r5, #12
 8011b36:	2d00      	cmp	r5, #0
 8011b38:	4607      	mov	r7, r0
 8011b3a:	db01      	blt.n	8011b40 <_malloc_r+0x1c>
 8011b3c:	42a9      	cmp	r1, r5
 8011b3e:	d905      	bls.n	8011b4c <_malloc_r+0x28>
 8011b40:	230c      	movs	r3, #12
 8011b42:	603b      	str	r3, [r7, #0]
 8011b44:	2600      	movs	r6, #0
 8011b46:	4630      	mov	r0, r6
 8011b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011c20 <_malloc_r+0xfc>
 8011b50:	f000 f868 	bl	8011c24 <__malloc_lock>
 8011b54:	f8d8 3000 	ldr.w	r3, [r8]
 8011b58:	461c      	mov	r4, r3
 8011b5a:	bb5c      	cbnz	r4, 8011bb4 <_malloc_r+0x90>
 8011b5c:	4629      	mov	r1, r5
 8011b5e:	4638      	mov	r0, r7
 8011b60:	f7ff ffc0 	bl	8011ae4 <sbrk_aligned>
 8011b64:	1c43      	adds	r3, r0, #1
 8011b66:	4604      	mov	r4, r0
 8011b68:	d155      	bne.n	8011c16 <_malloc_r+0xf2>
 8011b6a:	f8d8 4000 	ldr.w	r4, [r8]
 8011b6e:	4626      	mov	r6, r4
 8011b70:	2e00      	cmp	r6, #0
 8011b72:	d145      	bne.n	8011c00 <_malloc_r+0xdc>
 8011b74:	2c00      	cmp	r4, #0
 8011b76:	d048      	beq.n	8011c0a <_malloc_r+0xe6>
 8011b78:	6823      	ldr	r3, [r4, #0]
 8011b7a:	4631      	mov	r1, r6
 8011b7c:	4638      	mov	r0, r7
 8011b7e:	eb04 0903 	add.w	r9, r4, r3
 8011b82:	f000 faf5 	bl	8012170 <_sbrk_r>
 8011b86:	4581      	cmp	r9, r0
 8011b88:	d13f      	bne.n	8011c0a <_malloc_r+0xe6>
 8011b8a:	6821      	ldr	r1, [r4, #0]
 8011b8c:	1a6d      	subs	r5, r5, r1
 8011b8e:	4629      	mov	r1, r5
 8011b90:	4638      	mov	r0, r7
 8011b92:	f7ff ffa7 	bl	8011ae4 <sbrk_aligned>
 8011b96:	3001      	adds	r0, #1
 8011b98:	d037      	beq.n	8011c0a <_malloc_r+0xe6>
 8011b9a:	6823      	ldr	r3, [r4, #0]
 8011b9c:	442b      	add	r3, r5
 8011b9e:	6023      	str	r3, [r4, #0]
 8011ba0:	f8d8 3000 	ldr.w	r3, [r8]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d038      	beq.n	8011c1a <_malloc_r+0xf6>
 8011ba8:	685a      	ldr	r2, [r3, #4]
 8011baa:	42a2      	cmp	r2, r4
 8011bac:	d12b      	bne.n	8011c06 <_malloc_r+0xe2>
 8011bae:	2200      	movs	r2, #0
 8011bb0:	605a      	str	r2, [r3, #4]
 8011bb2:	e00f      	b.n	8011bd4 <_malloc_r+0xb0>
 8011bb4:	6822      	ldr	r2, [r4, #0]
 8011bb6:	1b52      	subs	r2, r2, r5
 8011bb8:	d41f      	bmi.n	8011bfa <_malloc_r+0xd6>
 8011bba:	2a0b      	cmp	r2, #11
 8011bbc:	d917      	bls.n	8011bee <_malloc_r+0xca>
 8011bbe:	1961      	adds	r1, r4, r5
 8011bc0:	42a3      	cmp	r3, r4
 8011bc2:	6025      	str	r5, [r4, #0]
 8011bc4:	bf18      	it	ne
 8011bc6:	6059      	strne	r1, [r3, #4]
 8011bc8:	6863      	ldr	r3, [r4, #4]
 8011bca:	bf08      	it	eq
 8011bcc:	f8c8 1000 	streq.w	r1, [r8]
 8011bd0:	5162      	str	r2, [r4, r5]
 8011bd2:	604b      	str	r3, [r1, #4]
 8011bd4:	4638      	mov	r0, r7
 8011bd6:	f104 060b 	add.w	r6, r4, #11
 8011bda:	f000 f829 	bl	8011c30 <__malloc_unlock>
 8011bde:	f026 0607 	bic.w	r6, r6, #7
 8011be2:	1d23      	adds	r3, r4, #4
 8011be4:	1af2      	subs	r2, r6, r3
 8011be6:	d0ae      	beq.n	8011b46 <_malloc_r+0x22>
 8011be8:	1b9b      	subs	r3, r3, r6
 8011bea:	50a3      	str	r3, [r4, r2]
 8011bec:	e7ab      	b.n	8011b46 <_malloc_r+0x22>
 8011bee:	42a3      	cmp	r3, r4
 8011bf0:	6862      	ldr	r2, [r4, #4]
 8011bf2:	d1dd      	bne.n	8011bb0 <_malloc_r+0x8c>
 8011bf4:	f8c8 2000 	str.w	r2, [r8]
 8011bf8:	e7ec      	b.n	8011bd4 <_malloc_r+0xb0>
 8011bfa:	4623      	mov	r3, r4
 8011bfc:	6864      	ldr	r4, [r4, #4]
 8011bfe:	e7ac      	b.n	8011b5a <_malloc_r+0x36>
 8011c00:	4634      	mov	r4, r6
 8011c02:	6876      	ldr	r6, [r6, #4]
 8011c04:	e7b4      	b.n	8011b70 <_malloc_r+0x4c>
 8011c06:	4613      	mov	r3, r2
 8011c08:	e7cc      	b.n	8011ba4 <_malloc_r+0x80>
 8011c0a:	230c      	movs	r3, #12
 8011c0c:	603b      	str	r3, [r7, #0]
 8011c0e:	4638      	mov	r0, r7
 8011c10:	f000 f80e 	bl	8011c30 <__malloc_unlock>
 8011c14:	e797      	b.n	8011b46 <_malloc_r+0x22>
 8011c16:	6025      	str	r5, [r4, #0]
 8011c18:	e7dc      	b.n	8011bd4 <_malloc_r+0xb0>
 8011c1a:	605b      	str	r3, [r3, #4]
 8011c1c:	deff      	udf	#255	; 0xff
 8011c1e:	bf00      	nop
 8011c20:	24015ddc 	.word	0x24015ddc

08011c24 <__malloc_lock>:
 8011c24:	4801      	ldr	r0, [pc, #4]	; (8011c2c <__malloc_lock+0x8>)
 8011c26:	f000 baef 	b.w	8012208 <__retarget_lock_acquire_recursive>
 8011c2a:	bf00      	nop
 8011c2c:	24015f24 	.word	0x24015f24

08011c30 <__malloc_unlock>:
 8011c30:	4801      	ldr	r0, [pc, #4]	; (8011c38 <__malloc_unlock+0x8>)
 8011c32:	f000 baea 	b.w	801220a <__retarget_lock_release_recursive>
 8011c36:	bf00      	nop
 8011c38:	24015f24 	.word	0x24015f24

08011c3c <std>:
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	b510      	push	{r4, lr}
 8011c40:	4604      	mov	r4, r0
 8011c42:	e9c0 3300 	strd	r3, r3, [r0]
 8011c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011c4a:	6083      	str	r3, [r0, #8]
 8011c4c:	8181      	strh	r1, [r0, #12]
 8011c4e:	6643      	str	r3, [r0, #100]	; 0x64
 8011c50:	81c2      	strh	r2, [r0, #14]
 8011c52:	6183      	str	r3, [r0, #24]
 8011c54:	4619      	mov	r1, r3
 8011c56:	2208      	movs	r2, #8
 8011c58:	305c      	adds	r0, #92	; 0x5c
 8011c5a:	f000 f9e5 	bl	8012028 <memset>
 8011c5e:	4b05      	ldr	r3, [pc, #20]	; (8011c74 <std+0x38>)
 8011c60:	6263      	str	r3, [r4, #36]	; 0x24
 8011c62:	4b05      	ldr	r3, [pc, #20]	; (8011c78 <std+0x3c>)
 8011c64:	62a3      	str	r3, [r4, #40]	; 0x28
 8011c66:	4b05      	ldr	r3, [pc, #20]	; (8011c7c <std+0x40>)
 8011c68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011c6a:	4b05      	ldr	r3, [pc, #20]	; (8011c80 <std+0x44>)
 8011c6c:	6224      	str	r4, [r4, #32]
 8011c6e:	6323      	str	r3, [r4, #48]	; 0x30
 8011c70:	bd10      	pop	{r4, pc}
 8011c72:	bf00      	nop
 8011c74:	08011e79 	.word	0x08011e79
 8011c78:	08011e9b 	.word	0x08011e9b
 8011c7c:	08011ed3 	.word	0x08011ed3
 8011c80:	08011ef7 	.word	0x08011ef7

08011c84 <stdio_exit_handler>:
 8011c84:	4a02      	ldr	r2, [pc, #8]	; (8011c90 <stdio_exit_handler+0xc>)
 8011c86:	4903      	ldr	r1, [pc, #12]	; (8011c94 <stdio_exit_handler+0x10>)
 8011c88:	4803      	ldr	r0, [pc, #12]	; (8011c98 <stdio_exit_handler+0x14>)
 8011c8a:	f000 b869 	b.w	8011d60 <_fwalk_sglue>
 8011c8e:	bf00      	nop
 8011c90:	240000c0 	.word	0x240000c0
 8011c94:	08012975 	.word	0x08012975
 8011c98:	240000cc 	.word	0x240000cc

08011c9c <cleanup_stdio>:
 8011c9c:	6841      	ldr	r1, [r0, #4]
 8011c9e:	4b0c      	ldr	r3, [pc, #48]	; (8011cd0 <cleanup_stdio+0x34>)
 8011ca0:	4299      	cmp	r1, r3
 8011ca2:	b510      	push	{r4, lr}
 8011ca4:	4604      	mov	r4, r0
 8011ca6:	d001      	beq.n	8011cac <cleanup_stdio+0x10>
 8011ca8:	f000 fe64 	bl	8012974 <_fflush_r>
 8011cac:	68a1      	ldr	r1, [r4, #8]
 8011cae:	4b09      	ldr	r3, [pc, #36]	; (8011cd4 <cleanup_stdio+0x38>)
 8011cb0:	4299      	cmp	r1, r3
 8011cb2:	d002      	beq.n	8011cba <cleanup_stdio+0x1e>
 8011cb4:	4620      	mov	r0, r4
 8011cb6:	f000 fe5d 	bl	8012974 <_fflush_r>
 8011cba:	68e1      	ldr	r1, [r4, #12]
 8011cbc:	4b06      	ldr	r3, [pc, #24]	; (8011cd8 <cleanup_stdio+0x3c>)
 8011cbe:	4299      	cmp	r1, r3
 8011cc0:	d004      	beq.n	8011ccc <cleanup_stdio+0x30>
 8011cc2:	4620      	mov	r0, r4
 8011cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cc8:	f000 be54 	b.w	8012974 <_fflush_r>
 8011ccc:	bd10      	pop	{r4, pc}
 8011cce:	bf00      	nop
 8011cd0:	24015de4 	.word	0x24015de4
 8011cd4:	24015e4c 	.word	0x24015e4c
 8011cd8:	24015eb4 	.word	0x24015eb4

08011cdc <global_stdio_init.part.0>:
 8011cdc:	b510      	push	{r4, lr}
 8011cde:	4b0b      	ldr	r3, [pc, #44]	; (8011d0c <global_stdio_init.part.0+0x30>)
 8011ce0:	4c0b      	ldr	r4, [pc, #44]	; (8011d10 <global_stdio_init.part.0+0x34>)
 8011ce2:	4a0c      	ldr	r2, [pc, #48]	; (8011d14 <global_stdio_init.part.0+0x38>)
 8011ce4:	601a      	str	r2, [r3, #0]
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	2200      	movs	r2, #0
 8011cea:	2104      	movs	r1, #4
 8011cec:	f7ff ffa6 	bl	8011c3c <std>
 8011cf0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011cf4:	2201      	movs	r2, #1
 8011cf6:	2109      	movs	r1, #9
 8011cf8:	f7ff ffa0 	bl	8011c3c <std>
 8011cfc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011d00:	2202      	movs	r2, #2
 8011d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d06:	2112      	movs	r1, #18
 8011d08:	f7ff bf98 	b.w	8011c3c <std>
 8011d0c:	24015f1c 	.word	0x24015f1c
 8011d10:	24015de4 	.word	0x24015de4
 8011d14:	08011c85 	.word	0x08011c85

08011d18 <__sfp_lock_acquire>:
 8011d18:	4801      	ldr	r0, [pc, #4]	; (8011d20 <__sfp_lock_acquire+0x8>)
 8011d1a:	f000 ba75 	b.w	8012208 <__retarget_lock_acquire_recursive>
 8011d1e:	bf00      	nop
 8011d20:	24015f25 	.word	0x24015f25

08011d24 <__sfp_lock_release>:
 8011d24:	4801      	ldr	r0, [pc, #4]	; (8011d2c <__sfp_lock_release+0x8>)
 8011d26:	f000 ba70 	b.w	801220a <__retarget_lock_release_recursive>
 8011d2a:	bf00      	nop
 8011d2c:	24015f25 	.word	0x24015f25

08011d30 <__sinit>:
 8011d30:	b510      	push	{r4, lr}
 8011d32:	4604      	mov	r4, r0
 8011d34:	f7ff fff0 	bl	8011d18 <__sfp_lock_acquire>
 8011d38:	6a23      	ldr	r3, [r4, #32]
 8011d3a:	b11b      	cbz	r3, 8011d44 <__sinit+0x14>
 8011d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d40:	f7ff bff0 	b.w	8011d24 <__sfp_lock_release>
 8011d44:	4b04      	ldr	r3, [pc, #16]	; (8011d58 <__sinit+0x28>)
 8011d46:	6223      	str	r3, [r4, #32]
 8011d48:	4b04      	ldr	r3, [pc, #16]	; (8011d5c <__sinit+0x2c>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d1f5      	bne.n	8011d3c <__sinit+0xc>
 8011d50:	f7ff ffc4 	bl	8011cdc <global_stdio_init.part.0>
 8011d54:	e7f2      	b.n	8011d3c <__sinit+0xc>
 8011d56:	bf00      	nop
 8011d58:	08011c9d 	.word	0x08011c9d
 8011d5c:	24015f1c 	.word	0x24015f1c

08011d60 <_fwalk_sglue>:
 8011d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d64:	4607      	mov	r7, r0
 8011d66:	4688      	mov	r8, r1
 8011d68:	4614      	mov	r4, r2
 8011d6a:	2600      	movs	r6, #0
 8011d6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011d70:	f1b9 0901 	subs.w	r9, r9, #1
 8011d74:	d505      	bpl.n	8011d82 <_fwalk_sglue+0x22>
 8011d76:	6824      	ldr	r4, [r4, #0]
 8011d78:	2c00      	cmp	r4, #0
 8011d7a:	d1f7      	bne.n	8011d6c <_fwalk_sglue+0xc>
 8011d7c:	4630      	mov	r0, r6
 8011d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d82:	89ab      	ldrh	r3, [r5, #12]
 8011d84:	2b01      	cmp	r3, #1
 8011d86:	d907      	bls.n	8011d98 <_fwalk_sglue+0x38>
 8011d88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011d8c:	3301      	adds	r3, #1
 8011d8e:	d003      	beq.n	8011d98 <_fwalk_sglue+0x38>
 8011d90:	4629      	mov	r1, r5
 8011d92:	4638      	mov	r0, r7
 8011d94:	47c0      	blx	r8
 8011d96:	4306      	orrs	r6, r0
 8011d98:	3568      	adds	r5, #104	; 0x68
 8011d9a:	e7e9      	b.n	8011d70 <_fwalk_sglue+0x10>

08011d9c <iprintf>:
 8011d9c:	b40f      	push	{r0, r1, r2, r3}
 8011d9e:	b507      	push	{r0, r1, r2, lr}
 8011da0:	4906      	ldr	r1, [pc, #24]	; (8011dbc <iprintf+0x20>)
 8011da2:	ab04      	add	r3, sp, #16
 8011da4:	6808      	ldr	r0, [r1, #0]
 8011da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011daa:	6881      	ldr	r1, [r0, #8]
 8011dac:	9301      	str	r3, [sp, #4]
 8011dae:	f000 fab1 	bl	8012314 <_vfiprintf_r>
 8011db2:	b003      	add	sp, #12
 8011db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011db8:	b004      	add	sp, #16
 8011dba:	4770      	bx	lr
 8011dbc:	24000118 	.word	0x24000118

08011dc0 <_puts_r>:
 8011dc0:	6a03      	ldr	r3, [r0, #32]
 8011dc2:	b570      	push	{r4, r5, r6, lr}
 8011dc4:	6884      	ldr	r4, [r0, #8]
 8011dc6:	4605      	mov	r5, r0
 8011dc8:	460e      	mov	r6, r1
 8011dca:	b90b      	cbnz	r3, 8011dd0 <_puts_r+0x10>
 8011dcc:	f7ff ffb0 	bl	8011d30 <__sinit>
 8011dd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011dd2:	07db      	lsls	r3, r3, #31
 8011dd4:	d405      	bmi.n	8011de2 <_puts_r+0x22>
 8011dd6:	89a3      	ldrh	r3, [r4, #12]
 8011dd8:	0598      	lsls	r0, r3, #22
 8011dda:	d402      	bmi.n	8011de2 <_puts_r+0x22>
 8011ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011dde:	f000 fa13 	bl	8012208 <__retarget_lock_acquire_recursive>
 8011de2:	89a3      	ldrh	r3, [r4, #12]
 8011de4:	0719      	lsls	r1, r3, #28
 8011de6:	d513      	bpl.n	8011e10 <_puts_r+0x50>
 8011de8:	6923      	ldr	r3, [r4, #16]
 8011dea:	b18b      	cbz	r3, 8011e10 <_puts_r+0x50>
 8011dec:	3e01      	subs	r6, #1
 8011dee:	68a3      	ldr	r3, [r4, #8]
 8011df0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011df4:	3b01      	subs	r3, #1
 8011df6:	60a3      	str	r3, [r4, #8]
 8011df8:	b9e9      	cbnz	r1, 8011e36 <_puts_r+0x76>
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	da2e      	bge.n	8011e5c <_puts_r+0x9c>
 8011dfe:	4622      	mov	r2, r4
 8011e00:	210a      	movs	r1, #10
 8011e02:	4628      	mov	r0, r5
 8011e04:	f000 f87b 	bl	8011efe <__swbuf_r>
 8011e08:	3001      	adds	r0, #1
 8011e0a:	d007      	beq.n	8011e1c <_puts_r+0x5c>
 8011e0c:	250a      	movs	r5, #10
 8011e0e:	e007      	b.n	8011e20 <_puts_r+0x60>
 8011e10:	4621      	mov	r1, r4
 8011e12:	4628      	mov	r0, r5
 8011e14:	f000 f8b0 	bl	8011f78 <__swsetup_r>
 8011e18:	2800      	cmp	r0, #0
 8011e1a:	d0e7      	beq.n	8011dec <_puts_r+0x2c>
 8011e1c:	f04f 35ff 	mov.w	r5, #4294967295
 8011e20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011e22:	07da      	lsls	r2, r3, #31
 8011e24:	d405      	bmi.n	8011e32 <_puts_r+0x72>
 8011e26:	89a3      	ldrh	r3, [r4, #12]
 8011e28:	059b      	lsls	r3, r3, #22
 8011e2a:	d402      	bmi.n	8011e32 <_puts_r+0x72>
 8011e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e2e:	f000 f9ec 	bl	801220a <__retarget_lock_release_recursive>
 8011e32:	4628      	mov	r0, r5
 8011e34:	bd70      	pop	{r4, r5, r6, pc}
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	da04      	bge.n	8011e44 <_puts_r+0x84>
 8011e3a:	69a2      	ldr	r2, [r4, #24]
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	dc06      	bgt.n	8011e4e <_puts_r+0x8e>
 8011e40:	290a      	cmp	r1, #10
 8011e42:	d004      	beq.n	8011e4e <_puts_r+0x8e>
 8011e44:	6823      	ldr	r3, [r4, #0]
 8011e46:	1c5a      	adds	r2, r3, #1
 8011e48:	6022      	str	r2, [r4, #0]
 8011e4a:	7019      	strb	r1, [r3, #0]
 8011e4c:	e7cf      	b.n	8011dee <_puts_r+0x2e>
 8011e4e:	4622      	mov	r2, r4
 8011e50:	4628      	mov	r0, r5
 8011e52:	f000 f854 	bl	8011efe <__swbuf_r>
 8011e56:	3001      	adds	r0, #1
 8011e58:	d1c9      	bne.n	8011dee <_puts_r+0x2e>
 8011e5a:	e7df      	b.n	8011e1c <_puts_r+0x5c>
 8011e5c:	6823      	ldr	r3, [r4, #0]
 8011e5e:	250a      	movs	r5, #10
 8011e60:	1c5a      	adds	r2, r3, #1
 8011e62:	6022      	str	r2, [r4, #0]
 8011e64:	701d      	strb	r5, [r3, #0]
 8011e66:	e7db      	b.n	8011e20 <_puts_r+0x60>

08011e68 <puts>:
 8011e68:	4b02      	ldr	r3, [pc, #8]	; (8011e74 <puts+0xc>)
 8011e6a:	4601      	mov	r1, r0
 8011e6c:	6818      	ldr	r0, [r3, #0]
 8011e6e:	f7ff bfa7 	b.w	8011dc0 <_puts_r>
 8011e72:	bf00      	nop
 8011e74:	24000118 	.word	0x24000118

08011e78 <__sread>:
 8011e78:	b510      	push	{r4, lr}
 8011e7a:	460c      	mov	r4, r1
 8011e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e80:	f000 f964 	bl	801214c <_read_r>
 8011e84:	2800      	cmp	r0, #0
 8011e86:	bfab      	itete	ge
 8011e88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011e8a:	89a3      	ldrhlt	r3, [r4, #12]
 8011e8c:	181b      	addge	r3, r3, r0
 8011e8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011e92:	bfac      	ite	ge
 8011e94:	6563      	strge	r3, [r4, #84]	; 0x54
 8011e96:	81a3      	strhlt	r3, [r4, #12]
 8011e98:	bd10      	pop	{r4, pc}

08011e9a <__swrite>:
 8011e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e9e:	461f      	mov	r7, r3
 8011ea0:	898b      	ldrh	r3, [r1, #12]
 8011ea2:	05db      	lsls	r3, r3, #23
 8011ea4:	4605      	mov	r5, r0
 8011ea6:	460c      	mov	r4, r1
 8011ea8:	4616      	mov	r6, r2
 8011eaa:	d505      	bpl.n	8011eb8 <__swrite+0x1e>
 8011eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011eb0:	2302      	movs	r3, #2
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	f000 f938 	bl	8012128 <_lseek_r>
 8011eb8:	89a3      	ldrh	r3, [r4, #12]
 8011eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ebe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011ec2:	81a3      	strh	r3, [r4, #12]
 8011ec4:	4632      	mov	r2, r6
 8011ec6:	463b      	mov	r3, r7
 8011ec8:	4628      	mov	r0, r5
 8011eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ece:	f000 b95f 	b.w	8012190 <_write_r>

08011ed2 <__sseek>:
 8011ed2:	b510      	push	{r4, lr}
 8011ed4:	460c      	mov	r4, r1
 8011ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011eda:	f000 f925 	bl	8012128 <_lseek_r>
 8011ede:	1c43      	adds	r3, r0, #1
 8011ee0:	89a3      	ldrh	r3, [r4, #12]
 8011ee2:	bf15      	itete	ne
 8011ee4:	6560      	strne	r0, [r4, #84]	; 0x54
 8011ee6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011eea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011eee:	81a3      	strheq	r3, [r4, #12]
 8011ef0:	bf18      	it	ne
 8011ef2:	81a3      	strhne	r3, [r4, #12]
 8011ef4:	bd10      	pop	{r4, pc}

08011ef6 <__sclose>:
 8011ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011efa:	f000 b8af 	b.w	801205c <_close_r>

08011efe <__swbuf_r>:
 8011efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f00:	460e      	mov	r6, r1
 8011f02:	4614      	mov	r4, r2
 8011f04:	4605      	mov	r5, r0
 8011f06:	b118      	cbz	r0, 8011f10 <__swbuf_r+0x12>
 8011f08:	6a03      	ldr	r3, [r0, #32]
 8011f0a:	b90b      	cbnz	r3, 8011f10 <__swbuf_r+0x12>
 8011f0c:	f7ff ff10 	bl	8011d30 <__sinit>
 8011f10:	69a3      	ldr	r3, [r4, #24]
 8011f12:	60a3      	str	r3, [r4, #8]
 8011f14:	89a3      	ldrh	r3, [r4, #12]
 8011f16:	071a      	lsls	r2, r3, #28
 8011f18:	d525      	bpl.n	8011f66 <__swbuf_r+0x68>
 8011f1a:	6923      	ldr	r3, [r4, #16]
 8011f1c:	b31b      	cbz	r3, 8011f66 <__swbuf_r+0x68>
 8011f1e:	6823      	ldr	r3, [r4, #0]
 8011f20:	6922      	ldr	r2, [r4, #16]
 8011f22:	1a98      	subs	r0, r3, r2
 8011f24:	6963      	ldr	r3, [r4, #20]
 8011f26:	b2f6      	uxtb	r6, r6
 8011f28:	4283      	cmp	r3, r0
 8011f2a:	4637      	mov	r7, r6
 8011f2c:	dc04      	bgt.n	8011f38 <__swbuf_r+0x3a>
 8011f2e:	4621      	mov	r1, r4
 8011f30:	4628      	mov	r0, r5
 8011f32:	f000 fd1f 	bl	8012974 <_fflush_r>
 8011f36:	b9e0      	cbnz	r0, 8011f72 <__swbuf_r+0x74>
 8011f38:	68a3      	ldr	r3, [r4, #8]
 8011f3a:	3b01      	subs	r3, #1
 8011f3c:	60a3      	str	r3, [r4, #8]
 8011f3e:	6823      	ldr	r3, [r4, #0]
 8011f40:	1c5a      	adds	r2, r3, #1
 8011f42:	6022      	str	r2, [r4, #0]
 8011f44:	701e      	strb	r6, [r3, #0]
 8011f46:	6962      	ldr	r2, [r4, #20]
 8011f48:	1c43      	adds	r3, r0, #1
 8011f4a:	429a      	cmp	r2, r3
 8011f4c:	d004      	beq.n	8011f58 <__swbuf_r+0x5a>
 8011f4e:	89a3      	ldrh	r3, [r4, #12]
 8011f50:	07db      	lsls	r3, r3, #31
 8011f52:	d506      	bpl.n	8011f62 <__swbuf_r+0x64>
 8011f54:	2e0a      	cmp	r6, #10
 8011f56:	d104      	bne.n	8011f62 <__swbuf_r+0x64>
 8011f58:	4621      	mov	r1, r4
 8011f5a:	4628      	mov	r0, r5
 8011f5c:	f000 fd0a 	bl	8012974 <_fflush_r>
 8011f60:	b938      	cbnz	r0, 8011f72 <__swbuf_r+0x74>
 8011f62:	4638      	mov	r0, r7
 8011f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f66:	4621      	mov	r1, r4
 8011f68:	4628      	mov	r0, r5
 8011f6a:	f000 f805 	bl	8011f78 <__swsetup_r>
 8011f6e:	2800      	cmp	r0, #0
 8011f70:	d0d5      	beq.n	8011f1e <__swbuf_r+0x20>
 8011f72:	f04f 37ff 	mov.w	r7, #4294967295
 8011f76:	e7f4      	b.n	8011f62 <__swbuf_r+0x64>

08011f78 <__swsetup_r>:
 8011f78:	b538      	push	{r3, r4, r5, lr}
 8011f7a:	4b2a      	ldr	r3, [pc, #168]	; (8012024 <__swsetup_r+0xac>)
 8011f7c:	4605      	mov	r5, r0
 8011f7e:	6818      	ldr	r0, [r3, #0]
 8011f80:	460c      	mov	r4, r1
 8011f82:	b118      	cbz	r0, 8011f8c <__swsetup_r+0x14>
 8011f84:	6a03      	ldr	r3, [r0, #32]
 8011f86:	b90b      	cbnz	r3, 8011f8c <__swsetup_r+0x14>
 8011f88:	f7ff fed2 	bl	8011d30 <__sinit>
 8011f8c:	89a3      	ldrh	r3, [r4, #12]
 8011f8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011f92:	0718      	lsls	r0, r3, #28
 8011f94:	d422      	bmi.n	8011fdc <__swsetup_r+0x64>
 8011f96:	06d9      	lsls	r1, r3, #27
 8011f98:	d407      	bmi.n	8011faa <__swsetup_r+0x32>
 8011f9a:	2309      	movs	r3, #9
 8011f9c:	602b      	str	r3, [r5, #0]
 8011f9e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011fa2:	81a3      	strh	r3, [r4, #12]
 8011fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8011fa8:	e034      	b.n	8012014 <__swsetup_r+0x9c>
 8011faa:	0758      	lsls	r0, r3, #29
 8011fac:	d512      	bpl.n	8011fd4 <__swsetup_r+0x5c>
 8011fae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011fb0:	b141      	cbz	r1, 8011fc4 <__swsetup_r+0x4c>
 8011fb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011fb6:	4299      	cmp	r1, r3
 8011fb8:	d002      	beq.n	8011fc0 <__swsetup_r+0x48>
 8011fba:	4628      	mov	r0, r5
 8011fbc:	f000 f934 	bl	8012228 <_free_r>
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	6363      	str	r3, [r4, #52]	; 0x34
 8011fc4:	89a3      	ldrh	r3, [r4, #12]
 8011fc6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011fca:	81a3      	strh	r3, [r4, #12]
 8011fcc:	2300      	movs	r3, #0
 8011fce:	6063      	str	r3, [r4, #4]
 8011fd0:	6923      	ldr	r3, [r4, #16]
 8011fd2:	6023      	str	r3, [r4, #0]
 8011fd4:	89a3      	ldrh	r3, [r4, #12]
 8011fd6:	f043 0308 	orr.w	r3, r3, #8
 8011fda:	81a3      	strh	r3, [r4, #12]
 8011fdc:	6923      	ldr	r3, [r4, #16]
 8011fde:	b94b      	cbnz	r3, 8011ff4 <__swsetup_r+0x7c>
 8011fe0:	89a3      	ldrh	r3, [r4, #12]
 8011fe2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011fea:	d003      	beq.n	8011ff4 <__swsetup_r+0x7c>
 8011fec:	4621      	mov	r1, r4
 8011fee:	4628      	mov	r0, r5
 8011ff0:	f000 fd0e 	bl	8012a10 <__smakebuf_r>
 8011ff4:	89a0      	ldrh	r0, [r4, #12]
 8011ff6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011ffa:	f010 0301 	ands.w	r3, r0, #1
 8011ffe:	d00a      	beq.n	8012016 <__swsetup_r+0x9e>
 8012000:	2300      	movs	r3, #0
 8012002:	60a3      	str	r3, [r4, #8]
 8012004:	6963      	ldr	r3, [r4, #20]
 8012006:	425b      	negs	r3, r3
 8012008:	61a3      	str	r3, [r4, #24]
 801200a:	6923      	ldr	r3, [r4, #16]
 801200c:	b943      	cbnz	r3, 8012020 <__swsetup_r+0xa8>
 801200e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012012:	d1c4      	bne.n	8011f9e <__swsetup_r+0x26>
 8012014:	bd38      	pop	{r3, r4, r5, pc}
 8012016:	0781      	lsls	r1, r0, #30
 8012018:	bf58      	it	pl
 801201a:	6963      	ldrpl	r3, [r4, #20]
 801201c:	60a3      	str	r3, [r4, #8]
 801201e:	e7f4      	b.n	801200a <__swsetup_r+0x92>
 8012020:	2000      	movs	r0, #0
 8012022:	e7f7      	b.n	8012014 <__swsetup_r+0x9c>
 8012024:	24000118 	.word	0x24000118

08012028 <memset>:
 8012028:	4402      	add	r2, r0
 801202a:	4603      	mov	r3, r0
 801202c:	4293      	cmp	r3, r2
 801202e:	d100      	bne.n	8012032 <memset+0xa>
 8012030:	4770      	bx	lr
 8012032:	f803 1b01 	strb.w	r1, [r3], #1
 8012036:	e7f9      	b.n	801202c <memset+0x4>

08012038 <strncmp>:
 8012038:	b510      	push	{r4, lr}
 801203a:	b16a      	cbz	r2, 8012058 <strncmp+0x20>
 801203c:	3901      	subs	r1, #1
 801203e:	1884      	adds	r4, r0, r2
 8012040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012044:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012048:	429a      	cmp	r2, r3
 801204a:	d103      	bne.n	8012054 <strncmp+0x1c>
 801204c:	42a0      	cmp	r0, r4
 801204e:	d001      	beq.n	8012054 <strncmp+0x1c>
 8012050:	2a00      	cmp	r2, #0
 8012052:	d1f5      	bne.n	8012040 <strncmp+0x8>
 8012054:	1ad0      	subs	r0, r2, r3
 8012056:	bd10      	pop	{r4, pc}
 8012058:	4610      	mov	r0, r2
 801205a:	e7fc      	b.n	8012056 <strncmp+0x1e>

0801205c <_close_r>:
 801205c:	b538      	push	{r3, r4, r5, lr}
 801205e:	4d06      	ldr	r5, [pc, #24]	; (8012078 <_close_r+0x1c>)
 8012060:	2300      	movs	r3, #0
 8012062:	4604      	mov	r4, r0
 8012064:	4608      	mov	r0, r1
 8012066:	602b      	str	r3, [r5, #0]
 8012068:	f7ef fe1d 	bl	8001ca6 <_close>
 801206c:	1c43      	adds	r3, r0, #1
 801206e:	d102      	bne.n	8012076 <_close_r+0x1a>
 8012070:	682b      	ldr	r3, [r5, #0]
 8012072:	b103      	cbz	r3, 8012076 <_close_r+0x1a>
 8012074:	6023      	str	r3, [r4, #0]
 8012076:	bd38      	pop	{r3, r4, r5, pc}
 8012078:	24015f20 	.word	0x24015f20

0801207c <_reclaim_reent>:
 801207c:	4b29      	ldr	r3, [pc, #164]	; (8012124 <_reclaim_reent+0xa8>)
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	4283      	cmp	r3, r0
 8012082:	b570      	push	{r4, r5, r6, lr}
 8012084:	4604      	mov	r4, r0
 8012086:	d04b      	beq.n	8012120 <_reclaim_reent+0xa4>
 8012088:	69c3      	ldr	r3, [r0, #28]
 801208a:	b143      	cbz	r3, 801209e <_reclaim_reent+0x22>
 801208c:	68db      	ldr	r3, [r3, #12]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d144      	bne.n	801211c <_reclaim_reent+0xa0>
 8012092:	69e3      	ldr	r3, [r4, #28]
 8012094:	6819      	ldr	r1, [r3, #0]
 8012096:	b111      	cbz	r1, 801209e <_reclaim_reent+0x22>
 8012098:	4620      	mov	r0, r4
 801209a:	f000 f8c5 	bl	8012228 <_free_r>
 801209e:	6961      	ldr	r1, [r4, #20]
 80120a0:	b111      	cbz	r1, 80120a8 <_reclaim_reent+0x2c>
 80120a2:	4620      	mov	r0, r4
 80120a4:	f000 f8c0 	bl	8012228 <_free_r>
 80120a8:	69e1      	ldr	r1, [r4, #28]
 80120aa:	b111      	cbz	r1, 80120b2 <_reclaim_reent+0x36>
 80120ac:	4620      	mov	r0, r4
 80120ae:	f000 f8bb 	bl	8012228 <_free_r>
 80120b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80120b4:	b111      	cbz	r1, 80120bc <_reclaim_reent+0x40>
 80120b6:	4620      	mov	r0, r4
 80120b8:	f000 f8b6 	bl	8012228 <_free_r>
 80120bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80120be:	b111      	cbz	r1, 80120c6 <_reclaim_reent+0x4a>
 80120c0:	4620      	mov	r0, r4
 80120c2:	f000 f8b1 	bl	8012228 <_free_r>
 80120c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80120c8:	b111      	cbz	r1, 80120d0 <_reclaim_reent+0x54>
 80120ca:	4620      	mov	r0, r4
 80120cc:	f000 f8ac 	bl	8012228 <_free_r>
 80120d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80120d2:	b111      	cbz	r1, 80120da <_reclaim_reent+0x5e>
 80120d4:	4620      	mov	r0, r4
 80120d6:	f000 f8a7 	bl	8012228 <_free_r>
 80120da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80120dc:	b111      	cbz	r1, 80120e4 <_reclaim_reent+0x68>
 80120de:	4620      	mov	r0, r4
 80120e0:	f000 f8a2 	bl	8012228 <_free_r>
 80120e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80120e6:	b111      	cbz	r1, 80120ee <_reclaim_reent+0x72>
 80120e8:	4620      	mov	r0, r4
 80120ea:	f000 f89d 	bl	8012228 <_free_r>
 80120ee:	6a23      	ldr	r3, [r4, #32]
 80120f0:	b1b3      	cbz	r3, 8012120 <_reclaim_reent+0xa4>
 80120f2:	4620      	mov	r0, r4
 80120f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120f8:	4718      	bx	r3
 80120fa:	5949      	ldr	r1, [r1, r5]
 80120fc:	b941      	cbnz	r1, 8012110 <_reclaim_reent+0x94>
 80120fe:	3504      	adds	r5, #4
 8012100:	69e3      	ldr	r3, [r4, #28]
 8012102:	2d80      	cmp	r5, #128	; 0x80
 8012104:	68d9      	ldr	r1, [r3, #12]
 8012106:	d1f8      	bne.n	80120fa <_reclaim_reent+0x7e>
 8012108:	4620      	mov	r0, r4
 801210a:	f000 f88d 	bl	8012228 <_free_r>
 801210e:	e7c0      	b.n	8012092 <_reclaim_reent+0x16>
 8012110:	680e      	ldr	r6, [r1, #0]
 8012112:	4620      	mov	r0, r4
 8012114:	f000 f888 	bl	8012228 <_free_r>
 8012118:	4631      	mov	r1, r6
 801211a:	e7ef      	b.n	80120fc <_reclaim_reent+0x80>
 801211c:	2500      	movs	r5, #0
 801211e:	e7ef      	b.n	8012100 <_reclaim_reent+0x84>
 8012120:	bd70      	pop	{r4, r5, r6, pc}
 8012122:	bf00      	nop
 8012124:	24000118 	.word	0x24000118

08012128 <_lseek_r>:
 8012128:	b538      	push	{r3, r4, r5, lr}
 801212a:	4d07      	ldr	r5, [pc, #28]	; (8012148 <_lseek_r+0x20>)
 801212c:	4604      	mov	r4, r0
 801212e:	4608      	mov	r0, r1
 8012130:	4611      	mov	r1, r2
 8012132:	2200      	movs	r2, #0
 8012134:	602a      	str	r2, [r5, #0]
 8012136:	461a      	mov	r2, r3
 8012138:	f7ef fddc 	bl	8001cf4 <_lseek>
 801213c:	1c43      	adds	r3, r0, #1
 801213e:	d102      	bne.n	8012146 <_lseek_r+0x1e>
 8012140:	682b      	ldr	r3, [r5, #0]
 8012142:	b103      	cbz	r3, 8012146 <_lseek_r+0x1e>
 8012144:	6023      	str	r3, [r4, #0]
 8012146:	bd38      	pop	{r3, r4, r5, pc}
 8012148:	24015f20 	.word	0x24015f20

0801214c <_read_r>:
 801214c:	b538      	push	{r3, r4, r5, lr}
 801214e:	4d07      	ldr	r5, [pc, #28]	; (801216c <_read_r+0x20>)
 8012150:	4604      	mov	r4, r0
 8012152:	4608      	mov	r0, r1
 8012154:	4611      	mov	r1, r2
 8012156:	2200      	movs	r2, #0
 8012158:	602a      	str	r2, [r5, #0]
 801215a:	461a      	mov	r2, r3
 801215c:	f7ef fd86 	bl	8001c6c <_read>
 8012160:	1c43      	adds	r3, r0, #1
 8012162:	d102      	bne.n	801216a <_read_r+0x1e>
 8012164:	682b      	ldr	r3, [r5, #0]
 8012166:	b103      	cbz	r3, 801216a <_read_r+0x1e>
 8012168:	6023      	str	r3, [r4, #0]
 801216a:	bd38      	pop	{r3, r4, r5, pc}
 801216c:	24015f20 	.word	0x24015f20

08012170 <_sbrk_r>:
 8012170:	b538      	push	{r3, r4, r5, lr}
 8012172:	4d06      	ldr	r5, [pc, #24]	; (801218c <_sbrk_r+0x1c>)
 8012174:	2300      	movs	r3, #0
 8012176:	4604      	mov	r4, r0
 8012178:	4608      	mov	r0, r1
 801217a:	602b      	str	r3, [r5, #0]
 801217c:	f7ef fdc8 	bl	8001d10 <_sbrk>
 8012180:	1c43      	adds	r3, r0, #1
 8012182:	d102      	bne.n	801218a <_sbrk_r+0x1a>
 8012184:	682b      	ldr	r3, [r5, #0]
 8012186:	b103      	cbz	r3, 801218a <_sbrk_r+0x1a>
 8012188:	6023      	str	r3, [r4, #0]
 801218a:	bd38      	pop	{r3, r4, r5, pc}
 801218c:	24015f20 	.word	0x24015f20

08012190 <_write_r>:
 8012190:	b538      	push	{r3, r4, r5, lr}
 8012192:	4d07      	ldr	r5, [pc, #28]	; (80121b0 <_write_r+0x20>)
 8012194:	4604      	mov	r4, r0
 8012196:	4608      	mov	r0, r1
 8012198:	4611      	mov	r1, r2
 801219a:	2200      	movs	r2, #0
 801219c:	602a      	str	r2, [r5, #0]
 801219e:	461a      	mov	r2, r3
 80121a0:	f7ee fa90 	bl	80006c4 <_write>
 80121a4:	1c43      	adds	r3, r0, #1
 80121a6:	d102      	bne.n	80121ae <_write_r+0x1e>
 80121a8:	682b      	ldr	r3, [r5, #0]
 80121aa:	b103      	cbz	r3, 80121ae <_write_r+0x1e>
 80121ac:	6023      	str	r3, [r4, #0]
 80121ae:	bd38      	pop	{r3, r4, r5, pc}
 80121b0:	24015f20 	.word	0x24015f20

080121b4 <__errno>:
 80121b4:	4b01      	ldr	r3, [pc, #4]	; (80121bc <__errno+0x8>)
 80121b6:	6818      	ldr	r0, [r3, #0]
 80121b8:	4770      	bx	lr
 80121ba:	bf00      	nop
 80121bc:	24000118 	.word	0x24000118

080121c0 <__libc_init_array>:
 80121c0:	b570      	push	{r4, r5, r6, lr}
 80121c2:	4d0d      	ldr	r5, [pc, #52]	; (80121f8 <__libc_init_array+0x38>)
 80121c4:	4c0d      	ldr	r4, [pc, #52]	; (80121fc <__libc_init_array+0x3c>)
 80121c6:	1b64      	subs	r4, r4, r5
 80121c8:	10a4      	asrs	r4, r4, #2
 80121ca:	2600      	movs	r6, #0
 80121cc:	42a6      	cmp	r6, r4
 80121ce:	d109      	bne.n	80121e4 <__libc_init_array+0x24>
 80121d0:	4d0b      	ldr	r5, [pc, #44]	; (8012200 <__libc_init_array+0x40>)
 80121d2:	4c0c      	ldr	r4, [pc, #48]	; (8012204 <__libc_init_array+0x44>)
 80121d4:	f000 fc7a 	bl	8012acc <_init>
 80121d8:	1b64      	subs	r4, r4, r5
 80121da:	10a4      	asrs	r4, r4, #2
 80121dc:	2600      	movs	r6, #0
 80121de:	42a6      	cmp	r6, r4
 80121e0:	d105      	bne.n	80121ee <__libc_init_array+0x2e>
 80121e2:	bd70      	pop	{r4, r5, r6, pc}
 80121e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80121e8:	4798      	blx	r3
 80121ea:	3601      	adds	r6, #1
 80121ec:	e7ee      	b.n	80121cc <__libc_init_array+0xc>
 80121ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80121f2:	4798      	blx	r3
 80121f4:	3601      	adds	r6, #1
 80121f6:	e7f2      	b.n	80121de <__libc_init_array+0x1e>
 80121f8:	080130a4 	.word	0x080130a4
 80121fc:	080130a4 	.word	0x080130a4
 8012200:	080130a4 	.word	0x080130a4
 8012204:	080130a8 	.word	0x080130a8

08012208 <__retarget_lock_acquire_recursive>:
 8012208:	4770      	bx	lr

0801220a <__retarget_lock_release_recursive>:
 801220a:	4770      	bx	lr

0801220c <memcpy>:
 801220c:	440a      	add	r2, r1
 801220e:	4291      	cmp	r1, r2
 8012210:	f100 33ff 	add.w	r3, r0, #4294967295
 8012214:	d100      	bne.n	8012218 <memcpy+0xc>
 8012216:	4770      	bx	lr
 8012218:	b510      	push	{r4, lr}
 801221a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801221e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012222:	4291      	cmp	r1, r2
 8012224:	d1f9      	bne.n	801221a <memcpy+0xe>
 8012226:	bd10      	pop	{r4, pc}

08012228 <_free_r>:
 8012228:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801222a:	2900      	cmp	r1, #0
 801222c:	d044      	beq.n	80122b8 <_free_r+0x90>
 801222e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012232:	9001      	str	r0, [sp, #4]
 8012234:	2b00      	cmp	r3, #0
 8012236:	f1a1 0404 	sub.w	r4, r1, #4
 801223a:	bfb8      	it	lt
 801223c:	18e4      	addlt	r4, r4, r3
 801223e:	f7ff fcf1 	bl	8011c24 <__malloc_lock>
 8012242:	4a1e      	ldr	r2, [pc, #120]	; (80122bc <_free_r+0x94>)
 8012244:	9801      	ldr	r0, [sp, #4]
 8012246:	6813      	ldr	r3, [r2, #0]
 8012248:	b933      	cbnz	r3, 8012258 <_free_r+0x30>
 801224a:	6063      	str	r3, [r4, #4]
 801224c:	6014      	str	r4, [r2, #0]
 801224e:	b003      	add	sp, #12
 8012250:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012254:	f7ff bcec 	b.w	8011c30 <__malloc_unlock>
 8012258:	42a3      	cmp	r3, r4
 801225a:	d908      	bls.n	801226e <_free_r+0x46>
 801225c:	6825      	ldr	r5, [r4, #0]
 801225e:	1961      	adds	r1, r4, r5
 8012260:	428b      	cmp	r3, r1
 8012262:	bf01      	itttt	eq
 8012264:	6819      	ldreq	r1, [r3, #0]
 8012266:	685b      	ldreq	r3, [r3, #4]
 8012268:	1949      	addeq	r1, r1, r5
 801226a:	6021      	streq	r1, [r4, #0]
 801226c:	e7ed      	b.n	801224a <_free_r+0x22>
 801226e:	461a      	mov	r2, r3
 8012270:	685b      	ldr	r3, [r3, #4]
 8012272:	b10b      	cbz	r3, 8012278 <_free_r+0x50>
 8012274:	42a3      	cmp	r3, r4
 8012276:	d9fa      	bls.n	801226e <_free_r+0x46>
 8012278:	6811      	ldr	r1, [r2, #0]
 801227a:	1855      	adds	r5, r2, r1
 801227c:	42a5      	cmp	r5, r4
 801227e:	d10b      	bne.n	8012298 <_free_r+0x70>
 8012280:	6824      	ldr	r4, [r4, #0]
 8012282:	4421      	add	r1, r4
 8012284:	1854      	adds	r4, r2, r1
 8012286:	42a3      	cmp	r3, r4
 8012288:	6011      	str	r1, [r2, #0]
 801228a:	d1e0      	bne.n	801224e <_free_r+0x26>
 801228c:	681c      	ldr	r4, [r3, #0]
 801228e:	685b      	ldr	r3, [r3, #4]
 8012290:	6053      	str	r3, [r2, #4]
 8012292:	440c      	add	r4, r1
 8012294:	6014      	str	r4, [r2, #0]
 8012296:	e7da      	b.n	801224e <_free_r+0x26>
 8012298:	d902      	bls.n	80122a0 <_free_r+0x78>
 801229a:	230c      	movs	r3, #12
 801229c:	6003      	str	r3, [r0, #0]
 801229e:	e7d6      	b.n	801224e <_free_r+0x26>
 80122a0:	6825      	ldr	r5, [r4, #0]
 80122a2:	1961      	adds	r1, r4, r5
 80122a4:	428b      	cmp	r3, r1
 80122a6:	bf04      	itt	eq
 80122a8:	6819      	ldreq	r1, [r3, #0]
 80122aa:	685b      	ldreq	r3, [r3, #4]
 80122ac:	6063      	str	r3, [r4, #4]
 80122ae:	bf04      	itt	eq
 80122b0:	1949      	addeq	r1, r1, r5
 80122b2:	6021      	streq	r1, [r4, #0]
 80122b4:	6054      	str	r4, [r2, #4]
 80122b6:	e7ca      	b.n	801224e <_free_r+0x26>
 80122b8:	b003      	add	sp, #12
 80122ba:	bd30      	pop	{r4, r5, pc}
 80122bc:	24015ddc 	.word	0x24015ddc

080122c0 <__sfputc_r>:
 80122c0:	6893      	ldr	r3, [r2, #8]
 80122c2:	3b01      	subs	r3, #1
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	b410      	push	{r4}
 80122c8:	6093      	str	r3, [r2, #8]
 80122ca:	da08      	bge.n	80122de <__sfputc_r+0x1e>
 80122cc:	6994      	ldr	r4, [r2, #24]
 80122ce:	42a3      	cmp	r3, r4
 80122d0:	db01      	blt.n	80122d6 <__sfputc_r+0x16>
 80122d2:	290a      	cmp	r1, #10
 80122d4:	d103      	bne.n	80122de <__sfputc_r+0x1e>
 80122d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122da:	f7ff be10 	b.w	8011efe <__swbuf_r>
 80122de:	6813      	ldr	r3, [r2, #0]
 80122e0:	1c58      	adds	r0, r3, #1
 80122e2:	6010      	str	r0, [r2, #0]
 80122e4:	7019      	strb	r1, [r3, #0]
 80122e6:	4608      	mov	r0, r1
 80122e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122ec:	4770      	bx	lr

080122ee <__sfputs_r>:
 80122ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122f0:	4606      	mov	r6, r0
 80122f2:	460f      	mov	r7, r1
 80122f4:	4614      	mov	r4, r2
 80122f6:	18d5      	adds	r5, r2, r3
 80122f8:	42ac      	cmp	r4, r5
 80122fa:	d101      	bne.n	8012300 <__sfputs_r+0x12>
 80122fc:	2000      	movs	r0, #0
 80122fe:	e007      	b.n	8012310 <__sfputs_r+0x22>
 8012300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012304:	463a      	mov	r2, r7
 8012306:	4630      	mov	r0, r6
 8012308:	f7ff ffda 	bl	80122c0 <__sfputc_r>
 801230c:	1c43      	adds	r3, r0, #1
 801230e:	d1f3      	bne.n	80122f8 <__sfputs_r+0xa>
 8012310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012314 <_vfiprintf_r>:
 8012314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012318:	460d      	mov	r5, r1
 801231a:	b09d      	sub	sp, #116	; 0x74
 801231c:	4614      	mov	r4, r2
 801231e:	4698      	mov	r8, r3
 8012320:	4606      	mov	r6, r0
 8012322:	b118      	cbz	r0, 801232c <_vfiprintf_r+0x18>
 8012324:	6a03      	ldr	r3, [r0, #32]
 8012326:	b90b      	cbnz	r3, 801232c <_vfiprintf_r+0x18>
 8012328:	f7ff fd02 	bl	8011d30 <__sinit>
 801232c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801232e:	07d9      	lsls	r1, r3, #31
 8012330:	d405      	bmi.n	801233e <_vfiprintf_r+0x2a>
 8012332:	89ab      	ldrh	r3, [r5, #12]
 8012334:	059a      	lsls	r2, r3, #22
 8012336:	d402      	bmi.n	801233e <_vfiprintf_r+0x2a>
 8012338:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801233a:	f7ff ff65 	bl	8012208 <__retarget_lock_acquire_recursive>
 801233e:	89ab      	ldrh	r3, [r5, #12]
 8012340:	071b      	lsls	r3, r3, #28
 8012342:	d501      	bpl.n	8012348 <_vfiprintf_r+0x34>
 8012344:	692b      	ldr	r3, [r5, #16]
 8012346:	b99b      	cbnz	r3, 8012370 <_vfiprintf_r+0x5c>
 8012348:	4629      	mov	r1, r5
 801234a:	4630      	mov	r0, r6
 801234c:	f7ff fe14 	bl	8011f78 <__swsetup_r>
 8012350:	b170      	cbz	r0, 8012370 <_vfiprintf_r+0x5c>
 8012352:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012354:	07dc      	lsls	r4, r3, #31
 8012356:	d504      	bpl.n	8012362 <_vfiprintf_r+0x4e>
 8012358:	f04f 30ff 	mov.w	r0, #4294967295
 801235c:	b01d      	add	sp, #116	; 0x74
 801235e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012362:	89ab      	ldrh	r3, [r5, #12]
 8012364:	0598      	lsls	r0, r3, #22
 8012366:	d4f7      	bmi.n	8012358 <_vfiprintf_r+0x44>
 8012368:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801236a:	f7ff ff4e 	bl	801220a <__retarget_lock_release_recursive>
 801236e:	e7f3      	b.n	8012358 <_vfiprintf_r+0x44>
 8012370:	2300      	movs	r3, #0
 8012372:	9309      	str	r3, [sp, #36]	; 0x24
 8012374:	2320      	movs	r3, #32
 8012376:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801237a:	f8cd 800c 	str.w	r8, [sp, #12]
 801237e:	2330      	movs	r3, #48	; 0x30
 8012380:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012534 <_vfiprintf_r+0x220>
 8012384:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012388:	f04f 0901 	mov.w	r9, #1
 801238c:	4623      	mov	r3, r4
 801238e:	469a      	mov	sl, r3
 8012390:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012394:	b10a      	cbz	r2, 801239a <_vfiprintf_r+0x86>
 8012396:	2a25      	cmp	r2, #37	; 0x25
 8012398:	d1f9      	bne.n	801238e <_vfiprintf_r+0x7a>
 801239a:	ebba 0b04 	subs.w	fp, sl, r4
 801239e:	d00b      	beq.n	80123b8 <_vfiprintf_r+0xa4>
 80123a0:	465b      	mov	r3, fp
 80123a2:	4622      	mov	r2, r4
 80123a4:	4629      	mov	r1, r5
 80123a6:	4630      	mov	r0, r6
 80123a8:	f7ff ffa1 	bl	80122ee <__sfputs_r>
 80123ac:	3001      	adds	r0, #1
 80123ae:	f000 80a9 	beq.w	8012504 <_vfiprintf_r+0x1f0>
 80123b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80123b4:	445a      	add	r2, fp
 80123b6:	9209      	str	r2, [sp, #36]	; 0x24
 80123b8:	f89a 3000 	ldrb.w	r3, [sl]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	f000 80a1 	beq.w	8012504 <_vfiprintf_r+0x1f0>
 80123c2:	2300      	movs	r3, #0
 80123c4:	f04f 32ff 	mov.w	r2, #4294967295
 80123c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80123cc:	f10a 0a01 	add.w	sl, sl, #1
 80123d0:	9304      	str	r3, [sp, #16]
 80123d2:	9307      	str	r3, [sp, #28]
 80123d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80123d8:	931a      	str	r3, [sp, #104]	; 0x68
 80123da:	4654      	mov	r4, sl
 80123dc:	2205      	movs	r2, #5
 80123de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123e2:	4854      	ldr	r0, [pc, #336]	; (8012534 <_vfiprintf_r+0x220>)
 80123e4:	f7ed ff94 	bl	8000310 <memchr>
 80123e8:	9a04      	ldr	r2, [sp, #16]
 80123ea:	b9d8      	cbnz	r0, 8012424 <_vfiprintf_r+0x110>
 80123ec:	06d1      	lsls	r1, r2, #27
 80123ee:	bf44      	itt	mi
 80123f0:	2320      	movmi	r3, #32
 80123f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80123f6:	0713      	lsls	r3, r2, #28
 80123f8:	bf44      	itt	mi
 80123fa:	232b      	movmi	r3, #43	; 0x2b
 80123fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012400:	f89a 3000 	ldrb.w	r3, [sl]
 8012404:	2b2a      	cmp	r3, #42	; 0x2a
 8012406:	d015      	beq.n	8012434 <_vfiprintf_r+0x120>
 8012408:	9a07      	ldr	r2, [sp, #28]
 801240a:	4654      	mov	r4, sl
 801240c:	2000      	movs	r0, #0
 801240e:	f04f 0c0a 	mov.w	ip, #10
 8012412:	4621      	mov	r1, r4
 8012414:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012418:	3b30      	subs	r3, #48	; 0x30
 801241a:	2b09      	cmp	r3, #9
 801241c:	d94d      	bls.n	80124ba <_vfiprintf_r+0x1a6>
 801241e:	b1b0      	cbz	r0, 801244e <_vfiprintf_r+0x13a>
 8012420:	9207      	str	r2, [sp, #28]
 8012422:	e014      	b.n	801244e <_vfiprintf_r+0x13a>
 8012424:	eba0 0308 	sub.w	r3, r0, r8
 8012428:	fa09 f303 	lsl.w	r3, r9, r3
 801242c:	4313      	orrs	r3, r2
 801242e:	9304      	str	r3, [sp, #16]
 8012430:	46a2      	mov	sl, r4
 8012432:	e7d2      	b.n	80123da <_vfiprintf_r+0xc6>
 8012434:	9b03      	ldr	r3, [sp, #12]
 8012436:	1d19      	adds	r1, r3, #4
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	9103      	str	r1, [sp, #12]
 801243c:	2b00      	cmp	r3, #0
 801243e:	bfbb      	ittet	lt
 8012440:	425b      	neglt	r3, r3
 8012442:	f042 0202 	orrlt.w	r2, r2, #2
 8012446:	9307      	strge	r3, [sp, #28]
 8012448:	9307      	strlt	r3, [sp, #28]
 801244a:	bfb8      	it	lt
 801244c:	9204      	strlt	r2, [sp, #16]
 801244e:	7823      	ldrb	r3, [r4, #0]
 8012450:	2b2e      	cmp	r3, #46	; 0x2e
 8012452:	d10c      	bne.n	801246e <_vfiprintf_r+0x15a>
 8012454:	7863      	ldrb	r3, [r4, #1]
 8012456:	2b2a      	cmp	r3, #42	; 0x2a
 8012458:	d134      	bne.n	80124c4 <_vfiprintf_r+0x1b0>
 801245a:	9b03      	ldr	r3, [sp, #12]
 801245c:	1d1a      	adds	r2, r3, #4
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	9203      	str	r2, [sp, #12]
 8012462:	2b00      	cmp	r3, #0
 8012464:	bfb8      	it	lt
 8012466:	f04f 33ff 	movlt.w	r3, #4294967295
 801246a:	3402      	adds	r4, #2
 801246c:	9305      	str	r3, [sp, #20]
 801246e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012544 <_vfiprintf_r+0x230>
 8012472:	7821      	ldrb	r1, [r4, #0]
 8012474:	2203      	movs	r2, #3
 8012476:	4650      	mov	r0, sl
 8012478:	f7ed ff4a 	bl	8000310 <memchr>
 801247c:	b138      	cbz	r0, 801248e <_vfiprintf_r+0x17a>
 801247e:	9b04      	ldr	r3, [sp, #16]
 8012480:	eba0 000a 	sub.w	r0, r0, sl
 8012484:	2240      	movs	r2, #64	; 0x40
 8012486:	4082      	lsls	r2, r0
 8012488:	4313      	orrs	r3, r2
 801248a:	3401      	adds	r4, #1
 801248c:	9304      	str	r3, [sp, #16]
 801248e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012492:	4829      	ldr	r0, [pc, #164]	; (8012538 <_vfiprintf_r+0x224>)
 8012494:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012498:	2206      	movs	r2, #6
 801249a:	f7ed ff39 	bl	8000310 <memchr>
 801249e:	2800      	cmp	r0, #0
 80124a0:	d03f      	beq.n	8012522 <_vfiprintf_r+0x20e>
 80124a2:	4b26      	ldr	r3, [pc, #152]	; (801253c <_vfiprintf_r+0x228>)
 80124a4:	bb1b      	cbnz	r3, 80124ee <_vfiprintf_r+0x1da>
 80124a6:	9b03      	ldr	r3, [sp, #12]
 80124a8:	3307      	adds	r3, #7
 80124aa:	f023 0307 	bic.w	r3, r3, #7
 80124ae:	3308      	adds	r3, #8
 80124b0:	9303      	str	r3, [sp, #12]
 80124b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124b4:	443b      	add	r3, r7
 80124b6:	9309      	str	r3, [sp, #36]	; 0x24
 80124b8:	e768      	b.n	801238c <_vfiprintf_r+0x78>
 80124ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80124be:	460c      	mov	r4, r1
 80124c0:	2001      	movs	r0, #1
 80124c2:	e7a6      	b.n	8012412 <_vfiprintf_r+0xfe>
 80124c4:	2300      	movs	r3, #0
 80124c6:	3401      	adds	r4, #1
 80124c8:	9305      	str	r3, [sp, #20]
 80124ca:	4619      	mov	r1, r3
 80124cc:	f04f 0c0a 	mov.w	ip, #10
 80124d0:	4620      	mov	r0, r4
 80124d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80124d6:	3a30      	subs	r2, #48	; 0x30
 80124d8:	2a09      	cmp	r2, #9
 80124da:	d903      	bls.n	80124e4 <_vfiprintf_r+0x1d0>
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d0c6      	beq.n	801246e <_vfiprintf_r+0x15a>
 80124e0:	9105      	str	r1, [sp, #20]
 80124e2:	e7c4      	b.n	801246e <_vfiprintf_r+0x15a>
 80124e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80124e8:	4604      	mov	r4, r0
 80124ea:	2301      	movs	r3, #1
 80124ec:	e7f0      	b.n	80124d0 <_vfiprintf_r+0x1bc>
 80124ee:	ab03      	add	r3, sp, #12
 80124f0:	9300      	str	r3, [sp, #0]
 80124f2:	462a      	mov	r2, r5
 80124f4:	4b12      	ldr	r3, [pc, #72]	; (8012540 <_vfiprintf_r+0x22c>)
 80124f6:	a904      	add	r1, sp, #16
 80124f8:	4630      	mov	r0, r6
 80124fa:	f3af 8000 	nop.w
 80124fe:	4607      	mov	r7, r0
 8012500:	1c78      	adds	r0, r7, #1
 8012502:	d1d6      	bne.n	80124b2 <_vfiprintf_r+0x19e>
 8012504:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012506:	07d9      	lsls	r1, r3, #31
 8012508:	d405      	bmi.n	8012516 <_vfiprintf_r+0x202>
 801250a:	89ab      	ldrh	r3, [r5, #12]
 801250c:	059a      	lsls	r2, r3, #22
 801250e:	d402      	bmi.n	8012516 <_vfiprintf_r+0x202>
 8012510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012512:	f7ff fe7a 	bl	801220a <__retarget_lock_release_recursive>
 8012516:	89ab      	ldrh	r3, [r5, #12]
 8012518:	065b      	lsls	r3, r3, #25
 801251a:	f53f af1d 	bmi.w	8012358 <_vfiprintf_r+0x44>
 801251e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012520:	e71c      	b.n	801235c <_vfiprintf_r+0x48>
 8012522:	ab03      	add	r3, sp, #12
 8012524:	9300      	str	r3, [sp, #0]
 8012526:	462a      	mov	r2, r5
 8012528:	4b05      	ldr	r3, [pc, #20]	; (8012540 <_vfiprintf_r+0x22c>)
 801252a:	a904      	add	r1, sp, #16
 801252c:	4630      	mov	r0, r6
 801252e:	f000 f879 	bl	8012624 <_printf_i>
 8012532:	e7e4      	b.n	80124fe <_vfiprintf_r+0x1ea>
 8012534:	08013068 	.word	0x08013068
 8012538:	08013072 	.word	0x08013072
 801253c:	00000000 	.word	0x00000000
 8012540:	080122ef 	.word	0x080122ef
 8012544:	0801306e 	.word	0x0801306e

08012548 <_printf_common>:
 8012548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801254c:	4616      	mov	r6, r2
 801254e:	4699      	mov	r9, r3
 8012550:	688a      	ldr	r2, [r1, #8]
 8012552:	690b      	ldr	r3, [r1, #16]
 8012554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012558:	4293      	cmp	r3, r2
 801255a:	bfb8      	it	lt
 801255c:	4613      	movlt	r3, r2
 801255e:	6033      	str	r3, [r6, #0]
 8012560:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012564:	4607      	mov	r7, r0
 8012566:	460c      	mov	r4, r1
 8012568:	b10a      	cbz	r2, 801256e <_printf_common+0x26>
 801256a:	3301      	adds	r3, #1
 801256c:	6033      	str	r3, [r6, #0]
 801256e:	6823      	ldr	r3, [r4, #0]
 8012570:	0699      	lsls	r1, r3, #26
 8012572:	bf42      	ittt	mi
 8012574:	6833      	ldrmi	r3, [r6, #0]
 8012576:	3302      	addmi	r3, #2
 8012578:	6033      	strmi	r3, [r6, #0]
 801257a:	6825      	ldr	r5, [r4, #0]
 801257c:	f015 0506 	ands.w	r5, r5, #6
 8012580:	d106      	bne.n	8012590 <_printf_common+0x48>
 8012582:	f104 0a19 	add.w	sl, r4, #25
 8012586:	68e3      	ldr	r3, [r4, #12]
 8012588:	6832      	ldr	r2, [r6, #0]
 801258a:	1a9b      	subs	r3, r3, r2
 801258c:	42ab      	cmp	r3, r5
 801258e:	dc26      	bgt.n	80125de <_printf_common+0x96>
 8012590:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012594:	1e13      	subs	r3, r2, #0
 8012596:	6822      	ldr	r2, [r4, #0]
 8012598:	bf18      	it	ne
 801259a:	2301      	movne	r3, #1
 801259c:	0692      	lsls	r2, r2, #26
 801259e:	d42b      	bmi.n	80125f8 <_printf_common+0xb0>
 80125a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80125a4:	4649      	mov	r1, r9
 80125a6:	4638      	mov	r0, r7
 80125a8:	47c0      	blx	r8
 80125aa:	3001      	adds	r0, #1
 80125ac:	d01e      	beq.n	80125ec <_printf_common+0xa4>
 80125ae:	6823      	ldr	r3, [r4, #0]
 80125b0:	6922      	ldr	r2, [r4, #16]
 80125b2:	f003 0306 	and.w	r3, r3, #6
 80125b6:	2b04      	cmp	r3, #4
 80125b8:	bf02      	ittt	eq
 80125ba:	68e5      	ldreq	r5, [r4, #12]
 80125bc:	6833      	ldreq	r3, [r6, #0]
 80125be:	1aed      	subeq	r5, r5, r3
 80125c0:	68a3      	ldr	r3, [r4, #8]
 80125c2:	bf0c      	ite	eq
 80125c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80125c8:	2500      	movne	r5, #0
 80125ca:	4293      	cmp	r3, r2
 80125cc:	bfc4      	itt	gt
 80125ce:	1a9b      	subgt	r3, r3, r2
 80125d0:	18ed      	addgt	r5, r5, r3
 80125d2:	2600      	movs	r6, #0
 80125d4:	341a      	adds	r4, #26
 80125d6:	42b5      	cmp	r5, r6
 80125d8:	d11a      	bne.n	8012610 <_printf_common+0xc8>
 80125da:	2000      	movs	r0, #0
 80125dc:	e008      	b.n	80125f0 <_printf_common+0xa8>
 80125de:	2301      	movs	r3, #1
 80125e0:	4652      	mov	r2, sl
 80125e2:	4649      	mov	r1, r9
 80125e4:	4638      	mov	r0, r7
 80125e6:	47c0      	blx	r8
 80125e8:	3001      	adds	r0, #1
 80125ea:	d103      	bne.n	80125f4 <_printf_common+0xac>
 80125ec:	f04f 30ff 	mov.w	r0, #4294967295
 80125f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125f4:	3501      	adds	r5, #1
 80125f6:	e7c6      	b.n	8012586 <_printf_common+0x3e>
 80125f8:	18e1      	adds	r1, r4, r3
 80125fa:	1c5a      	adds	r2, r3, #1
 80125fc:	2030      	movs	r0, #48	; 0x30
 80125fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012602:	4422      	add	r2, r4
 8012604:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012608:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801260c:	3302      	adds	r3, #2
 801260e:	e7c7      	b.n	80125a0 <_printf_common+0x58>
 8012610:	2301      	movs	r3, #1
 8012612:	4622      	mov	r2, r4
 8012614:	4649      	mov	r1, r9
 8012616:	4638      	mov	r0, r7
 8012618:	47c0      	blx	r8
 801261a:	3001      	adds	r0, #1
 801261c:	d0e6      	beq.n	80125ec <_printf_common+0xa4>
 801261e:	3601      	adds	r6, #1
 8012620:	e7d9      	b.n	80125d6 <_printf_common+0x8e>
	...

08012624 <_printf_i>:
 8012624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012628:	7e0f      	ldrb	r7, [r1, #24]
 801262a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801262c:	2f78      	cmp	r7, #120	; 0x78
 801262e:	4691      	mov	r9, r2
 8012630:	4680      	mov	r8, r0
 8012632:	460c      	mov	r4, r1
 8012634:	469a      	mov	sl, r3
 8012636:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801263a:	d807      	bhi.n	801264c <_printf_i+0x28>
 801263c:	2f62      	cmp	r7, #98	; 0x62
 801263e:	d80a      	bhi.n	8012656 <_printf_i+0x32>
 8012640:	2f00      	cmp	r7, #0
 8012642:	f000 80d4 	beq.w	80127ee <_printf_i+0x1ca>
 8012646:	2f58      	cmp	r7, #88	; 0x58
 8012648:	f000 80c0 	beq.w	80127cc <_printf_i+0x1a8>
 801264c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012650:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012654:	e03a      	b.n	80126cc <_printf_i+0xa8>
 8012656:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801265a:	2b15      	cmp	r3, #21
 801265c:	d8f6      	bhi.n	801264c <_printf_i+0x28>
 801265e:	a101      	add	r1, pc, #4	; (adr r1, 8012664 <_printf_i+0x40>)
 8012660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012664:	080126bd 	.word	0x080126bd
 8012668:	080126d1 	.word	0x080126d1
 801266c:	0801264d 	.word	0x0801264d
 8012670:	0801264d 	.word	0x0801264d
 8012674:	0801264d 	.word	0x0801264d
 8012678:	0801264d 	.word	0x0801264d
 801267c:	080126d1 	.word	0x080126d1
 8012680:	0801264d 	.word	0x0801264d
 8012684:	0801264d 	.word	0x0801264d
 8012688:	0801264d 	.word	0x0801264d
 801268c:	0801264d 	.word	0x0801264d
 8012690:	080127d5 	.word	0x080127d5
 8012694:	080126fd 	.word	0x080126fd
 8012698:	0801278f 	.word	0x0801278f
 801269c:	0801264d 	.word	0x0801264d
 80126a0:	0801264d 	.word	0x0801264d
 80126a4:	080127f7 	.word	0x080127f7
 80126a8:	0801264d 	.word	0x0801264d
 80126ac:	080126fd 	.word	0x080126fd
 80126b0:	0801264d 	.word	0x0801264d
 80126b4:	0801264d 	.word	0x0801264d
 80126b8:	08012797 	.word	0x08012797
 80126bc:	682b      	ldr	r3, [r5, #0]
 80126be:	1d1a      	adds	r2, r3, #4
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	602a      	str	r2, [r5, #0]
 80126c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80126c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80126cc:	2301      	movs	r3, #1
 80126ce:	e09f      	b.n	8012810 <_printf_i+0x1ec>
 80126d0:	6820      	ldr	r0, [r4, #0]
 80126d2:	682b      	ldr	r3, [r5, #0]
 80126d4:	0607      	lsls	r7, r0, #24
 80126d6:	f103 0104 	add.w	r1, r3, #4
 80126da:	6029      	str	r1, [r5, #0]
 80126dc:	d501      	bpl.n	80126e2 <_printf_i+0xbe>
 80126de:	681e      	ldr	r6, [r3, #0]
 80126e0:	e003      	b.n	80126ea <_printf_i+0xc6>
 80126e2:	0646      	lsls	r6, r0, #25
 80126e4:	d5fb      	bpl.n	80126de <_printf_i+0xba>
 80126e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80126ea:	2e00      	cmp	r6, #0
 80126ec:	da03      	bge.n	80126f6 <_printf_i+0xd2>
 80126ee:	232d      	movs	r3, #45	; 0x2d
 80126f0:	4276      	negs	r6, r6
 80126f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80126f6:	485a      	ldr	r0, [pc, #360]	; (8012860 <_printf_i+0x23c>)
 80126f8:	230a      	movs	r3, #10
 80126fa:	e012      	b.n	8012722 <_printf_i+0xfe>
 80126fc:	682b      	ldr	r3, [r5, #0]
 80126fe:	6820      	ldr	r0, [r4, #0]
 8012700:	1d19      	adds	r1, r3, #4
 8012702:	6029      	str	r1, [r5, #0]
 8012704:	0605      	lsls	r5, r0, #24
 8012706:	d501      	bpl.n	801270c <_printf_i+0xe8>
 8012708:	681e      	ldr	r6, [r3, #0]
 801270a:	e002      	b.n	8012712 <_printf_i+0xee>
 801270c:	0641      	lsls	r1, r0, #25
 801270e:	d5fb      	bpl.n	8012708 <_printf_i+0xe4>
 8012710:	881e      	ldrh	r6, [r3, #0]
 8012712:	4853      	ldr	r0, [pc, #332]	; (8012860 <_printf_i+0x23c>)
 8012714:	2f6f      	cmp	r7, #111	; 0x6f
 8012716:	bf0c      	ite	eq
 8012718:	2308      	moveq	r3, #8
 801271a:	230a      	movne	r3, #10
 801271c:	2100      	movs	r1, #0
 801271e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012722:	6865      	ldr	r5, [r4, #4]
 8012724:	60a5      	str	r5, [r4, #8]
 8012726:	2d00      	cmp	r5, #0
 8012728:	bfa2      	ittt	ge
 801272a:	6821      	ldrge	r1, [r4, #0]
 801272c:	f021 0104 	bicge.w	r1, r1, #4
 8012730:	6021      	strge	r1, [r4, #0]
 8012732:	b90e      	cbnz	r6, 8012738 <_printf_i+0x114>
 8012734:	2d00      	cmp	r5, #0
 8012736:	d04b      	beq.n	80127d0 <_printf_i+0x1ac>
 8012738:	4615      	mov	r5, r2
 801273a:	fbb6 f1f3 	udiv	r1, r6, r3
 801273e:	fb03 6711 	mls	r7, r3, r1, r6
 8012742:	5dc7      	ldrb	r7, [r0, r7]
 8012744:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012748:	4637      	mov	r7, r6
 801274a:	42bb      	cmp	r3, r7
 801274c:	460e      	mov	r6, r1
 801274e:	d9f4      	bls.n	801273a <_printf_i+0x116>
 8012750:	2b08      	cmp	r3, #8
 8012752:	d10b      	bne.n	801276c <_printf_i+0x148>
 8012754:	6823      	ldr	r3, [r4, #0]
 8012756:	07de      	lsls	r6, r3, #31
 8012758:	d508      	bpl.n	801276c <_printf_i+0x148>
 801275a:	6923      	ldr	r3, [r4, #16]
 801275c:	6861      	ldr	r1, [r4, #4]
 801275e:	4299      	cmp	r1, r3
 8012760:	bfde      	ittt	le
 8012762:	2330      	movle	r3, #48	; 0x30
 8012764:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012768:	f105 35ff 	addle.w	r5, r5, #4294967295
 801276c:	1b52      	subs	r2, r2, r5
 801276e:	6122      	str	r2, [r4, #16]
 8012770:	f8cd a000 	str.w	sl, [sp]
 8012774:	464b      	mov	r3, r9
 8012776:	aa03      	add	r2, sp, #12
 8012778:	4621      	mov	r1, r4
 801277a:	4640      	mov	r0, r8
 801277c:	f7ff fee4 	bl	8012548 <_printf_common>
 8012780:	3001      	adds	r0, #1
 8012782:	d14a      	bne.n	801281a <_printf_i+0x1f6>
 8012784:	f04f 30ff 	mov.w	r0, #4294967295
 8012788:	b004      	add	sp, #16
 801278a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801278e:	6823      	ldr	r3, [r4, #0]
 8012790:	f043 0320 	orr.w	r3, r3, #32
 8012794:	6023      	str	r3, [r4, #0]
 8012796:	4833      	ldr	r0, [pc, #204]	; (8012864 <_printf_i+0x240>)
 8012798:	2778      	movs	r7, #120	; 0x78
 801279a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801279e:	6823      	ldr	r3, [r4, #0]
 80127a0:	6829      	ldr	r1, [r5, #0]
 80127a2:	061f      	lsls	r7, r3, #24
 80127a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80127a8:	d402      	bmi.n	80127b0 <_printf_i+0x18c>
 80127aa:	065f      	lsls	r7, r3, #25
 80127ac:	bf48      	it	mi
 80127ae:	b2b6      	uxthmi	r6, r6
 80127b0:	07df      	lsls	r7, r3, #31
 80127b2:	bf48      	it	mi
 80127b4:	f043 0320 	orrmi.w	r3, r3, #32
 80127b8:	6029      	str	r1, [r5, #0]
 80127ba:	bf48      	it	mi
 80127bc:	6023      	strmi	r3, [r4, #0]
 80127be:	b91e      	cbnz	r6, 80127c8 <_printf_i+0x1a4>
 80127c0:	6823      	ldr	r3, [r4, #0]
 80127c2:	f023 0320 	bic.w	r3, r3, #32
 80127c6:	6023      	str	r3, [r4, #0]
 80127c8:	2310      	movs	r3, #16
 80127ca:	e7a7      	b.n	801271c <_printf_i+0xf8>
 80127cc:	4824      	ldr	r0, [pc, #144]	; (8012860 <_printf_i+0x23c>)
 80127ce:	e7e4      	b.n	801279a <_printf_i+0x176>
 80127d0:	4615      	mov	r5, r2
 80127d2:	e7bd      	b.n	8012750 <_printf_i+0x12c>
 80127d4:	682b      	ldr	r3, [r5, #0]
 80127d6:	6826      	ldr	r6, [r4, #0]
 80127d8:	6961      	ldr	r1, [r4, #20]
 80127da:	1d18      	adds	r0, r3, #4
 80127dc:	6028      	str	r0, [r5, #0]
 80127de:	0635      	lsls	r5, r6, #24
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	d501      	bpl.n	80127e8 <_printf_i+0x1c4>
 80127e4:	6019      	str	r1, [r3, #0]
 80127e6:	e002      	b.n	80127ee <_printf_i+0x1ca>
 80127e8:	0670      	lsls	r0, r6, #25
 80127ea:	d5fb      	bpl.n	80127e4 <_printf_i+0x1c0>
 80127ec:	8019      	strh	r1, [r3, #0]
 80127ee:	2300      	movs	r3, #0
 80127f0:	6123      	str	r3, [r4, #16]
 80127f2:	4615      	mov	r5, r2
 80127f4:	e7bc      	b.n	8012770 <_printf_i+0x14c>
 80127f6:	682b      	ldr	r3, [r5, #0]
 80127f8:	1d1a      	adds	r2, r3, #4
 80127fa:	602a      	str	r2, [r5, #0]
 80127fc:	681d      	ldr	r5, [r3, #0]
 80127fe:	6862      	ldr	r2, [r4, #4]
 8012800:	2100      	movs	r1, #0
 8012802:	4628      	mov	r0, r5
 8012804:	f7ed fd84 	bl	8000310 <memchr>
 8012808:	b108      	cbz	r0, 801280e <_printf_i+0x1ea>
 801280a:	1b40      	subs	r0, r0, r5
 801280c:	6060      	str	r0, [r4, #4]
 801280e:	6863      	ldr	r3, [r4, #4]
 8012810:	6123      	str	r3, [r4, #16]
 8012812:	2300      	movs	r3, #0
 8012814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012818:	e7aa      	b.n	8012770 <_printf_i+0x14c>
 801281a:	6923      	ldr	r3, [r4, #16]
 801281c:	462a      	mov	r2, r5
 801281e:	4649      	mov	r1, r9
 8012820:	4640      	mov	r0, r8
 8012822:	47d0      	blx	sl
 8012824:	3001      	adds	r0, #1
 8012826:	d0ad      	beq.n	8012784 <_printf_i+0x160>
 8012828:	6823      	ldr	r3, [r4, #0]
 801282a:	079b      	lsls	r3, r3, #30
 801282c:	d413      	bmi.n	8012856 <_printf_i+0x232>
 801282e:	68e0      	ldr	r0, [r4, #12]
 8012830:	9b03      	ldr	r3, [sp, #12]
 8012832:	4298      	cmp	r0, r3
 8012834:	bfb8      	it	lt
 8012836:	4618      	movlt	r0, r3
 8012838:	e7a6      	b.n	8012788 <_printf_i+0x164>
 801283a:	2301      	movs	r3, #1
 801283c:	4632      	mov	r2, r6
 801283e:	4649      	mov	r1, r9
 8012840:	4640      	mov	r0, r8
 8012842:	47d0      	blx	sl
 8012844:	3001      	adds	r0, #1
 8012846:	d09d      	beq.n	8012784 <_printf_i+0x160>
 8012848:	3501      	adds	r5, #1
 801284a:	68e3      	ldr	r3, [r4, #12]
 801284c:	9903      	ldr	r1, [sp, #12]
 801284e:	1a5b      	subs	r3, r3, r1
 8012850:	42ab      	cmp	r3, r5
 8012852:	dcf2      	bgt.n	801283a <_printf_i+0x216>
 8012854:	e7eb      	b.n	801282e <_printf_i+0x20a>
 8012856:	2500      	movs	r5, #0
 8012858:	f104 0619 	add.w	r6, r4, #25
 801285c:	e7f5      	b.n	801284a <_printf_i+0x226>
 801285e:	bf00      	nop
 8012860:	08013079 	.word	0x08013079
 8012864:	0801308a 	.word	0x0801308a

08012868 <__sflush_r>:
 8012868:	898a      	ldrh	r2, [r1, #12]
 801286a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801286e:	4605      	mov	r5, r0
 8012870:	0710      	lsls	r0, r2, #28
 8012872:	460c      	mov	r4, r1
 8012874:	d458      	bmi.n	8012928 <__sflush_r+0xc0>
 8012876:	684b      	ldr	r3, [r1, #4]
 8012878:	2b00      	cmp	r3, #0
 801287a:	dc05      	bgt.n	8012888 <__sflush_r+0x20>
 801287c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801287e:	2b00      	cmp	r3, #0
 8012880:	dc02      	bgt.n	8012888 <__sflush_r+0x20>
 8012882:	2000      	movs	r0, #0
 8012884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012888:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801288a:	2e00      	cmp	r6, #0
 801288c:	d0f9      	beq.n	8012882 <__sflush_r+0x1a>
 801288e:	2300      	movs	r3, #0
 8012890:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012894:	682f      	ldr	r7, [r5, #0]
 8012896:	6a21      	ldr	r1, [r4, #32]
 8012898:	602b      	str	r3, [r5, #0]
 801289a:	d032      	beq.n	8012902 <__sflush_r+0x9a>
 801289c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801289e:	89a3      	ldrh	r3, [r4, #12]
 80128a0:	075a      	lsls	r2, r3, #29
 80128a2:	d505      	bpl.n	80128b0 <__sflush_r+0x48>
 80128a4:	6863      	ldr	r3, [r4, #4]
 80128a6:	1ac0      	subs	r0, r0, r3
 80128a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80128aa:	b10b      	cbz	r3, 80128b0 <__sflush_r+0x48>
 80128ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80128ae:	1ac0      	subs	r0, r0, r3
 80128b0:	2300      	movs	r3, #0
 80128b2:	4602      	mov	r2, r0
 80128b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80128b6:	6a21      	ldr	r1, [r4, #32]
 80128b8:	4628      	mov	r0, r5
 80128ba:	47b0      	blx	r6
 80128bc:	1c43      	adds	r3, r0, #1
 80128be:	89a3      	ldrh	r3, [r4, #12]
 80128c0:	d106      	bne.n	80128d0 <__sflush_r+0x68>
 80128c2:	6829      	ldr	r1, [r5, #0]
 80128c4:	291d      	cmp	r1, #29
 80128c6:	d82b      	bhi.n	8012920 <__sflush_r+0xb8>
 80128c8:	4a29      	ldr	r2, [pc, #164]	; (8012970 <__sflush_r+0x108>)
 80128ca:	410a      	asrs	r2, r1
 80128cc:	07d6      	lsls	r6, r2, #31
 80128ce:	d427      	bmi.n	8012920 <__sflush_r+0xb8>
 80128d0:	2200      	movs	r2, #0
 80128d2:	6062      	str	r2, [r4, #4]
 80128d4:	04d9      	lsls	r1, r3, #19
 80128d6:	6922      	ldr	r2, [r4, #16]
 80128d8:	6022      	str	r2, [r4, #0]
 80128da:	d504      	bpl.n	80128e6 <__sflush_r+0x7e>
 80128dc:	1c42      	adds	r2, r0, #1
 80128de:	d101      	bne.n	80128e4 <__sflush_r+0x7c>
 80128e0:	682b      	ldr	r3, [r5, #0]
 80128e2:	b903      	cbnz	r3, 80128e6 <__sflush_r+0x7e>
 80128e4:	6560      	str	r0, [r4, #84]	; 0x54
 80128e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80128e8:	602f      	str	r7, [r5, #0]
 80128ea:	2900      	cmp	r1, #0
 80128ec:	d0c9      	beq.n	8012882 <__sflush_r+0x1a>
 80128ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80128f2:	4299      	cmp	r1, r3
 80128f4:	d002      	beq.n	80128fc <__sflush_r+0x94>
 80128f6:	4628      	mov	r0, r5
 80128f8:	f7ff fc96 	bl	8012228 <_free_r>
 80128fc:	2000      	movs	r0, #0
 80128fe:	6360      	str	r0, [r4, #52]	; 0x34
 8012900:	e7c0      	b.n	8012884 <__sflush_r+0x1c>
 8012902:	2301      	movs	r3, #1
 8012904:	4628      	mov	r0, r5
 8012906:	47b0      	blx	r6
 8012908:	1c41      	adds	r1, r0, #1
 801290a:	d1c8      	bne.n	801289e <__sflush_r+0x36>
 801290c:	682b      	ldr	r3, [r5, #0]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d0c5      	beq.n	801289e <__sflush_r+0x36>
 8012912:	2b1d      	cmp	r3, #29
 8012914:	d001      	beq.n	801291a <__sflush_r+0xb2>
 8012916:	2b16      	cmp	r3, #22
 8012918:	d101      	bne.n	801291e <__sflush_r+0xb6>
 801291a:	602f      	str	r7, [r5, #0]
 801291c:	e7b1      	b.n	8012882 <__sflush_r+0x1a>
 801291e:	89a3      	ldrh	r3, [r4, #12]
 8012920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012924:	81a3      	strh	r3, [r4, #12]
 8012926:	e7ad      	b.n	8012884 <__sflush_r+0x1c>
 8012928:	690f      	ldr	r7, [r1, #16]
 801292a:	2f00      	cmp	r7, #0
 801292c:	d0a9      	beq.n	8012882 <__sflush_r+0x1a>
 801292e:	0793      	lsls	r3, r2, #30
 8012930:	680e      	ldr	r6, [r1, #0]
 8012932:	bf08      	it	eq
 8012934:	694b      	ldreq	r3, [r1, #20]
 8012936:	600f      	str	r7, [r1, #0]
 8012938:	bf18      	it	ne
 801293a:	2300      	movne	r3, #0
 801293c:	eba6 0807 	sub.w	r8, r6, r7
 8012940:	608b      	str	r3, [r1, #8]
 8012942:	f1b8 0f00 	cmp.w	r8, #0
 8012946:	dd9c      	ble.n	8012882 <__sflush_r+0x1a>
 8012948:	6a21      	ldr	r1, [r4, #32]
 801294a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801294c:	4643      	mov	r3, r8
 801294e:	463a      	mov	r2, r7
 8012950:	4628      	mov	r0, r5
 8012952:	47b0      	blx	r6
 8012954:	2800      	cmp	r0, #0
 8012956:	dc06      	bgt.n	8012966 <__sflush_r+0xfe>
 8012958:	89a3      	ldrh	r3, [r4, #12]
 801295a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801295e:	81a3      	strh	r3, [r4, #12]
 8012960:	f04f 30ff 	mov.w	r0, #4294967295
 8012964:	e78e      	b.n	8012884 <__sflush_r+0x1c>
 8012966:	4407      	add	r7, r0
 8012968:	eba8 0800 	sub.w	r8, r8, r0
 801296c:	e7e9      	b.n	8012942 <__sflush_r+0xda>
 801296e:	bf00      	nop
 8012970:	dfbffffe 	.word	0xdfbffffe

08012974 <_fflush_r>:
 8012974:	b538      	push	{r3, r4, r5, lr}
 8012976:	690b      	ldr	r3, [r1, #16]
 8012978:	4605      	mov	r5, r0
 801297a:	460c      	mov	r4, r1
 801297c:	b913      	cbnz	r3, 8012984 <_fflush_r+0x10>
 801297e:	2500      	movs	r5, #0
 8012980:	4628      	mov	r0, r5
 8012982:	bd38      	pop	{r3, r4, r5, pc}
 8012984:	b118      	cbz	r0, 801298e <_fflush_r+0x1a>
 8012986:	6a03      	ldr	r3, [r0, #32]
 8012988:	b90b      	cbnz	r3, 801298e <_fflush_r+0x1a>
 801298a:	f7ff f9d1 	bl	8011d30 <__sinit>
 801298e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d0f3      	beq.n	801297e <_fflush_r+0xa>
 8012996:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012998:	07d0      	lsls	r0, r2, #31
 801299a:	d404      	bmi.n	80129a6 <_fflush_r+0x32>
 801299c:	0599      	lsls	r1, r3, #22
 801299e:	d402      	bmi.n	80129a6 <_fflush_r+0x32>
 80129a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129a2:	f7ff fc31 	bl	8012208 <__retarget_lock_acquire_recursive>
 80129a6:	4628      	mov	r0, r5
 80129a8:	4621      	mov	r1, r4
 80129aa:	f7ff ff5d 	bl	8012868 <__sflush_r>
 80129ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129b0:	07da      	lsls	r2, r3, #31
 80129b2:	4605      	mov	r5, r0
 80129b4:	d4e4      	bmi.n	8012980 <_fflush_r+0xc>
 80129b6:	89a3      	ldrh	r3, [r4, #12]
 80129b8:	059b      	lsls	r3, r3, #22
 80129ba:	d4e1      	bmi.n	8012980 <_fflush_r+0xc>
 80129bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129be:	f7ff fc24 	bl	801220a <__retarget_lock_release_recursive>
 80129c2:	e7dd      	b.n	8012980 <_fflush_r+0xc>

080129c4 <__swhatbuf_r>:
 80129c4:	b570      	push	{r4, r5, r6, lr}
 80129c6:	460c      	mov	r4, r1
 80129c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129cc:	2900      	cmp	r1, #0
 80129ce:	b096      	sub	sp, #88	; 0x58
 80129d0:	4615      	mov	r5, r2
 80129d2:	461e      	mov	r6, r3
 80129d4:	da0d      	bge.n	80129f2 <__swhatbuf_r+0x2e>
 80129d6:	89a3      	ldrh	r3, [r4, #12]
 80129d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80129dc:	f04f 0100 	mov.w	r1, #0
 80129e0:	bf0c      	ite	eq
 80129e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80129e6:	2340      	movne	r3, #64	; 0x40
 80129e8:	2000      	movs	r0, #0
 80129ea:	6031      	str	r1, [r6, #0]
 80129ec:	602b      	str	r3, [r5, #0]
 80129ee:	b016      	add	sp, #88	; 0x58
 80129f0:	bd70      	pop	{r4, r5, r6, pc}
 80129f2:	466a      	mov	r2, sp
 80129f4:	f000 f848 	bl	8012a88 <_fstat_r>
 80129f8:	2800      	cmp	r0, #0
 80129fa:	dbec      	blt.n	80129d6 <__swhatbuf_r+0x12>
 80129fc:	9901      	ldr	r1, [sp, #4]
 80129fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012a02:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012a06:	4259      	negs	r1, r3
 8012a08:	4159      	adcs	r1, r3
 8012a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012a0e:	e7eb      	b.n	80129e8 <__swhatbuf_r+0x24>

08012a10 <__smakebuf_r>:
 8012a10:	898b      	ldrh	r3, [r1, #12]
 8012a12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012a14:	079d      	lsls	r5, r3, #30
 8012a16:	4606      	mov	r6, r0
 8012a18:	460c      	mov	r4, r1
 8012a1a:	d507      	bpl.n	8012a2c <__smakebuf_r+0x1c>
 8012a1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012a20:	6023      	str	r3, [r4, #0]
 8012a22:	6123      	str	r3, [r4, #16]
 8012a24:	2301      	movs	r3, #1
 8012a26:	6163      	str	r3, [r4, #20]
 8012a28:	b002      	add	sp, #8
 8012a2a:	bd70      	pop	{r4, r5, r6, pc}
 8012a2c:	ab01      	add	r3, sp, #4
 8012a2e:	466a      	mov	r2, sp
 8012a30:	f7ff ffc8 	bl	80129c4 <__swhatbuf_r>
 8012a34:	9900      	ldr	r1, [sp, #0]
 8012a36:	4605      	mov	r5, r0
 8012a38:	4630      	mov	r0, r6
 8012a3a:	f7ff f873 	bl	8011b24 <_malloc_r>
 8012a3e:	b948      	cbnz	r0, 8012a54 <__smakebuf_r+0x44>
 8012a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a44:	059a      	lsls	r2, r3, #22
 8012a46:	d4ef      	bmi.n	8012a28 <__smakebuf_r+0x18>
 8012a48:	f023 0303 	bic.w	r3, r3, #3
 8012a4c:	f043 0302 	orr.w	r3, r3, #2
 8012a50:	81a3      	strh	r3, [r4, #12]
 8012a52:	e7e3      	b.n	8012a1c <__smakebuf_r+0xc>
 8012a54:	89a3      	ldrh	r3, [r4, #12]
 8012a56:	6020      	str	r0, [r4, #0]
 8012a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a5c:	81a3      	strh	r3, [r4, #12]
 8012a5e:	9b00      	ldr	r3, [sp, #0]
 8012a60:	6163      	str	r3, [r4, #20]
 8012a62:	9b01      	ldr	r3, [sp, #4]
 8012a64:	6120      	str	r0, [r4, #16]
 8012a66:	b15b      	cbz	r3, 8012a80 <__smakebuf_r+0x70>
 8012a68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a6c:	4630      	mov	r0, r6
 8012a6e:	f000 f81d 	bl	8012aac <_isatty_r>
 8012a72:	b128      	cbz	r0, 8012a80 <__smakebuf_r+0x70>
 8012a74:	89a3      	ldrh	r3, [r4, #12]
 8012a76:	f023 0303 	bic.w	r3, r3, #3
 8012a7a:	f043 0301 	orr.w	r3, r3, #1
 8012a7e:	81a3      	strh	r3, [r4, #12]
 8012a80:	89a3      	ldrh	r3, [r4, #12]
 8012a82:	431d      	orrs	r5, r3
 8012a84:	81a5      	strh	r5, [r4, #12]
 8012a86:	e7cf      	b.n	8012a28 <__smakebuf_r+0x18>

08012a88 <_fstat_r>:
 8012a88:	b538      	push	{r3, r4, r5, lr}
 8012a8a:	4d07      	ldr	r5, [pc, #28]	; (8012aa8 <_fstat_r+0x20>)
 8012a8c:	2300      	movs	r3, #0
 8012a8e:	4604      	mov	r4, r0
 8012a90:	4608      	mov	r0, r1
 8012a92:	4611      	mov	r1, r2
 8012a94:	602b      	str	r3, [r5, #0]
 8012a96:	f7ef f912 	bl	8001cbe <_fstat>
 8012a9a:	1c43      	adds	r3, r0, #1
 8012a9c:	d102      	bne.n	8012aa4 <_fstat_r+0x1c>
 8012a9e:	682b      	ldr	r3, [r5, #0]
 8012aa0:	b103      	cbz	r3, 8012aa4 <_fstat_r+0x1c>
 8012aa2:	6023      	str	r3, [r4, #0]
 8012aa4:	bd38      	pop	{r3, r4, r5, pc}
 8012aa6:	bf00      	nop
 8012aa8:	24015f20 	.word	0x24015f20

08012aac <_isatty_r>:
 8012aac:	b538      	push	{r3, r4, r5, lr}
 8012aae:	4d06      	ldr	r5, [pc, #24]	; (8012ac8 <_isatty_r+0x1c>)
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	4604      	mov	r4, r0
 8012ab4:	4608      	mov	r0, r1
 8012ab6:	602b      	str	r3, [r5, #0]
 8012ab8:	f7ef f911 	bl	8001cde <_isatty>
 8012abc:	1c43      	adds	r3, r0, #1
 8012abe:	d102      	bne.n	8012ac6 <_isatty_r+0x1a>
 8012ac0:	682b      	ldr	r3, [r5, #0]
 8012ac2:	b103      	cbz	r3, 8012ac6 <_isatty_r+0x1a>
 8012ac4:	6023      	str	r3, [r4, #0]
 8012ac6:	bd38      	pop	{r3, r4, r5, pc}
 8012ac8:	24015f20 	.word	0x24015f20

08012acc <_init>:
 8012acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ace:	bf00      	nop
 8012ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ad2:	bc08      	pop	{r3}
 8012ad4:	469e      	mov	lr, r3
 8012ad6:	4770      	bx	lr

08012ad8 <_fini>:
 8012ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ada:	bf00      	nop
 8012adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ade:	bc08      	pop	{r3}
 8012ae0:	469e      	mov	lr, r3
 8012ae2:	4770      	bx	lr
