
Nucleo-H723_CoreMark_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014d88  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf4  08015058  08015058  00025058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015c4c  08015c4c  00025c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015c54  08015c54  00025c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015c58  08015c58  00025c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002e0  24000000  08015c5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00010a04  240002e0  08015f3c  000302e0  2**2
                  ALLOC
  8 ._user_heap_stack 00005004  24010ce4  08015f3c  00030ce4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY
 10 .comment      00000086  00000000  00000000  0003030e  2**0
                  CONTENTS, READONLY
 11 .debug_info   000291cc  00000000  00000000  00030394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000550d  00000000  00000000  00059560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001fe8  00000000  00000000  0005ea70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000018ad  00000000  00000000  00060a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00008dfc  00000000  00000000  00062305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002b684  00000000  00000000  0006b101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00164c99  00000000  00000000  00096785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000094fc  00000000  00000000  001fb420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008d  00000000  00000000  0020491c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002e0 	.word	0x240002e0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08015040 	.word	0x08015040

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002e4 	.word	0x240002e4
 800030c:	08015040 	.word	0x08015040

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b970 	b.w	80006b8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9e08      	ldr	r6, [sp, #32]
 80003f6:	460d      	mov	r5, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	460f      	mov	r7, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4694      	mov	ip, r2
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0xe2>
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	b143      	cbz	r3, 800041e <__udivmoddi4+0x2e>
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	f1c3 0220 	rsb	r2, r3, #32
 8000414:	409f      	lsls	r7, r3
 8000416:	fa20 f202 	lsr.w	r2, r0, r2
 800041a:	4317      	orrs	r7, r2
 800041c:	409c      	lsls	r4, r3
 800041e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000422:	fa1f f58c 	uxth.w	r5, ip
 8000426:	fbb7 f1fe 	udiv	r1, r7, lr
 800042a:	0c22      	lsrs	r2, r4, #16
 800042c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000430:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000434:	fb01 f005 	mul.w	r0, r1, r5
 8000438:	4290      	cmp	r0, r2
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x62>
 800043c:	eb1c 0202 	adds.w	r2, ip, r2
 8000440:	f101 37ff 	add.w	r7, r1, #4294967295
 8000444:	f080 811c 	bcs.w	8000680 <__udivmoddi4+0x290>
 8000448:	4290      	cmp	r0, r2
 800044a:	f240 8119 	bls.w	8000680 <__udivmoddi4+0x290>
 800044e:	3902      	subs	r1, #2
 8000450:	4462      	add	r2, ip
 8000452:	1a12      	subs	r2, r2, r0
 8000454:	b2a4      	uxth	r4, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000462:	fb00 f505 	mul.w	r5, r0, r5
 8000466:	42a5      	cmp	r5, r4
 8000468:	d90a      	bls.n	8000480 <__udivmoddi4+0x90>
 800046a:	eb1c 0404 	adds.w	r4, ip, r4
 800046e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000472:	f080 8107 	bcs.w	8000684 <__udivmoddi4+0x294>
 8000476:	42a5      	cmp	r5, r4
 8000478:	f240 8104 	bls.w	8000684 <__udivmoddi4+0x294>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	2100      	movs	r1, #0
 8000488:	b11e      	cbz	r6, 8000492 <__udivmoddi4+0xa2>
 800048a:	40dc      	lsrs	r4, r3
 800048c:	2300      	movs	r3, #0
 800048e:	e9c6 4300 	strd	r4, r3, [r6]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0xbc>
 800049a:	2e00      	cmp	r6, #0
 800049c:	f000 80ed 	beq.w	800067a <__udivmoddi4+0x28a>
 80004a0:	2100      	movs	r1, #0
 80004a2:	e9c6 0500 	strd	r0, r5, [r6]
 80004a6:	4608      	mov	r0, r1
 80004a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ac:	fab3 f183 	clz	r1, r3
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d149      	bne.n	8000548 <__udivmoddi4+0x158>
 80004b4:	42ab      	cmp	r3, r5
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0xce>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	f200 80f8 	bhi.w	80006ae <__udivmoddi4+0x2be>
 80004be:	1a84      	subs	r4, r0, r2
 80004c0:	eb65 0203 	sbc.w	r2, r5, r3
 80004c4:	2001      	movs	r0, #1
 80004c6:	4617      	mov	r7, r2
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d0e2      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	e9c6 4700 	strd	r4, r7, [r6]
 80004d0:	e7df      	b.n	8000492 <__udivmoddi4+0xa2>
 80004d2:	b902      	cbnz	r2, 80004d6 <__udivmoddi4+0xe6>
 80004d4:	deff      	udf	#255	; 0xff
 80004d6:	fab2 f382 	clz	r3, r2
 80004da:	2b00      	cmp	r3, #0
 80004dc:	f040 8090 	bne.w	8000600 <__udivmoddi4+0x210>
 80004e0:	1a8a      	subs	r2, r1, r2
 80004e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e6:	fa1f fe8c 	uxth.w	lr, ip
 80004ea:	2101      	movs	r1, #1
 80004ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80004f0:	fb07 2015 	mls	r0, r7, r5, r2
 80004f4:	0c22      	lsrs	r2, r4, #16
 80004f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004fa:	fb0e f005 	mul.w	r0, lr, r5
 80004fe:	4290      	cmp	r0, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x124>
 8000502:	eb1c 0202 	adds.w	r2, ip, r2
 8000506:	f105 38ff 	add.w	r8, r5, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x122>
 800050c:	4290      	cmp	r0, r2
 800050e:	f200 80cb 	bhi.w	80006a8 <__udivmoddi4+0x2b8>
 8000512:	4645      	mov	r5, r8
 8000514:	1a12      	subs	r2, r2, r0
 8000516:	b2a4      	uxth	r4, r4
 8000518:	fbb2 f0f7 	udiv	r0, r2, r7
 800051c:	fb07 2210 	mls	r2, r7, r0, r2
 8000520:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000524:	fb0e fe00 	mul.w	lr, lr, r0
 8000528:	45a6      	cmp	lr, r4
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x14e>
 800052c:	eb1c 0404 	adds.w	r4, ip, r4
 8000530:	f100 32ff 	add.w	r2, r0, #4294967295
 8000534:	d202      	bcs.n	800053c <__udivmoddi4+0x14c>
 8000536:	45a6      	cmp	lr, r4
 8000538:	f200 80bb 	bhi.w	80006b2 <__udivmoddi4+0x2c2>
 800053c:	4610      	mov	r0, r2
 800053e:	eba4 040e 	sub.w	r4, r4, lr
 8000542:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000546:	e79f      	b.n	8000488 <__udivmoddi4+0x98>
 8000548:	f1c1 0720 	rsb	r7, r1, #32
 800054c:	408b      	lsls	r3, r1
 800054e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000552:	ea4c 0c03 	orr.w	ip, ip, r3
 8000556:	fa05 f401 	lsl.w	r4, r5, r1
 800055a:	fa20 f307 	lsr.w	r3, r0, r7
 800055e:	40fd      	lsrs	r5, r7
 8000560:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000564:	4323      	orrs	r3, r4
 8000566:	fbb5 f8f9 	udiv	r8, r5, r9
 800056a:	fa1f fe8c 	uxth.w	lr, ip
 800056e:	fb09 5518 	mls	r5, r9, r8, r5
 8000572:	0c1c      	lsrs	r4, r3, #16
 8000574:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000578:	fb08 f50e 	mul.w	r5, r8, lr
 800057c:	42a5      	cmp	r5, r4
 800057e:	fa02 f201 	lsl.w	r2, r2, r1
 8000582:	fa00 f001 	lsl.w	r0, r0, r1
 8000586:	d90b      	bls.n	80005a0 <__udivmoddi4+0x1b0>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000590:	f080 8088 	bcs.w	80006a4 <__udivmoddi4+0x2b4>
 8000594:	42a5      	cmp	r5, r4
 8000596:	f240 8085 	bls.w	80006a4 <__udivmoddi4+0x2b4>
 800059a:	f1a8 0802 	sub.w	r8, r8, #2
 800059e:	4464      	add	r4, ip
 80005a0:	1b64      	subs	r4, r4, r5
 80005a2:	b29d      	uxth	r5, r3
 80005a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005a8:	fb09 4413 	mls	r4, r9, r3, r4
 80005ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005b4:	45a6      	cmp	lr, r4
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x1da>
 80005b8:	eb1c 0404 	adds.w	r4, ip, r4
 80005bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005c0:	d26c      	bcs.n	800069c <__udivmoddi4+0x2ac>
 80005c2:	45a6      	cmp	lr, r4
 80005c4:	d96a      	bls.n	800069c <__udivmoddi4+0x2ac>
 80005c6:	3b02      	subs	r3, #2
 80005c8:	4464      	add	r4, ip
 80005ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ce:	fba3 9502 	umull	r9, r5, r3, r2
 80005d2:	eba4 040e 	sub.w	r4, r4, lr
 80005d6:	42ac      	cmp	r4, r5
 80005d8:	46c8      	mov	r8, r9
 80005da:	46ae      	mov	lr, r5
 80005dc:	d356      	bcc.n	800068c <__udivmoddi4+0x29c>
 80005de:	d053      	beq.n	8000688 <__udivmoddi4+0x298>
 80005e0:	b156      	cbz	r6, 80005f8 <__udivmoddi4+0x208>
 80005e2:	ebb0 0208 	subs.w	r2, r0, r8
 80005e6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ea:	fa04 f707 	lsl.w	r7, r4, r7
 80005ee:	40ca      	lsrs	r2, r1
 80005f0:	40cc      	lsrs	r4, r1
 80005f2:	4317      	orrs	r7, r2
 80005f4:	e9c6 7400 	strd	r7, r4, [r6]
 80005f8:	4618      	mov	r0, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000600:	f1c3 0120 	rsb	r1, r3, #32
 8000604:	fa02 fc03 	lsl.w	ip, r2, r3
 8000608:	fa20 f201 	lsr.w	r2, r0, r1
 800060c:	fa25 f101 	lsr.w	r1, r5, r1
 8000610:	409d      	lsls	r5, r3
 8000612:	432a      	orrs	r2, r5
 8000614:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000618:	fa1f fe8c 	uxth.w	lr, ip
 800061c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000620:	fb07 1510 	mls	r5, r7, r0, r1
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800062a:	fb00 f50e 	mul.w	r5, r0, lr
 800062e:	428d      	cmp	r5, r1
 8000630:	fa04 f403 	lsl.w	r4, r4, r3
 8000634:	d908      	bls.n	8000648 <__udivmoddi4+0x258>
 8000636:	eb1c 0101 	adds.w	r1, ip, r1
 800063a:	f100 38ff 	add.w	r8, r0, #4294967295
 800063e:	d22f      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000640:	428d      	cmp	r5, r1
 8000642:	d92d      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000644:	3802      	subs	r0, #2
 8000646:	4461      	add	r1, ip
 8000648:	1b49      	subs	r1, r1, r5
 800064a:	b292      	uxth	r2, r2
 800064c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000650:	fb07 1115 	mls	r1, r7, r5, r1
 8000654:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000658:	fb05 f10e 	mul.w	r1, r5, lr
 800065c:	4291      	cmp	r1, r2
 800065e:	d908      	bls.n	8000672 <__udivmoddi4+0x282>
 8000660:	eb1c 0202 	adds.w	r2, ip, r2
 8000664:	f105 38ff 	add.w	r8, r5, #4294967295
 8000668:	d216      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 800066a:	4291      	cmp	r1, r2
 800066c:	d914      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800066e:	3d02      	subs	r5, #2
 8000670:	4462      	add	r2, ip
 8000672:	1a52      	subs	r2, r2, r1
 8000674:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000678:	e738      	b.n	80004ec <__udivmoddi4+0xfc>
 800067a:	4631      	mov	r1, r6
 800067c:	4630      	mov	r0, r6
 800067e:	e708      	b.n	8000492 <__udivmoddi4+0xa2>
 8000680:	4639      	mov	r1, r7
 8000682:	e6e6      	b.n	8000452 <__udivmoddi4+0x62>
 8000684:	4610      	mov	r0, r2
 8000686:	e6fb      	b.n	8000480 <__udivmoddi4+0x90>
 8000688:	4548      	cmp	r0, r9
 800068a:	d2a9      	bcs.n	80005e0 <__udivmoddi4+0x1f0>
 800068c:	ebb9 0802 	subs.w	r8, r9, r2
 8000690:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000694:	3b01      	subs	r3, #1
 8000696:	e7a3      	b.n	80005e0 <__udivmoddi4+0x1f0>
 8000698:	4645      	mov	r5, r8
 800069a:	e7ea      	b.n	8000672 <__udivmoddi4+0x282>
 800069c:	462b      	mov	r3, r5
 800069e:	e794      	b.n	80005ca <__udivmoddi4+0x1da>
 80006a0:	4640      	mov	r0, r8
 80006a2:	e7d1      	b.n	8000648 <__udivmoddi4+0x258>
 80006a4:	46d0      	mov	r8, sl
 80006a6:	e77b      	b.n	80005a0 <__udivmoddi4+0x1b0>
 80006a8:	3d02      	subs	r5, #2
 80006aa:	4462      	add	r2, ip
 80006ac:	e732      	b.n	8000514 <__udivmoddi4+0x124>
 80006ae:	4608      	mov	r0, r1
 80006b0:	e70a      	b.n	80004c8 <__udivmoddi4+0xd8>
 80006b2:	4464      	add	r4, ip
 80006b4:	3802      	subs	r0, #2
 80006b6:	e742      	b.n	800053e <__udivmoddi4+0x14e>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <wizchip_select>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static inline void wizchip_select(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W6100_CS_GPIO_Port, W6100_CS_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c6:	4802      	ldr	r0, [pc, #8]	; (80006d0 <wizchip_select+0x14>)
 80006c8:	f004 fafc 	bl	8004cc4 <HAL_GPIO_WritePin>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	58020c00 	.word	0x58020c00

080006d4 <wizchip_deselect>:

static inline void wizchip_deselect(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W6100_CS_GPIO_Port, W6100_CS_Pin, GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006de:	4802      	ldr	r0, [pc, #8]	; (80006e8 <wizchip_deselect+0x14>)
 80006e0:	f004 faf0 	bl	8004cc4 <HAL_GPIO_WritePin>
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	58020c00 	.word	0x58020c00

080006ec <wizchip_reset>:

void wizchip_reset()
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
	...

080006fc <wizchip_read>:

static uint8_t wizchip_read(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af02      	add	r7, sp, #8
    uint8_t rx_data = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data = 0xFF;
 8000706:	23ff      	movs	r3, #255	; 0xff
 8000708:	71bb      	strb	r3, [r7, #6]

		while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800070a:	bf00      	nop
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <wizchip_read+0x44>)
 800070e:	f008 f891 	bl	8008834 <HAL_SPI_GetState>
 8000712:	4603      	mov	r3, r0
 8000714:	2b01      	cmp	r3, #1
 8000716:	d1f9      	bne.n	800070c <wizchip_read+0x10>
    HAL_SPI_TransmitReceive(&hspi1, &tx_data, &rx_data, 1, 10);
 8000718:	1dfa      	adds	r2, r7, #7
 800071a:	1db9      	adds	r1, r7, #6
 800071c:	230a      	movs	r3, #10
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	2301      	movs	r3, #1
 8000722:	4807      	ldr	r0, [pc, #28]	; (8000740 <wizchip_read+0x44>)
 8000724:	f007 f9b0 	bl	8007a88 <HAL_SPI_TransmitReceive>
    while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_RX);
 8000728:	bf00      	nop
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <wizchip_read+0x44>)
 800072c:	f008 f882 	bl	8008834 <HAL_SPI_GetState>
 8000730:	4603      	mov	r3, r0
 8000732:	2b04      	cmp	r3, #4
 8000734:	d0f9      	beq.n	800072a <wizchip_read+0x2e>
    
    return rx_data;
 8000736:	79fb      	ldrb	r3, [r7, #7]
}
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	240002fc 	.word	0x240002fc

08000744 <wizchip_write>:

static void wizchip_write(uint8_t tx_data)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af02      	add	r7, sp, #8
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
		uint8_t rtnByte;

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800074e:	bf00      	nop
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <wizchip_write+0x44>)
 8000752:	f008 f86f 	bl	8008834 <HAL_SPI_GetState>
 8000756:	4603      	mov	r3, r0
 8000758:	2b01      	cmp	r3, #1
 800075a:	d1f9      	bne.n	8000750 <wizchip_write+0xc>
    HAL_SPI_TransmitReceive(&hspi1, &tx_data, &rtnByte, 1, 10);
 800075c:	f107 020f 	add.w	r2, r7, #15
 8000760:	1df9      	adds	r1, r7, #7
 8000762:	230a      	movs	r3, #10
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	2301      	movs	r3, #1
 8000768:	4807      	ldr	r0, [pc, #28]	; (8000788 <wizchip_write+0x44>)
 800076a:	f007 f98d 	bl	8007a88 <HAL_SPI_TransmitReceive>
    while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX);
 800076e:	bf00      	nop
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <wizchip_write+0x44>)
 8000772:	f008 f85f 	bl	8008834 <HAL_SPI_GetState>
 8000776:	4603      	mov	r3, r0
 8000778:	2b03      	cmp	r3, #3
 800077a:	d0f9      	beq.n	8000770 <wizchip_write+0x2c>
}
 800077c:	bf00      	nop
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	240002fc 	.word	0x240002fc

0800078c <wizchip_read_burst>:
}

#else

static void wizchip_read_burst(uint8_t *pBuf, uint16_t len)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive_DMA(&hspi1, pBuf, len);
 8000798:	887b      	ldrh	r3, [r7, #2]
 800079a:	461a      	mov	r2, r3
 800079c:	6879      	ldr	r1, [r7, #4]
 800079e:	480b      	ldr	r0, [pc, #44]	; (80007cc <wizchip_read_burst+0x40>)
 80007a0:	f007 fce2 	bl	8008168 <HAL_SPI_Receive_DMA>
  while (HAL_DMA_GetState(hspi1.hdmarx) == HAL_DMA_STATE_BUSY);
 80007a4:	bf00      	nop
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <wizchip_read_burst+0x40>)
 80007a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80007aa:	4618      	mov	r0, r3
 80007ac:	f003 fce0 	bl	8004170 <HAL_DMA_GetState>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b02      	cmp	r3, #2
 80007b4:	d0f7      	beq.n	80007a6 <wizchip_read_burst+0x1a>
  while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_RX);
 80007b6:	bf00      	nop
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <wizchip_read_burst+0x40>)
 80007ba:	f008 f83b 	bl	8008834 <HAL_SPI_GetState>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b04      	cmp	r3, #4
 80007c2:	d0f9      	beq.n	80007b8 <wizchip_read_burst+0x2c>
  
	return;
 80007c4:	bf00      	nop
}
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	240002fc 	.word	0x240002fc

080007d0 <wizchip_write_burst>:

static void wizchip_write_burst(uint8_t *pBuf, uint16_t len)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Transmit_DMA(&hspi1, pBuf, len);
 80007dc:	887b      	ldrh	r3, [r7, #2]
 80007de:	461a      	mov	r2, r3
 80007e0:	6879      	ldr	r1, [r7, #4]
 80007e2:	480b      	ldr	r0, [pc, #44]	; (8000810 <wizchip_write_burst+0x40>)
 80007e4:	f007 fb6c 	bl	8007ec0 <HAL_SPI_Transmit_DMA>
  while (HAL_DMA_GetState(hspi1.hdmatx) == HAL_DMA_STATE_BUSY);
 80007e8:	bf00      	nop
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <wizchip_write_burst+0x40>)
 80007ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 fcbe 	bl	8004170 <HAL_DMA_GetState>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	d0f7      	beq.n	80007ea <wizchip_write_burst+0x1a>
  while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX);
 80007fa:	bf00      	nop
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <wizchip_write_burst+0x40>)
 80007fe:	f008 f819 	bl	8008834 <HAL_SPI_GetState>
 8000802:	4603      	mov	r3, r0
 8000804:	2b03      	cmp	r3, #3
 8000806:	d0f9      	beq.n	80007fc <wizchip_write_burst+0x2c>
  
	return;
 8000808:	bf00      	nop
}
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	240002fc 	.word	0x240002fc

08000814 <wizchip_initialize>:
{
	reg_wizchip_cris_cbfunc(wizchip_critical_section_lock, wizchip_critical_section_unlock);
}

void wizchip_initialize(void)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
    /* Deselect the FLASH : chip select high */
    wizchip_deselect();
 800081a:	f7ff ff5b 	bl	80006d4 <wizchip_deselect>

    /* CS function register */
    reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 800081e:	490f      	ldr	r1, [pc, #60]	; (800085c <wizchip_initialize+0x48>)
 8000820:	480f      	ldr	r0, [pc, #60]	; (8000860 <wizchip_initialize+0x4c>)
 8000822:	f010 ffcb 	bl	80117bc <reg_wizchip_cs_cbfunc>

    /* SPI function register */
#ifdef USE_SPI_DMA
    reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write, wizchip_read_burst, wizchip_write_burst);
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <wizchip_initialize+0x50>)
 8000828:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <wizchip_initialize+0x54>)
 800082a:	4910      	ldr	r1, [pc, #64]	; (800086c <wizchip_initialize+0x58>)
 800082c:	4810      	ldr	r0, [pc, #64]	; (8000870 <wizchip_initialize+0x5c>)
 800082e:	f010 ffeb 	bl	8011808 <reg_wizchip_spi_cbfunc>
    uint8_t memsize[2][4] = {{2, 2, 2, 2}, {2, 2, 2, 2}};
#elif (_WIZCHIP_ == W5500)
    uint8_t memsize[2][8] = {{16, 0, 0, 0, 0, 0, 0, 0}, {16, 0, 0, 0, 0, 0, 0, 0}};
#elif (_WIZCHIP_ == W6100)
    //uint8_t memsize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
    uint8_t memsize[2][8] = {{16, 0, 0, 0, 0, 0, 0, 0}, {16, 0, 0, 0, 0, 0, 0, 0}};
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <wizchip_initialize+0x60>)
 8000834:	463c      	mov	r4, r7
 8000836:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000838:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif
  
    if (ctlwizchip(CW_INIT_WIZCHIP, (void *)memsize) == -1)
 800083c:	463b      	mov	r3, r7
 800083e:	4619      	mov	r1, r3
 8000840:	2004      	movs	r0, #4
 8000842:	f011 f827 	bl	8011894 <ctlwizchip>
 8000846:	4603      	mov	r3, r0
 8000848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800084c:	d102      	bne.n	8000854 <wizchip_initialize+0x40>
    {
        printf(" W5x00 initialized fail\n");
 800084e:	480a      	ldr	r0, [pc, #40]	; (8000878 <wizchip_initialize+0x64>)
 8000850:	f012 fc54 	bl	80130fc <puts>

            return;
        }
    } while (temp == PHY_LINK_OFF);
#endif
}
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	bd90      	pop	{r4, r7, pc}
 800085a:	bf00      	nop
 800085c:	080006d5 	.word	0x080006d5
 8000860:	080006bd 	.word	0x080006bd
 8000864:	080007d1 	.word	0x080007d1
 8000868:	0800078d 	.word	0x0800078d
 800086c:	08000745 	.word	0x08000745
 8000870:	080006fd 	.word	0x080006fd
 8000874:	08015088 	.word	0x08015088
 8000878:	08015070 	.word	0x08015070

0800087c <wizchip_check>:

void wizchip_check(void)
{
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
            ;
    }
#elif (_WIZCHIP_ == W6100)
    uint16_t ver_val;
    /* Read version register */
    ver_val = getCIDR();
 8000882:	2000      	movs	r0, #0
 8000884:	f010 f8a6 	bl	80109d4 <WIZCHIP_READ>
 8000888:	4603      	mov	r3, r0
 800088a:	b29b      	uxth	r3, r3
 800088c:	021b      	lsls	r3, r3, #8
 800088e:	b29c      	uxth	r4, r3
 8000890:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000894:	f010 f89e 	bl	80109d4 <WIZCHIP_READ>
 8000898:	4603      	mov	r3, r0
 800089a:	b29b      	uxth	r3, r3
 800089c:	4423      	add	r3, r4
 800089e:	80fb      	strh	r3, [r7, #6]
    if (ver_val != 0x6100)
 80008a0:	88fb      	ldrh	r3, [r7, #6]
 80008a2:	f5b3 4fc2 	cmp.w	r3, #24832	; 0x6100
 80008a6:	d005      	beq.n	80008b4 <wizchip_check+0x38>
    {
        printf(" ACCESS ERR : VERSION != 0x6100, read value = 0x%04x\n", ver_val);
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	4619      	mov	r1, r3
 80008ac:	4803      	ldr	r0, [pc, #12]	; (80008bc <wizchip_check+0x40>)
 80008ae:	f012 fbb7 	bl	8013020 <iprintf>

        while (1)
 80008b2:	e7fe      	b.n	80008b2 <wizchip_check+0x36>
            ;
    }
#endif
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	08015098 	.word	0x08015098

080008c0 <network_initialize>:

/* Network */
void network_initialize(wiz_NetInfo net_info)
{
 80008c0:	b084      	sub	sp, #16
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	f107 0c10 	add.w	ip, r7, #16
 80008cc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint8_t syslock = SYS_NET_LOCK;
 80008d0:	2302      	movs	r3, #2
 80008d2:	71fb      	strb	r3, [r7, #7]
    ctlwizchip(CW_SYS_UNLOCK, &syslock);
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	4619      	mov	r1, r3
 80008d8:	2001      	movs	r0, #1
 80008da:	f010 ffdb 	bl	8011894 <ctlwizchip>
    ctlnetwork(CN_SET_NETINFO, (void *)&net_info);
 80008de:	f107 0110 	add.w	r1, r7, #16
 80008e2:	2000      	movs	r0, #0
 80008e4:	f011 f966 	bl	8011bb4 <ctlnetwork>
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008f2:	b004      	add	sp, #16
 80008f4:	4770      	bx	lr
	...

080008f8 <print_network_information>:

void print_network_information(wiz_NetInfo net_info)
{
 80008f8:	b084      	sub	sp, #16
 80008fa:	b5b0      	push	{r4, r5, r7, lr}
 80008fc:	b086      	sub	sp, #24
 80008fe:	af04      	add	r7, sp, #16
 8000900:	f107 0418 	add.w	r4, r7, #24
 8000904:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint8_t tmp_str[8] = {
 8000908:	2300      	movs	r3, #0
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
        0,
    };

    ctlnetwork(CN_GET_NETINFO, (void *)&net_info);
 8000910:	f107 0118 	add.w	r1, r7, #24
 8000914:	2001      	movs	r0, #1
 8000916:	f011 f94d 	bl	8011bb4 <ctlnetwork>
    ctlwizchip(CW_GET_ID, (void *)tmp_str);
 800091a:	463b      	mov	r3, r7
 800091c:	4619      	mov	r1, r3
 800091e:	200d      	movs	r0, #13
 8000920:	f010 ffb8 	bl	8011894 <ctlwizchip>

    printf("==========================================================\n");
 8000924:	483f      	ldr	r0, [pc, #252]	; (8000a24 <print_network_information+0x12c>)
 8000926:	f012 fbe9 	bl	80130fc <puts>
    printf(" %s network configuration\n\n", (char *)tmp_str);
 800092a:	463b      	mov	r3, r7
 800092c:	4619      	mov	r1, r3
 800092e:	483e      	ldr	r0, [pc, #248]	; (8000a28 <print_network_information+0x130>)
 8000930:	f012 fb76 	bl	8013020 <iprintf>

    printf(" MAC         : %02X:%02X:%02X:%02X:%02X:%02X\n", net_info.mac[0], net_info.mac[1], net_info.mac[2], net_info.mac[3], net_info.mac[4], net_info.mac[5]);
 8000934:	7e3b      	ldrb	r3, [r7, #24]
 8000936:	4618      	mov	r0, r3
 8000938:	7e7b      	ldrb	r3, [r7, #25]
 800093a:	461c      	mov	r4, r3
 800093c:	7ebb      	ldrb	r3, [r7, #26]
 800093e:	461d      	mov	r5, r3
 8000940:	7efb      	ldrb	r3, [r7, #27]
 8000942:	7f3a      	ldrb	r2, [r7, #28]
 8000944:	7f79      	ldrb	r1, [r7, #29]
 8000946:	9102      	str	r1, [sp, #8]
 8000948:	9201      	str	r2, [sp, #4]
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	462b      	mov	r3, r5
 800094e:	4622      	mov	r2, r4
 8000950:	4601      	mov	r1, r0
 8000952:	4836      	ldr	r0, [pc, #216]	; (8000a2c <print_network_information+0x134>)
 8000954:	f012 fb64 	bl	8013020 <iprintf>
    printf(" IP          : %d.%d.%d.%d\n", net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3]);
 8000958:	7fbb      	ldrb	r3, [r7, #30]
 800095a:	4619      	mov	r1, r3
 800095c:	7ffb      	ldrb	r3, [r7, #31]
 800095e:	461a      	mov	r2, r3
 8000960:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000964:	4618      	mov	r0, r3
 8000966:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	4603      	mov	r3, r0
 800096e:	4830      	ldr	r0, [pc, #192]	; (8000a30 <print_network_information+0x138>)
 8000970:	f012 fb56 	bl	8013020 <iprintf>
    printf(" Subnet Mask : %d.%d.%d.%d\n", net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]);
 8000974:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000978:	4619      	mov	r1, r3
 800097a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800097e:	461a      	mov	r2, r3
 8000980:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000984:	4618      	mov	r0, r3
 8000986:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	4603      	mov	r3, r0
 800098e:	4829      	ldr	r0, [pc, #164]	; (8000a34 <print_network_information+0x13c>)
 8000990:	f012 fb46 	bl	8013020 <iprintf>
    printf(" Gateway     : %d.%d.%d.%d\n", net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3]);
 8000994:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000998:	4619      	mov	r1, r3
 800099a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800099e:	461a      	mov	r2, r3
 80009a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80009a4:	4618      	mov	r0, r3
 80009a6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	4603      	mov	r3, r0
 80009ae:	4822      	ldr	r0, [pc, #136]	; (8000a38 <print_network_information+0x140>)
 80009b0:	f012 fb36 	bl	8013020 <iprintf>
    printf(" DNS         : %d.%d.%d.%d\n", net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]);
 80009b4:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80009b8:	4619      	mov	r1, r3
 80009ba:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80009be:	461a      	mov	r2, r3
 80009c0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80009c4:	4618      	mov	r0, r3
 80009c6:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	4603      	mov	r3, r0
 80009ce:	481b      	ldr	r0, [pc, #108]	; (8000a3c <print_network_information+0x144>)
 80009d0:	f012 fb26 	bl	8013020 <iprintf>
    print_ipv6_addr(" GW6 ", net_info.gw6);
 80009d4:	f107 035a 	add.w	r3, r7, #90	; 0x5a
 80009d8:	4619      	mov	r1, r3
 80009da:	4819      	ldr	r0, [pc, #100]	; (8000a40 <print_network_information+0x148>)
 80009dc:	f000 f83c 	bl	8000a58 <print_ipv6_addr>
    print_ipv6_addr(" LLA ", net_info.lla);
 80009e0:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80009e4:	4619      	mov	r1, r3
 80009e6:	4817      	ldr	r0, [pc, #92]	; (8000a44 <print_network_information+0x14c>)
 80009e8:	f000 f836 	bl	8000a58 <print_ipv6_addr>
    print_ipv6_addr(" GUA ", net_info.gua);
 80009ec:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80009f0:	4619      	mov	r1, r3
 80009f2:	4815      	ldr	r0, [pc, #84]	; (8000a48 <print_network_information+0x150>)
 80009f4:	f000 f830 	bl	8000a58 <print_ipv6_addr>
    print_ipv6_addr(" SUB6", net_info.sn6);
 80009f8:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 80009fc:	4619      	mov	r1, r3
 80009fe:	4813      	ldr	r0, [pc, #76]	; (8000a4c <print_network_information+0x154>)
 8000a00:	f000 f82a 	bl	8000a58 <print_ipv6_addr>
    print_ipv6_addr(" DNS6", net_info.dns6);
 8000a04:	f107 036e 	add.w	r3, r7, #110	; 0x6e
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4811      	ldr	r0, [pc, #68]	; (8000a50 <print_network_information+0x158>)
 8000a0c:	f000 f824 	bl	8000a58 <print_ipv6_addr>
    printf("==========================================================\n\n");
 8000a10:	4810      	ldr	r0, [pc, #64]	; (8000a54 <print_network_information+0x15c>)
 8000a12:	f012 fb73 	bl	80130fc <puts>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr
 8000a24:	080150d0 	.word	0x080150d0
 8000a28:	0801510c 	.word	0x0801510c
 8000a2c:	08015128 	.word	0x08015128
 8000a30:	08015158 	.word	0x08015158
 8000a34:	08015174 	.word	0x08015174
 8000a38:	08015190 	.word	0x08015190
 8000a3c:	080151ac 	.word	0x080151ac
 8000a40:	080151c8 	.word	0x080151c8
 8000a44:	080151d0 	.word	0x080151d0
 8000a48:	080151d8 	.word	0x080151d8
 8000a4c:	080151e0 	.word	0x080151e0
 8000a50:	080151e8 	.word	0x080151e8
 8000a54:	080151f0 	.word	0x080151f0

08000a58 <print_ipv6_addr>:

void print_ipv6_addr(uint8_t* name, uint8_t* ip6addr)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
	printf("%s        : ", name);
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	482c      	ldr	r0, [pc, #176]	; (8000b18 <print_ipv6_addr+0xc0>)
 8000a66:	f012 fadb 	bl	8013020 <iprintf>
	printf("%04X:%04X", ((uint16_t)ip6addr[0] << 8) | ((uint16_t)ip6addr[1]), ((uint16_t)ip6addr[2] << 8) | ((uint16_t)ip6addr[3]));
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	021b      	lsls	r3, r3, #8
 8000a70:	683a      	ldr	r2, [r7, #0]
 8000a72:	3201      	adds	r2, #1
 8000a74:	7812      	ldrb	r2, [r2, #0]
 8000a76:	ea43 0102 	orr.w	r1, r3, r2
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	021b      	lsls	r3, r3, #8
 8000a82:	683a      	ldr	r2, [r7, #0]
 8000a84:	3203      	adds	r2, #3
 8000a86:	7812      	ldrb	r2, [r2, #0]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4823      	ldr	r0, [pc, #140]	; (8000b1c <print_ipv6_addr+0xc4>)
 8000a8e:	f012 fac7 	bl	8013020 <iprintf>
	printf(":%04X:%04X", ((uint16_t)ip6addr[4] << 8) | ((uint16_t)ip6addr[5]), ((uint16_t)ip6addr[6] << 8) | ((uint16_t)ip6addr[7]));
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	3304      	adds	r3, #4
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	021b      	lsls	r3, r3, #8
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	3205      	adds	r2, #5
 8000a9e:	7812      	ldrb	r2, [r2, #0]
 8000aa0:	ea43 0102 	orr.w	r1, r3, r2
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	3306      	adds	r3, #6
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	021b      	lsls	r3, r3, #8
 8000aac:	683a      	ldr	r2, [r7, #0]
 8000aae:	3207      	adds	r2, #7
 8000ab0:	7812      	ldrb	r2, [r2, #0]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	481a      	ldr	r0, [pc, #104]	; (8000b20 <print_ipv6_addr+0xc8>)
 8000ab8:	f012 fab2 	bl	8013020 <iprintf>
	printf(":%04X:%04X", ((uint16_t)ip6addr[8] << 8) | ((uint16_t)ip6addr[9]), ((uint16_t)ip6addr[10] << 8) | ((uint16_t)ip6addr[11]));
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	3308      	adds	r3, #8
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	021b      	lsls	r3, r3, #8
 8000ac4:	683a      	ldr	r2, [r7, #0]
 8000ac6:	3209      	adds	r2, #9
 8000ac8:	7812      	ldrb	r2, [r2, #0]
 8000aca:	ea43 0102 	orr.w	r1, r3, r2
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	330a      	adds	r3, #10
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	021b      	lsls	r3, r3, #8
 8000ad6:	683a      	ldr	r2, [r7, #0]
 8000ad8:	320b      	adds	r2, #11
 8000ada:	7812      	ldrb	r2, [r2, #0]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	461a      	mov	r2, r3
 8000ae0:	480f      	ldr	r0, [pc, #60]	; (8000b20 <print_ipv6_addr+0xc8>)
 8000ae2:	f012 fa9d 	bl	8013020 <iprintf>
	printf(":%04X:%04X\r\n", ((uint16_t)ip6addr[12] << 8) | ((uint16_t)ip6addr[13]), ((uint16_t)ip6addr[14] << 8) | ((uint16_t)ip6addr[15]));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	330c      	adds	r3, #12
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	021b      	lsls	r3, r3, #8
 8000aee:	683a      	ldr	r2, [r7, #0]
 8000af0:	320d      	adds	r2, #13
 8000af2:	7812      	ldrb	r2, [r2, #0]
 8000af4:	ea43 0102 	orr.w	r1, r3, r2
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	330e      	adds	r3, #14
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	021b      	lsls	r3, r3, #8
 8000b00:	683a      	ldr	r2, [r7, #0]
 8000b02:	320f      	adds	r2, #15
 8000b04:	7812      	ldrb	r2, [r2, #0]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4806      	ldr	r0, [pc, #24]	; (8000b24 <print_ipv6_addr+0xcc>)
 8000b0c:	f012 fa88 	bl	8013020 <iprintf>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	0801522c 	.word	0x0801522c
 8000b1c:	0801523c 	.word	0x0801523c
 8000b20:	08015248 	.word	0x08015248
 8000b24:	08015254 	.word	0x08015254

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b09d      	sub	sp, #116	; 0x74
 8000b2c:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE BEGIN 1 */

	uint8_t temp_ver[2]={0,};
 8000b2e:	2300      	movs	r3, #0
 8000b30:	81bb      	strh	r3, [r7, #12]
	PLL2_ClocksTypeDef PLL2_Clk_data;
	uint16_t temp_presc = 1, temp_presc_set, temp_presc_cnt = 0;
 8000b32:	2301      	movs	r3, #1
 8000b34:	82fb      	strh	r3, [r7, #22]
 8000b36:	2300      	movs	r3, #0
 8000b38:	82bb      	strh	r3, [r7, #20]
	int i = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3e:	f000 ff8b 	bl	8001a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b42:	f000 f89d 	bl	8000c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b46:	f000 f9d5 	bl	8000ef4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b4a:	f000 f9ab 	bl	8000ea4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000b4e:	f000 f907 	bl	8000d60 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000b52:	f000 f95b 	bl	8000e0c <MX_USART3_UART_Init>
  //MX_CoreMarkApp_Init();
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rxData, 1);
 8000b56:	2201      	movs	r2, #1
 8000b58:	4938      	ldr	r1, [pc, #224]	; (8000c3c <main+0x114>)
 8000b5a:	4839      	ldr	r0, [pc, #228]	; (8000c40 <main+0x118>)
 8000b5c:	f008 fbd2 	bl	8009304 <HAL_UART_Receive_IT>
    printf("< W6100 clock TEST!! >\r\n");
 8000b60:	4838      	ldr	r0, [pc, #224]	; (8000c44 <main+0x11c>)
 8000b62:	f012 facb 	bl	80130fc <puts>
    //W6100CsDisable();
    HAL_RCCEx_GetPLL2ClockFreq(&PLL2_Clk_data);
 8000b66:	463b      	mov	r3, r7
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f006 fa5d 	bl	8007028 <HAL_RCCEx_GetPLL2ClockFreq>
      printf("SET PLL2 P:%ld, Q:%ld, R:%ld \r\n", PLL2_Clk_data.PLL2_P_Frequency, PLL2_Clk_data.PLL2_Q_Frequency, PLL2_Clk_data.PLL2_R_Frequency);
 8000b6e:	6839      	ldr	r1, [r7, #0]
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	4834      	ldr	r0, [pc, #208]	; (8000c48 <main+0x120>)
 8000b76:	f012 fa53 	bl	8013020 <iprintf>
      temp_presc_set = (hspi1.Init.BaudRatePrescaler>>(4*7));
 8000b7a:	4b34      	ldr	r3, [pc, #208]	; (8000c4c <main+0x124>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	0f1b      	lsrs	r3, r3, #28
 8000b80:	81fb      	strh	r3, [r7, #14]
      printf("pre = %d\r\n", temp_presc_set);
 8000b82:	89fb      	ldrh	r3, [r7, #14]
 8000b84:	4619      	mov	r1, r3
 8000b86:	4832      	ldr	r0, [pc, #200]	; (8000c50 <main+0x128>)
 8000b88:	f012 fa4a 	bl	8013020 <iprintf>
      for(temp_presc_cnt = 0; temp_presc_cnt < temp_presc_set; temp_presc_cnt++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	82bb      	strh	r3, [r7, #20]
 8000b90:	e005      	b.n	8000b9e <main+0x76>
      {
      	temp_presc = temp_presc*2;
 8000b92:	8afb      	ldrh	r3, [r7, #22]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	82fb      	strh	r3, [r7, #22]
      for(temp_presc_cnt = 0; temp_presc_cnt < temp_presc_set; temp_presc_cnt++)
 8000b98:	8abb      	ldrh	r3, [r7, #20]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	82bb      	strh	r3, [r7, #20]
 8000b9e:	8aba      	ldrh	r2, [r7, #20]
 8000ba0:	89fb      	ldrh	r3, [r7, #14]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d3f5      	bcc.n	8000b92 <main+0x6a>
      }
      printf("SPI CLK %d Mhz \r\n", (int)(PLL2_Clk_data.PLL2_P_Frequency / (2*temp_presc) / 1000000));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	8afa      	ldrh	r2, [r7, #22]
 8000baa:	0052      	lsls	r2, r2, #1
 8000bac:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bb0:	4a28      	ldr	r2, [pc, #160]	; (8000c54 <main+0x12c>)
 8000bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb6:	0c9b      	lsrs	r3, r3, #18
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4827      	ldr	r0, [pc, #156]	; (8000c58 <main+0x130>)
 8000bbc:	f012 fa30 	bl	8013020 <iprintf>
  printf("iperf Test TOE\r\n");
 8000bc0:	4826      	ldr	r0, [pc, #152]	; (8000c5c <main+0x134>)
 8000bc2:	f012 fa9b 	bl	80130fc <puts>
  //HAL_UART_Transmit(&huart3, "iperf Test TOE1\r\n", 17, 10);
  printf("GetSysClockFreq = %dhz\r\n", HAL_RCC_GetSysClockFreq());
 8000bc6:	f004 fe61 	bl	800588c <HAL_RCC_GetSysClockFreq>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4824      	ldr	r0, [pc, #144]	; (8000c60 <main+0x138>)
 8000bd0:	f012 fa26 	bl	8013020 <iprintf>
	wizchip_reset();
 8000bd4:	f7ff fd8a 	bl	80006ec <wizchip_reset>
	wizchip_initialize();
 8000bd8:	f7ff fe1c 	bl	8000814 <wizchip_initialize>
	wizchip_check();
 8000bdc:	f7ff fe4e 	bl	800087c <wizchip_check>
  
  network_initialize(g_net_info);
 8000be0:	4c20      	ldr	r4, [pc, #128]	; (8000c64 <main+0x13c>)
 8000be2:	4668      	mov	r0, sp
 8000be4:	f104 0310 	add.w	r3, r4, #16
 8000be8:	2257      	movs	r2, #87	; 0x57
 8000bea:	4619      	mov	r1, r3
 8000bec:	f012 fc3b 	bl	8013466 <memcpy>
 8000bf0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000bf4:	f7ff fe64 	bl	80008c0 <network_initialize>
  print_network_information(g_net_info);
 8000bf8:	4c1a      	ldr	r4, [pc, #104]	; (8000c64 <main+0x13c>)
 8000bfa:	4668      	mov	r0, sp
 8000bfc:	f104 0310 	add.w	r3, r4, #16
 8000c00:	2257      	movs	r2, #87	; 0x57
 8000c02:	4619      	mov	r1, r3
 8000c04:	f012 fc2f 	bl	8013466 <memcpy>
 8000c08:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c0c:	f7ff fe74 	bl	80008f8 <print_network_information>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c10:	f00b f814 	bl	800bc3c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c14:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <main+0x140>)
 8000c16:	2100      	movs	r1, #0
 8000c18:	4814      	ldr	r0, [pc, #80]	; (8000c6c <main+0x144>)
 8000c1a:	f00b f859 	bl	800bcd0 <osThreadNew>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4a13      	ldr	r2, [pc, #76]	; (8000c70 <main+0x148>)
 8000c22:	6013      	str	r3, [r2, #0]

  /* creation of CoreMark */
  CoreMarkHandle = osThreadNew(StartCoreMark, NULL, &CoreMark_attributes);
 8000c24:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <main+0x14c>)
 8000c26:	2100      	movs	r1, #0
 8000c28:	4813      	ldr	r0, [pc, #76]	; (8000c78 <main+0x150>)
 8000c2a:	f00b f851 	bl	800bcd0 <osThreadNew>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <main+0x154>)
 8000c32:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c34:	f00b f826 	bl	800bc84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <main+0x110>
 8000c3a:	bf00      	nop
 8000c3c:	24008510 	.word	0x24008510
 8000c40:	24000474 	.word	0x24000474
 8000c44:	08015264 	.word	0x08015264
 8000c48:	0801527c 	.word	0x0801527c
 8000c4c:	240002fc 	.word	0x240002fc
 8000c50:	0801529c 	.word	0x0801529c
 8000c54:	431bde83 	.word	0x431bde83
 8000c58:	080152a8 	.word	0x080152a8
 8000c5c:	080152bc 	.word	0x080152bc
 8000c60:	080152cc 	.word	0x080152cc
 8000c64:	24000000 	.word	0x24000000
 8000c68:	08015850 	.word	0x08015850
 8000c6c:	08001175 	.word	0x08001175
 8000c70:	24000508 	.word	0x24000508
 8000c74:	08015874 	.word	0x08015874
 8000c78:	08001255 	.word	0x08001255
 8000c7c:	2400050c 	.word	0x2400050c

08000c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b09c      	sub	sp, #112	; 0x70
 8000c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8a:	224c      	movs	r2, #76	; 0x4c
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f012 fb14 	bl	80132bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2220      	movs	r2, #32
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f012 fb0e 	bl	80132bc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	f004 f829 	bl	8004cf8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4b2c      	ldr	r3, [pc, #176]	; (8000d5c <SystemClock_Config+0xdc>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	4a2b      	ldr	r2, [pc, #172]	; (8000d5c <SystemClock_Config+0xdc>)
 8000cb0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cb4:	6193      	str	r3, [r2, #24]
 8000cb6:	4b29      	ldr	r3, [pc, #164]	; (8000d5c <SystemClock_Config+0xdc>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cc2:	bf00      	nop
 8000cc4:	4b25      	ldr	r3, [pc, #148]	; (8000d5c <SystemClock_Config+0xdc>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cd0:	d1f8      	bne.n	8000cc4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000cd2:	2310      	movs	r3, #16
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8000cda:	2310      	movs	r3, #16
 8000cdc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000cea:	f240 1313 	movw	r3, #275	; 0x113
 8000cee:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f004 f82d 	bl	8004d6c <HAL_RCC_OscConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d18:	f000 fabe 	bl	8001298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1c:	233f      	movs	r3, #63	; 0x3f
 8000d1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d20:	2303      	movs	r3, #3
 8000d22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d28:	2308      	movs	r3, #8
 8000d2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d2c:	2340      	movs	r3, #64	; 0x40
 8000d2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d30:	2340      	movs	r3, #64	; 0x40
 8000d32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d38:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d3a:	2340      	movs	r3, #64	; 0x40
 8000d3c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2103      	movs	r1, #3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f004 fbec 	bl	8005520 <HAL_RCC_ClockConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000d4e:	f000 faa3 	bl	8001298 <Error_Handler>
  }
}
 8000d52:	bf00      	nop
 8000d54:	3770      	adds	r7, #112	; 0x70
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	58024800 	.word	0x58024800

08000d60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d64:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <MX_SPI1_Init+0xa4>)
 8000d66:	4a28      	ldr	r2, [pc, #160]	; (8000e08 <MX_SPI1_Init+0xa8>)
 8000d68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d6a:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <MX_SPI1_Init+0xa4>)
 8000d6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d72:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <MX_SPI1_Init+0xa4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d78:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <MX_SPI1_Init+0xa4>)
 8000d7a:	2207      	movs	r2, #7
 8000d7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d7e:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <MX_SPI1_Init+0xa4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d84:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <MX_SPI1_Init+0xa4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <MX_SPI1_Init+0xa4>)
 8000d8c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d92:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_SPI1_Init+0xa4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <MX_SPI1_Init+0xa4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <MX_SPI1_Init+0xa4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da4:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <MX_SPI1_Init+0xa4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000daa:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <MX_SPI1_Init+0xa4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000db0:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <MX_SPI1_Init+0xa4>)
 8000db2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000db6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_SPI1_Init+0xa4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_SPI1_Init+0xa4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_SPI1_Init+0xa4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_SPI1_Init+0xa4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_SPI1_Init+0xa4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <MX_SPI1_Init+0xa4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_SPI1_Init+0xa4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <MX_SPI1_Init+0xa4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_SPI1_Init+0xa4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dee:	4805      	ldr	r0, [pc, #20]	; (8000e04 <MX_SPI1_Init+0xa4>)
 8000df0:	f006 fd26 	bl	8007840 <HAL_SPI_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000dfa:	f000 fa4d 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	240002fc 	.word	0x240002fc
 8000e08:	40013000 	.word	0x40013000

08000e0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e10:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <MX_USART3_UART_Init+0x90>)
 8000e12:	4a23      	ldr	r2, [pc, #140]	; (8000ea0 <MX_USART3_UART_Init+0x94>)
 8000e14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e16:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <MX_USART3_UART_Init+0x90>)
 8000e18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <MX_USART3_UART_Init+0x90>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e24:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <MX_USART3_UART_Init+0x90>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <MX_USART3_UART_Init+0x90>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MX_USART3_UART_Init+0x90>)
 8000e32:	220c      	movs	r2, #12
 8000e34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <MX_USART3_UART_Init+0x90>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <MX_USART3_UART_Init+0x90>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <MX_USART3_UART_Init+0x90>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_USART3_UART_Init+0x90>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <MX_USART3_UART_Init+0x90>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e54:	4811      	ldr	r0, [pc, #68]	; (8000e9c <MX_USART3_UART_Init+0x90>)
 8000e56:	f008 f977 	bl	8009148 <HAL_UART_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e60:	f000 fa1a 	bl	8001298 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e64:	2100      	movs	r1, #0
 8000e66:	480d      	ldr	r0, [pc, #52]	; (8000e9c <MX_USART3_UART_Init+0x90>)
 8000e68:	f00a fdd9 	bl	800ba1e <HAL_UARTEx_SetTxFifoThreshold>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e72:	f000 fa11 	bl	8001298 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e76:	2100      	movs	r1, #0
 8000e78:	4808      	ldr	r0, [pc, #32]	; (8000e9c <MX_USART3_UART_Init+0x90>)
 8000e7a:	f00a fe0e 	bl	800ba9a <HAL_UARTEx_SetRxFifoThreshold>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e84:	f000 fa08 	bl	8001298 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e88:	4804      	ldr	r0, [pc, #16]	; (8000e9c <MX_USART3_UART_Init+0x90>)
 8000e8a:	f00a fd8f 	bl	800b9ac <HAL_UARTEx_DisableFifoMode>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e94:	f000 fa00 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	24000474 	.word	0x24000474
 8000ea0:	40004800 	.word	0x40004800

08000ea4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_DMA_Init+0x4c>)
 8000eac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eb0:	4a0f      	ldr	r2, [pc, #60]	; (8000ef0 <MX_DMA_Init+0x4c>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <MX_DMA_Init+0x4c>)
 8000ebc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2105      	movs	r1, #5
 8000ecc:	200b      	movs	r0, #11
 8000ece:	f000 fed7 	bl	8001c80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ed2:	200b      	movs	r0, #11
 8000ed4:	f000 feee 	bl	8001cb4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2105      	movs	r1, #5
 8000edc:	200c      	movs	r0, #12
 8000ede:	f000 fecf 	bl	8001c80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ee2:	200c      	movs	r0, #12
 8000ee4:	f000 fee6 	bl	8001cb4 <HAL_NVIC_EnableIRQ>

}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	58024400 	.word	0x58024400

08000ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08c      	sub	sp, #48	; 0x30
 8000ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0a:	4b93      	ldr	r3, [pc, #588]	; (8001158 <MX_GPIO_Init+0x264>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f10:	4a91      	ldr	r2, [pc, #580]	; (8001158 <MX_GPIO_Init+0x264>)
 8000f12:	f043 0304 	orr.w	r3, r3, #4
 8000f16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1a:	4b8f      	ldr	r3, [pc, #572]	; (8001158 <MX_GPIO_Init+0x264>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
 8000f26:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f28:	4b8b      	ldr	r3, [pc, #556]	; (8001158 <MX_GPIO_Init+0x264>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2e:	4a8a      	ldr	r2, [pc, #552]	; (8001158 <MX_GPIO_Init+0x264>)
 8000f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f38:	4b87      	ldr	r3, [pc, #540]	; (8001158 <MX_GPIO_Init+0x264>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b84      	ldr	r3, [pc, #528]	; (8001158 <MX_GPIO_Init+0x264>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4c:	4a82      	ldr	r2, [pc, #520]	; (8001158 <MX_GPIO_Init+0x264>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f56:	4b80      	ldr	r3, [pc, #512]	; (8001158 <MX_GPIO_Init+0x264>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f64:	4b7c      	ldr	r3, [pc, #496]	; (8001158 <MX_GPIO_Init+0x264>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6a:	4a7b      	ldr	r2, [pc, #492]	; (8001158 <MX_GPIO_Init+0x264>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f74:	4b78      	ldr	r3, [pc, #480]	; (8001158 <MX_GPIO_Init+0x264>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f82:	4b75      	ldr	r3, [pc, #468]	; (8001158 <MX_GPIO_Init+0x264>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f88:	4a73      	ldr	r2, [pc, #460]	; (8001158 <MX_GPIO_Init+0x264>)
 8000f8a:	f043 0308 	orr.w	r3, r3, #8
 8000f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f92:	4b71      	ldr	r3, [pc, #452]	; (8001158 <MX_GPIO_Init+0x264>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f98:	f003 0308 	and.w	r3, r3, #8
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fa0:	4b6d      	ldr	r3, [pc, #436]	; (8001158 <MX_GPIO_Init+0x264>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa6:	4a6c      	ldr	r2, [pc, #432]	; (8001158 <MX_GPIO_Init+0x264>)
 8000fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb0:	4b69      	ldr	r3, [pc, #420]	; (8001158 <MX_GPIO_Init+0x264>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fbe:	4b66      	ldr	r3, [pc, #408]	; (8001158 <MX_GPIO_Init+0x264>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	4a64      	ldr	r2, [pc, #400]	; (8001158 <MX_GPIO_Init+0x264>)
 8000fc6:	f043 0310 	orr.w	r3, r3, #16
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fce:	4b62      	ldr	r3, [pc, #392]	; (8001158 <MX_GPIO_Init+0x264>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	f003 0310 	and.w	r3, r3, #16
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f244 0101 	movw	r1, #16385	; 0x4001
 8000fe2:	485e      	ldr	r0, [pc, #376]	; (800115c <MX_GPIO_Init+0x268>)
 8000fe4:	f003 fe6e 	bl	8004cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|W6100_CS_Pin|Trace_Pin, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8000fee:	485c      	ldr	r0, [pc, #368]	; (8001160 <MX_GPIO_Init+0x26c>)
 8000ff0:	f003 fe68 	bl	8004cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	485a      	ldr	r0, [pc, #360]	; (8001164 <MX_GPIO_Init+0x270>)
 8000ffa:	f003 fe63 	bl	8004cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	4855      	ldr	r0, [pc, #340]	; (8001168 <MX_GPIO_Init+0x274>)
 8001014:	f003 fcae 	bl	8004974 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001018:	2332      	movs	r3, #50	; 0x32
 800101a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001028:	230b      	movs	r3, #11
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	484d      	ldr	r0, [pc, #308]	; (8001168 <MX_GPIO_Init+0x274>)
 8001034:	f003 fc9e 	bl	8004974 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001038:	2386      	movs	r3, #134	; 0x86
 800103a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001048:	230b      	movs	r3, #11
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	4619      	mov	r1, r3
 8001052:	4846      	ldr	r0, [pc, #280]	; (800116c <MX_GPIO_Init+0x278>)
 8001054:	f003 fc8e 	bl	8004974 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001058:	f244 0301 	movw	r3, #16385	; 0x4001
 800105c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105e:	2301      	movs	r3, #1
 8001060:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	483a      	ldr	r0, [pc, #232]	; (800115c <MX_GPIO_Init+0x268>)
 8001072:	f003 fc7f 	bl	8004974 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001076:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001088:	230b      	movs	r3, #11
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	4832      	ldr	r0, [pc, #200]	; (800115c <MX_GPIO_Init+0x268>)
 8001094:	f003 fc6e 	bl	8004974 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4619      	mov	r1, r3
 80010b0:	482b      	ldr	r0, [pc, #172]	; (8001160 <MX_GPIO_Init+0x26c>)
 80010b2:	f003 fc5f 	bl	8004974 <HAL_GPIO_Init>

  /*Configure GPIO pins : W6100_CS_Pin Trace_Pin */
  GPIO_InitStruct.Pin = W6100_CS_Pin|Trace_Pin;
 80010b6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	4619      	mov	r1, r3
 80010ce:	4824      	ldr	r0, [pc, #144]	; (8001160 <MX_GPIO_Init+0x26c>)
 80010d0:	f003 fc50 	bl	8004974 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	4619      	mov	r1, r3
 80010e8:	4821      	ldr	r0, [pc, #132]	; (8001170 <MX_GPIO_Init+0x27c>)
 80010ea:	f003 fc43 	bl	8004974 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80010ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001100:	230a      	movs	r3, #10
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	4818      	ldr	r0, [pc, #96]	; (800116c <MX_GPIO_Init+0x278>)
 800110c:	f003 fc32 	bl	8004974 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001110:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001122:	230b      	movs	r3, #11
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	4810      	ldr	r0, [pc, #64]	; (8001170 <MX_GPIO_Init+0x27c>)
 800112e:	f003 fc21 	bl	8004974 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001132:	2302      	movs	r3, #2
 8001134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2301      	movs	r3, #1
 8001138:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	4619      	mov	r1, r3
 8001148:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_GPIO_Init+0x270>)
 800114a:	f003 fc13 	bl	8004974 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800114e:	bf00      	nop
 8001150:	3730      	adds	r7, #48	; 0x30
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	58024400 	.word	0x58024400
 800115c:	58020400 	.word	0x58020400
 8001160:	58020c00 	.word	0x58020c00
 8001164:	58021000 	.word	0x58021000
 8001168:	58020800 	.word	0x58020800
 800116c:	58020000 	.word	0x58020000
 8001170:	58021800 	.word	0x58021800

08001174 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t pack_len = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    switch(getSn_SR(SOCKET_TOE_IPERF))
 8001180:	f243 0008 	movw	r0, #12296	; 0x3008
 8001184:	f00f fc26 	bl	80109d4 <WIZCHIP_READ>
 8001188:	4603      	mov	r3, r0
 800118a:	2b1c      	cmp	r3, #28
 800118c:	d85d      	bhi.n	800124a <StartDefaultTask+0xd6>
 800118e:	a201      	add	r2, pc, #4	; (adr r2, 8001194 <StartDefaultTask+0x20>)
 8001190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001194:	0800123b 	.word	0x0800123b
 8001198:	0800124b 	.word	0x0800124b
 800119c:	0800124b 	.word	0x0800124b
 80011a0:	0800124b 	.word	0x0800124b
 80011a4:	0800124b 	.word	0x0800124b
 80011a8:	0800124b 	.word	0x0800124b
 80011ac:	0800124b 	.word	0x0800124b
 80011b0:	0800124b 	.word	0x0800124b
 80011b4:	0800124b 	.word	0x0800124b
 80011b8:	0800124b 	.word	0x0800124b
 80011bc:	0800124b 	.word	0x0800124b
 80011c0:	0800124b 	.word	0x0800124b
 80011c4:	0800124b 	.word	0x0800124b
 80011c8:	0800124b 	.word	0x0800124b
 80011cc:	0800124b 	.word	0x0800124b
 80011d0:	0800124b 	.word	0x0800124b
 80011d4:	0800124b 	.word	0x0800124b
 80011d8:	0800124b 	.word	0x0800124b
 80011dc:	0800124b 	.word	0x0800124b
 80011e0:	08001233 	.word	0x08001233
 80011e4:	0800124b 	.word	0x0800124b
 80011e8:	0800124b 	.word	0x0800124b
 80011ec:	0800124b 	.word	0x0800124b
 80011f0:	08001209 	.word	0x08001209
 80011f4:	0800124b 	.word	0x0800124b
 80011f8:	0800124b 	.word	0x0800124b
 80011fc:	0800124b 	.word	0x0800124b
 8001200:	0800124b 	.word	0x0800124b
 8001204:	0800122b 	.word	0x0800122b
    {
      case SOCK_ESTABLISHED :
        while(1)
        {
          getsockopt(SOCKET_TOE_IPERF, SO_RECVBUF, &pack_len);
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	461a      	mov	r2, r3
 800120e:	2109      	movs	r1, #9
 8001210:	2000      	movs	r0, #0
 8001212:	f010 f89f 	bl	8011354 <getsockopt>
          if (pack_len > 0)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f5      	beq.n	8001208 <StartDefaultTask+0x94>
            recv_iperf(SOCKET_TOE_IPERF, (uint8_t *)g_iperf_buf, ETHERNET_BUF_MAX_SIZE / 2);
 800121c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001220:	490b      	ldr	r1, [pc, #44]	; (8001250 <StartDefaultTask+0xdc>)
 8001222:	2000      	movs	r0, #0
 8001224:	f010 f86a 	bl	80112fc <recv_iperf>
          getsockopt(SOCKET_TOE_IPERF, SO_RECVBUF, &pack_len);
 8001228:	e7ee      	b.n	8001208 <StartDefaultTask+0x94>
          
        }
      case SOCK_CLOSE_WAIT :
        disconnect(SOCKET_TOE_IPERF);
 800122a:	2000      	movs	r0, #0
 800122c:	f00f fff4 	bl	8011218 <disconnect>
        break;
 8001230:	e00c      	b.n	800124c <StartDefaultTask+0xd8>
      case SOCK_INIT :
        listen(SOCKET_TOE_IPERF);
 8001232:	2000      	movs	r0, #0
 8001234:	f00f ffa6 	bl	8011184 <listen>
        break;
 8001238:	e008      	b.n	800124c <StartDefaultTask+0xd8>
      case SOCK_CLOSED:
        socket(SOCKET_TOE_IPERF, Sn_MR_TCP4, PORT_TOE_IPERF, SOCK_IO_NONBLOCK);
 800123a:	2301      	movs	r3, #1
 800123c:	f241 3289 	movw	r2, #5001	; 0x1389
 8001240:	2101      	movs	r1, #1
 8001242:	2000      	movs	r0, #0
 8001244:	f00f fd32 	bl	8010cac <socket>
        break;
 8001248:	e000      	b.n	800124c <StartDefaultTask+0xd8>
      default:
        break;
 800124a:	bf00      	nop
    switch(getSn_SR(SOCKET_TOE_IPERF))
 800124c:	e798      	b.n	8001180 <StartDefaultTask+0xc>
 800124e:	bf00      	nop
 8001250:	24000510 	.word	0x24000510

08001254 <StartCoreMark>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCoreMark */
void StartCoreMark(void *argument)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCoreMark */
	printf("Start Core Mark Task\r\n");
 800125c:	4804      	ldr	r0, [pc, #16]	; (8001270 <StartCoreMark+0x1c>)
 800125e:	f011 ff4d 	bl	80130fc <puts>
  MX_CoreMarkApp_Init();
 8001262:	f000 fbd7 	bl	8001a14 <MX_CoreMarkApp_Init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8001266:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800126a:	f00a fdc3 	bl	800bdf4 <osDelay>
 800126e:	e7fa      	b.n	8001266 <StartCoreMark+0x12>
 8001270:	080152e8 	.word	0x080152e8

08001274 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a04      	ldr	r2, [pc, #16]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d101      	bne.n	800128a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001286:	f000 fc23 	bl	8001ad0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40001000 	.word	0x40001000

08001298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800129c:	b672      	cpsid	i
}
 800129e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <Error_Handler+0x8>
	...

080012a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <HAL_MspInit+0x38>)
 80012ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012b0:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <HAL_MspInit+0x38>)
 80012b2:	f043 0302 	orr.w	r3, r3, #2
 80012b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <HAL_MspInit+0x38>)
 80012bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	210f      	movs	r1, #15
 80012cc:	f06f 0001 	mvn.w	r0, #1
 80012d0:	f000 fcd6 	bl	8001c80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	58024400 	.word	0x58024400

080012e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0ba      	sub	sp, #232	; 0xe8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f8:	f107 0318 	add.w	r3, r7, #24
 80012fc:	22b8      	movs	r2, #184	; 0xb8
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f011 ffdb 	bl	80132bc <memset>
  if(hspi->Instance==SPI1)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a73      	ldr	r2, [pc, #460]	; (80014d8 <HAL_SPI_MspInit+0x1f8>)
 800130c:	4293      	cmp	r3, r2
 800130e:	f040 80de 	bne.w	80014ce <HAL_SPI_MspInit+0x1ee>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001312:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001316:	f04f 0300 	mov.w	r3, #0
 800131a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 800131e:	2302      	movs	r3, #2
 8001320:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 120;
 8001322:	2378      	movs	r3, #120	; 0x78
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001326:	2302      	movs	r3, #2
 8001328:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800132a:	2302      	movs	r3, #2
 800132c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800132e:	2302      	movs	r3, #2
 8001330:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001332:	2340      	movs	r3, #64	; 0x40
 8001334:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001336:	2300      	movs	r3, #0
 8001338:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800133e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001342:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001344:	f107 0318 	add.w	r3, r7, #24
 8001348:	4618      	mov	r0, r3
 800134a:	f004 fcb7 	bl	8005cbc <HAL_RCCEx_PeriphCLKConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 8001354:	f7ff ffa0 	bl	8001298 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001358:	4b60      	ldr	r3, [pc, #384]	; (80014dc <HAL_SPI_MspInit+0x1fc>)
 800135a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800135e:	4a5f      	ldr	r2, [pc, #380]	; (80014dc <HAL_SPI_MspInit+0x1fc>)
 8001360:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001364:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001368:	4b5c      	ldr	r3, [pc, #368]	; (80014dc <HAL_SPI_MspInit+0x1fc>)
 800136a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800136e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	4b59      	ldr	r3, [pc, #356]	; (80014dc <HAL_SPI_MspInit+0x1fc>)
 8001378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137c:	4a57      	ldr	r2, [pc, #348]	; (80014dc <HAL_SPI_MspInit+0x1fc>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001386:	4b55      	ldr	r3, [pc, #340]	; (80014dc <HAL_SPI_MspInit+0x1fc>)
 8001388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001394:	4b51      	ldr	r3, [pc, #324]	; (80014dc <HAL_SPI_MspInit+0x1fc>)
 8001396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139a:	4a50      	ldr	r2, [pc, #320]	; (80014dc <HAL_SPI_MspInit+0x1fc>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013a4:	4b4d      	ldr	r3, [pc, #308]	; (80014dc <HAL_SPI_MspInit+0x1fc>)
 80013a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80013b2:	2360      	movs	r3, #96	; 0x60
 80013b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ca:	2305      	movs	r3, #5
 80013cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013d4:	4619      	mov	r1, r3
 80013d6:	4842      	ldr	r0, [pc, #264]	; (80014e0 <HAL_SPI_MspInit+0x200>)
 80013d8:	f003 facc 	bl	8004974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013dc:	2320      	movs	r3, #32
 80013de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013f4:	2305      	movs	r3, #5
 80013f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013fe:	4619      	mov	r1, r3
 8001400:	4838      	ldr	r0, [pc, #224]	; (80014e4 <HAL_SPI_MspInit+0x204>)
 8001402:	f003 fab7 	bl	8004974 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001406:	4b38      	ldr	r3, [pc, #224]	; (80014e8 <HAL_SPI_MspInit+0x208>)
 8001408:	4a38      	ldr	r2, [pc, #224]	; (80014ec <HAL_SPI_MspInit+0x20c>)
 800140a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800140c:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <HAL_SPI_MspInit+0x208>)
 800140e:	2225      	movs	r2, #37	; 0x25
 8001410:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001412:	4b35      	ldr	r3, [pc, #212]	; (80014e8 <HAL_SPI_MspInit+0x208>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001418:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <HAL_SPI_MspInit+0x208>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800141e:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <HAL_SPI_MspInit+0x208>)
 8001420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001424:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001426:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <HAL_SPI_MspInit+0x208>)
 8001428:	2200      	movs	r2, #0
 800142a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800142c:	4b2e      	ldr	r3, [pc, #184]	; (80014e8 <HAL_SPI_MspInit+0x208>)
 800142e:	2200      	movs	r2, #0
 8001430:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001432:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <HAL_SPI_MspInit+0x208>)
 8001434:	2200      	movs	r2, #0
 8001436:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001438:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <HAL_SPI_MspInit+0x208>)
 800143a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800143e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001440:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <HAL_SPI_MspInit+0x208>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001446:	4828      	ldr	r0, [pc, #160]	; (80014e8 <HAL_SPI_MspInit+0x208>)
 8001448:	f000 fc42 	bl	8001cd0 <HAL_DMA_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_SPI_MspInit+0x176>
    {
      Error_Handler();
 8001452:	f7ff ff21 	bl	8001298 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a23      	ldr	r2, [pc, #140]	; (80014e8 <HAL_SPI_MspInit+0x208>)
 800145a:	67da      	str	r2, [r3, #124]	; 0x7c
 800145c:	4a22      	ldr	r2, [pc, #136]	; (80014e8 <HAL_SPI_MspInit+0x208>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8001462:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <HAL_SPI_MspInit+0x210>)
 8001464:	4a23      	ldr	r2, [pc, #140]	; (80014f4 <HAL_SPI_MspInit+0x214>)
 8001466:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001468:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <HAL_SPI_MspInit+0x210>)
 800146a:	2226      	movs	r2, #38	; 0x26
 800146c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <HAL_SPI_MspInit+0x210>)
 8001470:	2240      	movs	r2, #64	; 0x40
 8001472:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001474:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <HAL_SPI_MspInit+0x210>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <HAL_SPI_MspInit+0x210>)
 800147c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001480:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001482:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <HAL_SPI_MspInit+0x210>)
 8001484:	2200      	movs	r2, #0
 8001486:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <HAL_SPI_MspInit+0x210>)
 800148a:	2200      	movs	r2, #0
 800148c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800148e:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <HAL_SPI_MspInit+0x210>)
 8001490:	2200      	movs	r2, #0
 8001492:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001494:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <HAL_SPI_MspInit+0x210>)
 8001496:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800149a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <HAL_SPI_MspInit+0x210>)
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80014a2:	4813      	ldr	r0, [pc, #76]	; (80014f0 <HAL_SPI_MspInit+0x210>)
 80014a4:	f000 fc14 	bl	8001cd0 <HAL_DMA_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_SPI_MspInit+0x1d2>
    {
      Error_Handler();
 80014ae:	f7ff fef3 	bl	8001298 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <HAL_SPI_MspInit+0x210>)
 80014b6:	679a      	str	r2, [r3, #120]	; 0x78
 80014b8:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <HAL_SPI_MspInit+0x210>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2105      	movs	r1, #5
 80014c2:	2023      	movs	r0, #35	; 0x23
 80014c4:	f000 fbdc 	bl	8001c80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80014c8:	2023      	movs	r0, #35	; 0x23
 80014ca:	f000 fbf3 	bl	8001cb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014ce:	bf00      	nop
 80014d0:	37e8      	adds	r7, #232	; 0xe8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40013000 	.word	0x40013000
 80014dc:	58024400 	.word	0x58024400
 80014e0:	58020000 	.word	0x58020000
 80014e4:	58020400 	.word	0x58020400
 80014e8:	24000384 	.word	0x24000384
 80014ec:	40020010 	.word	0x40020010
 80014f0:	240003fc 	.word	0x240003fc
 80014f4:	40020028 	.word	0x40020028

080014f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b0b8      	sub	sp, #224	; 0xe0
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	22b8      	movs	r2, #184	; 0xb8
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f011 fecf 	bl	80132bc <memset>
  if(huart->Instance==USART3)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a2b      	ldr	r2, [pc, #172]	; (80015d0 <HAL_UART_MspInit+0xd8>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d14e      	bne.n	80015c6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001528:	f04f 0202 	mov.w	r2, #2
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001534:	2300      	movs	r3, #0
 8001536:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800153a:	f107 0310 	add.w	r3, r7, #16
 800153e:	4618      	mov	r0, r3
 8001540:	f004 fbbc 	bl	8005cbc <HAL_RCCEx_PeriphCLKConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800154a:	f7ff fea5 	bl	8001298 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <HAL_UART_MspInit+0xdc>)
 8001550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001554:	4a1f      	ldr	r2, [pc, #124]	; (80015d4 <HAL_UART_MspInit+0xdc>)
 8001556:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800155a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <HAL_UART_MspInit+0xdc>)
 8001560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <HAL_UART_MspInit+0xdc>)
 800156e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001572:	4a18      	ldr	r2, [pc, #96]	; (80015d4 <HAL_UART_MspInit+0xdc>)
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_UART_MspInit+0xdc>)
 800157e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800158a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800158e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015a4:	2307      	movs	r3, #7
 80015a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015ae:	4619      	mov	r1, r3
 80015b0:	4809      	ldr	r0, [pc, #36]	; (80015d8 <HAL_UART_MspInit+0xe0>)
 80015b2:	f003 f9df 	bl	8004974 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2105      	movs	r1, #5
 80015ba:	2027      	movs	r0, #39	; 0x27
 80015bc:	f000 fb60 	bl	8001c80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015c0:	2027      	movs	r0, #39	; 0x27
 80015c2:	f000 fb77 	bl	8001cb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015c6:	bf00      	nop
 80015c8:	37e0      	adds	r7, #224	; 0xe0
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40004800 	.word	0x40004800
 80015d4:	58024400 	.word	0x58024400
 80015d8:	58020c00 	.word	0x58020c00

080015dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b090      	sub	sp, #64	; 0x40
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b0f      	cmp	r3, #15
 80015e8:	d827      	bhi.n	800163a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80015ea:	2200      	movs	r2, #0
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	2036      	movs	r0, #54	; 0x36
 80015f0:	f000 fb46 	bl	8001c80 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015f4:	2036      	movs	r0, #54	; 0x36
 80015f6:	f000 fb5d 	bl	8001cb4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80015fa:	4a29      	ldr	r2, [pc, #164]	; (80016a0 <HAL_InitTick+0xc4>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001600:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <HAL_InitTick+0xc8>)
 8001602:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001606:	4a27      	ldr	r2, [pc, #156]	; (80016a4 <HAL_InitTick+0xc8>)
 8001608:	f043 0310 	orr.w	r3, r3, #16
 800160c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001610:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <HAL_InitTick+0xc8>)
 8001612:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800161e:	f107 0210 	add.w	r2, r7, #16
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f004 fb05 	bl	8005c38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800162e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001630:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001634:	2b00      	cmp	r3, #0
 8001636:	d106      	bne.n	8001646 <HAL_InitTick+0x6a>
 8001638:	e001      	b.n	800163e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e02b      	b.n	8001696 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800163e:	f004 facf 	bl	8005be0 <HAL_RCC_GetPCLK1Freq>
 8001642:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001644:	e004      	b.n	8001650 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001646:	f004 facb 	bl	8005be0 <HAL_RCC_GetPCLK1Freq>
 800164a:	4603      	mov	r3, r0
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001652:	4a15      	ldr	r2, [pc, #84]	; (80016a8 <HAL_InitTick+0xcc>)
 8001654:	fba2 2303 	umull	r2, r3, r2, r3
 8001658:	0c9b      	lsrs	r3, r3, #18
 800165a:	3b01      	subs	r3, #1
 800165c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <HAL_InitTick+0xd0>)
 8001660:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <HAL_InitTick+0xd4>)
 8001662:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_InitTick+0xd0>)
 8001666:	f240 32e7 	movw	r2, #999	; 0x3e7
 800166a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800166c:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <HAL_InitTick+0xd0>)
 800166e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001670:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <HAL_InitTick+0xd0>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_InitTick+0xd0>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800167e:	480b      	ldr	r0, [pc, #44]	; (80016ac <HAL_InitTick+0xd0>)
 8001680:	f007 fa6f 	bl	8008b62 <HAL_TIM_Base_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d104      	bne.n	8001694 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800168a:	4808      	ldr	r0, [pc, #32]	; (80016ac <HAL_InitTick+0xd0>)
 800168c:	f007 faca 	bl	8008c24 <HAL_TIM_Base_Start_IT>
 8001690:	4603      	mov	r3, r0
 8001692:	e000      	b.n	8001696 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
}
 8001696:	4618      	mov	r0, r3
 8001698:	3740      	adds	r7, #64	; 0x40
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	24000070 	.word	0x24000070
 80016a4:	58024400 	.word	0x58024400
 80016a8:	431bde83 	.word	0x431bde83
 80016ac:	24008514 	.word	0x24008514
 80016b0:	40001000 	.word	0x40001000

080016b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <NMI_Handler+0x4>

080016ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <HardFault_Handler+0x4>

080016c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <MemManage_Handler+0x4>

080016c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ca:	e7fe      	b.n	80016ca <BusFault_Handler+0x4>

080016cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <UsageFault_Handler+0x4>

080016d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <DMA1_Stream0_IRQHandler+0x10>)
 80016e6:	f001 fe19 	bl	800331c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	24000384 	.word	0x24000384

080016f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <DMA1_Stream1_IRQHandler+0x10>)
 80016fa:	f001 fe0f 	bl	800331c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	240003fc 	.word	0x240003fc

08001708 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <SPI1_IRQHandler+0x10>)
 800170e:	f006 fe7d 	bl	800840c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	240002fc 	.word	0x240002fc

0800171c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <USART3_IRQHandler+0x10>)
 8001722:	f007 fe3b 	bl	800939c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	24000474 	.word	0x24000474

08001730 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <TIM6_DAC_IRQHandler+0x10>)
 8001736:	f007 fafb 	bl	8008d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	24008514 	.word	0x24008514

08001744 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
	return 1;
 8001748:	2301      	movs	r3, #1
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <_kill>:

int _kill(int pid, int sig)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800175e:	f011 fe55 	bl	801340c <__errno>
 8001762:	4603      	mov	r3, r0
 8001764:	2216      	movs	r2, #22
 8001766:	601a      	str	r2, [r3, #0]
	return -1;
 8001768:	f04f 33ff 	mov.w	r3, #4294967295
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <_exit>:

void _exit (int status)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800177c:	f04f 31ff 	mov.w	r1, #4294967295
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ffe7 	bl	8001754 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001786:	e7fe      	b.n	8001786 <_exit+0x12>

08001788 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	e00a      	b.n	80017b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800179a:	f3af 8000 	nop.w
 800179e:	4601      	mov	r1, r0
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	60ba      	str	r2, [r7, #8]
 80017a6:	b2ca      	uxtb	r2, r1
 80017a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3301      	adds	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	dbf0      	blt.n	800179a <_read+0x12>
	}

return len;
 80017b8:	687b      	ldr	r3, [r7, #4]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b086      	sub	sp, #24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	e009      	b.n	80017e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	60ba      	str	r2, [r7, #8]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 f929 	bl	8001a34 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	3301      	adds	r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	dbf1      	blt.n	80017d4 <_write+0x12>
	}
	return len;
 80017f0:	687b      	ldr	r3, [r7, #4]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <_close>:

int _close(int file)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
	return -1;
 8001802:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001822:	605a      	str	r2, [r3, #4]
	return 0;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <_isatty>:

int _isatty(int file)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
	return 1;
 800183a:	2301      	movs	r3, #1
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
	return 0;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800186c:	4a14      	ldr	r2, [pc, #80]	; (80018c0 <_sbrk+0x5c>)
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <_sbrk+0x60>)
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d102      	bne.n	8001886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <_sbrk+0x64>)
 8001882:	4a12      	ldr	r2, [pc, #72]	; (80018cc <_sbrk+0x68>)
 8001884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	429a      	cmp	r2, r3
 8001892:	d207      	bcs.n	80018a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001894:	f011 fdba 	bl	801340c <__errno>
 8001898:	4603      	mov	r3, r0
 800189a:	220c      	movs	r2, #12
 800189c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	e009      	b.n	80018b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <_sbrk+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <_sbrk+0x64>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <_sbrk+0x64>)
 80018b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	24050000 	.word	0x24050000
 80018c4:	00004000 	.word	0x00004000
 80018c8:	24008560 	.word	0x24008560
 80018cc:	24010ce8 	.word	0x24010ce8

080018d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018d4:	4b32      	ldr	r3, [pc, #200]	; (80019a0 <SystemInit+0xd0>)
 80018d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018da:	4a31      	ldr	r2, [pc, #196]	; (80019a0 <SystemInit+0xd0>)
 80018dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <SystemInit+0xd4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 030f 	and.w	r3, r3, #15
 80018ec:	2b06      	cmp	r3, #6
 80018ee:	d807      	bhi.n	8001900 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018f0:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <SystemInit+0xd4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f023 030f 	bic.w	r3, r3, #15
 80018f8:	4a2a      	ldr	r2, [pc, #168]	; (80019a4 <SystemInit+0xd4>)
 80018fa:	f043 0307 	orr.w	r3, r3, #7
 80018fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001900:	4b29      	ldr	r3, [pc, #164]	; (80019a8 <SystemInit+0xd8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a28      	ldr	r2, [pc, #160]	; (80019a8 <SystemInit+0xd8>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800190c:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <SystemInit+0xd8>)
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001912:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <SystemInit+0xd8>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4924      	ldr	r1, [pc, #144]	; (80019a8 <SystemInit+0xd8>)
 8001918:	4b24      	ldr	r3, [pc, #144]	; (80019ac <SystemInit+0xdc>)
 800191a:	4013      	ands	r3, r2
 800191c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800191e:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <SystemInit+0xd4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d007      	beq.n	800193a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800192a:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <SystemInit+0xd4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 030f 	bic.w	r3, r3, #15
 8001932:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <SystemInit+0xd4>)
 8001934:	f043 0307 	orr.w	r3, r3, #7
 8001938:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <SystemInit+0xd8>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <SystemInit+0xd8>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001946:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <SystemInit+0xd8>)
 8001948:	2200      	movs	r2, #0
 800194a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800194c:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <SystemInit+0xd8>)
 800194e:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <SystemInit+0xe0>)
 8001950:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <SystemInit+0xd8>)
 8001954:	4a17      	ldr	r2, [pc, #92]	; (80019b4 <SystemInit+0xe4>)
 8001956:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <SystemInit+0xd8>)
 800195a:	4a17      	ldr	r2, [pc, #92]	; (80019b8 <SystemInit+0xe8>)
 800195c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <SystemInit+0xd8>)
 8001960:	2200      	movs	r2, #0
 8001962:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <SystemInit+0xd8>)
 8001966:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <SystemInit+0xe8>)
 8001968:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800196a:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <SystemInit+0xd8>)
 800196c:	2200      	movs	r2, #0
 800196e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <SystemInit+0xd8>)
 8001972:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <SystemInit+0xe8>)
 8001974:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <SystemInit+0xd8>)
 8001978:	2200      	movs	r2, #0
 800197a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <SystemInit+0xd8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a09      	ldr	r2, [pc, #36]	; (80019a8 <SystemInit+0xd8>)
 8001982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001986:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <SystemInit+0xd8>)
 800198a:	2200      	movs	r2, #0
 800198c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <SystemInit+0xec>)
 8001990:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001994:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00
 80019a4:	52002000 	.word	0x52002000
 80019a8:	58024400 	.word	0x58024400
 80019ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80019b0:	02020200 	.word	0x02020200
 80019b4:	01ff0000 	.word	0x01ff0000
 80019b8:	01010280 	.word	0x01010280
 80019bc:	52004000 	.word	0x52004000

080019c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019c4:	f7ff ff84 	bl	80018d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c8:	480c      	ldr	r0, [pc, #48]	; (80019fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ca:	490d      	ldr	r1, [pc, #52]	; (8001a00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019cc:	4a0d      	ldr	r2, [pc, #52]	; (8001a04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d0:	e002      	b.n	80019d8 <LoopCopyDataInit>

080019d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d6:	3304      	adds	r3, #4

080019d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019dc:	d3f9      	bcc.n	80019d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019e0:	4c0a      	ldr	r4, [pc, #40]	; (8001a0c <LoopFillZerobss+0x22>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e4:	e001      	b.n	80019ea <LoopFillZerobss>

080019e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e8:	3204      	adds	r2, #4

080019ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ec:	d3fb      	bcc.n	80019e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ee:	f011 fd13 	bl	8013418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019f2:	f7ff f899 	bl	8000b28 <main>
  bx  lr
 80019f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019f8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80019fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a00:	240002e0 	.word	0x240002e0
  ldr r2, =_sidata
 8001a04:	08015c5c 	.word	0x08015c5c
  ldr r2, =_sbss
 8001a08:	240002e0 	.word	0x240002e0
  ldr r4, =_ebss
 8001a0c:	24010ce4 	.word	0x24010ce4

08001a10 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a10:	e7fe      	b.n	8001a10 <ADC3_IRQHandler>
	...

08001a14 <MX_CoreMarkApp_Init>:
#include "main.h"
#include <stdio.h>
#include "app_coremarkapp.h"

void MX_CoreMarkApp_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  printf("CoreMark Test Begins!\r\n");
 8001a18:	4804      	ldr	r0, [pc, #16]	; (8001a2c <MX_CoreMarkApp_Init+0x18>)
 8001a1a:	f011 fb6f 	bl	80130fc <puts>
  coremark_main();
 8001a1e:	f00d fabf 	bl	800efa0 <coremark_main>
  printf("CoreMark Test Finishes!\r\n");
 8001a22:	4803      	ldr	r0, [pc, #12]	; (8001a30 <MX_CoreMarkApp_Init+0x1c>)
 8001a24:	f011 fb6a 	bl	80130fc <puts>
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	08015300 	.word	0x08015300
 8001a30:	08015318 	.word	0x08015318

08001a34 <__io_putchar>:
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#elif defined(__ICCARM__)
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&PRINTF_UART_PORT, (uint8_t *)&ch, 1, 0xFFFF);
 8001a3c:	1d39      	adds	r1, r7, #4
 8001a3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a42:	2201      	movs	r2, #1
 8001a44:	4803      	ldr	r0, [pc, #12]	; (8001a54 <__io_putchar+0x20>)
 8001a46:	f007 fbcf 	bl	80091e8 <HAL_UART_Transmit>
  return ch;
 8001a4a:	687b      	ldr	r3, [r7, #4]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	24000474 	.word	0x24000474

08001a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a5e:	2003      	movs	r0, #3
 8001a60:	f000 f903 	bl	8001c6a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a64:	f003 ff12 	bl	800588c <HAL_RCC_GetSysClockFreq>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_Init+0x68>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	0a1b      	lsrs	r3, r3, #8
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	4913      	ldr	r1, [pc, #76]	; (8001ac4 <HAL_Init+0x6c>)
 8001a76:	5ccb      	ldrb	r3, [r1, r3]
 8001a78:	f003 031f 	and.w	r3, r3, #31
 8001a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a80:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <HAL_Init+0x68>)
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ac4 <HAL_Init+0x6c>)
 8001a8c:	5cd3      	ldrb	r3, [r2, r3]
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	fa22 f303 	lsr.w	r3, r2, r3
 8001a98:	4a0b      	ldr	r2, [pc, #44]	; (8001ac8 <HAL_Init+0x70>)
 8001a9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a9c:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <HAL_Init+0x74>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aa2:	200f      	movs	r0, #15
 8001aa4:	f7ff fd9a 	bl	80015dc <HAL_InitTick>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e002      	b.n	8001ab8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab2:	f7ff fbf7 	bl	80012a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	58024400 	.word	0x58024400
 8001ac4:	08015898 	.word	0x08015898
 8001ac8:	2400006c 	.word	0x2400006c
 8001acc:	24000068 	.word	0x24000068

08001ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_IncTick+0x20>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_IncTick+0x24>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4413      	add	r3, r2
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <HAL_IncTick+0x24>)
 8001ae2:	6013      	str	r3, [r2, #0]
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	24000074 	.word	0x24000074
 8001af4:	24008564 	.word	0x24008564

08001af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return uwTick;
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <HAL_GetTick+0x14>)
 8001afe:	681b      	ldr	r3, [r3, #0]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	24008564 	.word	0x24008564

08001b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <__NVIC_SetPriorityGrouping+0x40>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3e:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <__NVIC_SetPriorityGrouping+0x40>)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	60d3      	str	r3, [r2, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00
 8001b54:	05fa0000 	.word	0x05fa0000

08001b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <__NVIC_GetPriorityGrouping+0x18>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0307 	and.w	r3, r3, #7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	db0b      	blt.n	8001b9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	f003 021f 	and.w	r2, r3, #31
 8001b8c:	4907      	ldr	r1, [pc, #28]	; (8001bac <__NVIC_EnableIRQ+0x38>)
 8001b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	2001      	movs	r0, #1
 8001b96:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000e100 	.word	0xe000e100

08001bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	db0a      	blt.n	8001bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	490c      	ldr	r1, [pc, #48]	; (8001bfc <__NVIC_SetPriority+0x4c>)
 8001bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd8:	e00a      	b.n	8001bf0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4908      	ldr	r1, [pc, #32]	; (8001c00 <__NVIC_SetPriority+0x50>)
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	3b04      	subs	r3, #4
 8001be8:	0112      	lsls	r2, r2, #4
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	440b      	add	r3, r1
 8001bee:	761a      	strb	r2, [r3, #24]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000e100 	.word	0xe000e100
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	; 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f1c3 0307 	rsb	r3, r3, #7
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	bf28      	it	cs
 8001c22:	2304      	movcs	r3, #4
 8001c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d902      	bls.n	8001c34 <NVIC_EncodePriority+0x30>
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3b03      	subs	r3, #3
 8001c32:	e000      	b.n	8001c36 <NVIC_EncodePriority+0x32>
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43da      	mvns	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	401a      	ands	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	43d9      	mvns	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	4313      	orrs	r3, r2
         );
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3724      	adds	r7, #36	; 0x24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ff4c 	bl	8001b10 <__NVIC_SetPriorityGrouping>
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c8e:	f7ff ff63 	bl	8001b58 <__NVIC_GetPriorityGrouping>
 8001c92:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	68b9      	ldr	r1, [r7, #8]
 8001c98:	6978      	ldr	r0, [r7, #20]
 8001c9a:	f7ff ffb3 	bl	8001c04 <NVIC_EncodePriority>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff ff82 	bl	8001bb0 <__NVIC_SetPriority>
}
 8001cac:	bf00      	nop
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ff56 	bl	8001b74 <__NVIC_EnableIRQ>
}
 8001cc8:	bf00      	nop
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff ff0e 	bl	8001af8 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e312      	b.n	800230e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a66      	ldr	r2, [pc, #408]	; (8001e88 <HAL_DMA_Init+0x1b8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d04a      	beq.n	8001d88 <HAL_DMA_Init+0xb8>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a65      	ldr	r2, [pc, #404]	; (8001e8c <HAL_DMA_Init+0x1bc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d045      	beq.n	8001d88 <HAL_DMA_Init+0xb8>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a63      	ldr	r2, [pc, #396]	; (8001e90 <HAL_DMA_Init+0x1c0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d040      	beq.n	8001d88 <HAL_DMA_Init+0xb8>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a62      	ldr	r2, [pc, #392]	; (8001e94 <HAL_DMA_Init+0x1c4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d03b      	beq.n	8001d88 <HAL_DMA_Init+0xb8>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a60      	ldr	r2, [pc, #384]	; (8001e98 <HAL_DMA_Init+0x1c8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d036      	beq.n	8001d88 <HAL_DMA_Init+0xb8>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a5f      	ldr	r2, [pc, #380]	; (8001e9c <HAL_DMA_Init+0x1cc>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d031      	beq.n	8001d88 <HAL_DMA_Init+0xb8>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a5d      	ldr	r2, [pc, #372]	; (8001ea0 <HAL_DMA_Init+0x1d0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d02c      	beq.n	8001d88 <HAL_DMA_Init+0xb8>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a5c      	ldr	r2, [pc, #368]	; (8001ea4 <HAL_DMA_Init+0x1d4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d027      	beq.n	8001d88 <HAL_DMA_Init+0xb8>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a5a      	ldr	r2, [pc, #360]	; (8001ea8 <HAL_DMA_Init+0x1d8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d022      	beq.n	8001d88 <HAL_DMA_Init+0xb8>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a59      	ldr	r2, [pc, #356]	; (8001eac <HAL_DMA_Init+0x1dc>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d01d      	beq.n	8001d88 <HAL_DMA_Init+0xb8>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a57      	ldr	r2, [pc, #348]	; (8001eb0 <HAL_DMA_Init+0x1e0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d018      	beq.n	8001d88 <HAL_DMA_Init+0xb8>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a56      	ldr	r2, [pc, #344]	; (8001eb4 <HAL_DMA_Init+0x1e4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d013      	beq.n	8001d88 <HAL_DMA_Init+0xb8>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a54      	ldr	r2, [pc, #336]	; (8001eb8 <HAL_DMA_Init+0x1e8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d00e      	beq.n	8001d88 <HAL_DMA_Init+0xb8>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a53      	ldr	r2, [pc, #332]	; (8001ebc <HAL_DMA_Init+0x1ec>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d009      	beq.n	8001d88 <HAL_DMA_Init+0xb8>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a51      	ldr	r2, [pc, #324]	; (8001ec0 <HAL_DMA_Init+0x1f0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d004      	beq.n	8001d88 <HAL_DMA_Init+0xb8>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a50      	ldr	r2, [pc, #320]	; (8001ec4 <HAL_DMA_Init+0x1f4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d101      	bne.n	8001d8c <HAL_DMA_Init+0xbc>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <HAL_DMA_Init+0xbe>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 813c 	beq.w	800200c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a37      	ldr	r2, [pc, #220]	; (8001e88 <HAL_DMA_Init+0x1b8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d04a      	beq.n	8001e44 <HAL_DMA_Init+0x174>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a36      	ldr	r2, [pc, #216]	; (8001e8c <HAL_DMA_Init+0x1bc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d045      	beq.n	8001e44 <HAL_DMA_Init+0x174>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a34      	ldr	r2, [pc, #208]	; (8001e90 <HAL_DMA_Init+0x1c0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d040      	beq.n	8001e44 <HAL_DMA_Init+0x174>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a33      	ldr	r2, [pc, #204]	; (8001e94 <HAL_DMA_Init+0x1c4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d03b      	beq.n	8001e44 <HAL_DMA_Init+0x174>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a31      	ldr	r2, [pc, #196]	; (8001e98 <HAL_DMA_Init+0x1c8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d036      	beq.n	8001e44 <HAL_DMA_Init+0x174>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a30      	ldr	r2, [pc, #192]	; (8001e9c <HAL_DMA_Init+0x1cc>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d031      	beq.n	8001e44 <HAL_DMA_Init+0x174>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a2e      	ldr	r2, [pc, #184]	; (8001ea0 <HAL_DMA_Init+0x1d0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d02c      	beq.n	8001e44 <HAL_DMA_Init+0x174>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a2d      	ldr	r2, [pc, #180]	; (8001ea4 <HAL_DMA_Init+0x1d4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d027      	beq.n	8001e44 <HAL_DMA_Init+0x174>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a2b      	ldr	r2, [pc, #172]	; (8001ea8 <HAL_DMA_Init+0x1d8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d022      	beq.n	8001e44 <HAL_DMA_Init+0x174>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a2a      	ldr	r2, [pc, #168]	; (8001eac <HAL_DMA_Init+0x1dc>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d01d      	beq.n	8001e44 <HAL_DMA_Init+0x174>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a28      	ldr	r2, [pc, #160]	; (8001eb0 <HAL_DMA_Init+0x1e0>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d018      	beq.n	8001e44 <HAL_DMA_Init+0x174>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a27      	ldr	r2, [pc, #156]	; (8001eb4 <HAL_DMA_Init+0x1e4>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d013      	beq.n	8001e44 <HAL_DMA_Init+0x174>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a25      	ldr	r2, [pc, #148]	; (8001eb8 <HAL_DMA_Init+0x1e8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00e      	beq.n	8001e44 <HAL_DMA_Init+0x174>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a24      	ldr	r2, [pc, #144]	; (8001ebc <HAL_DMA_Init+0x1ec>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d009      	beq.n	8001e44 <HAL_DMA_Init+0x174>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a22      	ldr	r2, [pc, #136]	; (8001ec0 <HAL_DMA_Init+0x1f0>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d004      	beq.n	8001e44 <HAL_DMA_Init+0x174>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a21      	ldr	r2, [pc, #132]	; (8001ec4 <HAL_DMA_Init+0x1f4>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d108      	bne.n	8001e56 <HAL_DMA_Init+0x186>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0201 	bic.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	e007      	b.n	8001e66 <HAL_DMA_Init+0x196>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0201 	bic.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e66:	e02f      	b.n	8001ec8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e68:	f7ff fe46 	bl	8001af8 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b05      	cmp	r3, #5
 8001e74:	d928      	bls.n	8001ec8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2220      	movs	r2, #32
 8001e7a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2203      	movs	r2, #3
 8001e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e242      	b.n	800230e <HAL_DMA_Init+0x63e>
 8001e88:	40020010 	.word	0x40020010
 8001e8c:	40020028 	.word	0x40020028
 8001e90:	40020040 	.word	0x40020040
 8001e94:	40020058 	.word	0x40020058
 8001e98:	40020070 	.word	0x40020070
 8001e9c:	40020088 	.word	0x40020088
 8001ea0:	400200a0 	.word	0x400200a0
 8001ea4:	400200b8 	.word	0x400200b8
 8001ea8:	40020410 	.word	0x40020410
 8001eac:	40020428 	.word	0x40020428
 8001eb0:	40020440 	.word	0x40020440
 8001eb4:	40020458 	.word	0x40020458
 8001eb8:	40020470 	.word	0x40020470
 8001ebc:	40020488 	.word	0x40020488
 8001ec0:	400204a0 	.word	0x400204a0
 8001ec4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1c8      	bne.n	8001e68 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	4b83      	ldr	r3, [pc, #524]	; (80020f0 <HAL_DMA_Init+0x420>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001eee:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001efa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f06:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d107      	bne.n	8001f2c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	4313      	orrs	r3, r2
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b28      	cmp	r3, #40	; 0x28
 8001f32:	d903      	bls.n	8001f3c <HAL_DMA_Init+0x26c>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b2e      	cmp	r3, #46	; 0x2e
 8001f3a:	d91f      	bls.n	8001f7c <HAL_DMA_Init+0x2ac>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b3e      	cmp	r3, #62	; 0x3e
 8001f42:	d903      	bls.n	8001f4c <HAL_DMA_Init+0x27c>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b42      	cmp	r3, #66	; 0x42
 8001f4a:	d917      	bls.n	8001f7c <HAL_DMA_Init+0x2ac>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b46      	cmp	r3, #70	; 0x46
 8001f52:	d903      	bls.n	8001f5c <HAL_DMA_Init+0x28c>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b48      	cmp	r3, #72	; 0x48
 8001f5a:	d90f      	bls.n	8001f7c <HAL_DMA_Init+0x2ac>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b4e      	cmp	r3, #78	; 0x4e
 8001f62:	d903      	bls.n	8001f6c <HAL_DMA_Init+0x29c>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b52      	cmp	r3, #82	; 0x52
 8001f6a:	d907      	bls.n	8001f7c <HAL_DMA_Init+0x2ac>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b73      	cmp	r3, #115	; 0x73
 8001f72:	d905      	bls.n	8001f80 <HAL_DMA_Init+0x2b0>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b77      	cmp	r3, #119	; 0x77
 8001f7a:	d801      	bhi.n	8001f80 <HAL_DMA_Init+0x2b0>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_DMA_Init+0x2b2>
 8001f80:	2300      	movs	r3, #0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f8c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f023 0307 	bic.w	r3, r3, #7
 8001fa4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d117      	bne.n	8001fe8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00e      	beq.n	8001fe8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f002 fb48 	bl	8004660 <DMA_CheckFifoParam>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d008      	beq.n	8001fe8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2240      	movs	r2, #64	; 0x40
 8001fda:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e192      	b.n	800230e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f002 fa83 	bl	80044fc <DMA_CalcBaseAndBitshift>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	223f      	movs	r2, #63	; 0x3f
 8002004:	409a      	lsls	r2, r3
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	e0c8      	b.n	800219e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a38      	ldr	r2, [pc, #224]	; (80020f4 <HAL_DMA_Init+0x424>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d022      	beq.n	800205c <HAL_DMA_Init+0x38c>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a37      	ldr	r2, [pc, #220]	; (80020f8 <HAL_DMA_Init+0x428>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d01d      	beq.n	800205c <HAL_DMA_Init+0x38c>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a35      	ldr	r2, [pc, #212]	; (80020fc <HAL_DMA_Init+0x42c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d018      	beq.n	800205c <HAL_DMA_Init+0x38c>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a34      	ldr	r2, [pc, #208]	; (8002100 <HAL_DMA_Init+0x430>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d013      	beq.n	800205c <HAL_DMA_Init+0x38c>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a32      	ldr	r2, [pc, #200]	; (8002104 <HAL_DMA_Init+0x434>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00e      	beq.n	800205c <HAL_DMA_Init+0x38c>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a31      	ldr	r2, [pc, #196]	; (8002108 <HAL_DMA_Init+0x438>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d009      	beq.n	800205c <HAL_DMA_Init+0x38c>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a2f      	ldr	r2, [pc, #188]	; (800210c <HAL_DMA_Init+0x43c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d004      	beq.n	800205c <HAL_DMA_Init+0x38c>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a2e      	ldr	r2, [pc, #184]	; (8002110 <HAL_DMA_Init+0x440>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d101      	bne.n	8002060 <HAL_DMA_Init+0x390>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <HAL_DMA_Init+0x392>
 8002060:	2300      	movs	r3, #0
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8092 	beq.w	800218c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a21      	ldr	r2, [pc, #132]	; (80020f4 <HAL_DMA_Init+0x424>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d021      	beq.n	80020b6 <HAL_DMA_Init+0x3e6>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a20      	ldr	r2, [pc, #128]	; (80020f8 <HAL_DMA_Init+0x428>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d01c      	beq.n	80020b6 <HAL_DMA_Init+0x3e6>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1e      	ldr	r2, [pc, #120]	; (80020fc <HAL_DMA_Init+0x42c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d017      	beq.n	80020b6 <HAL_DMA_Init+0x3e6>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a1d      	ldr	r2, [pc, #116]	; (8002100 <HAL_DMA_Init+0x430>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d012      	beq.n	80020b6 <HAL_DMA_Init+0x3e6>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1b      	ldr	r2, [pc, #108]	; (8002104 <HAL_DMA_Init+0x434>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00d      	beq.n	80020b6 <HAL_DMA_Init+0x3e6>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1a      	ldr	r2, [pc, #104]	; (8002108 <HAL_DMA_Init+0x438>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d008      	beq.n	80020b6 <HAL_DMA_Init+0x3e6>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a18      	ldr	r2, [pc, #96]	; (800210c <HAL_DMA_Init+0x43c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d003      	beq.n	80020b6 <HAL_DMA_Init+0x3e6>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a17      	ldr	r2, [pc, #92]	; (8002110 <HAL_DMA_Init+0x440>)
 80020b4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2202      	movs	r2, #2
 80020ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4b10      	ldr	r3, [pc, #64]	; (8002114 <HAL_DMA_Init+0x444>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b40      	cmp	r3, #64	; 0x40
 80020dc:	d01c      	beq.n	8002118 <HAL_DMA_Init+0x448>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b80      	cmp	r3, #128	; 0x80
 80020e4:	d102      	bne.n	80020ec <HAL_DMA_Init+0x41c>
 80020e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020ea:	e016      	b.n	800211a <HAL_DMA_Init+0x44a>
 80020ec:	2300      	movs	r3, #0
 80020ee:	e014      	b.n	800211a <HAL_DMA_Init+0x44a>
 80020f0:	fe10803f 	.word	0xfe10803f
 80020f4:	58025408 	.word	0x58025408
 80020f8:	5802541c 	.word	0x5802541c
 80020fc:	58025430 	.word	0x58025430
 8002100:	58025444 	.word	0x58025444
 8002104:	58025458 	.word	0x58025458
 8002108:	5802546c 	.word	0x5802546c
 800210c:	58025480 	.word	0x58025480
 8002110:	58025494 	.word	0x58025494
 8002114:	fffe000f 	.word	0xfffe000f
 8002118:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68d2      	ldr	r2, [r2, #12]
 800211e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002120:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002128:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002130:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002138:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002140:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002148:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	4313      	orrs	r3, r2
 800214e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	4b6e      	ldr	r3, [pc, #440]	; (8002318 <HAL_DMA_Init+0x648>)
 8002160:	4413      	add	r3, r2
 8002162:	4a6e      	ldr	r2, [pc, #440]	; (800231c <HAL_DMA_Init+0x64c>)
 8002164:	fba2 2303 	umull	r2, r3, r2, r3
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	009a      	lsls	r2, r3, #2
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f002 f9c3 	bl	80044fc <DMA_CalcBaseAndBitshift>
 8002176:	4603      	mov	r3, r0
 8002178:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	2201      	movs	r2, #1
 8002184:	409a      	lsls	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	e008      	b.n	800219e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2240      	movs	r2, #64	; 0x40
 8002190:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2203      	movs	r2, #3
 8002196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e0b7      	b.n	800230e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a5f      	ldr	r2, [pc, #380]	; (8002320 <HAL_DMA_Init+0x650>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d072      	beq.n	800228e <HAL_DMA_Init+0x5be>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a5d      	ldr	r2, [pc, #372]	; (8002324 <HAL_DMA_Init+0x654>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d06d      	beq.n	800228e <HAL_DMA_Init+0x5be>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a5c      	ldr	r2, [pc, #368]	; (8002328 <HAL_DMA_Init+0x658>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d068      	beq.n	800228e <HAL_DMA_Init+0x5be>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a5a      	ldr	r2, [pc, #360]	; (800232c <HAL_DMA_Init+0x65c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d063      	beq.n	800228e <HAL_DMA_Init+0x5be>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a59      	ldr	r2, [pc, #356]	; (8002330 <HAL_DMA_Init+0x660>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d05e      	beq.n	800228e <HAL_DMA_Init+0x5be>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a57      	ldr	r2, [pc, #348]	; (8002334 <HAL_DMA_Init+0x664>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d059      	beq.n	800228e <HAL_DMA_Init+0x5be>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a56      	ldr	r2, [pc, #344]	; (8002338 <HAL_DMA_Init+0x668>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d054      	beq.n	800228e <HAL_DMA_Init+0x5be>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a54      	ldr	r2, [pc, #336]	; (800233c <HAL_DMA_Init+0x66c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d04f      	beq.n	800228e <HAL_DMA_Init+0x5be>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a53      	ldr	r2, [pc, #332]	; (8002340 <HAL_DMA_Init+0x670>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d04a      	beq.n	800228e <HAL_DMA_Init+0x5be>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a51      	ldr	r2, [pc, #324]	; (8002344 <HAL_DMA_Init+0x674>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d045      	beq.n	800228e <HAL_DMA_Init+0x5be>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a50      	ldr	r2, [pc, #320]	; (8002348 <HAL_DMA_Init+0x678>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d040      	beq.n	800228e <HAL_DMA_Init+0x5be>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a4e      	ldr	r2, [pc, #312]	; (800234c <HAL_DMA_Init+0x67c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d03b      	beq.n	800228e <HAL_DMA_Init+0x5be>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a4d      	ldr	r2, [pc, #308]	; (8002350 <HAL_DMA_Init+0x680>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d036      	beq.n	800228e <HAL_DMA_Init+0x5be>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a4b      	ldr	r2, [pc, #300]	; (8002354 <HAL_DMA_Init+0x684>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d031      	beq.n	800228e <HAL_DMA_Init+0x5be>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a4a      	ldr	r2, [pc, #296]	; (8002358 <HAL_DMA_Init+0x688>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d02c      	beq.n	800228e <HAL_DMA_Init+0x5be>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a48      	ldr	r2, [pc, #288]	; (800235c <HAL_DMA_Init+0x68c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d027      	beq.n	800228e <HAL_DMA_Init+0x5be>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a47      	ldr	r2, [pc, #284]	; (8002360 <HAL_DMA_Init+0x690>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d022      	beq.n	800228e <HAL_DMA_Init+0x5be>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a45      	ldr	r2, [pc, #276]	; (8002364 <HAL_DMA_Init+0x694>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d01d      	beq.n	800228e <HAL_DMA_Init+0x5be>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a44      	ldr	r2, [pc, #272]	; (8002368 <HAL_DMA_Init+0x698>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d018      	beq.n	800228e <HAL_DMA_Init+0x5be>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a42      	ldr	r2, [pc, #264]	; (800236c <HAL_DMA_Init+0x69c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d013      	beq.n	800228e <HAL_DMA_Init+0x5be>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a41      	ldr	r2, [pc, #260]	; (8002370 <HAL_DMA_Init+0x6a0>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d00e      	beq.n	800228e <HAL_DMA_Init+0x5be>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a3f      	ldr	r2, [pc, #252]	; (8002374 <HAL_DMA_Init+0x6a4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d009      	beq.n	800228e <HAL_DMA_Init+0x5be>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a3e      	ldr	r2, [pc, #248]	; (8002378 <HAL_DMA_Init+0x6a8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d004      	beq.n	800228e <HAL_DMA_Init+0x5be>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a3c      	ldr	r2, [pc, #240]	; (800237c <HAL_DMA_Init+0x6ac>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d101      	bne.n	8002292 <HAL_DMA_Init+0x5c2>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <HAL_DMA_Init+0x5c4>
 8002292:	2300      	movs	r3, #0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d032      	beq.n	80022fe <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f002 fa5d 	bl	8004758 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b80      	cmp	r3, #128	; 0x80
 80022a4:	d102      	bne.n	80022ac <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80022c0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d010      	beq.n	80022ec <HAL_DMA_Init+0x61c>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d80c      	bhi.n	80022ec <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f002 fada 	bl	800488c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	e008      	b.n	80022fe <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	a7fdabf8 	.word	0xa7fdabf8
 800231c:	cccccccd 	.word	0xcccccccd
 8002320:	40020010 	.word	0x40020010
 8002324:	40020028 	.word	0x40020028
 8002328:	40020040 	.word	0x40020040
 800232c:	40020058 	.word	0x40020058
 8002330:	40020070 	.word	0x40020070
 8002334:	40020088 	.word	0x40020088
 8002338:	400200a0 	.word	0x400200a0
 800233c:	400200b8 	.word	0x400200b8
 8002340:	40020410 	.word	0x40020410
 8002344:	40020428 	.word	0x40020428
 8002348:	40020440 	.word	0x40020440
 800234c:	40020458 	.word	0x40020458
 8002350:	40020470 	.word	0x40020470
 8002354:	40020488 	.word	0x40020488
 8002358:	400204a0 	.word	0x400204a0
 800235c:	400204b8 	.word	0x400204b8
 8002360:	58025408 	.word	0x58025408
 8002364:	5802541c 	.word	0x5802541c
 8002368:	58025430 	.word	0x58025430
 800236c:	58025444 	.word	0x58025444
 8002370:	58025458 	.word	0x58025458
 8002374:	5802546c 	.word	0x5802546c
 8002378:	58025480 	.word	0x58025480
 800237c:	58025494 	.word	0x58025494

08002380 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e226      	b.n	80027ea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_DMA_Start_IT+0x2a>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e21f      	b.n	80027ea <HAL_DMA_Start_IT+0x46a>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	f040 820a 	bne.w	80027d4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a68      	ldr	r2, [pc, #416]	; (8002574 <HAL_DMA_Start_IT+0x1f4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d04a      	beq.n	800246e <HAL_DMA_Start_IT+0xee>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a66      	ldr	r2, [pc, #408]	; (8002578 <HAL_DMA_Start_IT+0x1f8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d045      	beq.n	800246e <HAL_DMA_Start_IT+0xee>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a65      	ldr	r2, [pc, #404]	; (800257c <HAL_DMA_Start_IT+0x1fc>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d040      	beq.n	800246e <HAL_DMA_Start_IT+0xee>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a63      	ldr	r2, [pc, #396]	; (8002580 <HAL_DMA_Start_IT+0x200>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d03b      	beq.n	800246e <HAL_DMA_Start_IT+0xee>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a62      	ldr	r2, [pc, #392]	; (8002584 <HAL_DMA_Start_IT+0x204>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d036      	beq.n	800246e <HAL_DMA_Start_IT+0xee>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a60      	ldr	r2, [pc, #384]	; (8002588 <HAL_DMA_Start_IT+0x208>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d031      	beq.n	800246e <HAL_DMA_Start_IT+0xee>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a5f      	ldr	r2, [pc, #380]	; (800258c <HAL_DMA_Start_IT+0x20c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d02c      	beq.n	800246e <HAL_DMA_Start_IT+0xee>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a5d      	ldr	r2, [pc, #372]	; (8002590 <HAL_DMA_Start_IT+0x210>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d027      	beq.n	800246e <HAL_DMA_Start_IT+0xee>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a5c      	ldr	r2, [pc, #368]	; (8002594 <HAL_DMA_Start_IT+0x214>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d022      	beq.n	800246e <HAL_DMA_Start_IT+0xee>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a5a      	ldr	r2, [pc, #360]	; (8002598 <HAL_DMA_Start_IT+0x218>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d01d      	beq.n	800246e <HAL_DMA_Start_IT+0xee>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a59      	ldr	r2, [pc, #356]	; (800259c <HAL_DMA_Start_IT+0x21c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d018      	beq.n	800246e <HAL_DMA_Start_IT+0xee>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a57      	ldr	r2, [pc, #348]	; (80025a0 <HAL_DMA_Start_IT+0x220>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d013      	beq.n	800246e <HAL_DMA_Start_IT+0xee>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a56      	ldr	r2, [pc, #344]	; (80025a4 <HAL_DMA_Start_IT+0x224>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d00e      	beq.n	800246e <HAL_DMA_Start_IT+0xee>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a54      	ldr	r2, [pc, #336]	; (80025a8 <HAL_DMA_Start_IT+0x228>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d009      	beq.n	800246e <HAL_DMA_Start_IT+0xee>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a53      	ldr	r2, [pc, #332]	; (80025ac <HAL_DMA_Start_IT+0x22c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d004      	beq.n	800246e <HAL_DMA_Start_IT+0xee>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a51      	ldr	r2, [pc, #324]	; (80025b0 <HAL_DMA_Start_IT+0x230>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d108      	bne.n	8002480 <HAL_DMA_Start_IT+0x100>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0201 	bic.w	r2, r2, #1
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	e007      	b.n	8002490 <HAL_DMA_Start_IT+0x110>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68b9      	ldr	r1, [r7, #8]
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f001 fe84 	bl	80041a4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a34      	ldr	r2, [pc, #208]	; (8002574 <HAL_DMA_Start_IT+0x1f4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d04a      	beq.n	800253c <HAL_DMA_Start_IT+0x1bc>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a33      	ldr	r2, [pc, #204]	; (8002578 <HAL_DMA_Start_IT+0x1f8>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d045      	beq.n	800253c <HAL_DMA_Start_IT+0x1bc>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a31      	ldr	r2, [pc, #196]	; (800257c <HAL_DMA_Start_IT+0x1fc>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d040      	beq.n	800253c <HAL_DMA_Start_IT+0x1bc>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a30      	ldr	r2, [pc, #192]	; (8002580 <HAL_DMA_Start_IT+0x200>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d03b      	beq.n	800253c <HAL_DMA_Start_IT+0x1bc>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a2e      	ldr	r2, [pc, #184]	; (8002584 <HAL_DMA_Start_IT+0x204>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d036      	beq.n	800253c <HAL_DMA_Start_IT+0x1bc>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a2d      	ldr	r2, [pc, #180]	; (8002588 <HAL_DMA_Start_IT+0x208>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d031      	beq.n	800253c <HAL_DMA_Start_IT+0x1bc>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a2b      	ldr	r2, [pc, #172]	; (800258c <HAL_DMA_Start_IT+0x20c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d02c      	beq.n	800253c <HAL_DMA_Start_IT+0x1bc>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a2a      	ldr	r2, [pc, #168]	; (8002590 <HAL_DMA_Start_IT+0x210>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d027      	beq.n	800253c <HAL_DMA_Start_IT+0x1bc>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a28      	ldr	r2, [pc, #160]	; (8002594 <HAL_DMA_Start_IT+0x214>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d022      	beq.n	800253c <HAL_DMA_Start_IT+0x1bc>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a27      	ldr	r2, [pc, #156]	; (8002598 <HAL_DMA_Start_IT+0x218>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d01d      	beq.n	800253c <HAL_DMA_Start_IT+0x1bc>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a25      	ldr	r2, [pc, #148]	; (800259c <HAL_DMA_Start_IT+0x21c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d018      	beq.n	800253c <HAL_DMA_Start_IT+0x1bc>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a24      	ldr	r2, [pc, #144]	; (80025a0 <HAL_DMA_Start_IT+0x220>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d013      	beq.n	800253c <HAL_DMA_Start_IT+0x1bc>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a22      	ldr	r2, [pc, #136]	; (80025a4 <HAL_DMA_Start_IT+0x224>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00e      	beq.n	800253c <HAL_DMA_Start_IT+0x1bc>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a21      	ldr	r2, [pc, #132]	; (80025a8 <HAL_DMA_Start_IT+0x228>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d009      	beq.n	800253c <HAL_DMA_Start_IT+0x1bc>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a1f      	ldr	r2, [pc, #124]	; (80025ac <HAL_DMA_Start_IT+0x22c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d004      	beq.n	800253c <HAL_DMA_Start_IT+0x1bc>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a1e      	ldr	r2, [pc, #120]	; (80025b0 <HAL_DMA_Start_IT+0x230>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d101      	bne.n	8002540 <HAL_DMA_Start_IT+0x1c0>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <HAL_DMA_Start_IT+0x1c2>
 8002540:	2300      	movs	r3, #0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d036      	beq.n	80025b4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f023 021e 	bic.w	r2, r3, #30
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0216 	orr.w	r2, r2, #22
 8002558:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d03e      	beq.n	80025e0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0208 	orr.w	r2, r2, #8
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	e035      	b.n	80025e0 <HAL_DMA_Start_IT+0x260>
 8002574:	40020010 	.word	0x40020010
 8002578:	40020028 	.word	0x40020028
 800257c:	40020040 	.word	0x40020040
 8002580:	40020058 	.word	0x40020058
 8002584:	40020070 	.word	0x40020070
 8002588:	40020088 	.word	0x40020088
 800258c:	400200a0 	.word	0x400200a0
 8002590:	400200b8 	.word	0x400200b8
 8002594:	40020410 	.word	0x40020410
 8002598:	40020428 	.word	0x40020428
 800259c:	40020440 	.word	0x40020440
 80025a0:	40020458 	.word	0x40020458
 80025a4:	40020470 	.word	0x40020470
 80025a8:	40020488 	.word	0x40020488
 80025ac:	400204a0 	.word	0x400204a0
 80025b0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 020e 	bic.w	r2, r3, #14
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 020a 	orr.w	r2, r2, #10
 80025c6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0204 	orr.w	r2, r2, #4
 80025de:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a83      	ldr	r2, [pc, #524]	; (80027f4 <HAL_DMA_Start_IT+0x474>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d072      	beq.n	80026d0 <HAL_DMA_Start_IT+0x350>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a82      	ldr	r2, [pc, #520]	; (80027f8 <HAL_DMA_Start_IT+0x478>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d06d      	beq.n	80026d0 <HAL_DMA_Start_IT+0x350>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a80      	ldr	r2, [pc, #512]	; (80027fc <HAL_DMA_Start_IT+0x47c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d068      	beq.n	80026d0 <HAL_DMA_Start_IT+0x350>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a7f      	ldr	r2, [pc, #508]	; (8002800 <HAL_DMA_Start_IT+0x480>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d063      	beq.n	80026d0 <HAL_DMA_Start_IT+0x350>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a7d      	ldr	r2, [pc, #500]	; (8002804 <HAL_DMA_Start_IT+0x484>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d05e      	beq.n	80026d0 <HAL_DMA_Start_IT+0x350>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a7c      	ldr	r2, [pc, #496]	; (8002808 <HAL_DMA_Start_IT+0x488>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d059      	beq.n	80026d0 <HAL_DMA_Start_IT+0x350>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a7a      	ldr	r2, [pc, #488]	; (800280c <HAL_DMA_Start_IT+0x48c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d054      	beq.n	80026d0 <HAL_DMA_Start_IT+0x350>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a79      	ldr	r2, [pc, #484]	; (8002810 <HAL_DMA_Start_IT+0x490>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d04f      	beq.n	80026d0 <HAL_DMA_Start_IT+0x350>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a77      	ldr	r2, [pc, #476]	; (8002814 <HAL_DMA_Start_IT+0x494>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d04a      	beq.n	80026d0 <HAL_DMA_Start_IT+0x350>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a76      	ldr	r2, [pc, #472]	; (8002818 <HAL_DMA_Start_IT+0x498>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d045      	beq.n	80026d0 <HAL_DMA_Start_IT+0x350>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a74      	ldr	r2, [pc, #464]	; (800281c <HAL_DMA_Start_IT+0x49c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d040      	beq.n	80026d0 <HAL_DMA_Start_IT+0x350>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a73      	ldr	r2, [pc, #460]	; (8002820 <HAL_DMA_Start_IT+0x4a0>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d03b      	beq.n	80026d0 <HAL_DMA_Start_IT+0x350>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a71      	ldr	r2, [pc, #452]	; (8002824 <HAL_DMA_Start_IT+0x4a4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d036      	beq.n	80026d0 <HAL_DMA_Start_IT+0x350>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a70      	ldr	r2, [pc, #448]	; (8002828 <HAL_DMA_Start_IT+0x4a8>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d031      	beq.n	80026d0 <HAL_DMA_Start_IT+0x350>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a6e      	ldr	r2, [pc, #440]	; (800282c <HAL_DMA_Start_IT+0x4ac>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d02c      	beq.n	80026d0 <HAL_DMA_Start_IT+0x350>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6d      	ldr	r2, [pc, #436]	; (8002830 <HAL_DMA_Start_IT+0x4b0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d027      	beq.n	80026d0 <HAL_DMA_Start_IT+0x350>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a6b      	ldr	r2, [pc, #428]	; (8002834 <HAL_DMA_Start_IT+0x4b4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d022      	beq.n	80026d0 <HAL_DMA_Start_IT+0x350>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a6a      	ldr	r2, [pc, #424]	; (8002838 <HAL_DMA_Start_IT+0x4b8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d01d      	beq.n	80026d0 <HAL_DMA_Start_IT+0x350>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a68      	ldr	r2, [pc, #416]	; (800283c <HAL_DMA_Start_IT+0x4bc>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d018      	beq.n	80026d0 <HAL_DMA_Start_IT+0x350>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a67      	ldr	r2, [pc, #412]	; (8002840 <HAL_DMA_Start_IT+0x4c0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d013      	beq.n	80026d0 <HAL_DMA_Start_IT+0x350>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a65      	ldr	r2, [pc, #404]	; (8002844 <HAL_DMA_Start_IT+0x4c4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d00e      	beq.n	80026d0 <HAL_DMA_Start_IT+0x350>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a64      	ldr	r2, [pc, #400]	; (8002848 <HAL_DMA_Start_IT+0x4c8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d009      	beq.n	80026d0 <HAL_DMA_Start_IT+0x350>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a62      	ldr	r2, [pc, #392]	; (800284c <HAL_DMA_Start_IT+0x4cc>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d004      	beq.n	80026d0 <HAL_DMA_Start_IT+0x350>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a61      	ldr	r2, [pc, #388]	; (8002850 <HAL_DMA_Start_IT+0x4d0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d101      	bne.n	80026d4 <HAL_DMA_Start_IT+0x354>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <HAL_DMA_Start_IT+0x356>
 80026d4:	2300      	movs	r3, #0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d01a      	beq.n	8002710 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d007      	beq.n	80026f8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800270a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800270e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a37      	ldr	r2, [pc, #220]	; (80027f4 <HAL_DMA_Start_IT+0x474>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d04a      	beq.n	80027b0 <HAL_DMA_Start_IT+0x430>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a36      	ldr	r2, [pc, #216]	; (80027f8 <HAL_DMA_Start_IT+0x478>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d045      	beq.n	80027b0 <HAL_DMA_Start_IT+0x430>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a34      	ldr	r2, [pc, #208]	; (80027fc <HAL_DMA_Start_IT+0x47c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d040      	beq.n	80027b0 <HAL_DMA_Start_IT+0x430>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a33      	ldr	r2, [pc, #204]	; (8002800 <HAL_DMA_Start_IT+0x480>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d03b      	beq.n	80027b0 <HAL_DMA_Start_IT+0x430>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a31      	ldr	r2, [pc, #196]	; (8002804 <HAL_DMA_Start_IT+0x484>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d036      	beq.n	80027b0 <HAL_DMA_Start_IT+0x430>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a30      	ldr	r2, [pc, #192]	; (8002808 <HAL_DMA_Start_IT+0x488>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d031      	beq.n	80027b0 <HAL_DMA_Start_IT+0x430>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a2e      	ldr	r2, [pc, #184]	; (800280c <HAL_DMA_Start_IT+0x48c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d02c      	beq.n	80027b0 <HAL_DMA_Start_IT+0x430>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a2d      	ldr	r2, [pc, #180]	; (8002810 <HAL_DMA_Start_IT+0x490>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d027      	beq.n	80027b0 <HAL_DMA_Start_IT+0x430>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a2b      	ldr	r2, [pc, #172]	; (8002814 <HAL_DMA_Start_IT+0x494>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d022      	beq.n	80027b0 <HAL_DMA_Start_IT+0x430>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a2a      	ldr	r2, [pc, #168]	; (8002818 <HAL_DMA_Start_IT+0x498>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d01d      	beq.n	80027b0 <HAL_DMA_Start_IT+0x430>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a28      	ldr	r2, [pc, #160]	; (800281c <HAL_DMA_Start_IT+0x49c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d018      	beq.n	80027b0 <HAL_DMA_Start_IT+0x430>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a27      	ldr	r2, [pc, #156]	; (8002820 <HAL_DMA_Start_IT+0x4a0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d013      	beq.n	80027b0 <HAL_DMA_Start_IT+0x430>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a25      	ldr	r2, [pc, #148]	; (8002824 <HAL_DMA_Start_IT+0x4a4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00e      	beq.n	80027b0 <HAL_DMA_Start_IT+0x430>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a24      	ldr	r2, [pc, #144]	; (8002828 <HAL_DMA_Start_IT+0x4a8>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d009      	beq.n	80027b0 <HAL_DMA_Start_IT+0x430>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a22      	ldr	r2, [pc, #136]	; (800282c <HAL_DMA_Start_IT+0x4ac>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d004      	beq.n	80027b0 <HAL_DMA_Start_IT+0x430>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a21      	ldr	r2, [pc, #132]	; (8002830 <HAL_DMA_Start_IT+0x4b0>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d108      	bne.n	80027c2 <HAL_DMA_Start_IT+0x442>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e012      	b.n	80027e8 <HAL_DMA_Start_IT+0x468>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0201 	orr.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	e009      	b.n	80027e8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80027e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40020010 	.word	0x40020010
 80027f8:	40020028 	.word	0x40020028
 80027fc:	40020040 	.word	0x40020040
 8002800:	40020058 	.word	0x40020058
 8002804:	40020070 	.word	0x40020070
 8002808:	40020088 	.word	0x40020088
 800280c:	400200a0 	.word	0x400200a0
 8002810:	400200b8 	.word	0x400200b8
 8002814:	40020410 	.word	0x40020410
 8002818:	40020428 	.word	0x40020428
 800281c:	40020440 	.word	0x40020440
 8002820:	40020458 	.word	0x40020458
 8002824:	40020470 	.word	0x40020470
 8002828:	40020488 	.word	0x40020488
 800282c:	400204a0 	.word	0x400204a0
 8002830:	400204b8 	.word	0x400204b8
 8002834:	58025408 	.word	0x58025408
 8002838:	5802541c 	.word	0x5802541c
 800283c:	58025430 	.word	0x58025430
 8002840:	58025444 	.word	0x58025444
 8002844:	58025458 	.word	0x58025458
 8002848:	5802546c 	.word	0x5802546c
 800284c:	58025480 	.word	0x58025480
 8002850:	58025494 	.word	0x58025494

08002854 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800285c:	f7ff f94c 	bl	8001af8 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e2dc      	b.n	8002e26 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d008      	beq.n	800288a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e2cd      	b.n	8002e26 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a76      	ldr	r2, [pc, #472]	; (8002a68 <HAL_DMA_Abort+0x214>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d04a      	beq.n	800292a <HAL_DMA_Abort+0xd6>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a74      	ldr	r2, [pc, #464]	; (8002a6c <HAL_DMA_Abort+0x218>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d045      	beq.n	800292a <HAL_DMA_Abort+0xd6>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a73      	ldr	r2, [pc, #460]	; (8002a70 <HAL_DMA_Abort+0x21c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d040      	beq.n	800292a <HAL_DMA_Abort+0xd6>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a71      	ldr	r2, [pc, #452]	; (8002a74 <HAL_DMA_Abort+0x220>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d03b      	beq.n	800292a <HAL_DMA_Abort+0xd6>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a70      	ldr	r2, [pc, #448]	; (8002a78 <HAL_DMA_Abort+0x224>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d036      	beq.n	800292a <HAL_DMA_Abort+0xd6>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a6e      	ldr	r2, [pc, #440]	; (8002a7c <HAL_DMA_Abort+0x228>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d031      	beq.n	800292a <HAL_DMA_Abort+0xd6>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6d      	ldr	r2, [pc, #436]	; (8002a80 <HAL_DMA_Abort+0x22c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d02c      	beq.n	800292a <HAL_DMA_Abort+0xd6>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a6b      	ldr	r2, [pc, #428]	; (8002a84 <HAL_DMA_Abort+0x230>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d027      	beq.n	800292a <HAL_DMA_Abort+0xd6>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a6a      	ldr	r2, [pc, #424]	; (8002a88 <HAL_DMA_Abort+0x234>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d022      	beq.n	800292a <HAL_DMA_Abort+0xd6>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a68      	ldr	r2, [pc, #416]	; (8002a8c <HAL_DMA_Abort+0x238>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d01d      	beq.n	800292a <HAL_DMA_Abort+0xd6>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a67      	ldr	r2, [pc, #412]	; (8002a90 <HAL_DMA_Abort+0x23c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d018      	beq.n	800292a <HAL_DMA_Abort+0xd6>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a65      	ldr	r2, [pc, #404]	; (8002a94 <HAL_DMA_Abort+0x240>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d013      	beq.n	800292a <HAL_DMA_Abort+0xd6>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a64      	ldr	r2, [pc, #400]	; (8002a98 <HAL_DMA_Abort+0x244>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d00e      	beq.n	800292a <HAL_DMA_Abort+0xd6>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a62      	ldr	r2, [pc, #392]	; (8002a9c <HAL_DMA_Abort+0x248>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d009      	beq.n	800292a <HAL_DMA_Abort+0xd6>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a61      	ldr	r2, [pc, #388]	; (8002aa0 <HAL_DMA_Abort+0x24c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d004      	beq.n	800292a <HAL_DMA_Abort+0xd6>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a5f      	ldr	r2, [pc, #380]	; (8002aa4 <HAL_DMA_Abort+0x250>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d101      	bne.n	800292e <HAL_DMA_Abort+0xda>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_DMA_Abort+0xdc>
 800292e:	2300      	movs	r3, #0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d013      	beq.n	800295c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 021e 	bic.w	r2, r2, #30
 8002942:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002952:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	e00a      	b.n	8002972 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 020e 	bic.w	r2, r2, #14
 800296a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a3c      	ldr	r2, [pc, #240]	; (8002a68 <HAL_DMA_Abort+0x214>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d072      	beq.n	8002a62 <HAL_DMA_Abort+0x20e>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a3a      	ldr	r2, [pc, #232]	; (8002a6c <HAL_DMA_Abort+0x218>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d06d      	beq.n	8002a62 <HAL_DMA_Abort+0x20e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a39      	ldr	r2, [pc, #228]	; (8002a70 <HAL_DMA_Abort+0x21c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d068      	beq.n	8002a62 <HAL_DMA_Abort+0x20e>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a37      	ldr	r2, [pc, #220]	; (8002a74 <HAL_DMA_Abort+0x220>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d063      	beq.n	8002a62 <HAL_DMA_Abort+0x20e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a36      	ldr	r2, [pc, #216]	; (8002a78 <HAL_DMA_Abort+0x224>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d05e      	beq.n	8002a62 <HAL_DMA_Abort+0x20e>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a34      	ldr	r2, [pc, #208]	; (8002a7c <HAL_DMA_Abort+0x228>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d059      	beq.n	8002a62 <HAL_DMA_Abort+0x20e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a33      	ldr	r2, [pc, #204]	; (8002a80 <HAL_DMA_Abort+0x22c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d054      	beq.n	8002a62 <HAL_DMA_Abort+0x20e>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a31      	ldr	r2, [pc, #196]	; (8002a84 <HAL_DMA_Abort+0x230>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d04f      	beq.n	8002a62 <HAL_DMA_Abort+0x20e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a30      	ldr	r2, [pc, #192]	; (8002a88 <HAL_DMA_Abort+0x234>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d04a      	beq.n	8002a62 <HAL_DMA_Abort+0x20e>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a2e      	ldr	r2, [pc, #184]	; (8002a8c <HAL_DMA_Abort+0x238>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d045      	beq.n	8002a62 <HAL_DMA_Abort+0x20e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a2d      	ldr	r2, [pc, #180]	; (8002a90 <HAL_DMA_Abort+0x23c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d040      	beq.n	8002a62 <HAL_DMA_Abort+0x20e>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a2b      	ldr	r2, [pc, #172]	; (8002a94 <HAL_DMA_Abort+0x240>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d03b      	beq.n	8002a62 <HAL_DMA_Abort+0x20e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a2a      	ldr	r2, [pc, #168]	; (8002a98 <HAL_DMA_Abort+0x244>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d036      	beq.n	8002a62 <HAL_DMA_Abort+0x20e>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a28      	ldr	r2, [pc, #160]	; (8002a9c <HAL_DMA_Abort+0x248>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d031      	beq.n	8002a62 <HAL_DMA_Abort+0x20e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a27      	ldr	r2, [pc, #156]	; (8002aa0 <HAL_DMA_Abort+0x24c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d02c      	beq.n	8002a62 <HAL_DMA_Abort+0x20e>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a25      	ldr	r2, [pc, #148]	; (8002aa4 <HAL_DMA_Abort+0x250>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d027      	beq.n	8002a62 <HAL_DMA_Abort+0x20e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a24      	ldr	r2, [pc, #144]	; (8002aa8 <HAL_DMA_Abort+0x254>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d022      	beq.n	8002a62 <HAL_DMA_Abort+0x20e>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a22      	ldr	r2, [pc, #136]	; (8002aac <HAL_DMA_Abort+0x258>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d01d      	beq.n	8002a62 <HAL_DMA_Abort+0x20e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a21      	ldr	r2, [pc, #132]	; (8002ab0 <HAL_DMA_Abort+0x25c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d018      	beq.n	8002a62 <HAL_DMA_Abort+0x20e>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1f      	ldr	r2, [pc, #124]	; (8002ab4 <HAL_DMA_Abort+0x260>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d013      	beq.n	8002a62 <HAL_DMA_Abort+0x20e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1e      	ldr	r2, [pc, #120]	; (8002ab8 <HAL_DMA_Abort+0x264>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d00e      	beq.n	8002a62 <HAL_DMA_Abort+0x20e>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1c      	ldr	r2, [pc, #112]	; (8002abc <HAL_DMA_Abort+0x268>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d009      	beq.n	8002a62 <HAL_DMA_Abort+0x20e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1b      	ldr	r2, [pc, #108]	; (8002ac0 <HAL_DMA_Abort+0x26c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d004      	beq.n	8002a62 <HAL_DMA_Abort+0x20e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a19      	ldr	r2, [pc, #100]	; (8002ac4 <HAL_DMA_Abort+0x270>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d132      	bne.n	8002ac8 <HAL_DMA_Abort+0x274>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e031      	b.n	8002aca <HAL_DMA_Abort+0x276>
 8002a66:	bf00      	nop
 8002a68:	40020010 	.word	0x40020010
 8002a6c:	40020028 	.word	0x40020028
 8002a70:	40020040 	.word	0x40020040
 8002a74:	40020058 	.word	0x40020058
 8002a78:	40020070 	.word	0x40020070
 8002a7c:	40020088 	.word	0x40020088
 8002a80:	400200a0 	.word	0x400200a0
 8002a84:	400200b8 	.word	0x400200b8
 8002a88:	40020410 	.word	0x40020410
 8002a8c:	40020428 	.word	0x40020428
 8002a90:	40020440 	.word	0x40020440
 8002a94:	40020458 	.word	0x40020458
 8002a98:	40020470 	.word	0x40020470
 8002a9c:	40020488 	.word	0x40020488
 8002aa0:	400204a0 	.word	0x400204a0
 8002aa4:	400204b8 	.word	0x400204b8
 8002aa8:	58025408 	.word	0x58025408
 8002aac:	5802541c 	.word	0x5802541c
 8002ab0:	58025430 	.word	0x58025430
 8002ab4:	58025444 	.word	0x58025444
 8002ab8:	58025458 	.word	0x58025458
 8002abc:	5802546c 	.word	0x5802546c
 8002ac0:	58025480 	.word	0x58025480
 8002ac4:	58025494 	.word	0x58025494
 8002ac8:	2300      	movs	r3, #0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d007      	beq.n	8002ade <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002adc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a6d      	ldr	r2, [pc, #436]	; (8002c98 <HAL_DMA_Abort+0x444>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d04a      	beq.n	8002b7e <HAL_DMA_Abort+0x32a>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a6b      	ldr	r2, [pc, #428]	; (8002c9c <HAL_DMA_Abort+0x448>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d045      	beq.n	8002b7e <HAL_DMA_Abort+0x32a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a6a      	ldr	r2, [pc, #424]	; (8002ca0 <HAL_DMA_Abort+0x44c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d040      	beq.n	8002b7e <HAL_DMA_Abort+0x32a>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a68      	ldr	r2, [pc, #416]	; (8002ca4 <HAL_DMA_Abort+0x450>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d03b      	beq.n	8002b7e <HAL_DMA_Abort+0x32a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a67      	ldr	r2, [pc, #412]	; (8002ca8 <HAL_DMA_Abort+0x454>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d036      	beq.n	8002b7e <HAL_DMA_Abort+0x32a>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a65      	ldr	r2, [pc, #404]	; (8002cac <HAL_DMA_Abort+0x458>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d031      	beq.n	8002b7e <HAL_DMA_Abort+0x32a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a64      	ldr	r2, [pc, #400]	; (8002cb0 <HAL_DMA_Abort+0x45c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d02c      	beq.n	8002b7e <HAL_DMA_Abort+0x32a>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a62      	ldr	r2, [pc, #392]	; (8002cb4 <HAL_DMA_Abort+0x460>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d027      	beq.n	8002b7e <HAL_DMA_Abort+0x32a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a61      	ldr	r2, [pc, #388]	; (8002cb8 <HAL_DMA_Abort+0x464>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d022      	beq.n	8002b7e <HAL_DMA_Abort+0x32a>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a5f      	ldr	r2, [pc, #380]	; (8002cbc <HAL_DMA_Abort+0x468>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d01d      	beq.n	8002b7e <HAL_DMA_Abort+0x32a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a5e      	ldr	r2, [pc, #376]	; (8002cc0 <HAL_DMA_Abort+0x46c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d018      	beq.n	8002b7e <HAL_DMA_Abort+0x32a>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a5c      	ldr	r2, [pc, #368]	; (8002cc4 <HAL_DMA_Abort+0x470>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d013      	beq.n	8002b7e <HAL_DMA_Abort+0x32a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a5b      	ldr	r2, [pc, #364]	; (8002cc8 <HAL_DMA_Abort+0x474>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d00e      	beq.n	8002b7e <HAL_DMA_Abort+0x32a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a59      	ldr	r2, [pc, #356]	; (8002ccc <HAL_DMA_Abort+0x478>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d009      	beq.n	8002b7e <HAL_DMA_Abort+0x32a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a58      	ldr	r2, [pc, #352]	; (8002cd0 <HAL_DMA_Abort+0x47c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d004      	beq.n	8002b7e <HAL_DMA_Abort+0x32a>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a56      	ldr	r2, [pc, #344]	; (8002cd4 <HAL_DMA_Abort+0x480>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d108      	bne.n	8002b90 <HAL_DMA_Abort+0x33c>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0201 	bic.w	r2, r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	e007      	b.n	8002ba0 <HAL_DMA_Abort+0x34c>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0201 	bic.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002ba0:	e013      	b.n	8002bca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ba2:	f7fe ffa9 	bl	8001af8 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b05      	cmp	r3, #5
 8002bae:	d90c      	bls.n	8002bca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2203      	movs	r2, #3
 8002bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e12d      	b.n	8002e26 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1e5      	bne.n	8002ba2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a2f      	ldr	r2, [pc, #188]	; (8002c98 <HAL_DMA_Abort+0x444>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d04a      	beq.n	8002c76 <HAL_DMA_Abort+0x422>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a2d      	ldr	r2, [pc, #180]	; (8002c9c <HAL_DMA_Abort+0x448>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d045      	beq.n	8002c76 <HAL_DMA_Abort+0x422>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a2c      	ldr	r2, [pc, #176]	; (8002ca0 <HAL_DMA_Abort+0x44c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d040      	beq.n	8002c76 <HAL_DMA_Abort+0x422>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a2a      	ldr	r2, [pc, #168]	; (8002ca4 <HAL_DMA_Abort+0x450>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d03b      	beq.n	8002c76 <HAL_DMA_Abort+0x422>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a29      	ldr	r2, [pc, #164]	; (8002ca8 <HAL_DMA_Abort+0x454>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d036      	beq.n	8002c76 <HAL_DMA_Abort+0x422>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a27      	ldr	r2, [pc, #156]	; (8002cac <HAL_DMA_Abort+0x458>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d031      	beq.n	8002c76 <HAL_DMA_Abort+0x422>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a26      	ldr	r2, [pc, #152]	; (8002cb0 <HAL_DMA_Abort+0x45c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d02c      	beq.n	8002c76 <HAL_DMA_Abort+0x422>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a24      	ldr	r2, [pc, #144]	; (8002cb4 <HAL_DMA_Abort+0x460>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d027      	beq.n	8002c76 <HAL_DMA_Abort+0x422>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a23      	ldr	r2, [pc, #140]	; (8002cb8 <HAL_DMA_Abort+0x464>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d022      	beq.n	8002c76 <HAL_DMA_Abort+0x422>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a21      	ldr	r2, [pc, #132]	; (8002cbc <HAL_DMA_Abort+0x468>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01d      	beq.n	8002c76 <HAL_DMA_Abort+0x422>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a20      	ldr	r2, [pc, #128]	; (8002cc0 <HAL_DMA_Abort+0x46c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d018      	beq.n	8002c76 <HAL_DMA_Abort+0x422>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1e      	ldr	r2, [pc, #120]	; (8002cc4 <HAL_DMA_Abort+0x470>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <HAL_DMA_Abort+0x422>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1d      	ldr	r2, [pc, #116]	; (8002cc8 <HAL_DMA_Abort+0x474>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00e      	beq.n	8002c76 <HAL_DMA_Abort+0x422>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1b      	ldr	r2, [pc, #108]	; (8002ccc <HAL_DMA_Abort+0x478>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d009      	beq.n	8002c76 <HAL_DMA_Abort+0x422>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a1a      	ldr	r2, [pc, #104]	; (8002cd0 <HAL_DMA_Abort+0x47c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d004      	beq.n	8002c76 <HAL_DMA_Abort+0x422>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a18      	ldr	r2, [pc, #96]	; (8002cd4 <HAL_DMA_Abort+0x480>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d101      	bne.n	8002c7a <HAL_DMA_Abort+0x426>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_DMA_Abort+0x428>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d02b      	beq.n	8002cd8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c84:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8a:	f003 031f 	and.w	r3, r3, #31
 8002c8e:	223f      	movs	r2, #63	; 0x3f
 8002c90:	409a      	lsls	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	609a      	str	r2, [r3, #8]
 8002c96:	e02a      	b.n	8002cee <HAL_DMA_Abort+0x49a>
 8002c98:	40020010 	.word	0x40020010
 8002c9c:	40020028 	.word	0x40020028
 8002ca0:	40020040 	.word	0x40020040
 8002ca4:	40020058 	.word	0x40020058
 8002ca8:	40020070 	.word	0x40020070
 8002cac:	40020088 	.word	0x40020088
 8002cb0:	400200a0 	.word	0x400200a0
 8002cb4:	400200b8 	.word	0x400200b8
 8002cb8:	40020410 	.word	0x40020410
 8002cbc:	40020428 	.word	0x40020428
 8002cc0:	40020440 	.word	0x40020440
 8002cc4:	40020458 	.word	0x40020458
 8002cc8:	40020470 	.word	0x40020470
 8002ccc:	40020488 	.word	0x40020488
 8002cd0:	400204a0 	.word	0x400204a0
 8002cd4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cdc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce2:	f003 031f 	and.w	r3, r3, #31
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a4f      	ldr	r2, [pc, #316]	; (8002e30 <HAL_DMA_Abort+0x5dc>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d072      	beq.n	8002dde <HAL_DMA_Abort+0x58a>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a4d      	ldr	r2, [pc, #308]	; (8002e34 <HAL_DMA_Abort+0x5e0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d06d      	beq.n	8002dde <HAL_DMA_Abort+0x58a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a4c      	ldr	r2, [pc, #304]	; (8002e38 <HAL_DMA_Abort+0x5e4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d068      	beq.n	8002dde <HAL_DMA_Abort+0x58a>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a4a      	ldr	r2, [pc, #296]	; (8002e3c <HAL_DMA_Abort+0x5e8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d063      	beq.n	8002dde <HAL_DMA_Abort+0x58a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a49      	ldr	r2, [pc, #292]	; (8002e40 <HAL_DMA_Abort+0x5ec>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d05e      	beq.n	8002dde <HAL_DMA_Abort+0x58a>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a47      	ldr	r2, [pc, #284]	; (8002e44 <HAL_DMA_Abort+0x5f0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d059      	beq.n	8002dde <HAL_DMA_Abort+0x58a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a46      	ldr	r2, [pc, #280]	; (8002e48 <HAL_DMA_Abort+0x5f4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d054      	beq.n	8002dde <HAL_DMA_Abort+0x58a>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a44      	ldr	r2, [pc, #272]	; (8002e4c <HAL_DMA_Abort+0x5f8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d04f      	beq.n	8002dde <HAL_DMA_Abort+0x58a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a43      	ldr	r2, [pc, #268]	; (8002e50 <HAL_DMA_Abort+0x5fc>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d04a      	beq.n	8002dde <HAL_DMA_Abort+0x58a>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a41      	ldr	r2, [pc, #260]	; (8002e54 <HAL_DMA_Abort+0x600>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d045      	beq.n	8002dde <HAL_DMA_Abort+0x58a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a40      	ldr	r2, [pc, #256]	; (8002e58 <HAL_DMA_Abort+0x604>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d040      	beq.n	8002dde <HAL_DMA_Abort+0x58a>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a3e      	ldr	r2, [pc, #248]	; (8002e5c <HAL_DMA_Abort+0x608>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d03b      	beq.n	8002dde <HAL_DMA_Abort+0x58a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a3d      	ldr	r2, [pc, #244]	; (8002e60 <HAL_DMA_Abort+0x60c>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d036      	beq.n	8002dde <HAL_DMA_Abort+0x58a>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a3b      	ldr	r2, [pc, #236]	; (8002e64 <HAL_DMA_Abort+0x610>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d031      	beq.n	8002dde <HAL_DMA_Abort+0x58a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a3a      	ldr	r2, [pc, #232]	; (8002e68 <HAL_DMA_Abort+0x614>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d02c      	beq.n	8002dde <HAL_DMA_Abort+0x58a>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a38      	ldr	r2, [pc, #224]	; (8002e6c <HAL_DMA_Abort+0x618>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d027      	beq.n	8002dde <HAL_DMA_Abort+0x58a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a37      	ldr	r2, [pc, #220]	; (8002e70 <HAL_DMA_Abort+0x61c>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d022      	beq.n	8002dde <HAL_DMA_Abort+0x58a>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a35      	ldr	r2, [pc, #212]	; (8002e74 <HAL_DMA_Abort+0x620>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d01d      	beq.n	8002dde <HAL_DMA_Abort+0x58a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a34      	ldr	r2, [pc, #208]	; (8002e78 <HAL_DMA_Abort+0x624>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d018      	beq.n	8002dde <HAL_DMA_Abort+0x58a>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a32      	ldr	r2, [pc, #200]	; (8002e7c <HAL_DMA_Abort+0x628>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d013      	beq.n	8002dde <HAL_DMA_Abort+0x58a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a31      	ldr	r2, [pc, #196]	; (8002e80 <HAL_DMA_Abort+0x62c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d00e      	beq.n	8002dde <HAL_DMA_Abort+0x58a>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a2f      	ldr	r2, [pc, #188]	; (8002e84 <HAL_DMA_Abort+0x630>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d009      	beq.n	8002dde <HAL_DMA_Abort+0x58a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a2e      	ldr	r2, [pc, #184]	; (8002e88 <HAL_DMA_Abort+0x634>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d004      	beq.n	8002dde <HAL_DMA_Abort+0x58a>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a2c      	ldr	r2, [pc, #176]	; (8002e8c <HAL_DMA_Abort+0x638>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d101      	bne.n	8002de2 <HAL_DMA_Abort+0x58e>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <HAL_DMA_Abort+0x590>
 8002de2:	2300      	movs	r3, #0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d015      	beq.n	8002e14 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002df0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00c      	beq.n	8002e14 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e08:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e12:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40020010 	.word	0x40020010
 8002e34:	40020028 	.word	0x40020028
 8002e38:	40020040 	.word	0x40020040
 8002e3c:	40020058 	.word	0x40020058
 8002e40:	40020070 	.word	0x40020070
 8002e44:	40020088 	.word	0x40020088
 8002e48:	400200a0 	.word	0x400200a0
 8002e4c:	400200b8 	.word	0x400200b8
 8002e50:	40020410 	.word	0x40020410
 8002e54:	40020428 	.word	0x40020428
 8002e58:	40020440 	.word	0x40020440
 8002e5c:	40020458 	.word	0x40020458
 8002e60:	40020470 	.word	0x40020470
 8002e64:	40020488 	.word	0x40020488
 8002e68:	400204a0 	.word	0x400204a0
 8002e6c:	400204b8 	.word	0x400204b8
 8002e70:	58025408 	.word	0x58025408
 8002e74:	5802541c 	.word	0x5802541c
 8002e78:	58025430 	.word	0x58025430
 8002e7c:	58025444 	.word	0x58025444
 8002e80:	58025458 	.word	0x58025458
 8002e84:	5802546c 	.word	0x5802546c
 8002e88:	58025480 	.word	0x58025480
 8002e8c:	58025494 	.word	0x58025494

08002e90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e237      	b.n	8003312 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d004      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2280      	movs	r2, #128	; 0x80
 8002eb2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e22c      	b.n	8003312 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a5c      	ldr	r2, [pc, #368]	; (8003030 <HAL_DMA_Abort_IT+0x1a0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d04a      	beq.n	8002f58 <HAL_DMA_Abort_IT+0xc8>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a5b      	ldr	r2, [pc, #364]	; (8003034 <HAL_DMA_Abort_IT+0x1a4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d045      	beq.n	8002f58 <HAL_DMA_Abort_IT+0xc8>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a59      	ldr	r2, [pc, #356]	; (8003038 <HAL_DMA_Abort_IT+0x1a8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d040      	beq.n	8002f58 <HAL_DMA_Abort_IT+0xc8>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a58      	ldr	r2, [pc, #352]	; (800303c <HAL_DMA_Abort_IT+0x1ac>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d03b      	beq.n	8002f58 <HAL_DMA_Abort_IT+0xc8>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a56      	ldr	r2, [pc, #344]	; (8003040 <HAL_DMA_Abort_IT+0x1b0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d036      	beq.n	8002f58 <HAL_DMA_Abort_IT+0xc8>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a55      	ldr	r2, [pc, #340]	; (8003044 <HAL_DMA_Abort_IT+0x1b4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d031      	beq.n	8002f58 <HAL_DMA_Abort_IT+0xc8>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a53      	ldr	r2, [pc, #332]	; (8003048 <HAL_DMA_Abort_IT+0x1b8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d02c      	beq.n	8002f58 <HAL_DMA_Abort_IT+0xc8>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a52      	ldr	r2, [pc, #328]	; (800304c <HAL_DMA_Abort_IT+0x1bc>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d027      	beq.n	8002f58 <HAL_DMA_Abort_IT+0xc8>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a50      	ldr	r2, [pc, #320]	; (8003050 <HAL_DMA_Abort_IT+0x1c0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d022      	beq.n	8002f58 <HAL_DMA_Abort_IT+0xc8>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a4f      	ldr	r2, [pc, #316]	; (8003054 <HAL_DMA_Abort_IT+0x1c4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d01d      	beq.n	8002f58 <HAL_DMA_Abort_IT+0xc8>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a4d      	ldr	r2, [pc, #308]	; (8003058 <HAL_DMA_Abort_IT+0x1c8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d018      	beq.n	8002f58 <HAL_DMA_Abort_IT+0xc8>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a4c      	ldr	r2, [pc, #304]	; (800305c <HAL_DMA_Abort_IT+0x1cc>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d013      	beq.n	8002f58 <HAL_DMA_Abort_IT+0xc8>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a4a      	ldr	r2, [pc, #296]	; (8003060 <HAL_DMA_Abort_IT+0x1d0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00e      	beq.n	8002f58 <HAL_DMA_Abort_IT+0xc8>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a49      	ldr	r2, [pc, #292]	; (8003064 <HAL_DMA_Abort_IT+0x1d4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d009      	beq.n	8002f58 <HAL_DMA_Abort_IT+0xc8>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a47      	ldr	r2, [pc, #284]	; (8003068 <HAL_DMA_Abort_IT+0x1d8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d004      	beq.n	8002f58 <HAL_DMA_Abort_IT+0xc8>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a46      	ldr	r2, [pc, #280]	; (800306c <HAL_DMA_Abort_IT+0x1dc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d101      	bne.n	8002f5c <HAL_DMA_Abort_IT+0xcc>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <HAL_DMA_Abort_IT+0xce>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 8086 	beq.w	8003070 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2204      	movs	r2, #4
 8002f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a2f      	ldr	r2, [pc, #188]	; (8003030 <HAL_DMA_Abort_IT+0x1a0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d04a      	beq.n	800300c <HAL_DMA_Abort_IT+0x17c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a2e      	ldr	r2, [pc, #184]	; (8003034 <HAL_DMA_Abort_IT+0x1a4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d045      	beq.n	800300c <HAL_DMA_Abort_IT+0x17c>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a2c      	ldr	r2, [pc, #176]	; (8003038 <HAL_DMA_Abort_IT+0x1a8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d040      	beq.n	800300c <HAL_DMA_Abort_IT+0x17c>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a2b      	ldr	r2, [pc, #172]	; (800303c <HAL_DMA_Abort_IT+0x1ac>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d03b      	beq.n	800300c <HAL_DMA_Abort_IT+0x17c>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a29      	ldr	r2, [pc, #164]	; (8003040 <HAL_DMA_Abort_IT+0x1b0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d036      	beq.n	800300c <HAL_DMA_Abort_IT+0x17c>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a28      	ldr	r2, [pc, #160]	; (8003044 <HAL_DMA_Abort_IT+0x1b4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d031      	beq.n	800300c <HAL_DMA_Abort_IT+0x17c>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a26      	ldr	r2, [pc, #152]	; (8003048 <HAL_DMA_Abort_IT+0x1b8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d02c      	beq.n	800300c <HAL_DMA_Abort_IT+0x17c>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a25      	ldr	r2, [pc, #148]	; (800304c <HAL_DMA_Abort_IT+0x1bc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d027      	beq.n	800300c <HAL_DMA_Abort_IT+0x17c>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a23      	ldr	r2, [pc, #140]	; (8003050 <HAL_DMA_Abort_IT+0x1c0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d022      	beq.n	800300c <HAL_DMA_Abort_IT+0x17c>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a22      	ldr	r2, [pc, #136]	; (8003054 <HAL_DMA_Abort_IT+0x1c4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d01d      	beq.n	800300c <HAL_DMA_Abort_IT+0x17c>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a20      	ldr	r2, [pc, #128]	; (8003058 <HAL_DMA_Abort_IT+0x1c8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d018      	beq.n	800300c <HAL_DMA_Abort_IT+0x17c>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a1f      	ldr	r2, [pc, #124]	; (800305c <HAL_DMA_Abort_IT+0x1cc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d013      	beq.n	800300c <HAL_DMA_Abort_IT+0x17c>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a1d      	ldr	r2, [pc, #116]	; (8003060 <HAL_DMA_Abort_IT+0x1d0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00e      	beq.n	800300c <HAL_DMA_Abort_IT+0x17c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a1c      	ldr	r2, [pc, #112]	; (8003064 <HAL_DMA_Abort_IT+0x1d4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d009      	beq.n	800300c <HAL_DMA_Abort_IT+0x17c>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a1a      	ldr	r2, [pc, #104]	; (8003068 <HAL_DMA_Abort_IT+0x1d8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d004      	beq.n	800300c <HAL_DMA_Abort_IT+0x17c>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a19      	ldr	r2, [pc, #100]	; (800306c <HAL_DMA_Abort_IT+0x1dc>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d108      	bne.n	800301e <HAL_DMA_Abort_IT+0x18e>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0201 	bic.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	e178      	b.n	8003310 <HAL_DMA_Abort_IT+0x480>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0201 	bic.w	r2, r2, #1
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	e16f      	b.n	8003310 <HAL_DMA_Abort_IT+0x480>
 8003030:	40020010 	.word	0x40020010
 8003034:	40020028 	.word	0x40020028
 8003038:	40020040 	.word	0x40020040
 800303c:	40020058 	.word	0x40020058
 8003040:	40020070 	.word	0x40020070
 8003044:	40020088 	.word	0x40020088
 8003048:	400200a0 	.word	0x400200a0
 800304c:	400200b8 	.word	0x400200b8
 8003050:	40020410 	.word	0x40020410
 8003054:	40020428 	.word	0x40020428
 8003058:	40020440 	.word	0x40020440
 800305c:	40020458 	.word	0x40020458
 8003060:	40020470 	.word	0x40020470
 8003064:	40020488 	.word	0x40020488
 8003068:	400204a0 	.word	0x400204a0
 800306c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 020e 	bic.w	r2, r2, #14
 800307e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a6c      	ldr	r2, [pc, #432]	; (8003238 <HAL_DMA_Abort_IT+0x3a8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d04a      	beq.n	8003120 <HAL_DMA_Abort_IT+0x290>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a6b      	ldr	r2, [pc, #428]	; (800323c <HAL_DMA_Abort_IT+0x3ac>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d045      	beq.n	8003120 <HAL_DMA_Abort_IT+0x290>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a69      	ldr	r2, [pc, #420]	; (8003240 <HAL_DMA_Abort_IT+0x3b0>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d040      	beq.n	8003120 <HAL_DMA_Abort_IT+0x290>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a68      	ldr	r2, [pc, #416]	; (8003244 <HAL_DMA_Abort_IT+0x3b4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d03b      	beq.n	8003120 <HAL_DMA_Abort_IT+0x290>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a66      	ldr	r2, [pc, #408]	; (8003248 <HAL_DMA_Abort_IT+0x3b8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d036      	beq.n	8003120 <HAL_DMA_Abort_IT+0x290>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a65      	ldr	r2, [pc, #404]	; (800324c <HAL_DMA_Abort_IT+0x3bc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d031      	beq.n	8003120 <HAL_DMA_Abort_IT+0x290>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a63      	ldr	r2, [pc, #396]	; (8003250 <HAL_DMA_Abort_IT+0x3c0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d02c      	beq.n	8003120 <HAL_DMA_Abort_IT+0x290>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a62      	ldr	r2, [pc, #392]	; (8003254 <HAL_DMA_Abort_IT+0x3c4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d027      	beq.n	8003120 <HAL_DMA_Abort_IT+0x290>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a60      	ldr	r2, [pc, #384]	; (8003258 <HAL_DMA_Abort_IT+0x3c8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d022      	beq.n	8003120 <HAL_DMA_Abort_IT+0x290>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a5f      	ldr	r2, [pc, #380]	; (800325c <HAL_DMA_Abort_IT+0x3cc>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d01d      	beq.n	8003120 <HAL_DMA_Abort_IT+0x290>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a5d      	ldr	r2, [pc, #372]	; (8003260 <HAL_DMA_Abort_IT+0x3d0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d018      	beq.n	8003120 <HAL_DMA_Abort_IT+0x290>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a5c      	ldr	r2, [pc, #368]	; (8003264 <HAL_DMA_Abort_IT+0x3d4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d013      	beq.n	8003120 <HAL_DMA_Abort_IT+0x290>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a5a      	ldr	r2, [pc, #360]	; (8003268 <HAL_DMA_Abort_IT+0x3d8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00e      	beq.n	8003120 <HAL_DMA_Abort_IT+0x290>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a59      	ldr	r2, [pc, #356]	; (800326c <HAL_DMA_Abort_IT+0x3dc>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d009      	beq.n	8003120 <HAL_DMA_Abort_IT+0x290>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a57      	ldr	r2, [pc, #348]	; (8003270 <HAL_DMA_Abort_IT+0x3e0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d004      	beq.n	8003120 <HAL_DMA_Abort_IT+0x290>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a56      	ldr	r2, [pc, #344]	; (8003274 <HAL_DMA_Abort_IT+0x3e4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d108      	bne.n	8003132 <HAL_DMA_Abort_IT+0x2a2>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0201 	bic.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	e007      	b.n	8003142 <HAL_DMA_Abort_IT+0x2b2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0201 	bic.w	r2, r2, #1
 8003140:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a3c      	ldr	r2, [pc, #240]	; (8003238 <HAL_DMA_Abort_IT+0x3a8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d072      	beq.n	8003232 <HAL_DMA_Abort_IT+0x3a2>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a3a      	ldr	r2, [pc, #232]	; (800323c <HAL_DMA_Abort_IT+0x3ac>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d06d      	beq.n	8003232 <HAL_DMA_Abort_IT+0x3a2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a39      	ldr	r2, [pc, #228]	; (8003240 <HAL_DMA_Abort_IT+0x3b0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d068      	beq.n	8003232 <HAL_DMA_Abort_IT+0x3a2>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a37      	ldr	r2, [pc, #220]	; (8003244 <HAL_DMA_Abort_IT+0x3b4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d063      	beq.n	8003232 <HAL_DMA_Abort_IT+0x3a2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a36      	ldr	r2, [pc, #216]	; (8003248 <HAL_DMA_Abort_IT+0x3b8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d05e      	beq.n	8003232 <HAL_DMA_Abort_IT+0x3a2>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a34      	ldr	r2, [pc, #208]	; (800324c <HAL_DMA_Abort_IT+0x3bc>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d059      	beq.n	8003232 <HAL_DMA_Abort_IT+0x3a2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a33      	ldr	r2, [pc, #204]	; (8003250 <HAL_DMA_Abort_IT+0x3c0>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d054      	beq.n	8003232 <HAL_DMA_Abort_IT+0x3a2>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a31      	ldr	r2, [pc, #196]	; (8003254 <HAL_DMA_Abort_IT+0x3c4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d04f      	beq.n	8003232 <HAL_DMA_Abort_IT+0x3a2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a30      	ldr	r2, [pc, #192]	; (8003258 <HAL_DMA_Abort_IT+0x3c8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d04a      	beq.n	8003232 <HAL_DMA_Abort_IT+0x3a2>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a2e      	ldr	r2, [pc, #184]	; (800325c <HAL_DMA_Abort_IT+0x3cc>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d045      	beq.n	8003232 <HAL_DMA_Abort_IT+0x3a2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a2d      	ldr	r2, [pc, #180]	; (8003260 <HAL_DMA_Abort_IT+0x3d0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d040      	beq.n	8003232 <HAL_DMA_Abort_IT+0x3a2>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a2b      	ldr	r2, [pc, #172]	; (8003264 <HAL_DMA_Abort_IT+0x3d4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d03b      	beq.n	8003232 <HAL_DMA_Abort_IT+0x3a2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a2a      	ldr	r2, [pc, #168]	; (8003268 <HAL_DMA_Abort_IT+0x3d8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d036      	beq.n	8003232 <HAL_DMA_Abort_IT+0x3a2>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a28      	ldr	r2, [pc, #160]	; (800326c <HAL_DMA_Abort_IT+0x3dc>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d031      	beq.n	8003232 <HAL_DMA_Abort_IT+0x3a2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a27      	ldr	r2, [pc, #156]	; (8003270 <HAL_DMA_Abort_IT+0x3e0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d02c      	beq.n	8003232 <HAL_DMA_Abort_IT+0x3a2>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a25      	ldr	r2, [pc, #148]	; (8003274 <HAL_DMA_Abort_IT+0x3e4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d027      	beq.n	8003232 <HAL_DMA_Abort_IT+0x3a2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a24      	ldr	r2, [pc, #144]	; (8003278 <HAL_DMA_Abort_IT+0x3e8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d022      	beq.n	8003232 <HAL_DMA_Abort_IT+0x3a2>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a22      	ldr	r2, [pc, #136]	; (800327c <HAL_DMA_Abort_IT+0x3ec>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d01d      	beq.n	8003232 <HAL_DMA_Abort_IT+0x3a2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a21      	ldr	r2, [pc, #132]	; (8003280 <HAL_DMA_Abort_IT+0x3f0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d018      	beq.n	8003232 <HAL_DMA_Abort_IT+0x3a2>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a1f      	ldr	r2, [pc, #124]	; (8003284 <HAL_DMA_Abort_IT+0x3f4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d013      	beq.n	8003232 <HAL_DMA_Abort_IT+0x3a2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1e      	ldr	r2, [pc, #120]	; (8003288 <HAL_DMA_Abort_IT+0x3f8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00e      	beq.n	8003232 <HAL_DMA_Abort_IT+0x3a2>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a1c      	ldr	r2, [pc, #112]	; (800328c <HAL_DMA_Abort_IT+0x3fc>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d009      	beq.n	8003232 <HAL_DMA_Abort_IT+0x3a2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1b      	ldr	r2, [pc, #108]	; (8003290 <HAL_DMA_Abort_IT+0x400>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d004      	beq.n	8003232 <HAL_DMA_Abort_IT+0x3a2>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a19      	ldr	r2, [pc, #100]	; (8003294 <HAL_DMA_Abort_IT+0x404>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d132      	bne.n	8003298 <HAL_DMA_Abort_IT+0x408>
 8003232:	2301      	movs	r3, #1
 8003234:	e031      	b.n	800329a <HAL_DMA_Abort_IT+0x40a>
 8003236:	bf00      	nop
 8003238:	40020010 	.word	0x40020010
 800323c:	40020028 	.word	0x40020028
 8003240:	40020040 	.word	0x40020040
 8003244:	40020058 	.word	0x40020058
 8003248:	40020070 	.word	0x40020070
 800324c:	40020088 	.word	0x40020088
 8003250:	400200a0 	.word	0x400200a0
 8003254:	400200b8 	.word	0x400200b8
 8003258:	40020410 	.word	0x40020410
 800325c:	40020428 	.word	0x40020428
 8003260:	40020440 	.word	0x40020440
 8003264:	40020458 	.word	0x40020458
 8003268:	40020470 	.word	0x40020470
 800326c:	40020488 	.word	0x40020488
 8003270:	400204a0 	.word	0x400204a0
 8003274:	400204b8 	.word	0x400204b8
 8003278:	58025408 	.word	0x58025408
 800327c:	5802541c 	.word	0x5802541c
 8003280:	58025430 	.word	0x58025430
 8003284:	58025444 	.word	0x58025444
 8003288:	58025458 	.word	0x58025458
 800328c:	5802546c 	.word	0x5802546c
 8003290:	58025480 	.word	0x58025480
 8003294:	58025494 	.word	0x58025494
 8003298:	2300      	movs	r3, #0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d028      	beq.n	80032f0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032ac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	2201      	movs	r2, #1
 80032be:	409a      	lsls	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80032cc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00c      	beq.n	80032f0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032e4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80032ee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop

0800331c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08a      	sub	sp, #40	; 0x28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003328:	4b67      	ldr	r3, [pc, #412]	; (80034c8 <HAL_DMA_IRQHandler+0x1ac>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a67      	ldr	r2, [pc, #412]	; (80034cc <HAL_DMA_IRQHandler+0x1b0>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	0a9b      	lsrs	r3, r3, #10
 8003334:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003340:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a5f      	ldr	r2, [pc, #380]	; (80034d0 <HAL_DMA_IRQHandler+0x1b4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d04a      	beq.n	80033ee <HAL_DMA_IRQHandler+0xd2>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a5d      	ldr	r2, [pc, #372]	; (80034d4 <HAL_DMA_IRQHandler+0x1b8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d045      	beq.n	80033ee <HAL_DMA_IRQHandler+0xd2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a5c      	ldr	r2, [pc, #368]	; (80034d8 <HAL_DMA_IRQHandler+0x1bc>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d040      	beq.n	80033ee <HAL_DMA_IRQHandler+0xd2>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a5a      	ldr	r2, [pc, #360]	; (80034dc <HAL_DMA_IRQHandler+0x1c0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d03b      	beq.n	80033ee <HAL_DMA_IRQHandler+0xd2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a59      	ldr	r2, [pc, #356]	; (80034e0 <HAL_DMA_IRQHandler+0x1c4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d036      	beq.n	80033ee <HAL_DMA_IRQHandler+0xd2>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a57      	ldr	r2, [pc, #348]	; (80034e4 <HAL_DMA_IRQHandler+0x1c8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d031      	beq.n	80033ee <HAL_DMA_IRQHandler+0xd2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a56      	ldr	r2, [pc, #344]	; (80034e8 <HAL_DMA_IRQHandler+0x1cc>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d02c      	beq.n	80033ee <HAL_DMA_IRQHandler+0xd2>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a54      	ldr	r2, [pc, #336]	; (80034ec <HAL_DMA_IRQHandler+0x1d0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d027      	beq.n	80033ee <HAL_DMA_IRQHandler+0xd2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a53      	ldr	r2, [pc, #332]	; (80034f0 <HAL_DMA_IRQHandler+0x1d4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d022      	beq.n	80033ee <HAL_DMA_IRQHandler+0xd2>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a51      	ldr	r2, [pc, #324]	; (80034f4 <HAL_DMA_IRQHandler+0x1d8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d01d      	beq.n	80033ee <HAL_DMA_IRQHandler+0xd2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a50      	ldr	r2, [pc, #320]	; (80034f8 <HAL_DMA_IRQHandler+0x1dc>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d018      	beq.n	80033ee <HAL_DMA_IRQHandler+0xd2>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a4e      	ldr	r2, [pc, #312]	; (80034fc <HAL_DMA_IRQHandler+0x1e0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d013      	beq.n	80033ee <HAL_DMA_IRQHandler+0xd2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a4d      	ldr	r2, [pc, #308]	; (8003500 <HAL_DMA_IRQHandler+0x1e4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00e      	beq.n	80033ee <HAL_DMA_IRQHandler+0xd2>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a4b      	ldr	r2, [pc, #300]	; (8003504 <HAL_DMA_IRQHandler+0x1e8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d009      	beq.n	80033ee <HAL_DMA_IRQHandler+0xd2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a4a      	ldr	r2, [pc, #296]	; (8003508 <HAL_DMA_IRQHandler+0x1ec>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d004      	beq.n	80033ee <HAL_DMA_IRQHandler+0xd2>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a48      	ldr	r2, [pc, #288]	; (800350c <HAL_DMA_IRQHandler+0x1f0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d101      	bne.n	80033f2 <HAL_DMA_IRQHandler+0xd6>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <HAL_DMA_IRQHandler+0xd8>
 80033f2:	2300      	movs	r3, #0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 842b 	beq.w	8003c50 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fe:	f003 031f 	and.w	r3, r3, #31
 8003402:	2208      	movs	r2, #8
 8003404:	409a      	lsls	r2, r3
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 80a2 	beq.w	8003554 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a2e      	ldr	r2, [pc, #184]	; (80034d0 <HAL_DMA_IRQHandler+0x1b4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d04a      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x194>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a2d      	ldr	r2, [pc, #180]	; (80034d4 <HAL_DMA_IRQHandler+0x1b8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d045      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x194>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a2b      	ldr	r2, [pc, #172]	; (80034d8 <HAL_DMA_IRQHandler+0x1bc>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d040      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x194>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a2a      	ldr	r2, [pc, #168]	; (80034dc <HAL_DMA_IRQHandler+0x1c0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d03b      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x194>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a28      	ldr	r2, [pc, #160]	; (80034e0 <HAL_DMA_IRQHandler+0x1c4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d036      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x194>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a27      	ldr	r2, [pc, #156]	; (80034e4 <HAL_DMA_IRQHandler+0x1c8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d031      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x194>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a25      	ldr	r2, [pc, #148]	; (80034e8 <HAL_DMA_IRQHandler+0x1cc>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d02c      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x194>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a24      	ldr	r2, [pc, #144]	; (80034ec <HAL_DMA_IRQHandler+0x1d0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d027      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x194>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a22      	ldr	r2, [pc, #136]	; (80034f0 <HAL_DMA_IRQHandler+0x1d4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d022      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x194>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a21      	ldr	r2, [pc, #132]	; (80034f4 <HAL_DMA_IRQHandler+0x1d8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d01d      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x194>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1f      	ldr	r2, [pc, #124]	; (80034f8 <HAL_DMA_IRQHandler+0x1dc>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d018      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x194>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1e      	ldr	r2, [pc, #120]	; (80034fc <HAL_DMA_IRQHandler+0x1e0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d013      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x194>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a1c      	ldr	r2, [pc, #112]	; (8003500 <HAL_DMA_IRQHandler+0x1e4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00e      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x194>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a1b      	ldr	r2, [pc, #108]	; (8003504 <HAL_DMA_IRQHandler+0x1e8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d009      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x194>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a19      	ldr	r2, [pc, #100]	; (8003508 <HAL_DMA_IRQHandler+0x1ec>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d004      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x194>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a18      	ldr	r2, [pc, #96]	; (800350c <HAL_DMA_IRQHandler+0x1f0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d12f      	bne.n	8003510 <HAL_DMA_IRQHandler+0x1f4>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	bf14      	ite	ne
 80034be:	2301      	movne	r3, #1
 80034c0:	2300      	moveq	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	e02e      	b.n	8003524 <HAL_DMA_IRQHandler+0x208>
 80034c6:	bf00      	nop
 80034c8:	24000068 	.word	0x24000068
 80034cc:	1b4e81b5 	.word	0x1b4e81b5
 80034d0:	40020010 	.word	0x40020010
 80034d4:	40020028 	.word	0x40020028
 80034d8:	40020040 	.word	0x40020040
 80034dc:	40020058 	.word	0x40020058
 80034e0:	40020070 	.word	0x40020070
 80034e4:	40020088 	.word	0x40020088
 80034e8:	400200a0 	.word	0x400200a0
 80034ec:	400200b8 	.word	0x400200b8
 80034f0:	40020410 	.word	0x40020410
 80034f4:	40020428 	.word	0x40020428
 80034f8:	40020440 	.word	0x40020440
 80034fc:	40020458 	.word	0x40020458
 8003500:	40020470 	.word	0x40020470
 8003504:	40020488 	.word	0x40020488
 8003508:	400204a0 	.word	0x400204a0
 800350c:	400204b8 	.word	0x400204b8
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	bf14      	ite	ne
 800351e:	2301      	movne	r3, #1
 8003520:	2300      	moveq	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d015      	beq.n	8003554 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0204 	bic.w	r2, r2, #4
 8003536:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353c:	f003 031f 	and.w	r3, r3, #31
 8003540:	2208      	movs	r2, #8
 8003542:	409a      	lsls	r2, r3
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354c:	f043 0201 	orr.w	r2, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	fa22 f303 	lsr.w	r3, r2, r3
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d06e      	beq.n	8003648 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a69      	ldr	r2, [pc, #420]	; (8003714 <HAL_DMA_IRQHandler+0x3f8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d04a      	beq.n	800360a <HAL_DMA_IRQHandler+0x2ee>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a67      	ldr	r2, [pc, #412]	; (8003718 <HAL_DMA_IRQHandler+0x3fc>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d045      	beq.n	800360a <HAL_DMA_IRQHandler+0x2ee>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a66      	ldr	r2, [pc, #408]	; (800371c <HAL_DMA_IRQHandler+0x400>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d040      	beq.n	800360a <HAL_DMA_IRQHandler+0x2ee>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a64      	ldr	r2, [pc, #400]	; (8003720 <HAL_DMA_IRQHandler+0x404>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d03b      	beq.n	800360a <HAL_DMA_IRQHandler+0x2ee>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a63      	ldr	r2, [pc, #396]	; (8003724 <HAL_DMA_IRQHandler+0x408>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d036      	beq.n	800360a <HAL_DMA_IRQHandler+0x2ee>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a61      	ldr	r2, [pc, #388]	; (8003728 <HAL_DMA_IRQHandler+0x40c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d031      	beq.n	800360a <HAL_DMA_IRQHandler+0x2ee>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a60      	ldr	r2, [pc, #384]	; (800372c <HAL_DMA_IRQHandler+0x410>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d02c      	beq.n	800360a <HAL_DMA_IRQHandler+0x2ee>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a5e      	ldr	r2, [pc, #376]	; (8003730 <HAL_DMA_IRQHandler+0x414>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d027      	beq.n	800360a <HAL_DMA_IRQHandler+0x2ee>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a5d      	ldr	r2, [pc, #372]	; (8003734 <HAL_DMA_IRQHandler+0x418>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d022      	beq.n	800360a <HAL_DMA_IRQHandler+0x2ee>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a5b      	ldr	r2, [pc, #364]	; (8003738 <HAL_DMA_IRQHandler+0x41c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d01d      	beq.n	800360a <HAL_DMA_IRQHandler+0x2ee>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a5a      	ldr	r2, [pc, #360]	; (800373c <HAL_DMA_IRQHandler+0x420>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d018      	beq.n	800360a <HAL_DMA_IRQHandler+0x2ee>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a58      	ldr	r2, [pc, #352]	; (8003740 <HAL_DMA_IRQHandler+0x424>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <HAL_DMA_IRQHandler+0x2ee>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a57      	ldr	r2, [pc, #348]	; (8003744 <HAL_DMA_IRQHandler+0x428>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00e      	beq.n	800360a <HAL_DMA_IRQHandler+0x2ee>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a55      	ldr	r2, [pc, #340]	; (8003748 <HAL_DMA_IRQHandler+0x42c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d009      	beq.n	800360a <HAL_DMA_IRQHandler+0x2ee>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a54      	ldr	r2, [pc, #336]	; (800374c <HAL_DMA_IRQHandler+0x430>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d004      	beq.n	800360a <HAL_DMA_IRQHandler+0x2ee>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a52      	ldr	r2, [pc, #328]	; (8003750 <HAL_DMA_IRQHandler+0x434>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d10a      	bne.n	8003620 <HAL_DMA_IRQHandler+0x304>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf14      	ite	ne
 8003618:	2301      	movne	r3, #1
 800361a:	2300      	moveq	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	e003      	b.n	8003628 <HAL_DMA_IRQHandler+0x30c>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2300      	movs	r3, #0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00d      	beq.n	8003648 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	2201      	movs	r2, #1
 8003636:	409a      	lsls	r2, r3
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003640:	f043 0202 	orr.w	r2, r3, #2
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364c:	f003 031f 	and.w	r3, r3, #31
 8003650:	2204      	movs	r2, #4
 8003652:	409a      	lsls	r2, r3
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 808f 	beq.w	800377c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a2c      	ldr	r2, [pc, #176]	; (8003714 <HAL_DMA_IRQHandler+0x3f8>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d04a      	beq.n	80036fe <HAL_DMA_IRQHandler+0x3e2>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a2a      	ldr	r2, [pc, #168]	; (8003718 <HAL_DMA_IRQHandler+0x3fc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d045      	beq.n	80036fe <HAL_DMA_IRQHandler+0x3e2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a29      	ldr	r2, [pc, #164]	; (800371c <HAL_DMA_IRQHandler+0x400>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d040      	beq.n	80036fe <HAL_DMA_IRQHandler+0x3e2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a27      	ldr	r2, [pc, #156]	; (8003720 <HAL_DMA_IRQHandler+0x404>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d03b      	beq.n	80036fe <HAL_DMA_IRQHandler+0x3e2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a26      	ldr	r2, [pc, #152]	; (8003724 <HAL_DMA_IRQHandler+0x408>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d036      	beq.n	80036fe <HAL_DMA_IRQHandler+0x3e2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a24      	ldr	r2, [pc, #144]	; (8003728 <HAL_DMA_IRQHandler+0x40c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d031      	beq.n	80036fe <HAL_DMA_IRQHandler+0x3e2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a23      	ldr	r2, [pc, #140]	; (800372c <HAL_DMA_IRQHandler+0x410>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d02c      	beq.n	80036fe <HAL_DMA_IRQHandler+0x3e2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a21      	ldr	r2, [pc, #132]	; (8003730 <HAL_DMA_IRQHandler+0x414>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d027      	beq.n	80036fe <HAL_DMA_IRQHandler+0x3e2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a20      	ldr	r2, [pc, #128]	; (8003734 <HAL_DMA_IRQHandler+0x418>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d022      	beq.n	80036fe <HAL_DMA_IRQHandler+0x3e2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1e      	ldr	r2, [pc, #120]	; (8003738 <HAL_DMA_IRQHandler+0x41c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d01d      	beq.n	80036fe <HAL_DMA_IRQHandler+0x3e2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1d      	ldr	r2, [pc, #116]	; (800373c <HAL_DMA_IRQHandler+0x420>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d018      	beq.n	80036fe <HAL_DMA_IRQHandler+0x3e2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a1b      	ldr	r2, [pc, #108]	; (8003740 <HAL_DMA_IRQHandler+0x424>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d013      	beq.n	80036fe <HAL_DMA_IRQHandler+0x3e2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1a      	ldr	r2, [pc, #104]	; (8003744 <HAL_DMA_IRQHandler+0x428>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d00e      	beq.n	80036fe <HAL_DMA_IRQHandler+0x3e2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a18      	ldr	r2, [pc, #96]	; (8003748 <HAL_DMA_IRQHandler+0x42c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d009      	beq.n	80036fe <HAL_DMA_IRQHandler+0x3e2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a17      	ldr	r2, [pc, #92]	; (800374c <HAL_DMA_IRQHandler+0x430>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d004      	beq.n	80036fe <HAL_DMA_IRQHandler+0x3e2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a15      	ldr	r2, [pc, #84]	; (8003750 <HAL_DMA_IRQHandler+0x434>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d12a      	bne.n	8003754 <HAL_DMA_IRQHandler+0x438>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf14      	ite	ne
 800370c:	2301      	movne	r3, #1
 800370e:	2300      	moveq	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e023      	b.n	800375c <HAL_DMA_IRQHandler+0x440>
 8003714:	40020010 	.word	0x40020010
 8003718:	40020028 	.word	0x40020028
 800371c:	40020040 	.word	0x40020040
 8003720:	40020058 	.word	0x40020058
 8003724:	40020070 	.word	0x40020070
 8003728:	40020088 	.word	0x40020088
 800372c:	400200a0 	.word	0x400200a0
 8003730:	400200b8 	.word	0x400200b8
 8003734:	40020410 	.word	0x40020410
 8003738:	40020428 	.word	0x40020428
 800373c:	40020440 	.word	0x40020440
 8003740:	40020458 	.word	0x40020458
 8003744:	40020470 	.word	0x40020470
 8003748:	40020488 	.word	0x40020488
 800374c:	400204a0 	.word	0x400204a0
 8003750:	400204b8 	.word	0x400204b8
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2300      	movs	r3, #0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00d      	beq.n	800377c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003764:	f003 031f 	and.w	r3, r3, #31
 8003768:	2204      	movs	r2, #4
 800376a:	409a      	lsls	r2, r3
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003774:	f043 0204 	orr.w	r2, r3, #4
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003780:	f003 031f 	and.w	r3, r3, #31
 8003784:	2210      	movs	r2, #16
 8003786:	409a      	lsls	r2, r3
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 80a6 	beq.w	80038de <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a85      	ldr	r2, [pc, #532]	; (80039ac <HAL_DMA_IRQHandler+0x690>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d04a      	beq.n	8003832 <HAL_DMA_IRQHandler+0x516>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a83      	ldr	r2, [pc, #524]	; (80039b0 <HAL_DMA_IRQHandler+0x694>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d045      	beq.n	8003832 <HAL_DMA_IRQHandler+0x516>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a82      	ldr	r2, [pc, #520]	; (80039b4 <HAL_DMA_IRQHandler+0x698>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d040      	beq.n	8003832 <HAL_DMA_IRQHandler+0x516>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a80      	ldr	r2, [pc, #512]	; (80039b8 <HAL_DMA_IRQHandler+0x69c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d03b      	beq.n	8003832 <HAL_DMA_IRQHandler+0x516>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a7f      	ldr	r2, [pc, #508]	; (80039bc <HAL_DMA_IRQHandler+0x6a0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d036      	beq.n	8003832 <HAL_DMA_IRQHandler+0x516>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a7d      	ldr	r2, [pc, #500]	; (80039c0 <HAL_DMA_IRQHandler+0x6a4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d031      	beq.n	8003832 <HAL_DMA_IRQHandler+0x516>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a7c      	ldr	r2, [pc, #496]	; (80039c4 <HAL_DMA_IRQHandler+0x6a8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d02c      	beq.n	8003832 <HAL_DMA_IRQHandler+0x516>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a7a      	ldr	r2, [pc, #488]	; (80039c8 <HAL_DMA_IRQHandler+0x6ac>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d027      	beq.n	8003832 <HAL_DMA_IRQHandler+0x516>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a79      	ldr	r2, [pc, #484]	; (80039cc <HAL_DMA_IRQHandler+0x6b0>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d022      	beq.n	8003832 <HAL_DMA_IRQHandler+0x516>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a77      	ldr	r2, [pc, #476]	; (80039d0 <HAL_DMA_IRQHandler+0x6b4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d01d      	beq.n	8003832 <HAL_DMA_IRQHandler+0x516>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a76      	ldr	r2, [pc, #472]	; (80039d4 <HAL_DMA_IRQHandler+0x6b8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d018      	beq.n	8003832 <HAL_DMA_IRQHandler+0x516>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a74      	ldr	r2, [pc, #464]	; (80039d8 <HAL_DMA_IRQHandler+0x6bc>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d013      	beq.n	8003832 <HAL_DMA_IRQHandler+0x516>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a73      	ldr	r2, [pc, #460]	; (80039dc <HAL_DMA_IRQHandler+0x6c0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d00e      	beq.n	8003832 <HAL_DMA_IRQHandler+0x516>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a71      	ldr	r2, [pc, #452]	; (80039e0 <HAL_DMA_IRQHandler+0x6c4>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d009      	beq.n	8003832 <HAL_DMA_IRQHandler+0x516>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a70      	ldr	r2, [pc, #448]	; (80039e4 <HAL_DMA_IRQHandler+0x6c8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d004      	beq.n	8003832 <HAL_DMA_IRQHandler+0x516>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a6e      	ldr	r2, [pc, #440]	; (80039e8 <HAL_DMA_IRQHandler+0x6cc>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d10a      	bne.n	8003848 <HAL_DMA_IRQHandler+0x52c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf14      	ite	ne
 8003840:	2301      	movne	r3, #1
 8003842:	2300      	moveq	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	e009      	b.n	800385c <HAL_DMA_IRQHandler+0x540>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b00      	cmp	r3, #0
 8003854:	bf14      	ite	ne
 8003856:	2301      	movne	r3, #1
 8003858:	2300      	moveq	r3, #0
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d03e      	beq.n	80038de <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003864:	f003 031f 	and.w	r3, r3, #31
 8003868:	2210      	movs	r2, #16
 800386a:	409a      	lsls	r2, r3
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d018      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d108      	bne.n	800389e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	2b00      	cmp	r3, #0
 8003892:	d024      	beq.n	80038de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	4798      	blx	r3
 800389c:	e01f      	b.n	80038de <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d01b      	beq.n	80038de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	4798      	blx	r3
 80038ae:	e016      	b.n	80038de <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d107      	bne.n	80038ce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0208 	bic.w	r2, r2, #8
 80038cc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e2:	f003 031f 	and.w	r3, r3, #31
 80038e6:	2220      	movs	r2, #32
 80038e8:	409a      	lsls	r2, r3
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	4013      	ands	r3, r2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 8110 	beq.w	8003b14 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a2c      	ldr	r2, [pc, #176]	; (80039ac <HAL_DMA_IRQHandler+0x690>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d04a      	beq.n	8003994 <HAL_DMA_IRQHandler+0x678>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a2b      	ldr	r2, [pc, #172]	; (80039b0 <HAL_DMA_IRQHandler+0x694>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d045      	beq.n	8003994 <HAL_DMA_IRQHandler+0x678>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a29      	ldr	r2, [pc, #164]	; (80039b4 <HAL_DMA_IRQHandler+0x698>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d040      	beq.n	8003994 <HAL_DMA_IRQHandler+0x678>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a28      	ldr	r2, [pc, #160]	; (80039b8 <HAL_DMA_IRQHandler+0x69c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d03b      	beq.n	8003994 <HAL_DMA_IRQHandler+0x678>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a26      	ldr	r2, [pc, #152]	; (80039bc <HAL_DMA_IRQHandler+0x6a0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d036      	beq.n	8003994 <HAL_DMA_IRQHandler+0x678>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a25      	ldr	r2, [pc, #148]	; (80039c0 <HAL_DMA_IRQHandler+0x6a4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d031      	beq.n	8003994 <HAL_DMA_IRQHandler+0x678>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a23      	ldr	r2, [pc, #140]	; (80039c4 <HAL_DMA_IRQHandler+0x6a8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d02c      	beq.n	8003994 <HAL_DMA_IRQHandler+0x678>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a22      	ldr	r2, [pc, #136]	; (80039c8 <HAL_DMA_IRQHandler+0x6ac>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d027      	beq.n	8003994 <HAL_DMA_IRQHandler+0x678>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a20      	ldr	r2, [pc, #128]	; (80039cc <HAL_DMA_IRQHandler+0x6b0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d022      	beq.n	8003994 <HAL_DMA_IRQHandler+0x678>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1f      	ldr	r2, [pc, #124]	; (80039d0 <HAL_DMA_IRQHandler+0x6b4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d01d      	beq.n	8003994 <HAL_DMA_IRQHandler+0x678>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a1d      	ldr	r2, [pc, #116]	; (80039d4 <HAL_DMA_IRQHandler+0x6b8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d018      	beq.n	8003994 <HAL_DMA_IRQHandler+0x678>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a1c      	ldr	r2, [pc, #112]	; (80039d8 <HAL_DMA_IRQHandler+0x6bc>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d013      	beq.n	8003994 <HAL_DMA_IRQHandler+0x678>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1a      	ldr	r2, [pc, #104]	; (80039dc <HAL_DMA_IRQHandler+0x6c0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00e      	beq.n	8003994 <HAL_DMA_IRQHandler+0x678>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a19      	ldr	r2, [pc, #100]	; (80039e0 <HAL_DMA_IRQHandler+0x6c4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d009      	beq.n	8003994 <HAL_DMA_IRQHandler+0x678>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a17      	ldr	r2, [pc, #92]	; (80039e4 <HAL_DMA_IRQHandler+0x6c8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d004      	beq.n	8003994 <HAL_DMA_IRQHandler+0x678>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a16      	ldr	r2, [pc, #88]	; (80039e8 <HAL_DMA_IRQHandler+0x6cc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d12b      	bne.n	80039ec <HAL_DMA_IRQHandler+0x6d0>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0310 	and.w	r3, r3, #16
 800399e:	2b00      	cmp	r3, #0
 80039a0:	bf14      	ite	ne
 80039a2:	2301      	movne	r3, #1
 80039a4:	2300      	moveq	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	e02a      	b.n	8003a00 <HAL_DMA_IRQHandler+0x6e4>
 80039aa:	bf00      	nop
 80039ac:	40020010 	.word	0x40020010
 80039b0:	40020028 	.word	0x40020028
 80039b4:	40020040 	.word	0x40020040
 80039b8:	40020058 	.word	0x40020058
 80039bc:	40020070 	.word	0x40020070
 80039c0:	40020088 	.word	0x40020088
 80039c4:	400200a0 	.word	0x400200a0
 80039c8:	400200b8 	.word	0x400200b8
 80039cc:	40020410 	.word	0x40020410
 80039d0:	40020428 	.word	0x40020428
 80039d4:	40020440 	.word	0x40020440
 80039d8:	40020458 	.word	0x40020458
 80039dc:	40020470 	.word	0x40020470
 80039e0:	40020488 	.word	0x40020488
 80039e4:	400204a0 	.word	0x400204a0
 80039e8:	400204b8 	.word	0x400204b8
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	bf14      	ite	ne
 80039fa:	2301      	movne	r3, #1
 80039fc:	2300      	moveq	r3, #0
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 8087 	beq.w	8003b14 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0a:	f003 031f 	and.w	r3, r3, #31
 8003a0e:	2220      	movs	r2, #32
 8003a10:	409a      	lsls	r2, r3
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d139      	bne.n	8003a96 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0216 	bic.w	r2, r2, #22
 8003a30:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695a      	ldr	r2, [r3, #20]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a40:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d103      	bne.n	8003a52 <HAL_DMA_IRQHandler+0x736>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d007      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0208 	bic.w	r2, r2, #8
 8003a60:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a66:	f003 031f 	and.w	r3, r3, #31
 8003a6a:	223f      	movs	r2, #63	; 0x3f
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 834a 	beq.w	8004120 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
          }
          return;
 8003a94:	e344      	b.n	8004120 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d018      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d108      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d02c      	beq.n	8003b14 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4798      	blx	r3
 8003ac2:	e027      	b.n	8003b14 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d023      	beq.n	8003b14 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	4798      	blx	r3
 8003ad4:	e01e      	b.n	8003b14 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10f      	bne.n	8003b04 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0210 	bic.w	r2, r2, #16
 8003af2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 8306 	beq.w	800412a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 8088 	beq.w	8003c3c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2204      	movs	r2, #4
 8003b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a7a      	ldr	r2, [pc, #488]	; (8003d24 <HAL_DMA_IRQHandler+0xa08>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d04a      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x8b8>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a79      	ldr	r2, [pc, #484]	; (8003d28 <HAL_DMA_IRQHandler+0xa0c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d045      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x8b8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a77      	ldr	r2, [pc, #476]	; (8003d2c <HAL_DMA_IRQHandler+0xa10>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d040      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x8b8>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a76      	ldr	r2, [pc, #472]	; (8003d30 <HAL_DMA_IRQHandler+0xa14>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d03b      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x8b8>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a74      	ldr	r2, [pc, #464]	; (8003d34 <HAL_DMA_IRQHandler+0xa18>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d036      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x8b8>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a73      	ldr	r2, [pc, #460]	; (8003d38 <HAL_DMA_IRQHandler+0xa1c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d031      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x8b8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a71      	ldr	r2, [pc, #452]	; (8003d3c <HAL_DMA_IRQHandler+0xa20>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d02c      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x8b8>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a70      	ldr	r2, [pc, #448]	; (8003d40 <HAL_DMA_IRQHandler+0xa24>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d027      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x8b8>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a6e      	ldr	r2, [pc, #440]	; (8003d44 <HAL_DMA_IRQHandler+0xa28>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d022      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x8b8>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a6d      	ldr	r2, [pc, #436]	; (8003d48 <HAL_DMA_IRQHandler+0xa2c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d01d      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x8b8>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a6b      	ldr	r2, [pc, #428]	; (8003d4c <HAL_DMA_IRQHandler+0xa30>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d018      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x8b8>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a6a      	ldr	r2, [pc, #424]	; (8003d50 <HAL_DMA_IRQHandler+0xa34>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d013      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x8b8>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a68      	ldr	r2, [pc, #416]	; (8003d54 <HAL_DMA_IRQHandler+0xa38>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00e      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x8b8>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a67      	ldr	r2, [pc, #412]	; (8003d58 <HAL_DMA_IRQHandler+0xa3c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d009      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x8b8>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a65      	ldr	r2, [pc, #404]	; (8003d5c <HAL_DMA_IRQHandler+0xa40>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d004      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x8b8>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a64      	ldr	r2, [pc, #400]	; (8003d60 <HAL_DMA_IRQHandler+0xa44>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d108      	bne.n	8003be6 <HAL_DMA_IRQHandler+0x8ca>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0201 	bic.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	e007      	b.n	8003bf6 <HAL_DMA_IRQHandler+0x8da>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0201 	bic.w	r2, r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d307      	bcc.n	8003c12 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1f2      	bne.n	8003bf6 <HAL_DMA_IRQHandler+0x8da>
 8003c10:	e000      	b.n	8003c14 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003c12:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d004      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2203      	movs	r2, #3
 8003c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003c2a:	e003      	b.n	8003c34 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 8272 	beq.w	800412a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	4798      	blx	r3
 8003c4e:	e26c      	b.n	800412a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a43      	ldr	r2, [pc, #268]	; (8003d64 <HAL_DMA_IRQHandler+0xa48>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d022      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x984>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a42      	ldr	r2, [pc, #264]	; (8003d68 <HAL_DMA_IRQHandler+0xa4c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d01d      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x984>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a40      	ldr	r2, [pc, #256]	; (8003d6c <HAL_DMA_IRQHandler+0xa50>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d018      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x984>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a3f      	ldr	r2, [pc, #252]	; (8003d70 <HAL_DMA_IRQHandler+0xa54>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d013      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x984>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a3d      	ldr	r2, [pc, #244]	; (8003d74 <HAL_DMA_IRQHandler+0xa58>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d00e      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x984>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a3c      	ldr	r2, [pc, #240]	; (8003d78 <HAL_DMA_IRQHandler+0xa5c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d009      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x984>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a3a      	ldr	r2, [pc, #232]	; (8003d7c <HAL_DMA_IRQHandler+0xa60>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d004      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x984>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a39      	ldr	r2, [pc, #228]	; (8003d80 <HAL_DMA_IRQHandler+0xa64>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d101      	bne.n	8003ca4 <HAL_DMA_IRQHandler+0x988>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <HAL_DMA_IRQHandler+0x98a>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 823f 	beq.w	800412a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb8:	f003 031f 	and.w	r3, r3, #31
 8003cbc:	2204      	movs	r2, #4
 8003cbe:	409a      	lsls	r2, r3
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 80cd 	beq.w	8003e64 <HAL_DMA_IRQHandler+0xb48>
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 80c7 	beq.w	8003e64 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cda:	f003 031f 	and.w	r3, r3, #31
 8003cde:	2204      	movs	r2, #4
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d049      	beq.n	8003d84 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d109      	bne.n	8003d0e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 8210 	beq.w	8004124 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d0c:	e20a      	b.n	8004124 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 8206 	beq.w	8004124 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d20:	e200      	b.n	8004124 <HAL_DMA_IRQHandler+0xe08>
 8003d22:	bf00      	nop
 8003d24:	40020010 	.word	0x40020010
 8003d28:	40020028 	.word	0x40020028
 8003d2c:	40020040 	.word	0x40020040
 8003d30:	40020058 	.word	0x40020058
 8003d34:	40020070 	.word	0x40020070
 8003d38:	40020088 	.word	0x40020088
 8003d3c:	400200a0 	.word	0x400200a0
 8003d40:	400200b8 	.word	0x400200b8
 8003d44:	40020410 	.word	0x40020410
 8003d48:	40020428 	.word	0x40020428
 8003d4c:	40020440 	.word	0x40020440
 8003d50:	40020458 	.word	0x40020458
 8003d54:	40020470 	.word	0x40020470
 8003d58:	40020488 	.word	0x40020488
 8003d5c:	400204a0 	.word	0x400204a0
 8003d60:	400204b8 	.word	0x400204b8
 8003d64:	58025408 	.word	0x58025408
 8003d68:	5802541c 	.word	0x5802541c
 8003d6c:	58025430 	.word	0x58025430
 8003d70:	58025444 	.word	0x58025444
 8003d74:	58025458 	.word	0x58025458
 8003d78:	5802546c 	.word	0x5802546c
 8003d7c:	58025480 	.word	0x58025480
 8003d80:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d160      	bne.n	8003e50 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a7f      	ldr	r2, [pc, #508]	; (8003f90 <HAL_DMA_IRQHandler+0xc74>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d04a      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xb12>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a7d      	ldr	r2, [pc, #500]	; (8003f94 <HAL_DMA_IRQHandler+0xc78>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d045      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xb12>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a7c      	ldr	r2, [pc, #496]	; (8003f98 <HAL_DMA_IRQHandler+0xc7c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d040      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xb12>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a7a      	ldr	r2, [pc, #488]	; (8003f9c <HAL_DMA_IRQHandler+0xc80>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d03b      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xb12>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a79      	ldr	r2, [pc, #484]	; (8003fa0 <HAL_DMA_IRQHandler+0xc84>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d036      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xb12>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a77      	ldr	r2, [pc, #476]	; (8003fa4 <HAL_DMA_IRQHandler+0xc88>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d031      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xb12>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a76      	ldr	r2, [pc, #472]	; (8003fa8 <HAL_DMA_IRQHandler+0xc8c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d02c      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xb12>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a74      	ldr	r2, [pc, #464]	; (8003fac <HAL_DMA_IRQHandler+0xc90>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d027      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xb12>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a73      	ldr	r2, [pc, #460]	; (8003fb0 <HAL_DMA_IRQHandler+0xc94>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d022      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xb12>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a71      	ldr	r2, [pc, #452]	; (8003fb4 <HAL_DMA_IRQHandler+0xc98>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d01d      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xb12>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a70      	ldr	r2, [pc, #448]	; (8003fb8 <HAL_DMA_IRQHandler+0xc9c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d018      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xb12>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a6e      	ldr	r2, [pc, #440]	; (8003fbc <HAL_DMA_IRQHandler+0xca0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d013      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xb12>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a6d      	ldr	r2, [pc, #436]	; (8003fc0 <HAL_DMA_IRQHandler+0xca4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00e      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xb12>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a6b      	ldr	r2, [pc, #428]	; (8003fc4 <HAL_DMA_IRQHandler+0xca8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d009      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xb12>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a6a      	ldr	r2, [pc, #424]	; (8003fc8 <HAL_DMA_IRQHandler+0xcac>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d004      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xb12>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a68      	ldr	r2, [pc, #416]	; (8003fcc <HAL_DMA_IRQHandler+0xcb0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d108      	bne.n	8003e40 <HAL_DMA_IRQHandler+0xb24>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0208 	bic.w	r2, r2, #8
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	e007      	b.n	8003e50 <HAL_DMA_IRQHandler+0xb34>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0204 	bic.w	r2, r2, #4
 8003e4e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8165 	beq.w	8004124 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e62:	e15f      	b.n	8004124 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e68:	f003 031f 	and.w	r3, r3, #31
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	4013      	ands	r3, r2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 80c5 	beq.w	8004004 <HAL_DMA_IRQHandler+0xce8>
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 80bf 	beq.w	8004004 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8a:	f003 031f 	and.w	r3, r3, #31
 8003e8e:	2202      	movs	r2, #2
 8003e90:	409a      	lsls	r2, r3
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d018      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d109      	bne.n	8003ebe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 813a 	beq.w	8004128 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ebc:	e134      	b.n	8004128 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 8130 	beq.w	8004128 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ed0:	e12a      	b.n	8004128 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f003 0320 	and.w	r3, r3, #32
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f040 8089 	bne.w	8003ff0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a2b      	ldr	r2, [pc, #172]	; (8003f90 <HAL_DMA_IRQHandler+0xc74>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d04a      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xc62>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a29      	ldr	r2, [pc, #164]	; (8003f94 <HAL_DMA_IRQHandler+0xc78>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d045      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xc62>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a28      	ldr	r2, [pc, #160]	; (8003f98 <HAL_DMA_IRQHandler+0xc7c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d040      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xc62>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a26      	ldr	r2, [pc, #152]	; (8003f9c <HAL_DMA_IRQHandler+0xc80>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d03b      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xc62>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a25      	ldr	r2, [pc, #148]	; (8003fa0 <HAL_DMA_IRQHandler+0xc84>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d036      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xc62>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a23      	ldr	r2, [pc, #140]	; (8003fa4 <HAL_DMA_IRQHandler+0xc88>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d031      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xc62>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a22      	ldr	r2, [pc, #136]	; (8003fa8 <HAL_DMA_IRQHandler+0xc8c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d02c      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xc62>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a20      	ldr	r2, [pc, #128]	; (8003fac <HAL_DMA_IRQHandler+0xc90>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d027      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xc62>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1f      	ldr	r2, [pc, #124]	; (8003fb0 <HAL_DMA_IRQHandler+0xc94>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d022      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xc62>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a1d      	ldr	r2, [pc, #116]	; (8003fb4 <HAL_DMA_IRQHandler+0xc98>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d01d      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xc62>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a1c      	ldr	r2, [pc, #112]	; (8003fb8 <HAL_DMA_IRQHandler+0xc9c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d018      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xc62>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a1a      	ldr	r2, [pc, #104]	; (8003fbc <HAL_DMA_IRQHandler+0xca0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d013      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xc62>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a19      	ldr	r2, [pc, #100]	; (8003fc0 <HAL_DMA_IRQHandler+0xca4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00e      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xc62>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a17      	ldr	r2, [pc, #92]	; (8003fc4 <HAL_DMA_IRQHandler+0xca8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d009      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xc62>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a16      	ldr	r2, [pc, #88]	; (8003fc8 <HAL_DMA_IRQHandler+0xcac>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d004      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xc62>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a14      	ldr	r2, [pc, #80]	; (8003fcc <HAL_DMA_IRQHandler+0xcb0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d128      	bne.n	8003fd0 <HAL_DMA_IRQHandler+0xcb4>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0214 	bic.w	r2, r2, #20
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	e027      	b.n	8003fe0 <HAL_DMA_IRQHandler+0xcc4>
 8003f90:	40020010 	.word	0x40020010
 8003f94:	40020028 	.word	0x40020028
 8003f98:	40020040 	.word	0x40020040
 8003f9c:	40020058 	.word	0x40020058
 8003fa0:	40020070 	.word	0x40020070
 8003fa4:	40020088 	.word	0x40020088
 8003fa8:	400200a0 	.word	0x400200a0
 8003fac:	400200b8 	.word	0x400200b8
 8003fb0:	40020410 	.word	0x40020410
 8003fb4:	40020428 	.word	0x40020428
 8003fb8:	40020440 	.word	0x40020440
 8003fbc:	40020458 	.word	0x40020458
 8003fc0:	40020470 	.word	0x40020470
 8003fc4:	40020488 	.word	0x40020488
 8003fc8:	400204a0 	.word	0x400204a0
 8003fcc:	400204b8 	.word	0x400204b8
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 020a 	bic.w	r2, r2, #10
 8003fde:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8097 	beq.w	8004128 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004002:	e091      	b.n	8004128 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	2208      	movs	r2, #8
 800400e:	409a      	lsls	r2, r3
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	4013      	ands	r3, r2
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8088 	beq.w	800412a <HAL_DMA_IRQHandler+0xe0e>
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8082 	beq.w	800412a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a41      	ldr	r2, [pc, #260]	; (8004130 <HAL_DMA_IRQHandler+0xe14>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d04a      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xdaa>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a3f      	ldr	r2, [pc, #252]	; (8004134 <HAL_DMA_IRQHandler+0xe18>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d045      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xdaa>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a3e      	ldr	r2, [pc, #248]	; (8004138 <HAL_DMA_IRQHandler+0xe1c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d040      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xdaa>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a3c      	ldr	r2, [pc, #240]	; (800413c <HAL_DMA_IRQHandler+0xe20>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d03b      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xdaa>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a3b      	ldr	r2, [pc, #236]	; (8004140 <HAL_DMA_IRQHandler+0xe24>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d036      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xdaa>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a39      	ldr	r2, [pc, #228]	; (8004144 <HAL_DMA_IRQHandler+0xe28>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d031      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xdaa>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a38      	ldr	r2, [pc, #224]	; (8004148 <HAL_DMA_IRQHandler+0xe2c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d02c      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xdaa>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a36      	ldr	r2, [pc, #216]	; (800414c <HAL_DMA_IRQHandler+0xe30>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d027      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xdaa>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a35      	ldr	r2, [pc, #212]	; (8004150 <HAL_DMA_IRQHandler+0xe34>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d022      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xdaa>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a33      	ldr	r2, [pc, #204]	; (8004154 <HAL_DMA_IRQHandler+0xe38>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d01d      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xdaa>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a32      	ldr	r2, [pc, #200]	; (8004158 <HAL_DMA_IRQHandler+0xe3c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d018      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xdaa>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a30      	ldr	r2, [pc, #192]	; (800415c <HAL_DMA_IRQHandler+0xe40>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d013      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xdaa>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a2f      	ldr	r2, [pc, #188]	; (8004160 <HAL_DMA_IRQHandler+0xe44>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00e      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xdaa>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a2d      	ldr	r2, [pc, #180]	; (8004164 <HAL_DMA_IRQHandler+0xe48>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d009      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xdaa>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a2c      	ldr	r2, [pc, #176]	; (8004168 <HAL_DMA_IRQHandler+0xe4c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d004      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xdaa>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a2a      	ldr	r2, [pc, #168]	; (800416c <HAL_DMA_IRQHandler+0xe50>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d108      	bne.n	80040d8 <HAL_DMA_IRQHandler+0xdbc>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 021c 	bic.w	r2, r2, #28
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	e007      	b.n	80040e8 <HAL_DMA_IRQHandler+0xdcc>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 020e 	bic.w	r2, r2, #14
 80040e6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ec:	f003 031f 	and.w	r3, r3, #31
 80040f0:	2201      	movs	r2, #1
 80040f2:	409a      	lsls	r2, r3
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	4798      	blx	r3
 800411e:	e004      	b.n	800412a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004120:	bf00      	nop
 8004122:	e002      	b.n	800412a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004124:	bf00      	nop
 8004126:	e000      	b.n	800412a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004128:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800412a:	3728      	adds	r7, #40	; 0x28
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40020010 	.word	0x40020010
 8004134:	40020028 	.word	0x40020028
 8004138:	40020040 	.word	0x40020040
 800413c:	40020058 	.word	0x40020058
 8004140:	40020070 	.word	0x40020070
 8004144:	40020088 	.word	0x40020088
 8004148:	400200a0 	.word	0x400200a0
 800414c:	400200b8 	.word	0x400200b8
 8004150:	40020410 	.word	0x40020410
 8004154:	40020428 	.word	0x40020428
 8004158:	40020440 	.word	0x40020440
 800415c:	40020458 	.word	0x40020458
 8004160:	40020470 	.word	0x40020470
 8004164:	40020488 	.word	0x40020488
 8004168:	400204a0 	.word	0x400204a0
 800416c:	400204b8 	.word	0x400204b8

08004170 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800417e:	b2db      	uxtb	r3, r3
}
 8004180:	4618      	mov	r0, r3
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041bc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a7f      	ldr	r2, [pc, #508]	; (80043c0 <DMA_SetConfig+0x21c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d072      	beq.n	80042ae <DMA_SetConfig+0x10a>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a7d      	ldr	r2, [pc, #500]	; (80043c4 <DMA_SetConfig+0x220>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d06d      	beq.n	80042ae <DMA_SetConfig+0x10a>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a7c      	ldr	r2, [pc, #496]	; (80043c8 <DMA_SetConfig+0x224>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d068      	beq.n	80042ae <DMA_SetConfig+0x10a>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a7a      	ldr	r2, [pc, #488]	; (80043cc <DMA_SetConfig+0x228>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d063      	beq.n	80042ae <DMA_SetConfig+0x10a>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a79      	ldr	r2, [pc, #484]	; (80043d0 <DMA_SetConfig+0x22c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d05e      	beq.n	80042ae <DMA_SetConfig+0x10a>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a77      	ldr	r2, [pc, #476]	; (80043d4 <DMA_SetConfig+0x230>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d059      	beq.n	80042ae <DMA_SetConfig+0x10a>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a76      	ldr	r2, [pc, #472]	; (80043d8 <DMA_SetConfig+0x234>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d054      	beq.n	80042ae <DMA_SetConfig+0x10a>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a74      	ldr	r2, [pc, #464]	; (80043dc <DMA_SetConfig+0x238>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d04f      	beq.n	80042ae <DMA_SetConfig+0x10a>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a73      	ldr	r2, [pc, #460]	; (80043e0 <DMA_SetConfig+0x23c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d04a      	beq.n	80042ae <DMA_SetConfig+0x10a>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a71      	ldr	r2, [pc, #452]	; (80043e4 <DMA_SetConfig+0x240>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d045      	beq.n	80042ae <DMA_SetConfig+0x10a>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a70      	ldr	r2, [pc, #448]	; (80043e8 <DMA_SetConfig+0x244>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d040      	beq.n	80042ae <DMA_SetConfig+0x10a>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a6e      	ldr	r2, [pc, #440]	; (80043ec <DMA_SetConfig+0x248>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d03b      	beq.n	80042ae <DMA_SetConfig+0x10a>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a6d      	ldr	r2, [pc, #436]	; (80043f0 <DMA_SetConfig+0x24c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d036      	beq.n	80042ae <DMA_SetConfig+0x10a>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a6b      	ldr	r2, [pc, #428]	; (80043f4 <DMA_SetConfig+0x250>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d031      	beq.n	80042ae <DMA_SetConfig+0x10a>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a6a      	ldr	r2, [pc, #424]	; (80043f8 <DMA_SetConfig+0x254>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d02c      	beq.n	80042ae <DMA_SetConfig+0x10a>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a68      	ldr	r2, [pc, #416]	; (80043fc <DMA_SetConfig+0x258>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d027      	beq.n	80042ae <DMA_SetConfig+0x10a>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a67      	ldr	r2, [pc, #412]	; (8004400 <DMA_SetConfig+0x25c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d022      	beq.n	80042ae <DMA_SetConfig+0x10a>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a65      	ldr	r2, [pc, #404]	; (8004404 <DMA_SetConfig+0x260>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d01d      	beq.n	80042ae <DMA_SetConfig+0x10a>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a64      	ldr	r2, [pc, #400]	; (8004408 <DMA_SetConfig+0x264>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d018      	beq.n	80042ae <DMA_SetConfig+0x10a>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a62      	ldr	r2, [pc, #392]	; (800440c <DMA_SetConfig+0x268>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d013      	beq.n	80042ae <DMA_SetConfig+0x10a>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a61      	ldr	r2, [pc, #388]	; (8004410 <DMA_SetConfig+0x26c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00e      	beq.n	80042ae <DMA_SetConfig+0x10a>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a5f      	ldr	r2, [pc, #380]	; (8004414 <DMA_SetConfig+0x270>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d009      	beq.n	80042ae <DMA_SetConfig+0x10a>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a5e      	ldr	r2, [pc, #376]	; (8004418 <DMA_SetConfig+0x274>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d004      	beq.n	80042ae <DMA_SetConfig+0x10a>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a5c      	ldr	r2, [pc, #368]	; (800441c <DMA_SetConfig+0x278>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d101      	bne.n	80042b2 <DMA_SetConfig+0x10e>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <DMA_SetConfig+0x110>
 80042b2:	2300      	movs	r3, #0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00d      	beq.n	80042d4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80042c0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d004      	beq.n	80042d4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80042d2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a39      	ldr	r2, [pc, #228]	; (80043c0 <DMA_SetConfig+0x21c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d04a      	beq.n	8004374 <DMA_SetConfig+0x1d0>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a38      	ldr	r2, [pc, #224]	; (80043c4 <DMA_SetConfig+0x220>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d045      	beq.n	8004374 <DMA_SetConfig+0x1d0>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a36      	ldr	r2, [pc, #216]	; (80043c8 <DMA_SetConfig+0x224>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d040      	beq.n	8004374 <DMA_SetConfig+0x1d0>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a35      	ldr	r2, [pc, #212]	; (80043cc <DMA_SetConfig+0x228>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d03b      	beq.n	8004374 <DMA_SetConfig+0x1d0>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a33      	ldr	r2, [pc, #204]	; (80043d0 <DMA_SetConfig+0x22c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d036      	beq.n	8004374 <DMA_SetConfig+0x1d0>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a32      	ldr	r2, [pc, #200]	; (80043d4 <DMA_SetConfig+0x230>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d031      	beq.n	8004374 <DMA_SetConfig+0x1d0>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a30      	ldr	r2, [pc, #192]	; (80043d8 <DMA_SetConfig+0x234>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d02c      	beq.n	8004374 <DMA_SetConfig+0x1d0>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a2f      	ldr	r2, [pc, #188]	; (80043dc <DMA_SetConfig+0x238>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d027      	beq.n	8004374 <DMA_SetConfig+0x1d0>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a2d      	ldr	r2, [pc, #180]	; (80043e0 <DMA_SetConfig+0x23c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d022      	beq.n	8004374 <DMA_SetConfig+0x1d0>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a2c      	ldr	r2, [pc, #176]	; (80043e4 <DMA_SetConfig+0x240>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d01d      	beq.n	8004374 <DMA_SetConfig+0x1d0>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a2a      	ldr	r2, [pc, #168]	; (80043e8 <DMA_SetConfig+0x244>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d018      	beq.n	8004374 <DMA_SetConfig+0x1d0>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a29      	ldr	r2, [pc, #164]	; (80043ec <DMA_SetConfig+0x248>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d013      	beq.n	8004374 <DMA_SetConfig+0x1d0>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a27      	ldr	r2, [pc, #156]	; (80043f0 <DMA_SetConfig+0x24c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d00e      	beq.n	8004374 <DMA_SetConfig+0x1d0>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a26      	ldr	r2, [pc, #152]	; (80043f4 <DMA_SetConfig+0x250>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d009      	beq.n	8004374 <DMA_SetConfig+0x1d0>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a24      	ldr	r2, [pc, #144]	; (80043f8 <DMA_SetConfig+0x254>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d004      	beq.n	8004374 <DMA_SetConfig+0x1d0>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a23      	ldr	r2, [pc, #140]	; (80043fc <DMA_SetConfig+0x258>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d101      	bne.n	8004378 <DMA_SetConfig+0x1d4>
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <DMA_SetConfig+0x1d6>
 8004378:	2300      	movs	r3, #0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d059      	beq.n	8004432 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004382:	f003 031f 	and.w	r3, r3, #31
 8004386:	223f      	movs	r2, #63	; 0x3f
 8004388:	409a      	lsls	r2, r3
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800439c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b40      	cmp	r3, #64	; 0x40
 80043ac:	d138      	bne.n	8004420 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80043be:	e086      	b.n	80044ce <DMA_SetConfig+0x32a>
 80043c0:	40020010 	.word	0x40020010
 80043c4:	40020028 	.word	0x40020028
 80043c8:	40020040 	.word	0x40020040
 80043cc:	40020058 	.word	0x40020058
 80043d0:	40020070 	.word	0x40020070
 80043d4:	40020088 	.word	0x40020088
 80043d8:	400200a0 	.word	0x400200a0
 80043dc:	400200b8 	.word	0x400200b8
 80043e0:	40020410 	.word	0x40020410
 80043e4:	40020428 	.word	0x40020428
 80043e8:	40020440 	.word	0x40020440
 80043ec:	40020458 	.word	0x40020458
 80043f0:	40020470 	.word	0x40020470
 80043f4:	40020488 	.word	0x40020488
 80043f8:	400204a0 	.word	0x400204a0
 80043fc:	400204b8 	.word	0x400204b8
 8004400:	58025408 	.word	0x58025408
 8004404:	5802541c 	.word	0x5802541c
 8004408:	58025430 	.word	0x58025430
 800440c:	58025444 	.word	0x58025444
 8004410:	58025458 	.word	0x58025458
 8004414:	5802546c 	.word	0x5802546c
 8004418:	58025480 	.word	0x58025480
 800441c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	60da      	str	r2, [r3, #12]
}
 8004430:	e04d      	b.n	80044ce <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a29      	ldr	r2, [pc, #164]	; (80044dc <DMA_SetConfig+0x338>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d022      	beq.n	8004482 <DMA_SetConfig+0x2de>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a27      	ldr	r2, [pc, #156]	; (80044e0 <DMA_SetConfig+0x33c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d01d      	beq.n	8004482 <DMA_SetConfig+0x2de>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a26      	ldr	r2, [pc, #152]	; (80044e4 <DMA_SetConfig+0x340>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d018      	beq.n	8004482 <DMA_SetConfig+0x2de>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a24      	ldr	r2, [pc, #144]	; (80044e8 <DMA_SetConfig+0x344>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d013      	beq.n	8004482 <DMA_SetConfig+0x2de>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a23      	ldr	r2, [pc, #140]	; (80044ec <DMA_SetConfig+0x348>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00e      	beq.n	8004482 <DMA_SetConfig+0x2de>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a21      	ldr	r2, [pc, #132]	; (80044f0 <DMA_SetConfig+0x34c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d009      	beq.n	8004482 <DMA_SetConfig+0x2de>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a20      	ldr	r2, [pc, #128]	; (80044f4 <DMA_SetConfig+0x350>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d004      	beq.n	8004482 <DMA_SetConfig+0x2de>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a1e      	ldr	r2, [pc, #120]	; (80044f8 <DMA_SetConfig+0x354>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d101      	bne.n	8004486 <DMA_SetConfig+0x2e2>
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <DMA_SetConfig+0x2e4>
 8004486:	2300      	movs	r3, #0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d020      	beq.n	80044ce <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004490:	f003 031f 	and.w	r3, r3, #31
 8004494:	2201      	movs	r2, #1
 8004496:	409a      	lsls	r2, r3
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2b40      	cmp	r3, #64	; 0x40
 80044aa:	d108      	bne.n	80044be <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	60da      	str	r2, [r3, #12]
}
 80044bc:	e007      	b.n	80044ce <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	60da      	str	r2, [r3, #12]
}
 80044ce:	bf00      	nop
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	58025408 	.word	0x58025408
 80044e0:	5802541c 	.word	0x5802541c
 80044e4:	58025430 	.word	0x58025430
 80044e8:	58025444 	.word	0x58025444
 80044ec:	58025458 	.word	0x58025458
 80044f0:	5802546c 	.word	0x5802546c
 80044f4:	58025480 	.word	0x58025480
 80044f8:	58025494 	.word	0x58025494

080044fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a42      	ldr	r2, [pc, #264]	; (8004614 <DMA_CalcBaseAndBitshift+0x118>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d04a      	beq.n	80045a4 <DMA_CalcBaseAndBitshift+0xa8>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a41      	ldr	r2, [pc, #260]	; (8004618 <DMA_CalcBaseAndBitshift+0x11c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d045      	beq.n	80045a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a3f      	ldr	r2, [pc, #252]	; (800461c <DMA_CalcBaseAndBitshift+0x120>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d040      	beq.n	80045a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a3e      	ldr	r2, [pc, #248]	; (8004620 <DMA_CalcBaseAndBitshift+0x124>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d03b      	beq.n	80045a4 <DMA_CalcBaseAndBitshift+0xa8>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a3c      	ldr	r2, [pc, #240]	; (8004624 <DMA_CalcBaseAndBitshift+0x128>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d036      	beq.n	80045a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a3b      	ldr	r2, [pc, #236]	; (8004628 <DMA_CalcBaseAndBitshift+0x12c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d031      	beq.n	80045a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a39      	ldr	r2, [pc, #228]	; (800462c <DMA_CalcBaseAndBitshift+0x130>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d02c      	beq.n	80045a4 <DMA_CalcBaseAndBitshift+0xa8>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a38      	ldr	r2, [pc, #224]	; (8004630 <DMA_CalcBaseAndBitshift+0x134>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d027      	beq.n	80045a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a36      	ldr	r2, [pc, #216]	; (8004634 <DMA_CalcBaseAndBitshift+0x138>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d022      	beq.n	80045a4 <DMA_CalcBaseAndBitshift+0xa8>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a35      	ldr	r2, [pc, #212]	; (8004638 <DMA_CalcBaseAndBitshift+0x13c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d01d      	beq.n	80045a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a33      	ldr	r2, [pc, #204]	; (800463c <DMA_CalcBaseAndBitshift+0x140>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d018      	beq.n	80045a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a32      	ldr	r2, [pc, #200]	; (8004640 <DMA_CalcBaseAndBitshift+0x144>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d013      	beq.n	80045a4 <DMA_CalcBaseAndBitshift+0xa8>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a30      	ldr	r2, [pc, #192]	; (8004644 <DMA_CalcBaseAndBitshift+0x148>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d00e      	beq.n	80045a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a2f      	ldr	r2, [pc, #188]	; (8004648 <DMA_CalcBaseAndBitshift+0x14c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d009      	beq.n	80045a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a2d      	ldr	r2, [pc, #180]	; (800464c <DMA_CalcBaseAndBitshift+0x150>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d004      	beq.n	80045a4 <DMA_CalcBaseAndBitshift+0xa8>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a2c      	ldr	r2, [pc, #176]	; (8004650 <DMA_CalcBaseAndBitshift+0x154>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d101      	bne.n	80045a8 <DMA_CalcBaseAndBitshift+0xac>
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <DMA_CalcBaseAndBitshift+0xae>
 80045a8:	2300      	movs	r3, #0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d024      	beq.n	80045f8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	3b10      	subs	r3, #16
 80045b6:	4a27      	ldr	r2, [pc, #156]	; (8004654 <DMA_CalcBaseAndBitshift+0x158>)
 80045b8:	fba2 2303 	umull	r2, r3, r2, r3
 80045bc:	091b      	lsrs	r3, r3, #4
 80045be:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	4a24      	ldr	r2, [pc, #144]	; (8004658 <DMA_CalcBaseAndBitshift+0x15c>)
 80045c8:	5cd3      	ldrb	r3, [r2, r3]
 80045ca:	461a      	mov	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	d908      	bls.n	80045e8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	4b1f      	ldr	r3, [pc, #124]	; (800465c <DMA_CalcBaseAndBitshift+0x160>)
 80045de:	4013      	ands	r3, r2
 80045e0:	1d1a      	adds	r2, r3, #4
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	659a      	str	r2, [r3, #88]	; 0x58
 80045e6:	e00d      	b.n	8004604 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	461a      	mov	r2, r3
 80045ee:	4b1b      	ldr	r3, [pc, #108]	; (800465c <DMA_CalcBaseAndBitshift+0x160>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6593      	str	r3, [r2, #88]	; 0x58
 80045f6:	e005      	b.n	8004604 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004608:	4618      	mov	r0, r3
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	40020010 	.word	0x40020010
 8004618:	40020028 	.word	0x40020028
 800461c:	40020040 	.word	0x40020040
 8004620:	40020058 	.word	0x40020058
 8004624:	40020070 	.word	0x40020070
 8004628:	40020088 	.word	0x40020088
 800462c:	400200a0 	.word	0x400200a0
 8004630:	400200b8 	.word	0x400200b8
 8004634:	40020410 	.word	0x40020410
 8004638:	40020428 	.word	0x40020428
 800463c:	40020440 	.word	0x40020440
 8004640:	40020458 	.word	0x40020458
 8004644:	40020470 	.word	0x40020470
 8004648:	40020488 	.word	0x40020488
 800464c:	400204a0 	.word	0x400204a0
 8004650:	400204b8 	.word	0x400204b8
 8004654:	aaaaaaab 	.word	0xaaaaaaab
 8004658:	080158a8 	.word	0x080158a8
 800465c:	fffffc00 	.word	0xfffffc00

08004660 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d120      	bne.n	80046b6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004678:	2b03      	cmp	r3, #3
 800467a:	d858      	bhi.n	800472e <DMA_CheckFifoParam+0xce>
 800467c:	a201      	add	r2, pc, #4	; (adr r2, 8004684 <DMA_CheckFifoParam+0x24>)
 800467e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004682:	bf00      	nop
 8004684:	08004695 	.word	0x08004695
 8004688:	080046a7 	.word	0x080046a7
 800468c:	08004695 	.word	0x08004695
 8004690:	0800472f 	.word	0x0800472f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d048      	beq.n	8004732 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046a4:	e045      	b.n	8004732 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046ae:	d142      	bne.n	8004736 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046b4:	e03f      	b.n	8004736 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046be:	d123      	bne.n	8004708 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d838      	bhi.n	800473a <DMA_CheckFifoParam+0xda>
 80046c8:	a201      	add	r2, pc, #4	; (adr r2, 80046d0 <DMA_CheckFifoParam+0x70>)
 80046ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ce:	bf00      	nop
 80046d0:	080046e1 	.word	0x080046e1
 80046d4:	080046e7 	.word	0x080046e7
 80046d8:	080046e1 	.word	0x080046e1
 80046dc:	080046f9 	.word	0x080046f9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	73fb      	strb	r3, [r7, #15]
        break;
 80046e4:	e030      	b.n	8004748 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d025      	beq.n	800473e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046f6:	e022      	b.n	800473e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004700:	d11f      	bne.n	8004742 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004706:	e01c      	b.n	8004742 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470c:	2b02      	cmp	r3, #2
 800470e:	d902      	bls.n	8004716 <DMA_CheckFifoParam+0xb6>
 8004710:	2b03      	cmp	r3, #3
 8004712:	d003      	beq.n	800471c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004714:	e018      	b.n	8004748 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	73fb      	strb	r3, [r7, #15]
        break;
 800471a:	e015      	b.n	8004748 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00e      	beq.n	8004746 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	73fb      	strb	r3, [r7, #15]
    break;
 800472c:	e00b      	b.n	8004746 <DMA_CheckFifoParam+0xe6>
        break;
 800472e:	bf00      	nop
 8004730:	e00a      	b.n	8004748 <DMA_CheckFifoParam+0xe8>
        break;
 8004732:	bf00      	nop
 8004734:	e008      	b.n	8004748 <DMA_CheckFifoParam+0xe8>
        break;
 8004736:	bf00      	nop
 8004738:	e006      	b.n	8004748 <DMA_CheckFifoParam+0xe8>
        break;
 800473a:	bf00      	nop
 800473c:	e004      	b.n	8004748 <DMA_CheckFifoParam+0xe8>
        break;
 800473e:	bf00      	nop
 8004740:	e002      	b.n	8004748 <DMA_CheckFifoParam+0xe8>
        break;
 8004742:	bf00      	nop
 8004744:	e000      	b.n	8004748 <DMA_CheckFifoParam+0xe8>
    break;
 8004746:	bf00      	nop
    }
  }

  return status;
 8004748:	7bfb      	ldrb	r3, [r7, #15]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop

08004758 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a38      	ldr	r2, [pc, #224]	; (800484c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d022      	beq.n	80047b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a36      	ldr	r2, [pc, #216]	; (8004850 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d01d      	beq.n	80047b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a35      	ldr	r2, [pc, #212]	; (8004854 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d018      	beq.n	80047b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a33      	ldr	r2, [pc, #204]	; (8004858 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d013      	beq.n	80047b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a32      	ldr	r2, [pc, #200]	; (800485c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d00e      	beq.n	80047b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a30      	ldr	r2, [pc, #192]	; (8004860 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d009      	beq.n	80047b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a2f      	ldr	r2, [pc, #188]	; (8004864 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d004      	beq.n	80047b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a2d      	ldr	r2, [pc, #180]	; (8004868 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d101      	bne.n	80047ba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80047ba:	2300      	movs	r3, #0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01a      	beq.n	80047f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	3b08      	subs	r3, #8
 80047c8:	4a28      	ldr	r2, [pc, #160]	; (800486c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80047ca:	fba2 2303 	umull	r2, r3, r2, r3
 80047ce:	091b      	lsrs	r3, r3, #4
 80047d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4b26      	ldr	r3, [pc, #152]	; (8004870 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80047d6:	4413      	add	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	461a      	mov	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a24      	ldr	r2, [pc, #144]	; (8004874 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80047e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f003 031f 	and.w	r3, r3, #31
 80047ec:	2201      	movs	r2, #1
 80047ee:	409a      	lsls	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80047f4:	e024      	b.n	8004840 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	3b10      	subs	r3, #16
 80047fe:	4a1e      	ldr	r2, [pc, #120]	; (8004878 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004800:	fba2 2303 	umull	r2, r3, r2, r3
 8004804:	091b      	lsrs	r3, r3, #4
 8004806:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4a1c      	ldr	r2, [pc, #112]	; (800487c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d806      	bhi.n	800481e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	4a1b      	ldr	r2, [pc, #108]	; (8004880 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d902      	bls.n	800481e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3308      	adds	r3, #8
 800481c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4b18      	ldr	r3, [pc, #96]	; (8004884 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	461a      	mov	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a16      	ldr	r2, [pc, #88]	; (8004888 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004830:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	2201      	movs	r2, #1
 800483a:	409a      	lsls	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004840:	bf00      	nop
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	58025408 	.word	0x58025408
 8004850:	5802541c 	.word	0x5802541c
 8004854:	58025430 	.word	0x58025430
 8004858:	58025444 	.word	0x58025444
 800485c:	58025458 	.word	0x58025458
 8004860:	5802546c 	.word	0x5802546c
 8004864:	58025480 	.word	0x58025480
 8004868:	58025494 	.word	0x58025494
 800486c:	cccccccd 	.word	0xcccccccd
 8004870:	16009600 	.word	0x16009600
 8004874:	58025880 	.word	0x58025880
 8004878:	aaaaaaab 	.word	0xaaaaaaab
 800487c:	400204b8 	.word	0x400204b8
 8004880:	4002040f 	.word	0x4002040f
 8004884:	10008200 	.word	0x10008200
 8004888:	40020880 	.word	0x40020880

0800488c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	b2db      	uxtb	r3, r3
 800489a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d04a      	beq.n	8004938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d847      	bhi.n	8004938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a25      	ldr	r2, [pc, #148]	; (8004944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d022      	beq.n	80048f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a24      	ldr	r2, [pc, #144]	; (8004948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d01d      	beq.n	80048f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a22      	ldr	r2, [pc, #136]	; (800494c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d018      	beq.n	80048f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a21      	ldr	r2, [pc, #132]	; (8004950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d013      	beq.n	80048f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a1f      	ldr	r2, [pc, #124]	; (8004954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00e      	beq.n	80048f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a1e      	ldr	r2, [pc, #120]	; (8004958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d009      	beq.n	80048f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a1c      	ldr	r2, [pc, #112]	; (800495c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d004      	beq.n	80048f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1b      	ldr	r2, [pc, #108]	; (8004960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d101      	bne.n	80048fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80048fc:	2300      	movs	r3, #0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	4b17      	ldr	r3, [pc, #92]	; (8004964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004906:	4413      	add	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	461a      	mov	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a15      	ldr	r2, [pc, #84]	; (8004968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004914:	671a      	str	r2, [r3, #112]	; 0x70
 8004916:	e009      	b.n	800492c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4b14      	ldr	r3, [pc, #80]	; (800496c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800491c:	4413      	add	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	461a      	mov	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a11      	ldr	r2, [pc, #68]	; (8004970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800492a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3b01      	subs	r3, #1
 8004930:	2201      	movs	r2, #1
 8004932:	409a      	lsls	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004938:	bf00      	nop
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	58025408 	.word	0x58025408
 8004948:	5802541c 	.word	0x5802541c
 800494c:	58025430 	.word	0x58025430
 8004950:	58025444 	.word	0x58025444
 8004954:	58025458 	.word	0x58025458
 8004958:	5802546c 	.word	0x5802546c
 800495c:	58025480 	.word	0x58025480
 8004960:	58025494 	.word	0x58025494
 8004964:	1600963f 	.word	0x1600963f
 8004968:	58025940 	.word	0x58025940
 800496c:	1000823f 	.word	0x1000823f
 8004970:	40020940 	.word	0x40020940

08004974 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004974:	b480      	push	{r7}
 8004976:	b089      	sub	sp, #36	; 0x24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800497e:	2300      	movs	r3, #0
 8004980:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004982:	4b86      	ldr	r3, [pc, #536]	; (8004b9c <HAL_GPIO_Init+0x228>)
 8004984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004986:	e18c      	b.n	8004ca2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	2101      	movs	r1, #1
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	fa01 f303 	lsl.w	r3, r1, r3
 8004994:	4013      	ands	r3, r2
 8004996:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 817e 	beq.w	8004c9c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d005      	beq.n	80049b8 <HAL_GPIO_Init+0x44>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d130      	bne.n	8004a1a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	2203      	movs	r2, #3
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	43db      	mvns	r3, r3
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	4013      	ands	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	4313      	orrs	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049ee:	2201      	movs	r2, #1
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	43db      	mvns	r3, r3
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	4013      	ands	r3, r2
 80049fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	091b      	lsrs	r3, r3, #4
 8004a04:	f003 0201 	and.w	r2, r3, #1
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	2b03      	cmp	r3, #3
 8004a24:	d017      	beq.n	8004a56 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	2203      	movs	r2, #3
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	43db      	mvns	r3, r3
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d123      	bne.n	8004aaa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	08da      	lsrs	r2, r3, #3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	3208      	adds	r2, #8
 8004a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	220f      	movs	r2, #15
 8004a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7e:	43db      	mvns	r3, r3
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	4013      	ands	r3, r2
 8004a84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	fa02 f303 	lsl.w	r3, r2, r3
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	08da      	lsrs	r2, r3, #3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3208      	adds	r2, #8
 8004aa4:	69b9      	ldr	r1, [r7, #24]
 8004aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	2203      	movs	r2, #3
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	43db      	mvns	r3, r3
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f003 0203 	and.w	r2, r3, #3
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 80d8 	beq.w	8004c9c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aec:	4b2c      	ldr	r3, [pc, #176]	; (8004ba0 <HAL_GPIO_Init+0x22c>)
 8004aee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004af2:	4a2b      	ldr	r2, [pc, #172]	; (8004ba0 <HAL_GPIO_Init+0x22c>)
 8004af4:	f043 0302 	orr.w	r3, r3, #2
 8004af8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004afc:	4b28      	ldr	r3, [pc, #160]	; (8004ba0 <HAL_GPIO_Init+0x22c>)
 8004afe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b0a:	4a26      	ldr	r2, [pc, #152]	; (8004ba4 <HAL_GPIO_Init+0x230>)
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	089b      	lsrs	r3, r3, #2
 8004b10:	3302      	adds	r3, #2
 8004b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	220f      	movs	r2, #15
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	43db      	mvns	r3, r3
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a1d      	ldr	r2, [pc, #116]	; (8004ba8 <HAL_GPIO_Init+0x234>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d04a      	beq.n	8004bcc <HAL_GPIO_Init+0x258>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a1c      	ldr	r2, [pc, #112]	; (8004bac <HAL_GPIO_Init+0x238>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d02b      	beq.n	8004b96 <HAL_GPIO_Init+0x222>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a1b      	ldr	r2, [pc, #108]	; (8004bb0 <HAL_GPIO_Init+0x23c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d025      	beq.n	8004b92 <HAL_GPIO_Init+0x21e>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a1a      	ldr	r2, [pc, #104]	; (8004bb4 <HAL_GPIO_Init+0x240>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d01f      	beq.n	8004b8e <HAL_GPIO_Init+0x21a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a19      	ldr	r2, [pc, #100]	; (8004bb8 <HAL_GPIO_Init+0x244>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d019      	beq.n	8004b8a <HAL_GPIO_Init+0x216>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a18      	ldr	r2, [pc, #96]	; (8004bbc <HAL_GPIO_Init+0x248>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d013      	beq.n	8004b86 <HAL_GPIO_Init+0x212>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a17      	ldr	r2, [pc, #92]	; (8004bc0 <HAL_GPIO_Init+0x24c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d00d      	beq.n	8004b82 <HAL_GPIO_Init+0x20e>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a16      	ldr	r2, [pc, #88]	; (8004bc4 <HAL_GPIO_Init+0x250>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d007      	beq.n	8004b7e <HAL_GPIO_Init+0x20a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a15      	ldr	r2, [pc, #84]	; (8004bc8 <HAL_GPIO_Init+0x254>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d101      	bne.n	8004b7a <HAL_GPIO_Init+0x206>
 8004b76:	2309      	movs	r3, #9
 8004b78:	e029      	b.n	8004bce <HAL_GPIO_Init+0x25a>
 8004b7a:	230a      	movs	r3, #10
 8004b7c:	e027      	b.n	8004bce <HAL_GPIO_Init+0x25a>
 8004b7e:	2307      	movs	r3, #7
 8004b80:	e025      	b.n	8004bce <HAL_GPIO_Init+0x25a>
 8004b82:	2306      	movs	r3, #6
 8004b84:	e023      	b.n	8004bce <HAL_GPIO_Init+0x25a>
 8004b86:	2305      	movs	r3, #5
 8004b88:	e021      	b.n	8004bce <HAL_GPIO_Init+0x25a>
 8004b8a:	2304      	movs	r3, #4
 8004b8c:	e01f      	b.n	8004bce <HAL_GPIO_Init+0x25a>
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e01d      	b.n	8004bce <HAL_GPIO_Init+0x25a>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e01b      	b.n	8004bce <HAL_GPIO_Init+0x25a>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e019      	b.n	8004bce <HAL_GPIO_Init+0x25a>
 8004b9a:	bf00      	nop
 8004b9c:	58000080 	.word	0x58000080
 8004ba0:	58024400 	.word	0x58024400
 8004ba4:	58000400 	.word	0x58000400
 8004ba8:	58020000 	.word	0x58020000
 8004bac:	58020400 	.word	0x58020400
 8004bb0:	58020800 	.word	0x58020800
 8004bb4:	58020c00 	.word	0x58020c00
 8004bb8:	58021000 	.word	0x58021000
 8004bbc:	58021400 	.word	0x58021400
 8004bc0:	58021800 	.word	0x58021800
 8004bc4:	58021c00 	.word	0x58021c00
 8004bc8:	58022400 	.word	0x58022400
 8004bcc:	2300      	movs	r3, #0
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	f002 0203 	and.w	r2, r2, #3
 8004bd4:	0092      	lsls	r2, r2, #2
 8004bd6:	4093      	lsls	r3, r2
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bde:	4938      	ldr	r1, [pc, #224]	; (8004cc0 <HAL_GPIO_Init+0x34c>)
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	089b      	lsrs	r3, r3, #2
 8004be4:	3302      	adds	r3, #2
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004c12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	43db      	mvns	r3, r3
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004c40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	43db      	mvns	r3, r3
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	4013      	ands	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	43db      	mvns	r3, r3
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f47f ae6b 	bne.w	8004988 <HAL_GPIO_Init+0x14>
  }
}
 8004cb2:	bf00      	nop
 8004cb4:	bf00      	nop
 8004cb6:	3724      	adds	r7, #36	; 0x24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	58000400 	.word	0x58000400

08004cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	807b      	strh	r3, [r7, #2]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cd4:	787b      	ldrb	r3, [r7, #1]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cda:	887a      	ldrh	r2, [r7, #2]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004ce0:	e003      	b.n	8004cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004ce2:	887b      	ldrh	r3, [r7, #2]
 8004ce4:	041a      	lsls	r2, r3, #16
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	619a      	str	r2, [r3, #24]
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
	...

08004cf8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004d00:	4b19      	ldr	r3, [pc, #100]	; (8004d68 <HAL_PWREx_ConfigSupply+0x70>)
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d00a      	beq.n	8004d22 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004d0c:	4b16      	ldr	r3, [pc, #88]	; (8004d68 <HAL_PWREx_ConfigSupply+0x70>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d001      	beq.n	8004d1e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e01f      	b.n	8004d5e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e01d      	b.n	8004d5e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004d22:	4b11      	ldr	r3, [pc, #68]	; (8004d68 <HAL_PWREx_ConfigSupply+0x70>)
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f023 0207 	bic.w	r2, r3, #7
 8004d2a:	490f      	ldr	r1, [pc, #60]	; (8004d68 <HAL_PWREx_ConfigSupply+0x70>)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004d32:	f7fc fee1 	bl	8001af8 <HAL_GetTick>
 8004d36:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d38:	e009      	b.n	8004d4e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004d3a:	f7fc fedd 	bl	8001af8 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d48:	d901      	bls.n	8004d4e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e007      	b.n	8004d5e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d4e:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <HAL_PWREx_ConfigSupply+0x70>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d5a:	d1ee      	bne.n	8004d3a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	58024800 	.word	0x58024800

08004d6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08c      	sub	sp, #48	; 0x30
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e3c8      	b.n	8005510 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 8087 	beq.w	8004e9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d8c:	4b88      	ldr	r3, [pc, #544]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d96:	4b86      	ldr	r3, [pc, #536]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9e:	2b10      	cmp	r3, #16
 8004da0:	d007      	beq.n	8004db2 <HAL_RCC_OscConfig+0x46>
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	2b18      	cmp	r3, #24
 8004da6:	d110      	bne.n	8004dca <HAL_RCC_OscConfig+0x5e>
 8004da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d10b      	bne.n	8004dca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db2:	4b7f      	ldr	r3, [pc, #508]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d06c      	beq.n	8004e98 <HAL_RCC_OscConfig+0x12c>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d168      	bne.n	8004e98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e3a2      	b.n	8005510 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd2:	d106      	bne.n	8004de2 <HAL_RCC_OscConfig+0x76>
 8004dd4:	4b76      	ldr	r3, [pc, #472]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a75      	ldr	r2, [pc, #468]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dde:	6013      	str	r3, [r2, #0]
 8004de0:	e02e      	b.n	8004e40 <HAL_RCC_OscConfig+0xd4>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10c      	bne.n	8004e04 <HAL_RCC_OscConfig+0x98>
 8004dea:	4b71      	ldr	r3, [pc, #452]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a70      	ldr	r2, [pc, #448]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	4b6e      	ldr	r3, [pc, #440]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a6d      	ldr	r2, [pc, #436]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	e01d      	b.n	8004e40 <HAL_RCC_OscConfig+0xd4>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e0c:	d10c      	bne.n	8004e28 <HAL_RCC_OscConfig+0xbc>
 8004e0e:	4b68      	ldr	r3, [pc, #416]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a67      	ldr	r2, [pc, #412]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	4b65      	ldr	r3, [pc, #404]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a64      	ldr	r2, [pc, #400]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	e00b      	b.n	8004e40 <HAL_RCC_OscConfig+0xd4>
 8004e28:	4b61      	ldr	r3, [pc, #388]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a60      	ldr	r2, [pc, #384]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	4b5e      	ldr	r3, [pc, #376]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a5d      	ldr	r2, [pc, #372]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d013      	beq.n	8004e70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e48:	f7fc fe56 	bl	8001af8 <HAL_GetTick>
 8004e4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e50:	f7fc fe52 	bl	8001af8 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b64      	cmp	r3, #100	; 0x64
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e356      	b.n	8005510 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e62:	4b53      	ldr	r3, [pc, #332]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0f0      	beq.n	8004e50 <HAL_RCC_OscConfig+0xe4>
 8004e6e:	e014      	b.n	8004e9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e70:	f7fc fe42 	bl	8001af8 <HAL_GetTick>
 8004e74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e78:	f7fc fe3e 	bl	8001af8 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b64      	cmp	r3, #100	; 0x64
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e342      	b.n	8005510 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e8a:	4b49      	ldr	r3, [pc, #292]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1f0      	bne.n	8004e78 <HAL_RCC_OscConfig+0x10c>
 8004e96:	e000      	b.n	8004e9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 808c 	beq.w	8004fc0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ea8:	4b41      	ldr	r3, [pc, #260]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004eb0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004eb2:	4b3f      	ldr	r3, [pc, #252]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d007      	beq.n	8004ece <HAL_RCC_OscConfig+0x162>
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	2b18      	cmp	r3, #24
 8004ec2:	d137      	bne.n	8004f34 <HAL_RCC_OscConfig+0x1c8>
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	f003 0303 	and.w	r3, r3, #3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d132      	bne.n	8004f34 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ece:	4b38      	ldr	r3, [pc, #224]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0304 	and.w	r3, r3, #4
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d005      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x17a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e314      	b.n	8005510 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ee6:	4b32      	ldr	r3, [pc, #200]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f023 0219 	bic.w	r2, r3, #25
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	492f      	ldr	r1, [pc, #188]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef8:	f7fc fdfe 	bl	8001af8 <HAL_GetTick>
 8004efc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f00:	f7fc fdfa 	bl	8001af8 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e2fe      	b.n	8005510 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f12:	4b27      	ldr	r3, [pc, #156]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f0      	beq.n	8004f00 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f1e:	4b24      	ldr	r3, [pc, #144]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	061b      	lsls	r3, r3, #24
 8004f2c:	4920      	ldr	r1, [pc, #128]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f32:	e045      	b.n	8004fc0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d026      	beq.n	8004f8a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004f3c:	4b1c      	ldr	r3, [pc, #112]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f023 0219 	bic.w	r2, r3, #25
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	4919      	ldr	r1, [pc, #100]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4e:	f7fc fdd3 	bl	8001af8 <HAL_GetTick>
 8004f52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f56:	f7fc fdcf 	bl	8001af8 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e2d3      	b.n	8005510 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f68:	4b11      	ldr	r3, [pc, #68]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0f0      	beq.n	8004f56 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f74:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	061b      	lsls	r3, r3, #24
 8004f82:	490b      	ldr	r1, [pc, #44]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	604b      	str	r3, [r1, #4]
 8004f88:	e01a      	b.n	8004fc0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f8a:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a08      	ldr	r2, [pc, #32]	; (8004fb0 <HAL_RCC_OscConfig+0x244>)
 8004f90:	f023 0301 	bic.w	r3, r3, #1
 8004f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f96:	f7fc fdaf 	bl	8001af8 <HAL_GetTick>
 8004f9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f9c:	e00a      	b.n	8004fb4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f9e:	f7fc fdab 	bl	8001af8 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d903      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e2af      	b.n	8005510 <HAL_RCC_OscConfig+0x7a4>
 8004fb0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004fb4:	4b96      	ldr	r3, [pc, #600]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1ee      	bne.n	8004f9e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0310 	and.w	r3, r3, #16
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d06a      	beq.n	80050a2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fcc:	4b90      	ldr	r3, [pc, #576]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fd4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004fd6:	4b8e      	ldr	r3, [pc, #568]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	2b08      	cmp	r3, #8
 8004fe0:	d007      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x286>
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	2b18      	cmp	r3, #24
 8004fe6:	d11b      	bne.n	8005020 <HAL_RCC_OscConfig+0x2b4>
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d116      	bne.n	8005020 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ff2:	4b87      	ldr	r3, [pc, #540]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d005      	beq.n	800500a <HAL_RCC_OscConfig+0x29e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	2b80      	cmp	r3, #128	; 0x80
 8005004:	d001      	beq.n	800500a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e282      	b.n	8005510 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800500a:	4b81      	ldr	r3, [pc, #516]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	061b      	lsls	r3, r3, #24
 8005018:	497d      	ldr	r1, [pc, #500]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 800501a:	4313      	orrs	r3, r2
 800501c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800501e:	e040      	b.n	80050a2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d023      	beq.n	8005070 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005028:	4b79      	ldr	r3, [pc, #484]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a78      	ldr	r2, [pc, #480]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 800502e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fc fd60 	bl	8001af8 <HAL_GetTick>
 8005038:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800503c:	f7fc fd5c 	bl	8001af8 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e260      	b.n	8005510 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800504e:	4b70      	ldr	r3, [pc, #448]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800505a:	4b6d      	ldr	r3, [pc, #436]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	061b      	lsls	r3, r3, #24
 8005068:	4969      	ldr	r1, [pc, #420]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 800506a:	4313      	orrs	r3, r2
 800506c:	60cb      	str	r3, [r1, #12]
 800506e:	e018      	b.n	80050a2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005070:	4b67      	ldr	r3, [pc, #412]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a66      	ldr	r2, [pc, #408]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 8005076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800507a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507c:	f7fc fd3c 	bl	8001af8 <HAL_GetTick>
 8005080:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005084:	f7fc fd38 	bl	8001af8 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e23c      	b.n	8005510 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005096:	4b5e      	ldr	r3, [pc, #376]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1f0      	bne.n	8005084 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d036      	beq.n	800511c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d019      	beq.n	80050ea <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050b6:	4b56      	ldr	r3, [pc, #344]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 80050b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ba:	4a55      	ldr	r2, [pc, #340]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c2:	f7fc fd19 	bl	8001af8 <HAL_GetTick>
 80050c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050c8:	e008      	b.n	80050dc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050ca:	f7fc fd15 	bl	8001af8 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e219      	b.n	8005510 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050dc:	4b4c      	ldr	r3, [pc, #304]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 80050de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f0      	beq.n	80050ca <HAL_RCC_OscConfig+0x35e>
 80050e8:	e018      	b.n	800511c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050ea:	4b49      	ldr	r3, [pc, #292]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 80050ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ee:	4a48      	ldr	r2, [pc, #288]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 80050f0:	f023 0301 	bic.w	r3, r3, #1
 80050f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f6:	f7fc fcff 	bl	8001af8 <HAL_GetTick>
 80050fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050fe:	f7fc fcfb 	bl	8001af8 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e1ff      	b.n	8005510 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005110:	4b3f      	ldr	r3, [pc, #252]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 8005112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1f0      	bne.n	80050fe <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b00      	cmp	r3, #0
 8005126:	d036      	beq.n	8005196 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d019      	beq.n	8005164 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005130:	4b37      	ldr	r3, [pc, #220]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a36      	ldr	r2, [pc, #216]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 8005136:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800513a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800513c:	f7fc fcdc 	bl	8001af8 <HAL_GetTick>
 8005140:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005144:	f7fc fcd8 	bl	8001af8 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e1dc      	b.n	8005510 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005156:	4b2e      	ldr	r3, [pc, #184]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0f0      	beq.n	8005144 <HAL_RCC_OscConfig+0x3d8>
 8005162:	e018      	b.n	8005196 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005164:	4b2a      	ldr	r3, [pc, #168]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a29      	ldr	r2, [pc, #164]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 800516a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800516e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005170:	f7fc fcc2 	bl	8001af8 <HAL_GetTick>
 8005174:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005178:	f7fc fcbe 	bl	8001af8 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e1c2      	b.n	8005510 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800518a:	4b21      	ldr	r3, [pc, #132]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1f0      	bne.n	8005178 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 8086 	beq.w	80052b0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051a4:	4b1b      	ldr	r3, [pc, #108]	; (8005214 <HAL_RCC_OscConfig+0x4a8>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a1a      	ldr	r2, [pc, #104]	; (8005214 <HAL_RCC_OscConfig+0x4a8>)
 80051aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051b0:	f7fc fca2 	bl	8001af8 <HAL_GetTick>
 80051b4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051b8:	f7fc fc9e 	bl	8001af8 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b64      	cmp	r3, #100	; 0x64
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e1a2      	b.n	8005510 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051ca:	4b12      	ldr	r3, [pc, #72]	; (8005214 <HAL_RCC_OscConfig+0x4a8>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0f0      	beq.n	80051b8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d106      	bne.n	80051ec <HAL_RCC_OscConfig+0x480>
 80051de:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 80051e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e2:	4a0b      	ldr	r2, [pc, #44]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 80051e4:	f043 0301 	orr.w	r3, r3, #1
 80051e8:	6713      	str	r3, [r2, #112]	; 0x70
 80051ea:	e032      	b.n	8005252 <HAL_RCC_OscConfig+0x4e6>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d111      	bne.n	8005218 <HAL_RCC_OscConfig+0x4ac>
 80051f4:	4b06      	ldr	r3, [pc, #24]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 80051f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f8:	4a05      	ldr	r2, [pc, #20]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 80051fa:	f023 0301 	bic.w	r3, r3, #1
 80051fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005200:	4b03      	ldr	r3, [pc, #12]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 8005202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005204:	4a02      	ldr	r2, [pc, #8]	; (8005210 <HAL_RCC_OscConfig+0x4a4>)
 8005206:	f023 0304 	bic.w	r3, r3, #4
 800520a:	6713      	str	r3, [r2, #112]	; 0x70
 800520c:	e021      	b.n	8005252 <HAL_RCC_OscConfig+0x4e6>
 800520e:	bf00      	nop
 8005210:	58024400 	.word	0x58024400
 8005214:	58024800 	.word	0x58024800
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b05      	cmp	r3, #5
 800521e:	d10c      	bne.n	800523a <HAL_RCC_OscConfig+0x4ce>
 8005220:	4b83      	ldr	r3, [pc, #524]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 8005222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005224:	4a82      	ldr	r2, [pc, #520]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 8005226:	f043 0304 	orr.w	r3, r3, #4
 800522a:	6713      	str	r3, [r2, #112]	; 0x70
 800522c:	4b80      	ldr	r3, [pc, #512]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 800522e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005230:	4a7f      	ldr	r2, [pc, #508]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 8005232:	f043 0301 	orr.w	r3, r3, #1
 8005236:	6713      	str	r3, [r2, #112]	; 0x70
 8005238:	e00b      	b.n	8005252 <HAL_RCC_OscConfig+0x4e6>
 800523a:	4b7d      	ldr	r3, [pc, #500]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 800523c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523e:	4a7c      	ldr	r2, [pc, #496]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 8005240:	f023 0301 	bic.w	r3, r3, #1
 8005244:	6713      	str	r3, [r2, #112]	; 0x70
 8005246:	4b7a      	ldr	r3, [pc, #488]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524a:	4a79      	ldr	r2, [pc, #484]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 800524c:	f023 0304 	bic.w	r3, r3, #4
 8005250:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d015      	beq.n	8005286 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800525a:	f7fc fc4d 	bl	8001af8 <HAL_GetTick>
 800525e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005260:	e00a      	b.n	8005278 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005262:	f7fc fc49 	bl	8001af8 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005270:	4293      	cmp	r3, r2
 8005272:	d901      	bls.n	8005278 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e14b      	b.n	8005510 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005278:	4b6d      	ldr	r3, [pc, #436]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 800527a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d0ee      	beq.n	8005262 <HAL_RCC_OscConfig+0x4f6>
 8005284:	e014      	b.n	80052b0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005286:	f7fc fc37 	bl	8001af8 <HAL_GetTick>
 800528a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800528c:	e00a      	b.n	80052a4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800528e:	f7fc fc33 	bl	8001af8 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	f241 3288 	movw	r2, #5000	; 0x1388
 800529c:	4293      	cmp	r3, r2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e135      	b.n	8005510 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052a4:	4b62      	ldr	r3, [pc, #392]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 80052a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1ee      	bne.n	800528e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 812a 	beq.w	800550e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80052ba:	4b5d      	ldr	r3, [pc, #372]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052c2:	2b18      	cmp	r3, #24
 80052c4:	f000 80ba 	beq.w	800543c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	f040 8095 	bne.w	80053fc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052d2:	4b57      	ldr	r3, [pc, #348]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a56      	ldr	r2, [pc, #344]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 80052d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052de:	f7fc fc0b 	bl	8001af8 <HAL_GetTick>
 80052e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052e4:	e008      	b.n	80052f8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e6:	f7fc fc07 	bl	8001af8 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e10b      	b.n	8005510 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052f8:	4b4d      	ldr	r3, [pc, #308]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1f0      	bne.n	80052e6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005304:	4b4a      	ldr	r3, [pc, #296]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 8005306:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005308:	4b4a      	ldr	r3, [pc, #296]	; (8005434 <HAL_RCC_OscConfig+0x6c8>)
 800530a:	4013      	ands	r3, r2
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005314:	0112      	lsls	r2, r2, #4
 8005316:	430a      	orrs	r2, r1
 8005318:	4945      	ldr	r1, [pc, #276]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 800531a:	4313      	orrs	r3, r2
 800531c:	628b      	str	r3, [r1, #40]	; 0x28
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	3b01      	subs	r3, #1
 8005324:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532c:	3b01      	subs	r3, #1
 800532e:	025b      	lsls	r3, r3, #9
 8005330:	b29b      	uxth	r3, r3
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005338:	3b01      	subs	r3, #1
 800533a:	041b      	lsls	r3, r3, #16
 800533c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005340:	431a      	orrs	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005346:	3b01      	subs	r3, #1
 8005348:	061b      	lsls	r3, r3, #24
 800534a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800534e:	4938      	ldr	r1, [pc, #224]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 8005350:	4313      	orrs	r3, r2
 8005352:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005354:	4b36      	ldr	r3, [pc, #216]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	4a35      	ldr	r2, [pc, #212]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 800535a:	f023 0301 	bic.w	r3, r3, #1
 800535e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005360:	4b33      	ldr	r3, [pc, #204]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 8005362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005364:	4b34      	ldr	r3, [pc, #208]	; (8005438 <HAL_RCC_OscConfig+0x6cc>)
 8005366:	4013      	ands	r3, r2
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800536c:	00d2      	lsls	r2, r2, #3
 800536e:	4930      	ldr	r1, [pc, #192]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 8005370:	4313      	orrs	r3, r2
 8005372:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005374:	4b2e      	ldr	r3, [pc, #184]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	f023 020c 	bic.w	r2, r3, #12
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005380:	492b      	ldr	r1, [pc, #172]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 8005382:	4313      	orrs	r3, r2
 8005384:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005386:	4b2a      	ldr	r3, [pc, #168]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	f023 0202 	bic.w	r2, r3, #2
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005392:	4927      	ldr	r1, [pc, #156]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 8005394:	4313      	orrs	r3, r2
 8005396:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005398:	4b25      	ldr	r3, [pc, #148]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 800539a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539c:	4a24      	ldr	r2, [pc, #144]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 800539e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053a4:	4b22      	ldr	r3, [pc, #136]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 80053a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a8:	4a21      	ldr	r2, [pc, #132]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 80053aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80053b0:	4b1f      	ldr	r3, [pc, #124]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 80053b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b4:	4a1e      	ldr	r2, [pc, #120]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 80053b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80053bc:	4b1c      	ldr	r3, [pc, #112]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	4a1b      	ldr	r2, [pc, #108]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 80053c2:	f043 0301 	orr.w	r3, r3, #1
 80053c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053c8:	4b19      	ldr	r3, [pc, #100]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a18      	ldr	r2, [pc, #96]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 80053ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d4:	f7fc fb90 	bl	8001af8 <HAL_GetTick>
 80053d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053dc:	f7fc fb8c 	bl	8001af8 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e090      	b.n	8005510 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053ee:	4b10      	ldr	r3, [pc, #64]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0f0      	beq.n	80053dc <HAL_RCC_OscConfig+0x670>
 80053fa:	e088      	b.n	800550e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053fc:	4b0c      	ldr	r3, [pc, #48]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a0b      	ldr	r2, [pc, #44]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 8005402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005408:	f7fc fb76 	bl	8001af8 <HAL_GetTick>
 800540c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005410:	f7fc fb72 	bl	8001af8 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e076      	b.n	8005510 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005422:	4b03      	ldr	r3, [pc, #12]	; (8005430 <HAL_RCC_OscConfig+0x6c4>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1f0      	bne.n	8005410 <HAL_RCC_OscConfig+0x6a4>
 800542e:	e06e      	b.n	800550e <HAL_RCC_OscConfig+0x7a2>
 8005430:	58024400 	.word	0x58024400
 8005434:	fffffc0c 	.word	0xfffffc0c
 8005438:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800543c:	4b36      	ldr	r3, [pc, #216]	; (8005518 <HAL_RCC_OscConfig+0x7ac>)
 800543e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005440:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005442:	4b35      	ldr	r3, [pc, #212]	; (8005518 <HAL_RCC_OscConfig+0x7ac>)
 8005444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005446:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	2b01      	cmp	r3, #1
 800544e:	d031      	beq.n	80054b4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f003 0203 	and.w	r2, r3, #3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800545a:	429a      	cmp	r2, r3
 800545c:	d12a      	bne.n	80054b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	091b      	lsrs	r3, r3, #4
 8005462:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800546a:	429a      	cmp	r2, r3
 800546c:	d122      	bne.n	80054b4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800547a:	429a      	cmp	r2, r3
 800547c:	d11a      	bne.n	80054b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	0a5b      	lsrs	r3, r3, #9
 8005482:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800548c:	429a      	cmp	r2, r3
 800548e:	d111      	bne.n	80054b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	0c1b      	lsrs	r3, r3, #16
 8005494:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800549e:	429a      	cmp	r2, r3
 80054a0:	d108      	bne.n	80054b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	0e1b      	lsrs	r3, r3, #24
 80054a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d001      	beq.n	80054b8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e02b      	b.n	8005510 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80054b8:	4b17      	ldr	r3, [pc, #92]	; (8005518 <HAL_RCC_OscConfig+0x7ac>)
 80054ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054bc:	08db      	lsrs	r3, r3, #3
 80054be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054c2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d01f      	beq.n	800550e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80054ce:	4b12      	ldr	r3, [pc, #72]	; (8005518 <HAL_RCC_OscConfig+0x7ac>)
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	4a11      	ldr	r2, [pc, #68]	; (8005518 <HAL_RCC_OscConfig+0x7ac>)
 80054d4:	f023 0301 	bic.w	r3, r3, #1
 80054d8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054da:	f7fc fb0d 	bl	8001af8 <HAL_GetTick>
 80054de:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80054e0:	bf00      	nop
 80054e2:	f7fc fb09 	bl	8001af8 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d0f9      	beq.n	80054e2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80054ee:	4b0a      	ldr	r3, [pc, #40]	; (8005518 <HAL_RCC_OscConfig+0x7ac>)
 80054f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f2:	4b0a      	ldr	r3, [pc, #40]	; (800551c <HAL_RCC_OscConfig+0x7b0>)
 80054f4:	4013      	ands	r3, r2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80054fa:	00d2      	lsls	r2, r2, #3
 80054fc:	4906      	ldr	r1, [pc, #24]	; (8005518 <HAL_RCC_OscConfig+0x7ac>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005502:	4b05      	ldr	r3, [pc, #20]	; (8005518 <HAL_RCC_OscConfig+0x7ac>)
 8005504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005506:	4a04      	ldr	r2, [pc, #16]	; (8005518 <HAL_RCC_OscConfig+0x7ac>)
 8005508:	f043 0301 	orr.w	r3, r3, #1
 800550c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3730      	adds	r7, #48	; 0x30
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	58024400 	.word	0x58024400
 800551c:	ffff0007 	.word	0xffff0007

08005520 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e19c      	b.n	800586e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005534:	4b8a      	ldr	r3, [pc, #552]	; (8005760 <HAL_RCC_ClockConfig+0x240>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 030f 	and.w	r3, r3, #15
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	429a      	cmp	r2, r3
 8005540:	d910      	bls.n	8005564 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005542:	4b87      	ldr	r3, [pc, #540]	; (8005760 <HAL_RCC_ClockConfig+0x240>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f023 020f 	bic.w	r2, r3, #15
 800554a:	4985      	ldr	r1, [pc, #532]	; (8005760 <HAL_RCC_ClockConfig+0x240>)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	4313      	orrs	r3, r2
 8005550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005552:	4b83      	ldr	r3, [pc, #524]	; (8005760 <HAL_RCC_ClockConfig+0x240>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	429a      	cmp	r2, r3
 800555e:	d001      	beq.n	8005564 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e184      	b.n	800586e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b00      	cmp	r3, #0
 800556e:	d010      	beq.n	8005592 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	4b7b      	ldr	r3, [pc, #492]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800557c:	429a      	cmp	r2, r3
 800557e:	d908      	bls.n	8005592 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005580:	4b78      	ldr	r3, [pc, #480]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	4975      	ldr	r1, [pc, #468]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 800558e:	4313      	orrs	r3, r2
 8005590:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	2b00      	cmp	r3, #0
 800559c:	d010      	beq.n	80055c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695a      	ldr	r2, [r3, #20]
 80055a2:	4b70      	ldr	r3, [pc, #448]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d908      	bls.n	80055c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055ae:	4b6d      	ldr	r3, [pc, #436]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	496a      	ldr	r1, [pc, #424]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0310 	and.w	r3, r3, #16
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d010      	beq.n	80055ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	699a      	ldr	r2, [r3, #24]
 80055d0:	4b64      	ldr	r3, [pc, #400]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055d8:	429a      	cmp	r2, r3
 80055da:	d908      	bls.n	80055ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055dc:	4b61      	ldr	r3, [pc, #388]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	495e      	ldr	r1, [pc, #376]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0320 	and.w	r3, r3, #32
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d010      	beq.n	800561c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	69da      	ldr	r2, [r3, #28]
 80055fe:	4b59      	ldr	r3, [pc, #356]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005606:	429a      	cmp	r2, r3
 8005608:	d908      	bls.n	800561c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800560a:	4b56      	ldr	r3, [pc, #344]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	4953      	ldr	r1, [pc, #332]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 8005618:	4313      	orrs	r3, r2
 800561a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d010      	beq.n	800564a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68da      	ldr	r2, [r3, #12]
 800562c:	4b4d      	ldr	r3, [pc, #308]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	f003 030f 	and.w	r3, r3, #15
 8005634:	429a      	cmp	r2, r3
 8005636:	d908      	bls.n	800564a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005638:	4b4a      	ldr	r3, [pc, #296]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	f023 020f 	bic.w	r2, r3, #15
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	4947      	ldr	r1, [pc, #284]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 8005646:	4313      	orrs	r3, r2
 8005648:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d055      	beq.n	8005702 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005656:	4b43      	ldr	r3, [pc, #268]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	4940      	ldr	r1, [pc, #256]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 8005664:	4313      	orrs	r3, r2
 8005666:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b02      	cmp	r3, #2
 800566e:	d107      	bne.n	8005680 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005670:	4b3c      	ldr	r3, [pc, #240]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d121      	bne.n	80056c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e0f6      	b.n	800586e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2b03      	cmp	r3, #3
 8005686:	d107      	bne.n	8005698 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005688:	4b36      	ldr	r3, [pc, #216]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d115      	bne.n	80056c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e0ea      	b.n	800586e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d107      	bne.n	80056b0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056a0:	4b30      	ldr	r3, [pc, #192]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d109      	bne.n	80056c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e0de      	b.n	800586e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056b0:	4b2c      	ldr	r3, [pc, #176]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e0d6      	b.n	800586e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056c0:	4b28      	ldr	r3, [pc, #160]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	f023 0207 	bic.w	r2, r3, #7
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	4925      	ldr	r1, [pc, #148]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d2:	f7fc fa11 	bl	8001af8 <HAL_GetTick>
 80056d6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056d8:	e00a      	b.n	80056f0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056da:	f7fc fa0d 	bl	8001af8 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e0be      	b.n	800586e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056f0:	4b1c      	ldr	r3, [pc, #112]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	429a      	cmp	r2, r3
 8005700:	d1eb      	bne.n	80056da <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d010      	beq.n	8005730 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	4b14      	ldr	r3, [pc, #80]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	429a      	cmp	r2, r3
 800571c:	d208      	bcs.n	8005730 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800571e:	4b11      	ldr	r3, [pc, #68]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	f023 020f 	bic.w	r2, r3, #15
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	490e      	ldr	r1, [pc, #56]	; (8005764 <HAL_RCC_ClockConfig+0x244>)
 800572c:	4313      	orrs	r3, r2
 800572e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005730:	4b0b      	ldr	r3, [pc, #44]	; (8005760 <HAL_RCC_ClockConfig+0x240>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 030f 	and.w	r3, r3, #15
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d214      	bcs.n	8005768 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800573e:	4b08      	ldr	r3, [pc, #32]	; (8005760 <HAL_RCC_ClockConfig+0x240>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f023 020f 	bic.w	r2, r3, #15
 8005746:	4906      	ldr	r1, [pc, #24]	; (8005760 <HAL_RCC_ClockConfig+0x240>)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	4313      	orrs	r3, r2
 800574c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800574e:	4b04      	ldr	r3, [pc, #16]	; (8005760 <HAL_RCC_ClockConfig+0x240>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	429a      	cmp	r2, r3
 800575a:	d005      	beq.n	8005768 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e086      	b.n	800586e <HAL_RCC_ClockConfig+0x34e>
 8005760:	52002000 	.word	0x52002000
 8005764:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0304 	and.w	r3, r3, #4
 8005770:	2b00      	cmp	r3, #0
 8005772:	d010      	beq.n	8005796 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	4b3f      	ldr	r3, [pc, #252]	; (8005878 <HAL_RCC_ClockConfig+0x358>)
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005780:	429a      	cmp	r2, r3
 8005782:	d208      	bcs.n	8005796 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005784:	4b3c      	ldr	r3, [pc, #240]	; (8005878 <HAL_RCC_ClockConfig+0x358>)
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	4939      	ldr	r1, [pc, #228]	; (8005878 <HAL_RCC_ClockConfig+0x358>)
 8005792:	4313      	orrs	r3, r2
 8005794:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0308 	and.w	r3, r3, #8
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d010      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	695a      	ldr	r2, [r3, #20]
 80057a6:	4b34      	ldr	r3, [pc, #208]	; (8005878 <HAL_RCC_ClockConfig+0x358>)
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d208      	bcs.n	80057c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057b2:	4b31      	ldr	r3, [pc, #196]	; (8005878 <HAL_RCC_ClockConfig+0x358>)
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	492e      	ldr	r1, [pc, #184]	; (8005878 <HAL_RCC_ClockConfig+0x358>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0310 	and.w	r3, r3, #16
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d010      	beq.n	80057f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	699a      	ldr	r2, [r3, #24]
 80057d4:	4b28      	ldr	r3, [pc, #160]	; (8005878 <HAL_RCC_ClockConfig+0x358>)
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057dc:	429a      	cmp	r2, r3
 80057de:	d208      	bcs.n	80057f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057e0:	4b25      	ldr	r3, [pc, #148]	; (8005878 <HAL_RCC_ClockConfig+0x358>)
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	4922      	ldr	r1, [pc, #136]	; (8005878 <HAL_RCC_ClockConfig+0x358>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0320 	and.w	r3, r3, #32
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d010      	beq.n	8005820 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	69da      	ldr	r2, [r3, #28]
 8005802:	4b1d      	ldr	r3, [pc, #116]	; (8005878 <HAL_RCC_ClockConfig+0x358>)
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800580a:	429a      	cmp	r2, r3
 800580c:	d208      	bcs.n	8005820 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800580e:	4b1a      	ldr	r3, [pc, #104]	; (8005878 <HAL_RCC_ClockConfig+0x358>)
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	4917      	ldr	r1, [pc, #92]	; (8005878 <HAL_RCC_ClockConfig+0x358>)
 800581c:	4313      	orrs	r3, r2
 800581e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005820:	f000 f834 	bl	800588c <HAL_RCC_GetSysClockFreq>
 8005824:	4602      	mov	r2, r0
 8005826:	4b14      	ldr	r3, [pc, #80]	; (8005878 <HAL_RCC_ClockConfig+0x358>)
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	0a1b      	lsrs	r3, r3, #8
 800582c:	f003 030f 	and.w	r3, r3, #15
 8005830:	4912      	ldr	r1, [pc, #72]	; (800587c <HAL_RCC_ClockConfig+0x35c>)
 8005832:	5ccb      	ldrb	r3, [r1, r3]
 8005834:	f003 031f 	and.w	r3, r3, #31
 8005838:	fa22 f303 	lsr.w	r3, r2, r3
 800583c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800583e:	4b0e      	ldr	r3, [pc, #56]	; (8005878 <HAL_RCC_ClockConfig+0x358>)
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	4a0d      	ldr	r2, [pc, #52]	; (800587c <HAL_RCC_ClockConfig+0x35c>)
 8005848:	5cd3      	ldrb	r3, [r2, r3]
 800584a:	f003 031f 	and.w	r3, r3, #31
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	fa22 f303 	lsr.w	r3, r2, r3
 8005854:	4a0a      	ldr	r2, [pc, #40]	; (8005880 <HAL_RCC_ClockConfig+0x360>)
 8005856:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005858:	4a0a      	ldr	r2, [pc, #40]	; (8005884 <HAL_RCC_ClockConfig+0x364>)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800585e:	4b0a      	ldr	r3, [pc, #40]	; (8005888 <HAL_RCC_ClockConfig+0x368>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4618      	mov	r0, r3
 8005864:	f7fb feba 	bl	80015dc <HAL_InitTick>
 8005868:	4603      	mov	r3, r0
 800586a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800586c:	7bfb      	ldrb	r3, [r7, #15]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	58024400 	.word	0x58024400
 800587c:	08015898 	.word	0x08015898
 8005880:	2400006c 	.word	0x2400006c
 8005884:	24000068 	.word	0x24000068
 8005888:	24000070 	.word	0x24000070

0800588c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800588c:	b480      	push	{r7}
 800588e:	b089      	sub	sp, #36	; 0x24
 8005890:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005892:	4bb3      	ldr	r3, [pc, #716]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800589a:	2b18      	cmp	r3, #24
 800589c:	f200 8155 	bhi.w	8005b4a <HAL_RCC_GetSysClockFreq+0x2be>
 80058a0:	a201      	add	r2, pc, #4	; (adr r2, 80058a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80058a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a6:	bf00      	nop
 80058a8:	0800590d 	.word	0x0800590d
 80058ac:	08005b4b 	.word	0x08005b4b
 80058b0:	08005b4b 	.word	0x08005b4b
 80058b4:	08005b4b 	.word	0x08005b4b
 80058b8:	08005b4b 	.word	0x08005b4b
 80058bc:	08005b4b 	.word	0x08005b4b
 80058c0:	08005b4b 	.word	0x08005b4b
 80058c4:	08005b4b 	.word	0x08005b4b
 80058c8:	08005933 	.word	0x08005933
 80058cc:	08005b4b 	.word	0x08005b4b
 80058d0:	08005b4b 	.word	0x08005b4b
 80058d4:	08005b4b 	.word	0x08005b4b
 80058d8:	08005b4b 	.word	0x08005b4b
 80058dc:	08005b4b 	.word	0x08005b4b
 80058e0:	08005b4b 	.word	0x08005b4b
 80058e4:	08005b4b 	.word	0x08005b4b
 80058e8:	08005939 	.word	0x08005939
 80058ec:	08005b4b 	.word	0x08005b4b
 80058f0:	08005b4b 	.word	0x08005b4b
 80058f4:	08005b4b 	.word	0x08005b4b
 80058f8:	08005b4b 	.word	0x08005b4b
 80058fc:	08005b4b 	.word	0x08005b4b
 8005900:	08005b4b 	.word	0x08005b4b
 8005904:	08005b4b 	.word	0x08005b4b
 8005908:	0800593f 	.word	0x0800593f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800590c:	4b94      	ldr	r3, [pc, #592]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b00      	cmp	r3, #0
 8005916:	d009      	beq.n	800592c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005918:	4b91      	ldr	r3, [pc, #580]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	08db      	lsrs	r3, r3, #3
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	4a90      	ldr	r2, [pc, #576]	; (8005b64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005924:	fa22 f303 	lsr.w	r3, r2, r3
 8005928:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800592a:	e111      	b.n	8005b50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800592c:	4b8d      	ldr	r3, [pc, #564]	; (8005b64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800592e:	61bb      	str	r3, [r7, #24]
      break;
 8005930:	e10e      	b.n	8005b50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005932:	4b8d      	ldr	r3, [pc, #564]	; (8005b68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005934:	61bb      	str	r3, [r7, #24]
      break;
 8005936:	e10b      	b.n	8005b50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005938:	4b8c      	ldr	r3, [pc, #560]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800593a:	61bb      	str	r3, [r7, #24]
      break;
 800593c:	e108      	b.n	8005b50 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800593e:	4b88      	ldr	r3, [pc, #544]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005948:	4b85      	ldr	r3, [pc, #532]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800594a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594c:	091b      	lsrs	r3, r3, #4
 800594e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005952:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005954:	4b82      	ldr	r3, [pc, #520]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800595e:	4b80      	ldr	r3, [pc, #512]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005962:	08db      	lsrs	r3, r3, #3
 8005964:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	fb02 f303 	mul.w	r3, r2, r3
 800596e:	ee07 3a90 	vmov	s15, r3
 8005972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005976:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 80e1 	beq.w	8005b44 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2b02      	cmp	r3, #2
 8005986:	f000 8083 	beq.w	8005a90 <HAL_RCC_GetSysClockFreq+0x204>
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b02      	cmp	r3, #2
 800598e:	f200 80a1 	bhi.w	8005ad4 <HAL_RCC_GetSysClockFreq+0x248>
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <HAL_RCC_GetSysClockFreq+0x114>
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d056      	beq.n	8005a4c <HAL_RCC_GetSysClockFreq+0x1c0>
 800599e:	e099      	b.n	8005ad4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059a0:	4b6f      	ldr	r3, [pc, #444]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0320 	and.w	r3, r3, #32
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d02d      	beq.n	8005a08 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059ac:	4b6c      	ldr	r3, [pc, #432]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	08db      	lsrs	r3, r3, #3
 80059b2:	f003 0303 	and.w	r3, r3, #3
 80059b6:	4a6b      	ldr	r2, [pc, #428]	; (8005b64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059b8:	fa22 f303 	lsr.w	r3, r2, r3
 80059bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	ee07 3a90 	vmov	s15, r3
 80059c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	ee07 3a90 	vmov	s15, r3
 80059ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059d6:	4b62      	ldr	r3, [pc, #392]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059de:	ee07 3a90 	vmov	s15, r3
 80059e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005b70 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a02:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005a06:	e087      	b.n	8005b18 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	ee07 3a90 	vmov	s15, r3
 8005a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a12:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005b74 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a1a:	4b51      	ldr	r3, [pc, #324]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a22:	ee07 3a90 	vmov	s15, r3
 8005a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a2e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005b70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a4a:	e065      	b.n	8005b18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	ee07 3a90 	vmov	s15, r3
 8005a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a56:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005b78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a5e:	4b40      	ldr	r3, [pc, #256]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a66:	ee07 3a90 	vmov	s15, r3
 8005a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a72:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005b70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a8e:	e043      	b.n	8005b18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a9a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005b7c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aa2:	4b2f      	ldr	r3, [pc, #188]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aaa:	ee07 3a90 	vmov	s15, r3
 8005aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ab2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ab6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005b70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ace:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ad2:	e021      	b.n	8005b18 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	ee07 3a90 	vmov	s15, r3
 8005ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ade:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005b78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ae6:	4b1e      	ldr	r3, [pc, #120]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005af6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005afa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005b70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b16:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005b18:	4b11      	ldr	r3, [pc, #68]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1c:	0a5b      	lsrs	r3, r3, #9
 8005b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b22:	3301      	adds	r3, #1
 8005b24:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	ee07 3a90 	vmov	s15, r3
 8005b2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b30:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b3c:	ee17 3a90 	vmov	r3, s15
 8005b40:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005b42:	e005      	b.n	8005b50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	61bb      	str	r3, [r7, #24]
      break;
 8005b48:	e002      	b.n	8005b50 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005b4a:	4b07      	ldr	r3, [pc, #28]	; (8005b68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b4c:	61bb      	str	r3, [r7, #24]
      break;
 8005b4e:	bf00      	nop
  }

  return sysclockfreq;
 8005b50:	69bb      	ldr	r3, [r7, #24]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3724      	adds	r7, #36	; 0x24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	58024400 	.word	0x58024400
 8005b64:	03d09000 	.word	0x03d09000
 8005b68:	003d0900 	.word	0x003d0900
 8005b6c:	007a1200 	.word	0x007a1200
 8005b70:	46000000 	.word	0x46000000
 8005b74:	4c742400 	.word	0x4c742400
 8005b78:	4a742400 	.word	0x4a742400
 8005b7c:	4af42400 	.word	0x4af42400

08005b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005b86:	f7ff fe81 	bl	800588c <HAL_RCC_GetSysClockFreq>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	4b10      	ldr	r3, [pc, #64]	; (8005bd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	0a1b      	lsrs	r3, r3, #8
 8005b92:	f003 030f 	and.w	r3, r3, #15
 8005b96:	490f      	ldr	r1, [pc, #60]	; (8005bd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b98:	5ccb      	ldrb	r3, [r1, r3]
 8005b9a:	f003 031f 	and.w	r3, r3, #31
 8005b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ba4:	4b0a      	ldr	r3, [pc, #40]	; (8005bd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	f003 030f 	and.w	r3, r3, #15
 8005bac:	4a09      	ldr	r2, [pc, #36]	; (8005bd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005bae:	5cd3      	ldrb	r3, [r2, r3]
 8005bb0:	f003 031f 	and.w	r3, r3, #31
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bba:	4a07      	ldr	r2, [pc, #28]	; (8005bd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005bbc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005bbe:	4a07      	ldr	r2, [pc, #28]	; (8005bdc <HAL_RCC_GetHCLKFreq+0x5c>)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005bc4:	4b04      	ldr	r3, [pc, #16]	; (8005bd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	58024400 	.word	0x58024400
 8005bd4:	08015898 	.word	0x08015898
 8005bd8:	2400006c 	.word	0x2400006c
 8005bdc:	24000068 	.word	0x24000068

08005be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005be4:	f7ff ffcc 	bl	8005b80 <HAL_RCC_GetHCLKFreq>
 8005be8:	4602      	mov	r2, r0
 8005bea:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	091b      	lsrs	r3, r3, #4
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	4904      	ldr	r1, [pc, #16]	; (8005c08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bf6:	5ccb      	ldrb	r3, [r1, r3]
 8005bf8:	f003 031f 	and.w	r3, r3, #31
 8005bfc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	58024400 	.word	0x58024400
 8005c08:	08015898 	.word	0x08015898

08005c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005c10:	f7ff ffb6 	bl	8005b80 <HAL_RCC_GetHCLKFreq>
 8005c14:	4602      	mov	r2, r0
 8005c16:	4b06      	ldr	r3, [pc, #24]	; (8005c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	0a1b      	lsrs	r3, r3, #8
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	4904      	ldr	r1, [pc, #16]	; (8005c34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c22:	5ccb      	ldrb	r3, [r1, r3]
 8005c24:	f003 031f 	and.w	r3, r3, #31
 8005c28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	58024400 	.word	0x58024400
 8005c34:	08015898 	.word	0x08015898

08005c38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	223f      	movs	r2, #63	; 0x3f
 8005c46:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c48:	4b1a      	ldr	r3, [pc, #104]	; (8005cb4 <HAL_RCC_GetClockConfig+0x7c>)
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f003 0207 	and.w	r2, r3, #7
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005c54:	4b17      	ldr	r3, [pc, #92]	; (8005cb4 <HAL_RCC_GetClockConfig+0x7c>)
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005c60:	4b14      	ldr	r3, [pc, #80]	; (8005cb4 <HAL_RCC_GetClockConfig+0x7c>)
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	f003 020f 	and.w	r2, r3, #15
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005c6c:	4b11      	ldr	r3, [pc, #68]	; (8005cb4 <HAL_RCC_GetClockConfig+0x7c>)
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005c78:	4b0e      	ldr	r3, [pc, #56]	; (8005cb4 <HAL_RCC_GetClockConfig+0x7c>)
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005c84:	4b0b      	ldr	r3, [pc, #44]	; (8005cb4 <HAL_RCC_GetClockConfig+0x7c>)
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005c90:	4b08      	ldr	r3, [pc, #32]	; (8005cb4 <HAL_RCC_GetClockConfig+0x7c>)
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c9c:	4b06      	ldr	r3, [pc, #24]	; (8005cb8 <HAL_RCC_GetClockConfig+0x80>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 020f 	and.w	r2, r3, #15
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	601a      	str	r2, [r3, #0]
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	58024400 	.word	0x58024400
 8005cb8:	52002000 	.word	0x52002000

08005cbc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cc0:	b0c6      	sub	sp, #280	; 0x118
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cce:	2300      	movs	r3, #0
 8005cd0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cdc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005ce0:	2500      	movs	r5, #0
 8005ce2:	ea54 0305 	orrs.w	r3, r4, r5
 8005ce6:	d049      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cf2:	d02f      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005cf4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cf8:	d828      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005cfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cfe:	d01a      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d04:	d822      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d0e:	d007      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d10:	e01c      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d12:	4bab      	ldr	r3, [pc, #684]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d16:	4aaa      	ldr	r2, [pc, #680]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d1e:	e01a      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d24:	3308      	adds	r3, #8
 8005d26:	2102      	movs	r1, #2
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f001 fc25 	bl	8007578 <RCCEx_PLL2_Config>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d34:	e00f      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d3a:	3328      	adds	r3, #40	; 0x28
 8005d3c:	2102      	movs	r1, #2
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f001 fccc 	bl	80076dc <RCCEx_PLL3_Config>
 8005d44:	4603      	mov	r3, r0
 8005d46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d4a:	e004      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005d52:	e000      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005d54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10a      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005d5e:	4b98      	ldr	r3, [pc, #608]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d62:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d6c:	4a94      	ldr	r2, [pc, #592]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d6e:	430b      	orrs	r3, r1
 8005d70:	6513      	str	r3, [r2, #80]	; 0x50
 8005d72:	e003      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d84:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005d88:	f04f 0900 	mov.w	r9, #0
 8005d8c:	ea58 0309 	orrs.w	r3, r8, r9
 8005d90:	d047      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d82a      	bhi.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005d9c:	a201      	add	r2, pc, #4	; (adr r2, 8005da4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da2:	bf00      	nop
 8005da4:	08005db9 	.word	0x08005db9
 8005da8:	08005dc7 	.word	0x08005dc7
 8005dac:	08005ddd 	.word	0x08005ddd
 8005db0:	08005dfb 	.word	0x08005dfb
 8005db4:	08005dfb 	.word	0x08005dfb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005db8:	4b81      	ldr	r3, [pc, #516]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dbc:	4a80      	ldr	r2, [pc, #512]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dc4:	e01a      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dca:	3308      	adds	r3, #8
 8005dcc:	2100      	movs	r1, #0
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f001 fbd2 	bl	8007578 <RCCEx_PLL2_Config>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dda:	e00f      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005de0:	3328      	adds	r3, #40	; 0x28
 8005de2:	2100      	movs	r1, #0
 8005de4:	4618      	mov	r0, r3
 8005de6:	f001 fc79 	bl	80076dc <RCCEx_PLL3_Config>
 8005dea:	4603      	mov	r3, r0
 8005dec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005df0:	e004      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005df8:	e000      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dfc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10a      	bne.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e04:	4b6e      	ldr	r3, [pc, #440]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e08:	f023 0107 	bic.w	r1, r3, #7
 8005e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e12:	4a6b      	ldr	r2, [pc, #428]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e14:	430b      	orrs	r3, r1
 8005e16:	6513      	str	r3, [r2, #80]	; 0x50
 8005e18:	e003      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e1a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e1e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8005e2e:	f04f 0b00 	mov.w	fp, #0
 8005e32:	ea5a 030b 	orrs.w	r3, sl, fp
 8005e36:	d05b      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e40:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005e44:	d03b      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005e46:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005e4a:	d834      	bhi.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005e4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e50:	d037      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005e52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e56:	d82e      	bhi.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005e58:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005e5c:	d033      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005e5e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005e62:	d828      	bhi.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005e64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e68:	d01a      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e6e:	d822      	bhi.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d003      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005e74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e78:	d007      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005e7a:	e01c      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e7c:	4b50      	ldr	r3, [pc, #320]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e80:	4a4f      	ldr	r2, [pc, #316]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e88:	e01e      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e8e:	3308      	adds	r3, #8
 8005e90:	2100      	movs	r1, #0
 8005e92:	4618      	mov	r0, r3
 8005e94:	f001 fb70 	bl	8007578 <RCCEx_PLL2_Config>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005e9e:	e013      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ea4:	3328      	adds	r3, #40	; 0x28
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f001 fc17 	bl	80076dc <RCCEx_PLL3_Config>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005eb4:	e008      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005ebc:	e004      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005ebe:	bf00      	nop
 8005ec0:	e002      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005ec2:	bf00      	nop
 8005ec4:	e000      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005ec6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ec8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10b      	bne.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005ed0:	4b3b      	ldr	r3, [pc, #236]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed4:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005edc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ee0:	4a37      	ldr	r2, [pc, #220]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ee2:	430b      	orrs	r3, r1
 8005ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8005ee6:	e003      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005eec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005efc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f00:	2300      	movs	r3, #0
 8005f02:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005f06:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	d05d      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005f18:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005f1c:	d03b      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005f1e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005f22:	d834      	bhi.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005f24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f28:	d037      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005f2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f2e:	d82e      	bhi.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005f30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005f34:	d033      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005f36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005f3a:	d828      	bhi.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005f3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f40:	d01a      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005f42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f46:	d822      	bhi.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d003      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f50:	d007      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005f52:	e01c      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f54:	4b1a      	ldr	r3, [pc, #104]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f58:	4a19      	ldr	r2, [pc, #100]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f60:	e01e      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f66:	3308      	adds	r3, #8
 8005f68:	2100      	movs	r1, #0
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f001 fb04 	bl	8007578 <RCCEx_PLL2_Config>
 8005f70:	4603      	mov	r3, r0
 8005f72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005f76:	e013      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7c:	3328      	adds	r3, #40	; 0x28
 8005f7e:	2100      	movs	r1, #0
 8005f80:	4618      	mov	r0, r3
 8005f82:	f001 fbab 	bl	80076dc <RCCEx_PLL3_Config>
 8005f86:	4603      	mov	r3, r0
 8005f88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f8c:	e008      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005f94:	e004      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005f96:	bf00      	nop
 8005f98:	e002      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005f9a:	bf00      	nop
 8005f9c:	e000      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005f9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fa0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10d      	bne.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005fa8:	4b05      	ldr	r3, [pc, #20]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fac:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005fb8:	4a01      	ldr	r2, [pc, #4]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005fba:	430b      	orrs	r3, r1
 8005fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8005fbe:	e005      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005fc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005fc8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005fd8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005fe2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	d03a      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ff2:	2b30      	cmp	r3, #48	; 0x30
 8005ff4:	d01f      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005ff6:	2b30      	cmp	r3, #48	; 0x30
 8005ff8:	d819      	bhi.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d00c      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005ffe:	2b20      	cmp	r3, #32
 8006000:	d815      	bhi.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006002:	2b00      	cmp	r3, #0
 8006004:	d019      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006006:	2b10      	cmp	r3, #16
 8006008:	d111      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800600a:	4baa      	ldr	r3, [pc, #680]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600e:	4aa9      	ldr	r2, [pc, #676]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006014:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006016:	e011      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800601c:	3308      	adds	r3, #8
 800601e:	2102      	movs	r1, #2
 8006020:	4618      	mov	r0, r3
 8006022:	f001 faa9 	bl	8007578 <RCCEx_PLL2_Config>
 8006026:	4603      	mov	r3, r0
 8006028:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800602c:	e006      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006034:	e002      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006036:	bf00      	nop
 8006038:	e000      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800603a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800603c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10a      	bne.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006044:	4b9b      	ldr	r3, [pc, #620]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006048:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800604c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006052:	4a98      	ldr	r2, [pc, #608]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006054:	430b      	orrs	r3, r1
 8006056:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006058:	e003      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800605a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800605e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800606e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006072:	2300      	movs	r3, #0
 8006074:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006078:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800607c:	460b      	mov	r3, r1
 800607e:	4313      	orrs	r3, r2
 8006080:	d051      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800608c:	d035      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800608e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006092:	d82e      	bhi.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006094:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006098:	d031      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x442>
 800609a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800609e:	d828      	bhi.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80060a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060a4:	d01a      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x420>
 80060a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060aa:	d822      	bhi.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80060b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b4:	d007      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80060b6:	e01c      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060b8:	4b7e      	ldr	r3, [pc, #504]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060bc:	4a7d      	ldr	r2, [pc, #500]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060c4:	e01c      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ca:	3308      	adds	r3, #8
 80060cc:	2100      	movs	r1, #0
 80060ce:	4618      	mov	r0, r3
 80060d0:	f001 fa52 	bl	8007578 <RCCEx_PLL2_Config>
 80060d4:	4603      	mov	r3, r0
 80060d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060da:	e011      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060e0:	3328      	adds	r3, #40	; 0x28
 80060e2:	2100      	movs	r1, #0
 80060e4:	4618      	mov	r0, r3
 80060e6:	f001 faf9 	bl	80076dc <RCCEx_PLL3_Config>
 80060ea:	4603      	mov	r3, r0
 80060ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060f0:	e006      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80060f8:	e002      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80060fa:	bf00      	nop
 80060fc:	e000      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80060fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006100:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10a      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006108:	4b6a      	ldr	r3, [pc, #424]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800610a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800610c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006116:	4a67      	ldr	r2, [pc, #412]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006118:	430b      	orrs	r3, r1
 800611a:	6513      	str	r3, [r2, #80]	; 0x50
 800611c:	e003      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800611e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006122:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006132:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006136:	2300      	movs	r3, #0
 8006138:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800613c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006140:	460b      	mov	r3, r1
 8006142:	4313      	orrs	r3, r2
 8006144:	d053      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800614a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800614c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006150:	d033      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006152:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006156:	d82c      	bhi.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006158:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800615c:	d02f      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x502>
 800615e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006162:	d826      	bhi.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006164:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006168:	d02b      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800616a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800616e:	d820      	bhi.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006170:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006174:	d012      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006176:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800617a:	d81a      	bhi.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800617c:	2b00      	cmp	r3, #0
 800617e:	d022      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006184:	d115      	bne.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800618a:	3308      	adds	r3, #8
 800618c:	2101      	movs	r1, #1
 800618e:	4618      	mov	r0, r3
 8006190:	f001 f9f2 	bl	8007578 <RCCEx_PLL2_Config>
 8006194:	4603      	mov	r3, r0
 8006196:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800619a:	e015      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800619c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a0:	3328      	adds	r3, #40	; 0x28
 80061a2:	2101      	movs	r1, #1
 80061a4:	4618      	mov	r0, r3
 80061a6:	f001 fa99 	bl	80076dc <RCCEx_PLL3_Config>
 80061aa:	4603      	mov	r3, r0
 80061ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80061b0:	e00a      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80061b8:	e006      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80061ba:	bf00      	nop
 80061bc:	e004      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80061be:	bf00      	nop
 80061c0:	e002      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80061c2:	bf00      	nop
 80061c4:	e000      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80061c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10a      	bne.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80061d0:	4b38      	ldr	r3, [pc, #224]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061d4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80061d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061de:	4a35      	ldr	r2, [pc, #212]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061e0:	430b      	orrs	r3, r1
 80061e2:	6513      	str	r3, [r2, #80]	; 0x50
 80061e4:	e003      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061ea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80061ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80061fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061fe:	2300      	movs	r3, #0
 8006200:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006204:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006208:	460b      	mov	r3, r1
 800620a:	4313      	orrs	r3, r2
 800620c:	d058      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800620e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006212:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006216:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800621a:	d033      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800621c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006220:	d82c      	bhi.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006226:	d02f      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800622c:	d826      	bhi.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800622e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006232:	d02b      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006234:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006238:	d820      	bhi.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800623a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800623e:	d012      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006240:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006244:	d81a      	bhi.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006246:	2b00      	cmp	r3, #0
 8006248:	d022      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800624a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800624e:	d115      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006254:	3308      	adds	r3, #8
 8006256:	2101      	movs	r1, #1
 8006258:	4618      	mov	r0, r3
 800625a:	f001 f98d 	bl	8007578 <RCCEx_PLL2_Config>
 800625e:	4603      	mov	r3, r0
 8006260:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006264:	e015      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800626a:	3328      	adds	r3, #40	; 0x28
 800626c:	2101      	movs	r1, #1
 800626e:	4618      	mov	r0, r3
 8006270:	f001 fa34 	bl	80076dc <RCCEx_PLL3_Config>
 8006274:	4603      	mov	r3, r0
 8006276:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800627a:	e00a      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006282:	e006      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006284:	bf00      	nop
 8006286:	e004      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006288:	bf00      	nop
 800628a:	e002      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800628c:	bf00      	nop
 800628e:	e000      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006292:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10e      	bne.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800629a:	4b06      	ldr	r3, [pc, #24]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800629c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80062a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80062aa:	4a02      	ldr	r2, [pc, #8]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062ac:	430b      	orrs	r3, r1
 80062ae:	6593      	str	r3, [r2, #88]	; 0x58
 80062b0:	e006      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80062b2:	bf00      	nop
 80062b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80062c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80062cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062d0:	2300      	movs	r3, #0
 80062d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80062d6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80062da:	460b      	mov	r3, r1
 80062dc:	4313      	orrs	r3, r2
 80062de:	d037      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80062e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062ea:	d00e      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80062ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062f0:	d816      	bhi.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d018      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80062f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062fa:	d111      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062fc:	4bc4      	ldr	r3, [pc, #784]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	4ac3      	ldr	r2, [pc, #780]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006306:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006308:	e00f      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800630a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800630e:	3308      	adds	r3, #8
 8006310:	2101      	movs	r1, #1
 8006312:	4618      	mov	r0, r3
 8006314:	f001 f930 	bl	8007578 <RCCEx_PLL2_Config>
 8006318:	4603      	mov	r3, r0
 800631a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800631e:	e004      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006326:	e000      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800632a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10a      	bne.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006332:	4bb7      	ldr	r3, [pc, #732]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006336:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800633a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800633e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006340:	4ab3      	ldr	r2, [pc, #716]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006342:	430b      	orrs	r3, r1
 8006344:	6513      	str	r3, [r2, #80]	; 0x50
 8006346:	e003      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006348:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800634c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800635c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006360:	2300      	movs	r3, #0
 8006362:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006366:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800636a:	460b      	mov	r3, r1
 800636c:	4313      	orrs	r3, r2
 800636e:	d039      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006376:	2b03      	cmp	r3, #3
 8006378:	d81c      	bhi.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800637a:	a201      	add	r2, pc, #4	; (adr r2, 8006380 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800637c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006380:	080063bd 	.word	0x080063bd
 8006384:	08006391 	.word	0x08006391
 8006388:	0800639f 	.word	0x0800639f
 800638c:	080063bd 	.word	0x080063bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006390:	4b9f      	ldr	r3, [pc, #636]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	4a9e      	ldr	r2, [pc, #632]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800639a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800639c:	e00f      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800639e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a2:	3308      	adds	r3, #8
 80063a4:	2102      	movs	r1, #2
 80063a6:	4618      	mov	r0, r3
 80063a8:	f001 f8e6 	bl	8007578 <RCCEx_PLL2_Config>
 80063ac:	4603      	mov	r3, r0
 80063ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80063b2:	e004      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80063ba:	e000      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80063bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10a      	bne.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80063c6:	4b92      	ldr	r3, [pc, #584]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ca:	f023 0103 	bic.w	r1, r3, #3
 80063ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d4:	4a8e      	ldr	r2, [pc, #568]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063d6:	430b      	orrs	r3, r1
 80063d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063da:	e003      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80063e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ec:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80063f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063f4:	2300      	movs	r3, #0
 80063f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063fe:	460b      	mov	r3, r1
 8006400:	4313      	orrs	r3, r2
 8006402:	f000 8099 	beq.w	8006538 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006406:	4b83      	ldr	r3, [pc, #524]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a82      	ldr	r2, [pc, #520]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800640c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006410:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006412:	f7fb fb71 	bl	8001af8 <HAL_GetTick>
 8006416:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800641a:	e00b      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800641c:	f7fb fb6c 	bl	8001af8 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b64      	cmp	r3, #100	; 0x64
 800642a:	d903      	bls.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006432:	e005      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006434:	4b77      	ldr	r3, [pc, #476]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643c:	2b00      	cmp	r3, #0
 800643e:	d0ed      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006440:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006444:	2b00      	cmp	r3, #0
 8006446:	d173      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006448:	4b71      	ldr	r3, [pc, #452]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800644a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800644c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006450:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006454:	4053      	eors	r3, r2
 8006456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800645a:	2b00      	cmp	r3, #0
 800645c:	d015      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800645e:	4b6c      	ldr	r3, [pc, #432]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006466:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800646a:	4b69      	ldr	r3, [pc, #420]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800646c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800646e:	4a68      	ldr	r2, [pc, #416]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006474:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006476:	4b66      	ldr	r3, [pc, #408]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800647a:	4a65      	ldr	r2, [pc, #404]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800647c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006480:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006482:	4a63      	ldr	r2, [pc, #396]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006484:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006488:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800648a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006496:	d118      	bne.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006498:	f7fb fb2e 	bl	8001af8 <HAL_GetTick>
 800649c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064a0:	e00d      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064a2:	f7fb fb29 	bl	8001af8 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80064ac:	1ad2      	subs	r2, r2, r3
 80064ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d903      	bls.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80064bc:	e005      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064be:	4b54      	ldr	r3, [pc, #336]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0eb      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80064ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d129      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80064da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064e2:	d10e      	bne.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80064e4:	4b4a      	ldr	r3, [pc, #296]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80064ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80064f4:	091a      	lsrs	r2, r3, #4
 80064f6:	4b48      	ldr	r3, [pc, #288]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	4a45      	ldr	r2, [pc, #276]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064fc:	430b      	orrs	r3, r1
 80064fe:	6113      	str	r3, [r2, #16]
 8006500:	e005      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006502:	4b43      	ldr	r3, [pc, #268]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	4a42      	ldr	r2, [pc, #264]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006508:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800650c:	6113      	str	r3, [r2, #16]
 800650e:	4b40      	ldr	r3, [pc, #256]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006510:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006516:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800651a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800651e:	4a3c      	ldr	r2, [pc, #240]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006520:	430b      	orrs	r3, r1
 8006522:	6713      	str	r3, [r2, #112]	; 0x70
 8006524:	e008      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006526:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800652a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800652e:	e003      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006530:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006534:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006540:	f002 0301 	and.w	r3, r2, #1
 8006544:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006548:	2300      	movs	r3, #0
 800654a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800654e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006552:	460b      	mov	r3, r1
 8006554:	4313      	orrs	r3, r2
 8006556:	f000 808f 	beq.w	8006678 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800655a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800655e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006560:	2b28      	cmp	r3, #40	; 0x28
 8006562:	d871      	bhi.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006564:	a201      	add	r2, pc, #4	; (adr r2, 800656c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656a:	bf00      	nop
 800656c:	08006651 	.word	0x08006651
 8006570:	08006649 	.word	0x08006649
 8006574:	08006649 	.word	0x08006649
 8006578:	08006649 	.word	0x08006649
 800657c:	08006649 	.word	0x08006649
 8006580:	08006649 	.word	0x08006649
 8006584:	08006649 	.word	0x08006649
 8006588:	08006649 	.word	0x08006649
 800658c:	0800661d 	.word	0x0800661d
 8006590:	08006649 	.word	0x08006649
 8006594:	08006649 	.word	0x08006649
 8006598:	08006649 	.word	0x08006649
 800659c:	08006649 	.word	0x08006649
 80065a0:	08006649 	.word	0x08006649
 80065a4:	08006649 	.word	0x08006649
 80065a8:	08006649 	.word	0x08006649
 80065ac:	08006633 	.word	0x08006633
 80065b0:	08006649 	.word	0x08006649
 80065b4:	08006649 	.word	0x08006649
 80065b8:	08006649 	.word	0x08006649
 80065bc:	08006649 	.word	0x08006649
 80065c0:	08006649 	.word	0x08006649
 80065c4:	08006649 	.word	0x08006649
 80065c8:	08006649 	.word	0x08006649
 80065cc:	08006651 	.word	0x08006651
 80065d0:	08006649 	.word	0x08006649
 80065d4:	08006649 	.word	0x08006649
 80065d8:	08006649 	.word	0x08006649
 80065dc:	08006649 	.word	0x08006649
 80065e0:	08006649 	.word	0x08006649
 80065e4:	08006649 	.word	0x08006649
 80065e8:	08006649 	.word	0x08006649
 80065ec:	08006651 	.word	0x08006651
 80065f0:	08006649 	.word	0x08006649
 80065f4:	08006649 	.word	0x08006649
 80065f8:	08006649 	.word	0x08006649
 80065fc:	08006649 	.word	0x08006649
 8006600:	08006649 	.word	0x08006649
 8006604:	08006649 	.word	0x08006649
 8006608:	08006649 	.word	0x08006649
 800660c:	08006651 	.word	0x08006651
 8006610:	58024400 	.word	0x58024400
 8006614:	58024800 	.word	0x58024800
 8006618:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800661c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006620:	3308      	adds	r3, #8
 8006622:	2101      	movs	r1, #1
 8006624:	4618      	mov	r0, r3
 8006626:	f000 ffa7 	bl	8007578 <RCCEx_PLL2_Config>
 800662a:	4603      	mov	r3, r0
 800662c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006630:	e00f      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006636:	3328      	adds	r3, #40	; 0x28
 8006638:	2101      	movs	r1, #1
 800663a:	4618      	mov	r0, r3
 800663c:	f001 f84e 	bl	80076dc <RCCEx_PLL3_Config>
 8006640:	4603      	mov	r3, r0
 8006642:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006646:	e004      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800664e:	e000      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006652:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10a      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800665a:	4bbf      	ldr	r3, [pc, #764]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800665c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006668:	4abb      	ldr	r2, [pc, #748]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800666a:	430b      	orrs	r3, r1
 800666c:	6553      	str	r3, [r2, #84]	; 0x54
 800666e:	e003      	b.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006670:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006674:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006680:	f002 0302 	and.w	r3, r2, #2
 8006684:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006688:	2300      	movs	r3, #0
 800668a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800668e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006692:	460b      	mov	r3, r1
 8006694:	4313      	orrs	r3, r2
 8006696:	d041      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800669c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800669e:	2b05      	cmp	r3, #5
 80066a0:	d824      	bhi.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80066a2:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80066a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a8:	080066f5 	.word	0x080066f5
 80066ac:	080066c1 	.word	0x080066c1
 80066b0:	080066d7 	.word	0x080066d7
 80066b4:	080066f5 	.word	0x080066f5
 80066b8:	080066f5 	.word	0x080066f5
 80066bc:	080066f5 	.word	0x080066f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c4:	3308      	adds	r3, #8
 80066c6:	2101      	movs	r1, #1
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 ff55 	bl	8007578 <RCCEx_PLL2_Config>
 80066ce:	4603      	mov	r3, r0
 80066d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80066d4:	e00f      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066da:	3328      	adds	r3, #40	; 0x28
 80066dc:	2101      	movs	r1, #1
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 fffc 	bl	80076dc <RCCEx_PLL3_Config>
 80066e4:	4603      	mov	r3, r0
 80066e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80066ea:	e004      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80066f2:	e000      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80066f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80066fe:	4b96      	ldr	r3, [pc, #600]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006702:	f023 0107 	bic.w	r1, r3, #7
 8006706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800670a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800670c:	4a92      	ldr	r2, [pc, #584]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800670e:	430b      	orrs	r3, r1
 8006710:	6553      	str	r3, [r2, #84]	; 0x54
 8006712:	e003      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006714:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006718:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800671c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006724:	f002 0304 	and.w	r3, r2, #4
 8006728:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800672c:	2300      	movs	r3, #0
 800672e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006732:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006736:	460b      	mov	r3, r1
 8006738:	4313      	orrs	r3, r2
 800673a:	d044      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800673c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006744:	2b05      	cmp	r3, #5
 8006746:	d825      	bhi.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006748:	a201      	add	r2, pc, #4	; (adr r2, 8006750 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800674a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674e:	bf00      	nop
 8006750:	0800679d 	.word	0x0800679d
 8006754:	08006769 	.word	0x08006769
 8006758:	0800677f 	.word	0x0800677f
 800675c:	0800679d 	.word	0x0800679d
 8006760:	0800679d 	.word	0x0800679d
 8006764:	0800679d 	.word	0x0800679d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800676c:	3308      	adds	r3, #8
 800676e:	2101      	movs	r1, #1
 8006770:	4618      	mov	r0, r3
 8006772:	f000 ff01 	bl	8007578 <RCCEx_PLL2_Config>
 8006776:	4603      	mov	r3, r0
 8006778:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800677c:	e00f      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800677e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006782:	3328      	adds	r3, #40	; 0x28
 8006784:	2101      	movs	r1, #1
 8006786:	4618      	mov	r0, r3
 8006788:	f000 ffa8 	bl	80076dc <RCCEx_PLL3_Config>
 800678c:	4603      	mov	r3, r0
 800678e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006792:	e004      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800679a:	e000      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800679c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800679e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10b      	bne.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067a6:	4b6c      	ldr	r3, [pc, #432]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067aa:	f023 0107 	bic.w	r1, r3, #7
 80067ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b6:	4a68      	ldr	r2, [pc, #416]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067b8:	430b      	orrs	r3, r1
 80067ba:	6593      	str	r3, [r2, #88]	; 0x58
 80067bc:	e003      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ce:	f002 0320 	and.w	r3, r2, #32
 80067d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80067d6:	2300      	movs	r3, #0
 80067d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80067dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80067e0:	460b      	mov	r3, r1
 80067e2:	4313      	orrs	r3, r2
 80067e4:	d055      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80067e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067f2:	d033      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80067f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067f8:	d82c      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80067fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067fe:	d02f      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006804:	d826      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006806:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800680a:	d02b      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800680c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006810:	d820      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006816:	d012      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800681c:	d81a      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800681e:	2b00      	cmp	r3, #0
 8006820:	d022      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006822:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006826:	d115      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800682c:	3308      	adds	r3, #8
 800682e:	2100      	movs	r1, #0
 8006830:	4618      	mov	r0, r3
 8006832:	f000 fea1 	bl	8007578 <RCCEx_PLL2_Config>
 8006836:	4603      	mov	r3, r0
 8006838:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800683c:	e015      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800683e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006842:	3328      	adds	r3, #40	; 0x28
 8006844:	2102      	movs	r1, #2
 8006846:	4618      	mov	r0, r3
 8006848:	f000 ff48 	bl	80076dc <RCCEx_PLL3_Config>
 800684c:	4603      	mov	r3, r0
 800684e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006852:	e00a      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800685a:	e006      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800685c:	bf00      	nop
 800685e:	e004      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006860:	bf00      	nop
 8006862:	e002      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006864:	bf00      	nop
 8006866:	e000      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800686a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10b      	bne.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006872:	4b39      	ldr	r3, [pc, #228]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006876:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800687a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800687e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006882:	4a35      	ldr	r2, [pc, #212]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006884:	430b      	orrs	r3, r1
 8006886:	6553      	str	r3, [r2, #84]	; 0x54
 8006888:	e003      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800688a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800688e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800689e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80068a2:	2300      	movs	r3, #0
 80068a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068a8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80068ac:	460b      	mov	r3, r1
 80068ae:	4313      	orrs	r3, r2
 80068b0:	d058      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80068b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80068be:	d033      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80068c0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80068c4:	d82c      	bhi.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80068c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ca:	d02f      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80068cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068d0:	d826      	bhi.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80068d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068d6:	d02b      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80068d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068dc:	d820      	bhi.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80068de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068e2:	d012      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80068e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068e8:	d81a      	bhi.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d022      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80068ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068f2:	d115      	bne.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f8:	3308      	adds	r3, #8
 80068fa:	2100      	movs	r1, #0
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fe3b 	bl	8007578 <RCCEx_PLL2_Config>
 8006902:	4603      	mov	r3, r0
 8006904:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006908:	e015      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800690a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800690e:	3328      	adds	r3, #40	; 0x28
 8006910:	2102      	movs	r1, #2
 8006912:	4618      	mov	r0, r3
 8006914:	f000 fee2 	bl	80076dc <RCCEx_PLL3_Config>
 8006918:	4603      	mov	r3, r0
 800691a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800691e:	e00a      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006926:	e006      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006928:	bf00      	nop
 800692a:	e004      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800692c:	bf00      	nop
 800692e:	e002      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006930:	bf00      	nop
 8006932:	e000      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006936:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10e      	bne.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800693e:	4b06      	ldr	r3, [pc, #24]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006942:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800694a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800694e:	4a02      	ldr	r2, [pc, #8]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006950:	430b      	orrs	r3, r1
 8006952:	6593      	str	r3, [r2, #88]	; 0x58
 8006954:	e006      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006956:	bf00      	nop
 8006958:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800695c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006960:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006970:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006974:	2300      	movs	r3, #0
 8006976:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800697a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800697e:	460b      	mov	r3, r1
 8006980:	4313      	orrs	r3, r2
 8006982:	d055      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006988:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800698c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006990:	d033      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006992:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006996:	d82c      	bhi.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800699c:	d02f      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800699e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069a2:	d826      	bhi.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80069a4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80069a8:	d02b      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80069aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80069ae:	d820      	bhi.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80069b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069b4:	d012      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80069b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ba:	d81a      	bhi.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d022      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80069c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069c4:	d115      	bne.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ca:	3308      	adds	r3, #8
 80069cc:	2100      	movs	r1, #0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fdd2 	bl	8007578 <RCCEx_PLL2_Config>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80069da:	e015      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e0:	3328      	adds	r3, #40	; 0x28
 80069e2:	2102      	movs	r1, #2
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 fe79 	bl	80076dc <RCCEx_PLL3_Config>
 80069ea:	4603      	mov	r3, r0
 80069ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80069f0:	e00a      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80069f8:	e006      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80069fa:	bf00      	nop
 80069fc:	e004      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80069fe:	bf00      	nop
 8006a00:	e002      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006a02:	bf00      	nop
 8006a04:	e000      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006a06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10b      	bne.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006a10:	4ba0      	ldr	r3, [pc, #640]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a14:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a20:	4a9c      	ldr	r2, [pc, #624]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a22:	430b      	orrs	r3, r1
 8006a24:	6593      	str	r3, [r2, #88]	; 0x58
 8006a26:	e003      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a38:	f002 0308 	and.w	r3, r2, #8
 8006a3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a40:	2300      	movs	r3, #0
 8006a42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006a46:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	d01e      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a5c:	d10c      	bne.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a62:	3328      	adds	r3, #40	; 0x28
 8006a64:	2102      	movs	r1, #2
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 fe38 	bl	80076dc <RCCEx_PLL3_Config>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006a78:	4b86      	ldr	r3, [pc, #536]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a88:	4a82      	ldr	r2, [pc, #520]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a8a:	430b      	orrs	r3, r1
 8006a8c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a96:	f002 0310 	and.w	r3, r2, #16
 8006a9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006aa4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	d01e      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aba:	d10c      	bne.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac0:	3328      	adds	r3, #40	; 0x28
 8006ac2:	2102      	movs	r1, #2
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 fe09 	bl	80076dc <RCCEx_PLL3_Config>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ad6:	4b6f      	ldr	r3, [pc, #444]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ada:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ae6:	4a6b      	ldr	r2, [pc, #428]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ae8:	430b      	orrs	r3, r1
 8006aea:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006af8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006afa:	2300      	movs	r3, #0
 8006afc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006afe:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006b02:	460b      	mov	r3, r1
 8006b04:	4313      	orrs	r3, r2
 8006b06:	d03e      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b14:	d022      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006b16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b1a:	d81b      	bhi.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d003      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b24:	d00b      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006b26:	e015      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b2c:	3308      	adds	r3, #8
 8006b2e:	2100      	movs	r1, #0
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 fd21 	bl	8007578 <RCCEx_PLL2_Config>
 8006b36:	4603      	mov	r3, r0
 8006b38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b3c:	e00f      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b42:	3328      	adds	r3, #40	; 0x28
 8006b44:	2102      	movs	r1, #2
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fdc8 	bl	80076dc <RCCEx_PLL3_Config>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b52:	e004      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b5a:	e000      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b5e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10b      	bne.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b66:	4b4b      	ldr	r3, [pc, #300]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b6a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b76:	4a47      	ldr	r2, [pc, #284]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b78:	430b      	orrs	r3, r1
 8006b7a:	6593      	str	r3, [r2, #88]	; 0x58
 8006b7c:	e003      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b82:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006b92:	673b      	str	r3, [r7, #112]	; 0x70
 8006b94:	2300      	movs	r3, #0
 8006b96:	677b      	str	r3, [r7, #116]	; 0x74
 8006b98:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	d03b      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006baa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bae:	d01f      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006bb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bb4:	d818      	bhi.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bba:	d003      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006bbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bc0:	d007      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006bc2:	e011      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bc4:	4b33      	ldr	r3, [pc, #204]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	4a32      	ldr	r2, [pc, #200]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006bd0:	e00f      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd6:	3328      	adds	r3, #40	; 0x28
 8006bd8:	2101      	movs	r1, #1
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 fd7e 	bl	80076dc <RCCEx_PLL3_Config>
 8006be0:	4603      	mov	r3, r0
 8006be2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006be6:	e004      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006bee:	e000      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bf2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10b      	bne.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bfa:	4b26      	ldr	r3, [pc, #152]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bfe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c0a:	4a22      	ldr	r2, [pc, #136]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c0c:	430b      	orrs	r3, r1
 8006c0e:	6553      	str	r3, [r2, #84]	; 0x54
 8006c10:	e003      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c16:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c22:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006c26:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c28:	2300      	movs	r3, #0
 8006c2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c2c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006c30:	460b      	mov	r3, r1
 8006c32:	4313      	orrs	r3, r2
 8006c34:	d034      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c44:	d007      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006c46:	e011      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c48:	4b12      	ldr	r3, [pc, #72]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4c:	4a11      	ldr	r2, [pc, #68]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c54:	e00e      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c5a:	3308      	adds	r3, #8
 8006c5c:	2102      	movs	r1, #2
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 fc8a 	bl	8007578 <RCCEx_PLL2_Config>
 8006c64:	4603      	mov	r3, r0
 8006c66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c6a:	e003      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006c72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10d      	bne.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006c7c:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c8a:	4a02      	ldr	r2, [pc, #8]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c8c:	430b      	orrs	r3, r1
 8006c8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c90:	e006      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006c92:	bf00      	nop
 8006c94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006cac:	663b      	str	r3, [r7, #96]	; 0x60
 8006cae:	2300      	movs	r3, #0
 8006cb0:	667b      	str	r3, [r7, #100]	; 0x64
 8006cb2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	d00c      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc0:	3328      	adds	r3, #40	; 0x28
 8006cc2:	2102      	movs	r1, #2
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 fd09 	bl	80076dc <RCCEx_PLL3_Config>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d002      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cde:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006ce2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ce8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006cec:	460b      	mov	r3, r1
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	d036      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cfc:	d018      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d02:	d811      	bhi.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d08:	d014      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006d0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d0e:	d80b      	bhi.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d011      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d18:	d106      	bne.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d1a:	4bb7      	ldr	r3, [pc, #732]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1e:	4ab6      	ldr	r2, [pc, #728]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006d26:	e008      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006d2e:	e004      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006d30:	bf00      	nop
 8006d32:	e002      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006d34:	bf00      	nop
 8006d36:	e000      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10a      	bne.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d42:	4bad      	ldr	r3, [pc, #692]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d50:	4aa9      	ldr	r2, [pc, #676]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d52:	430b      	orrs	r3, r1
 8006d54:	6553      	str	r3, [r2, #84]	; 0x54
 8006d56:	e003      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d68:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006d6c:	653b      	str	r3, [r7, #80]	; 0x50
 8006d6e:	2300      	movs	r3, #0
 8006d70:	657b      	str	r3, [r7, #84]	; 0x54
 8006d72:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006d76:	460b      	mov	r3, r1
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	d009      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d7c:	4b9e      	ldr	r3, [pc, #632]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8a:	4a9b      	ldr	r2, [pc, #620]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d8c:	430b      	orrs	r3, r1
 8006d8e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d98:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006d9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d9e:	2300      	movs	r3, #0
 8006da0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006da2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006da6:	460b      	mov	r3, r1
 8006da8:	4313      	orrs	r3, r2
 8006daa:	d009      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006dac:	4b92      	ldr	r3, [pc, #584]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dba:	4a8f      	ldr	r2, [pc, #572]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006dbc:	430b      	orrs	r3, r1
 8006dbe:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006dcc:	643b      	str	r3, [r7, #64]	; 0x40
 8006dce:	2300      	movs	r3, #0
 8006dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8006dd2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	d00e      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ddc:	4b86      	ldr	r3, [pc, #536]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	4a85      	ldr	r2, [pc, #532]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006de2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006de6:	6113      	str	r3, [r2, #16]
 8006de8:	4b83      	ldr	r3, [pc, #524]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006dea:	6919      	ldr	r1, [r3, #16]
 8006dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006df0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006df4:	4a80      	ldr	r2, [pc, #512]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006df6:	430b      	orrs	r3, r1
 8006df8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e02:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006e06:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e08:	2300      	movs	r3, #0
 8006e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e0c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006e10:	460b      	mov	r3, r1
 8006e12:	4313      	orrs	r3, r2
 8006e14:	d009      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006e16:	4b78      	ldr	r3, [pc, #480]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e1a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e24:	4a74      	ldr	r2, [pc, #464]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e26:	430b      	orrs	r3, r1
 8006e28:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e32:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006e36:	633b      	str	r3, [r7, #48]	; 0x30
 8006e38:	2300      	movs	r3, #0
 8006e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e3c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006e40:	460b      	mov	r3, r1
 8006e42:	4313      	orrs	r3, r2
 8006e44:	d00a      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e46:	4b6c      	ldr	r3, [pc, #432]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e4a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e56:	4a68      	ldr	r2, [pc, #416]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e58:	430b      	orrs	r3, r1
 8006e5a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	2100      	movs	r1, #0
 8006e66:	62b9      	str	r1, [r7, #40]	; 0x28
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e6e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006e72:	460b      	mov	r3, r1
 8006e74:	4313      	orrs	r3, r2
 8006e76:	d011      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7c:	3308      	adds	r3, #8
 8006e7e:	2100      	movs	r1, #0
 8006e80:	4618      	mov	r0, r3
 8006e82:	f000 fb79 	bl	8007578 <RCCEx_PLL2_Config>
 8006e86:	4603      	mov	r3, r0
 8006e88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006e8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d003      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	6239      	str	r1, [r7, #32]
 8006ea8:	f003 0302 	and.w	r3, r3, #2
 8006eac:	627b      	str	r3, [r7, #36]	; 0x24
 8006eae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	d011      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ebc:	3308      	adds	r3, #8
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f000 fb59 	bl	8007578 <RCCEx_PLL2_Config>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ed8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	61b9      	str	r1, [r7, #24]
 8006ee8:	f003 0304 	and.w	r3, r3, #4
 8006eec:	61fb      	str	r3, [r7, #28]
 8006eee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	d011      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006efc:	3308      	adds	r3, #8
 8006efe:	2102      	movs	r1, #2
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 fb39 	bl	8007578 <RCCEx_PLL2_Config>
 8006f06:	4603      	mov	r3, r0
 8006f08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006f0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d003      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f18:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f24:	2100      	movs	r1, #0
 8006f26:	6139      	str	r1, [r7, #16]
 8006f28:	f003 0308 	and.w	r3, r3, #8
 8006f2c:	617b      	str	r3, [r7, #20]
 8006f2e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006f32:	460b      	mov	r3, r1
 8006f34:	4313      	orrs	r3, r2
 8006f36:	d011      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f3c:	3328      	adds	r3, #40	; 0x28
 8006f3e:	2100      	movs	r1, #0
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 fbcb 	bl	80076dc <RCCEx_PLL3_Config>
 8006f46:	4603      	mov	r3, r0
 8006f48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8006f4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d003      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f64:	2100      	movs	r1, #0
 8006f66:	60b9      	str	r1, [r7, #8]
 8006f68:	f003 0310 	and.w	r3, r3, #16
 8006f6c:	60fb      	str	r3, [r7, #12]
 8006f6e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006f72:	460b      	mov	r3, r1
 8006f74:	4313      	orrs	r3, r2
 8006f76:	d011      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f7c:	3328      	adds	r3, #40	; 0x28
 8006f7e:	2101      	movs	r1, #1
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 fbab 	bl	80076dc <RCCEx_PLL3_Config>
 8006f86:	4603      	mov	r3, r0
 8006f88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006f8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d003      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	6039      	str	r1, [r7, #0]
 8006fa8:	f003 0320 	and.w	r3, r3, #32
 8006fac:	607b      	str	r3, [r7, #4]
 8006fae:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	d011      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fbc:	3328      	adds	r3, #40	; 0x28
 8006fbe:	2102      	movs	r1, #2
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f000 fb8b 	bl	80076dc <RCCEx_PLL3_Config>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006fcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d003      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006fd8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8006fdc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	e000      	b.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ff6:	bf00      	nop
 8006ff8:	58024400 	.word	0x58024400

08006ffc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007000:	f7fe fdbe 	bl	8005b80 <HAL_RCC_GetHCLKFreq>
 8007004:	4602      	mov	r2, r0
 8007006:	4b06      	ldr	r3, [pc, #24]	; (8007020 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	091b      	lsrs	r3, r3, #4
 800700c:	f003 0307 	and.w	r3, r3, #7
 8007010:	4904      	ldr	r1, [pc, #16]	; (8007024 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007012:	5ccb      	ldrb	r3, [r1, r3]
 8007014:	f003 031f 	and.w	r3, r3, #31
 8007018:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800701c:	4618      	mov	r0, r3
 800701e:	bd80      	pop	{r7, pc}
 8007020:	58024400 	.word	0x58024400
 8007024:	08015898 	.word	0x08015898

08007028 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007028:	b480      	push	{r7}
 800702a:	b089      	sub	sp, #36	; 0x24
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007030:	4ba1      	ldr	r3, [pc, #644]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007034:	f003 0303 	and.w	r3, r3, #3
 8007038:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800703a:	4b9f      	ldr	r3, [pc, #636]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800703c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703e:	0b1b      	lsrs	r3, r3, #12
 8007040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007044:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007046:	4b9c      	ldr	r3, [pc, #624]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704a:	091b      	lsrs	r3, r3, #4
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007052:	4b99      	ldr	r3, [pc, #612]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007056:	08db      	lsrs	r3, r3, #3
 8007058:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	fb02 f303 	mul.w	r3, r2, r3
 8007062:	ee07 3a90 	vmov	s15, r3
 8007066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800706a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 8111 	beq.w	8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	2b02      	cmp	r3, #2
 800707a:	f000 8083 	beq.w	8007184 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	2b02      	cmp	r3, #2
 8007082:	f200 80a1 	bhi.w	80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d003      	beq.n	8007094 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d056      	beq.n	8007140 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007092:	e099      	b.n	80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007094:	4b88      	ldr	r3, [pc, #544]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0320 	and.w	r3, r3, #32
 800709c:	2b00      	cmp	r3, #0
 800709e:	d02d      	beq.n	80070fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070a0:	4b85      	ldr	r3, [pc, #532]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	08db      	lsrs	r3, r3, #3
 80070a6:	f003 0303 	and.w	r3, r3, #3
 80070aa:	4a84      	ldr	r2, [pc, #528]	; (80072bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80070ac:	fa22 f303 	lsr.w	r3, r2, r3
 80070b0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	ee07 3a90 	vmov	s15, r3
 80070b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	ee07 3a90 	vmov	s15, r3
 80070c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ca:	4b7b      	ldr	r3, [pc, #492]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070da:	ed97 6a03 	vldr	s12, [r7, #12]
 80070de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80072c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80070fa:	e087      	b.n	800720c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	ee07 3a90 	vmov	s15, r3
 8007102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007106:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80072c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800710a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710e:	4b6a      	ldr	r3, [pc, #424]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007122:	eddf 5a67 	vldr	s11, [pc, #412]	; 80072c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800712a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800713a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800713e:	e065      	b.n	800720c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	ee07 3a90 	vmov	s15, r3
 8007146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800714a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80072c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800714e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007152:	4b59      	ldr	r3, [pc, #356]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800715a:	ee07 3a90 	vmov	s15, r3
 800715e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007162:	ed97 6a03 	vldr	s12, [r7, #12]
 8007166:	eddf 5a56 	vldr	s11, [pc, #344]	; 80072c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800716a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800716e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800717a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007182:	e043      	b.n	800720c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80072cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007196:	4b48      	ldr	r3, [pc, #288]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719e:	ee07 3a90 	vmov	s15, r3
 80071a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80072c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071c6:	e021      	b.n	800720c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	ee07 3a90 	vmov	s15, r3
 80071ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80072c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071da:	4b37      	ldr	r3, [pc, #220]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e2:	ee07 3a90 	vmov	s15, r3
 80071e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80072c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007206:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800720a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800720c:	4b2a      	ldr	r3, [pc, #168]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800720e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007210:	0a5b      	lsrs	r3, r3, #9
 8007212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007222:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007226:	edd7 6a07 	vldr	s13, [r7, #28]
 800722a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800722e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007232:	ee17 2a90 	vmov	r2, s15
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800723a:	4b1f      	ldr	r3, [pc, #124]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800723c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723e:	0c1b      	lsrs	r3, r3, #16
 8007240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007244:	ee07 3a90 	vmov	s15, r3
 8007248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007250:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007254:	edd7 6a07 	vldr	s13, [r7, #28]
 8007258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800725c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007260:	ee17 2a90 	vmov	r2, s15
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007268:	4b13      	ldr	r3, [pc, #76]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800726a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726c:	0e1b      	lsrs	r3, r3, #24
 800726e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007272:	ee07 3a90 	vmov	s15, r3
 8007276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800727e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007282:	edd7 6a07 	vldr	s13, [r7, #28]
 8007286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800728a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800728e:	ee17 2a90 	vmov	r2, s15
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007296:	e008      	b.n	80072aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	609a      	str	r2, [r3, #8]
}
 80072aa:	bf00      	nop
 80072ac:	3724      	adds	r7, #36	; 0x24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	58024400 	.word	0x58024400
 80072bc:	03d09000 	.word	0x03d09000
 80072c0:	46000000 	.word	0x46000000
 80072c4:	4c742400 	.word	0x4c742400
 80072c8:	4a742400 	.word	0x4a742400
 80072cc:	4af42400 	.word	0x4af42400

080072d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b089      	sub	sp, #36	; 0x24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072d8:	4ba1      	ldr	r3, [pc, #644]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072dc:	f003 0303 	and.w	r3, r3, #3
 80072e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80072e2:	4b9f      	ldr	r3, [pc, #636]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e6:	0d1b      	lsrs	r3, r3, #20
 80072e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80072ee:	4b9c      	ldr	r3, [pc, #624]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f2:	0a1b      	lsrs	r3, r3, #8
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80072fa:	4b99      	ldr	r3, [pc, #612]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072fe:	08db      	lsrs	r3, r3, #3
 8007300:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	fb02 f303 	mul.w	r3, r2, r3
 800730a:	ee07 3a90 	vmov	s15, r3
 800730e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007312:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 8111 	beq.w	8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	2b02      	cmp	r3, #2
 8007322:	f000 8083 	beq.w	800742c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	2b02      	cmp	r3, #2
 800732a:	f200 80a1 	bhi.w	8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d003      	beq.n	800733c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d056      	beq.n	80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800733a:	e099      	b.n	8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800733c:	4b88      	ldr	r3, [pc, #544]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0320 	and.w	r3, r3, #32
 8007344:	2b00      	cmp	r3, #0
 8007346:	d02d      	beq.n	80073a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007348:	4b85      	ldr	r3, [pc, #532]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	08db      	lsrs	r3, r3, #3
 800734e:	f003 0303 	and.w	r3, r3, #3
 8007352:	4a84      	ldr	r2, [pc, #528]	; (8007564 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007354:	fa22 f303 	lsr.w	r3, r2, r3
 8007358:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	ee07 3a90 	vmov	s15, r3
 8007360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	ee07 3a90 	vmov	s15, r3
 800736a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007372:	4b7b      	ldr	r3, [pc, #492]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007382:	ed97 6a03 	vldr	s12, [r7, #12]
 8007386:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007568 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800738a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800738e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800739a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800739e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80073a2:	e087      	b.n	80074b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	ee07 3a90 	vmov	s15, r3
 80073aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800756c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80073b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073b6:	4b6a      	ldr	r3, [pc, #424]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073be:	ee07 3a90 	vmov	s15, r3
 80073c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007568 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073e6:	e065      	b.n	80074b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	ee07 3a90 	vmov	s15, r3
 80073ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007570 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073fa:	4b59      	ldr	r3, [pc, #356]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007402:	ee07 3a90 	vmov	s15, r3
 8007406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800740a:	ed97 6a03 	vldr	s12, [r7, #12]
 800740e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007568 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800741a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800741e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800742a:	e043      	b.n	80074b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	ee07 3a90 	vmov	s15, r3
 8007432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007436:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800743a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800743e:	4b48      	ldr	r3, [pc, #288]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007446:	ee07 3a90 	vmov	s15, r3
 800744a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800744e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007452:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007568 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800745a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800745e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800746a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800746e:	e021      	b.n	80074b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007570 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800747e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007482:	4b37      	ldr	r3, [pc, #220]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007492:	ed97 6a03 	vldr	s12, [r7, #12]
 8007496:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007568 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800749a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800749e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80074b4:	4b2a      	ldr	r3, [pc, #168]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b8:	0a5b      	lsrs	r3, r3, #9
 80074ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80074d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074da:	ee17 2a90 	vmov	r2, s15
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80074e2:	4b1f      	ldr	r3, [pc, #124]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e6:	0c1b      	lsrs	r3, r3, #16
 80074e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ec:	ee07 3a90 	vmov	s15, r3
 80074f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007508:	ee17 2a90 	vmov	r2, s15
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007510:	4b13      	ldr	r3, [pc, #76]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007514:	0e1b      	lsrs	r3, r3, #24
 8007516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800751a:	ee07 3a90 	vmov	s15, r3
 800751e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007526:	ee37 7a87 	vadd.f32	s14, s15, s14
 800752a:	edd7 6a07 	vldr	s13, [r7, #28]
 800752e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007536:	ee17 2a90 	vmov	r2, s15
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800753e:	e008      	b.n	8007552 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	609a      	str	r2, [r3, #8]
}
 8007552:	bf00      	nop
 8007554:	3724      	adds	r7, #36	; 0x24
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	58024400 	.word	0x58024400
 8007564:	03d09000 	.word	0x03d09000
 8007568:	46000000 	.word	0x46000000
 800756c:	4c742400 	.word	0x4c742400
 8007570:	4a742400 	.word	0x4a742400
 8007574:	4af42400 	.word	0x4af42400

08007578 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007586:	4b53      	ldr	r3, [pc, #332]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758a:	f003 0303 	and.w	r3, r3, #3
 800758e:	2b03      	cmp	r3, #3
 8007590:	d101      	bne.n	8007596 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e099      	b.n	80076ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007596:	4b4f      	ldr	r3, [pc, #316]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a4e      	ldr	r2, [pc, #312]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 800759c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075a2:	f7fa faa9 	bl	8001af8 <HAL_GetTick>
 80075a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075a8:	e008      	b.n	80075bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80075aa:	f7fa faa5 	bl	8001af8 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d901      	bls.n	80075bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e086      	b.n	80076ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075bc:	4b45      	ldr	r3, [pc, #276]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1f0      	bne.n	80075aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80075c8:	4b42      	ldr	r3, [pc, #264]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 80075ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	031b      	lsls	r3, r3, #12
 80075d6:	493f      	ldr	r1, [pc, #252]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	628b      	str	r3, [r1, #40]	; 0x28
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	3b01      	subs	r3, #1
 80075e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	3b01      	subs	r3, #1
 80075ec:	025b      	lsls	r3, r3, #9
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	431a      	orrs	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	041b      	lsls	r3, r3, #16
 80075fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80075fe:	431a      	orrs	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	3b01      	subs	r3, #1
 8007606:	061b      	lsls	r3, r3, #24
 8007608:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800760c:	4931      	ldr	r1, [pc, #196]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 800760e:	4313      	orrs	r3, r2
 8007610:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007612:	4b30      	ldr	r3, [pc, #192]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007616:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	492d      	ldr	r1, [pc, #180]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007620:	4313      	orrs	r3, r2
 8007622:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007624:	4b2b      	ldr	r3, [pc, #172]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007628:	f023 0220 	bic.w	r2, r3, #32
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	4928      	ldr	r1, [pc, #160]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007632:	4313      	orrs	r3, r2
 8007634:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007636:	4b27      	ldr	r3, [pc, #156]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763a:	4a26      	ldr	r2, [pc, #152]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 800763c:	f023 0310 	bic.w	r3, r3, #16
 8007640:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007642:	4b24      	ldr	r3, [pc, #144]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007644:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007646:	4b24      	ldr	r3, [pc, #144]	; (80076d8 <RCCEx_PLL2_Config+0x160>)
 8007648:	4013      	ands	r3, r2
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	69d2      	ldr	r2, [r2, #28]
 800764e:	00d2      	lsls	r2, r2, #3
 8007650:	4920      	ldr	r1, [pc, #128]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007652:	4313      	orrs	r3, r2
 8007654:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007656:	4b1f      	ldr	r3, [pc, #124]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765a:	4a1e      	ldr	r2, [pc, #120]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 800765c:	f043 0310 	orr.w	r3, r3, #16
 8007660:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d106      	bne.n	8007676 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007668:	4b1a      	ldr	r3, [pc, #104]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	4a19      	ldr	r2, [pc, #100]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 800766e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007672:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007674:	e00f      	b.n	8007696 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d106      	bne.n	800768a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800767c:	4b15      	ldr	r3, [pc, #84]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 800767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007680:	4a14      	ldr	r2, [pc, #80]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007686:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007688:	e005      	b.n	8007696 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800768a:	4b12      	ldr	r3, [pc, #72]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 800768c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768e:	4a11      	ldr	r2, [pc, #68]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007694:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007696:	4b0f      	ldr	r3, [pc, #60]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a0e      	ldr	r2, [pc, #56]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 800769c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076a2:	f7fa fa29 	bl	8001af8 <HAL_GetTick>
 80076a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076a8:	e008      	b.n	80076bc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80076aa:	f7fa fa25 	bl	8001af8 <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d901      	bls.n	80076bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e006      	b.n	80076ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076bc:	4b05      	ldr	r3, [pc, #20]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d0f0      	beq.n	80076aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	58024400 	.word	0x58024400
 80076d8:	ffff0007 	.word	0xffff0007

080076dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076e6:	2300      	movs	r3, #0
 80076e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076ea:	4b53      	ldr	r3, [pc, #332]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80076ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ee:	f003 0303 	and.w	r3, r3, #3
 80076f2:	2b03      	cmp	r3, #3
 80076f4:	d101      	bne.n	80076fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e099      	b.n	800782e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80076fa:	4b4f      	ldr	r3, [pc, #316]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a4e      	ldr	r2, [pc, #312]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 8007700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007704:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007706:	f7fa f9f7 	bl	8001af8 <HAL_GetTick>
 800770a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800770c:	e008      	b.n	8007720 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800770e:	f7fa f9f3 	bl	8001af8 <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	2b02      	cmp	r3, #2
 800771a:	d901      	bls.n	8007720 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800771c:	2303      	movs	r3, #3
 800771e:	e086      	b.n	800782e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007720:	4b45      	ldr	r3, [pc, #276]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1f0      	bne.n	800770e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800772c:	4b42      	ldr	r3, [pc, #264]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 800772e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007730:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	051b      	lsls	r3, r3, #20
 800773a:	493f      	ldr	r1, [pc, #252]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 800773c:	4313      	orrs	r3, r2
 800773e:	628b      	str	r3, [r1, #40]	; 0x28
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	3b01      	subs	r3, #1
 8007746:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	3b01      	subs	r3, #1
 8007750:	025b      	lsls	r3, r3, #9
 8007752:	b29b      	uxth	r3, r3
 8007754:	431a      	orrs	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	3b01      	subs	r3, #1
 800775c:	041b      	lsls	r3, r3, #16
 800775e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007762:	431a      	orrs	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	3b01      	subs	r3, #1
 800776a:	061b      	lsls	r3, r3, #24
 800776c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007770:	4931      	ldr	r1, [pc, #196]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 8007772:	4313      	orrs	r3, r2
 8007774:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007776:	4b30      	ldr	r3, [pc, #192]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 8007778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	492d      	ldr	r1, [pc, #180]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 8007784:	4313      	orrs	r3, r2
 8007786:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007788:	4b2b      	ldr	r3, [pc, #172]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 800778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	4928      	ldr	r1, [pc, #160]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 8007796:	4313      	orrs	r3, r2
 8007798:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800779a:	4b27      	ldr	r3, [pc, #156]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 800779c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779e:	4a26      	ldr	r2, [pc, #152]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80077a6:	4b24      	ldr	r3, [pc, #144]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077aa:	4b24      	ldr	r3, [pc, #144]	; (800783c <RCCEx_PLL3_Config+0x160>)
 80077ac:	4013      	ands	r3, r2
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	69d2      	ldr	r2, [r2, #28]
 80077b2:	00d2      	lsls	r2, r2, #3
 80077b4:	4920      	ldr	r1, [pc, #128]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80077ba:	4b1f      	ldr	r3, [pc, #124]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077be:	4a1e      	ldr	r2, [pc, #120]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d106      	bne.n	80077da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80077cc:	4b1a      	ldr	r3, [pc, #104]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d0:	4a19      	ldr	r2, [pc, #100]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80077d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077d8:	e00f      	b.n	80077fa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d106      	bne.n	80077ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80077e0:	4b15      	ldr	r3, [pc, #84]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e4:	4a14      	ldr	r2, [pc, #80]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077ec:	e005      	b.n	80077fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80077ee:	4b12      	ldr	r3, [pc, #72]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f2:	4a11      	ldr	r2, [pc, #68]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80077fa:	4b0f      	ldr	r3, [pc, #60]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a0e      	ldr	r2, [pc, #56]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 8007800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007806:	f7fa f977 	bl	8001af8 <HAL_GetTick>
 800780a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800780c:	e008      	b.n	8007820 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800780e:	f7fa f973 	bl	8001af8 <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	2b02      	cmp	r3, #2
 800781a:	d901      	bls.n	8007820 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e006      	b.n	800782e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007820:	4b05      	ldr	r3, [pc, #20]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d0f0      	beq.n	800780e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800782c:	7bfb      	ldrb	r3, [r7, #15]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	58024400 	.word	0x58024400
 800783c:	ffff0007 	.word	0xffff0007

08007840 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e10f      	b.n	8007a72 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a87      	ldr	r2, [pc, #540]	; (8007a7c <HAL_SPI_Init+0x23c>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d00f      	beq.n	8007882 <HAL_SPI_Init+0x42>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a86      	ldr	r2, [pc, #536]	; (8007a80 <HAL_SPI_Init+0x240>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d00a      	beq.n	8007882 <HAL_SPI_Init+0x42>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a84      	ldr	r2, [pc, #528]	; (8007a84 <HAL_SPI_Init+0x244>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d005      	beq.n	8007882 <HAL_SPI_Init+0x42>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	2b0f      	cmp	r3, #15
 800787c:	d901      	bls.n	8007882 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e0f7      	b.n	8007a72 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f001 f952 	bl	8008b2c <SPI_GetPacketSize>
 8007888:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a7b      	ldr	r2, [pc, #492]	; (8007a7c <HAL_SPI_Init+0x23c>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d00c      	beq.n	80078ae <HAL_SPI_Init+0x6e>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a79      	ldr	r2, [pc, #484]	; (8007a80 <HAL_SPI_Init+0x240>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d007      	beq.n	80078ae <HAL_SPI_Init+0x6e>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a78      	ldr	r2, [pc, #480]	; (8007a84 <HAL_SPI_Init+0x244>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d002      	beq.n	80078ae <HAL_SPI_Init+0x6e>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2b08      	cmp	r3, #8
 80078ac:	d811      	bhi.n	80078d2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078b2:	4a72      	ldr	r2, [pc, #456]	; (8007a7c <HAL_SPI_Init+0x23c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d009      	beq.n	80078cc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a70      	ldr	r2, [pc, #448]	; (8007a80 <HAL_SPI_Init+0x240>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d004      	beq.n	80078cc <HAL_SPI_Init+0x8c>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a6f      	ldr	r2, [pc, #444]	; (8007a84 <HAL_SPI_Init+0x244>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d104      	bne.n	80078d6 <HAL_SPI_Init+0x96>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2b10      	cmp	r3, #16
 80078d0:	d901      	bls.n	80078d6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e0cd      	b.n	8007a72 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d106      	bne.n	80078f0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7f9 fcf8 	bl	80012e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2202      	movs	r2, #2
 80078f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f022 0201 	bic.w	r2, r2, #1
 8007906:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007912:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800791c:	d119      	bne.n	8007952 <HAL_SPI_Init+0x112>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007926:	d103      	bne.n	8007930 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800792c:	2b00      	cmp	r3, #0
 800792e:	d008      	beq.n	8007942 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10c      	bne.n	8007952 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800793c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007940:	d107      	bne.n	8007952 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007950:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00f      	beq.n	800797e <HAL_SPI_Init+0x13e>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	2b06      	cmp	r3, #6
 8007964:	d90b      	bls.n	800797e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	430a      	orrs	r2, r1
 800797a:	601a      	str	r2, [r3, #0]
 800797c:	e007      	b.n	800798e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800798c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	69da      	ldr	r2, [r3, #28]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007996:	431a      	orrs	r2, r3
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	431a      	orrs	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a0:	ea42 0103 	orr.w	r1, r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68da      	ldr	r2, [r3, #12]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	430a      	orrs	r2, r1
 80079ae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	431a      	orrs	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079be:	431a      	orrs	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	431a      	orrs	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	431a      	orrs	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	431a      	orrs	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	431a      	orrs	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	431a      	orrs	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079e2:	431a      	orrs	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	431a      	orrs	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ee:	ea42 0103 	orr.w	r1, r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d113      	bne.n	8007a2e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a18:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a2c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f022 0201 	bic.w	r2, r2, #1
 8007a3c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00a      	beq.n	8007a60 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	430a      	orrs	r2, r1
 8007a5e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	40013000 	.word	0x40013000
 8007a80:	40003800 	.word	0x40003800
 8007a84:	40003c00 	.word	0x40003c00

08007a88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b08c      	sub	sp, #48	; 0x30
 8007a8c:	af02      	add	r7, sp, #8
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
 8007a94:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a96:	2300      	movs	r3, #0
 8007a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3320      	adds	r3, #32
 8007aa2:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3330      	adds	r3, #48	; 0x30
 8007aaa:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d101      	bne.n	8007aba <HAL_SPI_TransmitReceive+0x32>
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	e1fd      	b.n	8007eb6 <HAL_SPI_TransmitReceive+0x42e>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ac2:	f7fa f819 	bl	8001af8 <HAL_GetTick>
 8007ac6:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8007ac8:	887b      	ldrh	r3, [r7, #2]
 8007aca:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 8007acc:	887b      	ldrh	r3, [r7, #2]
 8007ace:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d009      	beq.n	8007af0 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 8007adc:	2302      	movs	r3, #2
 8007ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007aea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007aee:	e1e2      	b.n	8007eb6 <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d005      	beq.n	8007b02 <HAL_SPI_TransmitReceive+0x7a>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d002      	beq.n	8007b02 <HAL_SPI_TransmitReceive+0x7a>
 8007afc:	887b      	ldrh	r3, [r7, #2]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d109      	bne.n	8007b16 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007b10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b14:	e1cf      	b.n	8007eb6 <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2205      	movs	r2, #5
 8007b1a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	887a      	ldrh	r2, [r7, #2]
 8007b30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	887a      	ldrh	r2, [r7, #2]
 8007b38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	887a      	ldrh	r2, [r7, #2]
 8007b46:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	887a      	ldrh	r2, [r7, #2]
 8007b4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68da      	ldr	r2, [r3, #12]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8007b6c:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	4b82      	ldr	r3, [pc, #520]	; (8007d80 <HAL_SPI_TransmitReceive+0x2f8>)
 8007b76:	4013      	ands	r3, r2
 8007b78:	8879      	ldrh	r1, [r7, #2]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	6812      	ldr	r2, [r2, #0]
 8007b7e:	430b      	orrs	r3, r1
 8007b80:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f042 0201 	orr.w	r2, r2, #1
 8007b90:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b9a:	d107      	bne.n	8007bac <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007baa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	2b0f      	cmp	r3, #15
 8007bb2:	d970      	bls.n	8007c96 <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007bb4:	e068      	b.n	8007c88 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	f003 0302 	and.w	r3, r3, #2
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d11a      	bne.n	8007bfa <HAL_SPI_TransmitReceive+0x172>
 8007bc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d017      	beq.n	8007bfa <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6812      	ldr	r2, [r2, #0]
 8007bd4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bda:	1d1a      	adds	r2, r3, #4
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	3b01      	subs	r3, #1
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007bf8:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	695a      	ldr	r2, [r3, #20]
 8007c00:	f248 0308 	movw	r3, #32776	; 0x8008
 8007c04:	4013      	ands	r3, r2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d01a      	beq.n	8007c40 <HAL_SPI_TransmitReceive+0x1b8>
 8007c0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d017      	beq.n	8007c40 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007c1a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c20:	1d1a      	adds	r2, r3, #4
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c3e:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c40:	f7f9 ff5a 	bl	8001af8 <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d803      	bhi.n	8007c58 <HAL_SPI_TransmitReceive+0x1d0>
 8007c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c56:	d102      	bne.n	8007c5e <HAL_SPI_TransmitReceive+0x1d6>
 8007c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d114      	bne.n	8007c88 <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 fe96 	bl	8008990 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e116      	b.n	8007eb6 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007c88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d193      	bne.n	8007bb6 <HAL_SPI_TransmitReceive+0x12e>
 8007c8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d190      	bne.n	8007bb6 <HAL_SPI_TransmitReceive+0x12e>
 8007c94:	e0e8      	b.n	8007e68 <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	2b07      	cmp	r3, #7
 8007c9c:	f240 80de 	bls.w	8007e5c <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007ca0:	e066      	b.n	8007d70 <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	f003 0302 	and.w	r3, r3, #2
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d119      	bne.n	8007ce4 <HAL_SPI_TransmitReceive+0x25c>
 8007cb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d016      	beq.n	8007ce4 <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cba:	881a      	ldrh	r2, [r3, #0]
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cc4:	1c9a      	adds	r2, r3, #2
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007ce2:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	f003 0301 	and.w	r3, r3, #1
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d11a      	bne.n	8007d28 <HAL_SPI_TransmitReceive+0x2a0>
 8007cf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d017      	beq.n	8007d28 <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cfc:	69ba      	ldr	r2, [r7, #24]
 8007cfe:	8812      	ldrh	r2, [r2, #0]
 8007d00:	b292      	uxth	r2, r2
 8007d02:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d08:	1c9a      	adds	r2, r3, #2
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	3b01      	subs	r3, #1
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d26:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d28:	f7f9 fee6 	bl	8001af8 <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d803      	bhi.n	8007d40 <HAL_SPI_TransmitReceive+0x2b8>
 8007d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3e:	d102      	bne.n	8007d46 <HAL_SPI_TransmitReceive+0x2be>
 8007d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d114      	bne.n	8007d70 <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f000 fe22 	bl	8008990 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e0a2      	b.n	8007eb6 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007d70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d195      	bne.n	8007ca2 <HAL_SPI_TransmitReceive+0x21a>
 8007d76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d192      	bne.n	8007ca2 <HAL_SPI_TransmitReceive+0x21a>
 8007d7c:	e074      	b.n	8007e68 <HAL_SPI_TransmitReceive+0x3e0>
 8007d7e:	bf00      	nop
 8007d80:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	f003 0302 	and.w	r3, r3, #2
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d11b      	bne.n	8007dca <HAL_SPI_TransmitReceive+0x342>
 8007d92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d018      	beq.n	8007dca <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	3320      	adds	r3, #32
 8007da2:	7812      	ldrb	r2, [r2, #0]
 8007da4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007daa:	1c5a      	adds	r2, r3, #1
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	3b01      	subs	r3, #1
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007dc8:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	695b      	ldr	r3, [r3, #20]
 8007dd0:	f003 0301 	and.w	r3, r3, #1
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d11d      	bne.n	8007e14 <HAL_SPI_TransmitReceive+0x38c>
 8007dd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d01a      	beq.n	8007e14 <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dea:	7812      	ldrb	r2, [r2, #0]
 8007dec:	b2d2      	uxtb	r2, r2
 8007dee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007df4:	1c5a      	adds	r2, r3, #1
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	3b01      	subs	r3, #1
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007e12:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e14:	f7f9 fe70 	bl	8001af8 <HAL_GetTick>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d803      	bhi.n	8007e2c <HAL_SPI_TransmitReceive+0x3a4>
 8007e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2a:	d102      	bne.n	8007e32 <HAL_SPI_TransmitReceive+0x3aa>
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d114      	bne.n	8007e5c <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f000 fdac 	bl	8008990 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e02c      	b.n	8007eb6 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007e5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d190      	bne.n	8007d84 <HAL_SPI_TransmitReceive+0x2fc>
 8007e62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d18d      	bne.n	8007d84 <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	9300      	str	r3, [sp, #0]
 8007e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6e:	2200      	movs	r2, #0
 8007e70:	2108      	movs	r1, #8
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f000 fe2c 	bl	8008ad0 <SPI_WaitOnFlagUntilTimeout>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d007      	beq.n	8007e8e <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e84:	f043 0220 	orr.w	r2, r3, #32
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f000 fd7e 	bl	8008990 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e001      	b.n	8007eb6 <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 8007eb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3728      	adds	r7, #40	; 0x28
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop

08007ec0 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d101      	bne.n	8007ee0 <HAL_SPI_Transmit_DMA+0x20>
 8007edc:	2302      	movs	r3, #2
 8007ede:	e137      	b.n	8008150 <HAL_SPI_Transmit_DMA+0x290>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d007      	beq.n	8007f04 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8007ef4:	2302      	movs	r3, #2
 8007ef6:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007f00:	7dfb      	ldrb	r3, [r7, #23]
 8007f02:	e125      	b.n	8008150 <HAL_SPI_Transmit_DMA+0x290>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <HAL_SPI_Transmit_DMA+0x50>
 8007f0a:	88fb      	ldrh	r3, [r7, #6]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d107      	bne.n	8007f20 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007f1c:	7dfb      	ldrb	r3, [r7, #23]
 8007f1e:	e117      	b.n	8008150 <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2203      	movs	r2, #3
 8007f24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	88fa      	ldrh	r2, [r7, #6]
 8007f3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	88fa      	ldrh	r2, [r7, #6]
 8007f42:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007f70:	d108      	bne.n	8007f84 <HAL_SPI_Transmit_DMA+0xc4>
  {
    SPI_1LINE_TX(hspi);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	e009      	b.n	8007f98 <HAL_SPI_Transmit_DMA+0xd8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007f96:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	2b0f      	cmp	r3, #15
 8007f9e:	d905      	bls.n	8007fac <HAL_SPI_Transmit_DMA+0xec>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fa4:	699b      	ldr	r3, [r3, #24]
 8007fa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007faa:	d10f      	bne.n	8007fcc <HAL_SPI_Transmit_DMA+0x10c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007fb0:	2b07      	cmp	r3, #7
 8007fb2:	d913      	bls.n	8007fdc <HAL_SPI_Transmit_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fbe:	d00d      	beq.n	8007fdc <HAL_SPI_Transmit_DMA+0x11c>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fc4:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007fc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fca:	d007      	beq.n	8007fdc <HAL_SPI_Transmit_DMA+0x11c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007fd8:	7dfb      	ldrb	r3, [r7, #23]
 8007fda:	e0b9      	b.n	8008150 <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	2b07      	cmp	r3, #7
 8007fe2:	d820      	bhi.n	8008026 <HAL_SPI_Transmit_DMA+0x166>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fee:	d109      	bne.n	8008004 <HAL_SPI_Transmit_DMA+0x144>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	105b      	asrs	r3, r3, #1
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800800e:	d11e      	bne.n	800804e <HAL_SPI_Transmit_DMA+0x18e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008016:	b29b      	uxth	r3, r3
 8008018:	3303      	adds	r3, #3
 800801a:	109b      	asrs	r3, r3, #2
 800801c:	b29a      	uxth	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008024:	e013      	b.n	800804e <HAL_SPI_Transmit_DMA+0x18e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	2b0f      	cmp	r3, #15
 800802c:	d80f      	bhi.n	800804e <HAL_SPI_Transmit_DMA+0x18e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008038:	d109      	bne.n	800804e <HAL_SPI_Transmit_DMA+0x18e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008040:	b29b      	uxth	r3, r3
 8008042:	3301      	adds	r3, #1
 8008044:	105b      	asrs	r3, r3, #1
 8008046:	b29a      	uxth	r2, r3
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008052:	4a41      	ldr	r2, [pc, #260]	; (8008158 <HAL_SPI_Transmit_DMA+0x298>)
 8008054:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800805a:	4a40      	ldr	r2, [pc, #256]	; (800815c <HAL_SPI_Transmit_DMA+0x29c>)
 800805c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008062:	4a3f      	ldr	r2, [pc, #252]	; (8008160 <HAL_SPI_Transmit_DMA+0x2a0>)
 8008064:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800806a:	2200      	movs	r2, #0
 800806c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	689a      	ldr	r2, [r3, #8]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800807c:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008086:	4619      	mov	r1, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	3320      	adds	r3, #32
 800808e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008096:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008098:	f7fa f972 	bl	8002380 <HAL_DMA_Start_IT>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d013      	beq.n	80080ca <HAL_SPI_Transmit_DMA+0x20a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080a8:	f043 0210 	orr.w	r2, r3, #16
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 80080c6:	7dfb      	ldrb	r3, [r7, #23]
 80080c8:	e042      	b.n	8008150 <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080ce:	69db      	ldr	r3, [r3, #28]
 80080d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080d4:	d108      	bne.n	80080e8 <HAL_SPI_Transmit_DMA+0x228>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6859      	ldr	r1, [r3, #4]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	4b20      	ldr	r3, [pc, #128]	; (8008164 <HAL_SPI_Transmit_DMA+0x2a4>)
 80080e2:	400b      	ands	r3, r1
 80080e4:	6053      	str	r3, [r2, #4]
 80080e6:	e009      	b.n	80080fc <HAL_SPI_Transmit_DMA+0x23c>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	4b1d      	ldr	r3, [pc, #116]	; (8008164 <HAL_SPI_Transmit_DMA+0x2a4>)
 80080f0:	4013      	ands	r3, r2
 80080f2:	88f9      	ldrh	r1, [r7, #6]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	6812      	ldr	r2, [r2, #0]
 80080f8:	430b      	orrs	r3, r1
 80080fa:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	689a      	ldr	r2, [r3, #8]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800810a:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	691a      	ldr	r2, [r3, #16]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 800811a:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f042 0201 	orr.w	r2, r2, #1
 800812a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008134:	d107      	bne.n	8008146 <HAL_SPI_Transmit_DMA+0x286>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008144:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800814e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3718      	adds	r7, #24
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	080088dd 	.word	0x080088dd
 800815c:	08008851 	.word	0x08008851
 8008160:	08008915 	.word	0x08008915
 8008164:	ffff0000 	.word	0xffff0000

08008168 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	4613      	mov	r3, r2
 8008174:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008180:	2b01      	cmp	r3, #1
 8008182:	d101      	bne.n	8008188 <HAL_SPI_Receive_DMA+0x20>
 8008184:	2302      	movs	r3, #2
 8008186:	e134      	b.n	80083f2 <HAL_SPI_Receive_DMA+0x28a>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008196:	b2db      	uxtb	r3, r3
 8008198:	2b01      	cmp	r3, #1
 800819a:	d007      	beq.n	80081ac <HAL_SPI_Receive_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 800819c:	2302      	movs	r3, #2
 800819e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80081a8:	7dfb      	ldrb	r3, [r7, #23]
 80081aa:	e122      	b.n	80083f2 <HAL_SPI_Receive_DMA+0x28a>
  }

  if ((pData == NULL) || (Size == 0UL))
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d002      	beq.n	80081b8 <HAL_SPI_Receive_DMA+0x50>
 80081b2:	88fb      	ldrh	r3, [r7, #6]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d107      	bne.n	80081c8 <HAL_SPI_Receive_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80081c4:	7dfb      	ldrb	r3, [r7, #23]
 80081c6:	e114      	b.n	80083f2 <HAL_SPI_Receive_DMA+0x28a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2204      	movs	r2, #4
 80081cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	88fa      	ldrh	r2, [r7, #6]
 80081e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	88fa      	ldrh	r2, [r7, #6]
 80081ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008212:	d108      	bne.n	8008226 <HAL_SPI_Receive_DMA+0xbe>
  {
    SPI_1LINE_RX(hspi);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	e009      	b.n	800823a <HAL_SPI_Receive_DMA+0xd2>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008238:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	2b0f      	cmp	r3, #15
 8008240:	d905      	bls.n	800824e <HAL_SPI_Receive_DMA+0xe6>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800824c:	d10f      	bne.n	800826e <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008252:	2b07      	cmp	r3, #7
 8008254:	d913      	bls.n	800827e <HAL_SPI_Receive_DMA+0x116>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008260:	d00d      	beq.n	800827e <HAL_SPI_Receive_DMA+0x116>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008266:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800826c:	d007      	beq.n	800827e <HAL_SPI_Receive_DMA+0x116>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800827a:	7dfb      	ldrb	r3, [r7, #23]
 800827c:	e0b9      	b.n	80083f2 <HAL_SPI_Receive_DMA+0x28a>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	689a      	ldr	r2, [r3, #8]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800828c:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	2b07      	cmp	r3, #7
 8008294:	d820      	bhi.n	80082d8 <HAL_SPI_Receive_DMA+0x170>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082a0:	d109      	bne.n	80082b6 <HAL_SPI_Receive_DMA+0x14e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	3301      	adds	r3, #1
 80082ac:	105b      	asrs	r3, r3, #1
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082c0:	d11e      	bne.n	8008300 <HAL_SPI_Receive_DMA+0x198>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	3303      	adds	r3, #3
 80082cc:	109b      	asrs	r3, r3, #2
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80082d6:	e013      	b.n	8008300 <HAL_SPI_Receive_DMA+0x198>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	2b0f      	cmp	r3, #15
 80082de:	d80f      	bhi.n	8008300 <HAL_SPI_Receive_DMA+0x198>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082ea:	d109      	bne.n	8008300 <HAL_SPI_Receive_DMA+0x198>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	3301      	adds	r3, #1
 80082f6:	105b      	asrs	r3, r3, #1
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008304:	4a3d      	ldr	r2, [pc, #244]	; (80083fc <HAL_SPI_Receive_DMA+0x294>)
 8008306:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800830c:	4a3c      	ldr	r2, [pc, #240]	; (8008400 <HAL_SPI_Receive_DMA+0x298>)
 800830e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008314:	4a3b      	ldr	r2, [pc, #236]	; (8008404 <HAL_SPI_Receive_DMA+0x29c>)
 8008316:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800831c:	2200      	movs	r2, #0
 800831e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	3330      	adds	r3, #48	; 0x30
 800832a:	4619      	mov	r1, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008330:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008338:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800833a:	f7fa f821 	bl	8002380 <HAL_DMA_Start_IT>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d013      	beq.n	800836c <HAL_SPI_Receive_DMA+0x204>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800834a:	f043 0210 	orr.w	r2, r3, #16
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8008368:	7dfb      	ldrb	r3, [r7, #23]
 800836a:	e042      	b.n	80083f2 <HAL_SPI_Receive_DMA+0x28a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008370:	69db      	ldr	r3, [r3, #28]
 8008372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008376:	d108      	bne.n	800838a <HAL_SPI_Receive_DMA+0x222>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6859      	ldr	r1, [r3, #4]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	4b21      	ldr	r3, [pc, #132]	; (8008408 <HAL_SPI_Receive_DMA+0x2a0>)
 8008384:	400b      	ands	r3, r1
 8008386:	6053      	str	r3, [r2, #4]
 8008388:	e009      	b.n	800839e <HAL_SPI_Receive_DMA+0x236>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	685a      	ldr	r2, [r3, #4]
 8008390:	4b1d      	ldr	r3, [pc, #116]	; (8008408 <HAL_SPI_Receive_DMA+0x2a0>)
 8008392:	4013      	ands	r3, r2
 8008394:	88f9      	ldrh	r1, [r7, #6]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	6812      	ldr	r2, [r2, #0]
 800839a:	430b      	orrs	r3, r1
 800839c:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	689a      	ldr	r2, [r3, #8]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083ac:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	691a      	ldr	r2, [r3, #16]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 80083bc:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f042 0201 	orr.w	r2, r2, #1
 80083cc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083d6:	d107      	bne.n	80083e8 <HAL_SPI_Receive_DMA+0x280>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083e6:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80083f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3718      	adds	r7, #24
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	080088f9 	.word	0x080088f9
 8008400:	08008897 	.word	0x08008897
 8008404:	08008915 	.word	0x08008915
 8008408:	ffff0000 	.word	0xffff0000

0800840c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b08a      	sub	sp, #40	; 0x28
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008424:	6a3a      	ldr	r2, [r7, #32]
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	4013      	ands	r3, r2
 800842a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008434:	2300      	movs	r3, #0
 8008436:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800843e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	3330      	adds	r3, #48	; 0x30
 8008446:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800844e:	2b00      	cmp	r3, #0
 8008450:	d010      	beq.n	8008474 <HAL_SPI_IRQHandler+0x68>
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	f003 0308 	and.w	r3, r3, #8
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00b      	beq.n	8008474 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	699a      	ldr	r2, [r3, #24]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800846a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f9d7 	bl	8008820 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8008472:	e192      	b.n	800879a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847a:	2b00      	cmp	r3, #0
 800847c:	d113      	bne.n	80084a6 <HAL_SPI_IRQHandler+0x9a>
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	f003 0320 	and.w	r3, r3, #32
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10e      	bne.n	80084a6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800848e:	2b00      	cmp	r3, #0
 8008490:	d009      	beq.n	80084a6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	4798      	blx	r3
    hspi->RxISR(hspi);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	4798      	blx	r3
    handled = 1UL;
 80084a2:	2301      	movs	r3, #1
 80084a4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10f      	bne.n	80084d0 <HAL_SPI_IRQHandler+0xc4>
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00a      	beq.n	80084d0 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d105      	bne.n	80084d0 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	4798      	blx	r3
    handled = 1UL;
 80084cc:	2301      	movs	r3, #1
 80084ce:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	f003 0320 	and.w	r3, r3, #32
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10f      	bne.n	80084fa <HAL_SPI_IRQHandler+0xee>
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	f003 0302 	and.w	r3, r3, #2
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00a      	beq.n	80084fa <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d105      	bne.n	80084fa <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	4798      	blx	r3
    handled = 1UL;
 80084f6:	2301      	movs	r3, #1
 80084f8:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f040 8147 	bne.w	8008790 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	f003 0308 	and.w	r3, r3, #8
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 808b 	beq.w	8008624 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	699a      	ldr	r2, [r3, #24]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f042 0208 	orr.w	r2, r2, #8
 800851c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	699a      	ldr	r2, [r3, #24]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f042 0210 	orr.w	r2, r2, #16
 800852c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	699a      	ldr	r2, [r3, #24]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800853c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	691a      	ldr	r2, [r3, #16]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f022 0208 	bic.w	r2, r2, #8
 800854c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008558:	2b00      	cmp	r3, #0
 800855a:	d13d      	bne.n	80085d8 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800855c:	e036      	b.n	80085cc <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	2b0f      	cmp	r3, #15
 8008564:	d90b      	bls.n	800857e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800856e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008570:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008576:	1d1a      	adds	r2, r3, #4
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	665a      	str	r2, [r3, #100]	; 0x64
 800857c:	e01d      	b.n	80085ba <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	2b07      	cmp	r3, #7
 8008584:	d90b      	bls.n	800859e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	8812      	ldrh	r2, [r2, #0]
 800858e:	b292      	uxth	r2, r2
 8008590:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008596:	1c9a      	adds	r2, r3, #2
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	665a      	str	r2, [r3, #100]	; 0x64
 800859c:	e00d      	b.n	80085ba <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085aa:	7812      	ldrb	r2, [r2, #0]
 80085ac:	b2d2      	uxtb	r2, r2
 80085ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085b4:	1c5a      	adds	r2, r3, #1
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	3b01      	subs	r3, #1
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1c2      	bne.n	800855e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f9d9 	bl	8008990 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d003      	beq.n	80085f8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f90b 	bl	800880c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80085f6:	e0d0      	b.n	800879a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80085f8:	7cfb      	ldrb	r3, [r7, #19]
 80085fa:	2b05      	cmp	r3, #5
 80085fc:	d103      	bne.n	8008606 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f8e6 	bl	80087d0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008604:	e0c6      	b.n	8008794 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008606:	7cfb      	ldrb	r3, [r7, #19]
 8008608:	2b04      	cmp	r3, #4
 800860a:	d103      	bne.n	8008614 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f8d5 	bl	80087bc <HAL_SPI_RxCpltCallback>
    return;
 8008612:	e0bf      	b.n	8008794 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008614:	7cfb      	ldrb	r3, [r7, #19]
 8008616:	2b03      	cmp	r3, #3
 8008618:	f040 80bc 	bne.w	8008794 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f8c3 	bl	80087a8 <HAL_SPI_TxCpltCallback>
    return;
 8008622:	e0b7      	b.n	8008794 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 80b5 	beq.w	800879a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00f      	beq.n	800865a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008640:	f043 0204 	orr.w	r2, r3, #4
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	699a      	ldr	r2, [r3, #24]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008658:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00f      	beq.n	8008684 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800866a:	f043 0201 	orr.w	r2, r3, #1
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	699a      	ldr	r2, [r3, #24]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008682:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00f      	beq.n	80086ae <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008694:	f043 0208 	orr.w	r2, r3, #8
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	699a      	ldr	r2, [r3, #24]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086ac:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	f003 0320 	and.w	r3, r3, #32
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00f      	beq.n	80086d8 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086be:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	699a      	ldr	r2, [r3, #24]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f042 0220 	orr.w	r2, r2, #32
 80086d6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d05a      	beq.n	8008798 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f022 0201 	bic.w	r2, r2, #1
 80086f0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6919      	ldr	r1, [r3, #16]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	4b28      	ldr	r3, [pc, #160]	; (80087a0 <HAL_SPI_IRQHandler+0x394>)
 80086fe:	400b      	ands	r3, r1
 8008700:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008708:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800870c:	d138      	bne.n	8008780 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	689a      	ldr	r2, [r3, #8]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800871c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008722:	2b00      	cmp	r3, #0
 8008724:	d013      	beq.n	800874e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800872a:	4a1e      	ldr	r2, [pc, #120]	; (80087a4 <HAL_SPI_IRQHandler+0x398>)
 800872c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008732:	4618      	mov	r0, r3
 8008734:	f7fa fbac 	bl	8002e90 <HAL_DMA_Abort_IT>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d007      	beq.n	800874e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008744:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008752:	2b00      	cmp	r3, #0
 8008754:	d020      	beq.n	8008798 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800875a:	4a12      	ldr	r2, [pc, #72]	; (80087a4 <HAL_SPI_IRQHandler+0x398>)
 800875c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008762:	4618      	mov	r0, r3
 8008764:	f7fa fb94 	bl	8002e90 <HAL_DMA_Abort_IT>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d014      	beq.n	8008798 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008774:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800877e:	e00b      	b.n	8008798 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f83f 	bl	800880c <HAL_SPI_ErrorCallback>
    return;
 800878e:	e003      	b.n	8008798 <HAL_SPI_IRQHandler+0x38c>
    return;
 8008790:	bf00      	nop
 8008792:	e002      	b.n	800879a <HAL_SPI_IRQHandler+0x38e>
    return;
 8008794:	bf00      	nop
 8008796:	e000      	b.n	800879a <HAL_SPI_IRQHandler+0x38e>
    return;
 8008798:	bf00      	nop
  }
}
 800879a:	3728      	adds	r7, #40	; 0x28
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	fffffc94 	.word	0xfffffc94
 80087a4:	0800895b 	.word	0x0800895b

080087a8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80087ec:	bf00      	nop
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008842:	b2db      	uxtb	r3, r3
}
 8008844:	4618      	mov	r0, r3
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b07      	cmp	r3, #7
 8008868:	d011      	beq.n	800888e <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800886e:	69db      	ldr	r3, [r3, #28]
 8008870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008874:	d103      	bne.n	800887e <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f7ff ff96 	bl	80087a8 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800887c:	e007      	b.n	800888e <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	691a      	ldr	r2, [r3, #16]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f042 0208 	orr.w	r2, r2, #8
 800888c:	611a      	str	r2, [r3, #16]
}
 800888e:	bf00      	nop
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b084      	sub	sp, #16
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a2:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	2b07      	cmp	r3, #7
 80088ae:	d011      	beq.n	80088d4 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088b4:	69db      	ldr	r3, [r3, #28]
 80088b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ba:	d103      	bne.n	80088c4 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f7ff ff7d 	bl	80087bc <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80088c2:	e007      	b.n	80088d4 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	691a      	ldr	r2, [r3, #16]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f042 0208 	orr.w	r2, r2, #8
 80088d2:	611a      	str	r2, [r3, #16]
}
 80088d4:	bf00      	nop
 80088d6:	3710      	adds	r7, #16
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f7ff ff7a 	bl	80087e4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80088f0:	bf00      	nop
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008904:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f7ff ff76 	bl	80087f8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800890c:	bf00      	nop
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008920:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7fb fc32 	bl	800418c <HAL_DMA_GetError>
 8008928:	4603      	mov	r3, r0
 800892a:	2b02      	cmp	r3, #2
 800892c:	d011      	beq.n	8008952 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	f000 f82e 	bl	8008990 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800893a:	f043 0210 	orr.w	r2, r3, #16
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f7ff ff5d 	bl	800880c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008952:	bf00      	nop
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b084      	sub	sp, #16
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008966:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2200      	movs	r2, #0
 8008974:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f7ff ff43 	bl	800880c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008986:	bf00      	nop
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
	...

08008990 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	695b      	ldr	r3, [r3, #20]
 800899e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	699a      	ldr	r2, [r3, #24]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f042 0208 	orr.w	r2, r2, #8
 80089ae:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	699a      	ldr	r2, [r3, #24]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f042 0210 	orr.w	r2, r2, #16
 80089be:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f022 0201 	bic.w	r2, r2, #1
 80089ce:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6919      	ldr	r1, [r3, #16]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	4b3c      	ldr	r3, [pc, #240]	; (8008acc <SPI_CloseTransfer+0x13c>)
 80089dc:	400b      	ands	r3, r1
 80089de:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	689a      	ldr	r2, [r3, #8]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80089ee:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b04      	cmp	r3, #4
 80089fa:	d014      	beq.n	8008a26 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f003 0320 	and.w	r3, r3, #32
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00f      	beq.n	8008a26 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	699a      	ldr	r2, [r3, #24]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f042 0220 	orr.w	r2, r2, #32
 8008a24:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b03      	cmp	r3, #3
 8008a30:	d014      	beq.n	8008a5c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00f      	beq.n	8008a5c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a42:	f043 0204 	orr.w	r2, r3, #4
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	699a      	ldr	r2, [r3, #24]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a5a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00f      	beq.n	8008a86 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a6c:	f043 0201 	orr.w	r2, r3, #1
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	699a      	ldr	r2, [r3, #24]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a84:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00f      	beq.n	8008ab0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a96:	f043 0208 	orr.w	r2, r3, #8
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	699a      	ldr	r2, [r3, #24]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008aae:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008ac0:	bf00      	nop
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	fffffc90 	.word	0xfffffc90

08008ad0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	603b      	str	r3, [r7, #0]
 8008adc:	4613      	mov	r3, r2
 8008ade:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008ae0:	e010      	b.n	8008b04 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ae2:	f7f9 f809 	bl	8001af8 <HAL_GetTick>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	683a      	ldr	r2, [r7, #0]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d803      	bhi.n	8008afa <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af8:	d102      	bne.n	8008b00 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d101      	bne.n	8008b04 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e00f      	b.n	8008b24 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	695a      	ldr	r2, [r3, #20]
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	bf0c      	ite	eq
 8008b14:	2301      	moveq	r3, #1
 8008b16:	2300      	movne	r3, #0
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	79fb      	ldrb	r3, [r7, #7]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d0df      	beq.n	8008ae2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b38:	095b      	lsrs	r3, r3, #5
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	3301      	adds	r3, #1
 8008b44:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	3307      	adds	r3, #7
 8008b4a:	08db      	lsrs	r3, r3, #3
 8008b4c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	fb02 f303 	mul.w	r3, r2, r3
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b082      	sub	sp, #8
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e049      	b.n	8008c08 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d106      	bne.n	8008b8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f841 	bl	8008c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2202      	movs	r2, #2
 8008b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	3304      	adds	r3, #4
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	4610      	mov	r0, r2
 8008ba2:	f000 fa0d 	bl	8008fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2201      	movs	r2, #1
 8008bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d001      	beq.n	8008c3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e05e      	b.n	8008cfa <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68da      	ldr	r2, [r3, #12]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f042 0201 	orr.w	r2, r2, #1
 8008c52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a2b      	ldr	r2, [pc, #172]	; (8008d08 <HAL_TIM_Base_Start_IT+0xe4>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d02c      	beq.n	8008cb8 <HAL_TIM_Base_Start_IT+0x94>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c66:	d027      	beq.n	8008cb8 <HAL_TIM_Base_Start_IT+0x94>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a27      	ldr	r2, [pc, #156]	; (8008d0c <HAL_TIM_Base_Start_IT+0xe8>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d022      	beq.n	8008cb8 <HAL_TIM_Base_Start_IT+0x94>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a26      	ldr	r2, [pc, #152]	; (8008d10 <HAL_TIM_Base_Start_IT+0xec>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d01d      	beq.n	8008cb8 <HAL_TIM_Base_Start_IT+0x94>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a24      	ldr	r2, [pc, #144]	; (8008d14 <HAL_TIM_Base_Start_IT+0xf0>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d018      	beq.n	8008cb8 <HAL_TIM_Base_Start_IT+0x94>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a23      	ldr	r2, [pc, #140]	; (8008d18 <HAL_TIM_Base_Start_IT+0xf4>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d013      	beq.n	8008cb8 <HAL_TIM_Base_Start_IT+0x94>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a21      	ldr	r2, [pc, #132]	; (8008d1c <HAL_TIM_Base_Start_IT+0xf8>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d00e      	beq.n	8008cb8 <HAL_TIM_Base_Start_IT+0x94>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a20      	ldr	r2, [pc, #128]	; (8008d20 <HAL_TIM_Base_Start_IT+0xfc>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d009      	beq.n	8008cb8 <HAL_TIM_Base_Start_IT+0x94>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a1e      	ldr	r2, [pc, #120]	; (8008d24 <HAL_TIM_Base_Start_IT+0x100>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d004      	beq.n	8008cb8 <HAL_TIM_Base_Start_IT+0x94>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a1d      	ldr	r2, [pc, #116]	; (8008d28 <HAL_TIM_Base_Start_IT+0x104>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d115      	bne.n	8008ce4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	689a      	ldr	r2, [r3, #8]
 8008cbe:	4b1b      	ldr	r3, [pc, #108]	; (8008d2c <HAL_TIM_Base_Start_IT+0x108>)
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2b06      	cmp	r3, #6
 8008cc8:	d015      	beq.n	8008cf6 <HAL_TIM_Base_Start_IT+0xd2>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cd0:	d011      	beq.n	8008cf6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f042 0201 	orr.w	r2, r2, #1
 8008ce0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ce2:	e008      	b.n	8008cf6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f042 0201 	orr.w	r2, r2, #1
 8008cf2:	601a      	str	r2, [r3, #0]
 8008cf4:	e000      	b.n	8008cf8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	40010000 	.word	0x40010000
 8008d0c:	40000400 	.word	0x40000400
 8008d10:	40000800 	.word	0x40000800
 8008d14:	40000c00 	.word	0x40000c00
 8008d18:	40010400 	.word	0x40010400
 8008d1c:	40001800 	.word	0x40001800
 8008d20:	40014000 	.word	0x40014000
 8008d24:	4000e000 	.word	0x4000e000
 8008d28:	4000e400 	.word	0x4000e400
 8008d2c:	00010007 	.word	0x00010007

08008d30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	f003 0302 	and.w	r3, r3, #2
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d122      	bne.n	8008d8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	f003 0302 	and.w	r3, r3, #2
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d11b      	bne.n	8008d8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f06f 0202 	mvn.w	r2, #2
 8008d5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2201      	movs	r2, #1
 8008d62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	f003 0303 	and.w	r3, r3, #3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d003      	beq.n	8008d7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f905 	bl	8008f82 <HAL_TIM_IC_CaptureCallback>
 8008d78:	e005      	b.n	8008d86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f8f7 	bl	8008f6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f908 	bl	8008f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	f003 0304 	and.w	r3, r3, #4
 8008d96:	2b04      	cmp	r3, #4
 8008d98:	d122      	bne.n	8008de0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	f003 0304 	and.w	r3, r3, #4
 8008da4:	2b04      	cmp	r3, #4
 8008da6:	d11b      	bne.n	8008de0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f06f 0204 	mvn.w	r2, #4
 8008db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2202      	movs	r2, #2
 8008db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f8db 	bl	8008f82 <HAL_TIM_IC_CaptureCallback>
 8008dcc:	e005      	b.n	8008dda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f8cd 	bl	8008f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f8de 	bl	8008f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	f003 0308 	and.w	r3, r3, #8
 8008dea:	2b08      	cmp	r3, #8
 8008dec:	d122      	bne.n	8008e34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	f003 0308 	and.w	r3, r3, #8
 8008df8:	2b08      	cmp	r3, #8
 8008dfa:	d11b      	bne.n	8008e34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f06f 0208 	mvn.w	r2, #8
 8008e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2204      	movs	r2, #4
 8008e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	69db      	ldr	r3, [r3, #28]
 8008e12:	f003 0303 	and.w	r3, r3, #3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d003      	beq.n	8008e22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f8b1 	bl	8008f82 <HAL_TIM_IC_CaptureCallback>
 8008e20:	e005      	b.n	8008e2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f8a3 	bl	8008f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 f8b4 	bl	8008f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	f003 0310 	and.w	r3, r3, #16
 8008e3e:	2b10      	cmp	r3, #16
 8008e40:	d122      	bne.n	8008e88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	f003 0310 	and.w	r3, r3, #16
 8008e4c:	2b10      	cmp	r3, #16
 8008e4e:	d11b      	bne.n	8008e88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f06f 0210 	mvn.w	r2, #16
 8008e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2208      	movs	r2, #8
 8008e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	69db      	ldr	r3, [r3, #28]
 8008e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f887 	bl	8008f82 <HAL_TIM_IC_CaptureCallback>
 8008e74:	e005      	b.n	8008e82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f879 	bl	8008f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f88a 	bl	8008f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	f003 0301 	and.w	r3, r3, #1
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d10e      	bne.n	8008eb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	f003 0301 	and.w	r3, r3, #1
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d107      	bne.n	8008eb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f06f 0201 	mvn.w	r2, #1
 8008eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7f8 f9e0 	bl	8001274 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	691b      	ldr	r3, [r3, #16]
 8008eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ebe:	2b80      	cmp	r3, #128	; 0x80
 8008ec0:	d10e      	bne.n	8008ee0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ecc:	2b80      	cmp	r3, #128	; 0x80
 8008ece:	d107      	bne.n	8008ee0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f920 	bl	8009120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eee:	d10e      	bne.n	8008f0e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008efa:	2b80      	cmp	r3, #128	; 0x80
 8008efc:	d107      	bne.n	8008f0e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 f913 	bl	8009134 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f18:	2b40      	cmp	r3, #64	; 0x40
 8008f1a:	d10e      	bne.n	8008f3a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f26:	2b40      	cmp	r3, #64	; 0x40
 8008f28:	d107      	bne.n	8008f3a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 f838 	bl	8008faa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	f003 0320 	and.w	r3, r3, #32
 8008f44:	2b20      	cmp	r3, #32
 8008f46:	d10e      	bne.n	8008f66 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	f003 0320 	and.w	r3, r3, #32
 8008f52:	2b20      	cmp	r3, #32
 8008f54:	d107      	bne.n	8008f66 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f06f 0220 	mvn.w	r2, #32
 8008f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 f8d3 	bl	800910c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f66:	bf00      	nop
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b083      	sub	sp, #12
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f76:	bf00      	nop
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f82:	b480      	push	{r7}
 8008f84:	b083      	sub	sp, #12
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f8a:	bf00      	nop
 8008f8c:	370c      	adds	r7, #12
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr

08008f96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f96:	b480      	push	{r7}
 8008f98:	b083      	sub	sp, #12
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f9e:	bf00      	nop
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr

08008faa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008faa:	b480      	push	{r7}
 8008fac:	b083      	sub	sp, #12
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008fb2:	bf00      	nop
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
	...

08008fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a44      	ldr	r2, [pc, #272]	; (80090e4 <TIM_Base_SetConfig+0x124>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d013      	beq.n	8009000 <TIM_Base_SetConfig+0x40>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fde:	d00f      	beq.n	8009000 <TIM_Base_SetConfig+0x40>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a41      	ldr	r2, [pc, #260]	; (80090e8 <TIM_Base_SetConfig+0x128>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d00b      	beq.n	8009000 <TIM_Base_SetConfig+0x40>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a40      	ldr	r2, [pc, #256]	; (80090ec <TIM_Base_SetConfig+0x12c>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d007      	beq.n	8009000 <TIM_Base_SetConfig+0x40>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a3f      	ldr	r2, [pc, #252]	; (80090f0 <TIM_Base_SetConfig+0x130>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d003      	beq.n	8009000 <TIM_Base_SetConfig+0x40>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a3e      	ldr	r2, [pc, #248]	; (80090f4 <TIM_Base_SetConfig+0x134>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d108      	bne.n	8009012 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	4313      	orrs	r3, r2
 8009010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a33      	ldr	r2, [pc, #204]	; (80090e4 <TIM_Base_SetConfig+0x124>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d027      	beq.n	800906a <TIM_Base_SetConfig+0xaa>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009020:	d023      	beq.n	800906a <TIM_Base_SetConfig+0xaa>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a30      	ldr	r2, [pc, #192]	; (80090e8 <TIM_Base_SetConfig+0x128>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d01f      	beq.n	800906a <TIM_Base_SetConfig+0xaa>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a2f      	ldr	r2, [pc, #188]	; (80090ec <TIM_Base_SetConfig+0x12c>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d01b      	beq.n	800906a <TIM_Base_SetConfig+0xaa>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a2e      	ldr	r2, [pc, #184]	; (80090f0 <TIM_Base_SetConfig+0x130>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d017      	beq.n	800906a <TIM_Base_SetConfig+0xaa>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a2d      	ldr	r2, [pc, #180]	; (80090f4 <TIM_Base_SetConfig+0x134>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d013      	beq.n	800906a <TIM_Base_SetConfig+0xaa>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a2c      	ldr	r2, [pc, #176]	; (80090f8 <TIM_Base_SetConfig+0x138>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d00f      	beq.n	800906a <TIM_Base_SetConfig+0xaa>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a2b      	ldr	r2, [pc, #172]	; (80090fc <TIM_Base_SetConfig+0x13c>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d00b      	beq.n	800906a <TIM_Base_SetConfig+0xaa>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a2a      	ldr	r2, [pc, #168]	; (8009100 <TIM_Base_SetConfig+0x140>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d007      	beq.n	800906a <TIM_Base_SetConfig+0xaa>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a29      	ldr	r2, [pc, #164]	; (8009104 <TIM_Base_SetConfig+0x144>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d003      	beq.n	800906a <TIM_Base_SetConfig+0xaa>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a28      	ldr	r2, [pc, #160]	; (8009108 <TIM_Base_SetConfig+0x148>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d108      	bne.n	800907c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	4313      	orrs	r3, r2
 800907a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	695b      	ldr	r3, [r3, #20]
 8009086:	4313      	orrs	r3, r2
 8009088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	689a      	ldr	r2, [r3, #8]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a10      	ldr	r2, [pc, #64]	; (80090e4 <TIM_Base_SetConfig+0x124>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d00f      	beq.n	80090c8 <TIM_Base_SetConfig+0x108>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a12      	ldr	r2, [pc, #72]	; (80090f4 <TIM_Base_SetConfig+0x134>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d00b      	beq.n	80090c8 <TIM_Base_SetConfig+0x108>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a11      	ldr	r2, [pc, #68]	; (80090f8 <TIM_Base_SetConfig+0x138>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d007      	beq.n	80090c8 <TIM_Base_SetConfig+0x108>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a10      	ldr	r2, [pc, #64]	; (80090fc <TIM_Base_SetConfig+0x13c>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d003      	beq.n	80090c8 <TIM_Base_SetConfig+0x108>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a0f      	ldr	r2, [pc, #60]	; (8009100 <TIM_Base_SetConfig+0x140>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d103      	bne.n	80090d0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	691a      	ldr	r2, [r3, #16]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	615a      	str	r2, [r3, #20]
}
 80090d6:	bf00      	nop
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	40010000 	.word	0x40010000
 80090e8:	40000400 	.word	0x40000400
 80090ec:	40000800 	.word	0x40000800
 80090f0:	40000c00 	.word	0x40000c00
 80090f4:	40010400 	.word	0x40010400
 80090f8:	40014000 	.word	0x40014000
 80090fc:	40014400 	.word	0x40014400
 8009100:	40014800 	.word	0x40014800
 8009104:	4000e000 	.word	0x4000e000
 8009108:	4000e400 	.word	0x4000e400

0800910c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d101      	bne.n	800915a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e042      	b.n	80091e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009160:	2b00      	cmp	r3, #0
 8009162:	d106      	bne.n	8009172 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7f8 f9c3 	bl	80014f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2224      	movs	r2, #36	; 0x24
 8009176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f022 0201 	bic.w	r2, r2, #1
 8009188:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fcea 	bl	8009b64 <UART_SetConfig>
 8009190:	4603      	mov	r3, r0
 8009192:	2b01      	cmp	r3, #1
 8009194:	d101      	bne.n	800919a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e022      	b.n	80091e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d002      	beq.n	80091a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f001 fb4a 	bl	800a83c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	689a      	ldr	r2, [r3, #8]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f042 0201 	orr.w	r2, r2, #1
 80091d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f001 fbd1 	bl	800a980 <UART_CheckIdleState>
 80091de:	4603      	mov	r3, r0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3708      	adds	r7, #8
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b08a      	sub	sp, #40	; 0x28
 80091ec:	af02      	add	r7, sp, #8
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	603b      	str	r3, [r7, #0]
 80091f4:	4613      	mov	r3, r2
 80091f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091fe:	2b20      	cmp	r3, #32
 8009200:	d17b      	bne.n	80092fa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <HAL_UART_Transmit+0x26>
 8009208:	88fb      	ldrh	r3, [r7, #6]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d101      	bne.n	8009212 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e074      	b.n	80092fc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2221      	movs	r2, #33	; 0x21
 800921e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009222:	f7f8 fc69 	bl	8001af8 <HAL_GetTick>
 8009226:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	88fa      	ldrh	r2, [r7, #6]
 800922c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	88fa      	ldrh	r2, [r7, #6]
 8009234:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009240:	d108      	bne.n	8009254 <HAL_UART_Transmit+0x6c>
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d104      	bne.n	8009254 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800924a:	2300      	movs	r3, #0
 800924c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	61bb      	str	r3, [r7, #24]
 8009252:	e003      	b.n	800925c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009258:	2300      	movs	r3, #0
 800925a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800925c:	e030      	b.n	80092c0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	2200      	movs	r2, #0
 8009266:	2180      	movs	r1, #128	; 0x80
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f001 fc33 	bl	800aad4 <UART_WaitOnFlagUntilTimeout>
 800926e:	4603      	mov	r3, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d005      	beq.n	8009280 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2220      	movs	r2, #32
 8009278:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	e03d      	b.n	80092fc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d10b      	bne.n	800929e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	881b      	ldrh	r3, [r3, #0]
 800928a:	461a      	mov	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009294:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	3302      	adds	r3, #2
 800929a:	61bb      	str	r3, [r7, #24]
 800929c:	e007      	b.n	80092ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	781a      	ldrb	r2, [r3, #0]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	3301      	adds	r3, #1
 80092ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	3b01      	subs	r3, #1
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1c8      	bne.n	800925e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	2200      	movs	r2, #0
 80092d4:	2140      	movs	r1, #64	; 0x40
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f001 fbfc 	bl	800aad4 <UART_WaitOnFlagUntilTimeout>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d005      	beq.n	80092ee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2220      	movs	r2, #32
 80092e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80092ea:	2303      	movs	r3, #3
 80092ec:	e006      	b.n	80092fc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2220      	movs	r2, #32
 80092f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	e000      	b.n	80092fc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80092fa:	2302      	movs	r3, #2
  }
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3720      	adds	r7, #32
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b08a      	sub	sp, #40	; 0x28
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	4613      	mov	r3, r2
 8009310:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009318:	2b20      	cmp	r3, #32
 800931a:	d137      	bne.n	800938c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d002      	beq.n	8009328 <HAL_UART_Receive_IT+0x24>
 8009322:	88fb      	ldrh	r3, [r7, #6]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d101      	bne.n	800932c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	e030      	b.n	800938e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a18      	ldr	r2, [pc, #96]	; (8009398 <HAL_UART_Receive_IT+0x94>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d01f      	beq.n	800937c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009346:	2b00      	cmp	r3, #0
 8009348:	d018      	beq.n	800937c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	e853 3f00 	ldrex	r3, [r3]
 8009356:	613b      	str	r3, [r7, #16]
   return(result);
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800935e:	627b      	str	r3, [r7, #36]	; 0x24
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	461a      	mov	r2, r3
 8009366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009368:	623b      	str	r3, [r7, #32]
 800936a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936c:	69f9      	ldr	r1, [r7, #28]
 800936e:	6a3a      	ldr	r2, [r7, #32]
 8009370:	e841 2300 	strex	r3, r2, [r1]
 8009374:	61bb      	str	r3, [r7, #24]
   return(result);
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1e6      	bne.n	800934a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800937c:	88fb      	ldrh	r3, [r7, #6]
 800937e:	461a      	mov	r2, r3
 8009380:	68b9      	ldr	r1, [r7, #8]
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f001 fc0e 	bl	800aba4 <UART_Start_Receive_IT>
 8009388:	4603      	mov	r3, r0
 800938a:	e000      	b.n	800938e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800938c:	2302      	movs	r3, #2
  }
}
 800938e:	4618      	mov	r0, r3
 8009390:	3728      	adds	r7, #40	; 0x28
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	58000c00 	.word	0x58000c00

0800939c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b0ba      	sub	sp, #232	; 0xe8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	69db      	ldr	r3, [r3, #28]
 80093aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80093c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80093c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80093ca:	4013      	ands	r3, r2
 80093cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80093d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d11b      	bne.n	8009410 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80093d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093dc:	f003 0320 	and.w	r3, r3, #32
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d015      	beq.n	8009410 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80093e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093e8:	f003 0320 	and.w	r3, r3, #32
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d105      	bne.n	80093fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80093f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d009      	beq.n	8009410 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009400:	2b00      	cmp	r3, #0
 8009402:	f000 8377 	beq.w	8009af4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	4798      	blx	r3
      }
      return;
 800940e:	e371      	b.n	8009af4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009410:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 8123 	beq.w	8009660 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800941a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800941e:	4b8d      	ldr	r3, [pc, #564]	; (8009654 <HAL_UART_IRQHandler+0x2b8>)
 8009420:	4013      	ands	r3, r2
 8009422:	2b00      	cmp	r3, #0
 8009424:	d106      	bne.n	8009434 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009426:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800942a:	4b8b      	ldr	r3, [pc, #556]	; (8009658 <HAL_UART_IRQHandler+0x2bc>)
 800942c:	4013      	ands	r3, r2
 800942e:	2b00      	cmp	r3, #0
 8009430:	f000 8116 	beq.w	8009660 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009438:	f003 0301 	and.w	r3, r3, #1
 800943c:	2b00      	cmp	r3, #0
 800943e:	d011      	beq.n	8009464 <HAL_UART_IRQHandler+0xc8>
 8009440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00b      	beq.n	8009464 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2201      	movs	r2, #1
 8009452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800945a:	f043 0201 	orr.w	r2, r3, #1
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009468:	f003 0302 	and.w	r3, r3, #2
 800946c:	2b00      	cmp	r3, #0
 800946e:	d011      	beq.n	8009494 <HAL_UART_IRQHandler+0xf8>
 8009470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009474:	f003 0301 	and.w	r3, r3, #1
 8009478:	2b00      	cmp	r3, #0
 800947a:	d00b      	beq.n	8009494 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2202      	movs	r2, #2
 8009482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800948a:	f043 0204 	orr.w	r2, r3, #4
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009498:	f003 0304 	and.w	r3, r3, #4
 800949c:	2b00      	cmp	r3, #0
 800949e:	d011      	beq.n	80094c4 <HAL_UART_IRQHandler+0x128>
 80094a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094a4:	f003 0301 	and.w	r3, r3, #1
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00b      	beq.n	80094c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2204      	movs	r2, #4
 80094b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094ba:	f043 0202 	orr.w	r2, r3, #2
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80094c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094c8:	f003 0308 	and.w	r3, r3, #8
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d017      	beq.n	8009500 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80094d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094d4:	f003 0320 	and.w	r3, r3, #32
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d105      	bne.n	80094e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80094dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80094e0:	4b5c      	ldr	r3, [pc, #368]	; (8009654 <HAL_UART_IRQHandler+0x2b8>)
 80094e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00b      	beq.n	8009500 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2208      	movs	r2, #8
 80094ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094f6:	f043 0208 	orr.w	r2, r3, #8
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009508:	2b00      	cmp	r3, #0
 800950a:	d012      	beq.n	8009532 <HAL_UART_IRQHandler+0x196>
 800950c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009510:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00c      	beq.n	8009532 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009520:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009528:	f043 0220 	orr.w	r2, r3, #32
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009538:	2b00      	cmp	r3, #0
 800953a:	f000 82dd 	beq.w	8009af8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800953e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009542:	f003 0320 	and.w	r3, r3, #32
 8009546:	2b00      	cmp	r3, #0
 8009548:	d013      	beq.n	8009572 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800954a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800954e:	f003 0320 	and.w	r3, r3, #32
 8009552:	2b00      	cmp	r3, #0
 8009554:	d105      	bne.n	8009562 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800955a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d007      	beq.n	8009572 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009566:	2b00      	cmp	r3, #0
 8009568:	d003      	beq.n	8009572 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009578:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009586:	2b40      	cmp	r3, #64	; 0x40
 8009588:	d005      	beq.n	8009596 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800958a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800958e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009592:	2b00      	cmp	r3, #0
 8009594:	d054      	beq.n	8009640 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f001 fc26 	bl	800ade8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095a6:	2b40      	cmp	r3, #64	; 0x40
 80095a8:	d146      	bne.n	8009638 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	3308      	adds	r3, #8
 80095b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80095b8:	e853 3f00 	ldrex	r3, [r3]
 80095bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80095c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80095c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3308      	adds	r3, #8
 80095d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80095d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80095da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80095e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80095e6:	e841 2300 	strex	r3, r2, [r1]
 80095ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80095ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d1d9      	bne.n	80095aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d017      	beq.n	8009630 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009606:	4a15      	ldr	r2, [pc, #84]	; (800965c <HAL_UART_IRQHandler+0x2c0>)
 8009608:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009610:	4618      	mov	r0, r3
 8009612:	f7f9 fc3d 	bl	8002e90 <HAL_DMA_Abort_IT>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d019      	beq.n	8009650 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800962a:	4610      	mov	r0, r2
 800962c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800962e:	e00f      	b.n	8009650 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 fa81 	bl	8009b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009636:	e00b      	b.n	8009650 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 fa7d 	bl	8009b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800963e:	e007      	b.n	8009650 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fa79 	bl	8009b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800964e:	e253      	b.n	8009af8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009650:	bf00      	nop
    return;
 8009652:	e251      	b.n	8009af8 <HAL_UART_IRQHandler+0x75c>
 8009654:	10000001 	.word	0x10000001
 8009658:	04000120 	.word	0x04000120
 800965c:	0800aeb5 	.word	0x0800aeb5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009664:	2b01      	cmp	r3, #1
 8009666:	f040 81e7 	bne.w	8009a38 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800966a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800966e:	f003 0310 	and.w	r3, r3, #16
 8009672:	2b00      	cmp	r3, #0
 8009674:	f000 81e0 	beq.w	8009a38 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800967c:	f003 0310 	and.w	r3, r3, #16
 8009680:	2b00      	cmp	r3, #0
 8009682:	f000 81d9 	beq.w	8009a38 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2210      	movs	r2, #16
 800968c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009698:	2b40      	cmp	r3, #64	; 0x40
 800969a:	f040 8151 	bne.w	8009940 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a96      	ldr	r2, [pc, #600]	; (8009900 <HAL_UART_IRQHandler+0x564>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d068      	beq.n	800977e <HAL_UART_IRQHandler+0x3e2>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a93      	ldr	r2, [pc, #588]	; (8009904 <HAL_UART_IRQHandler+0x568>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d061      	beq.n	800977e <HAL_UART_IRQHandler+0x3e2>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a91      	ldr	r2, [pc, #580]	; (8009908 <HAL_UART_IRQHandler+0x56c>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d05a      	beq.n	800977e <HAL_UART_IRQHandler+0x3e2>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a8e      	ldr	r2, [pc, #568]	; (800990c <HAL_UART_IRQHandler+0x570>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d053      	beq.n	800977e <HAL_UART_IRQHandler+0x3e2>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a8c      	ldr	r2, [pc, #560]	; (8009910 <HAL_UART_IRQHandler+0x574>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d04c      	beq.n	800977e <HAL_UART_IRQHandler+0x3e2>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a89      	ldr	r2, [pc, #548]	; (8009914 <HAL_UART_IRQHandler+0x578>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d045      	beq.n	800977e <HAL_UART_IRQHandler+0x3e2>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a87      	ldr	r2, [pc, #540]	; (8009918 <HAL_UART_IRQHandler+0x57c>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d03e      	beq.n	800977e <HAL_UART_IRQHandler+0x3e2>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a84      	ldr	r2, [pc, #528]	; (800991c <HAL_UART_IRQHandler+0x580>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d037      	beq.n	800977e <HAL_UART_IRQHandler+0x3e2>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a82      	ldr	r2, [pc, #520]	; (8009920 <HAL_UART_IRQHandler+0x584>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d030      	beq.n	800977e <HAL_UART_IRQHandler+0x3e2>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a7f      	ldr	r2, [pc, #508]	; (8009924 <HAL_UART_IRQHandler+0x588>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d029      	beq.n	800977e <HAL_UART_IRQHandler+0x3e2>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a7d      	ldr	r2, [pc, #500]	; (8009928 <HAL_UART_IRQHandler+0x58c>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d022      	beq.n	800977e <HAL_UART_IRQHandler+0x3e2>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a7a      	ldr	r2, [pc, #488]	; (800992c <HAL_UART_IRQHandler+0x590>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d01b      	beq.n	800977e <HAL_UART_IRQHandler+0x3e2>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a78      	ldr	r2, [pc, #480]	; (8009930 <HAL_UART_IRQHandler+0x594>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d014      	beq.n	800977e <HAL_UART_IRQHandler+0x3e2>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a75      	ldr	r2, [pc, #468]	; (8009934 <HAL_UART_IRQHandler+0x598>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d00d      	beq.n	800977e <HAL_UART_IRQHandler+0x3e2>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a73      	ldr	r2, [pc, #460]	; (8009938 <HAL_UART_IRQHandler+0x59c>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d006      	beq.n	800977e <HAL_UART_IRQHandler+0x3e2>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a70      	ldr	r2, [pc, #448]	; (800993c <HAL_UART_IRQHandler+0x5a0>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d106      	bne.n	800978c <HAL_UART_IRQHandler+0x3f0>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	b29b      	uxth	r3, r3
 800978a:	e005      	b.n	8009798 <HAL_UART_IRQHandler+0x3fc>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	b29b      	uxth	r3, r3
 8009798:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800979c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f000 81ab 	beq.w	8009afc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80097ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097b0:	429a      	cmp	r2, r3
 80097b2:	f080 81a3 	bcs.w	8009afc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097c6:	69db      	ldr	r3, [r3, #28]
 80097c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097cc:	f000 8087 	beq.w	80098de <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097dc:	e853 3f00 	ldrex	r3, [r3]
 80097e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80097e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	461a      	mov	r2, r3
 80097f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80097fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009802:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009806:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800980a:	e841 2300 	strex	r3, r2, [r1]
 800980e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1da      	bne.n	80097d0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	3308      	adds	r3, #8
 8009820:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009824:	e853 3f00 	ldrex	r3, [r3]
 8009828:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800982a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800982c:	f023 0301 	bic.w	r3, r3, #1
 8009830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	3308      	adds	r3, #8
 800983a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800983e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009842:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009844:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009846:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800984a:	e841 2300 	strex	r3, r2, [r1]
 800984e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1e1      	bne.n	800981a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	3308      	adds	r3, #8
 800985c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009860:	e853 3f00 	ldrex	r3, [r3]
 8009864:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800986c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	3308      	adds	r3, #8
 8009876:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800987a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800987c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009880:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009882:	e841 2300 	strex	r3, r2, [r1]
 8009886:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1e3      	bne.n	8009856 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2220      	movs	r2, #32
 8009892:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098a4:	e853 3f00 	ldrex	r3, [r3]
 80098a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80098aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098ac:	f023 0310 	bic.w	r3, r3, #16
 80098b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	461a      	mov	r2, r3
 80098ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098be:	65bb      	str	r3, [r7, #88]	; 0x58
 80098c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098c6:	e841 2300 	strex	r3, r2, [r1]
 80098ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80098cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d1e4      	bne.n	800989c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098d8:	4618      	mov	r0, r3
 80098da:	f7f8 ffbb 	bl	8002854 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2202      	movs	r2, #2
 80098e2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f927 	bl	8009b4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80098fe:	e0fd      	b.n	8009afc <HAL_UART_IRQHandler+0x760>
 8009900:	40020010 	.word	0x40020010
 8009904:	40020028 	.word	0x40020028
 8009908:	40020040 	.word	0x40020040
 800990c:	40020058 	.word	0x40020058
 8009910:	40020070 	.word	0x40020070
 8009914:	40020088 	.word	0x40020088
 8009918:	400200a0 	.word	0x400200a0
 800991c:	400200b8 	.word	0x400200b8
 8009920:	40020410 	.word	0x40020410
 8009924:	40020428 	.word	0x40020428
 8009928:	40020440 	.word	0x40020440
 800992c:	40020458 	.word	0x40020458
 8009930:	40020470 	.word	0x40020470
 8009934:	40020488 	.word	0x40020488
 8009938:	400204a0 	.word	0x400204a0
 800993c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800994c:	b29b      	uxth	r3, r3
 800994e:	1ad3      	subs	r3, r2, r3
 8009950:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800995a:	b29b      	uxth	r3, r3
 800995c:	2b00      	cmp	r3, #0
 800995e:	f000 80cf 	beq.w	8009b00 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009962:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009966:	2b00      	cmp	r3, #0
 8009968:	f000 80ca 	beq.w	8009b00 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009974:	e853 3f00 	ldrex	r3, [r3]
 8009978:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800997a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800997c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009980:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	461a      	mov	r2, r3
 800998a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800998e:	647b      	str	r3, [r7, #68]	; 0x44
 8009990:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009992:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009994:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009996:	e841 2300 	strex	r3, r2, [r1]
 800999a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800999c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1e4      	bne.n	800996c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	3308      	adds	r3, #8
 80099a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ac:	e853 3f00 	ldrex	r3, [r3]
 80099b0:	623b      	str	r3, [r7, #32]
   return(result);
 80099b2:	6a3a      	ldr	r2, [r7, #32]
 80099b4:	4b55      	ldr	r3, [pc, #340]	; (8009b0c <HAL_UART_IRQHandler+0x770>)
 80099b6:	4013      	ands	r3, r2
 80099b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	3308      	adds	r3, #8
 80099c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80099c6:	633a      	str	r2, [r7, #48]	; 0x30
 80099c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099ce:	e841 2300 	strex	r3, r2, [r1]
 80099d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d1e3      	bne.n	80099a2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2220      	movs	r2, #32
 80099de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	e853 3f00 	ldrex	r3, [r3]
 80099fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f023 0310 	bic.w	r3, r3, #16
 8009a02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009a10:	61fb      	str	r3, [r7, #28]
 8009a12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a14:	69b9      	ldr	r1, [r7, #24]
 8009a16:	69fa      	ldr	r2, [r7, #28]
 8009a18:	e841 2300 	strex	r3, r2, [r1]
 8009a1c:	617b      	str	r3, [r7, #20]
   return(result);
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1e4      	bne.n	80099ee <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2202      	movs	r2, #2
 8009a28:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a2e:	4619      	mov	r1, r3
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 f88b 	bl	8009b4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a36:	e063      	b.n	8009b00 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00e      	beq.n	8009a62 <HAL_UART_IRQHandler+0x6c6>
 8009a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d008      	beq.n	8009a62 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009a58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f001 ff88 	bl	800b970 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a60:	e051      	b.n	8009b06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d014      	beq.n	8009a98 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d105      	bne.n	8009a86 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d008      	beq.n	8009a98 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d03a      	beq.n	8009b04 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	4798      	blx	r3
    }
    return;
 8009a96:	e035      	b.n	8009b04 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d009      	beq.n	8009ab8 <HAL_UART_IRQHandler+0x71c>
 8009aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d003      	beq.n	8009ab8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f001 fa15 	bl	800aee0 <UART_EndTransmit_IT>
    return;
 8009ab6:	e026      	b.n	8009b06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009abc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d009      	beq.n	8009ad8 <HAL_UART_IRQHandler+0x73c>
 8009ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ac8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d003      	beq.n	8009ad8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f001 ff61 	bl	800b998 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ad6:	e016      	b.n	8009b06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d010      	beq.n	8009b06 <HAL_UART_IRQHandler+0x76a>
 8009ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	da0c      	bge.n	8009b06 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f001 ff49 	bl	800b984 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009af2:	e008      	b.n	8009b06 <HAL_UART_IRQHandler+0x76a>
      return;
 8009af4:	bf00      	nop
 8009af6:	e006      	b.n	8009b06 <HAL_UART_IRQHandler+0x76a>
    return;
 8009af8:	bf00      	nop
 8009afa:	e004      	b.n	8009b06 <HAL_UART_IRQHandler+0x76a>
      return;
 8009afc:	bf00      	nop
 8009afe:	e002      	b.n	8009b06 <HAL_UART_IRQHandler+0x76a>
      return;
 8009b00:	bf00      	nop
 8009b02:	e000      	b.n	8009b06 <HAL_UART_IRQHandler+0x76a>
    return;
 8009b04:	bf00      	nop
  }
}
 8009b06:	37e8      	adds	r7, #232	; 0xe8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	effffffe 	.word	0xeffffffe

08009b10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009b18:	bf00      	nop
 8009b1a:	370c      	adds	r7, #12
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	460b      	mov	r3, r1
 8009b56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b58:	bf00      	nop
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b68:	b092      	sub	sp, #72	; 0x48
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	689a      	ldr	r2, [r3, #8]
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	431a      	orrs	r2, r3
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	695b      	ldr	r3, [r3, #20]
 8009b82:	431a      	orrs	r2, r3
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	69db      	ldr	r3, [r3, #28]
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	4bbe      	ldr	r3, [pc, #760]	; (8009e8c <UART_SetConfig+0x328>)
 8009b94:	4013      	ands	r3, r2
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	6812      	ldr	r2, [r2, #0]
 8009b9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b9c:	430b      	orrs	r3, r1
 8009b9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	68da      	ldr	r2, [r3, #12]
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	430a      	orrs	r2, r1
 8009bb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	699b      	ldr	r3, [r3, #24]
 8009bba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4ab3      	ldr	r2, [pc, #716]	; (8009e90 <UART_SetConfig+0x32c>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d004      	beq.n	8009bd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	6a1b      	ldr	r3, [r3, #32]
 8009bca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	689a      	ldr	r2, [r3, #8]
 8009bd6:	4baf      	ldr	r3, [pc, #700]	; (8009e94 <UART_SetConfig+0x330>)
 8009bd8:	4013      	ands	r3, r2
 8009bda:	697a      	ldr	r2, [r7, #20]
 8009bdc:	6812      	ldr	r2, [r2, #0]
 8009bde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009be0:	430b      	orrs	r3, r1
 8009be2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bea:	f023 010f 	bic.w	r1, r3, #15
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4aa6      	ldr	r2, [pc, #664]	; (8009e98 <UART_SetConfig+0x334>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d177      	bne.n	8009cf4 <UART_SetConfig+0x190>
 8009c04:	4ba5      	ldr	r3, [pc, #660]	; (8009e9c <UART_SetConfig+0x338>)
 8009c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c0c:	2b28      	cmp	r3, #40	; 0x28
 8009c0e:	d86d      	bhi.n	8009cec <UART_SetConfig+0x188>
 8009c10:	a201      	add	r2, pc, #4	; (adr r2, 8009c18 <UART_SetConfig+0xb4>)
 8009c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c16:	bf00      	nop
 8009c18:	08009cbd 	.word	0x08009cbd
 8009c1c:	08009ced 	.word	0x08009ced
 8009c20:	08009ced 	.word	0x08009ced
 8009c24:	08009ced 	.word	0x08009ced
 8009c28:	08009ced 	.word	0x08009ced
 8009c2c:	08009ced 	.word	0x08009ced
 8009c30:	08009ced 	.word	0x08009ced
 8009c34:	08009ced 	.word	0x08009ced
 8009c38:	08009cc5 	.word	0x08009cc5
 8009c3c:	08009ced 	.word	0x08009ced
 8009c40:	08009ced 	.word	0x08009ced
 8009c44:	08009ced 	.word	0x08009ced
 8009c48:	08009ced 	.word	0x08009ced
 8009c4c:	08009ced 	.word	0x08009ced
 8009c50:	08009ced 	.word	0x08009ced
 8009c54:	08009ced 	.word	0x08009ced
 8009c58:	08009ccd 	.word	0x08009ccd
 8009c5c:	08009ced 	.word	0x08009ced
 8009c60:	08009ced 	.word	0x08009ced
 8009c64:	08009ced 	.word	0x08009ced
 8009c68:	08009ced 	.word	0x08009ced
 8009c6c:	08009ced 	.word	0x08009ced
 8009c70:	08009ced 	.word	0x08009ced
 8009c74:	08009ced 	.word	0x08009ced
 8009c78:	08009cd5 	.word	0x08009cd5
 8009c7c:	08009ced 	.word	0x08009ced
 8009c80:	08009ced 	.word	0x08009ced
 8009c84:	08009ced 	.word	0x08009ced
 8009c88:	08009ced 	.word	0x08009ced
 8009c8c:	08009ced 	.word	0x08009ced
 8009c90:	08009ced 	.word	0x08009ced
 8009c94:	08009ced 	.word	0x08009ced
 8009c98:	08009cdd 	.word	0x08009cdd
 8009c9c:	08009ced 	.word	0x08009ced
 8009ca0:	08009ced 	.word	0x08009ced
 8009ca4:	08009ced 	.word	0x08009ced
 8009ca8:	08009ced 	.word	0x08009ced
 8009cac:	08009ced 	.word	0x08009ced
 8009cb0:	08009ced 	.word	0x08009ced
 8009cb4:	08009ced 	.word	0x08009ced
 8009cb8:	08009ce5 	.word	0x08009ce5
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cc2:	e326      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009cc4:	2304      	movs	r3, #4
 8009cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cca:	e322      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009ccc:	2308      	movs	r3, #8
 8009cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cd2:	e31e      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009cd4:	2310      	movs	r3, #16
 8009cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cda:	e31a      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009cdc:	2320      	movs	r3, #32
 8009cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ce2:	e316      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009ce4:	2340      	movs	r3, #64	; 0x40
 8009ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cea:	e312      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009cec:	2380      	movs	r3, #128	; 0x80
 8009cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cf2:	e30e      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a69      	ldr	r2, [pc, #420]	; (8009ea0 <UART_SetConfig+0x33c>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d130      	bne.n	8009d60 <UART_SetConfig+0x1fc>
 8009cfe:	4b67      	ldr	r3, [pc, #412]	; (8009e9c <UART_SetConfig+0x338>)
 8009d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d02:	f003 0307 	and.w	r3, r3, #7
 8009d06:	2b05      	cmp	r3, #5
 8009d08:	d826      	bhi.n	8009d58 <UART_SetConfig+0x1f4>
 8009d0a:	a201      	add	r2, pc, #4	; (adr r2, 8009d10 <UART_SetConfig+0x1ac>)
 8009d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d10:	08009d29 	.word	0x08009d29
 8009d14:	08009d31 	.word	0x08009d31
 8009d18:	08009d39 	.word	0x08009d39
 8009d1c:	08009d41 	.word	0x08009d41
 8009d20:	08009d49 	.word	0x08009d49
 8009d24:	08009d51 	.word	0x08009d51
 8009d28:	2300      	movs	r3, #0
 8009d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d2e:	e2f0      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009d30:	2304      	movs	r3, #4
 8009d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d36:	e2ec      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009d38:	2308      	movs	r3, #8
 8009d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d3e:	e2e8      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009d40:	2310      	movs	r3, #16
 8009d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d46:	e2e4      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009d48:	2320      	movs	r3, #32
 8009d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d4e:	e2e0      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009d50:	2340      	movs	r3, #64	; 0x40
 8009d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d56:	e2dc      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009d58:	2380      	movs	r3, #128	; 0x80
 8009d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d5e:	e2d8      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a4f      	ldr	r2, [pc, #316]	; (8009ea4 <UART_SetConfig+0x340>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d130      	bne.n	8009dcc <UART_SetConfig+0x268>
 8009d6a:	4b4c      	ldr	r3, [pc, #304]	; (8009e9c <UART_SetConfig+0x338>)
 8009d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d6e:	f003 0307 	and.w	r3, r3, #7
 8009d72:	2b05      	cmp	r3, #5
 8009d74:	d826      	bhi.n	8009dc4 <UART_SetConfig+0x260>
 8009d76:	a201      	add	r2, pc, #4	; (adr r2, 8009d7c <UART_SetConfig+0x218>)
 8009d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7c:	08009d95 	.word	0x08009d95
 8009d80:	08009d9d 	.word	0x08009d9d
 8009d84:	08009da5 	.word	0x08009da5
 8009d88:	08009dad 	.word	0x08009dad
 8009d8c:	08009db5 	.word	0x08009db5
 8009d90:	08009dbd 	.word	0x08009dbd
 8009d94:	2300      	movs	r3, #0
 8009d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d9a:	e2ba      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009d9c:	2304      	movs	r3, #4
 8009d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009da2:	e2b6      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009da4:	2308      	movs	r3, #8
 8009da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009daa:	e2b2      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009dac:	2310      	movs	r3, #16
 8009dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009db2:	e2ae      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009db4:	2320      	movs	r3, #32
 8009db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dba:	e2aa      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009dbc:	2340      	movs	r3, #64	; 0x40
 8009dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dc2:	e2a6      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009dc4:	2380      	movs	r3, #128	; 0x80
 8009dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dca:	e2a2      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a35      	ldr	r2, [pc, #212]	; (8009ea8 <UART_SetConfig+0x344>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d130      	bne.n	8009e38 <UART_SetConfig+0x2d4>
 8009dd6:	4b31      	ldr	r3, [pc, #196]	; (8009e9c <UART_SetConfig+0x338>)
 8009dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dda:	f003 0307 	and.w	r3, r3, #7
 8009dde:	2b05      	cmp	r3, #5
 8009de0:	d826      	bhi.n	8009e30 <UART_SetConfig+0x2cc>
 8009de2:	a201      	add	r2, pc, #4	; (adr r2, 8009de8 <UART_SetConfig+0x284>)
 8009de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de8:	08009e01 	.word	0x08009e01
 8009dec:	08009e09 	.word	0x08009e09
 8009df0:	08009e11 	.word	0x08009e11
 8009df4:	08009e19 	.word	0x08009e19
 8009df8:	08009e21 	.word	0x08009e21
 8009dfc:	08009e29 	.word	0x08009e29
 8009e00:	2300      	movs	r3, #0
 8009e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e06:	e284      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009e08:	2304      	movs	r3, #4
 8009e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e0e:	e280      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009e10:	2308      	movs	r3, #8
 8009e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e16:	e27c      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009e18:	2310      	movs	r3, #16
 8009e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e1e:	e278      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009e20:	2320      	movs	r3, #32
 8009e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e26:	e274      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009e28:	2340      	movs	r3, #64	; 0x40
 8009e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e2e:	e270      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009e30:	2380      	movs	r3, #128	; 0x80
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e36:	e26c      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a1b      	ldr	r2, [pc, #108]	; (8009eac <UART_SetConfig+0x348>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d142      	bne.n	8009ec8 <UART_SetConfig+0x364>
 8009e42:	4b16      	ldr	r3, [pc, #88]	; (8009e9c <UART_SetConfig+0x338>)
 8009e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e46:	f003 0307 	and.w	r3, r3, #7
 8009e4a:	2b05      	cmp	r3, #5
 8009e4c:	d838      	bhi.n	8009ec0 <UART_SetConfig+0x35c>
 8009e4e:	a201      	add	r2, pc, #4	; (adr r2, 8009e54 <UART_SetConfig+0x2f0>)
 8009e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e54:	08009e6d 	.word	0x08009e6d
 8009e58:	08009e75 	.word	0x08009e75
 8009e5c:	08009e7d 	.word	0x08009e7d
 8009e60:	08009e85 	.word	0x08009e85
 8009e64:	08009eb1 	.word	0x08009eb1
 8009e68:	08009eb9 	.word	0x08009eb9
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e72:	e24e      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009e74:	2304      	movs	r3, #4
 8009e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e7a:	e24a      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009e7c:	2308      	movs	r3, #8
 8009e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e82:	e246      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009e84:	2310      	movs	r3, #16
 8009e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e8a:	e242      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009e8c:	cfff69f3 	.word	0xcfff69f3
 8009e90:	58000c00 	.word	0x58000c00
 8009e94:	11fff4ff 	.word	0x11fff4ff
 8009e98:	40011000 	.word	0x40011000
 8009e9c:	58024400 	.word	0x58024400
 8009ea0:	40004400 	.word	0x40004400
 8009ea4:	40004800 	.word	0x40004800
 8009ea8:	40004c00 	.word	0x40004c00
 8009eac:	40005000 	.word	0x40005000
 8009eb0:	2320      	movs	r3, #32
 8009eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eb6:	e22c      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009eb8:	2340      	movs	r3, #64	; 0x40
 8009eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ebe:	e228      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009ec0:	2380      	movs	r3, #128	; 0x80
 8009ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ec6:	e224      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4ab1      	ldr	r2, [pc, #708]	; (800a194 <UART_SetConfig+0x630>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d176      	bne.n	8009fc0 <UART_SetConfig+0x45c>
 8009ed2:	4bb1      	ldr	r3, [pc, #708]	; (800a198 <UART_SetConfig+0x634>)
 8009ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009eda:	2b28      	cmp	r3, #40	; 0x28
 8009edc:	d86c      	bhi.n	8009fb8 <UART_SetConfig+0x454>
 8009ede:	a201      	add	r2, pc, #4	; (adr r2, 8009ee4 <UART_SetConfig+0x380>)
 8009ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee4:	08009f89 	.word	0x08009f89
 8009ee8:	08009fb9 	.word	0x08009fb9
 8009eec:	08009fb9 	.word	0x08009fb9
 8009ef0:	08009fb9 	.word	0x08009fb9
 8009ef4:	08009fb9 	.word	0x08009fb9
 8009ef8:	08009fb9 	.word	0x08009fb9
 8009efc:	08009fb9 	.word	0x08009fb9
 8009f00:	08009fb9 	.word	0x08009fb9
 8009f04:	08009f91 	.word	0x08009f91
 8009f08:	08009fb9 	.word	0x08009fb9
 8009f0c:	08009fb9 	.word	0x08009fb9
 8009f10:	08009fb9 	.word	0x08009fb9
 8009f14:	08009fb9 	.word	0x08009fb9
 8009f18:	08009fb9 	.word	0x08009fb9
 8009f1c:	08009fb9 	.word	0x08009fb9
 8009f20:	08009fb9 	.word	0x08009fb9
 8009f24:	08009f99 	.word	0x08009f99
 8009f28:	08009fb9 	.word	0x08009fb9
 8009f2c:	08009fb9 	.word	0x08009fb9
 8009f30:	08009fb9 	.word	0x08009fb9
 8009f34:	08009fb9 	.word	0x08009fb9
 8009f38:	08009fb9 	.word	0x08009fb9
 8009f3c:	08009fb9 	.word	0x08009fb9
 8009f40:	08009fb9 	.word	0x08009fb9
 8009f44:	08009fa1 	.word	0x08009fa1
 8009f48:	08009fb9 	.word	0x08009fb9
 8009f4c:	08009fb9 	.word	0x08009fb9
 8009f50:	08009fb9 	.word	0x08009fb9
 8009f54:	08009fb9 	.word	0x08009fb9
 8009f58:	08009fb9 	.word	0x08009fb9
 8009f5c:	08009fb9 	.word	0x08009fb9
 8009f60:	08009fb9 	.word	0x08009fb9
 8009f64:	08009fa9 	.word	0x08009fa9
 8009f68:	08009fb9 	.word	0x08009fb9
 8009f6c:	08009fb9 	.word	0x08009fb9
 8009f70:	08009fb9 	.word	0x08009fb9
 8009f74:	08009fb9 	.word	0x08009fb9
 8009f78:	08009fb9 	.word	0x08009fb9
 8009f7c:	08009fb9 	.word	0x08009fb9
 8009f80:	08009fb9 	.word	0x08009fb9
 8009f84:	08009fb1 	.word	0x08009fb1
 8009f88:	2301      	movs	r3, #1
 8009f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f8e:	e1c0      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009f90:	2304      	movs	r3, #4
 8009f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f96:	e1bc      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009f98:	2308      	movs	r3, #8
 8009f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f9e:	e1b8      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009fa0:	2310      	movs	r3, #16
 8009fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fa6:	e1b4      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009fa8:	2320      	movs	r3, #32
 8009faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fae:	e1b0      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009fb0:	2340      	movs	r3, #64	; 0x40
 8009fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fb6:	e1ac      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009fb8:	2380      	movs	r3, #128	; 0x80
 8009fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fbe:	e1a8      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a75      	ldr	r2, [pc, #468]	; (800a19c <UART_SetConfig+0x638>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d130      	bne.n	800a02c <UART_SetConfig+0x4c8>
 8009fca:	4b73      	ldr	r3, [pc, #460]	; (800a198 <UART_SetConfig+0x634>)
 8009fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fce:	f003 0307 	and.w	r3, r3, #7
 8009fd2:	2b05      	cmp	r3, #5
 8009fd4:	d826      	bhi.n	800a024 <UART_SetConfig+0x4c0>
 8009fd6:	a201      	add	r2, pc, #4	; (adr r2, 8009fdc <UART_SetConfig+0x478>)
 8009fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fdc:	08009ff5 	.word	0x08009ff5
 8009fe0:	08009ffd 	.word	0x08009ffd
 8009fe4:	0800a005 	.word	0x0800a005
 8009fe8:	0800a00d 	.word	0x0800a00d
 8009fec:	0800a015 	.word	0x0800a015
 8009ff0:	0800a01d 	.word	0x0800a01d
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ffa:	e18a      	b.n	800a312 <UART_SetConfig+0x7ae>
 8009ffc:	2304      	movs	r3, #4
 8009ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a002:	e186      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a004:	2308      	movs	r3, #8
 800a006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a00a:	e182      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a00c:	2310      	movs	r3, #16
 800a00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a012:	e17e      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a014:	2320      	movs	r3, #32
 800a016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a01a:	e17a      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a01c:	2340      	movs	r3, #64	; 0x40
 800a01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a022:	e176      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a024:	2380      	movs	r3, #128	; 0x80
 800a026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a02a:	e172      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a5b      	ldr	r2, [pc, #364]	; (800a1a0 <UART_SetConfig+0x63c>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d130      	bne.n	800a098 <UART_SetConfig+0x534>
 800a036:	4b58      	ldr	r3, [pc, #352]	; (800a198 <UART_SetConfig+0x634>)
 800a038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a03a:	f003 0307 	and.w	r3, r3, #7
 800a03e:	2b05      	cmp	r3, #5
 800a040:	d826      	bhi.n	800a090 <UART_SetConfig+0x52c>
 800a042:	a201      	add	r2, pc, #4	; (adr r2, 800a048 <UART_SetConfig+0x4e4>)
 800a044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a048:	0800a061 	.word	0x0800a061
 800a04c:	0800a069 	.word	0x0800a069
 800a050:	0800a071 	.word	0x0800a071
 800a054:	0800a079 	.word	0x0800a079
 800a058:	0800a081 	.word	0x0800a081
 800a05c:	0800a089 	.word	0x0800a089
 800a060:	2300      	movs	r3, #0
 800a062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a066:	e154      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a068:	2304      	movs	r3, #4
 800a06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a06e:	e150      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a070:	2308      	movs	r3, #8
 800a072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a076:	e14c      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a078:	2310      	movs	r3, #16
 800a07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a07e:	e148      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a080:	2320      	movs	r3, #32
 800a082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a086:	e144      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a088:	2340      	movs	r3, #64	; 0x40
 800a08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a08e:	e140      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a090:	2380      	movs	r3, #128	; 0x80
 800a092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a096:	e13c      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a41      	ldr	r2, [pc, #260]	; (800a1a4 <UART_SetConfig+0x640>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	f040 8082 	bne.w	800a1a8 <UART_SetConfig+0x644>
 800a0a4:	4b3c      	ldr	r3, [pc, #240]	; (800a198 <UART_SetConfig+0x634>)
 800a0a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0ac:	2b28      	cmp	r3, #40	; 0x28
 800a0ae:	d86d      	bhi.n	800a18c <UART_SetConfig+0x628>
 800a0b0:	a201      	add	r2, pc, #4	; (adr r2, 800a0b8 <UART_SetConfig+0x554>)
 800a0b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b6:	bf00      	nop
 800a0b8:	0800a15d 	.word	0x0800a15d
 800a0bc:	0800a18d 	.word	0x0800a18d
 800a0c0:	0800a18d 	.word	0x0800a18d
 800a0c4:	0800a18d 	.word	0x0800a18d
 800a0c8:	0800a18d 	.word	0x0800a18d
 800a0cc:	0800a18d 	.word	0x0800a18d
 800a0d0:	0800a18d 	.word	0x0800a18d
 800a0d4:	0800a18d 	.word	0x0800a18d
 800a0d8:	0800a165 	.word	0x0800a165
 800a0dc:	0800a18d 	.word	0x0800a18d
 800a0e0:	0800a18d 	.word	0x0800a18d
 800a0e4:	0800a18d 	.word	0x0800a18d
 800a0e8:	0800a18d 	.word	0x0800a18d
 800a0ec:	0800a18d 	.word	0x0800a18d
 800a0f0:	0800a18d 	.word	0x0800a18d
 800a0f4:	0800a18d 	.word	0x0800a18d
 800a0f8:	0800a16d 	.word	0x0800a16d
 800a0fc:	0800a18d 	.word	0x0800a18d
 800a100:	0800a18d 	.word	0x0800a18d
 800a104:	0800a18d 	.word	0x0800a18d
 800a108:	0800a18d 	.word	0x0800a18d
 800a10c:	0800a18d 	.word	0x0800a18d
 800a110:	0800a18d 	.word	0x0800a18d
 800a114:	0800a18d 	.word	0x0800a18d
 800a118:	0800a175 	.word	0x0800a175
 800a11c:	0800a18d 	.word	0x0800a18d
 800a120:	0800a18d 	.word	0x0800a18d
 800a124:	0800a18d 	.word	0x0800a18d
 800a128:	0800a18d 	.word	0x0800a18d
 800a12c:	0800a18d 	.word	0x0800a18d
 800a130:	0800a18d 	.word	0x0800a18d
 800a134:	0800a18d 	.word	0x0800a18d
 800a138:	0800a17d 	.word	0x0800a17d
 800a13c:	0800a18d 	.word	0x0800a18d
 800a140:	0800a18d 	.word	0x0800a18d
 800a144:	0800a18d 	.word	0x0800a18d
 800a148:	0800a18d 	.word	0x0800a18d
 800a14c:	0800a18d 	.word	0x0800a18d
 800a150:	0800a18d 	.word	0x0800a18d
 800a154:	0800a18d 	.word	0x0800a18d
 800a158:	0800a185 	.word	0x0800a185
 800a15c:	2301      	movs	r3, #1
 800a15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a162:	e0d6      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a164:	2304      	movs	r3, #4
 800a166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a16a:	e0d2      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a16c:	2308      	movs	r3, #8
 800a16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a172:	e0ce      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a174:	2310      	movs	r3, #16
 800a176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a17a:	e0ca      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a17c:	2320      	movs	r3, #32
 800a17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a182:	e0c6      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a184:	2340      	movs	r3, #64	; 0x40
 800a186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a18a:	e0c2      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a18c:	2380      	movs	r3, #128	; 0x80
 800a18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a192:	e0be      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a194:	40011400 	.word	0x40011400
 800a198:	58024400 	.word	0x58024400
 800a19c:	40007800 	.word	0x40007800
 800a1a0:	40007c00 	.word	0x40007c00
 800a1a4:	40011800 	.word	0x40011800
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4aad      	ldr	r2, [pc, #692]	; (800a464 <UART_SetConfig+0x900>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d176      	bne.n	800a2a0 <UART_SetConfig+0x73c>
 800a1b2:	4bad      	ldr	r3, [pc, #692]	; (800a468 <UART_SetConfig+0x904>)
 800a1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1ba:	2b28      	cmp	r3, #40	; 0x28
 800a1bc:	d86c      	bhi.n	800a298 <UART_SetConfig+0x734>
 800a1be:	a201      	add	r2, pc, #4	; (adr r2, 800a1c4 <UART_SetConfig+0x660>)
 800a1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c4:	0800a269 	.word	0x0800a269
 800a1c8:	0800a299 	.word	0x0800a299
 800a1cc:	0800a299 	.word	0x0800a299
 800a1d0:	0800a299 	.word	0x0800a299
 800a1d4:	0800a299 	.word	0x0800a299
 800a1d8:	0800a299 	.word	0x0800a299
 800a1dc:	0800a299 	.word	0x0800a299
 800a1e0:	0800a299 	.word	0x0800a299
 800a1e4:	0800a271 	.word	0x0800a271
 800a1e8:	0800a299 	.word	0x0800a299
 800a1ec:	0800a299 	.word	0x0800a299
 800a1f0:	0800a299 	.word	0x0800a299
 800a1f4:	0800a299 	.word	0x0800a299
 800a1f8:	0800a299 	.word	0x0800a299
 800a1fc:	0800a299 	.word	0x0800a299
 800a200:	0800a299 	.word	0x0800a299
 800a204:	0800a279 	.word	0x0800a279
 800a208:	0800a299 	.word	0x0800a299
 800a20c:	0800a299 	.word	0x0800a299
 800a210:	0800a299 	.word	0x0800a299
 800a214:	0800a299 	.word	0x0800a299
 800a218:	0800a299 	.word	0x0800a299
 800a21c:	0800a299 	.word	0x0800a299
 800a220:	0800a299 	.word	0x0800a299
 800a224:	0800a281 	.word	0x0800a281
 800a228:	0800a299 	.word	0x0800a299
 800a22c:	0800a299 	.word	0x0800a299
 800a230:	0800a299 	.word	0x0800a299
 800a234:	0800a299 	.word	0x0800a299
 800a238:	0800a299 	.word	0x0800a299
 800a23c:	0800a299 	.word	0x0800a299
 800a240:	0800a299 	.word	0x0800a299
 800a244:	0800a289 	.word	0x0800a289
 800a248:	0800a299 	.word	0x0800a299
 800a24c:	0800a299 	.word	0x0800a299
 800a250:	0800a299 	.word	0x0800a299
 800a254:	0800a299 	.word	0x0800a299
 800a258:	0800a299 	.word	0x0800a299
 800a25c:	0800a299 	.word	0x0800a299
 800a260:	0800a299 	.word	0x0800a299
 800a264:	0800a291 	.word	0x0800a291
 800a268:	2301      	movs	r3, #1
 800a26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a26e:	e050      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a270:	2304      	movs	r3, #4
 800a272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a276:	e04c      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a278:	2308      	movs	r3, #8
 800a27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a27e:	e048      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a280:	2310      	movs	r3, #16
 800a282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a286:	e044      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a288:	2320      	movs	r3, #32
 800a28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a28e:	e040      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a290:	2340      	movs	r3, #64	; 0x40
 800a292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a296:	e03c      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a298:	2380      	movs	r3, #128	; 0x80
 800a29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a29e:	e038      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a71      	ldr	r2, [pc, #452]	; (800a46c <UART_SetConfig+0x908>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d130      	bne.n	800a30c <UART_SetConfig+0x7a8>
 800a2aa:	4b6f      	ldr	r3, [pc, #444]	; (800a468 <UART_SetConfig+0x904>)
 800a2ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ae:	f003 0307 	and.w	r3, r3, #7
 800a2b2:	2b05      	cmp	r3, #5
 800a2b4:	d826      	bhi.n	800a304 <UART_SetConfig+0x7a0>
 800a2b6:	a201      	add	r2, pc, #4	; (adr r2, 800a2bc <UART_SetConfig+0x758>)
 800a2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2bc:	0800a2d5 	.word	0x0800a2d5
 800a2c0:	0800a2dd 	.word	0x0800a2dd
 800a2c4:	0800a2e5 	.word	0x0800a2e5
 800a2c8:	0800a2ed 	.word	0x0800a2ed
 800a2cc:	0800a2f5 	.word	0x0800a2f5
 800a2d0:	0800a2fd 	.word	0x0800a2fd
 800a2d4:	2302      	movs	r3, #2
 800a2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2da:	e01a      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a2dc:	2304      	movs	r3, #4
 800a2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2e2:	e016      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a2e4:	2308      	movs	r3, #8
 800a2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ea:	e012      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a2ec:	2310      	movs	r3, #16
 800a2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2f2:	e00e      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a2f4:	2320      	movs	r3, #32
 800a2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2fa:	e00a      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a2fc:	2340      	movs	r3, #64	; 0x40
 800a2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a302:	e006      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a304:	2380      	movs	r3, #128	; 0x80
 800a306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a30a:	e002      	b.n	800a312 <UART_SetConfig+0x7ae>
 800a30c:	2380      	movs	r3, #128	; 0x80
 800a30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a55      	ldr	r2, [pc, #340]	; (800a46c <UART_SetConfig+0x908>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	f040 80f8 	bne.w	800a50e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a31e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a322:	2b20      	cmp	r3, #32
 800a324:	dc46      	bgt.n	800a3b4 <UART_SetConfig+0x850>
 800a326:	2b02      	cmp	r3, #2
 800a328:	db75      	blt.n	800a416 <UART_SetConfig+0x8b2>
 800a32a:	3b02      	subs	r3, #2
 800a32c:	2b1e      	cmp	r3, #30
 800a32e:	d872      	bhi.n	800a416 <UART_SetConfig+0x8b2>
 800a330:	a201      	add	r2, pc, #4	; (adr r2, 800a338 <UART_SetConfig+0x7d4>)
 800a332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a336:	bf00      	nop
 800a338:	0800a3bb 	.word	0x0800a3bb
 800a33c:	0800a417 	.word	0x0800a417
 800a340:	0800a3c3 	.word	0x0800a3c3
 800a344:	0800a417 	.word	0x0800a417
 800a348:	0800a417 	.word	0x0800a417
 800a34c:	0800a417 	.word	0x0800a417
 800a350:	0800a3d3 	.word	0x0800a3d3
 800a354:	0800a417 	.word	0x0800a417
 800a358:	0800a417 	.word	0x0800a417
 800a35c:	0800a417 	.word	0x0800a417
 800a360:	0800a417 	.word	0x0800a417
 800a364:	0800a417 	.word	0x0800a417
 800a368:	0800a417 	.word	0x0800a417
 800a36c:	0800a417 	.word	0x0800a417
 800a370:	0800a3e3 	.word	0x0800a3e3
 800a374:	0800a417 	.word	0x0800a417
 800a378:	0800a417 	.word	0x0800a417
 800a37c:	0800a417 	.word	0x0800a417
 800a380:	0800a417 	.word	0x0800a417
 800a384:	0800a417 	.word	0x0800a417
 800a388:	0800a417 	.word	0x0800a417
 800a38c:	0800a417 	.word	0x0800a417
 800a390:	0800a417 	.word	0x0800a417
 800a394:	0800a417 	.word	0x0800a417
 800a398:	0800a417 	.word	0x0800a417
 800a39c:	0800a417 	.word	0x0800a417
 800a3a0:	0800a417 	.word	0x0800a417
 800a3a4:	0800a417 	.word	0x0800a417
 800a3a8:	0800a417 	.word	0x0800a417
 800a3ac:	0800a417 	.word	0x0800a417
 800a3b0:	0800a409 	.word	0x0800a409
 800a3b4:	2b40      	cmp	r3, #64	; 0x40
 800a3b6:	d02a      	beq.n	800a40e <UART_SetConfig+0x8aa>
 800a3b8:	e02d      	b.n	800a416 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a3ba:	f7fc fe1f 	bl	8006ffc <HAL_RCCEx_GetD3PCLK1Freq>
 800a3be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a3c0:	e02f      	b.n	800a422 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7fc fe2e 	bl	8007028 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3d0:	e027      	b.n	800a422 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3d2:	f107 0318 	add.w	r3, r7, #24
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fc ff7a 	bl	80072d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3e0:	e01f      	b.n	800a422 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3e2:	4b21      	ldr	r3, [pc, #132]	; (800a468 <UART_SetConfig+0x904>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f003 0320 	and.w	r3, r3, #32
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d009      	beq.n	800a402 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a3ee:	4b1e      	ldr	r3, [pc, #120]	; (800a468 <UART_SetConfig+0x904>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	08db      	lsrs	r3, r3, #3
 800a3f4:	f003 0303 	and.w	r3, r3, #3
 800a3f8:	4a1d      	ldr	r2, [pc, #116]	; (800a470 <UART_SetConfig+0x90c>)
 800a3fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a400:	e00f      	b.n	800a422 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a402:	4b1b      	ldr	r3, [pc, #108]	; (800a470 <UART_SetConfig+0x90c>)
 800a404:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a406:	e00c      	b.n	800a422 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a408:	4b1a      	ldr	r3, [pc, #104]	; (800a474 <UART_SetConfig+0x910>)
 800a40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a40c:	e009      	b.n	800a422 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a40e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a414:	e005      	b.n	800a422 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a416:	2300      	movs	r3, #0
 800a418:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a420:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a424:	2b00      	cmp	r3, #0
 800a426:	f000 81ee 	beq.w	800a806 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42e:	4a12      	ldr	r2, [pc, #72]	; (800a478 <UART_SetConfig+0x914>)
 800a430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a434:	461a      	mov	r2, r3
 800a436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a438:	fbb3 f3f2 	udiv	r3, r3, r2
 800a43c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	4613      	mov	r3, r2
 800a444:	005b      	lsls	r3, r3, #1
 800a446:	4413      	add	r3, r2
 800a448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d305      	bcc.n	800a45a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a456:	429a      	cmp	r2, r3
 800a458:	d910      	bls.n	800a47c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a460:	e1d1      	b.n	800a806 <UART_SetConfig+0xca2>
 800a462:	bf00      	nop
 800a464:	40011c00 	.word	0x40011c00
 800a468:	58024400 	.word	0x58024400
 800a46c:	58000c00 	.word	0x58000c00
 800a470:	03d09000 	.word	0x03d09000
 800a474:	003d0900 	.word	0x003d0900
 800a478:	080158b0 	.word	0x080158b0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a47c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a47e:	2200      	movs	r2, #0
 800a480:	60bb      	str	r3, [r7, #8]
 800a482:	60fa      	str	r2, [r7, #12]
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a488:	4ac0      	ldr	r2, [pc, #768]	; (800a78c <UART_SetConfig+0xc28>)
 800a48a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a48e:	b29b      	uxth	r3, r3
 800a490:	2200      	movs	r2, #0
 800a492:	603b      	str	r3, [r7, #0]
 800a494:	607a      	str	r2, [r7, #4]
 800a496:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a49a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a49e:	f7f5 ff8f 	bl	80003c0 <__aeabi_uldivmod>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	4610      	mov	r0, r2
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	f04f 0200 	mov.w	r2, #0
 800a4ae:	f04f 0300 	mov.w	r3, #0
 800a4b2:	020b      	lsls	r3, r1, #8
 800a4b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a4b8:	0202      	lsls	r2, r0, #8
 800a4ba:	6979      	ldr	r1, [r7, #20]
 800a4bc:	6849      	ldr	r1, [r1, #4]
 800a4be:	0849      	lsrs	r1, r1, #1
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	460c      	mov	r4, r1
 800a4c4:	4605      	mov	r5, r0
 800a4c6:	eb12 0804 	adds.w	r8, r2, r4
 800a4ca:	eb43 0905 	adc.w	r9, r3, r5
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	469a      	mov	sl, r3
 800a4d6:	4693      	mov	fp, r2
 800a4d8:	4652      	mov	r2, sl
 800a4da:	465b      	mov	r3, fp
 800a4dc:	4640      	mov	r0, r8
 800a4de:	4649      	mov	r1, r9
 800a4e0:	f7f5 ff6e 	bl	80003c0 <__aeabi_uldivmod>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	4613      	mov	r3, r2
 800a4ea:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4f2:	d308      	bcc.n	800a506 <UART_SetConfig+0x9a2>
 800a4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4fa:	d204      	bcs.n	800a506 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a502:	60da      	str	r2, [r3, #12]
 800a504:	e17f      	b.n	800a806 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a506:	2301      	movs	r3, #1
 800a508:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a50c:	e17b      	b.n	800a806 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	69db      	ldr	r3, [r3, #28]
 800a512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a516:	f040 80bd 	bne.w	800a694 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a51a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a51e:	2b20      	cmp	r3, #32
 800a520:	dc48      	bgt.n	800a5b4 <UART_SetConfig+0xa50>
 800a522:	2b00      	cmp	r3, #0
 800a524:	db7b      	blt.n	800a61e <UART_SetConfig+0xaba>
 800a526:	2b20      	cmp	r3, #32
 800a528:	d879      	bhi.n	800a61e <UART_SetConfig+0xaba>
 800a52a:	a201      	add	r2, pc, #4	; (adr r2, 800a530 <UART_SetConfig+0x9cc>)
 800a52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a530:	0800a5bb 	.word	0x0800a5bb
 800a534:	0800a5c3 	.word	0x0800a5c3
 800a538:	0800a61f 	.word	0x0800a61f
 800a53c:	0800a61f 	.word	0x0800a61f
 800a540:	0800a5cb 	.word	0x0800a5cb
 800a544:	0800a61f 	.word	0x0800a61f
 800a548:	0800a61f 	.word	0x0800a61f
 800a54c:	0800a61f 	.word	0x0800a61f
 800a550:	0800a5db 	.word	0x0800a5db
 800a554:	0800a61f 	.word	0x0800a61f
 800a558:	0800a61f 	.word	0x0800a61f
 800a55c:	0800a61f 	.word	0x0800a61f
 800a560:	0800a61f 	.word	0x0800a61f
 800a564:	0800a61f 	.word	0x0800a61f
 800a568:	0800a61f 	.word	0x0800a61f
 800a56c:	0800a61f 	.word	0x0800a61f
 800a570:	0800a5eb 	.word	0x0800a5eb
 800a574:	0800a61f 	.word	0x0800a61f
 800a578:	0800a61f 	.word	0x0800a61f
 800a57c:	0800a61f 	.word	0x0800a61f
 800a580:	0800a61f 	.word	0x0800a61f
 800a584:	0800a61f 	.word	0x0800a61f
 800a588:	0800a61f 	.word	0x0800a61f
 800a58c:	0800a61f 	.word	0x0800a61f
 800a590:	0800a61f 	.word	0x0800a61f
 800a594:	0800a61f 	.word	0x0800a61f
 800a598:	0800a61f 	.word	0x0800a61f
 800a59c:	0800a61f 	.word	0x0800a61f
 800a5a0:	0800a61f 	.word	0x0800a61f
 800a5a4:	0800a61f 	.word	0x0800a61f
 800a5a8:	0800a61f 	.word	0x0800a61f
 800a5ac:	0800a61f 	.word	0x0800a61f
 800a5b0:	0800a611 	.word	0x0800a611
 800a5b4:	2b40      	cmp	r3, #64	; 0x40
 800a5b6:	d02e      	beq.n	800a616 <UART_SetConfig+0xab2>
 800a5b8:	e031      	b.n	800a61e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5ba:	f7fb fb11 	bl	8005be0 <HAL_RCC_GetPCLK1Freq>
 800a5be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a5c0:	e033      	b.n	800a62a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5c2:	f7fb fb23 	bl	8005c0c <HAL_RCC_GetPCLK2Freq>
 800a5c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a5c8:	e02f      	b.n	800a62a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7fc fd2a 	bl	8007028 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5d8:	e027      	b.n	800a62a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5da:	f107 0318 	add.w	r3, r7, #24
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7fc fe76 	bl	80072d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5e8:	e01f      	b.n	800a62a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5ea:	4b69      	ldr	r3, [pc, #420]	; (800a790 <UART_SetConfig+0xc2c>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f003 0320 	and.w	r3, r3, #32
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d009      	beq.n	800a60a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a5f6:	4b66      	ldr	r3, [pc, #408]	; (800a790 <UART_SetConfig+0xc2c>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	08db      	lsrs	r3, r3, #3
 800a5fc:	f003 0303 	and.w	r3, r3, #3
 800a600:	4a64      	ldr	r2, [pc, #400]	; (800a794 <UART_SetConfig+0xc30>)
 800a602:	fa22 f303 	lsr.w	r3, r2, r3
 800a606:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a608:	e00f      	b.n	800a62a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a60a:	4b62      	ldr	r3, [pc, #392]	; (800a794 <UART_SetConfig+0xc30>)
 800a60c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a60e:	e00c      	b.n	800a62a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a610:	4b61      	ldr	r3, [pc, #388]	; (800a798 <UART_SetConfig+0xc34>)
 800a612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a614:	e009      	b.n	800a62a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a61a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a61c:	e005      	b.n	800a62a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a61e:	2300      	movs	r3, #0
 800a620:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a628:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a62a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f000 80ea 	beq.w	800a806 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a636:	4a55      	ldr	r2, [pc, #340]	; (800a78c <UART_SetConfig+0xc28>)
 800a638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a63c:	461a      	mov	r2, r3
 800a63e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a640:	fbb3 f3f2 	udiv	r3, r3, r2
 800a644:	005a      	lsls	r2, r3, #1
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	085b      	lsrs	r3, r3, #1
 800a64c:	441a      	add	r2, r3
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	fbb2 f3f3 	udiv	r3, r2, r3
 800a656:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65a:	2b0f      	cmp	r3, #15
 800a65c:	d916      	bls.n	800a68c <UART_SetConfig+0xb28>
 800a65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a664:	d212      	bcs.n	800a68c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a668:	b29b      	uxth	r3, r3
 800a66a:	f023 030f 	bic.w	r3, r3, #15
 800a66e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a672:	085b      	lsrs	r3, r3, #1
 800a674:	b29b      	uxth	r3, r3
 800a676:	f003 0307 	and.w	r3, r3, #7
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a67e:	4313      	orrs	r3, r2
 800a680:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a688:	60da      	str	r2, [r3, #12]
 800a68a:	e0bc      	b.n	800a806 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a692:	e0b8      	b.n	800a806 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a694:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a698:	2b20      	cmp	r3, #32
 800a69a:	dc4b      	bgt.n	800a734 <UART_SetConfig+0xbd0>
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	f2c0 8087 	blt.w	800a7b0 <UART_SetConfig+0xc4c>
 800a6a2:	2b20      	cmp	r3, #32
 800a6a4:	f200 8084 	bhi.w	800a7b0 <UART_SetConfig+0xc4c>
 800a6a8:	a201      	add	r2, pc, #4	; (adr r2, 800a6b0 <UART_SetConfig+0xb4c>)
 800a6aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ae:	bf00      	nop
 800a6b0:	0800a73b 	.word	0x0800a73b
 800a6b4:	0800a743 	.word	0x0800a743
 800a6b8:	0800a7b1 	.word	0x0800a7b1
 800a6bc:	0800a7b1 	.word	0x0800a7b1
 800a6c0:	0800a74b 	.word	0x0800a74b
 800a6c4:	0800a7b1 	.word	0x0800a7b1
 800a6c8:	0800a7b1 	.word	0x0800a7b1
 800a6cc:	0800a7b1 	.word	0x0800a7b1
 800a6d0:	0800a75b 	.word	0x0800a75b
 800a6d4:	0800a7b1 	.word	0x0800a7b1
 800a6d8:	0800a7b1 	.word	0x0800a7b1
 800a6dc:	0800a7b1 	.word	0x0800a7b1
 800a6e0:	0800a7b1 	.word	0x0800a7b1
 800a6e4:	0800a7b1 	.word	0x0800a7b1
 800a6e8:	0800a7b1 	.word	0x0800a7b1
 800a6ec:	0800a7b1 	.word	0x0800a7b1
 800a6f0:	0800a76b 	.word	0x0800a76b
 800a6f4:	0800a7b1 	.word	0x0800a7b1
 800a6f8:	0800a7b1 	.word	0x0800a7b1
 800a6fc:	0800a7b1 	.word	0x0800a7b1
 800a700:	0800a7b1 	.word	0x0800a7b1
 800a704:	0800a7b1 	.word	0x0800a7b1
 800a708:	0800a7b1 	.word	0x0800a7b1
 800a70c:	0800a7b1 	.word	0x0800a7b1
 800a710:	0800a7b1 	.word	0x0800a7b1
 800a714:	0800a7b1 	.word	0x0800a7b1
 800a718:	0800a7b1 	.word	0x0800a7b1
 800a71c:	0800a7b1 	.word	0x0800a7b1
 800a720:	0800a7b1 	.word	0x0800a7b1
 800a724:	0800a7b1 	.word	0x0800a7b1
 800a728:	0800a7b1 	.word	0x0800a7b1
 800a72c:	0800a7b1 	.word	0x0800a7b1
 800a730:	0800a7a3 	.word	0x0800a7a3
 800a734:	2b40      	cmp	r3, #64	; 0x40
 800a736:	d037      	beq.n	800a7a8 <UART_SetConfig+0xc44>
 800a738:	e03a      	b.n	800a7b0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a73a:	f7fb fa51 	bl	8005be0 <HAL_RCC_GetPCLK1Freq>
 800a73e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a740:	e03c      	b.n	800a7bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a742:	f7fb fa63 	bl	8005c0c <HAL_RCC_GetPCLK2Freq>
 800a746:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a748:	e038      	b.n	800a7bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a74a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a74e:	4618      	mov	r0, r3
 800a750:	f7fc fc6a 	bl	8007028 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a758:	e030      	b.n	800a7bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a75a:	f107 0318 	add.w	r3, r7, #24
 800a75e:	4618      	mov	r0, r3
 800a760:	f7fc fdb6 	bl	80072d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a768:	e028      	b.n	800a7bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a76a:	4b09      	ldr	r3, [pc, #36]	; (800a790 <UART_SetConfig+0xc2c>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f003 0320 	and.w	r3, r3, #32
 800a772:	2b00      	cmp	r3, #0
 800a774:	d012      	beq.n	800a79c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a776:	4b06      	ldr	r3, [pc, #24]	; (800a790 <UART_SetConfig+0xc2c>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	08db      	lsrs	r3, r3, #3
 800a77c:	f003 0303 	and.w	r3, r3, #3
 800a780:	4a04      	ldr	r2, [pc, #16]	; (800a794 <UART_SetConfig+0xc30>)
 800a782:	fa22 f303 	lsr.w	r3, r2, r3
 800a786:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a788:	e018      	b.n	800a7bc <UART_SetConfig+0xc58>
 800a78a:	bf00      	nop
 800a78c:	080158b0 	.word	0x080158b0
 800a790:	58024400 	.word	0x58024400
 800a794:	03d09000 	.word	0x03d09000
 800a798:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a79c:	4b24      	ldr	r3, [pc, #144]	; (800a830 <UART_SetConfig+0xccc>)
 800a79e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7a0:	e00c      	b.n	800a7bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a7a2:	4b24      	ldr	r3, [pc, #144]	; (800a834 <UART_SetConfig+0xcd0>)
 800a7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7a6:	e009      	b.n	800a7bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7ae:	e005      	b.n	800a7bc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a7ba:	bf00      	nop
    }

    if (pclk != 0U)
 800a7bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d021      	beq.n	800a806 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c6:	4a1c      	ldr	r2, [pc, #112]	; (800a838 <UART_SetConfig+0xcd4>)
 800a7c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7d0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	085b      	lsrs	r3, r3, #1
 800a7da:	441a      	add	r2, r3
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7e4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e8:	2b0f      	cmp	r3, #15
 800a7ea:	d909      	bls.n	800a800 <UART_SetConfig+0xc9c>
 800a7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7f2:	d205      	bcs.n	800a800 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f6:	b29a      	uxth	r2, r3
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	60da      	str	r2, [r3, #12]
 800a7fe:	e002      	b.n	800a806 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a800:	2301      	movs	r3, #1
 800a802:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	2201      	movs	r2, #1
 800a80a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	2201      	movs	r2, #1
 800a812:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	2200      	movs	r2, #0
 800a81a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	2200      	movs	r2, #0
 800a820:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a822:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a826:	4618      	mov	r0, r3
 800a828:	3748      	adds	r7, #72	; 0x48
 800a82a:	46bd      	mov	sp, r7
 800a82c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a830:	03d09000 	.word	0x03d09000
 800a834:	003d0900 	.word	0x003d0900
 800a838:	080158b0 	.word	0x080158b0

0800a83c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a848:	f003 0301 	and.w	r3, r3, #1
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00a      	beq.n	800a866 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	430a      	orrs	r2, r1
 800a864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a86a:	f003 0302 	and.w	r3, r3, #2
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d00a      	beq.n	800a888 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	430a      	orrs	r2, r1
 800a886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a88c:	f003 0304 	and.w	r3, r3, #4
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00a      	beq.n	800a8aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	430a      	orrs	r2, r1
 800a8a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ae:	f003 0308 	and.w	r3, r3, #8
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d00a      	beq.n	800a8cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	430a      	orrs	r2, r1
 800a8ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8d0:	f003 0310 	and.w	r3, r3, #16
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d00a      	beq.n	800a8ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	430a      	orrs	r2, r1
 800a8ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8f2:	f003 0320 	and.w	r3, r3, #32
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00a      	beq.n	800a910 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	430a      	orrs	r2, r1
 800a90e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d01a      	beq.n	800a952 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	430a      	orrs	r2, r1
 800a930:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a93a:	d10a      	bne.n	800a952 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	430a      	orrs	r2, r1
 800a950:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00a      	beq.n	800a974 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	430a      	orrs	r2, r1
 800a972:	605a      	str	r2, [r3, #4]
  }
}
 800a974:	bf00      	nop
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b098      	sub	sp, #96	; 0x60
 800a984:	af02      	add	r7, sp, #8
 800a986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a990:	f7f7 f8b2 	bl	8001af8 <HAL_GetTick>
 800a994:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f003 0308 	and.w	r3, r3, #8
 800a9a0:	2b08      	cmp	r3, #8
 800a9a2:	d12f      	bne.n	800aa04 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a9a8:	9300      	str	r3, [sp, #0]
 800a9aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 f88e 	bl	800aad4 <UART_WaitOnFlagUntilTimeout>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d022      	beq.n	800aa04 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c6:	e853 3f00 	ldrex	r3, [r3]
 800a9ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9d2:	653b      	str	r3, [r7, #80]	; 0x50
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	461a      	mov	r2, r3
 800a9da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9dc:	647b      	str	r3, [r7, #68]	; 0x44
 800a9de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a9e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9e4:	e841 2300 	strex	r3, r2, [r1]
 800a9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a9ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d1e6      	bne.n	800a9be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2220      	movs	r2, #32
 800a9f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa00:	2303      	movs	r3, #3
 800aa02:	e063      	b.n	800aacc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f003 0304 	and.w	r3, r3, #4
 800aa0e:	2b04      	cmp	r3, #4
 800aa10:	d149      	bne.n	800aaa6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa16:	9300      	str	r3, [sp, #0]
 800aa18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 f857 	bl	800aad4 <UART_WaitOnFlagUntilTimeout>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d03c      	beq.n	800aaa6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa34:	e853 3f00 	ldrex	r3, [r3]
 800aa38:	623b      	str	r3, [r7, #32]
   return(result);
 800aa3a:	6a3b      	ldr	r3, [r7, #32]
 800aa3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa40:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	461a      	mov	r2, r3
 800aa48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa4a:	633b      	str	r3, [r7, #48]	; 0x30
 800aa4c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa52:	e841 2300 	strex	r3, r2, [r1]
 800aa56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d1e6      	bne.n	800aa2c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	3308      	adds	r3, #8
 800aa64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	e853 3f00 	ldrex	r3, [r3]
 800aa6c:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f023 0301 	bic.w	r3, r3, #1
 800aa74:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	3308      	adds	r3, #8
 800aa7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa7e:	61fa      	str	r2, [r7, #28]
 800aa80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa82:	69b9      	ldr	r1, [r7, #24]
 800aa84:	69fa      	ldr	r2, [r7, #28]
 800aa86:	e841 2300 	strex	r3, r2, [r1]
 800aa8a:	617b      	str	r3, [r7, #20]
   return(result);
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d1e5      	bne.n	800aa5e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2220      	movs	r2, #32
 800aa96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aaa2:	2303      	movs	r3, #3
 800aaa4:	e012      	b.n	800aacc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2220      	movs	r2, #32
 800aaaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2220      	movs	r2, #32
 800aab2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aaca:	2300      	movs	r3, #0
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3758      	adds	r7, #88	; 0x58
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	603b      	str	r3, [r7, #0]
 800aae0:	4613      	mov	r3, r2
 800aae2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aae4:	e049      	b.n	800ab7a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aae6:	69bb      	ldr	r3, [r7, #24]
 800aae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaec:	d045      	beq.n	800ab7a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aaee:	f7f7 f803 	bl	8001af8 <HAL_GetTick>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	1ad3      	subs	r3, r2, r3
 800aaf8:	69ba      	ldr	r2, [r7, #24]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d302      	bcc.n	800ab04 <UART_WaitOnFlagUntilTimeout+0x30>
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d101      	bne.n	800ab08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ab04:	2303      	movs	r3, #3
 800ab06:	e048      	b.n	800ab9a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f003 0304 	and.w	r3, r3, #4
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d031      	beq.n	800ab7a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	69db      	ldr	r3, [r3, #28]
 800ab1c:	f003 0308 	and.w	r3, r3, #8
 800ab20:	2b08      	cmp	r3, #8
 800ab22:	d110      	bne.n	800ab46 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2208      	movs	r2, #8
 800ab2a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	f000 f95b 	bl	800ade8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2208      	movs	r2, #8
 800ab36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ab42:	2301      	movs	r3, #1
 800ab44:	e029      	b.n	800ab9a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	69db      	ldr	r3, [r3, #28]
 800ab4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab54:	d111      	bne.n	800ab7a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ab60:	68f8      	ldr	r0, [r7, #12]
 800ab62:	f000 f941 	bl	800ade8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2220      	movs	r2, #32
 800ab6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2200      	movs	r2, #0
 800ab72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ab76:	2303      	movs	r3, #3
 800ab78:	e00f      	b.n	800ab9a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	69da      	ldr	r2, [r3, #28]
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	4013      	ands	r3, r2
 800ab84:	68ba      	ldr	r2, [r7, #8]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	bf0c      	ite	eq
 800ab8a:	2301      	moveq	r3, #1
 800ab8c:	2300      	movne	r3, #0
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	461a      	mov	r2, r3
 800ab92:	79fb      	ldrb	r3, [r7, #7]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d0a6      	beq.n	800aae6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
	...

0800aba4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b0a3      	sub	sp, #140	; 0x8c
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	60b9      	str	r1, [r7, #8]
 800abae:	4613      	mov	r3, r2
 800abb0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	68ba      	ldr	r2, [r7, #8]
 800abb6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	88fa      	ldrh	r2, [r7, #6]
 800abbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	88fa      	ldrh	r2, [r7, #6]
 800abc4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2200      	movs	r2, #0
 800abcc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abd6:	d10e      	bne.n	800abf6 <UART_Start_Receive_IT+0x52>
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	691b      	ldr	r3, [r3, #16]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d105      	bne.n	800abec <UART_Start_Receive_IT+0x48>
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800abe6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800abea:	e02d      	b.n	800ac48 <UART_Start_Receive_IT+0xa4>
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	22ff      	movs	r2, #255	; 0xff
 800abf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800abf4:	e028      	b.n	800ac48 <UART_Start_Receive_IT+0xa4>
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	689b      	ldr	r3, [r3, #8]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d10d      	bne.n	800ac1a <UART_Start_Receive_IT+0x76>
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	691b      	ldr	r3, [r3, #16]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d104      	bne.n	800ac10 <UART_Start_Receive_IT+0x6c>
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	22ff      	movs	r2, #255	; 0xff
 800ac0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac0e:	e01b      	b.n	800ac48 <UART_Start_Receive_IT+0xa4>
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	227f      	movs	r2, #127	; 0x7f
 800ac14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac18:	e016      	b.n	800ac48 <UART_Start_Receive_IT+0xa4>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac22:	d10d      	bne.n	800ac40 <UART_Start_Receive_IT+0x9c>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d104      	bne.n	800ac36 <UART_Start_Receive_IT+0x92>
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	227f      	movs	r2, #127	; 0x7f
 800ac30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac34:	e008      	b.n	800ac48 <UART_Start_Receive_IT+0xa4>
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	223f      	movs	r2, #63	; 0x3f
 800ac3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac3e:	e003      	b.n	800ac48 <UART_Start_Receive_IT+0xa4>
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2200      	movs	r2, #0
 800ac44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2222      	movs	r2, #34	; 0x22
 800ac54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	3308      	adds	r3, #8
 800ac5e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac62:	e853 3f00 	ldrex	r3, [r3]
 800ac66:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ac68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac6a:	f043 0301 	orr.w	r3, r3, #1
 800ac6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	3308      	adds	r3, #8
 800ac78:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ac7c:	673a      	str	r2, [r7, #112]	; 0x70
 800ac7e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac80:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ac82:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ac84:	e841 2300 	strex	r3, r2, [r1]
 800ac88:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800ac8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d1e3      	bne.n	800ac58 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac98:	d14f      	bne.n	800ad3a <UART_Start_Receive_IT+0x196>
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aca0:	88fa      	ldrh	r2, [r7, #6]
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d349      	bcc.n	800ad3a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acae:	d107      	bne.n	800acc0 <UART_Start_Receive_IT+0x11c>
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	691b      	ldr	r3, [r3, #16]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d103      	bne.n	800acc0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	4a47      	ldr	r2, [pc, #284]	; (800add8 <UART_Start_Receive_IT+0x234>)
 800acbc:	675a      	str	r2, [r3, #116]	; 0x74
 800acbe:	e002      	b.n	800acc6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	4a46      	ldr	r2, [pc, #280]	; (800addc <UART_Start_Receive_IT+0x238>)
 800acc4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d01a      	beq.n	800ad04 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acd6:	e853 3f00 	ldrex	r3, [r3]
 800acda:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800acdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ace2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	461a      	mov	r2, r3
 800acec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800acf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800acf2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800acf6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800acf8:	e841 2300 	strex	r3, r2, [r1]
 800acfc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800acfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d1e4      	bne.n	800acce <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	3308      	adds	r3, #8
 800ad0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad0e:	e853 3f00 	ldrex	r3, [r3]
 800ad12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	3308      	adds	r3, #8
 800ad22:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ad24:	64ba      	str	r2, [r7, #72]	; 0x48
 800ad26:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad28:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ad2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad2c:	e841 2300 	strex	r3, r2, [r1]
 800ad30:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ad32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d1e5      	bne.n	800ad04 <UART_Start_Receive_IT+0x160>
 800ad38:	e046      	b.n	800adc8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	689b      	ldr	r3, [r3, #8]
 800ad3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad42:	d107      	bne.n	800ad54 <UART_Start_Receive_IT+0x1b0>
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d103      	bne.n	800ad54 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	4a24      	ldr	r2, [pc, #144]	; (800ade0 <UART_Start_Receive_IT+0x23c>)
 800ad50:	675a      	str	r2, [r3, #116]	; 0x74
 800ad52:	e002      	b.n	800ad5a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	4a23      	ldr	r2, [pc, #140]	; (800ade4 <UART_Start_Receive_IT+0x240>)
 800ad58:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	691b      	ldr	r3, [r3, #16]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d019      	beq.n	800ad96 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6a:	e853 3f00 	ldrex	r3, [r3]
 800ad6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad72:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ad76:	677b      	str	r3, [r7, #116]	; 0x74
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad80:	637b      	str	r3, [r7, #52]	; 0x34
 800ad82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad88:	e841 2300 	strex	r3, r2, [r1]
 800ad8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ad8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d1e6      	bne.n	800ad62 <UART_Start_Receive_IT+0x1be>
 800ad94:	e018      	b.n	800adc8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	e853 3f00 	ldrex	r3, [r3]
 800ada2:	613b      	str	r3, [r7, #16]
   return(result);
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	f043 0320 	orr.w	r3, r3, #32
 800adaa:	67bb      	str	r3, [r7, #120]	; 0x78
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	461a      	mov	r2, r3
 800adb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adb4:	623b      	str	r3, [r7, #32]
 800adb6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb8:	69f9      	ldr	r1, [r7, #28]
 800adba:	6a3a      	ldr	r2, [r7, #32]
 800adbc:	e841 2300 	strex	r3, r2, [r1]
 800adc0:	61bb      	str	r3, [r7, #24]
   return(result);
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d1e6      	bne.n	800ad96 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800adc8:	2300      	movs	r3, #0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	378c      	adds	r7, #140	; 0x8c
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop
 800add8:	0800b609 	.word	0x0800b609
 800addc:	0800b2a9 	.word	0x0800b2a9
 800ade0:	0800b0f1 	.word	0x0800b0f1
 800ade4:	0800af39 	.word	0x0800af39

0800ade8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ade8:	b480      	push	{r7}
 800adea:	b095      	sub	sp, #84	; 0x54
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf8:	e853 3f00 	ldrex	r3, [r3]
 800adfc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800adfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae04:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae0e:	643b      	str	r3, [r7, #64]	; 0x40
 800ae10:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ae14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae16:	e841 2300 	strex	r3, r2, [r1]
 800ae1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d1e6      	bne.n	800adf0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	3308      	adds	r3, #8
 800ae28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2a:	6a3b      	ldr	r3, [r7, #32]
 800ae2c:	e853 3f00 	ldrex	r3, [r3]
 800ae30:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae32:	69fa      	ldr	r2, [r7, #28]
 800ae34:	4b1e      	ldr	r3, [pc, #120]	; (800aeb0 <UART_EndRxTransfer+0xc8>)
 800ae36:	4013      	ands	r3, r2
 800ae38:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	3308      	adds	r3, #8
 800ae40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae42:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae4a:	e841 2300 	strex	r3, r2, [r1]
 800ae4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d1e5      	bne.n	800ae22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d118      	bne.n	800ae90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	e853 3f00 	ldrex	r3, [r3]
 800ae6a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	f023 0310 	bic.w	r3, r3, #16
 800ae72:	647b      	str	r3, [r7, #68]	; 0x44
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	461a      	mov	r2, r3
 800ae7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae7c:	61bb      	str	r3, [r7, #24]
 800ae7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae80:	6979      	ldr	r1, [r7, #20]
 800ae82:	69ba      	ldr	r2, [r7, #24]
 800ae84:	e841 2300 	strex	r3, r2, [r1]
 800ae88:	613b      	str	r3, [r7, #16]
   return(result);
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d1e6      	bne.n	800ae5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2220      	movs	r2, #32
 800ae94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800aea4:	bf00      	nop
 800aea6:	3754      	adds	r7, #84	; 0x54
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr
 800aeb0:	effffffe 	.word	0xeffffffe

0800aeb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2200      	movs	r2, #0
 800aec6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2200      	movs	r2, #0
 800aece:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aed2:	68f8      	ldr	r0, [r7, #12]
 800aed4:	f7fe fe30 	bl	8009b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aed8:	bf00      	nop
 800aeda:	3710      	adds	r7, #16
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b088      	sub	sp, #32
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	e853 3f00 	ldrex	r3, [r3]
 800aef4:	60bb      	str	r3, [r7, #8]
   return(result);
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aefc:	61fb      	str	r3, [r7, #28]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	461a      	mov	r2, r3
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	61bb      	str	r3, [r7, #24]
 800af08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0a:	6979      	ldr	r1, [r7, #20]
 800af0c:	69ba      	ldr	r2, [r7, #24]
 800af0e:	e841 2300 	strex	r3, r2, [r1]
 800af12:	613b      	str	r3, [r7, #16]
   return(result);
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1e6      	bne.n	800aee8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2220      	movs	r2, #32
 800af1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f7fe fdf1 	bl	8009b10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af2e:	bf00      	nop
 800af30:	3720      	adds	r7, #32
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
	...

0800af38 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b09c      	sub	sp, #112	; 0x70
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800af46:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af50:	2b22      	cmp	r3, #34	; 0x22
 800af52:	f040 80be 	bne.w	800b0d2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800af60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800af64:	b2d9      	uxtb	r1, r3
 800af66:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800af6a:	b2da      	uxtb	r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af70:	400a      	ands	r2, r1
 800af72:	b2d2      	uxtb	r2, r2
 800af74:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af7a:	1c5a      	adds	r2, r3, #1
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af86:	b29b      	uxth	r3, r3
 800af88:	3b01      	subs	r3, #1
 800af8a:	b29a      	uxth	r2, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af98:	b29b      	uxth	r3, r3
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	f040 80a1 	bne.w	800b0e2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afa8:	e853 3f00 	ldrex	r3, [r3]
 800afac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800afae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800afb4:	66bb      	str	r3, [r7, #104]	; 0x68
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	461a      	mov	r2, r3
 800afbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800afbe:	65bb      	str	r3, [r7, #88]	; 0x58
 800afc0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800afc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800afc6:	e841 2300 	strex	r3, r2, [r1]
 800afca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800afcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1e6      	bne.n	800afa0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	3308      	adds	r3, #8
 800afd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afdc:	e853 3f00 	ldrex	r3, [r3]
 800afe0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800afe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe4:	f023 0301 	bic.w	r3, r3, #1
 800afe8:	667b      	str	r3, [r7, #100]	; 0x64
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	3308      	adds	r3, #8
 800aff0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aff2:	647a      	str	r2, [r7, #68]	; 0x44
 800aff4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aff8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800affa:	e841 2300 	strex	r3, r2, [r1]
 800affe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b002:	2b00      	cmp	r3, #0
 800b004:	d1e5      	bne.n	800afd2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2220      	movs	r2, #32
 800b00a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a33      	ldr	r2, [pc, #204]	; (800b0ec <UART_RxISR_8BIT+0x1b4>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d01f      	beq.n	800b064 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d018      	beq.n	800b064 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03a:	e853 3f00 	ldrex	r3, [r3]
 800b03e:	623b      	str	r3, [r7, #32]
   return(result);
 800b040:	6a3b      	ldr	r3, [r7, #32]
 800b042:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b046:	663b      	str	r3, [r7, #96]	; 0x60
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	461a      	mov	r2, r3
 800b04e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b050:	633b      	str	r3, [r7, #48]	; 0x30
 800b052:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b054:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b058:	e841 2300 	strex	r3, r2, [r1]
 800b05c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b060:	2b00      	cmp	r3, #0
 800b062:	d1e6      	bne.n	800b032 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d12e      	bne.n	800b0ca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	e853 3f00 	ldrex	r3, [r3]
 800b07e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f023 0310 	bic.w	r3, r3, #16
 800b086:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	461a      	mov	r2, r3
 800b08e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b090:	61fb      	str	r3, [r7, #28]
 800b092:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b094:	69b9      	ldr	r1, [r7, #24]
 800b096:	69fa      	ldr	r2, [r7, #28]
 800b098:	e841 2300 	strex	r3, r2, [r1]
 800b09c:	617b      	str	r3, [r7, #20]
   return(result);
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1e6      	bne.n	800b072 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	69db      	ldr	r3, [r3, #28]
 800b0aa:	f003 0310 	and.w	r3, r3, #16
 800b0ae:	2b10      	cmp	r3, #16
 800b0b0:	d103      	bne.n	800b0ba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2210      	movs	r2, #16
 800b0b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f7fe fd42 	bl	8009b4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b0c8:	e00b      	b.n	800b0e2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f7fe fd2a 	bl	8009b24 <HAL_UART_RxCpltCallback>
}
 800b0d0:	e007      	b.n	800b0e2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	699a      	ldr	r2, [r3, #24]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f042 0208 	orr.w	r2, r2, #8
 800b0e0:	619a      	str	r2, [r3, #24]
}
 800b0e2:	bf00      	nop
 800b0e4:	3770      	adds	r7, #112	; 0x70
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	58000c00 	.word	0x58000c00

0800b0f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b09c      	sub	sp, #112	; 0x70
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b0fe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b108:	2b22      	cmp	r3, #34	; 0x22
 800b10a:	f040 80be 	bne.w	800b28a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b114:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b11c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b11e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800b122:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b126:	4013      	ands	r3, r2
 800b128:	b29a      	uxth	r2, r3
 800b12a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b12c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b132:	1c9a      	adds	r2, r3, #2
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b13e:	b29b      	uxth	r3, r3
 800b140:	3b01      	subs	r3, #1
 800b142:	b29a      	uxth	r2, r3
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b150:	b29b      	uxth	r3, r3
 800b152:	2b00      	cmp	r3, #0
 800b154:	f040 80a1 	bne.w	800b29a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b160:	e853 3f00 	ldrex	r3, [r3]
 800b164:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b168:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b16c:	667b      	str	r3, [r7, #100]	; 0x64
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	461a      	mov	r2, r3
 800b174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b176:	657b      	str	r3, [r7, #84]	; 0x54
 800b178:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b17a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b17c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b17e:	e841 2300 	strex	r3, r2, [r1]
 800b182:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b186:	2b00      	cmp	r3, #0
 800b188:	d1e6      	bne.n	800b158 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	3308      	adds	r3, #8
 800b190:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b194:	e853 3f00 	ldrex	r3, [r3]
 800b198:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b19c:	f023 0301 	bic.w	r3, r3, #1
 800b1a0:	663b      	str	r3, [r7, #96]	; 0x60
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	3308      	adds	r3, #8
 800b1a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b1aa:	643a      	str	r2, [r7, #64]	; 0x40
 800b1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b1b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b1b2:	e841 2300 	strex	r3, r2, [r1]
 800b1b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d1e5      	bne.n	800b18a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2220      	movs	r2, #32
 800b1c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4a33      	ldr	r2, [pc, #204]	; (800b2a4 <UART_RxISR_16BIT+0x1b4>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d01f      	beq.n	800b21c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d018      	beq.n	800b21c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f0:	6a3b      	ldr	r3, [r7, #32]
 800b1f2:	e853 3f00 	ldrex	r3, [r3]
 800b1f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b1fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	461a      	mov	r2, r3
 800b206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b20a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b20c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b20e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b210:	e841 2300 	strex	r3, r2, [r1]
 800b214:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d1e6      	bne.n	800b1ea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b220:	2b01      	cmp	r3, #1
 800b222:	d12e      	bne.n	800b282 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	e853 3f00 	ldrex	r3, [r3]
 800b236:	60bb      	str	r3, [r7, #8]
   return(result);
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	f023 0310 	bic.w	r3, r3, #16
 800b23e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	461a      	mov	r2, r3
 800b246:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b248:	61bb      	str	r3, [r7, #24]
 800b24a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b24c:	6979      	ldr	r1, [r7, #20]
 800b24e:	69ba      	ldr	r2, [r7, #24]
 800b250:	e841 2300 	strex	r3, r2, [r1]
 800b254:	613b      	str	r3, [r7, #16]
   return(result);
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d1e6      	bne.n	800b22a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	69db      	ldr	r3, [r3, #28]
 800b262:	f003 0310 	and.w	r3, r3, #16
 800b266:	2b10      	cmp	r3, #16
 800b268:	d103      	bne.n	800b272 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	2210      	movs	r2, #16
 800b270:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b278:	4619      	mov	r1, r3
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f7fe fc66 	bl	8009b4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b280:	e00b      	b.n	800b29a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f7fe fc4e 	bl	8009b24 <HAL_UART_RxCpltCallback>
}
 800b288:	e007      	b.n	800b29a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	699a      	ldr	r2, [r3, #24]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f042 0208 	orr.w	r2, r2, #8
 800b298:	619a      	str	r2, [r3, #24]
}
 800b29a:	bf00      	nop
 800b29c:	3770      	adds	r7, #112	; 0x70
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	58000c00 	.word	0x58000c00

0800b2a8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b0ac      	sub	sp, #176	; 0xb0
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b2b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	69db      	ldr	r3, [r3, #28]
 800b2c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2de:	2b22      	cmp	r3, #34	; 0x22
 800b2e0:	f040 8180 	bne.w	800b5e4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b2ea:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b2ee:	e123      	b.n	800b538 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b2fa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b2fe:	b2d9      	uxtb	r1, r3
 800b300:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b304:	b2da      	uxtb	r2, r3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b30a:	400a      	ands	r2, r1
 800b30c:	b2d2      	uxtb	r2, r2
 800b30e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b314:	1c5a      	adds	r2, r3, #1
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b320:	b29b      	uxth	r3, r3
 800b322:	3b01      	subs	r3, #1
 800b324:	b29a      	uxth	r2, r3
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	69db      	ldr	r3, [r3, #28]
 800b332:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b33a:	f003 0307 	and.w	r3, r3, #7
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d053      	beq.n	800b3ea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b346:	f003 0301 	and.w	r3, r3, #1
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d011      	beq.n	800b372 <UART_RxISR_8BIT_FIFOEN+0xca>
 800b34e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00b      	beq.n	800b372 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	2201      	movs	r2, #1
 800b360:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b368:	f043 0201 	orr.w	r2, r3, #1
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b372:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b376:	f003 0302 	and.w	r3, r3, #2
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d011      	beq.n	800b3a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b37e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b382:	f003 0301 	and.w	r3, r3, #1
 800b386:	2b00      	cmp	r3, #0
 800b388:	d00b      	beq.n	800b3a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	2202      	movs	r2, #2
 800b390:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b398:	f043 0204 	orr.w	r2, r3, #4
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b3a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3a6:	f003 0304 	and.w	r3, r3, #4
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d011      	beq.n	800b3d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b3ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b3b2:	f003 0301 	and.w	r3, r3, #1
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d00b      	beq.n	800b3d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2204      	movs	r2, #4
 800b3c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3c8:	f043 0202 	orr.w	r2, r3, #2
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d006      	beq.n	800b3ea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f7fe fbab 	bl	8009b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	f040 80a0 	bne.w	800b538 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b400:	e853 3f00 	ldrex	r3, [r3]
 800b404:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800b406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b40c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	461a      	mov	r2, r3
 800b416:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b41a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b41c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b41e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b420:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b422:	e841 2300 	strex	r3, r2, [r1]
 800b426:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800b428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d1e4      	bne.n	800b3f8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	3308      	adds	r3, #8
 800b434:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b438:	e853 3f00 	ldrex	r3, [r3]
 800b43c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b43e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b440:	4b6e      	ldr	r3, [pc, #440]	; (800b5fc <UART_RxISR_8BIT_FIFOEN+0x354>)
 800b442:	4013      	ands	r3, r2
 800b444:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	3308      	adds	r3, #8
 800b44e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b452:	66ba      	str	r2, [r7, #104]	; 0x68
 800b454:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b456:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b458:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b45a:	e841 2300 	strex	r3, r2, [r1]
 800b45e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b460:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b462:	2b00      	cmp	r3, #0
 800b464:	d1e3      	bne.n	800b42e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2220      	movs	r2, #32
 800b46a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2200      	movs	r2, #0
 800b478:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a60      	ldr	r2, [pc, #384]	; (800b600 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d021      	beq.n	800b4c8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d01a      	beq.n	800b4c8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b49a:	e853 3f00 	ldrex	r3, [r3]
 800b49e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b4a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b4a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b4b4:	657b      	str	r3, [r7, #84]	; 0x54
 800b4b6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b4ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b4bc:	e841 2300 	strex	r3, r2, [r1]
 800b4c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b4c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d1e4      	bne.n	800b492 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d130      	bne.n	800b532 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4de:	e853 3f00 	ldrex	r3, [r3]
 800b4e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e6:	f023 0310 	bic.w	r3, r3, #16
 800b4ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4f8:	643b      	str	r3, [r7, #64]	; 0x40
 800b4fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b4fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b500:	e841 2300 	strex	r3, r2, [r1]
 800b504:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d1e4      	bne.n	800b4d6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	69db      	ldr	r3, [r3, #28]
 800b512:	f003 0310 	and.w	r3, r3, #16
 800b516:	2b10      	cmp	r3, #16
 800b518:	d103      	bne.n	800b522 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2210      	movs	r2, #16
 800b520:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b528:	4619      	mov	r1, r3
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f7fe fb0e 	bl	8009b4c <HAL_UARTEx_RxEventCallback>
 800b530:	e002      	b.n	800b538 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f7fe faf6 	bl	8009b24 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b538:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d006      	beq.n	800b54e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800b540:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b544:	f003 0320 	and.w	r3, r3, #32
 800b548:	2b00      	cmp	r3, #0
 800b54a:	f47f aed1 	bne.w	800b2f0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b554:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b558:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d049      	beq.n	800b5f4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b566:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d242      	bcs.n	800b5f4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	3308      	adds	r3, #8
 800b574:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b576:	6a3b      	ldr	r3, [r7, #32]
 800b578:	e853 3f00 	ldrex	r3, [r3]
 800b57c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b57e:	69fb      	ldr	r3, [r7, #28]
 800b580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b584:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	3308      	adds	r3, #8
 800b58e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b592:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b594:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b596:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b59a:	e841 2300 	strex	r3, r2, [r1]
 800b59e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d1e3      	bne.n	800b56e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	4a16      	ldr	r2, [pc, #88]	; (800b604 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b5aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	e853 3f00 	ldrex	r3, [r3]
 800b5b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	f043 0320 	orr.w	r3, r3, #32
 800b5c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b5ce:	61bb      	str	r3, [r7, #24]
 800b5d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d2:	6979      	ldr	r1, [r7, #20]
 800b5d4:	69ba      	ldr	r2, [r7, #24]
 800b5d6:	e841 2300 	strex	r3, r2, [r1]
 800b5da:	613b      	str	r3, [r7, #16]
   return(result);
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d1e4      	bne.n	800b5ac <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b5e2:	e007      	b.n	800b5f4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	699a      	ldr	r2, [r3, #24]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f042 0208 	orr.w	r2, r2, #8
 800b5f2:	619a      	str	r2, [r3, #24]
}
 800b5f4:	bf00      	nop
 800b5f6:	37b0      	adds	r7, #176	; 0xb0
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	effffffe 	.word	0xeffffffe
 800b600:	58000c00 	.word	0x58000c00
 800b604:	0800af39 	.word	0x0800af39

0800b608 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b0ae      	sub	sp, #184	; 0xb8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b616:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	69db      	ldr	r3, [r3, #28]
 800b620:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	689b      	ldr	r3, [r3, #8]
 800b634:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b63e:	2b22      	cmp	r3, #34	; 0x22
 800b640:	f040 8184 	bne.w	800b94c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b64a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b64e:	e127      	b.n	800b8a0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b656:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b65e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b662:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800b666:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800b66a:	4013      	ands	r3, r2
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b672:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b678:	1c9a      	adds	r2, r3, #2
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b684:	b29b      	uxth	r3, r3
 800b686:	3b01      	subs	r3, #1
 800b688:	b29a      	uxth	r2, r3
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	69db      	ldr	r3, [r3, #28]
 800b696:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b69a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b69e:	f003 0307 	and.w	r3, r3, #7
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d053      	beq.n	800b74e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b6a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b6aa:	f003 0301 	and.w	r3, r3, #1
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d011      	beq.n	800b6d6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b6b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b6b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00b      	beq.n	800b6d6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6cc:	f043 0201 	orr.w	r2, r3, #1
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b6d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b6da:	f003 0302 	and.w	r3, r3, #2
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d011      	beq.n	800b706 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b6e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b6e6:	f003 0301 	and.w	r3, r3, #1
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00b      	beq.n	800b706 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	2202      	movs	r2, #2
 800b6f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6fc:	f043 0204 	orr.w	r2, r3, #4
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b706:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b70a:	f003 0304 	and.w	r3, r3, #4
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d011      	beq.n	800b736 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b712:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b716:	f003 0301 	and.w	r3, r3, #1
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d00b      	beq.n	800b736 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2204      	movs	r2, #4
 800b724:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b72c:	f043 0202 	orr.w	r2, r3, #2
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d006      	beq.n	800b74e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f7fe f9f9 	bl	8009b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b754:	b29b      	uxth	r3, r3
 800b756:	2b00      	cmp	r3, #0
 800b758:	f040 80a2 	bne.w	800b8a0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b764:	e853 3f00 	ldrex	r3, [r3]
 800b768:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b76a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b76c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b770:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	461a      	mov	r2, r3
 800b77a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b77e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b782:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b784:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b786:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b78a:	e841 2300 	strex	r3, r2, [r1]
 800b78e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b790:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b792:	2b00      	cmp	r3, #0
 800b794:	d1e2      	bne.n	800b75c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	3308      	adds	r3, #8
 800b79c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b79e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7a0:	e853 3f00 	ldrex	r3, [r3]
 800b7a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b7a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b7a8:	4b6e      	ldr	r3, [pc, #440]	; (800b964 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	3308      	adds	r3, #8
 800b7b6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b7ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b7bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b7c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b7c2:	e841 2300 	strex	r3, r2, [r1]
 800b7c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b7c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d1e3      	bne.n	800b796 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2220      	movs	r2, #32
 800b7d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a60      	ldr	r2, [pc, #384]	; (800b968 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d021      	beq.n	800b830 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d01a      	beq.n	800b830 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b802:	e853 3f00 	ldrex	r3, [r3]
 800b806:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b80a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b80e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	461a      	mov	r2, r3
 800b818:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b81c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b81e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b820:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b822:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b824:	e841 2300 	strex	r3, r2, [r1]
 800b828:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b82a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1e4      	bne.n	800b7fa <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b834:	2b01      	cmp	r3, #1
 800b836:	d130      	bne.n	800b89a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b846:	e853 3f00 	ldrex	r3, [r3]
 800b84a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b84e:	f023 0310 	bic.w	r3, r3, #16
 800b852:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	461a      	mov	r2, r3
 800b85c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b860:	647b      	str	r3, [r7, #68]	; 0x44
 800b862:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b864:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b866:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b868:	e841 2300 	strex	r3, r2, [r1]
 800b86c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b86e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b870:	2b00      	cmp	r3, #0
 800b872:	d1e4      	bne.n	800b83e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	69db      	ldr	r3, [r3, #28]
 800b87a:	f003 0310 	and.w	r3, r3, #16
 800b87e:	2b10      	cmp	r3, #16
 800b880:	d103      	bne.n	800b88a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2210      	movs	r2, #16
 800b888:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b890:	4619      	mov	r1, r3
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f7fe f95a 	bl	8009b4c <HAL_UARTEx_RxEventCallback>
 800b898:	e002      	b.n	800b8a0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f7fe f942 	bl	8009b24 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b8a0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d006      	beq.n	800b8b6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800b8a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b8ac:	f003 0320 	and.w	r3, r3, #32
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	f47f aecd 	bne.w	800b650 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b8bc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b8c0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d049      	beq.n	800b95c <UART_RxISR_16BIT_FIFOEN+0x354>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b8ce:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d242      	bcs.n	800b95c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	3308      	adds	r3, #8
 800b8dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	e853 3f00 	ldrex	r3, [r3]
 800b8e4:	623b      	str	r3, [r7, #32]
   return(result);
 800b8e6:	6a3b      	ldr	r3, [r7, #32]
 800b8e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	3308      	adds	r3, #8
 800b8f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b8fa:	633a      	str	r2, [r7, #48]	; 0x30
 800b8fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b902:	e841 2300 	strex	r3, r2, [r1]
 800b906:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d1e3      	bne.n	800b8d6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	4a16      	ldr	r2, [pc, #88]	; (800b96c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b912:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	e853 3f00 	ldrex	r3, [r3]
 800b920:	60fb      	str	r3, [r7, #12]
   return(result);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f043 0320 	orr.w	r3, r3, #32
 800b928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	461a      	mov	r2, r3
 800b932:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b936:	61fb      	str	r3, [r7, #28]
 800b938:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b93a:	69b9      	ldr	r1, [r7, #24]
 800b93c:	69fa      	ldr	r2, [r7, #28]
 800b93e:	e841 2300 	strex	r3, r2, [r1]
 800b942:	617b      	str	r3, [r7, #20]
   return(result);
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d1e4      	bne.n	800b914 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b94a:	e007      	b.n	800b95c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	699a      	ldr	r2, [r3, #24]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f042 0208 	orr.w	r2, r2, #8
 800b95a:	619a      	str	r2, [r3, #24]
}
 800b95c:	bf00      	nop
 800b95e:	37b8      	adds	r7, #184	; 0xb8
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}
 800b964:	effffffe 	.word	0xeffffffe
 800b968:	58000c00 	.word	0x58000c00
 800b96c:	0800b0f1 	.word	0x0800b0f1

0800b970 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b970:	b480      	push	{r7}
 800b972:	b083      	sub	sp, #12
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b978:	bf00      	nop
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b984:	b480      	push	{r7}
 800b986:	b083      	sub	sp, #12
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b98c:	bf00      	nop
 800b98e:	370c      	adds	r7, #12
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b9a0:	bf00      	nop
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d101      	bne.n	800b9c2 <HAL_UARTEx_DisableFifoMode+0x16>
 800b9be:	2302      	movs	r3, #2
 800b9c0:	e027      	b.n	800ba12 <HAL_UARTEx_DisableFifoMode+0x66>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2224      	movs	r2, #36	; 0x24
 800b9ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f022 0201 	bic.w	r2, r2, #1
 800b9e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b9f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2220      	movs	r2, #32
 800ba04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3714      	adds	r7, #20
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr

0800ba1e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b084      	sub	sp, #16
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
 800ba26:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d101      	bne.n	800ba36 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ba32:	2302      	movs	r3, #2
 800ba34:	e02d      	b.n	800ba92 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2224      	movs	r2, #36	; 0x24
 800ba42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f022 0201 	bic.w	r2, r2, #1
 800ba5c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	689b      	ldr	r3, [r3, #8]
 800ba64:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	683a      	ldr	r2, [r7, #0]
 800ba6e:	430a      	orrs	r2, r1
 800ba70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 f850 	bl	800bb18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2220      	movs	r2, #32
 800ba84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ba90:	2300      	movs	r3, #0
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b084      	sub	sp, #16
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
 800baa2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d101      	bne.n	800bab2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800baae:	2302      	movs	r3, #2
 800bab0:	e02d      	b.n	800bb0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2201      	movs	r2, #1
 800bab6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2224      	movs	r2, #36	; 0x24
 800babe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f022 0201 	bic.w	r2, r2, #1
 800bad8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	689b      	ldr	r3, [r3, #8]
 800bae0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	683a      	ldr	r2, [r7, #0]
 800baea:	430a      	orrs	r2, r1
 800baec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f812 	bl	800bb18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2220      	movs	r2, #32
 800bb00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bb0c:	2300      	movs	r3, #0
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
	...

0800bb18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b085      	sub	sp, #20
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d108      	bne.n	800bb3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb38:	e031      	b.n	800bb9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb3a:	2310      	movs	r3, #16
 800bb3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb3e:	2310      	movs	r3, #16
 800bb40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	0e5b      	lsrs	r3, r3, #25
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	f003 0307 	and.w	r3, r3, #7
 800bb50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	0f5b      	lsrs	r3, r3, #29
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	f003 0307 	and.w	r3, r3, #7
 800bb60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb62:	7bbb      	ldrb	r3, [r7, #14]
 800bb64:	7b3a      	ldrb	r2, [r7, #12]
 800bb66:	4911      	ldr	r1, [pc, #68]	; (800bbac <UARTEx_SetNbDataToProcess+0x94>)
 800bb68:	5c8a      	ldrb	r2, [r1, r2]
 800bb6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb6e:	7b3a      	ldrb	r2, [r7, #12]
 800bb70:	490f      	ldr	r1, [pc, #60]	; (800bbb0 <UARTEx_SetNbDataToProcess+0x98>)
 800bb72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb74:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb78:	b29a      	uxth	r2, r3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb80:	7bfb      	ldrb	r3, [r7, #15]
 800bb82:	7b7a      	ldrb	r2, [r7, #13]
 800bb84:	4909      	ldr	r1, [pc, #36]	; (800bbac <UARTEx_SetNbDataToProcess+0x94>)
 800bb86:	5c8a      	ldrb	r2, [r1, r2]
 800bb88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bb8c:	7b7a      	ldrb	r2, [r7, #13]
 800bb8e:	4908      	ldr	r1, [pc, #32]	; (800bbb0 <UARTEx_SetNbDataToProcess+0x98>)
 800bb90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb92:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb96:	b29a      	uxth	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bb9e:	bf00      	nop
 800bba0:	3714      	adds	r7, #20
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	080158c8 	.word	0x080158c8
 800bbb0:	080158d0 	.word	0x080158d0

0800bbb4 <__NVIC_SetPriority>:
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	4603      	mov	r3, r0
 800bbbc:	6039      	str	r1, [r7, #0]
 800bbbe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bbc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	db0a      	blt.n	800bbde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	b2da      	uxtb	r2, r3
 800bbcc:	490c      	ldr	r1, [pc, #48]	; (800bc00 <__NVIC_SetPriority+0x4c>)
 800bbce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bbd2:	0112      	lsls	r2, r2, #4
 800bbd4:	b2d2      	uxtb	r2, r2
 800bbd6:	440b      	add	r3, r1
 800bbd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bbdc:	e00a      	b.n	800bbf4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	b2da      	uxtb	r2, r3
 800bbe2:	4908      	ldr	r1, [pc, #32]	; (800bc04 <__NVIC_SetPriority+0x50>)
 800bbe4:	88fb      	ldrh	r3, [r7, #6]
 800bbe6:	f003 030f 	and.w	r3, r3, #15
 800bbea:	3b04      	subs	r3, #4
 800bbec:	0112      	lsls	r2, r2, #4
 800bbee:	b2d2      	uxtb	r2, r2
 800bbf0:	440b      	add	r3, r1
 800bbf2:	761a      	strb	r2, [r3, #24]
}
 800bbf4:	bf00      	nop
 800bbf6:	370c      	adds	r7, #12
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr
 800bc00:	e000e100 	.word	0xe000e100
 800bc04:	e000ed00 	.word	0xe000ed00

0800bc08 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bc0c:	4b05      	ldr	r3, [pc, #20]	; (800bc24 <SysTick_Handler+0x1c>)
 800bc0e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bc10:	f001 fd28 	bl	800d664 <xTaskGetSchedulerState>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d001      	beq.n	800bc1e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bc1a:	f002 fb0d 	bl	800e238 <xPortSysTickHandler>
  }
}
 800bc1e:	bf00      	nop
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	e000e010 	.word	0xe000e010

0800bc28 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bc2c:	2100      	movs	r1, #0
 800bc2e:	f06f 0004 	mvn.w	r0, #4
 800bc32:	f7ff ffbf 	bl	800bbb4 <__NVIC_SetPriority>
#endif
}
 800bc36:	bf00      	nop
 800bc38:	bd80      	pop	{r7, pc}
	...

0800bc3c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc42:	f3ef 8305 	mrs	r3, IPSR
 800bc46:	603b      	str	r3, [r7, #0]
  return(result);
 800bc48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d003      	beq.n	800bc56 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bc4e:	f06f 0305 	mvn.w	r3, #5
 800bc52:	607b      	str	r3, [r7, #4]
 800bc54:	e00c      	b.n	800bc70 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bc56:	4b0a      	ldr	r3, [pc, #40]	; (800bc80 <osKernelInitialize+0x44>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d105      	bne.n	800bc6a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bc5e:	4b08      	ldr	r3, [pc, #32]	; (800bc80 <osKernelInitialize+0x44>)
 800bc60:	2201      	movs	r2, #1
 800bc62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bc64:	2300      	movs	r3, #0
 800bc66:	607b      	str	r3, [r7, #4]
 800bc68:	e002      	b.n	800bc70 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bc6a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bc70:	687b      	ldr	r3, [r7, #4]
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	370c      	adds	r7, #12
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr
 800bc7e:	bf00      	nop
 800bc80:	24008568 	.word	0x24008568

0800bc84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc8a:	f3ef 8305 	mrs	r3, IPSR
 800bc8e:	603b      	str	r3, [r7, #0]
  return(result);
 800bc90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d003      	beq.n	800bc9e <osKernelStart+0x1a>
    stat = osErrorISR;
 800bc96:	f06f 0305 	mvn.w	r3, #5
 800bc9a:	607b      	str	r3, [r7, #4]
 800bc9c:	e010      	b.n	800bcc0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bc9e:	4b0b      	ldr	r3, [pc, #44]	; (800bccc <osKernelStart+0x48>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	d109      	bne.n	800bcba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bca6:	f7ff ffbf 	bl	800bc28 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bcaa:	4b08      	ldr	r3, [pc, #32]	; (800bccc <osKernelStart+0x48>)
 800bcac:	2202      	movs	r2, #2
 800bcae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bcb0:	f001 f87c 	bl	800cdac <vTaskStartScheduler>
      stat = osOK;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	607b      	str	r3, [r7, #4]
 800bcb8:	e002      	b.n	800bcc0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bcba:	f04f 33ff 	mov.w	r3, #4294967295
 800bcbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bcc0:	687b      	ldr	r3, [r7, #4]
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3708      	adds	r7, #8
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	24008568 	.word	0x24008568

0800bcd0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b08e      	sub	sp, #56	; 0x38
 800bcd4:	af04      	add	r7, sp, #16
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bce0:	f3ef 8305 	mrs	r3, IPSR
 800bce4:	617b      	str	r3, [r7, #20]
  return(result);
 800bce6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d17e      	bne.n	800bdea <osThreadNew+0x11a>
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d07b      	beq.n	800bdea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bcf2:	2380      	movs	r3, #128	; 0x80
 800bcf4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bcf6:	2318      	movs	r3, #24
 800bcf8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bcfe:	f04f 33ff 	mov.w	r3, #4294967295
 800bd02:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d045      	beq.n	800bd96 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d002      	beq.n	800bd18 <osThreadNew+0x48>
        name = attr->name;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	699b      	ldr	r3, [r3, #24]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d002      	beq.n	800bd26 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	699b      	ldr	r3, [r3, #24]
 800bd24:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bd26:	69fb      	ldr	r3, [r7, #28]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d008      	beq.n	800bd3e <osThreadNew+0x6e>
 800bd2c:	69fb      	ldr	r3, [r7, #28]
 800bd2e:	2b38      	cmp	r3, #56	; 0x38
 800bd30:	d805      	bhi.n	800bd3e <osThreadNew+0x6e>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	f003 0301 	and.w	r3, r3, #1
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d001      	beq.n	800bd42 <osThreadNew+0x72>
        return (NULL);
 800bd3e:	2300      	movs	r3, #0
 800bd40:	e054      	b.n	800bdec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	695b      	ldr	r3, [r3, #20]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d003      	beq.n	800bd52 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	695b      	ldr	r3, [r3, #20]
 800bd4e:	089b      	lsrs	r3, r3, #2
 800bd50:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	689b      	ldr	r3, [r3, #8]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d00e      	beq.n	800bd78 <osThreadNew+0xa8>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	2ba7      	cmp	r3, #167	; 0xa7
 800bd60:	d90a      	bls.n	800bd78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d006      	beq.n	800bd78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	695b      	ldr	r3, [r3, #20]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d002      	beq.n	800bd78 <osThreadNew+0xa8>
        mem = 1;
 800bd72:	2301      	movs	r3, #1
 800bd74:	61bb      	str	r3, [r7, #24]
 800bd76:	e010      	b.n	800bd9a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d10c      	bne.n	800bd9a <osThreadNew+0xca>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	68db      	ldr	r3, [r3, #12]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d108      	bne.n	800bd9a <osThreadNew+0xca>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	691b      	ldr	r3, [r3, #16]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d104      	bne.n	800bd9a <osThreadNew+0xca>
          mem = 0;
 800bd90:	2300      	movs	r3, #0
 800bd92:	61bb      	str	r3, [r7, #24]
 800bd94:	e001      	b.n	800bd9a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bd96:	2300      	movs	r3, #0
 800bd98:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bd9a:	69bb      	ldr	r3, [r7, #24]
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d110      	bne.n	800bdc2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bda8:	9202      	str	r2, [sp, #8]
 800bdaa:	9301      	str	r3, [sp, #4]
 800bdac:	69fb      	ldr	r3, [r7, #28]
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	6a3a      	ldr	r2, [r7, #32]
 800bdb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bdb6:	68f8      	ldr	r0, [r7, #12]
 800bdb8:	f000 fe0c 	bl	800c9d4 <xTaskCreateStatic>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	613b      	str	r3, [r7, #16]
 800bdc0:	e013      	b.n	800bdea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bdc2:	69bb      	ldr	r3, [r7, #24]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d110      	bne.n	800bdea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bdc8:	6a3b      	ldr	r3, [r7, #32]
 800bdca:	b29a      	uxth	r2, r3
 800bdcc:	f107 0310 	add.w	r3, r7, #16
 800bdd0:	9301      	str	r3, [sp, #4]
 800bdd2:	69fb      	ldr	r3, [r7, #28]
 800bdd4:	9300      	str	r3, [sp, #0]
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f000 fe57 	bl	800ca8e <xTaskCreate>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d001      	beq.n	800bdea <osThreadNew+0x11a>
            hTask = NULL;
 800bde6:	2300      	movs	r3, #0
 800bde8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bdea:	693b      	ldr	r3, [r7, #16]
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3728      	adds	r7, #40	; 0x28
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdfc:	f3ef 8305 	mrs	r3, IPSR
 800be00:	60bb      	str	r3, [r7, #8]
  return(result);
 800be02:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be04:	2b00      	cmp	r3, #0
 800be06:	d003      	beq.n	800be10 <osDelay+0x1c>
    stat = osErrorISR;
 800be08:	f06f 0305 	mvn.w	r3, #5
 800be0c:	60fb      	str	r3, [r7, #12]
 800be0e:	e007      	b.n	800be20 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800be10:	2300      	movs	r3, #0
 800be12:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d002      	beq.n	800be20 <osDelay+0x2c>
      vTaskDelay(ticks);
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 ff92 	bl	800cd44 <vTaskDelay>
    }
  }

  return (stat);
 800be20:	68fb      	ldr	r3, [r7, #12]
}
 800be22:	4618      	mov	r0, r3
 800be24:	3710      	adds	r7, #16
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
	...

0800be2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800be2c:	b480      	push	{r7}
 800be2e:	b085      	sub	sp, #20
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	4a07      	ldr	r2, [pc, #28]	; (800be58 <vApplicationGetIdleTaskMemory+0x2c>)
 800be3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	4a06      	ldr	r2, [pc, #24]	; (800be5c <vApplicationGetIdleTaskMemory+0x30>)
 800be42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2280      	movs	r2, #128	; 0x80
 800be48:	601a      	str	r2, [r3, #0]
}
 800be4a:	bf00      	nop
 800be4c:	3714      	adds	r7, #20
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr
 800be56:	bf00      	nop
 800be58:	2400856c 	.word	0x2400856c
 800be5c:	24008614 	.word	0x24008614

0800be60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800be60:	b480      	push	{r7}
 800be62:	b085      	sub	sp, #20
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	4a07      	ldr	r2, [pc, #28]	; (800be8c <vApplicationGetTimerTaskMemory+0x2c>)
 800be70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	4a06      	ldr	r2, [pc, #24]	; (800be90 <vApplicationGetTimerTaskMemory+0x30>)
 800be76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800be7e:	601a      	str	r2, [r3, #0]
}
 800be80:	bf00      	nop
 800be82:	3714      	adds	r7, #20
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr
 800be8c:	24008814 	.word	0x24008814
 800be90:	240088bc 	.word	0x240088bc

0800be94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f103 0208 	add.w	r2, r3, #8
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f04f 32ff 	mov.w	r2, #4294967295
 800beac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f103 0208 	add.w	r2, r3, #8
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f103 0208 	add.w	r2, r3, #8
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2200      	movs	r2, #0
 800bec6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bec8:	bf00      	nop
 800beca:	370c      	adds	r7, #12
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2200      	movs	r2, #0
 800bee0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bee2:	bf00      	nop
 800bee4:	370c      	adds	r7, #12
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr

0800beee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800beee:	b480      	push	{r7}
 800bef0:	b085      	sub	sp, #20
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
 800bef6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	689a      	ldr	r2, [r3, #8]
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	689b      	ldr	r3, [r3, #8]
 800bf10:	683a      	ldr	r2, [r7, #0]
 800bf12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	683a      	ldr	r2, [r7, #0]
 800bf18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	1c5a      	adds	r2, r3, #1
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	601a      	str	r2, [r3, #0]
}
 800bf2a:	bf00      	nop
 800bf2c:	3714      	adds	r7, #20
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr

0800bf36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf36:	b480      	push	{r7}
 800bf38:	b085      	sub	sp, #20
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	6078      	str	r0, [r7, #4]
 800bf3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf4c:	d103      	bne.n	800bf56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	691b      	ldr	r3, [r3, #16]
 800bf52:	60fb      	str	r3, [r7, #12]
 800bf54:	e00c      	b.n	800bf70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	3308      	adds	r3, #8
 800bf5a:	60fb      	str	r3, [r7, #12]
 800bf5c:	e002      	b.n	800bf64 <vListInsert+0x2e>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	60fb      	str	r3, [r7, #12]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	68ba      	ldr	r2, [r7, #8]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d2f6      	bcs.n	800bf5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	685a      	ldr	r2, [r3, #4]
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	683a      	ldr	r2, [r7, #0]
 800bf7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	68fa      	ldr	r2, [r7, #12]
 800bf84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	683a      	ldr	r2, [r7, #0]
 800bf8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	1c5a      	adds	r2, r3, #1
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	601a      	str	r2, [r3, #0]
}
 800bf9c:	bf00      	nop
 800bf9e:	3714      	adds	r7, #20
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b085      	sub	sp, #20
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	691b      	ldr	r3, [r3, #16]
 800bfb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	6892      	ldr	r2, [r2, #8]
 800bfbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	6852      	ldr	r2, [r2, #4]
 800bfc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d103      	bne.n	800bfdc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	689a      	ldr	r2, [r3, #8]
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	1e5a      	subs	r2, r3, #1
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3714      	adds	r7, #20
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d10a      	bne.n	800c026 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c014:	f383 8811 	msr	BASEPRI, r3
 800c018:	f3bf 8f6f 	isb	sy
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c022:	bf00      	nop
 800c024:	e7fe      	b.n	800c024 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c026:	f002 f875 	bl	800e114 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681a      	ldr	r2, [r3, #0]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c032:	68f9      	ldr	r1, [r7, #12]
 800c034:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c036:	fb01 f303 	mul.w	r3, r1, r3
 800c03a:	441a      	add	r2, r3
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2200      	movs	r2, #0
 800c044:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c056:	3b01      	subs	r3, #1
 800c058:	68f9      	ldr	r1, [r7, #12]
 800c05a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c05c:	fb01 f303 	mul.w	r3, r1, r3
 800c060:	441a      	add	r2, r3
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	22ff      	movs	r2, #255	; 0xff
 800c06a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	22ff      	movs	r2, #255	; 0xff
 800c072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d114      	bne.n	800c0a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	691b      	ldr	r3, [r3, #16]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d01a      	beq.n	800c0ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	3310      	adds	r3, #16
 800c088:	4618      	mov	r0, r3
 800c08a:	f001 f929 	bl	800d2e0 <xTaskRemoveFromEventList>
 800c08e:	4603      	mov	r3, r0
 800c090:	2b00      	cmp	r3, #0
 800c092:	d012      	beq.n	800c0ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c094:	4b0c      	ldr	r3, [pc, #48]	; (800c0c8 <xQueueGenericReset+0xcc>)
 800c096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c09a:	601a      	str	r2, [r3, #0]
 800c09c:	f3bf 8f4f 	dsb	sy
 800c0a0:	f3bf 8f6f 	isb	sy
 800c0a4:	e009      	b.n	800c0ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	3310      	adds	r3, #16
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f7ff fef2 	bl	800be94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	3324      	adds	r3, #36	; 0x24
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7ff feed 	bl	800be94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c0ba:	f002 f85b 	bl	800e174 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c0be:	2301      	movs	r3, #1
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3710      	adds	r7, #16
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	e000ed04 	.word	0xe000ed04

0800c0cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b08e      	sub	sp, #56	; 0x38
 800c0d0:	af02      	add	r7, sp, #8
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	60b9      	str	r1, [r7, #8]
 800c0d6:	607a      	str	r2, [r7, #4]
 800c0d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d10a      	bne.n	800c0f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e4:	f383 8811 	msr	BASEPRI, r3
 800c0e8:	f3bf 8f6f 	isb	sy
 800c0ec:	f3bf 8f4f 	dsb	sy
 800c0f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c0f2:	bf00      	nop
 800c0f4:	e7fe      	b.n	800c0f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d10a      	bne.n	800c112 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c100:	f383 8811 	msr	BASEPRI, r3
 800c104:	f3bf 8f6f 	isb	sy
 800c108:	f3bf 8f4f 	dsb	sy
 800c10c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c10e:	bf00      	nop
 800c110:	e7fe      	b.n	800c110 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d002      	beq.n	800c11e <xQueueGenericCreateStatic+0x52>
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d001      	beq.n	800c122 <xQueueGenericCreateStatic+0x56>
 800c11e:	2301      	movs	r3, #1
 800c120:	e000      	b.n	800c124 <xQueueGenericCreateStatic+0x58>
 800c122:	2300      	movs	r3, #0
 800c124:	2b00      	cmp	r3, #0
 800c126:	d10a      	bne.n	800c13e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12c:	f383 8811 	msr	BASEPRI, r3
 800c130:	f3bf 8f6f 	isb	sy
 800c134:	f3bf 8f4f 	dsb	sy
 800c138:	623b      	str	r3, [r7, #32]
}
 800c13a:	bf00      	nop
 800c13c:	e7fe      	b.n	800c13c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d102      	bne.n	800c14a <xQueueGenericCreateStatic+0x7e>
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d101      	bne.n	800c14e <xQueueGenericCreateStatic+0x82>
 800c14a:	2301      	movs	r3, #1
 800c14c:	e000      	b.n	800c150 <xQueueGenericCreateStatic+0x84>
 800c14e:	2300      	movs	r3, #0
 800c150:	2b00      	cmp	r3, #0
 800c152:	d10a      	bne.n	800c16a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c158:	f383 8811 	msr	BASEPRI, r3
 800c15c:	f3bf 8f6f 	isb	sy
 800c160:	f3bf 8f4f 	dsb	sy
 800c164:	61fb      	str	r3, [r7, #28]
}
 800c166:	bf00      	nop
 800c168:	e7fe      	b.n	800c168 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c16a:	2350      	movs	r3, #80	; 0x50
 800c16c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	2b50      	cmp	r3, #80	; 0x50
 800c172:	d00a      	beq.n	800c18a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c178:	f383 8811 	msr	BASEPRI, r3
 800c17c:	f3bf 8f6f 	isb	sy
 800c180:	f3bf 8f4f 	dsb	sy
 800c184:	61bb      	str	r3, [r7, #24]
}
 800c186:	bf00      	nop
 800c188:	e7fe      	b.n	800c188 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c18a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c192:	2b00      	cmp	r3, #0
 800c194:	d00d      	beq.n	800c1b2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c198:	2201      	movs	r2, #1
 800c19a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c19e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a4:	9300      	str	r3, [sp, #0]
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	68b9      	ldr	r1, [r7, #8]
 800c1ac:	68f8      	ldr	r0, [r7, #12]
 800c1ae:	f000 f805 	bl	800c1bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3730      	adds	r7, #48	; 0x30
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]
 800c1c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d103      	bne.n	800c1d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c1d0:	69bb      	ldr	r3, [r7, #24]
 800c1d2:	69ba      	ldr	r2, [r7, #24]
 800c1d4:	601a      	str	r2, [r3, #0]
 800c1d6:	e002      	b.n	800c1de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c1d8:	69bb      	ldr	r3, [r7, #24]
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	68fa      	ldr	r2, [r7, #12]
 800c1e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c1e4:	69bb      	ldr	r3, [r7, #24]
 800c1e6:	68ba      	ldr	r2, [r7, #8]
 800c1e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c1ea:	2101      	movs	r1, #1
 800c1ec:	69b8      	ldr	r0, [r7, #24]
 800c1ee:	f7ff ff05 	bl	800bffc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c1f2:	69bb      	ldr	r3, [r7, #24]
 800c1f4:	78fa      	ldrb	r2, [r7, #3]
 800c1f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c1fa:	bf00      	nop
 800c1fc:	3710      	adds	r7, #16
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
	...

0800c204 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b08e      	sub	sp, #56	; 0x38
 800c208:	af00      	add	r7, sp, #0
 800c20a:	60f8      	str	r0, [r7, #12]
 800c20c:	60b9      	str	r1, [r7, #8]
 800c20e:	607a      	str	r2, [r7, #4]
 800c210:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c212:	2300      	movs	r3, #0
 800c214:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d10a      	bne.n	800c236 <xQueueGenericSend+0x32>
	__asm volatile
 800c220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c224:	f383 8811 	msr	BASEPRI, r3
 800c228:	f3bf 8f6f 	isb	sy
 800c22c:	f3bf 8f4f 	dsb	sy
 800c230:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c232:	bf00      	nop
 800c234:	e7fe      	b.n	800c234 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d103      	bne.n	800c244 <xQueueGenericSend+0x40>
 800c23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c240:	2b00      	cmp	r3, #0
 800c242:	d101      	bne.n	800c248 <xQueueGenericSend+0x44>
 800c244:	2301      	movs	r3, #1
 800c246:	e000      	b.n	800c24a <xQueueGenericSend+0x46>
 800c248:	2300      	movs	r3, #0
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d10a      	bne.n	800c264 <xQueueGenericSend+0x60>
	__asm volatile
 800c24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c260:	bf00      	nop
 800c262:	e7fe      	b.n	800c262 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	2b02      	cmp	r3, #2
 800c268:	d103      	bne.n	800c272 <xQueueGenericSend+0x6e>
 800c26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d101      	bne.n	800c276 <xQueueGenericSend+0x72>
 800c272:	2301      	movs	r3, #1
 800c274:	e000      	b.n	800c278 <xQueueGenericSend+0x74>
 800c276:	2300      	movs	r3, #0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d10a      	bne.n	800c292 <xQueueGenericSend+0x8e>
	__asm volatile
 800c27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c280:	f383 8811 	msr	BASEPRI, r3
 800c284:	f3bf 8f6f 	isb	sy
 800c288:	f3bf 8f4f 	dsb	sy
 800c28c:	623b      	str	r3, [r7, #32]
}
 800c28e:	bf00      	nop
 800c290:	e7fe      	b.n	800c290 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c292:	f001 f9e7 	bl	800d664 <xTaskGetSchedulerState>
 800c296:	4603      	mov	r3, r0
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d102      	bne.n	800c2a2 <xQueueGenericSend+0x9e>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d101      	bne.n	800c2a6 <xQueueGenericSend+0xa2>
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	e000      	b.n	800c2a8 <xQueueGenericSend+0xa4>
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d10a      	bne.n	800c2c2 <xQueueGenericSend+0xbe>
	__asm volatile
 800c2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b0:	f383 8811 	msr	BASEPRI, r3
 800c2b4:	f3bf 8f6f 	isb	sy
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	61fb      	str	r3, [r7, #28]
}
 800c2be:	bf00      	nop
 800c2c0:	e7fe      	b.n	800c2c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c2c2:	f001 ff27 	bl	800e114 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d302      	bcc.n	800c2d8 <xQueueGenericSend+0xd4>
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	d129      	bne.n	800c32c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	68b9      	ldr	r1, [r7, #8]
 800c2dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2de:	f000 fa0b 	bl	800c6f8 <prvCopyDataToQueue>
 800c2e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d010      	beq.n	800c30e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ee:	3324      	adds	r3, #36	; 0x24
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f000 fff5 	bl	800d2e0 <xTaskRemoveFromEventList>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d013      	beq.n	800c324 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c2fc:	4b3f      	ldr	r3, [pc, #252]	; (800c3fc <xQueueGenericSend+0x1f8>)
 800c2fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c302:	601a      	str	r2, [r3, #0]
 800c304:	f3bf 8f4f 	dsb	sy
 800c308:	f3bf 8f6f 	isb	sy
 800c30c:	e00a      	b.n	800c324 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c310:	2b00      	cmp	r3, #0
 800c312:	d007      	beq.n	800c324 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c314:	4b39      	ldr	r3, [pc, #228]	; (800c3fc <xQueueGenericSend+0x1f8>)
 800c316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c31a:	601a      	str	r2, [r3, #0]
 800c31c:	f3bf 8f4f 	dsb	sy
 800c320:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c324:	f001 ff26 	bl	800e174 <vPortExitCritical>
				return pdPASS;
 800c328:	2301      	movs	r3, #1
 800c32a:	e063      	b.n	800c3f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d103      	bne.n	800c33a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c332:	f001 ff1f 	bl	800e174 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c336:	2300      	movs	r3, #0
 800c338:	e05c      	b.n	800c3f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d106      	bne.n	800c34e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c340:	f107 0314 	add.w	r3, r7, #20
 800c344:	4618      	mov	r0, r3
 800c346:	f001 f82f 	bl	800d3a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c34a:	2301      	movs	r3, #1
 800c34c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c34e:	f001 ff11 	bl	800e174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c352:	f000 fd9b 	bl	800ce8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c356:	f001 fedd 	bl	800e114 <vPortEnterCritical>
 800c35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c360:	b25b      	sxtb	r3, r3
 800c362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c366:	d103      	bne.n	800c370 <xQueueGenericSend+0x16c>
 800c368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36a:	2200      	movs	r2, #0
 800c36c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c372:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c376:	b25b      	sxtb	r3, r3
 800c378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c37c:	d103      	bne.n	800c386 <xQueueGenericSend+0x182>
 800c37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c380:	2200      	movs	r2, #0
 800c382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c386:	f001 fef5 	bl	800e174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c38a:	1d3a      	adds	r2, r7, #4
 800c38c:	f107 0314 	add.w	r3, r7, #20
 800c390:	4611      	mov	r1, r2
 800c392:	4618      	mov	r0, r3
 800c394:	f001 f81e 	bl	800d3d4 <xTaskCheckForTimeOut>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d124      	bne.n	800c3e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c39e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3a0:	f000 faa2 	bl	800c8e8 <prvIsQueueFull>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d018      	beq.n	800c3dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ac:	3310      	adds	r3, #16
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	4611      	mov	r1, r2
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f000 ff44 	bl	800d240 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c3b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3ba:	f000 fa2d 	bl	800c818 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c3be:	f000 fd73 	bl	800cea8 <xTaskResumeAll>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f47f af7c 	bne.w	800c2c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c3ca:	4b0c      	ldr	r3, [pc, #48]	; (800c3fc <xQueueGenericSend+0x1f8>)
 800c3cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3d0:	601a      	str	r2, [r3, #0]
 800c3d2:	f3bf 8f4f 	dsb	sy
 800c3d6:	f3bf 8f6f 	isb	sy
 800c3da:	e772      	b.n	800c2c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c3dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3de:	f000 fa1b 	bl	800c818 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c3e2:	f000 fd61 	bl	800cea8 <xTaskResumeAll>
 800c3e6:	e76c      	b.n	800c2c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c3e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3ea:	f000 fa15 	bl	800c818 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c3ee:	f000 fd5b 	bl	800cea8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c3f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3738      	adds	r7, #56	; 0x38
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	e000ed04 	.word	0xe000ed04

0800c400 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b090      	sub	sp, #64	; 0x40
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	607a      	str	r2, [r7, #4]
 800c40c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c414:	2b00      	cmp	r3, #0
 800c416:	d10a      	bne.n	800c42e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41c:	f383 8811 	msr	BASEPRI, r3
 800c420:	f3bf 8f6f 	isb	sy
 800c424:	f3bf 8f4f 	dsb	sy
 800c428:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c42a:	bf00      	nop
 800c42c:	e7fe      	b.n	800c42c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d103      	bne.n	800c43c <xQueueGenericSendFromISR+0x3c>
 800c434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d101      	bne.n	800c440 <xQueueGenericSendFromISR+0x40>
 800c43c:	2301      	movs	r3, #1
 800c43e:	e000      	b.n	800c442 <xQueueGenericSendFromISR+0x42>
 800c440:	2300      	movs	r3, #0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d10a      	bne.n	800c45c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44a:	f383 8811 	msr	BASEPRI, r3
 800c44e:	f3bf 8f6f 	isb	sy
 800c452:	f3bf 8f4f 	dsb	sy
 800c456:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c458:	bf00      	nop
 800c45a:	e7fe      	b.n	800c45a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	2b02      	cmp	r3, #2
 800c460:	d103      	bne.n	800c46a <xQueueGenericSendFromISR+0x6a>
 800c462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c466:	2b01      	cmp	r3, #1
 800c468:	d101      	bne.n	800c46e <xQueueGenericSendFromISR+0x6e>
 800c46a:	2301      	movs	r3, #1
 800c46c:	e000      	b.n	800c470 <xQueueGenericSendFromISR+0x70>
 800c46e:	2300      	movs	r3, #0
 800c470:	2b00      	cmp	r3, #0
 800c472:	d10a      	bne.n	800c48a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c478:	f383 8811 	msr	BASEPRI, r3
 800c47c:	f3bf 8f6f 	isb	sy
 800c480:	f3bf 8f4f 	dsb	sy
 800c484:	623b      	str	r3, [r7, #32]
}
 800c486:	bf00      	nop
 800c488:	e7fe      	b.n	800c488 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c48a:	f001 ff25 	bl	800e2d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c48e:	f3ef 8211 	mrs	r2, BASEPRI
 800c492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c496:	f383 8811 	msr	BASEPRI, r3
 800c49a:	f3bf 8f6f 	isb	sy
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	61fa      	str	r2, [r7, #28]
 800c4a4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c4a6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c4a8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d302      	bcc.n	800c4bc <xQueueGenericSendFromISR+0xbc>
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	d12f      	bne.n	800c51c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c4cc:	683a      	ldr	r2, [r7, #0]
 800c4ce:	68b9      	ldr	r1, [r7, #8]
 800c4d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c4d2:	f000 f911 	bl	800c6f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c4d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c4da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4de:	d112      	bne.n	800c506 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d016      	beq.n	800c516 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ea:	3324      	adds	r3, #36	; 0x24
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f000 fef7 	bl	800d2e0 <xTaskRemoveFromEventList>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d00e      	beq.n	800c516 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00b      	beq.n	800c516 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2201      	movs	r2, #1
 800c502:	601a      	str	r2, [r3, #0]
 800c504:	e007      	b.n	800c516 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c506:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c50a:	3301      	adds	r3, #1
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	b25a      	sxtb	r2, r3
 800c510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c516:	2301      	movs	r3, #1
 800c518:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c51a:	e001      	b.n	800c520 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c51c:	2300      	movs	r3, #0
 800c51e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c522:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c52a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c52c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3740      	adds	r7, #64	; 0x40
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
	...

0800c538 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b08c      	sub	sp, #48	; 0x30
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	60f8      	str	r0, [r7, #12]
 800c540:	60b9      	str	r1, [r7, #8]
 800c542:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c544:	2300      	movs	r3, #0
 800c546:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d10a      	bne.n	800c568 <xQueueReceive+0x30>
	__asm volatile
 800c552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c556:	f383 8811 	msr	BASEPRI, r3
 800c55a:	f3bf 8f6f 	isb	sy
 800c55e:	f3bf 8f4f 	dsb	sy
 800c562:	623b      	str	r3, [r7, #32]
}
 800c564:	bf00      	nop
 800c566:	e7fe      	b.n	800c566 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d103      	bne.n	800c576 <xQueueReceive+0x3e>
 800c56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c572:	2b00      	cmp	r3, #0
 800c574:	d101      	bne.n	800c57a <xQueueReceive+0x42>
 800c576:	2301      	movs	r3, #1
 800c578:	e000      	b.n	800c57c <xQueueReceive+0x44>
 800c57a:	2300      	movs	r3, #0
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d10a      	bne.n	800c596 <xQueueReceive+0x5e>
	__asm volatile
 800c580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c584:	f383 8811 	msr	BASEPRI, r3
 800c588:	f3bf 8f6f 	isb	sy
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	61fb      	str	r3, [r7, #28]
}
 800c592:	bf00      	nop
 800c594:	e7fe      	b.n	800c594 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c596:	f001 f865 	bl	800d664 <xTaskGetSchedulerState>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d102      	bne.n	800c5a6 <xQueueReceive+0x6e>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d101      	bne.n	800c5aa <xQueueReceive+0x72>
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	e000      	b.n	800c5ac <xQueueReceive+0x74>
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d10a      	bne.n	800c5c6 <xQueueReceive+0x8e>
	__asm volatile
 800c5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b4:	f383 8811 	msr	BASEPRI, r3
 800c5b8:	f3bf 8f6f 	isb	sy
 800c5bc:	f3bf 8f4f 	dsb	sy
 800c5c0:	61bb      	str	r3, [r7, #24]
}
 800c5c2:	bf00      	nop
 800c5c4:	e7fe      	b.n	800c5c4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c5c6:	f001 fda5 	bl	800e114 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d01f      	beq.n	800c616 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c5d6:	68b9      	ldr	r1, [r7, #8]
 800c5d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5da:	f000 f8f7 	bl	800c7cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e0:	1e5a      	subs	r2, r3, #1
 800c5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e8:	691b      	ldr	r3, [r3, #16]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d00f      	beq.n	800c60e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f0:	3310      	adds	r3, #16
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f000 fe74 	bl	800d2e0 <xTaskRemoveFromEventList>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d007      	beq.n	800c60e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c5fe:	4b3d      	ldr	r3, [pc, #244]	; (800c6f4 <xQueueReceive+0x1bc>)
 800c600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c604:	601a      	str	r2, [r3, #0]
 800c606:	f3bf 8f4f 	dsb	sy
 800c60a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c60e:	f001 fdb1 	bl	800e174 <vPortExitCritical>
				return pdPASS;
 800c612:	2301      	movs	r3, #1
 800c614:	e069      	b.n	800c6ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d103      	bne.n	800c624 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c61c:	f001 fdaa 	bl	800e174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c620:	2300      	movs	r3, #0
 800c622:	e062      	b.n	800c6ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c626:	2b00      	cmp	r3, #0
 800c628:	d106      	bne.n	800c638 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c62a:	f107 0310 	add.w	r3, r7, #16
 800c62e:	4618      	mov	r0, r3
 800c630:	f000 feba 	bl	800d3a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c634:	2301      	movs	r3, #1
 800c636:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c638:	f001 fd9c 	bl	800e174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c63c:	f000 fc26 	bl	800ce8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c640:	f001 fd68 	bl	800e114 <vPortEnterCritical>
 800c644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c646:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c64a:	b25b      	sxtb	r3, r3
 800c64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c650:	d103      	bne.n	800c65a <xQueueReceive+0x122>
 800c652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c654:	2200      	movs	r2, #0
 800c656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c660:	b25b      	sxtb	r3, r3
 800c662:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c666:	d103      	bne.n	800c670 <xQueueReceive+0x138>
 800c668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66a:	2200      	movs	r2, #0
 800c66c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c670:	f001 fd80 	bl	800e174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c674:	1d3a      	adds	r2, r7, #4
 800c676:	f107 0310 	add.w	r3, r7, #16
 800c67a:	4611      	mov	r1, r2
 800c67c:	4618      	mov	r0, r3
 800c67e:	f000 fea9 	bl	800d3d4 <xTaskCheckForTimeOut>
 800c682:	4603      	mov	r3, r0
 800c684:	2b00      	cmp	r3, #0
 800c686:	d123      	bne.n	800c6d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c68a:	f000 f917 	bl	800c8bc <prvIsQueueEmpty>
 800c68e:	4603      	mov	r3, r0
 800c690:	2b00      	cmp	r3, #0
 800c692:	d017      	beq.n	800c6c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c696:	3324      	adds	r3, #36	; 0x24
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	4611      	mov	r1, r2
 800c69c:	4618      	mov	r0, r3
 800c69e:	f000 fdcf 	bl	800d240 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c6a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6a4:	f000 f8b8 	bl	800c818 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c6a8:	f000 fbfe 	bl	800cea8 <xTaskResumeAll>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d189      	bne.n	800c5c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c6b2:	4b10      	ldr	r3, [pc, #64]	; (800c6f4 <xQueueReceive+0x1bc>)
 800c6b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6b8:	601a      	str	r2, [r3, #0]
 800c6ba:	f3bf 8f4f 	dsb	sy
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	e780      	b.n	800c5c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c6c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6c6:	f000 f8a7 	bl	800c818 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6ca:	f000 fbed 	bl	800cea8 <xTaskResumeAll>
 800c6ce:	e77a      	b.n	800c5c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c6d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6d2:	f000 f8a1 	bl	800c818 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6d6:	f000 fbe7 	bl	800cea8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6dc:	f000 f8ee 	bl	800c8bc <prvIsQueueEmpty>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	f43f af6f 	beq.w	800c5c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c6e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3730      	adds	r7, #48	; 0x30
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	e000ed04 	.word	0xe000ed04

0800c6f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b086      	sub	sp, #24
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	60f8      	str	r0, [r7, #12]
 800c700:	60b9      	str	r1, [r7, #8]
 800c702:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c704:	2300      	movs	r3, #0
 800c706:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c70c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c712:	2b00      	cmp	r3, #0
 800c714:	d10d      	bne.n	800c732 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d14d      	bne.n	800c7ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	689b      	ldr	r3, [r3, #8]
 800c722:	4618      	mov	r0, r3
 800c724:	f000 ffbc 	bl	800d6a0 <xTaskPriorityDisinherit>
 800c728:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	2200      	movs	r2, #0
 800c72e:	609a      	str	r2, [r3, #8]
 800c730:	e043      	b.n	800c7ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d119      	bne.n	800c76c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	6858      	ldr	r0, [r3, #4]
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c740:	461a      	mov	r2, r3
 800c742:	68b9      	ldr	r1, [r7, #8]
 800c744:	f006 fe8f 	bl	8013466 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	685a      	ldr	r2, [r3, #4]
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c750:	441a      	add	r2, r3
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	685a      	ldr	r2, [r3, #4]
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	689b      	ldr	r3, [r3, #8]
 800c75e:	429a      	cmp	r2, r3
 800c760:	d32b      	bcc.n	800c7ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	605a      	str	r2, [r3, #4]
 800c76a:	e026      	b.n	800c7ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	68d8      	ldr	r0, [r3, #12]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c774:	461a      	mov	r2, r3
 800c776:	68b9      	ldr	r1, [r7, #8]
 800c778:	f006 fe75 	bl	8013466 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	68da      	ldr	r2, [r3, #12]
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c784:	425b      	negs	r3, r3
 800c786:	441a      	add	r2, r3
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	68da      	ldr	r2, [r3, #12]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	429a      	cmp	r2, r3
 800c796:	d207      	bcs.n	800c7a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	689a      	ldr	r2, [r3, #8]
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a0:	425b      	negs	r3, r3
 800c7a2:	441a      	add	r2, r3
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2b02      	cmp	r3, #2
 800c7ac:	d105      	bne.n	800c7ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d002      	beq.n	800c7ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	3b01      	subs	r3, #1
 800c7b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	1c5a      	adds	r2, r3, #1
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c7c2:	697b      	ldr	r3, [r7, #20]
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3718      	adds	r7, #24
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d018      	beq.n	800c810 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	68da      	ldr	r2, [r3, #12]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7e6:	441a      	add	r2, r3
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	68da      	ldr	r2, [r3, #12]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	689b      	ldr	r3, [r3, #8]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d303      	bcc.n	800c800 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	68d9      	ldr	r1, [r3, #12]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c808:	461a      	mov	r2, r3
 800c80a:	6838      	ldr	r0, [r7, #0]
 800c80c:	f006 fe2b 	bl	8013466 <memcpy>
	}
}
 800c810:	bf00      	nop
 800c812:	3708      	adds	r7, #8
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}

0800c818 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c820:	f001 fc78 	bl	800e114 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c82a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c82c:	e011      	b.n	800c852 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c832:	2b00      	cmp	r3, #0
 800c834:	d012      	beq.n	800c85c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	3324      	adds	r3, #36	; 0x24
 800c83a:	4618      	mov	r0, r3
 800c83c:	f000 fd50 	bl	800d2e0 <xTaskRemoveFromEventList>
 800c840:	4603      	mov	r3, r0
 800c842:	2b00      	cmp	r3, #0
 800c844:	d001      	beq.n	800c84a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c846:	f000 fe27 	bl	800d498 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c84a:	7bfb      	ldrb	r3, [r7, #15]
 800c84c:	3b01      	subs	r3, #1
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c856:	2b00      	cmp	r3, #0
 800c858:	dce9      	bgt.n	800c82e <prvUnlockQueue+0x16>
 800c85a:	e000      	b.n	800c85e <prvUnlockQueue+0x46>
					break;
 800c85c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	22ff      	movs	r2, #255	; 0xff
 800c862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c866:	f001 fc85 	bl	800e174 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c86a:	f001 fc53 	bl	800e114 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c874:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c876:	e011      	b.n	800c89c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	691b      	ldr	r3, [r3, #16]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d012      	beq.n	800c8a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	3310      	adds	r3, #16
 800c884:	4618      	mov	r0, r3
 800c886:	f000 fd2b 	bl	800d2e0 <xTaskRemoveFromEventList>
 800c88a:	4603      	mov	r3, r0
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d001      	beq.n	800c894 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c890:	f000 fe02 	bl	800d498 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c894:	7bbb      	ldrb	r3, [r7, #14]
 800c896:	3b01      	subs	r3, #1
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c89c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	dce9      	bgt.n	800c878 <prvUnlockQueue+0x60>
 800c8a4:	e000      	b.n	800c8a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c8a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	22ff      	movs	r2, #255	; 0xff
 800c8ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c8b0:	f001 fc60 	bl	800e174 <vPortExitCritical>
}
 800c8b4:	bf00      	nop
 800c8b6:	3710      	adds	r7, #16
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b084      	sub	sp, #16
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c8c4:	f001 fc26 	bl	800e114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d102      	bne.n	800c8d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	60fb      	str	r3, [r7, #12]
 800c8d4:	e001      	b.n	800c8da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c8da:	f001 fc4b 	bl	800e174 <vPortExitCritical>

	return xReturn;
 800c8de:	68fb      	ldr	r3, [r7, #12]
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3710      	adds	r7, #16
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b084      	sub	sp, #16
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c8f0:	f001 fc10 	bl	800e114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d102      	bne.n	800c906 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c900:	2301      	movs	r3, #1
 800c902:	60fb      	str	r3, [r7, #12]
 800c904:	e001      	b.n	800c90a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c906:	2300      	movs	r3, #0
 800c908:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c90a:	f001 fc33 	bl	800e174 <vPortExitCritical>

	return xReturn;
 800c90e:	68fb      	ldr	r3, [r7, #12]
}
 800c910:	4618      	mov	r0, r3
 800c912:	3710      	adds	r7, #16
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c918:	b480      	push	{r7}
 800c91a:	b085      	sub	sp, #20
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c922:	2300      	movs	r3, #0
 800c924:	60fb      	str	r3, [r7, #12]
 800c926:	e014      	b.n	800c952 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c928:	4a0f      	ldr	r2, [pc, #60]	; (800c968 <vQueueAddToRegistry+0x50>)
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d10b      	bne.n	800c94c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c934:	490c      	ldr	r1, [pc, #48]	; (800c968 <vQueueAddToRegistry+0x50>)
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	683a      	ldr	r2, [r7, #0]
 800c93a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c93e:	4a0a      	ldr	r2, [pc, #40]	; (800c968 <vQueueAddToRegistry+0x50>)
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	00db      	lsls	r3, r3, #3
 800c944:	4413      	add	r3, r2
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c94a:	e006      	b.n	800c95a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	3301      	adds	r3, #1
 800c950:	60fb      	str	r3, [r7, #12]
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2b07      	cmp	r3, #7
 800c956:	d9e7      	bls.n	800c928 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c958:	bf00      	nop
 800c95a:	bf00      	nop
 800c95c:	3714      	adds	r7, #20
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr
 800c966:	bf00      	nop
 800c968:	24008cbc 	.word	0x24008cbc

0800c96c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b086      	sub	sp, #24
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c97c:	f001 fbca 	bl	800e114 <vPortEnterCritical>
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c986:	b25b      	sxtb	r3, r3
 800c988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c98c:	d103      	bne.n	800c996 <vQueueWaitForMessageRestricted+0x2a>
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	2200      	movs	r2, #0
 800c992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c99c:	b25b      	sxtb	r3, r3
 800c99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a2:	d103      	bne.n	800c9ac <vQueueWaitForMessageRestricted+0x40>
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c9ac:	f001 fbe2 	bl	800e174 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d106      	bne.n	800c9c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	3324      	adds	r3, #36	; 0x24
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	68b9      	ldr	r1, [r7, #8]
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f000 fc61 	bl	800d288 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c9c6:	6978      	ldr	r0, [r7, #20]
 800c9c8:	f7ff ff26 	bl	800c818 <prvUnlockQueue>
	}
 800c9cc:	bf00      	nop
 800c9ce:	3718      	adds	r7, #24
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b08e      	sub	sp, #56	; 0x38
 800c9d8:	af04      	add	r7, sp, #16
 800c9da:	60f8      	str	r0, [r7, #12]
 800c9dc:	60b9      	str	r1, [r7, #8]
 800c9de:	607a      	str	r2, [r7, #4]
 800c9e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c9e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d10a      	bne.n	800c9fe <xTaskCreateStatic+0x2a>
	__asm volatile
 800c9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ec:	f383 8811 	msr	BASEPRI, r3
 800c9f0:	f3bf 8f6f 	isb	sy
 800c9f4:	f3bf 8f4f 	dsb	sy
 800c9f8:	623b      	str	r3, [r7, #32]
}
 800c9fa:	bf00      	nop
 800c9fc:	e7fe      	b.n	800c9fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d10a      	bne.n	800ca1a <xTaskCreateStatic+0x46>
	__asm volatile
 800ca04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca08:	f383 8811 	msr	BASEPRI, r3
 800ca0c:	f3bf 8f6f 	isb	sy
 800ca10:	f3bf 8f4f 	dsb	sy
 800ca14:	61fb      	str	r3, [r7, #28]
}
 800ca16:	bf00      	nop
 800ca18:	e7fe      	b.n	800ca18 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ca1a:	23a8      	movs	r3, #168	; 0xa8
 800ca1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	2ba8      	cmp	r3, #168	; 0xa8
 800ca22:	d00a      	beq.n	800ca3a <xTaskCreateStatic+0x66>
	__asm volatile
 800ca24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca28:	f383 8811 	msr	BASEPRI, r3
 800ca2c:	f3bf 8f6f 	isb	sy
 800ca30:	f3bf 8f4f 	dsb	sy
 800ca34:	61bb      	str	r3, [r7, #24]
}
 800ca36:	bf00      	nop
 800ca38:	e7fe      	b.n	800ca38 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ca3a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ca3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d01e      	beq.n	800ca80 <xTaskCreateStatic+0xac>
 800ca42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d01b      	beq.n	800ca80 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ca4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca50:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ca52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca54:	2202      	movs	r2, #2
 800ca56:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	9303      	str	r3, [sp, #12]
 800ca5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca60:	9302      	str	r3, [sp, #8]
 800ca62:	f107 0314 	add.w	r3, r7, #20
 800ca66:	9301      	str	r3, [sp, #4]
 800ca68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6a:	9300      	str	r3, [sp, #0]
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	687a      	ldr	r2, [r7, #4]
 800ca70:	68b9      	ldr	r1, [r7, #8]
 800ca72:	68f8      	ldr	r0, [r7, #12]
 800ca74:	f000 f850 	bl	800cb18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca7a:	f000 f8f3 	bl	800cc64 <prvAddNewTaskToReadyList>
 800ca7e:	e001      	b.n	800ca84 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ca80:	2300      	movs	r3, #0
 800ca82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ca84:	697b      	ldr	r3, [r7, #20]
	}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3728      	adds	r7, #40	; 0x28
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}

0800ca8e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ca8e:	b580      	push	{r7, lr}
 800ca90:	b08c      	sub	sp, #48	; 0x30
 800ca92:	af04      	add	r7, sp, #16
 800ca94:	60f8      	str	r0, [r7, #12]
 800ca96:	60b9      	str	r1, [r7, #8]
 800ca98:	603b      	str	r3, [r7, #0]
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ca9e:	88fb      	ldrh	r3, [r7, #6]
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	4618      	mov	r0, r3
 800caa4:	f001 fc58 	bl	800e358 <pvPortMalloc>
 800caa8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d00e      	beq.n	800cace <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cab0:	20a8      	movs	r0, #168	; 0xa8
 800cab2:	f001 fc51 	bl	800e358 <pvPortMalloc>
 800cab6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cab8:	69fb      	ldr	r3, [r7, #28]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d003      	beq.n	800cac6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cabe:	69fb      	ldr	r3, [r7, #28]
 800cac0:	697a      	ldr	r2, [r7, #20]
 800cac2:	631a      	str	r2, [r3, #48]	; 0x30
 800cac4:	e005      	b.n	800cad2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cac6:	6978      	ldr	r0, [r7, #20]
 800cac8:	f001 fd12 	bl	800e4f0 <vPortFree>
 800cacc:	e001      	b.n	800cad2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cace:	2300      	movs	r3, #0
 800cad0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cad2:	69fb      	ldr	r3, [r7, #28]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d017      	beq.n	800cb08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	2200      	movs	r2, #0
 800cadc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cae0:	88fa      	ldrh	r2, [r7, #6]
 800cae2:	2300      	movs	r3, #0
 800cae4:	9303      	str	r3, [sp, #12]
 800cae6:	69fb      	ldr	r3, [r7, #28]
 800cae8:	9302      	str	r3, [sp, #8]
 800caea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caec:	9301      	str	r3, [sp, #4]
 800caee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf0:	9300      	str	r3, [sp, #0]
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	68b9      	ldr	r1, [r7, #8]
 800caf6:	68f8      	ldr	r0, [r7, #12]
 800caf8:	f000 f80e 	bl	800cb18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cafc:	69f8      	ldr	r0, [r7, #28]
 800cafe:	f000 f8b1 	bl	800cc64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cb02:	2301      	movs	r3, #1
 800cb04:	61bb      	str	r3, [r7, #24]
 800cb06:	e002      	b.n	800cb0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cb08:	f04f 33ff 	mov.w	r3, #4294967295
 800cb0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cb0e:	69bb      	ldr	r3, [r7, #24]
	}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3720      	adds	r7, #32
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b088      	sub	sp, #32
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	60f8      	str	r0, [r7, #12]
 800cb20:	60b9      	str	r1, [r7, #8]
 800cb22:	607a      	str	r2, [r7, #4]
 800cb24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	461a      	mov	r2, r3
 800cb30:	21a5      	movs	r1, #165	; 0xa5
 800cb32:	f006 fbc3 	bl	80132bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb3a:	6879      	ldr	r1, [r7, #4]
 800cb3c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cb40:	440b      	add	r3, r1
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	4413      	add	r3, r2
 800cb46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	f023 0307 	bic.w	r3, r3, #7
 800cb4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cb50:	69bb      	ldr	r3, [r7, #24]
 800cb52:	f003 0307 	and.w	r3, r3, #7
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d00a      	beq.n	800cb70 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb5e:	f383 8811 	msr	BASEPRI, r3
 800cb62:	f3bf 8f6f 	isb	sy
 800cb66:	f3bf 8f4f 	dsb	sy
 800cb6a:	617b      	str	r3, [r7, #20]
}
 800cb6c:	bf00      	nop
 800cb6e:	e7fe      	b.n	800cb6e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d01f      	beq.n	800cbb6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb76:	2300      	movs	r3, #0
 800cb78:	61fb      	str	r3, [r7, #28]
 800cb7a:	e012      	b.n	800cba2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cb7c:	68ba      	ldr	r2, [r7, #8]
 800cb7e:	69fb      	ldr	r3, [r7, #28]
 800cb80:	4413      	add	r3, r2
 800cb82:	7819      	ldrb	r1, [r3, #0]
 800cb84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb86:	69fb      	ldr	r3, [r7, #28]
 800cb88:	4413      	add	r3, r2
 800cb8a:	3334      	adds	r3, #52	; 0x34
 800cb8c:	460a      	mov	r2, r1
 800cb8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cb90:	68ba      	ldr	r2, [r7, #8]
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	4413      	add	r3, r2
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d006      	beq.n	800cbaa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb9c:	69fb      	ldr	r3, [r7, #28]
 800cb9e:	3301      	adds	r3, #1
 800cba0:	61fb      	str	r3, [r7, #28]
 800cba2:	69fb      	ldr	r3, [r7, #28]
 800cba4:	2b0f      	cmp	r3, #15
 800cba6:	d9e9      	bls.n	800cb7c <prvInitialiseNewTask+0x64>
 800cba8:	e000      	b.n	800cbac <prvInitialiseNewTask+0x94>
			{
				break;
 800cbaa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbae:	2200      	movs	r2, #0
 800cbb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cbb4:	e003      	b.n	800cbbe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb8:	2200      	movs	r2, #0
 800cbba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc0:	2b37      	cmp	r3, #55	; 0x37
 800cbc2:	d901      	bls.n	800cbc8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cbc4:	2337      	movs	r3, #55	; 0x37
 800cbc6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbcc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbd2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbdc:	3304      	adds	r3, #4
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7ff f978 	bl	800bed4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe6:	3318      	adds	r3, #24
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7ff f973 	bl	800bed4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbf2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc06:	2200      	movs	r2, #0
 800cc08:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc16:	3354      	adds	r3, #84	; 0x54
 800cc18:	224c      	movs	r2, #76	; 0x4c
 800cc1a:	2100      	movs	r1, #0
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f006 fb4d 	bl	80132bc <memset>
 800cc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc24:	4a0c      	ldr	r2, [pc, #48]	; (800cc58 <prvInitialiseNewTask+0x140>)
 800cc26:	659a      	str	r2, [r3, #88]	; 0x58
 800cc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2a:	4a0c      	ldr	r2, [pc, #48]	; (800cc5c <prvInitialiseNewTask+0x144>)
 800cc2c:	65da      	str	r2, [r3, #92]	; 0x5c
 800cc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc30:	4a0b      	ldr	r2, [pc, #44]	; (800cc60 <prvInitialiseNewTask+0x148>)
 800cc32:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cc34:	683a      	ldr	r2, [r7, #0]
 800cc36:	68f9      	ldr	r1, [r7, #12]
 800cc38:	69b8      	ldr	r0, [r7, #24]
 800cc3a:	f001 f941 	bl	800dec0 <pxPortInitialiseStack>
 800cc3e:	4602      	mov	r2, r0
 800cc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d002      	beq.n	800cc50 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc50:	bf00      	nop
 800cc52:	3720      	adds	r7, #32
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}
 800cc58:	24010b98 	.word	0x24010b98
 800cc5c:	24010c00 	.word	0x24010c00
 800cc60:	24010c68 	.word	0x24010c68

0800cc64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cc6c:	f001 fa52 	bl	800e114 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cc70:	4b2d      	ldr	r3, [pc, #180]	; (800cd28 <prvAddNewTaskToReadyList+0xc4>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	3301      	adds	r3, #1
 800cc76:	4a2c      	ldr	r2, [pc, #176]	; (800cd28 <prvAddNewTaskToReadyList+0xc4>)
 800cc78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cc7a:	4b2c      	ldr	r3, [pc, #176]	; (800cd2c <prvAddNewTaskToReadyList+0xc8>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d109      	bne.n	800cc96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cc82:	4a2a      	ldr	r2, [pc, #168]	; (800cd2c <prvAddNewTaskToReadyList+0xc8>)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cc88:	4b27      	ldr	r3, [pc, #156]	; (800cd28 <prvAddNewTaskToReadyList+0xc4>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d110      	bne.n	800ccb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cc90:	f000 fc26 	bl	800d4e0 <prvInitialiseTaskLists>
 800cc94:	e00d      	b.n	800ccb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cc96:	4b26      	ldr	r3, [pc, #152]	; (800cd30 <prvAddNewTaskToReadyList+0xcc>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d109      	bne.n	800ccb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cc9e:	4b23      	ldr	r3, [pc, #140]	; (800cd2c <prvAddNewTaskToReadyList+0xc8>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d802      	bhi.n	800ccb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ccac:	4a1f      	ldr	r2, [pc, #124]	; (800cd2c <prvAddNewTaskToReadyList+0xc8>)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ccb2:	4b20      	ldr	r3, [pc, #128]	; (800cd34 <prvAddNewTaskToReadyList+0xd0>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	4a1e      	ldr	r2, [pc, #120]	; (800cd34 <prvAddNewTaskToReadyList+0xd0>)
 800ccba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ccbc:	4b1d      	ldr	r3, [pc, #116]	; (800cd34 <prvAddNewTaskToReadyList+0xd0>)
 800ccbe:	681a      	ldr	r2, [r3, #0]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccc8:	4b1b      	ldr	r3, [pc, #108]	; (800cd38 <prvAddNewTaskToReadyList+0xd4>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d903      	bls.n	800ccd8 <prvAddNewTaskToReadyList+0x74>
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd4:	4a18      	ldr	r2, [pc, #96]	; (800cd38 <prvAddNewTaskToReadyList+0xd4>)
 800ccd6:	6013      	str	r3, [r2, #0]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccdc:	4613      	mov	r3, r2
 800ccde:	009b      	lsls	r3, r3, #2
 800cce0:	4413      	add	r3, r2
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	4a15      	ldr	r2, [pc, #84]	; (800cd3c <prvAddNewTaskToReadyList+0xd8>)
 800cce6:	441a      	add	r2, r3
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	3304      	adds	r3, #4
 800ccec:	4619      	mov	r1, r3
 800ccee:	4610      	mov	r0, r2
 800ccf0:	f7ff f8fd 	bl	800beee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ccf4:	f001 fa3e 	bl	800e174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ccf8:	4b0d      	ldr	r3, [pc, #52]	; (800cd30 <prvAddNewTaskToReadyList+0xcc>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d00e      	beq.n	800cd1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cd00:	4b0a      	ldr	r3, [pc, #40]	; (800cd2c <prvAddNewTaskToReadyList+0xc8>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d207      	bcs.n	800cd1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cd0e:	4b0c      	ldr	r3, [pc, #48]	; (800cd40 <prvAddNewTaskToReadyList+0xdc>)
 800cd10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd14:	601a      	str	r2, [r3, #0]
 800cd16:	f3bf 8f4f 	dsb	sy
 800cd1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd1e:	bf00      	nop
 800cd20:	3708      	adds	r7, #8
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	240091d0 	.word	0x240091d0
 800cd2c:	24008cfc 	.word	0x24008cfc
 800cd30:	240091dc 	.word	0x240091dc
 800cd34:	240091ec 	.word	0x240091ec
 800cd38:	240091d8 	.word	0x240091d8
 800cd3c:	24008d00 	.word	0x24008d00
 800cd40:	e000ed04 	.word	0xe000ed04

0800cd44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b084      	sub	sp, #16
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d017      	beq.n	800cd86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cd56:	4b13      	ldr	r3, [pc, #76]	; (800cda4 <vTaskDelay+0x60>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d00a      	beq.n	800cd74 <vTaskDelay+0x30>
	__asm volatile
 800cd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd62:	f383 8811 	msr	BASEPRI, r3
 800cd66:	f3bf 8f6f 	isb	sy
 800cd6a:	f3bf 8f4f 	dsb	sy
 800cd6e:	60bb      	str	r3, [r7, #8]
}
 800cd70:	bf00      	nop
 800cd72:	e7fe      	b.n	800cd72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cd74:	f000 f88a 	bl	800ce8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cd78:	2100      	movs	r1, #0
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f000 fcfe 	bl	800d77c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cd80:	f000 f892 	bl	800cea8 <xTaskResumeAll>
 800cd84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d107      	bne.n	800cd9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cd8c:	4b06      	ldr	r3, [pc, #24]	; (800cda8 <vTaskDelay+0x64>)
 800cd8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd92:	601a      	str	r2, [r3, #0]
 800cd94:	f3bf 8f4f 	dsb	sy
 800cd98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd9c:	bf00      	nop
 800cd9e:	3710      	adds	r7, #16
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	240091f8 	.word	0x240091f8
 800cda8:	e000ed04 	.word	0xe000ed04

0800cdac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b08a      	sub	sp, #40	; 0x28
 800cdb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cdba:	463a      	mov	r2, r7
 800cdbc:	1d39      	adds	r1, r7, #4
 800cdbe:	f107 0308 	add.w	r3, r7, #8
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f7ff f832 	bl	800be2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cdc8:	6839      	ldr	r1, [r7, #0]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	68ba      	ldr	r2, [r7, #8]
 800cdce:	9202      	str	r2, [sp, #8]
 800cdd0:	9301      	str	r3, [sp, #4]
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	9300      	str	r3, [sp, #0]
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	460a      	mov	r2, r1
 800cdda:	4924      	ldr	r1, [pc, #144]	; (800ce6c <vTaskStartScheduler+0xc0>)
 800cddc:	4824      	ldr	r0, [pc, #144]	; (800ce70 <vTaskStartScheduler+0xc4>)
 800cdde:	f7ff fdf9 	bl	800c9d4 <xTaskCreateStatic>
 800cde2:	4603      	mov	r3, r0
 800cde4:	4a23      	ldr	r2, [pc, #140]	; (800ce74 <vTaskStartScheduler+0xc8>)
 800cde6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cde8:	4b22      	ldr	r3, [pc, #136]	; (800ce74 <vTaskStartScheduler+0xc8>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d002      	beq.n	800cdf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	617b      	str	r3, [r7, #20]
 800cdf4:	e001      	b.n	800cdfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d102      	bne.n	800ce06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ce00:	f000 fd10 	bl	800d824 <xTimerCreateTimerTask>
 800ce04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	d11b      	bne.n	800ce44 <vTaskStartScheduler+0x98>
	__asm volatile
 800ce0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce10:	f383 8811 	msr	BASEPRI, r3
 800ce14:	f3bf 8f6f 	isb	sy
 800ce18:	f3bf 8f4f 	dsb	sy
 800ce1c:	613b      	str	r3, [r7, #16]
}
 800ce1e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ce20:	4b15      	ldr	r3, [pc, #84]	; (800ce78 <vTaskStartScheduler+0xcc>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	3354      	adds	r3, #84	; 0x54
 800ce26:	4a15      	ldr	r2, [pc, #84]	; (800ce7c <vTaskStartScheduler+0xd0>)
 800ce28:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ce2a:	4b15      	ldr	r3, [pc, #84]	; (800ce80 <vTaskStartScheduler+0xd4>)
 800ce2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ce32:	4b14      	ldr	r3, [pc, #80]	; (800ce84 <vTaskStartScheduler+0xd8>)
 800ce34:	2201      	movs	r2, #1
 800ce36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ce38:	4b13      	ldr	r3, [pc, #76]	; (800ce88 <vTaskStartScheduler+0xdc>)
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ce3e:	f001 f8c7 	bl	800dfd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ce42:	e00e      	b.n	800ce62 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce4a:	d10a      	bne.n	800ce62 <vTaskStartScheduler+0xb6>
	__asm volatile
 800ce4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce50:	f383 8811 	msr	BASEPRI, r3
 800ce54:	f3bf 8f6f 	isb	sy
 800ce58:	f3bf 8f4f 	dsb	sy
 800ce5c:	60fb      	str	r3, [r7, #12]
}
 800ce5e:	bf00      	nop
 800ce60:	e7fe      	b.n	800ce60 <vTaskStartScheduler+0xb4>
}
 800ce62:	bf00      	nop
 800ce64:	3718      	adds	r7, #24
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	08015334 	.word	0x08015334
 800ce70:	0800d4b1 	.word	0x0800d4b1
 800ce74:	240091f4 	.word	0x240091f4
 800ce78:	24008cfc 	.word	0x24008cfc
 800ce7c:	24000170 	.word	0x24000170
 800ce80:	240091f0 	.word	0x240091f0
 800ce84:	240091dc 	.word	0x240091dc
 800ce88:	240091d4 	.word	0x240091d4

0800ce8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ce90:	4b04      	ldr	r3, [pc, #16]	; (800cea4 <vTaskSuspendAll+0x18>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	3301      	adds	r3, #1
 800ce96:	4a03      	ldr	r2, [pc, #12]	; (800cea4 <vTaskSuspendAll+0x18>)
 800ce98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ce9a:	bf00      	nop
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr
 800cea4:	240091f8 	.word	0x240091f8

0800cea8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b084      	sub	sp, #16
 800ceac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ceb6:	4b42      	ldr	r3, [pc, #264]	; (800cfc0 <xTaskResumeAll+0x118>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d10a      	bne.n	800ced4 <xTaskResumeAll+0x2c>
	__asm volatile
 800cebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec2:	f383 8811 	msr	BASEPRI, r3
 800cec6:	f3bf 8f6f 	isb	sy
 800ceca:	f3bf 8f4f 	dsb	sy
 800cece:	603b      	str	r3, [r7, #0]
}
 800ced0:	bf00      	nop
 800ced2:	e7fe      	b.n	800ced2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ced4:	f001 f91e 	bl	800e114 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ced8:	4b39      	ldr	r3, [pc, #228]	; (800cfc0 <xTaskResumeAll+0x118>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	3b01      	subs	r3, #1
 800cede:	4a38      	ldr	r2, [pc, #224]	; (800cfc0 <xTaskResumeAll+0x118>)
 800cee0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cee2:	4b37      	ldr	r3, [pc, #220]	; (800cfc0 <xTaskResumeAll+0x118>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d162      	bne.n	800cfb0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ceea:	4b36      	ldr	r3, [pc, #216]	; (800cfc4 <xTaskResumeAll+0x11c>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d05e      	beq.n	800cfb0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cef2:	e02f      	b.n	800cf54 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cef4:	4b34      	ldr	r3, [pc, #208]	; (800cfc8 <xTaskResumeAll+0x120>)
 800cef6:	68db      	ldr	r3, [r3, #12]
 800cef8:	68db      	ldr	r3, [r3, #12]
 800cefa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	3318      	adds	r3, #24
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7ff f851 	bl	800bfa8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	3304      	adds	r3, #4
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7ff f84c 	bl	800bfa8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf14:	4b2d      	ldr	r3, [pc, #180]	; (800cfcc <xTaskResumeAll+0x124>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d903      	bls.n	800cf24 <xTaskResumeAll+0x7c>
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf20:	4a2a      	ldr	r2, [pc, #168]	; (800cfcc <xTaskResumeAll+0x124>)
 800cf22:	6013      	str	r3, [r2, #0]
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf28:	4613      	mov	r3, r2
 800cf2a:	009b      	lsls	r3, r3, #2
 800cf2c:	4413      	add	r3, r2
 800cf2e:	009b      	lsls	r3, r3, #2
 800cf30:	4a27      	ldr	r2, [pc, #156]	; (800cfd0 <xTaskResumeAll+0x128>)
 800cf32:	441a      	add	r2, r3
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	3304      	adds	r3, #4
 800cf38:	4619      	mov	r1, r3
 800cf3a:	4610      	mov	r0, r2
 800cf3c:	f7fe ffd7 	bl	800beee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf44:	4b23      	ldr	r3, [pc, #140]	; (800cfd4 <xTaskResumeAll+0x12c>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d302      	bcc.n	800cf54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cf4e:	4b22      	ldr	r3, [pc, #136]	; (800cfd8 <xTaskResumeAll+0x130>)
 800cf50:	2201      	movs	r2, #1
 800cf52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cf54:	4b1c      	ldr	r3, [pc, #112]	; (800cfc8 <xTaskResumeAll+0x120>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d1cb      	bne.n	800cef4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d001      	beq.n	800cf66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cf62:	f000 fb5f 	bl	800d624 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cf66:	4b1d      	ldr	r3, [pc, #116]	; (800cfdc <xTaskResumeAll+0x134>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d010      	beq.n	800cf94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cf72:	f000 f847 	bl	800d004 <xTaskIncrementTick>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d002      	beq.n	800cf82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cf7c:	4b16      	ldr	r3, [pc, #88]	; (800cfd8 <xTaskResumeAll+0x130>)
 800cf7e:	2201      	movs	r2, #1
 800cf80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	3b01      	subs	r3, #1
 800cf86:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d1f1      	bne.n	800cf72 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cf8e:	4b13      	ldr	r3, [pc, #76]	; (800cfdc <xTaskResumeAll+0x134>)
 800cf90:	2200      	movs	r2, #0
 800cf92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cf94:	4b10      	ldr	r3, [pc, #64]	; (800cfd8 <xTaskResumeAll+0x130>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d009      	beq.n	800cfb0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cfa0:	4b0f      	ldr	r3, [pc, #60]	; (800cfe0 <xTaskResumeAll+0x138>)
 800cfa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfa6:	601a      	str	r2, [r3, #0]
 800cfa8:	f3bf 8f4f 	dsb	sy
 800cfac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cfb0:	f001 f8e0 	bl	800e174 <vPortExitCritical>

	return xAlreadyYielded;
 800cfb4:	68bb      	ldr	r3, [r7, #8]
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3710      	adds	r7, #16
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	240091f8 	.word	0x240091f8
 800cfc4:	240091d0 	.word	0x240091d0
 800cfc8:	24009190 	.word	0x24009190
 800cfcc:	240091d8 	.word	0x240091d8
 800cfd0:	24008d00 	.word	0x24008d00
 800cfd4:	24008cfc 	.word	0x24008cfc
 800cfd8:	240091e4 	.word	0x240091e4
 800cfdc:	240091e0 	.word	0x240091e0
 800cfe0:	e000ed04 	.word	0xe000ed04

0800cfe4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cfea:	4b05      	ldr	r3, [pc, #20]	; (800d000 <xTaskGetTickCount+0x1c>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cff0:	687b      	ldr	r3, [r7, #4]
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	370c      	adds	r7, #12
 800cff6:	46bd      	mov	sp, r7
 800cff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffc:	4770      	bx	lr
 800cffe:	bf00      	nop
 800d000:	240091d4 	.word	0x240091d4

0800d004 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b086      	sub	sp, #24
 800d008:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d00a:	2300      	movs	r3, #0
 800d00c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d00e:	4b4f      	ldr	r3, [pc, #316]	; (800d14c <xTaskIncrementTick+0x148>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	2b00      	cmp	r3, #0
 800d014:	f040 808f 	bne.w	800d136 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d018:	4b4d      	ldr	r3, [pc, #308]	; (800d150 <xTaskIncrementTick+0x14c>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	3301      	adds	r3, #1
 800d01e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d020:	4a4b      	ldr	r2, [pc, #300]	; (800d150 <xTaskIncrementTick+0x14c>)
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d120      	bne.n	800d06e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d02c:	4b49      	ldr	r3, [pc, #292]	; (800d154 <xTaskIncrementTick+0x150>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d00a      	beq.n	800d04c <xTaskIncrementTick+0x48>
	__asm volatile
 800d036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d03a:	f383 8811 	msr	BASEPRI, r3
 800d03e:	f3bf 8f6f 	isb	sy
 800d042:	f3bf 8f4f 	dsb	sy
 800d046:	603b      	str	r3, [r7, #0]
}
 800d048:	bf00      	nop
 800d04a:	e7fe      	b.n	800d04a <xTaskIncrementTick+0x46>
 800d04c:	4b41      	ldr	r3, [pc, #260]	; (800d154 <xTaskIncrementTick+0x150>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	60fb      	str	r3, [r7, #12]
 800d052:	4b41      	ldr	r3, [pc, #260]	; (800d158 <xTaskIncrementTick+0x154>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	4a3f      	ldr	r2, [pc, #252]	; (800d154 <xTaskIncrementTick+0x150>)
 800d058:	6013      	str	r3, [r2, #0]
 800d05a:	4a3f      	ldr	r2, [pc, #252]	; (800d158 <xTaskIncrementTick+0x154>)
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	6013      	str	r3, [r2, #0]
 800d060:	4b3e      	ldr	r3, [pc, #248]	; (800d15c <xTaskIncrementTick+0x158>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	3301      	adds	r3, #1
 800d066:	4a3d      	ldr	r2, [pc, #244]	; (800d15c <xTaskIncrementTick+0x158>)
 800d068:	6013      	str	r3, [r2, #0]
 800d06a:	f000 fadb 	bl	800d624 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d06e:	4b3c      	ldr	r3, [pc, #240]	; (800d160 <xTaskIncrementTick+0x15c>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	693a      	ldr	r2, [r7, #16]
 800d074:	429a      	cmp	r2, r3
 800d076:	d349      	bcc.n	800d10c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d078:	4b36      	ldr	r3, [pc, #216]	; (800d154 <xTaskIncrementTick+0x150>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d104      	bne.n	800d08c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d082:	4b37      	ldr	r3, [pc, #220]	; (800d160 <xTaskIncrementTick+0x15c>)
 800d084:	f04f 32ff 	mov.w	r2, #4294967295
 800d088:	601a      	str	r2, [r3, #0]
					break;
 800d08a:	e03f      	b.n	800d10c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d08c:	4b31      	ldr	r3, [pc, #196]	; (800d154 <xTaskIncrementTick+0x150>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	68db      	ldr	r3, [r3, #12]
 800d092:	68db      	ldr	r3, [r3, #12]
 800d094:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d09c:	693a      	ldr	r2, [r7, #16]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d203      	bcs.n	800d0ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d0a4:	4a2e      	ldr	r2, [pc, #184]	; (800d160 <xTaskIncrementTick+0x15c>)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d0aa:	e02f      	b.n	800d10c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	3304      	adds	r3, #4
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7fe ff79 	bl	800bfa8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d004      	beq.n	800d0c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	3318      	adds	r3, #24
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7fe ff70 	bl	800bfa8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0cc:	4b25      	ldr	r3, [pc, #148]	; (800d164 <xTaskIncrementTick+0x160>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d903      	bls.n	800d0dc <xTaskIncrementTick+0xd8>
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d8:	4a22      	ldr	r2, [pc, #136]	; (800d164 <xTaskIncrementTick+0x160>)
 800d0da:	6013      	str	r3, [r2, #0]
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0e0:	4613      	mov	r3, r2
 800d0e2:	009b      	lsls	r3, r3, #2
 800d0e4:	4413      	add	r3, r2
 800d0e6:	009b      	lsls	r3, r3, #2
 800d0e8:	4a1f      	ldr	r2, [pc, #124]	; (800d168 <xTaskIncrementTick+0x164>)
 800d0ea:	441a      	add	r2, r3
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	3304      	adds	r3, #4
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	4610      	mov	r0, r2
 800d0f4:	f7fe fefb 	bl	800beee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0fc:	4b1b      	ldr	r3, [pc, #108]	; (800d16c <xTaskIncrementTick+0x168>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d102:	429a      	cmp	r2, r3
 800d104:	d3b8      	bcc.n	800d078 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d106:	2301      	movs	r3, #1
 800d108:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d10a:	e7b5      	b.n	800d078 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d10c:	4b17      	ldr	r3, [pc, #92]	; (800d16c <xTaskIncrementTick+0x168>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d112:	4915      	ldr	r1, [pc, #84]	; (800d168 <xTaskIncrementTick+0x164>)
 800d114:	4613      	mov	r3, r2
 800d116:	009b      	lsls	r3, r3, #2
 800d118:	4413      	add	r3, r2
 800d11a:	009b      	lsls	r3, r3, #2
 800d11c:	440b      	add	r3, r1
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	2b01      	cmp	r3, #1
 800d122:	d901      	bls.n	800d128 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d124:	2301      	movs	r3, #1
 800d126:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d128:	4b11      	ldr	r3, [pc, #68]	; (800d170 <xTaskIncrementTick+0x16c>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d007      	beq.n	800d140 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d130:	2301      	movs	r3, #1
 800d132:	617b      	str	r3, [r7, #20]
 800d134:	e004      	b.n	800d140 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d136:	4b0f      	ldr	r3, [pc, #60]	; (800d174 <xTaskIncrementTick+0x170>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	3301      	adds	r3, #1
 800d13c:	4a0d      	ldr	r2, [pc, #52]	; (800d174 <xTaskIncrementTick+0x170>)
 800d13e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d140:	697b      	ldr	r3, [r7, #20]
}
 800d142:	4618      	mov	r0, r3
 800d144:	3718      	adds	r7, #24
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop
 800d14c:	240091f8 	.word	0x240091f8
 800d150:	240091d4 	.word	0x240091d4
 800d154:	24009188 	.word	0x24009188
 800d158:	2400918c 	.word	0x2400918c
 800d15c:	240091e8 	.word	0x240091e8
 800d160:	240091f0 	.word	0x240091f0
 800d164:	240091d8 	.word	0x240091d8
 800d168:	24008d00 	.word	0x24008d00
 800d16c:	24008cfc 	.word	0x24008cfc
 800d170:	240091e4 	.word	0x240091e4
 800d174:	240091e0 	.word	0x240091e0

0800d178 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d178:	b480      	push	{r7}
 800d17a:	b085      	sub	sp, #20
 800d17c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d17e:	4b2a      	ldr	r3, [pc, #168]	; (800d228 <vTaskSwitchContext+0xb0>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d003      	beq.n	800d18e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d186:	4b29      	ldr	r3, [pc, #164]	; (800d22c <vTaskSwitchContext+0xb4>)
 800d188:	2201      	movs	r2, #1
 800d18a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d18c:	e046      	b.n	800d21c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d18e:	4b27      	ldr	r3, [pc, #156]	; (800d22c <vTaskSwitchContext+0xb4>)
 800d190:	2200      	movs	r2, #0
 800d192:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d194:	4b26      	ldr	r3, [pc, #152]	; (800d230 <vTaskSwitchContext+0xb8>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	60fb      	str	r3, [r7, #12]
 800d19a:	e010      	b.n	800d1be <vTaskSwitchContext+0x46>
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d10a      	bne.n	800d1b8 <vTaskSwitchContext+0x40>
	__asm volatile
 800d1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a6:	f383 8811 	msr	BASEPRI, r3
 800d1aa:	f3bf 8f6f 	isb	sy
 800d1ae:	f3bf 8f4f 	dsb	sy
 800d1b2:	607b      	str	r3, [r7, #4]
}
 800d1b4:	bf00      	nop
 800d1b6:	e7fe      	b.n	800d1b6 <vTaskSwitchContext+0x3e>
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	3b01      	subs	r3, #1
 800d1bc:	60fb      	str	r3, [r7, #12]
 800d1be:	491d      	ldr	r1, [pc, #116]	; (800d234 <vTaskSwitchContext+0xbc>)
 800d1c0:	68fa      	ldr	r2, [r7, #12]
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	4413      	add	r3, r2
 800d1c8:	009b      	lsls	r3, r3, #2
 800d1ca:	440b      	add	r3, r1
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d0e4      	beq.n	800d19c <vTaskSwitchContext+0x24>
 800d1d2:	68fa      	ldr	r2, [r7, #12]
 800d1d4:	4613      	mov	r3, r2
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	4413      	add	r3, r2
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	4a15      	ldr	r2, [pc, #84]	; (800d234 <vTaskSwitchContext+0xbc>)
 800d1de:	4413      	add	r3, r2
 800d1e0:	60bb      	str	r3, [r7, #8]
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	685a      	ldr	r2, [r3, #4]
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	605a      	str	r2, [r3, #4]
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	685a      	ldr	r2, [r3, #4]
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	3308      	adds	r3, #8
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d104      	bne.n	800d202 <vTaskSwitchContext+0x8a>
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	685a      	ldr	r2, [r3, #4]
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	605a      	str	r2, [r3, #4]
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	685b      	ldr	r3, [r3, #4]
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	4a0b      	ldr	r2, [pc, #44]	; (800d238 <vTaskSwitchContext+0xc0>)
 800d20a:	6013      	str	r3, [r2, #0]
 800d20c:	4a08      	ldr	r2, [pc, #32]	; (800d230 <vTaskSwitchContext+0xb8>)
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d212:	4b09      	ldr	r3, [pc, #36]	; (800d238 <vTaskSwitchContext+0xc0>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	3354      	adds	r3, #84	; 0x54
 800d218:	4a08      	ldr	r2, [pc, #32]	; (800d23c <vTaskSwitchContext+0xc4>)
 800d21a:	6013      	str	r3, [r2, #0]
}
 800d21c:	bf00      	nop
 800d21e:	3714      	adds	r7, #20
 800d220:	46bd      	mov	sp, r7
 800d222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d226:	4770      	bx	lr
 800d228:	240091f8 	.word	0x240091f8
 800d22c:	240091e4 	.word	0x240091e4
 800d230:	240091d8 	.word	0x240091d8
 800d234:	24008d00 	.word	0x24008d00
 800d238:	24008cfc 	.word	0x24008cfc
 800d23c:	24000170 	.word	0x24000170

0800d240 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b084      	sub	sp, #16
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d10a      	bne.n	800d266 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d254:	f383 8811 	msr	BASEPRI, r3
 800d258:	f3bf 8f6f 	isb	sy
 800d25c:	f3bf 8f4f 	dsb	sy
 800d260:	60fb      	str	r3, [r7, #12]
}
 800d262:	bf00      	nop
 800d264:	e7fe      	b.n	800d264 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d266:	4b07      	ldr	r3, [pc, #28]	; (800d284 <vTaskPlaceOnEventList+0x44>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	3318      	adds	r3, #24
 800d26c:	4619      	mov	r1, r3
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f7fe fe61 	bl	800bf36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d274:	2101      	movs	r1, #1
 800d276:	6838      	ldr	r0, [r7, #0]
 800d278:	f000 fa80 	bl	800d77c <prvAddCurrentTaskToDelayedList>
}
 800d27c:	bf00      	nop
 800d27e:	3710      	adds	r7, #16
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}
 800d284:	24008cfc 	.word	0x24008cfc

0800d288 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b086      	sub	sp, #24
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	60f8      	str	r0, [r7, #12]
 800d290:	60b9      	str	r1, [r7, #8]
 800d292:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d10a      	bne.n	800d2b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29e:	f383 8811 	msr	BASEPRI, r3
 800d2a2:	f3bf 8f6f 	isb	sy
 800d2a6:	f3bf 8f4f 	dsb	sy
 800d2aa:	617b      	str	r3, [r7, #20]
}
 800d2ac:	bf00      	nop
 800d2ae:	e7fe      	b.n	800d2ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d2b0:	4b0a      	ldr	r3, [pc, #40]	; (800d2dc <vTaskPlaceOnEventListRestricted+0x54>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	3318      	adds	r3, #24
 800d2b6:	4619      	mov	r1, r3
 800d2b8:	68f8      	ldr	r0, [r7, #12]
 800d2ba:	f7fe fe18 	bl	800beee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d002      	beq.n	800d2ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800d2c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d2ca:	6879      	ldr	r1, [r7, #4]
 800d2cc:	68b8      	ldr	r0, [r7, #8]
 800d2ce:	f000 fa55 	bl	800d77c <prvAddCurrentTaskToDelayedList>
	}
 800d2d2:	bf00      	nop
 800d2d4:	3718      	adds	r7, #24
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	24008cfc 	.word	0x24008cfc

0800d2e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b086      	sub	sp, #24
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	68db      	ldr	r3, [r3, #12]
 800d2ec:	68db      	ldr	r3, [r3, #12]
 800d2ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d10a      	bne.n	800d30c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fa:	f383 8811 	msr	BASEPRI, r3
 800d2fe:	f3bf 8f6f 	isb	sy
 800d302:	f3bf 8f4f 	dsb	sy
 800d306:	60fb      	str	r3, [r7, #12]
}
 800d308:	bf00      	nop
 800d30a:	e7fe      	b.n	800d30a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	3318      	adds	r3, #24
 800d310:	4618      	mov	r0, r3
 800d312:	f7fe fe49 	bl	800bfa8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d316:	4b1e      	ldr	r3, [pc, #120]	; (800d390 <xTaskRemoveFromEventList+0xb0>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d11d      	bne.n	800d35a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	3304      	adds	r3, #4
 800d322:	4618      	mov	r0, r3
 800d324:	f7fe fe40 	bl	800bfa8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d32c:	4b19      	ldr	r3, [pc, #100]	; (800d394 <xTaskRemoveFromEventList+0xb4>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	429a      	cmp	r2, r3
 800d332:	d903      	bls.n	800d33c <xTaskRemoveFromEventList+0x5c>
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d338:	4a16      	ldr	r2, [pc, #88]	; (800d394 <xTaskRemoveFromEventList+0xb4>)
 800d33a:	6013      	str	r3, [r2, #0]
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d340:	4613      	mov	r3, r2
 800d342:	009b      	lsls	r3, r3, #2
 800d344:	4413      	add	r3, r2
 800d346:	009b      	lsls	r3, r3, #2
 800d348:	4a13      	ldr	r2, [pc, #76]	; (800d398 <xTaskRemoveFromEventList+0xb8>)
 800d34a:	441a      	add	r2, r3
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	3304      	adds	r3, #4
 800d350:	4619      	mov	r1, r3
 800d352:	4610      	mov	r0, r2
 800d354:	f7fe fdcb 	bl	800beee <vListInsertEnd>
 800d358:	e005      	b.n	800d366 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	3318      	adds	r3, #24
 800d35e:	4619      	mov	r1, r3
 800d360:	480e      	ldr	r0, [pc, #56]	; (800d39c <xTaskRemoveFromEventList+0xbc>)
 800d362:	f7fe fdc4 	bl	800beee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d36a:	4b0d      	ldr	r3, [pc, #52]	; (800d3a0 <xTaskRemoveFromEventList+0xc0>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d370:	429a      	cmp	r2, r3
 800d372:	d905      	bls.n	800d380 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d374:	2301      	movs	r3, #1
 800d376:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d378:	4b0a      	ldr	r3, [pc, #40]	; (800d3a4 <xTaskRemoveFromEventList+0xc4>)
 800d37a:	2201      	movs	r2, #1
 800d37c:	601a      	str	r2, [r3, #0]
 800d37e:	e001      	b.n	800d384 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d380:	2300      	movs	r3, #0
 800d382:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d384:	697b      	ldr	r3, [r7, #20]
}
 800d386:	4618      	mov	r0, r3
 800d388:	3718      	adds	r7, #24
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	240091f8 	.word	0x240091f8
 800d394:	240091d8 	.word	0x240091d8
 800d398:	24008d00 	.word	0x24008d00
 800d39c:	24009190 	.word	0x24009190
 800d3a0:	24008cfc 	.word	0x24008cfc
 800d3a4:	240091e4 	.word	0x240091e4

0800d3a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b083      	sub	sp, #12
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d3b0:	4b06      	ldr	r3, [pc, #24]	; (800d3cc <vTaskInternalSetTimeOutState+0x24>)
 800d3b2:	681a      	ldr	r2, [r3, #0]
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d3b8:	4b05      	ldr	r3, [pc, #20]	; (800d3d0 <vTaskInternalSetTimeOutState+0x28>)
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	605a      	str	r2, [r3, #4]
}
 800d3c0:	bf00      	nop
 800d3c2:	370c      	adds	r7, #12
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ca:	4770      	bx	lr
 800d3cc:	240091e8 	.word	0x240091e8
 800d3d0:	240091d4 	.word	0x240091d4

0800d3d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b088      	sub	sp, #32
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d10a      	bne.n	800d3fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e8:	f383 8811 	msr	BASEPRI, r3
 800d3ec:	f3bf 8f6f 	isb	sy
 800d3f0:	f3bf 8f4f 	dsb	sy
 800d3f4:	613b      	str	r3, [r7, #16]
}
 800d3f6:	bf00      	nop
 800d3f8:	e7fe      	b.n	800d3f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d10a      	bne.n	800d416 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d404:	f383 8811 	msr	BASEPRI, r3
 800d408:	f3bf 8f6f 	isb	sy
 800d40c:	f3bf 8f4f 	dsb	sy
 800d410:	60fb      	str	r3, [r7, #12]
}
 800d412:	bf00      	nop
 800d414:	e7fe      	b.n	800d414 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d416:	f000 fe7d 	bl	800e114 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d41a:	4b1d      	ldr	r3, [pc, #116]	; (800d490 <xTaskCheckForTimeOut+0xbc>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	69ba      	ldr	r2, [r7, #24]
 800d426:	1ad3      	subs	r3, r2, r3
 800d428:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d432:	d102      	bne.n	800d43a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d434:	2300      	movs	r3, #0
 800d436:	61fb      	str	r3, [r7, #28]
 800d438:	e023      	b.n	800d482 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	4b15      	ldr	r3, [pc, #84]	; (800d494 <xTaskCheckForTimeOut+0xc0>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	429a      	cmp	r2, r3
 800d444:	d007      	beq.n	800d456 <xTaskCheckForTimeOut+0x82>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	685b      	ldr	r3, [r3, #4]
 800d44a:	69ba      	ldr	r2, [r7, #24]
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d302      	bcc.n	800d456 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d450:	2301      	movs	r3, #1
 800d452:	61fb      	str	r3, [r7, #28]
 800d454:	e015      	b.n	800d482 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	697a      	ldr	r2, [r7, #20]
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d20b      	bcs.n	800d478 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	1ad2      	subs	r2, r2, r3
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f7ff ff9b 	bl	800d3a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d472:	2300      	movs	r3, #0
 800d474:	61fb      	str	r3, [r7, #28]
 800d476:	e004      	b.n	800d482 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	2200      	movs	r2, #0
 800d47c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d47e:	2301      	movs	r3, #1
 800d480:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d482:	f000 fe77 	bl	800e174 <vPortExitCritical>

	return xReturn;
 800d486:	69fb      	ldr	r3, [r7, #28]
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3720      	adds	r7, #32
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}
 800d490:	240091d4 	.word	0x240091d4
 800d494:	240091e8 	.word	0x240091e8

0800d498 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d498:	b480      	push	{r7}
 800d49a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d49c:	4b03      	ldr	r3, [pc, #12]	; (800d4ac <vTaskMissedYield+0x14>)
 800d49e:	2201      	movs	r2, #1
 800d4a0:	601a      	str	r2, [r3, #0]
}
 800d4a2:	bf00      	nop
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr
 800d4ac:	240091e4 	.word	0x240091e4

0800d4b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d4b8:	f000 f852 	bl	800d560 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d4bc:	4b06      	ldr	r3, [pc, #24]	; (800d4d8 <prvIdleTask+0x28>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d9f9      	bls.n	800d4b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d4c4:	4b05      	ldr	r3, [pc, #20]	; (800d4dc <prvIdleTask+0x2c>)
 800d4c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4ca:	601a      	str	r2, [r3, #0]
 800d4cc:	f3bf 8f4f 	dsb	sy
 800d4d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d4d4:	e7f0      	b.n	800d4b8 <prvIdleTask+0x8>
 800d4d6:	bf00      	nop
 800d4d8:	24008d00 	.word	0x24008d00
 800d4dc:	e000ed04 	.word	0xe000ed04

0800d4e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b082      	sub	sp, #8
 800d4e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	607b      	str	r3, [r7, #4]
 800d4ea:	e00c      	b.n	800d506 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	4613      	mov	r3, r2
 800d4f0:	009b      	lsls	r3, r3, #2
 800d4f2:	4413      	add	r3, r2
 800d4f4:	009b      	lsls	r3, r3, #2
 800d4f6:	4a12      	ldr	r2, [pc, #72]	; (800d540 <prvInitialiseTaskLists+0x60>)
 800d4f8:	4413      	add	r3, r2
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7fe fcca 	bl	800be94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	3301      	adds	r3, #1
 800d504:	607b      	str	r3, [r7, #4]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2b37      	cmp	r3, #55	; 0x37
 800d50a:	d9ef      	bls.n	800d4ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d50c:	480d      	ldr	r0, [pc, #52]	; (800d544 <prvInitialiseTaskLists+0x64>)
 800d50e:	f7fe fcc1 	bl	800be94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d512:	480d      	ldr	r0, [pc, #52]	; (800d548 <prvInitialiseTaskLists+0x68>)
 800d514:	f7fe fcbe 	bl	800be94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d518:	480c      	ldr	r0, [pc, #48]	; (800d54c <prvInitialiseTaskLists+0x6c>)
 800d51a:	f7fe fcbb 	bl	800be94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d51e:	480c      	ldr	r0, [pc, #48]	; (800d550 <prvInitialiseTaskLists+0x70>)
 800d520:	f7fe fcb8 	bl	800be94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d524:	480b      	ldr	r0, [pc, #44]	; (800d554 <prvInitialiseTaskLists+0x74>)
 800d526:	f7fe fcb5 	bl	800be94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d52a:	4b0b      	ldr	r3, [pc, #44]	; (800d558 <prvInitialiseTaskLists+0x78>)
 800d52c:	4a05      	ldr	r2, [pc, #20]	; (800d544 <prvInitialiseTaskLists+0x64>)
 800d52e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d530:	4b0a      	ldr	r3, [pc, #40]	; (800d55c <prvInitialiseTaskLists+0x7c>)
 800d532:	4a05      	ldr	r2, [pc, #20]	; (800d548 <prvInitialiseTaskLists+0x68>)
 800d534:	601a      	str	r2, [r3, #0]
}
 800d536:	bf00      	nop
 800d538:	3708      	adds	r7, #8
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}
 800d53e:	bf00      	nop
 800d540:	24008d00 	.word	0x24008d00
 800d544:	24009160 	.word	0x24009160
 800d548:	24009174 	.word	0x24009174
 800d54c:	24009190 	.word	0x24009190
 800d550:	240091a4 	.word	0x240091a4
 800d554:	240091bc 	.word	0x240091bc
 800d558:	24009188 	.word	0x24009188
 800d55c:	2400918c 	.word	0x2400918c

0800d560 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b082      	sub	sp, #8
 800d564:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d566:	e019      	b.n	800d59c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d568:	f000 fdd4 	bl	800e114 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d56c:	4b10      	ldr	r3, [pc, #64]	; (800d5b0 <prvCheckTasksWaitingTermination+0x50>)
 800d56e:	68db      	ldr	r3, [r3, #12]
 800d570:	68db      	ldr	r3, [r3, #12]
 800d572:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	3304      	adds	r3, #4
 800d578:	4618      	mov	r0, r3
 800d57a:	f7fe fd15 	bl	800bfa8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d57e:	4b0d      	ldr	r3, [pc, #52]	; (800d5b4 <prvCheckTasksWaitingTermination+0x54>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	3b01      	subs	r3, #1
 800d584:	4a0b      	ldr	r2, [pc, #44]	; (800d5b4 <prvCheckTasksWaitingTermination+0x54>)
 800d586:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d588:	4b0b      	ldr	r3, [pc, #44]	; (800d5b8 <prvCheckTasksWaitingTermination+0x58>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	3b01      	subs	r3, #1
 800d58e:	4a0a      	ldr	r2, [pc, #40]	; (800d5b8 <prvCheckTasksWaitingTermination+0x58>)
 800d590:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d592:	f000 fdef 	bl	800e174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 f810 	bl	800d5bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d59c:	4b06      	ldr	r3, [pc, #24]	; (800d5b8 <prvCheckTasksWaitingTermination+0x58>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d1e1      	bne.n	800d568 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d5a4:	bf00      	nop
 800d5a6:	bf00      	nop
 800d5a8:	3708      	adds	r7, #8
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}
 800d5ae:	bf00      	nop
 800d5b0:	240091a4 	.word	0x240091a4
 800d5b4:	240091d0 	.word	0x240091d0
 800d5b8:	240091b8 	.word	0x240091b8

0800d5bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	3354      	adds	r3, #84	; 0x54
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f005 fe93 	bl	80132f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d108      	bne.n	800d5ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f000 ff87 	bl	800e4f0 <vPortFree>
				vPortFree( pxTCB );
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 ff84 	bl	800e4f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d5e8:	e018      	b.n	800d61c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d5f0:	2b01      	cmp	r3, #1
 800d5f2:	d103      	bne.n	800d5fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f000 ff7b 	bl	800e4f0 <vPortFree>
	}
 800d5fa:	e00f      	b.n	800d61c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d602:	2b02      	cmp	r3, #2
 800d604:	d00a      	beq.n	800d61c <prvDeleteTCB+0x60>
	__asm volatile
 800d606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d60a:	f383 8811 	msr	BASEPRI, r3
 800d60e:	f3bf 8f6f 	isb	sy
 800d612:	f3bf 8f4f 	dsb	sy
 800d616:	60fb      	str	r3, [r7, #12]
}
 800d618:	bf00      	nop
 800d61a:	e7fe      	b.n	800d61a <prvDeleteTCB+0x5e>
	}
 800d61c:	bf00      	nop
 800d61e:	3710      	adds	r7, #16
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d624:	b480      	push	{r7}
 800d626:	b083      	sub	sp, #12
 800d628:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d62a:	4b0c      	ldr	r3, [pc, #48]	; (800d65c <prvResetNextTaskUnblockTime+0x38>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d104      	bne.n	800d63e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d634:	4b0a      	ldr	r3, [pc, #40]	; (800d660 <prvResetNextTaskUnblockTime+0x3c>)
 800d636:	f04f 32ff 	mov.w	r2, #4294967295
 800d63a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d63c:	e008      	b.n	800d650 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d63e:	4b07      	ldr	r3, [pc, #28]	; (800d65c <prvResetNextTaskUnblockTime+0x38>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	68db      	ldr	r3, [r3, #12]
 800d644:	68db      	ldr	r3, [r3, #12]
 800d646:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	685b      	ldr	r3, [r3, #4]
 800d64c:	4a04      	ldr	r2, [pc, #16]	; (800d660 <prvResetNextTaskUnblockTime+0x3c>)
 800d64e:	6013      	str	r3, [r2, #0]
}
 800d650:	bf00      	nop
 800d652:	370c      	adds	r7, #12
 800d654:	46bd      	mov	sp, r7
 800d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65a:	4770      	bx	lr
 800d65c:	24009188 	.word	0x24009188
 800d660:	240091f0 	.word	0x240091f0

0800d664 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d66a:	4b0b      	ldr	r3, [pc, #44]	; (800d698 <xTaskGetSchedulerState+0x34>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d102      	bne.n	800d678 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d672:	2301      	movs	r3, #1
 800d674:	607b      	str	r3, [r7, #4]
 800d676:	e008      	b.n	800d68a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d678:	4b08      	ldr	r3, [pc, #32]	; (800d69c <xTaskGetSchedulerState+0x38>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d102      	bne.n	800d686 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d680:	2302      	movs	r3, #2
 800d682:	607b      	str	r3, [r7, #4]
 800d684:	e001      	b.n	800d68a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d686:	2300      	movs	r3, #0
 800d688:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d68a:	687b      	ldr	r3, [r7, #4]
	}
 800d68c:	4618      	mov	r0, r3
 800d68e:	370c      	adds	r7, #12
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr
 800d698:	240091dc 	.word	0x240091dc
 800d69c:	240091f8 	.word	0x240091f8

0800d6a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b086      	sub	sp, #24
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d056      	beq.n	800d764 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d6b6:	4b2e      	ldr	r3, [pc, #184]	; (800d770 <xTaskPriorityDisinherit+0xd0>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	693a      	ldr	r2, [r7, #16]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d00a      	beq.n	800d6d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c4:	f383 8811 	msr	BASEPRI, r3
 800d6c8:	f3bf 8f6f 	isb	sy
 800d6cc:	f3bf 8f4f 	dsb	sy
 800d6d0:	60fb      	str	r3, [r7, #12]
}
 800d6d2:	bf00      	nop
 800d6d4:	e7fe      	b.n	800d6d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d6d6:	693b      	ldr	r3, [r7, #16]
 800d6d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d10a      	bne.n	800d6f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e2:	f383 8811 	msr	BASEPRI, r3
 800d6e6:	f3bf 8f6f 	isb	sy
 800d6ea:	f3bf 8f4f 	dsb	sy
 800d6ee:	60bb      	str	r3, [r7, #8]
}
 800d6f0:	bf00      	nop
 800d6f2:	e7fe      	b.n	800d6f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6f8:	1e5a      	subs	r2, r3, #1
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d706:	429a      	cmp	r2, r3
 800d708:	d02c      	beq.n	800d764 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d128      	bne.n	800d764 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	3304      	adds	r3, #4
 800d716:	4618      	mov	r0, r3
 800d718:	f7fe fc46 	bl	800bfa8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d728:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d734:	4b0f      	ldr	r3, [pc, #60]	; (800d774 <xTaskPriorityDisinherit+0xd4>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	429a      	cmp	r2, r3
 800d73a:	d903      	bls.n	800d744 <xTaskPriorityDisinherit+0xa4>
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d740:	4a0c      	ldr	r2, [pc, #48]	; (800d774 <xTaskPriorityDisinherit+0xd4>)
 800d742:	6013      	str	r3, [r2, #0]
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d748:	4613      	mov	r3, r2
 800d74a:	009b      	lsls	r3, r3, #2
 800d74c:	4413      	add	r3, r2
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	4a09      	ldr	r2, [pc, #36]	; (800d778 <xTaskPriorityDisinherit+0xd8>)
 800d752:	441a      	add	r2, r3
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	3304      	adds	r3, #4
 800d758:	4619      	mov	r1, r3
 800d75a:	4610      	mov	r0, r2
 800d75c:	f7fe fbc7 	bl	800beee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d760:	2301      	movs	r3, #1
 800d762:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d764:	697b      	ldr	r3, [r7, #20]
	}
 800d766:	4618      	mov	r0, r3
 800d768:	3718      	adds	r7, #24
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
 800d76e:	bf00      	nop
 800d770:	24008cfc 	.word	0x24008cfc
 800d774:	240091d8 	.word	0x240091d8
 800d778:	24008d00 	.word	0x24008d00

0800d77c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b084      	sub	sp, #16
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d786:	4b21      	ldr	r3, [pc, #132]	; (800d80c <prvAddCurrentTaskToDelayedList+0x90>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d78c:	4b20      	ldr	r3, [pc, #128]	; (800d810 <prvAddCurrentTaskToDelayedList+0x94>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	3304      	adds	r3, #4
 800d792:	4618      	mov	r0, r3
 800d794:	f7fe fc08 	bl	800bfa8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d79e:	d10a      	bne.n	800d7b6 <prvAddCurrentTaskToDelayedList+0x3a>
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d007      	beq.n	800d7b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d7a6:	4b1a      	ldr	r3, [pc, #104]	; (800d810 <prvAddCurrentTaskToDelayedList+0x94>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	3304      	adds	r3, #4
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	4819      	ldr	r0, [pc, #100]	; (800d814 <prvAddCurrentTaskToDelayedList+0x98>)
 800d7b0:	f7fe fb9d 	bl	800beee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d7b4:	e026      	b.n	800d804 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d7b6:	68fa      	ldr	r2, [r7, #12]
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	4413      	add	r3, r2
 800d7bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d7be:	4b14      	ldr	r3, [pc, #80]	; (800d810 <prvAddCurrentTaskToDelayedList+0x94>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	68ba      	ldr	r2, [r7, #8]
 800d7c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d7c6:	68ba      	ldr	r2, [r7, #8]
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d209      	bcs.n	800d7e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d7ce:	4b12      	ldr	r3, [pc, #72]	; (800d818 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d7d0:	681a      	ldr	r2, [r3, #0]
 800d7d2:	4b0f      	ldr	r3, [pc, #60]	; (800d810 <prvAddCurrentTaskToDelayedList+0x94>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	3304      	adds	r3, #4
 800d7d8:	4619      	mov	r1, r3
 800d7da:	4610      	mov	r0, r2
 800d7dc:	f7fe fbab 	bl	800bf36 <vListInsert>
}
 800d7e0:	e010      	b.n	800d804 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d7e2:	4b0e      	ldr	r3, [pc, #56]	; (800d81c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d7e4:	681a      	ldr	r2, [r3, #0]
 800d7e6:	4b0a      	ldr	r3, [pc, #40]	; (800d810 <prvAddCurrentTaskToDelayedList+0x94>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	3304      	adds	r3, #4
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	4610      	mov	r0, r2
 800d7f0:	f7fe fba1 	bl	800bf36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d7f4:	4b0a      	ldr	r3, [pc, #40]	; (800d820 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	68ba      	ldr	r2, [r7, #8]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d202      	bcs.n	800d804 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d7fe:	4a08      	ldr	r2, [pc, #32]	; (800d820 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	6013      	str	r3, [r2, #0]
}
 800d804:	bf00      	nop
 800d806:	3710      	adds	r7, #16
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}
 800d80c:	240091d4 	.word	0x240091d4
 800d810:	24008cfc 	.word	0x24008cfc
 800d814:	240091bc 	.word	0x240091bc
 800d818:	2400918c 	.word	0x2400918c
 800d81c:	24009188 	.word	0x24009188
 800d820:	240091f0 	.word	0x240091f0

0800d824 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b08a      	sub	sp, #40	; 0x28
 800d828:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d82a:	2300      	movs	r3, #0
 800d82c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d82e:	f000 fb07 	bl	800de40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d832:	4b1c      	ldr	r3, [pc, #112]	; (800d8a4 <xTimerCreateTimerTask+0x80>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d021      	beq.n	800d87e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d83a:	2300      	movs	r3, #0
 800d83c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d83e:	2300      	movs	r3, #0
 800d840:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d842:	1d3a      	adds	r2, r7, #4
 800d844:	f107 0108 	add.w	r1, r7, #8
 800d848:	f107 030c 	add.w	r3, r7, #12
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7fe fb07 	bl	800be60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d852:	6879      	ldr	r1, [r7, #4]
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	68fa      	ldr	r2, [r7, #12]
 800d858:	9202      	str	r2, [sp, #8]
 800d85a:	9301      	str	r3, [sp, #4]
 800d85c:	2302      	movs	r3, #2
 800d85e:	9300      	str	r3, [sp, #0]
 800d860:	2300      	movs	r3, #0
 800d862:	460a      	mov	r2, r1
 800d864:	4910      	ldr	r1, [pc, #64]	; (800d8a8 <xTimerCreateTimerTask+0x84>)
 800d866:	4811      	ldr	r0, [pc, #68]	; (800d8ac <xTimerCreateTimerTask+0x88>)
 800d868:	f7ff f8b4 	bl	800c9d4 <xTaskCreateStatic>
 800d86c:	4603      	mov	r3, r0
 800d86e:	4a10      	ldr	r2, [pc, #64]	; (800d8b0 <xTimerCreateTimerTask+0x8c>)
 800d870:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d872:	4b0f      	ldr	r3, [pc, #60]	; (800d8b0 <xTimerCreateTimerTask+0x8c>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d001      	beq.n	800d87e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d87a:	2301      	movs	r3, #1
 800d87c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d10a      	bne.n	800d89a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d888:	f383 8811 	msr	BASEPRI, r3
 800d88c:	f3bf 8f6f 	isb	sy
 800d890:	f3bf 8f4f 	dsb	sy
 800d894:	613b      	str	r3, [r7, #16]
}
 800d896:	bf00      	nop
 800d898:	e7fe      	b.n	800d898 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d89a:	697b      	ldr	r3, [r7, #20]
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3718      	adds	r7, #24
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}
 800d8a4:	2400922c 	.word	0x2400922c
 800d8a8:	0801533c 	.word	0x0801533c
 800d8ac:	0800d9e9 	.word	0x0800d9e9
 800d8b0:	24009230 	.word	0x24009230

0800d8b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b08a      	sub	sp, #40	; 0x28
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	607a      	str	r2, [r7, #4]
 800d8c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d10a      	bne.n	800d8e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d0:	f383 8811 	msr	BASEPRI, r3
 800d8d4:	f3bf 8f6f 	isb	sy
 800d8d8:	f3bf 8f4f 	dsb	sy
 800d8dc:	623b      	str	r3, [r7, #32]
}
 800d8de:	bf00      	nop
 800d8e0:	e7fe      	b.n	800d8e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d8e2:	4b1a      	ldr	r3, [pc, #104]	; (800d94c <xTimerGenericCommand+0x98>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d02a      	beq.n	800d940 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	2b05      	cmp	r3, #5
 800d8fa:	dc18      	bgt.n	800d92e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d8fc:	f7ff feb2 	bl	800d664 <xTaskGetSchedulerState>
 800d900:	4603      	mov	r3, r0
 800d902:	2b02      	cmp	r3, #2
 800d904:	d109      	bne.n	800d91a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d906:	4b11      	ldr	r3, [pc, #68]	; (800d94c <xTimerGenericCommand+0x98>)
 800d908:	6818      	ldr	r0, [r3, #0]
 800d90a:	f107 0110 	add.w	r1, r7, #16
 800d90e:	2300      	movs	r3, #0
 800d910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d912:	f7fe fc77 	bl	800c204 <xQueueGenericSend>
 800d916:	6278      	str	r0, [r7, #36]	; 0x24
 800d918:	e012      	b.n	800d940 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d91a:	4b0c      	ldr	r3, [pc, #48]	; (800d94c <xTimerGenericCommand+0x98>)
 800d91c:	6818      	ldr	r0, [r3, #0]
 800d91e:	f107 0110 	add.w	r1, r7, #16
 800d922:	2300      	movs	r3, #0
 800d924:	2200      	movs	r2, #0
 800d926:	f7fe fc6d 	bl	800c204 <xQueueGenericSend>
 800d92a:	6278      	str	r0, [r7, #36]	; 0x24
 800d92c:	e008      	b.n	800d940 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d92e:	4b07      	ldr	r3, [pc, #28]	; (800d94c <xTimerGenericCommand+0x98>)
 800d930:	6818      	ldr	r0, [r3, #0]
 800d932:	f107 0110 	add.w	r1, r7, #16
 800d936:	2300      	movs	r3, #0
 800d938:	683a      	ldr	r2, [r7, #0]
 800d93a:	f7fe fd61 	bl	800c400 <xQueueGenericSendFromISR>
 800d93e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d942:	4618      	mov	r0, r3
 800d944:	3728      	adds	r7, #40	; 0x28
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
 800d94a:	bf00      	nop
 800d94c:	2400922c 	.word	0x2400922c

0800d950 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b088      	sub	sp, #32
 800d954:	af02      	add	r7, sp, #8
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d95a:	4b22      	ldr	r3, [pc, #136]	; (800d9e4 <prvProcessExpiredTimer+0x94>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	68db      	ldr	r3, [r3, #12]
 800d960:	68db      	ldr	r3, [r3, #12]
 800d962:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	3304      	adds	r3, #4
 800d968:	4618      	mov	r0, r3
 800d96a:	f7fe fb1d 	bl	800bfa8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d974:	f003 0304 	and.w	r3, r3, #4
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d022      	beq.n	800d9c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	699a      	ldr	r2, [r3, #24]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	18d1      	adds	r1, r2, r3
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	683a      	ldr	r2, [r7, #0]
 800d988:	6978      	ldr	r0, [r7, #20]
 800d98a:	f000 f8d1 	bl	800db30 <prvInsertTimerInActiveList>
 800d98e:	4603      	mov	r3, r0
 800d990:	2b00      	cmp	r3, #0
 800d992:	d01f      	beq.n	800d9d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d994:	2300      	movs	r3, #0
 800d996:	9300      	str	r3, [sp, #0]
 800d998:	2300      	movs	r3, #0
 800d99a:	687a      	ldr	r2, [r7, #4]
 800d99c:	2100      	movs	r1, #0
 800d99e:	6978      	ldr	r0, [r7, #20]
 800d9a0:	f7ff ff88 	bl	800d8b4 <xTimerGenericCommand>
 800d9a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d113      	bne.n	800d9d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b0:	f383 8811 	msr	BASEPRI, r3
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	f3bf 8f4f 	dsb	sy
 800d9bc:	60fb      	str	r3, [r7, #12]
}
 800d9be:	bf00      	nop
 800d9c0:	e7fe      	b.n	800d9c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9c8:	f023 0301 	bic.w	r3, r3, #1
 800d9cc:	b2da      	uxtb	r2, r3
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	6a1b      	ldr	r3, [r3, #32]
 800d9d8:	6978      	ldr	r0, [r7, #20]
 800d9da:	4798      	blx	r3
}
 800d9dc:	bf00      	nop
 800d9de:	3718      	adds	r7, #24
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}
 800d9e4:	24009224 	.word	0x24009224

0800d9e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b084      	sub	sp, #16
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d9f0:	f107 0308 	add.w	r3, r7, #8
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f000 f857 	bl	800daa8 <prvGetNextExpireTime>
 800d9fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	4619      	mov	r1, r3
 800da00:	68f8      	ldr	r0, [r7, #12]
 800da02:	f000 f803 	bl	800da0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800da06:	f000 f8d5 	bl	800dbb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da0a:	e7f1      	b.n	800d9f0 <prvTimerTask+0x8>

0800da0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b084      	sub	sp, #16
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800da16:	f7ff fa39 	bl	800ce8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da1a:	f107 0308 	add.w	r3, r7, #8
 800da1e:	4618      	mov	r0, r3
 800da20:	f000 f866 	bl	800daf0 <prvSampleTimeNow>
 800da24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d130      	bne.n	800da8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d10a      	bne.n	800da48 <prvProcessTimerOrBlockTask+0x3c>
 800da32:	687a      	ldr	r2, [r7, #4]
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	429a      	cmp	r2, r3
 800da38:	d806      	bhi.n	800da48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800da3a:	f7ff fa35 	bl	800cea8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800da3e:	68f9      	ldr	r1, [r7, #12]
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f7ff ff85 	bl	800d950 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800da46:	e024      	b.n	800da92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d008      	beq.n	800da60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800da4e:	4b13      	ldr	r3, [pc, #76]	; (800da9c <prvProcessTimerOrBlockTask+0x90>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d101      	bne.n	800da5c <prvProcessTimerOrBlockTask+0x50>
 800da58:	2301      	movs	r3, #1
 800da5a:	e000      	b.n	800da5e <prvProcessTimerOrBlockTask+0x52>
 800da5c:	2300      	movs	r3, #0
 800da5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800da60:	4b0f      	ldr	r3, [pc, #60]	; (800daa0 <prvProcessTimerOrBlockTask+0x94>)
 800da62:	6818      	ldr	r0, [r3, #0]
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	1ad3      	subs	r3, r2, r3
 800da6a:	683a      	ldr	r2, [r7, #0]
 800da6c:	4619      	mov	r1, r3
 800da6e:	f7fe ff7d 	bl	800c96c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800da72:	f7ff fa19 	bl	800cea8 <xTaskResumeAll>
 800da76:	4603      	mov	r3, r0
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d10a      	bne.n	800da92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800da7c:	4b09      	ldr	r3, [pc, #36]	; (800daa4 <prvProcessTimerOrBlockTask+0x98>)
 800da7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da82:	601a      	str	r2, [r3, #0]
 800da84:	f3bf 8f4f 	dsb	sy
 800da88:	f3bf 8f6f 	isb	sy
}
 800da8c:	e001      	b.n	800da92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800da8e:	f7ff fa0b 	bl	800cea8 <xTaskResumeAll>
}
 800da92:	bf00      	nop
 800da94:	3710      	adds	r7, #16
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	24009228 	.word	0x24009228
 800daa0:	2400922c 	.word	0x2400922c
 800daa4:	e000ed04 	.word	0xe000ed04

0800daa8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800daa8:	b480      	push	{r7}
 800daaa:	b085      	sub	sp, #20
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dab0:	4b0e      	ldr	r3, [pc, #56]	; (800daec <prvGetNextExpireTime+0x44>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d101      	bne.n	800dabe <prvGetNextExpireTime+0x16>
 800daba:	2201      	movs	r2, #1
 800dabc:	e000      	b.n	800dac0 <prvGetNextExpireTime+0x18>
 800dabe:	2200      	movs	r2, #0
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d105      	bne.n	800dad8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dacc:	4b07      	ldr	r3, [pc, #28]	; (800daec <prvGetNextExpireTime+0x44>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	68db      	ldr	r3, [r3, #12]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	60fb      	str	r3, [r7, #12]
 800dad6:	e001      	b.n	800dadc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dad8:	2300      	movs	r3, #0
 800dada:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dadc:	68fb      	ldr	r3, [r7, #12]
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3714      	adds	r7, #20
 800dae2:	46bd      	mov	sp, r7
 800dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae8:	4770      	bx	lr
 800daea:	bf00      	nop
 800daec:	24009224 	.word	0x24009224

0800daf0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b084      	sub	sp, #16
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800daf8:	f7ff fa74 	bl	800cfe4 <xTaskGetTickCount>
 800dafc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dafe:	4b0b      	ldr	r3, [pc, #44]	; (800db2c <prvSampleTimeNow+0x3c>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	68fa      	ldr	r2, [r7, #12]
 800db04:	429a      	cmp	r2, r3
 800db06:	d205      	bcs.n	800db14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800db08:	f000 f936 	bl	800dd78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2201      	movs	r2, #1
 800db10:	601a      	str	r2, [r3, #0]
 800db12:	e002      	b.n	800db1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2200      	movs	r2, #0
 800db18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800db1a:	4a04      	ldr	r2, [pc, #16]	; (800db2c <prvSampleTimeNow+0x3c>)
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800db20:	68fb      	ldr	r3, [r7, #12]
}
 800db22:	4618      	mov	r0, r3
 800db24:	3710      	adds	r7, #16
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop
 800db2c:	24009234 	.word	0x24009234

0800db30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b086      	sub	sp, #24
 800db34:	af00      	add	r7, sp, #0
 800db36:	60f8      	str	r0, [r7, #12]
 800db38:	60b9      	str	r1, [r7, #8]
 800db3a:	607a      	str	r2, [r7, #4]
 800db3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800db3e:	2300      	movs	r3, #0
 800db40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	68ba      	ldr	r2, [r7, #8]
 800db46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	68fa      	ldr	r2, [r7, #12]
 800db4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800db4e:	68ba      	ldr	r2, [r7, #8]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	429a      	cmp	r2, r3
 800db54:	d812      	bhi.n	800db7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	1ad2      	subs	r2, r2, r3
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	699b      	ldr	r3, [r3, #24]
 800db60:	429a      	cmp	r2, r3
 800db62:	d302      	bcc.n	800db6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800db64:	2301      	movs	r3, #1
 800db66:	617b      	str	r3, [r7, #20]
 800db68:	e01b      	b.n	800dba2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800db6a:	4b10      	ldr	r3, [pc, #64]	; (800dbac <prvInsertTimerInActiveList+0x7c>)
 800db6c:	681a      	ldr	r2, [r3, #0]
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	3304      	adds	r3, #4
 800db72:	4619      	mov	r1, r3
 800db74:	4610      	mov	r0, r2
 800db76:	f7fe f9de 	bl	800bf36 <vListInsert>
 800db7a:	e012      	b.n	800dba2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800db7c:	687a      	ldr	r2, [r7, #4]
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	429a      	cmp	r2, r3
 800db82:	d206      	bcs.n	800db92 <prvInsertTimerInActiveList+0x62>
 800db84:	68ba      	ldr	r2, [r7, #8]
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	429a      	cmp	r2, r3
 800db8a:	d302      	bcc.n	800db92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800db8c:	2301      	movs	r3, #1
 800db8e:	617b      	str	r3, [r7, #20]
 800db90:	e007      	b.n	800dba2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800db92:	4b07      	ldr	r3, [pc, #28]	; (800dbb0 <prvInsertTimerInActiveList+0x80>)
 800db94:	681a      	ldr	r2, [r3, #0]
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	3304      	adds	r3, #4
 800db9a:	4619      	mov	r1, r3
 800db9c:	4610      	mov	r0, r2
 800db9e:	f7fe f9ca 	bl	800bf36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dba2:	697b      	ldr	r3, [r7, #20]
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3718      	adds	r7, #24
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}
 800dbac:	24009228 	.word	0x24009228
 800dbb0:	24009224 	.word	0x24009224

0800dbb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b08e      	sub	sp, #56	; 0x38
 800dbb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dbba:	e0ca      	b.n	800dd52 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	da18      	bge.n	800dbf4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dbc2:	1d3b      	adds	r3, r7, #4
 800dbc4:	3304      	adds	r3, #4
 800dbc6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d10a      	bne.n	800dbe4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd2:	f383 8811 	msr	BASEPRI, r3
 800dbd6:	f3bf 8f6f 	isb	sy
 800dbda:	f3bf 8f4f 	dsb	sy
 800dbde:	61fb      	str	r3, [r7, #28]
}
 800dbe0:	bf00      	nop
 800dbe2:	e7fe      	b.n	800dbe2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbea:	6850      	ldr	r0, [r2, #4]
 800dbec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbee:	6892      	ldr	r2, [r2, #8]
 800dbf0:	4611      	mov	r1, r2
 800dbf2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f2c0 80ab 	blt.w	800dd52 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc02:	695b      	ldr	r3, [r3, #20]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d004      	beq.n	800dc12 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc0a:	3304      	adds	r3, #4
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7fe f9cb 	bl	800bfa8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dc12:	463b      	mov	r3, r7
 800dc14:	4618      	mov	r0, r3
 800dc16:	f7ff ff6b 	bl	800daf0 <prvSampleTimeNow>
 800dc1a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2b09      	cmp	r3, #9
 800dc20:	f200 8096 	bhi.w	800dd50 <prvProcessReceivedCommands+0x19c>
 800dc24:	a201      	add	r2, pc, #4	; (adr r2, 800dc2c <prvProcessReceivedCommands+0x78>)
 800dc26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc2a:	bf00      	nop
 800dc2c:	0800dc55 	.word	0x0800dc55
 800dc30:	0800dc55 	.word	0x0800dc55
 800dc34:	0800dc55 	.word	0x0800dc55
 800dc38:	0800dcc9 	.word	0x0800dcc9
 800dc3c:	0800dcdd 	.word	0x0800dcdd
 800dc40:	0800dd27 	.word	0x0800dd27
 800dc44:	0800dc55 	.word	0x0800dc55
 800dc48:	0800dc55 	.word	0x0800dc55
 800dc4c:	0800dcc9 	.word	0x0800dcc9
 800dc50:	0800dcdd 	.word	0x0800dcdd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc5a:	f043 0301 	orr.w	r3, r3, #1
 800dc5e:	b2da      	uxtb	r2, r3
 800dc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dc66:	68ba      	ldr	r2, [r7, #8]
 800dc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6a:	699b      	ldr	r3, [r3, #24]
 800dc6c:	18d1      	adds	r1, r2, r3
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc74:	f7ff ff5c 	bl	800db30 <prvInsertTimerInActiveList>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d069      	beq.n	800dd52 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc80:	6a1b      	ldr	r3, [r3, #32]
 800dc82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc8c:	f003 0304 	and.w	r3, r3, #4
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d05e      	beq.n	800dd52 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dc94:	68ba      	ldr	r2, [r7, #8]
 800dc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc98:	699b      	ldr	r3, [r3, #24]
 800dc9a:	441a      	add	r2, r3
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	9300      	str	r3, [sp, #0]
 800dca0:	2300      	movs	r3, #0
 800dca2:	2100      	movs	r1, #0
 800dca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dca6:	f7ff fe05 	bl	800d8b4 <xTimerGenericCommand>
 800dcaa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dcac:	6a3b      	ldr	r3, [r7, #32]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d14f      	bne.n	800dd52 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb6:	f383 8811 	msr	BASEPRI, r3
 800dcba:	f3bf 8f6f 	isb	sy
 800dcbe:	f3bf 8f4f 	dsb	sy
 800dcc2:	61bb      	str	r3, [r7, #24]
}
 800dcc4:	bf00      	nop
 800dcc6:	e7fe      	b.n	800dcc6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dcc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcce:	f023 0301 	bic.w	r3, r3, #1
 800dcd2:	b2da      	uxtb	r2, r3
 800dcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dcda:	e03a      	b.n	800dd52 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dcdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dce2:	f043 0301 	orr.w	r3, r3, #1
 800dce6:	b2da      	uxtb	r2, r3
 800dce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dcee:	68ba      	ldr	r2, [r7, #8]
 800dcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf6:	699b      	ldr	r3, [r3, #24]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d10a      	bne.n	800dd12 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800dcfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd00:	f383 8811 	msr	BASEPRI, r3
 800dd04:	f3bf 8f6f 	isb	sy
 800dd08:	f3bf 8f4f 	dsb	sy
 800dd0c:	617b      	str	r3, [r7, #20]
}
 800dd0e:	bf00      	nop
 800dd10:	e7fe      	b.n	800dd10 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd14:	699a      	ldr	r2, [r3, #24]
 800dd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd18:	18d1      	adds	r1, r2, r3
 800dd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd20:	f7ff ff06 	bl	800db30 <prvInsertTimerInActiveList>
					break;
 800dd24:	e015      	b.n	800dd52 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd2c:	f003 0302 	and.w	r3, r3, #2
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d103      	bne.n	800dd3c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800dd34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd36:	f000 fbdb 	bl	800e4f0 <vPortFree>
 800dd3a:	e00a      	b.n	800dd52 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd42:	f023 0301 	bic.w	r3, r3, #1
 800dd46:	b2da      	uxtb	r2, r3
 800dd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dd4e:	e000      	b.n	800dd52 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800dd50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dd52:	4b08      	ldr	r3, [pc, #32]	; (800dd74 <prvProcessReceivedCommands+0x1c0>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	1d39      	adds	r1, r7, #4
 800dd58:	2200      	movs	r2, #0
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7fe fbec 	bl	800c538 <xQueueReceive>
 800dd60:	4603      	mov	r3, r0
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	f47f af2a 	bne.w	800dbbc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800dd68:	bf00      	nop
 800dd6a:	bf00      	nop
 800dd6c:	3730      	adds	r7, #48	; 0x30
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	bf00      	nop
 800dd74:	2400922c 	.word	0x2400922c

0800dd78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b088      	sub	sp, #32
 800dd7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dd7e:	e048      	b.n	800de12 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dd80:	4b2d      	ldr	r3, [pc, #180]	; (800de38 <prvSwitchTimerLists+0xc0>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	68db      	ldr	r3, [r3, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd8a:	4b2b      	ldr	r3, [pc, #172]	; (800de38 <prvSwitchTimerLists+0xc0>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	68db      	ldr	r3, [r3, #12]
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	3304      	adds	r3, #4
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7fe f905 	bl	800bfa8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	6a1b      	ldr	r3, [r3, #32]
 800dda2:	68f8      	ldr	r0, [r7, #12]
 800dda4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddac:	f003 0304 	and.w	r3, r3, #4
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d02e      	beq.n	800de12 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	699b      	ldr	r3, [r3, #24]
 800ddb8:	693a      	ldr	r2, [r7, #16]
 800ddba:	4413      	add	r3, r2
 800ddbc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ddbe:	68ba      	ldr	r2, [r7, #8]
 800ddc0:	693b      	ldr	r3, [r7, #16]
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d90e      	bls.n	800dde4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	68ba      	ldr	r2, [r7, #8]
 800ddca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	68fa      	ldr	r2, [r7, #12]
 800ddd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ddd2:	4b19      	ldr	r3, [pc, #100]	; (800de38 <prvSwitchTimerLists+0xc0>)
 800ddd4:	681a      	ldr	r2, [r3, #0]
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	3304      	adds	r3, #4
 800ddda:	4619      	mov	r1, r3
 800dddc:	4610      	mov	r0, r2
 800ddde:	f7fe f8aa 	bl	800bf36 <vListInsert>
 800dde2:	e016      	b.n	800de12 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dde4:	2300      	movs	r3, #0
 800dde6:	9300      	str	r3, [sp, #0]
 800dde8:	2300      	movs	r3, #0
 800ddea:	693a      	ldr	r2, [r7, #16]
 800ddec:	2100      	movs	r1, #0
 800ddee:	68f8      	ldr	r0, [r7, #12]
 800ddf0:	f7ff fd60 	bl	800d8b4 <xTimerGenericCommand>
 800ddf4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d10a      	bne.n	800de12 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ddfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de00:	f383 8811 	msr	BASEPRI, r3
 800de04:	f3bf 8f6f 	isb	sy
 800de08:	f3bf 8f4f 	dsb	sy
 800de0c:	603b      	str	r3, [r7, #0]
}
 800de0e:	bf00      	nop
 800de10:	e7fe      	b.n	800de10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de12:	4b09      	ldr	r3, [pc, #36]	; (800de38 <prvSwitchTimerLists+0xc0>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d1b1      	bne.n	800dd80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800de1c:	4b06      	ldr	r3, [pc, #24]	; (800de38 <prvSwitchTimerLists+0xc0>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800de22:	4b06      	ldr	r3, [pc, #24]	; (800de3c <prvSwitchTimerLists+0xc4>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	4a04      	ldr	r2, [pc, #16]	; (800de38 <prvSwitchTimerLists+0xc0>)
 800de28:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800de2a:	4a04      	ldr	r2, [pc, #16]	; (800de3c <prvSwitchTimerLists+0xc4>)
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	6013      	str	r3, [r2, #0]
}
 800de30:	bf00      	nop
 800de32:	3718      	adds	r7, #24
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}
 800de38:	24009224 	.word	0x24009224
 800de3c:	24009228 	.word	0x24009228

0800de40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800de46:	f000 f965 	bl	800e114 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800de4a:	4b15      	ldr	r3, [pc, #84]	; (800dea0 <prvCheckForValidListAndQueue+0x60>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d120      	bne.n	800de94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800de52:	4814      	ldr	r0, [pc, #80]	; (800dea4 <prvCheckForValidListAndQueue+0x64>)
 800de54:	f7fe f81e 	bl	800be94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800de58:	4813      	ldr	r0, [pc, #76]	; (800dea8 <prvCheckForValidListAndQueue+0x68>)
 800de5a:	f7fe f81b 	bl	800be94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800de5e:	4b13      	ldr	r3, [pc, #76]	; (800deac <prvCheckForValidListAndQueue+0x6c>)
 800de60:	4a10      	ldr	r2, [pc, #64]	; (800dea4 <prvCheckForValidListAndQueue+0x64>)
 800de62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800de64:	4b12      	ldr	r3, [pc, #72]	; (800deb0 <prvCheckForValidListAndQueue+0x70>)
 800de66:	4a10      	ldr	r2, [pc, #64]	; (800dea8 <prvCheckForValidListAndQueue+0x68>)
 800de68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800de6a:	2300      	movs	r3, #0
 800de6c:	9300      	str	r3, [sp, #0]
 800de6e:	4b11      	ldr	r3, [pc, #68]	; (800deb4 <prvCheckForValidListAndQueue+0x74>)
 800de70:	4a11      	ldr	r2, [pc, #68]	; (800deb8 <prvCheckForValidListAndQueue+0x78>)
 800de72:	2110      	movs	r1, #16
 800de74:	200a      	movs	r0, #10
 800de76:	f7fe f929 	bl	800c0cc <xQueueGenericCreateStatic>
 800de7a:	4603      	mov	r3, r0
 800de7c:	4a08      	ldr	r2, [pc, #32]	; (800dea0 <prvCheckForValidListAndQueue+0x60>)
 800de7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800de80:	4b07      	ldr	r3, [pc, #28]	; (800dea0 <prvCheckForValidListAndQueue+0x60>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d005      	beq.n	800de94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800de88:	4b05      	ldr	r3, [pc, #20]	; (800dea0 <prvCheckForValidListAndQueue+0x60>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	490b      	ldr	r1, [pc, #44]	; (800debc <prvCheckForValidListAndQueue+0x7c>)
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fe fd42 	bl	800c918 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de94:	f000 f96e 	bl	800e174 <vPortExitCritical>
}
 800de98:	bf00      	nop
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}
 800de9e:	bf00      	nop
 800dea0:	2400922c 	.word	0x2400922c
 800dea4:	240091fc 	.word	0x240091fc
 800dea8:	24009210 	.word	0x24009210
 800deac:	24009224 	.word	0x24009224
 800deb0:	24009228 	.word	0x24009228
 800deb4:	240092d8 	.word	0x240092d8
 800deb8:	24009238 	.word	0x24009238
 800debc:	08015344 	.word	0x08015344

0800dec0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dec0:	b480      	push	{r7}
 800dec2:	b085      	sub	sp, #20
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	60f8      	str	r0, [r7, #12]
 800dec8:	60b9      	str	r1, [r7, #8]
 800deca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	3b04      	subs	r3, #4
 800ded0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ded8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	3b04      	subs	r3, #4
 800dede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	f023 0201 	bic.w	r2, r3, #1
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	3b04      	subs	r3, #4
 800deee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800def0:	4a0c      	ldr	r2, [pc, #48]	; (800df24 <pxPortInitialiseStack+0x64>)
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	3b14      	subs	r3, #20
 800defa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800defc:	687a      	ldr	r2, [r7, #4]
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	3b04      	subs	r3, #4
 800df06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f06f 0202 	mvn.w	r2, #2
 800df0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	3b20      	subs	r3, #32
 800df14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800df16:	68fb      	ldr	r3, [r7, #12]
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3714      	adds	r7, #20
 800df1c:	46bd      	mov	sp, r7
 800df1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df22:	4770      	bx	lr
 800df24:	0800df29 	.word	0x0800df29

0800df28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800df28:	b480      	push	{r7}
 800df2a:	b085      	sub	sp, #20
 800df2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800df2e:	2300      	movs	r3, #0
 800df30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800df32:	4b12      	ldr	r3, [pc, #72]	; (800df7c <prvTaskExitError+0x54>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df3a:	d00a      	beq.n	800df52 <prvTaskExitError+0x2a>
	__asm volatile
 800df3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df40:	f383 8811 	msr	BASEPRI, r3
 800df44:	f3bf 8f6f 	isb	sy
 800df48:	f3bf 8f4f 	dsb	sy
 800df4c:	60fb      	str	r3, [r7, #12]
}
 800df4e:	bf00      	nop
 800df50:	e7fe      	b.n	800df50 <prvTaskExitError+0x28>
	__asm volatile
 800df52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df56:	f383 8811 	msr	BASEPRI, r3
 800df5a:	f3bf 8f6f 	isb	sy
 800df5e:	f3bf 8f4f 	dsb	sy
 800df62:	60bb      	str	r3, [r7, #8]
}
 800df64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800df66:	bf00      	nop
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d0fc      	beq.n	800df68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800df6e:	bf00      	nop
 800df70:	bf00      	nop
 800df72:	3714      	adds	r7, #20
 800df74:	46bd      	mov	sp, r7
 800df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7a:	4770      	bx	lr
 800df7c:	24000078 	.word	0x24000078

0800df80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800df80:	4b07      	ldr	r3, [pc, #28]	; (800dfa0 <pxCurrentTCBConst2>)
 800df82:	6819      	ldr	r1, [r3, #0]
 800df84:	6808      	ldr	r0, [r1, #0]
 800df86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df8a:	f380 8809 	msr	PSP, r0
 800df8e:	f3bf 8f6f 	isb	sy
 800df92:	f04f 0000 	mov.w	r0, #0
 800df96:	f380 8811 	msr	BASEPRI, r0
 800df9a:	4770      	bx	lr
 800df9c:	f3af 8000 	nop.w

0800dfa0 <pxCurrentTCBConst2>:
 800dfa0:	24008cfc 	.word	0x24008cfc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dfa4:	bf00      	nop
 800dfa6:	bf00      	nop

0800dfa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dfa8:	4808      	ldr	r0, [pc, #32]	; (800dfcc <prvPortStartFirstTask+0x24>)
 800dfaa:	6800      	ldr	r0, [r0, #0]
 800dfac:	6800      	ldr	r0, [r0, #0]
 800dfae:	f380 8808 	msr	MSP, r0
 800dfb2:	f04f 0000 	mov.w	r0, #0
 800dfb6:	f380 8814 	msr	CONTROL, r0
 800dfba:	b662      	cpsie	i
 800dfbc:	b661      	cpsie	f
 800dfbe:	f3bf 8f4f 	dsb	sy
 800dfc2:	f3bf 8f6f 	isb	sy
 800dfc6:	df00      	svc	0
 800dfc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dfca:	bf00      	nop
 800dfcc:	e000ed08 	.word	0xe000ed08

0800dfd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b086      	sub	sp, #24
 800dfd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dfd6:	4b46      	ldr	r3, [pc, #280]	; (800e0f0 <xPortStartScheduler+0x120>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4a46      	ldr	r2, [pc, #280]	; (800e0f4 <xPortStartScheduler+0x124>)
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d10a      	bne.n	800dff6 <xPortStartScheduler+0x26>
	__asm volatile
 800dfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe4:	f383 8811 	msr	BASEPRI, r3
 800dfe8:	f3bf 8f6f 	isb	sy
 800dfec:	f3bf 8f4f 	dsb	sy
 800dff0:	613b      	str	r3, [r7, #16]
}
 800dff2:	bf00      	nop
 800dff4:	e7fe      	b.n	800dff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dff6:	4b3e      	ldr	r3, [pc, #248]	; (800e0f0 <xPortStartScheduler+0x120>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	4a3f      	ldr	r2, [pc, #252]	; (800e0f8 <xPortStartScheduler+0x128>)
 800dffc:	4293      	cmp	r3, r2
 800dffe:	d10a      	bne.n	800e016 <xPortStartScheduler+0x46>
	__asm volatile
 800e000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e004:	f383 8811 	msr	BASEPRI, r3
 800e008:	f3bf 8f6f 	isb	sy
 800e00c:	f3bf 8f4f 	dsb	sy
 800e010:	60fb      	str	r3, [r7, #12]
}
 800e012:	bf00      	nop
 800e014:	e7fe      	b.n	800e014 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e016:	4b39      	ldr	r3, [pc, #228]	; (800e0fc <xPortStartScheduler+0x12c>)
 800e018:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	b2db      	uxtb	r3, r3
 800e020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	22ff      	movs	r2, #255	; 0xff
 800e026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	b2db      	uxtb	r3, r3
 800e02e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e030:	78fb      	ldrb	r3, [r7, #3]
 800e032:	b2db      	uxtb	r3, r3
 800e034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e038:	b2da      	uxtb	r2, r3
 800e03a:	4b31      	ldr	r3, [pc, #196]	; (800e100 <xPortStartScheduler+0x130>)
 800e03c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e03e:	4b31      	ldr	r3, [pc, #196]	; (800e104 <xPortStartScheduler+0x134>)
 800e040:	2207      	movs	r2, #7
 800e042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e044:	e009      	b.n	800e05a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e046:	4b2f      	ldr	r3, [pc, #188]	; (800e104 <xPortStartScheduler+0x134>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	3b01      	subs	r3, #1
 800e04c:	4a2d      	ldr	r2, [pc, #180]	; (800e104 <xPortStartScheduler+0x134>)
 800e04e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e050:	78fb      	ldrb	r3, [r7, #3]
 800e052:	b2db      	uxtb	r3, r3
 800e054:	005b      	lsls	r3, r3, #1
 800e056:	b2db      	uxtb	r3, r3
 800e058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e05a:	78fb      	ldrb	r3, [r7, #3]
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e062:	2b80      	cmp	r3, #128	; 0x80
 800e064:	d0ef      	beq.n	800e046 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e066:	4b27      	ldr	r3, [pc, #156]	; (800e104 <xPortStartScheduler+0x134>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f1c3 0307 	rsb	r3, r3, #7
 800e06e:	2b04      	cmp	r3, #4
 800e070:	d00a      	beq.n	800e088 <xPortStartScheduler+0xb8>
	__asm volatile
 800e072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e076:	f383 8811 	msr	BASEPRI, r3
 800e07a:	f3bf 8f6f 	isb	sy
 800e07e:	f3bf 8f4f 	dsb	sy
 800e082:	60bb      	str	r3, [r7, #8]
}
 800e084:	bf00      	nop
 800e086:	e7fe      	b.n	800e086 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e088:	4b1e      	ldr	r3, [pc, #120]	; (800e104 <xPortStartScheduler+0x134>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	021b      	lsls	r3, r3, #8
 800e08e:	4a1d      	ldr	r2, [pc, #116]	; (800e104 <xPortStartScheduler+0x134>)
 800e090:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e092:	4b1c      	ldr	r3, [pc, #112]	; (800e104 <xPortStartScheduler+0x134>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e09a:	4a1a      	ldr	r2, [pc, #104]	; (800e104 <xPortStartScheduler+0x134>)
 800e09c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	b2da      	uxtb	r2, r3
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e0a6:	4b18      	ldr	r3, [pc, #96]	; (800e108 <xPortStartScheduler+0x138>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	4a17      	ldr	r2, [pc, #92]	; (800e108 <xPortStartScheduler+0x138>)
 800e0ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e0b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e0b2:	4b15      	ldr	r3, [pc, #84]	; (800e108 <xPortStartScheduler+0x138>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	4a14      	ldr	r2, [pc, #80]	; (800e108 <xPortStartScheduler+0x138>)
 800e0b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e0bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e0be:	f000 f8dd 	bl	800e27c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e0c2:	4b12      	ldr	r3, [pc, #72]	; (800e10c <xPortStartScheduler+0x13c>)
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e0c8:	f000 f8fc 	bl	800e2c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e0cc:	4b10      	ldr	r3, [pc, #64]	; (800e110 <xPortStartScheduler+0x140>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4a0f      	ldr	r2, [pc, #60]	; (800e110 <xPortStartScheduler+0x140>)
 800e0d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e0d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e0d8:	f7ff ff66 	bl	800dfa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e0dc:	f7ff f84c 	bl	800d178 <vTaskSwitchContext>
	prvTaskExitError();
 800e0e0:	f7ff ff22 	bl	800df28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e0e4:	2300      	movs	r3, #0
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3718      	adds	r7, #24
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	e000ed00 	.word	0xe000ed00
 800e0f4:	410fc271 	.word	0x410fc271
 800e0f8:	410fc270 	.word	0x410fc270
 800e0fc:	e000e400 	.word	0xe000e400
 800e100:	24009328 	.word	0x24009328
 800e104:	2400932c 	.word	0x2400932c
 800e108:	e000ed20 	.word	0xe000ed20
 800e10c:	24000078 	.word	0x24000078
 800e110:	e000ef34 	.word	0xe000ef34

0800e114 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e114:	b480      	push	{r7}
 800e116:	b083      	sub	sp, #12
 800e118:	af00      	add	r7, sp, #0
	__asm volatile
 800e11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e11e:	f383 8811 	msr	BASEPRI, r3
 800e122:	f3bf 8f6f 	isb	sy
 800e126:	f3bf 8f4f 	dsb	sy
 800e12a:	607b      	str	r3, [r7, #4]
}
 800e12c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e12e:	4b0f      	ldr	r3, [pc, #60]	; (800e16c <vPortEnterCritical+0x58>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	3301      	adds	r3, #1
 800e134:	4a0d      	ldr	r2, [pc, #52]	; (800e16c <vPortEnterCritical+0x58>)
 800e136:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e138:	4b0c      	ldr	r3, [pc, #48]	; (800e16c <vPortEnterCritical+0x58>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	2b01      	cmp	r3, #1
 800e13e:	d10f      	bne.n	800e160 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e140:	4b0b      	ldr	r3, [pc, #44]	; (800e170 <vPortEnterCritical+0x5c>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	b2db      	uxtb	r3, r3
 800e146:	2b00      	cmp	r3, #0
 800e148:	d00a      	beq.n	800e160 <vPortEnterCritical+0x4c>
	__asm volatile
 800e14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e14e:	f383 8811 	msr	BASEPRI, r3
 800e152:	f3bf 8f6f 	isb	sy
 800e156:	f3bf 8f4f 	dsb	sy
 800e15a:	603b      	str	r3, [r7, #0]
}
 800e15c:	bf00      	nop
 800e15e:	e7fe      	b.n	800e15e <vPortEnterCritical+0x4a>
	}
}
 800e160:	bf00      	nop
 800e162:	370c      	adds	r7, #12
 800e164:	46bd      	mov	sp, r7
 800e166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16a:	4770      	bx	lr
 800e16c:	24000078 	.word	0x24000078
 800e170:	e000ed04 	.word	0xe000ed04

0800e174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e174:	b480      	push	{r7}
 800e176:	b083      	sub	sp, #12
 800e178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e17a:	4b12      	ldr	r3, [pc, #72]	; (800e1c4 <vPortExitCritical+0x50>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d10a      	bne.n	800e198 <vPortExitCritical+0x24>
	__asm volatile
 800e182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e186:	f383 8811 	msr	BASEPRI, r3
 800e18a:	f3bf 8f6f 	isb	sy
 800e18e:	f3bf 8f4f 	dsb	sy
 800e192:	607b      	str	r3, [r7, #4]
}
 800e194:	bf00      	nop
 800e196:	e7fe      	b.n	800e196 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e198:	4b0a      	ldr	r3, [pc, #40]	; (800e1c4 <vPortExitCritical+0x50>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	3b01      	subs	r3, #1
 800e19e:	4a09      	ldr	r2, [pc, #36]	; (800e1c4 <vPortExitCritical+0x50>)
 800e1a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e1a2:	4b08      	ldr	r3, [pc, #32]	; (800e1c4 <vPortExitCritical+0x50>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d105      	bne.n	800e1b6 <vPortExitCritical+0x42>
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	f383 8811 	msr	BASEPRI, r3
}
 800e1b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e1b6:	bf00      	nop
 800e1b8:	370c      	adds	r7, #12
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c0:	4770      	bx	lr
 800e1c2:	bf00      	nop
 800e1c4:	24000078 	.word	0x24000078
	...

0800e1d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e1d0:	f3ef 8009 	mrs	r0, PSP
 800e1d4:	f3bf 8f6f 	isb	sy
 800e1d8:	4b15      	ldr	r3, [pc, #84]	; (800e230 <pxCurrentTCBConst>)
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	f01e 0f10 	tst.w	lr, #16
 800e1e0:	bf08      	it	eq
 800e1e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e1e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ea:	6010      	str	r0, [r2, #0]
 800e1ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e1f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e1f4:	f380 8811 	msr	BASEPRI, r0
 800e1f8:	f3bf 8f4f 	dsb	sy
 800e1fc:	f3bf 8f6f 	isb	sy
 800e200:	f7fe ffba 	bl	800d178 <vTaskSwitchContext>
 800e204:	f04f 0000 	mov.w	r0, #0
 800e208:	f380 8811 	msr	BASEPRI, r0
 800e20c:	bc09      	pop	{r0, r3}
 800e20e:	6819      	ldr	r1, [r3, #0]
 800e210:	6808      	ldr	r0, [r1, #0]
 800e212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e216:	f01e 0f10 	tst.w	lr, #16
 800e21a:	bf08      	it	eq
 800e21c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e220:	f380 8809 	msr	PSP, r0
 800e224:	f3bf 8f6f 	isb	sy
 800e228:	4770      	bx	lr
 800e22a:	bf00      	nop
 800e22c:	f3af 8000 	nop.w

0800e230 <pxCurrentTCBConst>:
 800e230:	24008cfc 	.word	0x24008cfc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e234:	bf00      	nop
 800e236:	bf00      	nop

0800e238 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
	__asm volatile
 800e23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e242:	f383 8811 	msr	BASEPRI, r3
 800e246:	f3bf 8f6f 	isb	sy
 800e24a:	f3bf 8f4f 	dsb	sy
 800e24e:	607b      	str	r3, [r7, #4]
}
 800e250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e252:	f7fe fed7 	bl	800d004 <xTaskIncrementTick>
 800e256:	4603      	mov	r3, r0
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d003      	beq.n	800e264 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e25c:	4b06      	ldr	r3, [pc, #24]	; (800e278 <xPortSysTickHandler+0x40>)
 800e25e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e262:	601a      	str	r2, [r3, #0]
 800e264:	2300      	movs	r3, #0
 800e266:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	f383 8811 	msr	BASEPRI, r3
}
 800e26e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e270:	bf00      	nop
 800e272:	3708      	adds	r7, #8
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}
 800e278:	e000ed04 	.word	0xe000ed04

0800e27c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e27c:	b480      	push	{r7}
 800e27e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e280:	4b0b      	ldr	r3, [pc, #44]	; (800e2b0 <vPortSetupTimerInterrupt+0x34>)
 800e282:	2200      	movs	r2, #0
 800e284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e286:	4b0b      	ldr	r3, [pc, #44]	; (800e2b4 <vPortSetupTimerInterrupt+0x38>)
 800e288:	2200      	movs	r2, #0
 800e28a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e28c:	4b0a      	ldr	r3, [pc, #40]	; (800e2b8 <vPortSetupTimerInterrupt+0x3c>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4a0a      	ldr	r2, [pc, #40]	; (800e2bc <vPortSetupTimerInterrupt+0x40>)
 800e292:	fba2 2303 	umull	r2, r3, r2, r3
 800e296:	099b      	lsrs	r3, r3, #6
 800e298:	4a09      	ldr	r2, [pc, #36]	; (800e2c0 <vPortSetupTimerInterrupt+0x44>)
 800e29a:	3b01      	subs	r3, #1
 800e29c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e29e:	4b04      	ldr	r3, [pc, #16]	; (800e2b0 <vPortSetupTimerInterrupt+0x34>)
 800e2a0:	2207      	movs	r2, #7
 800e2a2:	601a      	str	r2, [r3, #0]
}
 800e2a4:	bf00      	nop
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ac:	4770      	bx	lr
 800e2ae:	bf00      	nop
 800e2b0:	e000e010 	.word	0xe000e010
 800e2b4:	e000e018 	.word	0xe000e018
 800e2b8:	24000068 	.word	0x24000068
 800e2bc:	10624dd3 	.word	0x10624dd3
 800e2c0:	e000e014 	.word	0xe000e014

0800e2c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e2c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e2d4 <vPortEnableVFP+0x10>
 800e2c8:	6801      	ldr	r1, [r0, #0]
 800e2ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e2ce:	6001      	str	r1, [r0, #0]
 800e2d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e2d2:	bf00      	nop
 800e2d4:	e000ed88 	.word	0xe000ed88

0800e2d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e2d8:	b480      	push	{r7}
 800e2da:	b085      	sub	sp, #20
 800e2dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e2de:	f3ef 8305 	mrs	r3, IPSR
 800e2e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2b0f      	cmp	r3, #15
 800e2e8:	d914      	bls.n	800e314 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e2ea:	4a17      	ldr	r2, [pc, #92]	; (800e348 <vPortValidateInterruptPriority+0x70>)
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	4413      	add	r3, r2
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e2f4:	4b15      	ldr	r3, [pc, #84]	; (800e34c <vPortValidateInterruptPriority+0x74>)
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	7afa      	ldrb	r2, [r7, #11]
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d20a      	bcs.n	800e314 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e302:	f383 8811 	msr	BASEPRI, r3
 800e306:	f3bf 8f6f 	isb	sy
 800e30a:	f3bf 8f4f 	dsb	sy
 800e30e:	607b      	str	r3, [r7, #4]
}
 800e310:	bf00      	nop
 800e312:	e7fe      	b.n	800e312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e314:	4b0e      	ldr	r3, [pc, #56]	; (800e350 <vPortValidateInterruptPriority+0x78>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e31c:	4b0d      	ldr	r3, [pc, #52]	; (800e354 <vPortValidateInterruptPriority+0x7c>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	429a      	cmp	r2, r3
 800e322:	d90a      	bls.n	800e33a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e328:	f383 8811 	msr	BASEPRI, r3
 800e32c:	f3bf 8f6f 	isb	sy
 800e330:	f3bf 8f4f 	dsb	sy
 800e334:	603b      	str	r3, [r7, #0]
}
 800e336:	bf00      	nop
 800e338:	e7fe      	b.n	800e338 <vPortValidateInterruptPriority+0x60>
	}
 800e33a:	bf00      	nop
 800e33c:	3714      	adds	r7, #20
 800e33e:	46bd      	mov	sp, r7
 800e340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e344:	4770      	bx	lr
 800e346:	bf00      	nop
 800e348:	e000e3f0 	.word	0xe000e3f0
 800e34c:	24009328 	.word	0x24009328
 800e350:	e000ed0c 	.word	0xe000ed0c
 800e354:	2400932c 	.word	0x2400932c

0800e358 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b08a      	sub	sp, #40	; 0x28
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e360:	2300      	movs	r3, #0
 800e362:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e364:	f7fe fd92 	bl	800ce8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e368:	4b5b      	ldr	r3, [pc, #364]	; (800e4d8 <pvPortMalloc+0x180>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d101      	bne.n	800e374 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e370:	f000 f920 	bl	800e5b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e374:	4b59      	ldr	r3, [pc, #356]	; (800e4dc <pvPortMalloc+0x184>)
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	4013      	ands	r3, r2
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	f040 8093 	bne.w	800e4a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d01d      	beq.n	800e3c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e388:	2208      	movs	r2, #8
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	4413      	add	r3, r2
 800e38e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f003 0307 	and.w	r3, r3, #7
 800e396:	2b00      	cmp	r3, #0
 800e398:	d014      	beq.n	800e3c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f023 0307 	bic.w	r3, r3, #7
 800e3a0:	3308      	adds	r3, #8
 800e3a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f003 0307 	and.w	r3, r3, #7
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d00a      	beq.n	800e3c4 <pvPortMalloc+0x6c>
	__asm volatile
 800e3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b2:	f383 8811 	msr	BASEPRI, r3
 800e3b6:	f3bf 8f6f 	isb	sy
 800e3ba:	f3bf 8f4f 	dsb	sy
 800e3be:	617b      	str	r3, [r7, #20]
}
 800e3c0:	bf00      	nop
 800e3c2:	e7fe      	b.n	800e3c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d06e      	beq.n	800e4a8 <pvPortMalloc+0x150>
 800e3ca:	4b45      	ldr	r3, [pc, #276]	; (800e4e0 <pvPortMalloc+0x188>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	687a      	ldr	r2, [r7, #4]
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d869      	bhi.n	800e4a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e3d4:	4b43      	ldr	r3, [pc, #268]	; (800e4e4 <pvPortMalloc+0x18c>)
 800e3d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e3d8:	4b42      	ldr	r3, [pc, #264]	; (800e4e4 <pvPortMalloc+0x18c>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e3de:	e004      	b.n	800e3ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ec:	685b      	ldr	r3, [r3, #4]
 800e3ee:	687a      	ldr	r2, [r7, #4]
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d903      	bls.n	800e3fc <pvPortMalloc+0xa4>
 800e3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d1f1      	bne.n	800e3e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e3fc:	4b36      	ldr	r3, [pc, #216]	; (800e4d8 <pvPortMalloc+0x180>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e402:	429a      	cmp	r2, r3
 800e404:	d050      	beq.n	800e4a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e406:	6a3b      	ldr	r3, [r7, #32]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	2208      	movs	r2, #8
 800e40c:	4413      	add	r3, r2
 800e40e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e412:	681a      	ldr	r2, [r3, #0]
 800e414:	6a3b      	ldr	r3, [r7, #32]
 800e416:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41a:	685a      	ldr	r2, [r3, #4]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	1ad2      	subs	r2, r2, r3
 800e420:	2308      	movs	r3, #8
 800e422:	005b      	lsls	r3, r3, #1
 800e424:	429a      	cmp	r2, r3
 800e426:	d91f      	bls.n	800e468 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	4413      	add	r3, r2
 800e42e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e430:	69bb      	ldr	r3, [r7, #24]
 800e432:	f003 0307 	and.w	r3, r3, #7
 800e436:	2b00      	cmp	r3, #0
 800e438:	d00a      	beq.n	800e450 <pvPortMalloc+0xf8>
	__asm volatile
 800e43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e43e:	f383 8811 	msr	BASEPRI, r3
 800e442:	f3bf 8f6f 	isb	sy
 800e446:	f3bf 8f4f 	dsb	sy
 800e44a:	613b      	str	r3, [r7, #16]
}
 800e44c:	bf00      	nop
 800e44e:	e7fe      	b.n	800e44e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e452:	685a      	ldr	r2, [r3, #4]
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	1ad2      	subs	r2, r2, r3
 800e458:	69bb      	ldr	r3, [r7, #24]
 800e45a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45e:	687a      	ldr	r2, [r7, #4]
 800e460:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e462:	69b8      	ldr	r0, [r7, #24]
 800e464:	f000 f908 	bl	800e678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e468:	4b1d      	ldr	r3, [pc, #116]	; (800e4e0 <pvPortMalloc+0x188>)
 800e46a:	681a      	ldr	r2, [r3, #0]
 800e46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	1ad3      	subs	r3, r2, r3
 800e472:	4a1b      	ldr	r2, [pc, #108]	; (800e4e0 <pvPortMalloc+0x188>)
 800e474:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e476:	4b1a      	ldr	r3, [pc, #104]	; (800e4e0 <pvPortMalloc+0x188>)
 800e478:	681a      	ldr	r2, [r3, #0]
 800e47a:	4b1b      	ldr	r3, [pc, #108]	; (800e4e8 <pvPortMalloc+0x190>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	429a      	cmp	r2, r3
 800e480:	d203      	bcs.n	800e48a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e482:	4b17      	ldr	r3, [pc, #92]	; (800e4e0 <pvPortMalloc+0x188>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	4a18      	ldr	r2, [pc, #96]	; (800e4e8 <pvPortMalloc+0x190>)
 800e488:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48c:	685a      	ldr	r2, [r3, #4]
 800e48e:	4b13      	ldr	r3, [pc, #76]	; (800e4dc <pvPortMalloc+0x184>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	431a      	orrs	r2, r3
 800e494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e496:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49a:	2200      	movs	r2, #0
 800e49c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e49e:	4b13      	ldr	r3, [pc, #76]	; (800e4ec <pvPortMalloc+0x194>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	4a11      	ldr	r2, [pc, #68]	; (800e4ec <pvPortMalloc+0x194>)
 800e4a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e4a8:	f7fe fcfe 	bl	800cea8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4ac:	69fb      	ldr	r3, [r7, #28]
 800e4ae:	f003 0307 	and.w	r3, r3, #7
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d00a      	beq.n	800e4cc <pvPortMalloc+0x174>
	__asm volatile
 800e4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ba:	f383 8811 	msr	BASEPRI, r3
 800e4be:	f3bf 8f6f 	isb	sy
 800e4c2:	f3bf 8f4f 	dsb	sy
 800e4c6:	60fb      	str	r3, [r7, #12]
}
 800e4c8:	bf00      	nop
 800e4ca:	e7fe      	b.n	800e4ca <pvPortMalloc+0x172>
	return pvReturn;
 800e4cc:	69fb      	ldr	r3, [r7, #28]
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3728      	adds	r7, #40	; 0x28
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}
 800e4d6:	bf00      	nop
 800e4d8:	24010b38 	.word	0x24010b38
 800e4dc:	24010b4c 	.word	0x24010b4c
 800e4e0:	24010b3c 	.word	0x24010b3c
 800e4e4:	24010b30 	.word	0x24010b30
 800e4e8:	24010b40 	.word	0x24010b40
 800e4ec:	24010b44 	.word	0x24010b44

0800e4f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b086      	sub	sp, #24
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d04d      	beq.n	800e59e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e502:	2308      	movs	r3, #8
 800e504:	425b      	negs	r3, r3
 800e506:	697a      	ldr	r2, [r7, #20]
 800e508:	4413      	add	r3, r2
 800e50a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e510:	693b      	ldr	r3, [r7, #16]
 800e512:	685a      	ldr	r2, [r3, #4]
 800e514:	4b24      	ldr	r3, [pc, #144]	; (800e5a8 <vPortFree+0xb8>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	4013      	ands	r3, r2
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d10a      	bne.n	800e534 <vPortFree+0x44>
	__asm volatile
 800e51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e522:	f383 8811 	msr	BASEPRI, r3
 800e526:	f3bf 8f6f 	isb	sy
 800e52a:	f3bf 8f4f 	dsb	sy
 800e52e:	60fb      	str	r3, [r7, #12]
}
 800e530:	bf00      	nop
 800e532:	e7fe      	b.n	800e532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d00a      	beq.n	800e552 <vPortFree+0x62>
	__asm volatile
 800e53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e540:	f383 8811 	msr	BASEPRI, r3
 800e544:	f3bf 8f6f 	isb	sy
 800e548:	f3bf 8f4f 	dsb	sy
 800e54c:	60bb      	str	r3, [r7, #8]
}
 800e54e:	bf00      	nop
 800e550:	e7fe      	b.n	800e550 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	685a      	ldr	r2, [r3, #4]
 800e556:	4b14      	ldr	r3, [pc, #80]	; (800e5a8 <vPortFree+0xb8>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	4013      	ands	r3, r2
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d01e      	beq.n	800e59e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d11a      	bne.n	800e59e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e568:	693b      	ldr	r3, [r7, #16]
 800e56a:	685a      	ldr	r2, [r3, #4]
 800e56c:	4b0e      	ldr	r3, [pc, #56]	; (800e5a8 <vPortFree+0xb8>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	43db      	mvns	r3, r3
 800e572:	401a      	ands	r2, r3
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e578:	f7fe fc88 	bl	800ce8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	685a      	ldr	r2, [r3, #4]
 800e580:	4b0a      	ldr	r3, [pc, #40]	; (800e5ac <vPortFree+0xbc>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	4413      	add	r3, r2
 800e586:	4a09      	ldr	r2, [pc, #36]	; (800e5ac <vPortFree+0xbc>)
 800e588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e58a:	6938      	ldr	r0, [r7, #16]
 800e58c:	f000 f874 	bl	800e678 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e590:	4b07      	ldr	r3, [pc, #28]	; (800e5b0 <vPortFree+0xc0>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	3301      	adds	r3, #1
 800e596:	4a06      	ldr	r2, [pc, #24]	; (800e5b0 <vPortFree+0xc0>)
 800e598:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e59a:	f7fe fc85 	bl	800cea8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e59e:	bf00      	nop
 800e5a0:	3718      	adds	r7, #24
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}
 800e5a6:	bf00      	nop
 800e5a8:	24010b4c 	.word	0x24010b4c
 800e5ac:	24010b3c 	.word	0x24010b3c
 800e5b0:	24010b48 	.word	0x24010b48

0800e5b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b085      	sub	sp, #20
 800e5b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e5ba:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800e5be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e5c0:	4b27      	ldr	r3, [pc, #156]	; (800e660 <prvHeapInit+0xac>)
 800e5c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	f003 0307 	and.w	r3, r3, #7
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d00c      	beq.n	800e5e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	3307      	adds	r3, #7
 800e5d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f023 0307 	bic.w	r3, r3, #7
 800e5da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e5dc:	68ba      	ldr	r2, [r7, #8]
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	1ad3      	subs	r3, r2, r3
 800e5e2:	4a1f      	ldr	r2, [pc, #124]	; (800e660 <prvHeapInit+0xac>)
 800e5e4:	4413      	add	r3, r2
 800e5e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e5ec:	4a1d      	ldr	r2, [pc, #116]	; (800e664 <prvHeapInit+0xb0>)
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e5f2:	4b1c      	ldr	r3, [pc, #112]	; (800e664 <prvHeapInit+0xb0>)
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	68ba      	ldr	r2, [r7, #8]
 800e5fc:	4413      	add	r3, r2
 800e5fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e600:	2208      	movs	r2, #8
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	1a9b      	subs	r3, r3, r2
 800e606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f023 0307 	bic.w	r3, r3, #7
 800e60e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	4a15      	ldr	r2, [pc, #84]	; (800e668 <prvHeapInit+0xb4>)
 800e614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e616:	4b14      	ldr	r3, [pc, #80]	; (800e668 <prvHeapInit+0xb4>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	2200      	movs	r2, #0
 800e61c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e61e:	4b12      	ldr	r3, [pc, #72]	; (800e668 <prvHeapInit+0xb4>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2200      	movs	r2, #0
 800e624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	68fa      	ldr	r2, [r7, #12]
 800e62e:	1ad2      	subs	r2, r2, r3
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e634:	4b0c      	ldr	r3, [pc, #48]	; (800e668 <prvHeapInit+0xb4>)
 800e636:	681a      	ldr	r2, [r3, #0]
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	685b      	ldr	r3, [r3, #4]
 800e640:	4a0a      	ldr	r2, [pc, #40]	; (800e66c <prvHeapInit+0xb8>)
 800e642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	685b      	ldr	r3, [r3, #4]
 800e648:	4a09      	ldr	r2, [pc, #36]	; (800e670 <prvHeapInit+0xbc>)
 800e64a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e64c:	4b09      	ldr	r3, [pc, #36]	; (800e674 <prvHeapInit+0xc0>)
 800e64e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e652:	601a      	str	r2, [r3, #0]
}
 800e654:	bf00      	nop
 800e656:	3714      	adds	r7, #20
 800e658:	46bd      	mov	sp, r7
 800e65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65e:	4770      	bx	lr
 800e660:	24009330 	.word	0x24009330
 800e664:	24010b30 	.word	0x24010b30
 800e668:	24010b38 	.word	0x24010b38
 800e66c:	24010b40 	.word	0x24010b40
 800e670:	24010b3c 	.word	0x24010b3c
 800e674:	24010b4c 	.word	0x24010b4c

0800e678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e678:	b480      	push	{r7}
 800e67a:	b085      	sub	sp, #20
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e680:	4b28      	ldr	r3, [pc, #160]	; (800e724 <prvInsertBlockIntoFreeList+0xac>)
 800e682:	60fb      	str	r3, [r7, #12]
 800e684:	e002      	b.n	800e68c <prvInsertBlockIntoFreeList+0x14>
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	60fb      	str	r3, [r7, #12]
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	687a      	ldr	r2, [r7, #4]
 800e692:	429a      	cmp	r2, r3
 800e694:	d8f7      	bhi.n	800e686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	68ba      	ldr	r2, [r7, #8]
 800e6a0:	4413      	add	r3, r2
 800e6a2:	687a      	ldr	r2, [r7, #4]
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	d108      	bne.n	800e6ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	685a      	ldr	r2, [r3, #4]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	685b      	ldr	r3, [r3, #4]
 800e6b0:	441a      	add	r2, r3
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	685b      	ldr	r3, [r3, #4]
 800e6c2:	68ba      	ldr	r2, [r7, #8]
 800e6c4:	441a      	add	r2, r3
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d118      	bne.n	800e700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	4b15      	ldr	r3, [pc, #84]	; (800e728 <prvInsertBlockIntoFreeList+0xb0>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d00d      	beq.n	800e6f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	685a      	ldr	r2, [r3, #4]
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	441a      	add	r2, r3
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	681a      	ldr	r2, [r3, #0]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	601a      	str	r2, [r3, #0]
 800e6f4:	e008      	b.n	800e708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e6f6:	4b0c      	ldr	r3, [pc, #48]	; (800e728 <prvInsertBlockIntoFreeList+0xb0>)
 800e6f8:	681a      	ldr	r2, [r3, #0]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	601a      	str	r2, [r3, #0]
 800e6fe:	e003      	b.n	800e708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681a      	ldr	r2, [r3, #0]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e708:	68fa      	ldr	r2, [r7, #12]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d002      	beq.n	800e716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	687a      	ldr	r2, [r7, #4]
 800e714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e716:	bf00      	nop
 800e718:	3714      	adds	r7, #20
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr
 800e722:	bf00      	nop
 800e724:	24010b30 	.word	0x24010b30
 800e728:	24010b38 	.word	0x24010b38

0800e72c <calc_func>:
	, list_data *info, list_head **memblock, list_data **datablock
	, list_head *memblock_end, list_data *datablock_end);
typedef ee_s32(*list_cmp)(list_data *a, list_data *b, core_results *res);
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res);

ee_s16 calc_func(ee_s16 *pdata, core_results *res) {
 800e72c:	b590      	push	{r4, r7, lr}
 800e72e:	b089      	sub	sp, #36	; 0x24
 800e730:	af02      	add	r7, sp, #8
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	6039      	str	r1, [r7, #0]
	ee_s16 data=*pdata;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	881b      	ldrh	r3, [r3, #0]
 800e73a:	827b      	strh	r3, [r7, #18]
	ee_s16 retval;
	ee_u8 optype=(data>>7) & 1; /* bit 7 indicates if the function result has been cached */
 800e73c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e740:	11db      	asrs	r3, r3, #7
 800e742:	b21b      	sxth	r3, r3
 800e744:	b2db      	uxtb	r3, r3
 800e746:	f003 0301 	and.w	r3, r3, #1
 800e74a:	747b      	strb	r3, [r7, #17]
	if (optype) /* if cached, use cache */
 800e74c:	7c7b      	ldrb	r3, [r7, #17]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d004      	beq.n	800e75c <calc_func+0x30>
		return (data & 0x007f);
 800e752:	8a7b      	ldrh	r3, [r7, #18]
 800e754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e758:	b21b      	sxth	r3, r3
 800e75a:	e072      	b.n	800e842 <calc_func+0x116>
	else { /* otherwise calculate and cache the result */
		ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
 800e75c:	8a7b      	ldrh	r3, [r7, #18]
 800e75e:	f003 0307 	and.w	r3, r3, #7
 800e762:	81fb      	strh	r3, [r7, #14]
		ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
 800e764:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e768:	10db      	asrs	r3, r3, #3
 800e76a:	b21b      	sxth	r3, r3
 800e76c:	f003 030f 	and.w	r3, r3, #15
 800e770:	82bb      	strh	r3, [r7, #20]
		dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
 800e772:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e776:	011b      	lsls	r3, r3, #4
 800e778:	b21a      	sxth	r2, r3
 800e77a:	8abb      	ldrh	r3, [r7, #20]
 800e77c:	4313      	orrs	r3, r2
 800e77e:	82bb      	strh	r3, [r7, #20]
		switch (flag) {
 800e780:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d002      	beq.n	800e78e <calc_func+0x62>
 800e788:	2b01      	cmp	r3, #1
 800e78a:	d023      	beq.n	800e7d4 <calc_func+0xa8>
 800e78c:	e036      	b.n	800e7fc <calc_func+0xd0>
			case 0:
				if (dtype<0x22) /* set min period for bit corruption */
 800e78e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e792:	2b21      	cmp	r3, #33	; 0x21
 800e794:	dc01      	bgt.n	800e79a <calc_func+0x6e>
					dtype=0x22;
 800e796:	2322      	movs	r3, #34	; 0x22
 800e798:	82bb      	strh	r3, [r7, #20]
				retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	6998      	ldr	r0, [r3, #24]
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	6959      	ldr	r1, [r3, #20]
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e7b2:	9301      	str	r3, [sp, #4]
 800e7b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e7b8:	9300      	str	r3, [sp, #0]
 800e7ba:	4623      	mov	r3, r4
 800e7bc:	f001 fd54 	bl	8010268 <core_bench_state>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	82fb      	strh	r3, [r7, #22]
				if (res->crcstate==0)
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d11a      	bne.n	800e802 <calc_func+0xd6>
					res->crcstate=retval;
 800e7cc:	8afa      	ldrh	r2, [r7, #22]
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	87da      	strh	r2, [r3, #62]	; 0x3e
				break;
 800e7d2:	e016      	b.n	800e802 <calc_func+0xd6>
			case 1:
				retval=core_bench_matrix(&(res->mat),dtype,res->crc);
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800e7de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e7e2:	4619      	mov	r1, r3
 800e7e4:	f001 f9a6 	bl	800fb34 <core_bench_matrix>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	82fb      	strh	r3, [r7, #22]
				if (res->crcmatrix==0)
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d108      	bne.n	800e806 <calc_func+0xda>
					res->crcmatrix=retval;
 800e7f4:	8afa      	ldrh	r2, [r7, #22]
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	879a      	strh	r2, [r3, #60]	; 0x3c
				break;
 800e7fa:	e004      	b.n	800e806 <calc_func+0xda>
			default:
				retval=data;
 800e7fc:	8a7b      	ldrh	r3, [r7, #18]
 800e7fe:	82fb      	strh	r3, [r7, #22]
				break;
 800e800:	e002      	b.n	800e808 <calc_func+0xdc>
				break;
 800e802:	bf00      	nop
 800e804:	e000      	b.n	800e808 <calc_func+0xdc>
				break;
 800e806:	bf00      	nop
		}
		res->crc=crcu16(retval,res->crc);
 800e808:	8afa      	ldrh	r2, [r7, #22]
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e80e:	4619      	mov	r1, r3
 800e810:	4610      	mov	r0, r2
 800e812:	f002 f849 	bl	80108a8 <crcu16>
 800e816:	4603      	mov	r3, r0
 800e818:	461a      	mov	r2, r3
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	871a      	strh	r2, [r3, #56]	; 0x38
		retval &= 0x007f; 
 800e81e:	8afb      	ldrh	r3, [r7, #22]
 800e820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e824:	82fb      	strh	r3, [r7, #22]
		*pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
 800e826:	8a7b      	ldrh	r3, [r7, #18]
 800e828:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e82c:	b21b      	sxth	r3, r3
 800e82e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e832:	b21a      	sxth	r2, r3
 800e834:	8afb      	ldrh	r3, [r7, #22]
 800e836:	4313      	orrs	r3, r2
 800e838:	b21a      	sxth	r2, r3
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	801a      	strh	r2, [r3, #0]
		return retval;
 800e83e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
	}
}
 800e842:	4618      	mov	r0, r3
 800e844:	371c      	adds	r7, #28
 800e846:	46bd      	mov	sp, r7
 800e848:	bd90      	pop	{r4, r7, pc}

0800e84a <cmp_complex>:
/* Function: cmp_complex
	Compare the data item in a list cell.

	Can be used by mergesort.
*/
ee_s32 cmp_complex(list_data *a, list_data *b, core_results *res) {
 800e84a:	b580      	push	{r7, lr}
 800e84c:	b086      	sub	sp, #24
 800e84e:	af00      	add	r7, sp, #0
 800e850:	60f8      	str	r0, [r7, #12]
 800e852:	60b9      	str	r1, [r7, #8]
 800e854:	607a      	str	r2, [r7, #4]
	ee_s16 val1=calc_func(&(a->data16),res);
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	6879      	ldr	r1, [r7, #4]
 800e85a:	4618      	mov	r0, r3
 800e85c:	f7ff ff66 	bl	800e72c <calc_func>
 800e860:	4603      	mov	r3, r0
 800e862:	82fb      	strh	r3, [r7, #22]
	ee_s16 val2=calc_func(&(b->data16),res);
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	6879      	ldr	r1, [r7, #4]
 800e868:	4618      	mov	r0, r3
 800e86a:	f7ff ff5f 	bl	800e72c <calc_func>
 800e86e:	4603      	mov	r3, r0
 800e870:	82bb      	strh	r3, [r7, #20]
	return val1 - val2;
 800e872:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e876:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e87a:	1ad3      	subs	r3, r2, r3
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3718      	adds	r7, #24
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <cmp_idx>:
/* Function: cmp_idx
	Compare the idx item in a list cell, and regen the data.

	Can be used by mergesort.
*/
ee_s32 cmp_idx(list_data *a, list_data *b, core_results *res) {
 800e884:	b480      	push	{r7}
 800e886:	b085      	sub	sp, #20
 800e888:	af00      	add	r7, sp, #0
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	60b9      	str	r1, [r7, #8]
 800e88e:	607a      	str	r2, [r7, #4]
	if (res==NULL) {
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d121      	bne.n	800e8da <cmp_idx+0x56>
		a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e89c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e8a0:	b21a      	sxth	r2, r3
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e8a8:	b29b      	uxth	r3, r3
 800e8aa:	0a1b      	lsrs	r3, r3, #8
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	b21b      	sxth	r3, r3
 800e8b0:	4313      	orrs	r3, r2
 800e8b2:	b21a      	sxth	r2, r3
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	801a      	strh	r2, [r3, #0]
		b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e8be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e8c2:	b21a      	sxth	r2, r3
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e8ca:	b29b      	uxth	r3, r3
 800e8cc:	0a1b      	lsrs	r3, r3, #8
 800e8ce:	b29b      	uxth	r3, r3
 800e8d0:	b21b      	sxth	r3, r3
 800e8d2:	4313      	orrs	r3, r2
 800e8d4:	b21a      	sxth	r2, r3
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	801a      	strh	r2, [r3, #0]
	}
	return a->idx - b->idx;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e8e8:	1ad3      	subs	r3, r2, r3
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3714      	adds	r7, #20
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f4:	4770      	bx	lr

0800e8f6 <copy_info>:

void copy_info(list_data *to,list_data *from) {
 800e8f6:	b480      	push	{r7}
 800e8f8:	b083      	sub	sp, #12
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	6078      	str	r0, [r7, #4]
 800e8fe:	6039      	str	r1, [r7, #0]
	to->data16=from->data16;
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	801a      	strh	r2, [r3, #0]
	to->idx=from->idx;
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	805a      	strh	r2, [r3, #2]
}
 800e914:	bf00      	nop
 800e916:	370c      	adds	r7, #12
 800e918:	46bd      	mov	sp, r7
 800e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91e:	4770      	bx	lr

0800e920 <core_bench_list>:
	- List sort
	- Operate on data from list (crc)
	- Single remove/reinsert
	* At the end of this function, the list is back to original state
*/
ee_u16 core_bench_list(core_results *res, ee_s16 finder_idx) {
 800e920:	b580      	push	{r7, lr}
 800e922:	b08a      	sub	sp, #40	; 0x28
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	460b      	mov	r3, r1
 800e92a:	807b      	strh	r3, [r7, #2]
	ee_u16 retval=0;
 800e92c:	2300      	movs	r3, #0
 800e92e:	84fb      	strh	r3, [r7, #38]	; 0x26
	ee_u16 found=0,missed=0;
 800e930:	2300      	movs	r3, #0
 800e932:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e934:	2300      	movs	r3, #0
 800e936:	847b      	strh	r3, [r7, #34]	; 0x22
	list_head *list=res->list;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e93c:	61fb      	str	r3, [r7, #28]
	ee_s16 find_num=res->seed3;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	889b      	ldrh	r3, [r3, #4]
 800e942:	82bb      	strh	r3, [r7, #20]
	list_head *this_find;
	list_head *finder, *remover;
	list_data info;
	ee_s16 i;

	info.idx=finder_idx;
 800e944:	887b      	ldrh	r3, [r7, #2]
 800e946:	817b      	strh	r3, [r7, #10]
	/* find <find_num> values in the list, and change the list each time (reverse and cache if value found) */
	for (i=0; i<find_num; i++) {
 800e948:	2300      	movs	r3, #0
 800e94a:	82fb      	strh	r3, [r7, #22]
 800e94c:	e05f      	b.n	800ea0e <core_bench_list+0xee>
		info.data16= (i & 0xff) ;
 800e94e:	8afb      	ldrh	r3, [r7, #22]
 800e950:	b2db      	uxtb	r3, r3
 800e952:	b21b      	sxth	r3, r3
 800e954:	813b      	strh	r3, [r7, #8]
		this_find=core_list_find(list,&info);
 800e956:	f107 0308 	add.w	r3, r7, #8
 800e95a:	4619      	mov	r1, r3
 800e95c:	69f8      	ldr	r0, [r7, #28]
 800e95e:	f000 f9f3 	bl	800ed48 <core_list_find>
 800e962:	60f8      	str	r0, [r7, #12]
		list=core_list_reverse(list);
 800e964:	69f8      	ldr	r0, [r7, #28]
 800e966:	f000 fa23 	bl	800edb0 <core_list_reverse>
 800e96a:	61f8      	str	r0, [r7, #28]
		if (this_find==NULL) {
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d111      	bne.n	800e996 <core_bench_list+0x76>
			missed++;
 800e972:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e974:	3301      	adds	r3, #1
 800e976:	847b      	strh	r3, [r7, #34]	; 0x22
			retval+=(list->next->info->data16 >> 8) & 1;
 800e978:	69fb      	ldr	r3, [r7, #28]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	685b      	ldr	r3, [r3, #4]
 800e97e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e982:	121b      	asrs	r3, r3, #8
 800e984:	b21b      	sxth	r3, r3
 800e986:	b29b      	uxth	r3, r3
 800e988:	f003 0301 	and.w	r3, r3, #1
 800e98c:	b29a      	uxth	r2, r3
 800e98e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e990:	4413      	add	r3, r2
 800e992:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e994:	e02a      	b.n	800e9ec <core_bench_list+0xcc>
		}
		else {
			found++;
 800e996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e998:	3301      	adds	r3, #1
 800e99a:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (this_find->info->data16 & 0x1) /* use found value */
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	685b      	ldr	r3, [r3, #4]
 800e9a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e9a4:	b29b      	uxth	r3, r3
 800e9a6:	f003 0301 	and.w	r3, r3, #1
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d00c      	beq.n	800e9c8 <core_bench_list+0xa8>
				retval+=(this_find->info->data16 >> 9) & 1;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	685b      	ldr	r3, [r3, #4]
 800e9b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e9b6:	125b      	asrs	r3, r3, #9
 800e9b8:	b21b      	sxth	r3, r3
 800e9ba:	b29b      	uxth	r3, r3
 800e9bc:	f003 0301 	and.w	r3, r3, #1
 800e9c0:	b29a      	uxth	r2, r3
 800e9c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e9c4:	4413      	add	r3, r2
 800e9c6:	84fb      	strh	r3, [r7, #38]	; 0x26
			/* and cache next item at the head of the list (if any) */
			if (this_find->next != NULL) {
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d00d      	beq.n	800e9ec <core_bench_list+0xcc>
				finder = this_find->next;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	61bb      	str	r3, [r7, #24]
				this_find->next = finder->next;
 800e9d6:	69bb      	ldr	r3, [r7, #24]
 800e9d8:	681a      	ldr	r2, [r3, #0]
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	601a      	str	r2, [r3, #0]
				finder->next=list->next;
 800e9de:	69fb      	ldr	r3, [r7, #28]
 800e9e0:	681a      	ldr	r2, [r3, #0]
 800e9e2:	69bb      	ldr	r3, [r7, #24]
 800e9e4:	601a      	str	r2, [r3, #0]
				list->next=finder;
 800e9e6:	69fb      	ldr	r3, [r7, #28]
 800e9e8:	69ba      	ldr	r2, [r7, #24]
 800e9ea:	601a      	str	r2, [r3, #0]
			}
		}
		if (info.idx>=0)
 800e9ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	db06      	blt.n	800ea02 <core_bench_list+0xe2>
			info.idx++;
 800e9f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e9f8:	b29b      	uxth	r3, r3
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	b29b      	uxth	r3, r3
 800e9fe:	b21b      	sxth	r3, r3
 800ea00:	817b      	strh	r3, [r7, #10]
	for (i=0; i<find_num; i++) {
 800ea02:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	3301      	adds	r3, #1
 800ea0a:	b29b      	uxth	r3, r3
 800ea0c:	82fb      	strh	r3, [r7, #22]
 800ea0e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ea12:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ea16:	429a      	cmp	r2, r3
 800ea18:	db99      	blt.n	800e94e <core_bench_list+0x2e>
#if CORE_DEBUG
	ee_printf("List find %d: [%d,%d,%d]\n",i,retval,missed,found);
#endif
	}
	retval+=found*4-missed;
 800ea1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea1c:	009b      	lsls	r3, r3, #2
 800ea1e:	b29a      	uxth	r2, r3
 800ea20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea22:	1ad3      	subs	r3, r2, r3
 800ea24:	b29a      	uxth	r2, r3
 800ea26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ea28:	4413      	add	r3, r2
 800ea2a:	84fb      	strh	r3, [r7, #38]	; 0x26
	/* sort the list by data content and remove one item*/
	if (finder_idx>0)
 800ea2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	dd05      	ble.n	800ea40 <core_bench_list+0x120>
		list=core_list_mergesort(list,cmp_complex,res);
 800ea34:	687a      	ldr	r2, [r7, #4]
 800ea36:	4928      	ldr	r1, [pc, #160]	; (800ead8 <core_bench_list+0x1b8>)
 800ea38:	69f8      	ldr	r0, [r7, #28]
 800ea3a:	f000 f9d4 	bl	800ede6 <core_list_mergesort>
 800ea3e:	61f8      	str	r0, [r7, #28]
	remover=core_list_remove(list->next);
 800ea40:	69fb      	ldr	r3, [r7, #28]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	4618      	mov	r0, r3
 800ea46:	f000 f942 	bl	800ecce <core_list_remove>
 800ea4a:	6138      	str	r0, [r7, #16]
	/* CRC data content of list from location of index N forward, and then undo remove */
	finder=core_list_find(list,&info);
 800ea4c:	f107 0308 	add.w	r3, r7, #8
 800ea50:	4619      	mov	r1, r3
 800ea52:	69f8      	ldr	r0, [r7, #28]
 800ea54:	f000 f978 	bl	800ed48 <core_list_find>
 800ea58:	61b8      	str	r0, [r7, #24]
	if (!finder)
 800ea5a:	69bb      	ldr	r3, [r7, #24]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d111      	bne.n	800ea84 <core_bench_list+0x164>
		finder=list->next;
 800ea60:	69fb      	ldr	r3, [r7, #28]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	61bb      	str	r3, [r7, #24]
	while (finder) {
 800ea66:	e00d      	b.n	800ea84 <core_bench_list+0x164>
		retval=crc16(list->info->data16,retval);
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	685b      	ldr	r3, [r3, #4]
 800ea6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea70:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea72:	4611      	mov	r1, r2
 800ea74:	4618      	mov	r0, r3
 800ea76:	f001 ff56 	bl	8010926 <crc16>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	84fb      	strh	r3, [r7, #38]	; 0x26
		finder=finder->next;
 800ea7e:	69bb      	ldr	r3, [r7, #24]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	61bb      	str	r3, [r7, #24]
	while (finder) {
 800ea84:	69bb      	ldr	r3, [r7, #24]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d1ee      	bne.n	800ea68 <core_bench_list+0x148>
	}
#if CORE_DEBUG
	ee_printf("List sort 1: %04x\n",retval);
#endif
	remover=core_list_undo_remove(remover,list->next);
 800ea8a:	69fb      	ldr	r3, [r7, #28]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	4619      	mov	r1, r3
 800ea90:	6938      	ldr	r0, [r7, #16]
 800ea92:	f000 f93c 	bl	800ed0e <core_list_undo_remove>
 800ea96:	6138      	str	r0, [r7, #16]
	/* sort the list by index, in effect returning the list to original state */
	list=core_list_mergesort(list,cmp_idx,NULL);
 800ea98:	2200      	movs	r2, #0
 800ea9a:	4910      	ldr	r1, [pc, #64]	; (800eadc <core_bench_list+0x1bc>)
 800ea9c:	69f8      	ldr	r0, [r7, #28]
 800ea9e:	f000 f9a2 	bl	800ede6 <core_list_mergesort>
 800eaa2:	61f8      	str	r0, [r7, #28]
	/* CRC data content of list */
	finder=list->next;
 800eaa4:	69fb      	ldr	r3, [r7, #28]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	61bb      	str	r3, [r7, #24]
	while (finder) {
 800eaaa:	e00d      	b.n	800eac8 <core_bench_list+0x1a8>
		retval=crc16(list->info->data16,retval);
 800eaac:	69fb      	ldr	r3, [r7, #28]
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eab4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eab6:	4611      	mov	r1, r2
 800eab8:	4618      	mov	r0, r3
 800eaba:	f001 ff34 	bl	8010926 <crc16>
 800eabe:	4603      	mov	r3, r0
 800eac0:	84fb      	strh	r3, [r7, #38]	; 0x26
		finder=finder->next;
 800eac2:	69bb      	ldr	r3, [r7, #24]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	61bb      	str	r3, [r7, #24]
	while (finder) {
 800eac8:	69bb      	ldr	r3, [r7, #24]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d1ee      	bne.n	800eaac <core_bench_list+0x18c>
	}
#if CORE_DEBUG
	ee_printf("List sort 2: %04x\n",retval);
#endif
	return retval;
 800eace:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3728      	adds	r7, #40	; 0x28
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}
 800ead8:	0800e84b 	.word	0x0800e84b
 800eadc:	0800e885 	.word	0x0800e885

0800eae0 <core_list_init>:

	Returns:
	Pointer to the head of the list.

*/
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b092      	sub	sp, #72	; 0x48
 800eae4:	af02      	add	r7, sp, #8
 800eae6:	60f8      	str	r0, [r7, #12]
 800eae8:	60b9      	str	r1, [r7, #8]
 800eaea:	4613      	mov	r3, r2
 800eaec:	80fb      	strh	r3, [r7, #6]
	/* calculated pointers for the list */
	ee_u32 per_item=16+sizeof(struct list_data_s);
 800eaee:	2314      	movs	r3, #20
 800eaf0:	637b      	str	r3, [r7, #52]	; 0x34
	ee_u32 size=(blksize/per_item)-2; /* to accomodate systems with 64b pointers, and make sure same code is executed, set max list elements */
 800eaf2:	68fa      	ldr	r2, [r7, #12]
 800eaf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800eafa:	3b02      	subs	r3, #2
 800eafc:	633b      	str	r3, [r7, #48]	; 0x30
	list_head *memblock_end=memblock+size;
 800eafe:	68ba      	ldr	r2, [r7, #8]
 800eb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb02:	00db      	lsls	r3, r3, #3
 800eb04:	4413      	add	r3, r2
 800eb06:	62fb      	str	r3, [r7, #44]	; 0x2c
	list_data *datablock=(list_data *)(memblock_end);
 800eb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb0a:	61bb      	str	r3, [r7, #24]
	list_data *datablock_end=datablock+size;
 800eb0c:	69ba      	ldr	r2, [r7, #24]
 800eb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb10:	009b      	lsls	r3, r3, #2
 800eb12:	4413      	add	r3, r2
 800eb14:	62bb      	str	r3, [r7, #40]	; 0x28
	/* some useful variables */
	ee_u32 i;
	list_head *finder,*list=memblock;
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	627b      	str	r3, [r7, #36]	; 0x24
	list_data info;

	/* create a fake items for the list head and tail */
	list->next=NULL;
 800eb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	601a      	str	r2, [r3, #0]
	list->info=datablock;
 800eb20:	69ba      	ldr	r2, [r7, #24]
 800eb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb24:	605a      	str	r2, [r3, #4]
	list->info->idx=0x0000;
 800eb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb28:	685b      	ldr	r3, [r3, #4]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	805a      	strh	r2, [r3, #2]
	list->info->data16=(ee_s16)0x8080;
 800eb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb30:	685b      	ldr	r3, [r3, #4]
 800eb32:	f248 0280 	movw	r2, #32896	; 0x8080
 800eb36:	801a      	strh	r2, [r3, #0]
	memblock++;
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	3308      	adds	r3, #8
 800eb3c:	60bb      	str	r3, [r7, #8]
	datablock++;
 800eb3e:	69bb      	ldr	r3, [r7, #24]
 800eb40:	3304      	adds	r3, #4
 800eb42:	61bb      	str	r3, [r7, #24]
	info.idx=0x7fff;
 800eb44:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800eb48:	82fb      	strh	r3, [r7, #22]
	info.data16=(ee_s16)0xffff;
 800eb4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb4e:	82bb      	strh	r3, [r7, #20]
	core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
 800eb50:	f107 0018 	add.w	r0, r7, #24
 800eb54:	f107 0208 	add.w	r2, r7, #8
 800eb58:	f107 0114 	add.w	r1, r7, #20
 800eb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb5e:	9301      	str	r3, [sp, #4]
 800eb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb62:	9300      	str	r3, [sp, #0]
 800eb64:	4603      	mov	r3, r0
 800eb66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb68:	f000 f876 	bl	800ec58 <core_list_insert_new>
	
	/* then insert size items */
	for (i=0; i<size; i++) {
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb70:	e02a      	b.n	800ebc8 <core_list_init+0xe8>
		ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
 800eb72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb74:	b29a      	uxth	r2, r3
 800eb76:	88fb      	ldrh	r3, [r7, #6]
 800eb78:	4053      	eors	r3, r2
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	f003 030f 	and.w	r3, r3, #15
 800eb80:	843b      	strh	r3, [r7, #32]
		ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
 800eb82:	8c3b      	ldrh	r3, [r7, #32]
 800eb84:	00db      	lsls	r3, r3, #3
 800eb86:	b29a      	uxth	r2, r3
 800eb88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb8a:	b29b      	uxth	r3, r3
 800eb8c:	f003 0307 	and.w	r3, r3, #7
 800eb90:	b29b      	uxth	r3, r3
 800eb92:	4313      	orrs	r3, r2
 800eb94:	83fb      	strh	r3, [r7, #30]
		info.data16=(dat<<8) | dat;		/* fill the data with actual data and upper bits with rebuild value */
 800eb96:	8bfb      	ldrh	r3, [r7, #30]
 800eb98:	021b      	lsls	r3, r3, #8
 800eb9a:	b21a      	sxth	r2, r3
 800eb9c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800eba0:	4313      	orrs	r3, r2
 800eba2:	b21b      	sxth	r3, r3
 800eba4:	82bb      	strh	r3, [r7, #20]
		core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
 800eba6:	f107 0018 	add.w	r0, r7, #24
 800ebaa:	f107 0208 	add.w	r2, r7, #8
 800ebae:	f107 0114 	add.w	r1, r7, #20
 800ebb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb4:	9301      	str	r3, [sp, #4]
 800ebb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb8:	9300      	str	r3, [sp, #0]
 800ebba:	4603      	mov	r3, r0
 800ebbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebbe:	f000 f84b 	bl	800ec58 <core_list_insert_new>
	for (i=0; i<size; i++) {
 800ebc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ebc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d3d0      	bcc.n	800eb72 <core_list_init+0x92>
	}
	/* and now index the list so we know initial seed order of the list */
	finder=list->next;
 800ebd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	63bb      	str	r3, [r7, #56]	; 0x38
	i=1;
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (finder->next!=NULL) {
 800ebda:	e02a      	b.n	800ec32 <core_list_init+0x152>
		if (i<size/5) /* first 20% of the list in order */
 800ebdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebde:	4a1c      	ldr	r2, [pc, #112]	; (800ec50 <core_list_init+0x170>)
 800ebe0:	fba2 2303 	umull	r2, r3, r2, r3
 800ebe4:	089b      	lsrs	r3, r3, #2
 800ebe6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d207      	bcs.n	800ebfc <core_list_init+0x11c>
			finder->info->idx=i++;
 800ebec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebee:	1c5a      	adds	r2, r3, #1
 800ebf0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ebf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebf4:	6852      	ldr	r2, [r2, #4]
 800ebf6:	b21b      	sxth	r3, r3
 800ebf8:	8053      	strh	r3, [r2, #2]
 800ebfa:	e017      	b.n	800ec2c <core_list_init+0x14c>
		else { 
			ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
 800ebfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebfe:	1c5a      	adds	r2, r3, #1
 800ec00:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ec02:	b29a      	uxth	r2, r3
 800ec04:	88fb      	ldrh	r3, [r7, #6]
 800ec06:	4053      	eors	r3, r2
 800ec08:	847b      	strh	r3, [r7, #34]	; 0x22
			finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
 800ec0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec0c:	b29b      	uxth	r3, r3
 800ec0e:	021b      	lsls	r3, r3, #8
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ec16:	b29a      	uxth	r2, r3
 800ec18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ec1a:	4313      	orrs	r3, r2
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	b21a      	sxth	r2, r3
 800ec20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec22:	685b      	ldr	r3, [r3, #4]
 800ec24:	f3c2 020d 	ubfx	r2, r2, #0, #14
 800ec28:	b212      	sxth	r2, r2
 800ec2a:	805a      	strh	r2, [r3, #2]
		}
		finder=finder->next;
 800ec2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	63bb      	str	r3, [r7, #56]	; 0x38
	while (finder->next!=NULL) {
 800ec32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d1d0      	bne.n	800ebdc <core_list_init+0xfc>
	}
	list = core_list_mergesort(list,cmp_idx,NULL);
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	4905      	ldr	r1, [pc, #20]	; (800ec54 <core_list_init+0x174>)
 800ec3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec40:	f000 f8d1 	bl	800ede6 <core_list_mergesort>
 800ec44:	6278      	str	r0, [r7, #36]	; 0x24
		ee_printf("[%04x,%04x]",finder->info->idx,(ee_u16)finder->info->data16);
		finder=finder->next;
	}
	ee_printf("\n");
#endif
	return list;
 800ec46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3740      	adds	r7, #64	; 0x40
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}
 800ec50:	cccccccd 	.word	0xcccccccd
 800ec54:	0800e885 	.word	0x0800e885

0800ec58 <core_list_insert_new>:

	Returns:
	Pointer to new item.
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
	, list_head *memblock_end, list_data *datablock_end) {
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b086      	sub	sp, #24
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	60f8      	str	r0, [r7, #12]
 800ec60:	60b9      	str	r1, [r7, #8]
 800ec62:	607a      	str	r2, [r7, #4]
 800ec64:	603b      	str	r3, [r7, #0]
	list_head *newitem;
	
	if ((*memblock+1) >= memblock_end)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	3308      	adds	r3, #8
 800ec6c:	6a3a      	ldr	r2, [r7, #32]
 800ec6e:	429a      	cmp	r2, r3
 800ec70:	d801      	bhi.n	800ec76 <core_list_insert_new+0x1e>
		return NULL;
 800ec72:	2300      	movs	r3, #0
 800ec74:	e027      	b.n	800ecc6 <core_list_insert_new+0x6e>
	if ((*datablock+1) >= datablock_end)
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	3304      	adds	r3, #4
 800ec7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d801      	bhi.n	800ec86 <core_list_insert_new+0x2e>
		return NULL;
 800ec82:	2300      	movs	r3, #0
 800ec84:	e01f      	b.n	800ecc6 <core_list_insert_new+0x6e>
		
	newitem=*memblock;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	617b      	str	r3, [r7, #20]
	(*memblock)++;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f103 0208 	add.w	r2, r3, #8
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	601a      	str	r2, [r3, #0]
	newitem->next=insert_point->next;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681a      	ldr	r2, [r3, #0]
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	601a      	str	r2, [r3, #0]
	insert_point->next=newitem;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	697a      	ldr	r2, [r7, #20]
 800eca4:	601a      	str	r2, [r3, #0]
	
	newitem->info=*datablock;
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	681a      	ldr	r2, [r3, #0]
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	605a      	str	r2, [r3, #4]
	(*datablock)++;
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	1d1a      	adds	r2, r3, #4
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	601a      	str	r2, [r3, #0]
	copy_info(newitem->info,info);
 800ecb8:	697b      	ldr	r3, [r7, #20]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	68b9      	ldr	r1, [r7, #8]
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7ff fe19 	bl	800e8f6 <copy_info>
	
	return newitem;
 800ecc4:	697b      	ldr	r3, [r7, #20]
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3718      	adds	r7, #24
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}

0800ecce <core_list_remove>:
	since there is always a fake item at the end of the list, no need to check for NULL.

	Returns:
	Removed item.
*/
list_head *core_list_remove(list_head *item) {
 800ecce:	b480      	push	{r7}
 800ecd0:	b085      	sub	sp, #20
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	6078      	str	r0, [r7, #4]
	list_data *tmp;
	list_head *ret=item->next;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	60fb      	str	r3, [r7, #12]
	/* swap data pointers */
	tmp=item->info;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	60bb      	str	r3, [r7, #8]
	item->info=ret->info;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	685a      	ldr	r2, [r3, #4]
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	605a      	str	r2, [r3, #4]
	ret->info=tmp;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	68ba      	ldr	r2, [r7, #8]
 800ecee:	605a      	str	r2, [r3, #4]
	/* and eliminate item */
	item->next=item->next->next;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	681a      	ldr	r2, [r3, #0]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	601a      	str	r2, [r3, #0]
	ret->next=NULL;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	601a      	str	r2, [r3, #0]
	return ret;
 800ed00:	68fb      	ldr	r3, [r7, #12]
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	3714      	adds	r7, #20
 800ed06:	46bd      	mov	sp, r7
 800ed08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0c:	4770      	bx	lr

0800ed0e <core_list_undo_remove>:

	Returns:
	The item that was linked back to the list.
	
*/
list_head *core_list_undo_remove(list_head *item_removed, list_head *item_modified) {
 800ed0e:	b480      	push	{r7}
 800ed10:	b085      	sub	sp, #20
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	6078      	str	r0, [r7, #4]
 800ed16:	6039      	str	r1, [r7, #0]
	list_data *tmp;
	/* swap data pointers */
	tmp=item_removed->info;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	60fb      	str	r3, [r7, #12]
	item_removed->info=item_modified->info;
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	685a      	ldr	r2, [r3, #4]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	605a      	str	r2, [r3, #4]
	item_modified->info=tmp;
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	68fa      	ldr	r2, [r7, #12]
 800ed2a:	605a      	str	r2, [r3, #4]
	/* and insert item */
	item_removed->next=item_modified->next;
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	681a      	ldr	r2, [r3, #0]
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	601a      	str	r2, [r3, #0]
	item_modified->next=item_removed;
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	687a      	ldr	r2, [r7, #4]
 800ed38:	601a      	str	r2, [r3, #0]
	return item_removed;
 800ed3a:	687b      	ldr	r3, [r7, #4]
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3714      	adds	r7, #20
 800ed40:	46bd      	mov	sp, r7
 800ed42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed46:	4770      	bx	lr

0800ed48 <core_list_find>:
	info - idx or data to find

	Returns:
	Found item, or NULL if not found.
*/
list_head *core_list_find(list_head *list,list_data *info) {
 800ed48:	b480      	push	{r7}
 800ed4a:	b083      	sub	sp, #12
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	6039      	str	r1, [r7, #0]
	if (info->idx>=0) {
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	db14      	blt.n	800ed86 <core_list_find+0x3e>
		while (list && (list->info->idx != info->idx))
 800ed5c:	e002      	b.n	800ed64 <core_list_find+0x1c>
			list=list->next;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	607b      	str	r3, [r7, #4]
		while (list && (list->info->idx != info->idx))
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d008      	beq.n	800ed7c <core_list_find+0x34>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d1f0      	bne.n	800ed5e <core_list_find+0x16>
		return list;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	e011      	b.n	800eda4 <core_list_find+0x5c>
	} else {
		while (list && ((list->info->data16 & 0xff) != info->data16))
			list=list->next;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	607b      	str	r3, [r7, #4]
		while (list && ((list->info->data16 & 0xff) != info->data16))
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d00a      	beq.n	800eda2 <core_list_find+0x5a>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	685b      	ldr	r3, [r3, #4]
 800ed90:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed94:	b29b      	uxth	r3, r3
 800ed96:	b2db      	uxtb	r3, r3
 800ed98:	683a      	ldr	r2, [r7, #0]
 800ed9a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d1ee      	bne.n	800ed80 <core_list_find+0x38>
		return list;
 800eda2:	687b      	ldr	r3, [r7, #4]
	}
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	370c      	adds	r7, #12
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr

0800edb0 <core_list_reverse>:

	Returns:
	Found item, or NULL if not found.
*/

list_head *core_list_reverse(list_head *list) {
 800edb0:	b480      	push	{r7}
 800edb2:	b085      	sub	sp, #20
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
	list_head *next=NULL, *tmp;
 800edb8:	2300      	movs	r3, #0
 800edba:	60fb      	str	r3, [r7, #12]
	while (list) {
 800edbc:	e009      	b.n	800edd2 <core_list_reverse+0x22>
		tmp=list->next;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	60bb      	str	r3, [r7, #8]
		list->next=next;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	68fa      	ldr	r2, [r7, #12]
 800edc8:	601a      	str	r2, [r3, #0]
		next=list;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	60fb      	str	r3, [r7, #12]
		list=tmp;
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	607b      	str	r3, [r7, #4]
	while (list) {
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d1f2      	bne.n	800edbe <core_list_reverse+0xe>
	}
	return next;
 800edd8:	68fb      	ldr	r3, [r7, #12]
}
 800edda:	4618      	mov	r0, r3
 800eddc:	3714      	adds	r7, #20
 800edde:	46bd      	mov	sp, r7
 800ede0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede4:	4770      	bx	lr

0800ede6 <core_list_mergesort>:
	Note: 
	We have a special header for the list that will always be first,
	but the algorithm could theoretically modify where the list starts.

 */
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res) {
 800ede6:	b580      	push	{r7, lr}
 800ede8:	b08e      	sub	sp, #56	; 0x38
 800edea:	af00      	add	r7, sp, #0
 800edec:	60f8      	str	r0, [r7, #12]
 800edee:	60b9      	str	r1, [r7, #8]
 800edf0:	607a      	str	r2, [r7, #4]
    list_head *p, *q, *e, *tail;
    ee_s32 insize, nmerges, psize, qsize, i;

    insize = 1;
 800edf2:	2301      	movs	r3, #1
 800edf4:	627b      	str	r3, [r7, #36]	; 0x24

    while (1) {
        p = list;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	637b      	str	r3, [r7, #52]	; 0x34
        list = NULL;
 800edfa:	2300      	movs	r3, #0
 800edfc:	60fb      	str	r3, [r7, #12]
        tail = NULL;
 800edfe:	2300      	movs	r3, #0
 800ee00:	62bb      	str	r3, [r7, #40]	; 0x28

        nmerges = 0;  /* count number of merges we do in this pass */
 800ee02:	2300      	movs	r3, #0
 800ee04:	623b      	str	r3, [r7, #32]

        while (p) {
 800ee06:	e06a      	b.n	800eede <core_list_mergesort+0xf8>
            nmerges++;  /* there exists a merge to be done */
 800ee08:	6a3b      	ldr	r3, [r7, #32]
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	623b      	str	r3, [r7, #32]
            /* step `insize' places along from p */
            q = p;
 800ee0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee10:	633b      	str	r3, [r7, #48]	; 0x30
            psize = 0;
 800ee12:	2300      	movs	r3, #0
 800ee14:	61fb      	str	r3, [r7, #28]
            for (i = 0; i < insize; i++) {
 800ee16:	2300      	movs	r3, #0
 800ee18:	617b      	str	r3, [r7, #20]
 800ee1a:	e00b      	b.n	800ee34 <core_list_mergesort+0x4e>
                psize++;
 800ee1c:	69fb      	ldr	r3, [r7, #28]
 800ee1e:	3301      	adds	r3, #1
 800ee20:	61fb      	str	r3, [r7, #28]
			    q = q->next;
 800ee22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	633b      	str	r3, [r7, #48]	; 0x30
                if (!q) break;
 800ee28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d007      	beq.n	800ee3e <core_list_mergesort+0x58>
            for (i = 0; i < insize; i++) {
 800ee2e:	697b      	ldr	r3, [r7, #20]
 800ee30:	3301      	adds	r3, #1
 800ee32:	617b      	str	r3, [r7, #20]
 800ee34:	697a      	ldr	r2, [r7, #20]
 800ee36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	dbef      	blt.n	800ee1c <core_list_mergesort+0x36>
 800ee3c:	e000      	b.n	800ee40 <core_list_mergesort+0x5a>
                if (!q) break;
 800ee3e:	bf00      	nop
            }

            /* if q hasn't fallen off end, we have two lists to merge */
            qsize = insize;
 800ee40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee42:	61bb      	str	r3, [r7, #24]

            /* now we have two lists; merge them */
            while (psize > 0 || (qsize > 0 && q)) {
 800ee44:	e040      	b.n	800eec8 <core_list_mergesort+0xe2>

				/* decide whether next element of merge comes from p or q */
				if (psize == 0) {
 800ee46:	69fb      	ldr	r3, [r7, #28]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d108      	bne.n	800ee5e <core_list_mergesort+0x78>
				    /* p is empty; e must come from q. */
				    e = q; q = q->next; qsize--;
 800ee4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	633b      	str	r3, [r7, #48]	; 0x30
 800ee56:	69bb      	ldr	r3, [r7, #24]
 800ee58:	3b01      	subs	r3, #1
 800ee5a:	61bb      	str	r3, [r7, #24]
 800ee5c:	e029      	b.n	800eeb2 <core_list_mergesort+0xcc>
				} else if (qsize == 0 || !q) {
 800ee5e:	69bb      	ldr	r3, [r7, #24]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d002      	beq.n	800ee6a <core_list_mergesort+0x84>
 800ee64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d108      	bne.n	800ee7c <core_list_mergesort+0x96>
				    /* q is empty; e must come from p. */
				    e = p; p = p->next; psize--;
 800ee6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	637b      	str	r3, [r7, #52]	; 0x34
 800ee74:	69fb      	ldr	r3, [r7, #28]
 800ee76:	3b01      	subs	r3, #1
 800ee78:	61fb      	str	r3, [r7, #28]
 800ee7a:	e01a      	b.n	800eeb2 <core_list_mergesort+0xcc>
				} else if (cmp(p->info,q->info,res) <= 0) {
 800ee7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee7e:	6858      	ldr	r0, [r3, #4]
 800ee80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee82:	6859      	ldr	r1, [r3, #4]
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	687a      	ldr	r2, [r7, #4]
 800ee88:	4798      	blx	r3
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	dc08      	bgt.n	800eea2 <core_list_mergesort+0xbc>
				    /* First element of p is lower (or same); e must come from p. */
				    e = p; p = p->next; psize--;
 800ee90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	637b      	str	r3, [r7, #52]	; 0x34
 800ee9a:	69fb      	ldr	r3, [r7, #28]
 800ee9c:	3b01      	subs	r3, #1
 800ee9e:	61fb      	str	r3, [r7, #28]
 800eea0:	e007      	b.n	800eeb2 <core_list_mergesort+0xcc>
				} else {
				    /* First element of q is lower; e must come from q. */
				    e = q; q = q->next; qsize--;
 800eea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	633b      	str	r3, [r7, #48]	; 0x30
 800eeac:	69bb      	ldr	r3, [r7, #24]
 800eeae:	3b01      	subs	r3, #1
 800eeb0:	61bb      	str	r3, [r7, #24]
				}

		        /* add the next element to the merged list */
				if (tail) {
 800eeb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d003      	beq.n	800eec0 <core_list_mergesort+0xda>
				    tail->next = e;
 800eeb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eebc:	601a      	str	r2, [r3, #0]
 800eebe:	e001      	b.n	800eec4 <core_list_mergesort+0xde>
				} else {
				    list = e;
 800eec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec2:	60fb      	str	r3, [r7, #12]
				}
				tail = e;
 800eec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec6:	62bb      	str	r3, [r7, #40]	; 0x28
            while (psize > 0 || (qsize > 0 && q)) {
 800eec8:	69fb      	ldr	r3, [r7, #28]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	dcbb      	bgt.n	800ee46 <core_list_mergesort+0x60>
 800eece:	69bb      	ldr	r3, [r7, #24]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	dd02      	ble.n	800eeda <core_list_mergesort+0xf4>
 800eed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d1b5      	bne.n	800ee46 <core_list_mergesort+0x60>
	        }

			/* now p has stepped `insize' places along, and q has too */
			p = q;
 800eeda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eedc:	637b      	str	r3, [r7, #52]	; 0x34
        while (p) {
 800eede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d191      	bne.n	800ee08 <core_list_mergesort+0x22>
        }
		
	    tail->next = NULL;
 800eee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee6:	2200      	movs	r2, #0
 800eee8:	601a      	str	r2, [r3, #0]

        /* If we have done only one merge, we're finished. */
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
 800eeea:	6a3b      	ldr	r3, [r7, #32]
 800eeec:	2b01      	cmp	r3, #1
 800eeee:	dc01      	bgt.n	800eef4 <core_list_mergesort+0x10e>
            return list;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	e003      	b.n	800eefc <core_list_mergesort+0x116>

        /* Otherwise repeat, merging lists twice the size */
        insize *= 2;
 800eef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef6:	005b      	lsls	r3, r3, #1
 800eef8:	627b      	str	r3, [r7, #36]	; 0x24
        p = list;
 800eefa:	e77c      	b.n	800edf6 <core_list_mergesort+0x10>
    }
#if COMPILER_REQUIRES_SORT_RETURN
	return list;
#endif
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3738      	adds	r7, #56	; 0x38
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <iterate>:
	NULL.
*/
static ee_u16 list_known_crc[]   =      {(ee_u16)0xd4b0,(ee_u16)0x3340,(ee_u16)0x6a79,(ee_u16)0xe714,(ee_u16)0xe3c1};
static ee_u16 matrix_known_crc[] =      {(ee_u16)0xbe52,(ee_u16)0x1199,(ee_u16)0x5608,(ee_u16)0x1fd7,(ee_u16)0x0747};
static ee_u16 state_known_crc[]  =      {(ee_u16)0x5e47,(ee_u16)0x39bf,(ee_u16)0xe5a4,(ee_u16)0x8e3a,(ee_u16)0x8d84};
void *iterate(void *pres) {
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b086      	sub	sp, #24
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
	ee_u32 i;
	ee_u16 crc;
	core_results *res=(core_results *)pres;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	613b      	str	r3, [r7, #16]
	ee_u32 iterations=res->iterations;
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	69db      	ldr	r3, [r3, #28]
 800ef14:	60fb      	str	r3, [r7, #12]
	res->crc=0;
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	2200      	movs	r2, #0
 800ef1a:	871a      	strh	r2, [r3, #56]	; 0x38
	res->crclist=0;
 800ef1c:	693b      	ldr	r3, [r7, #16]
 800ef1e:	2200      	movs	r2, #0
 800ef20:	875a      	strh	r2, [r3, #58]	; 0x3a
	res->crcmatrix=0;
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	2200      	movs	r2, #0
 800ef26:	879a      	strh	r2, [r3, #60]	; 0x3c
	res->crcstate=0;
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	87da      	strh	r2, [r3, #62]	; 0x3e

	for (i=0; i<iterations; i++) {
 800ef2e:	2300      	movs	r3, #0
 800ef30:	617b      	str	r3, [r7, #20]
 800ef32:	e02c      	b.n	800ef8e <iterate+0x8a>
		crc=core_bench_list(res,1);
 800ef34:	2101      	movs	r1, #1
 800ef36:	6938      	ldr	r0, [r7, #16]
 800ef38:	f7ff fcf2 	bl	800e920 <core_bench_list>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	817b      	strh	r3, [r7, #10]
		res->crc=crcu16(crc,res->crc);
 800ef40:	693b      	ldr	r3, [r7, #16]
 800ef42:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800ef44:	897b      	ldrh	r3, [r7, #10]
 800ef46:	4611      	mov	r1, r2
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f001 fcad 	bl	80108a8 <crcu16>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	461a      	mov	r2, r3
 800ef52:	693b      	ldr	r3, [r7, #16]
 800ef54:	871a      	strh	r2, [r3, #56]	; 0x38
		crc=core_bench_list(res,-1);
 800ef56:	f04f 31ff 	mov.w	r1, #4294967295
 800ef5a:	6938      	ldr	r0, [r7, #16]
 800ef5c:	f7ff fce0 	bl	800e920 <core_bench_list>
 800ef60:	4603      	mov	r3, r0
 800ef62:	817b      	strh	r3, [r7, #10]
		res->crc=crcu16(crc,res->crc);
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800ef68:	897b      	ldrh	r3, [r7, #10]
 800ef6a:	4611      	mov	r1, r2
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f001 fc9b 	bl	80108a8 <crcu16>
 800ef72:	4603      	mov	r3, r0
 800ef74:	461a      	mov	r2, r3
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	871a      	strh	r2, [r3, #56]	; 0x38
		if (i==0) res->crclist=res->crc;
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d103      	bne.n	800ef88 <iterate+0x84>
 800ef80:	693b      	ldr	r3, [r7, #16]
 800ef82:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	875a      	strh	r2, [r3, #58]	; 0x3a
	for (i=0; i<iterations; i++) {
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	617b      	str	r3, [r7, #20]
 800ef8e:	697a      	ldr	r2, [r7, #20]
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d3ce      	bcc.n	800ef34 <iterate+0x30>
	}
	return NULL;
 800ef96:	2300      	movs	r3, #0
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3718      	adds	r7, #24
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}

0800efa0 <coremark_main>:
	4 - Iterations  : Special, if set to 0, iterations will be automatically determined such that the benchmark will run between 10 to 100 secs

*/

#if MAIN_HAS_NOARGC
MAIN_RETURN_TYPE coremark_main(void) {
 800efa0:	b5b0      	push	{r4, r5, r7, lr}
 800efa2:	ed2d 8b02 	vpush	{d8}
 800efa6:	f5ad 6d05 	sub.w	sp, sp, #2128	; 0x850
 800efaa:	af04      	add	r7, sp, #16
	int argc=0;
 800efac:	2300      	movs	r3, #0
 800efae:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	char *argv[1];
#else
MAIN_RETURN_TYPE coremark_main(int argc, char *argv[]) {
#endif
	ee_u16 i,j=0,num_algorithms=0;
 800efb2:	2300      	movs	r3, #0
 800efb4:	f8a7 383c 	strh.w	r3, [r7, #2108]	; 0x83c
 800efb8:	2300      	movs	r3, #0
 800efba:	f8a7 383a 	strh.w	r3, [r7, #2106]	; 0x83a
	ee_s16 known_id=-1,total_errors=0;
 800efbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800efc2:	f8a7 3838 	strh.w	r3, [r7, #2104]	; 0x838
 800efc6:	2300      	movs	r3, #0
 800efc8:	f8a7 3836 	strh.w	r3, [r7, #2102]	; 0x836
	ee_u16 seedcrc=0;
 800efcc:	2300      	movs	r3, #0
 800efce:	f8a7 3822 	strh.w	r3, [r7, #2082]	; 0x822
	core_results results[MULTITHREAD];
#if (MEM_METHOD==MEM_STACK)
	ee_u8 stack_memblock[TOTAL_DATA_SIZE*MULTITHREAD];
#endif
	/* first call any initializations needed */
	portable_init(&(results[0].port), &argc, argv);
 800efd2:	f607 0214 	addw	r2, r7, #2068	; 0x814
 800efd6:	f607 0118 	addw	r1, r7, #2072	; 0x818
 800efda:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800efde:	3342      	adds	r3, #66	; 0x42
 800efe0:	4618      	mov	r0, r3
 800efe2:	f001 f925 	bl	8010230 <portable_init>
	/* First some checks to make sure benchmark will run ok */
	if (sizeof(struct list_head_s)>128) {
		ee_printf("list_head structure too big for comparable data!\n");
		return MAIN_RETURN_VAL;
	}
	results[0].seed1=get_seed(1);
 800efe6:	2001      	movs	r0, #1
 800efe8:	f001 fbd6 	bl	8010798 <get_seed_32>
 800efec:	4603      	mov	r3, r0
 800efee:	b21b      	sxth	r3, r3
 800eff0:	f8a7 37d0 	strh.w	r3, [r7, #2000]	; 0x7d0
	results[0].seed2=get_seed(2);
 800eff4:	2002      	movs	r0, #2
 800eff6:	f001 fbcf 	bl	8010798 <get_seed_32>
 800effa:	4603      	mov	r3, r0
 800effc:	b21b      	sxth	r3, r3
 800effe:	f8a7 37d2 	strh.w	r3, [r7, #2002]	; 0x7d2
	results[0].seed3=get_seed(3);
 800f002:	2003      	movs	r0, #3
 800f004:	f001 fbc8 	bl	8010798 <get_seed_32>
 800f008:	4603      	mov	r3, r0
 800f00a:	b21b      	sxth	r3, r3
 800f00c:	f8a7 37d4 	strh.w	r3, [r7, #2004]	; 0x7d4
	results[0].iterations=get_seed_32(4);
 800f010:	2004      	movs	r0, #4
 800f012:	f001 fbc1 	bl	8010798 <get_seed_32>
 800f016:	4603      	mov	r3, r0
 800f018:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
#if CORE_DEBUG
	results[0].iterations=1;
#endif
	results[0].execs=get_seed_32(5);
 800f01c:	2005      	movs	r0, #5
 800f01e:	f001 fbbb 	bl	8010798 <get_seed_32>
 800f022:	4603      	mov	r3, r0
 800f024:	f8c7 37f0 	str.w	r3, [r7, #2032]	; 0x7f0
	if (results[0].execs==0) { /* if not supplied, execute all algorithms */
 800f028:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d102      	bne.n	800f036 <coremark_main+0x96>
		results[0].execs=ALL_ALGORITHMS_MASK;
 800f030:	2307      	movs	r3, #7
 800f032:	f8c7 37f0 	str.w	r3, [r7, #2032]	; 0x7f0
	}
		/* put in some default values based on one seed only for easy testing */
	if ((results[0].seed1==0) && (results[0].seed2==0) && (results[0].seed3==0)) { /* validation run */
 800f036:	f9b7 37d0 	ldrsh.w	r3, [r7, #2000]	; 0x7d0
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d110      	bne.n	800f060 <coremark_main+0xc0>
 800f03e:	f9b7 37d2 	ldrsh.w	r3, [r7, #2002]	; 0x7d2
 800f042:	2b00      	cmp	r3, #0
 800f044:	d10c      	bne.n	800f060 <coremark_main+0xc0>
 800f046:	f9b7 37d4 	ldrsh.w	r3, [r7, #2004]	; 0x7d4
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d108      	bne.n	800f060 <coremark_main+0xc0>
		results[0].seed1=0;
 800f04e:	2300      	movs	r3, #0
 800f050:	f8a7 37d0 	strh.w	r3, [r7, #2000]	; 0x7d0
		results[0].seed2=0;
 800f054:	2300      	movs	r3, #0
 800f056:	f8a7 37d2 	strh.w	r3, [r7, #2002]	; 0x7d2
		results[0].seed3=0x66;
 800f05a:	2366      	movs	r3, #102	; 0x66
 800f05c:	f8a7 37d4 	strh.w	r3, [r7, #2004]	; 0x7d4
	}
	if ((results[0].seed1==1) && (results[0].seed2==0) && (results[0].seed3==0)) { /* perfromance run */
 800f060:	f9b7 37d0 	ldrsh.w	r3, [r7, #2000]	; 0x7d0
 800f064:	2b01      	cmp	r3, #1
 800f066:	d112      	bne.n	800f08e <coremark_main+0xee>
 800f068:	f9b7 37d2 	ldrsh.w	r3, [r7, #2002]	; 0x7d2
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d10e      	bne.n	800f08e <coremark_main+0xee>
 800f070:	f9b7 37d4 	ldrsh.w	r3, [r7, #2004]	; 0x7d4
 800f074:	2b00      	cmp	r3, #0
 800f076:	d10a      	bne.n	800f08e <coremark_main+0xee>
		results[0].seed1=0x3415;
 800f078:	f243 4315 	movw	r3, #13333	; 0x3415
 800f07c:	f8a7 37d0 	strh.w	r3, [r7, #2000]	; 0x7d0
		results[0].seed2=0x3415;
 800f080:	f243 4315 	movw	r3, #13333	; 0x3415
 800f084:	f8a7 37d2 	strh.w	r3, [r7, #2002]	; 0x7d2
		results[0].seed3=0x66;
 800f088:	2366      	movs	r3, #102	; 0x66
 800f08a:	f8a7 37d4 	strh.w	r3, [r7, #2004]	; 0x7d4
		results[i].seed3=results[0].seed3;
		results[i].err=0;
		results[i].execs=results[0].execs;
	}
#elif (MEM_METHOD==MEM_STACK)
	for (i=0 ; i<MULTITHREAD; i++) {
 800f08e:	2300      	movs	r3, #0
 800f090:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800f094:	e068      	b.n	800f168 <coremark_main+0x1c8>
		results[i].memblock[0]=stack_memblock+i*TOTAL_DATA_SIZE;
 800f096:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800f09a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800f09e:	fb02 f303 	mul.w	r3, r2, r3
 800f0a2:	4619      	mov	r1, r3
 800f0a4:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f0a8:	463b      	mov	r3, r7
 800f0aa:	4419      	add	r1, r3
 800f0ac:	4613      	mov	r3, r2
 800f0ae:	011b      	lsls	r3, r3, #4
 800f0b0:	4413      	add	r3, r2
 800f0b2:	009b      	lsls	r3, r3, #2
 800f0b4:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f0b8:	443b      	add	r3, r7
 800f0ba:	3b68      	subs	r3, #104	; 0x68
 800f0bc:	6019      	str	r1, [r3, #0]
		results[i].size=TOTAL_DATA_SIZE;
 800f0be:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f0c2:	4613      	mov	r3, r2
 800f0c4:	011b      	lsls	r3, r3, #4
 800f0c6:	4413      	add	r3, r2
 800f0c8:	009b      	lsls	r3, r3, #2
 800f0ca:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f0ce:	443b      	add	r3, r7
 800f0d0:	3b58      	subs	r3, #88	; 0x58
 800f0d2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800f0d6:	601a      	str	r2, [r3, #0]
		results[i].seed1=results[0].seed1;
 800f0d8:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f0dc:	f9b7 17d0 	ldrsh.w	r1, [r7, #2000]	; 0x7d0
 800f0e0:	4613      	mov	r3, r2
 800f0e2:	011b      	lsls	r3, r3, #4
 800f0e4:	4413      	add	r3, r2
 800f0e6:	009b      	lsls	r3, r3, #2
 800f0e8:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f0ec:	443b      	add	r3, r7
 800f0ee:	3b70      	subs	r3, #112	; 0x70
 800f0f0:	460a      	mov	r2, r1
 800f0f2:	801a      	strh	r2, [r3, #0]
		results[i].seed2=results[0].seed2;
 800f0f4:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f0f8:	f9b7 17d2 	ldrsh.w	r1, [r7, #2002]	; 0x7d2
 800f0fc:	4613      	mov	r3, r2
 800f0fe:	011b      	lsls	r3, r3, #4
 800f100:	4413      	add	r3, r2
 800f102:	009b      	lsls	r3, r3, #2
 800f104:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f108:	443b      	add	r3, r7
 800f10a:	3b6e      	subs	r3, #110	; 0x6e
 800f10c:	460a      	mov	r2, r1
 800f10e:	801a      	strh	r2, [r3, #0]
		results[i].seed3=results[0].seed3;
 800f110:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f114:	f9b7 17d4 	ldrsh.w	r1, [r7, #2004]	; 0x7d4
 800f118:	4613      	mov	r3, r2
 800f11a:	011b      	lsls	r3, r3, #4
 800f11c:	4413      	add	r3, r2
 800f11e:	009b      	lsls	r3, r3, #2
 800f120:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f124:	443b      	add	r3, r7
 800f126:	3b6c      	subs	r3, #108	; 0x6c
 800f128:	460a      	mov	r2, r1
 800f12a:	801a      	strh	r2, [r3, #0]
		results[i].err=0;
 800f12c:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f130:	4613      	mov	r3, r2
 800f132:	011b      	lsls	r3, r3, #4
 800f134:	4413      	add	r3, r2
 800f136:	009b      	lsls	r3, r3, #2
 800f138:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f13c:	443b      	add	r3, r7
 800f13e:	3b30      	subs	r3, #48	; 0x30
 800f140:	2200      	movs	r2, #0
 800f142:	801a      	strh	r2, [r3, #0]
		results[i].execs=results[0].execs;
 800f144:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f148:	f8d7 17f0 	ldr.w	r1, [r7, #2032]	; 0x7f0
 800f14c:	4613      	mov	r3, r2
 800f14e:	011b      	lsls	r3, r3, #4
 800f150:	4413      	add	r3, r2
 800f152:	009b      	lsls	r3, r3, #2
 800f154:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f158:	443b      	add	r3, r7
 800f15a:	3b50      	subs	r3, #80	; 0x50
 800f15c:	6019      	str	r1, [r3, #0]
	for (i=0 ; i<MULTITHREAD; i++) {
 800f15e:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800f162:	3301      	adds	r3, #1
 800f164:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800f168:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d092      	beq.n	800f096 <coremark_main+0xf6>
#else
#error "Please define a way to initialize a memory block."
#endif
	/* Data init */ 
	/* Find out how space much we have based on number of algorithms */
	for (i=0; i<NUM_ALGORITHMS; i++) {
 800f170:	2300      	movs	r3, #0
 800f172:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800f176:	e014      	b.n	800f1a2 <coremark_main+0x202>
		if ((1<<(ee_u32)i) & results[0].execs)
 800f178:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800f17c:	2201      	movs	r2, #1
 800f17e:	fa02 f303 	lsl.w	r3, r2, r3
 800f182:	461a      	mov	r2, r3
 800f184:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 800f188:	4013      	ands	r3, r2
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d004      	beq.n	800f198 <coremark_main+0x1f8>
			num_algorithms++;
 800f18e:	f8b7 383a 	ldrh.w	r3, [r7, #2106]	; 0x83a
 800f192:	3301      	adds	r3, #1
 800f194:	f8a7 383a 	strh.w	r3, [r7, #2106]	; 0x83a
	for (i=0; i<NUM_ALGORITHMS; i++) {
 800f198:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800f19c:	3301      	adds	r3, #1
 800f19e:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800f1a2:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800f1a6:	2b02      	cmp	r3, #2
 800f1a8:	d9e6      	bls.n	800f178 <coremark_main+0x1d8>
	}
	for (i=0 ; i<MULTITHREAD; i++) 
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800f1b0:	e01e      	b.n	800f1f0 <coremark_main+0x250>
		results[i].size=results[i].size/num_algorithms;
 800f1b2:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f1b6:	4613      	mov	r3, r2
 800f1b8:	011b      	lsls	r3, r3, #4
 800f1ba:	4413      	add	r3, r2
 800f1bc:	009b      	lsls	r3, r3, #2
 800f1be:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f1c2:	443b      	add	r3, r7
 800f1c4:	3b58      	subs	r3, #88	; 0x58
 800f1c6:	6819      	ldr	r1, [r3, #0]
 800f1c8:	f8b7 383a 	ldrh.w	r3, [r7, #2106]	; 0x83a
 800f1cc:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f1d0:	fbb1 f1f3 	udiv	r1, r1, r3
 800f1d4:	4613      	mov	r3, r2
 800f1d6:	011b      	lsls	r3, r3, #4
 800f1d8:	4413      	add	r3, r2
 800f1da:	009b      	lsls	r3, r3, #2
 800f1dc:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f1e0:	443b      	add	r3, r7
 800f1e2:	3b58      	subs	r3, #88	; 0x58
 800f1e4:	6019      	str	r1, [r3, #0]
	for (i=0 ; i<MULTITHREAD; i++) 
 800f1e6:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800f1ea:	3301      	adds	r3, #1
 800f1ec:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800f1f0:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d0dc      	beq.n	800f1b2 <coremark_main+0x212>
	/* Assign pointers */
	for (i=0; i<NUM_ALGORITHMS; i++) {
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800f1fe:	e043      	b.n	800f288 <coremark_main+0x2e8>
		ee_u32 ctx;
		if ((1<<(ee_u32)i) & results[0].execs) {
 800f200:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800f204:	2201      	movs	r2, #1
 800f206:	fa02 f303 	lsl.w	r3, r2, r3
 800f20a:	461a      	mov	r2, r3
 800f20c:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 800f210:	4013      	ands	r3, r2
 800f212:	2b00      	cmp	r3, #0
 800f214:	d033      	beq.n	800f27e <coremark_main+0x2de>
			for (ctx=0 ; ctx<MULTITHREAD; ctx++)
 800f216:	2300      	movs	r3, #0
 800f218:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830
 800f21c:	e026      	b.n	800f26c <coremark_main+0x2cc>
				results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
 800f21e:	f8d7 2830 	ldr.w	r2, [r7, #2096]	; 0x830
 800f222:	4613      	mov	r3, r2
 800f224:	011b      	lsls	r3, r3, #4
 800f226:	4413      	add	r3, r2
 800f228:	009b      	lsls	r3, r3, #2
 800f22a:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f22e:	443b      	add	r3, r7
 800f230:	3b68      	subs	r3, #104	; 0x68
 800f232:	681a      	ldr	r2, [r3, #0]
 800f234:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 800f238:	f8b7 183c 	ldrh.w	r1, [r7, #2108]	; 0x83c
 800f23c:	fb01 f303 	mul.w	r3, r1, r3
 800f240:	f8b7 183e 	ldrh.w	r1, [r7, #2110]	; 0x83e
 800f244:	1c48      	adds	r0, r1, #1
 800f246:	18d1      	adds	r1, r2, r3
 800f248:	f8d7 2830 	ldr.w	r2, [r7, #2096]	; 0x830
 800f24c:	4613      	mov	r3, r2
 800f24e:	011b      	lsls	r3, r3, #4
 800f250:	4413      	add	r3, r2
 800f252:	4403      	add	r3, r0
 800f254:	3302      	adds	r3, #2
 800f256:	009b      	lsls	r3, r3, #2
 800f258:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f25c:	443b      	add	r3, r7
 800f25e:	f843 1c70 	str.w	r1, [r3, #-112]
			for (ctx=0 ; ctx<MULTITHREAD; ctx++)
 800f262:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 800f266:	3301      	adds	r3, #1
 800f268:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830
 800f26c:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 800f270:	2b00      	cmp	r3, #0
 800f272:	d0d4      	beq.n	800f21e <coremark_main+0x27e>
			j++;
 800f274:	f8b7 383c 	ldrh.w	r3, [r7, #2108]	; 0x83c
 800f278:	3301      	adds	r3, #1
 800f27a:	f8a7 383c 	strh.w	r3, [r7, #2108]	; 0x83c
	for (i=0; i<NUM_ALGORITHMS; i++) {
 800f27e:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800f282:	3301      	adds	r3, #1
 800f284:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800f288:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800f28c:	2b02      	cmp	r3, #2
 800f28e:	d9b7      	bls.n	800f200 <coremark_main+0x260>
		}
	}
	/* call inits */
	for (i=0 ; i<MULTITHREAD; i++) {
 800f290:	2300      	movs	r3, #0
 800f292:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800f296:	e0ac      	b.n	800f3f2 <coremark_main+0x452>
		if (results[i].execs & ID_LIST) {
 800f298:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f29c:	4613      	mov	r3, r2
 800f29e:	011b      	lsls	r3, r3, #4
 800f2a0:	4413      	add	r3, r2
 800f2a2:	009b      	lsls	r3, r3, #2
 800f2a4:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f2a8:	443b      	add	r3, r7
 800f2aa:	3b50      	subs	r3, #80	; 0x50
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f003 0301 	and.w	r3, r3, #1
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d027      	beq.n	800f306 <coremark_main+0x366>
			results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
 800f2b6:	f8d7 07e8 	ldr.w	r0, [r7, #2024]	; 0x7e8
 800f2ba:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f2be:	4613      	mov	r3, r2
 800f2c0:	011b      	lsls	r3, r3, #4
 800f2c2:	4413      	add	r3, r2
 800f2c4:	009b      	lsls	r3, r3, #2
 800f2c6:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f2ca:	443b      	add	r3, r7
 800f2cc:	3b64      	subs	r3, #100	; 0x64
 800f2ce:	6819      	ldr	r1, [r3, #0]
 800f2d0:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f2d4:	4613      	mov	r3, r2
 800f2d6:	011b      	lsls	r3, r3, #4
 800f2d8:	4413      	add	r3, r2
 800f2da:	009b      	lsls	r3, r3, #2
 800f2dc:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f2e0:	443b      	add	r3, r7
 800f2e2:	3b70      	subs	r3, #112	; 0x70
 800f2e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2e8:	f8b7 483e 	ldrh.w	r4, [r7, #2110]	; 0x83e
 800f2ec:	461a      	mov	r2, r3
 800f2ee:	f7ff fbf7 	bl	800eae0 <core_list_init>
 800f2f2:	4602      	mov	r2, r0
 800f2f4:	4623      	mov	r3, r4
 800f2f6:	011b      	lsls	r3, r3, #4
 800f2f8:	4423      	add	r3, r4
 800f2fa:	009b      	lsls	r3, r3, #2
 800f2fc:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f300:	443b      	add	r3, r7
 800f302:	3b4c      	subs	r3, #76	; 0x4c
 800f304:	601a      	str	r2, [r3, #0]
		}
		if (results[i].execs & ID_MATRIX) {
 800f306:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f30a:	4613      	mov	r3, r2
 800f30c:	011b      	lsls	r3, r3, #4
 800f30e:	4413      	add	r3, r2
 800f310:	009b      	lsls	r3, r3, #2
 800f312:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f316:	443b      	add	r3, r7
 800f318:	3b50      	subs	r3, #80	; 0x50
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	f003 0302 	and.w	r3, r3, #2
 800f320:	2b00      	cmp	r3, #0
 800f322:	d036      	beq.n	800f392 <coremark_main+0x3f2>
			core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
 800f324:	f8d7 07e8 	ldr.w	r0, [r7, #2024]	; 0x7e8
 800f328:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f32c:	4613      	mov	r3, r2
 800f32e:	011b      	lsls	r3, r3, #4
 800f330:	4413      	add	r3, r2
 800f332:	009b      	lsls	r3, r3, #2
 800f334:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f338:	443b      	add	r3, r7
 800f33a:	3b60      	subs	r3, #96	; 0x60
 800f33c:	681c      	ldr	r4, [r3, #0]
 800f33e:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f342:	4613      	mov	r3, r2
 800f344:	011b      	lsls	r3, r3, #4
 800f346:	4413      	add	r3, r2
 800f348:	009b      	lsls	r3, r3, #2
 800f34a:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f34e:	443b      	add	r3, r7
 800f350:	3b70      	subs	r3, #112	; 0x70
 800f352:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f356:	4619      	mov	r1, r3
 800f358:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f35c:	4613      	mov	r3, r2
 800f35e:	011b      	lsls	r3, r3, #4
 800f360:	4413      	add	r3, r2
 800f362:	009b      	lsls	r3, r3, #2
 800f364:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f368:	443b      	add	r3, r7
 800f36a:	3b6e      	subs	r3, #110	; 0x6e
 800f36c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f370:	041b      	lsls	r3, r3, #16
 800f372:	ea41 0503 	orr.w	r5, r1, r3
 800f376:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f37a:	f507 61fa 	add.w	r1, r7, #2000	; 0x7d0
 800f37e:	4613      	mov	r3, r2
 800f380:	011b      	lsls	r3, r3, #4
 800f382:	4413      	add	r3, r2
 800f384:	009b      	lsls	r3, r3, #2
 800f386:	3328      	adds	r3, #40	; 0x28
 800f388:	440b      	add	r3, r1
 800f38a:	462a      	mov	r2, r5
 800f38c:	4621      	mov	r1, r4
 800f38e:	f000 fc7c 	bl	800fc8a <core_init_matrix>
		}
		if (results[i].execs & ID_STATE) {
 800f392:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f396:	4613      	mov	r3, r2
 800f398:	011b      	lsls	r3, r3, #4
 800f39a:	4413      	add	r3, r2
 800f39c:	009b      	lsls	r3, r3, #2
 800f39e:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f3a2:	443b      	add	r3, r7
 800f3a4:	3b50      	subs	r3, #80	; 0x50
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	f003 0304 	and.w	r3, r3, #4
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d01b      	beq.n	800f3e8 <coremark_main+0x448>
			core_init_state(results[0].size,results[i].seed1,results[i].memblock[3]);
 800f3b0:	f8d7 07e8 	ldr.w	r0, [r7, #2024]	; 0x7e8
 800f3b4:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f3b8:	4613      	mov	r3, r2
 800f3ba:	011b      	lsls	r3, r3, #4
 800f3bc:	4413      	add	r3, r2
 800f3be:	009b      	lsls	r3, r3, #2
 800f3c0:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f3c4:	443b      	add	r3, r7
 800f3c6:	3b70      	subs	r3, #112	; 0x70
 800f3c8:	f9b3 1000 	ldrsh.w	r1, [r3]
 800f3cc:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f3d0:	4613      	mov	r3, r2
 800f3d2:	011b      	lsls	r3, r3, #4
 800f3d4:	4413      	add	r3, r2
 800f3d6:	009b      	lsls	r3, r3, #2
 800f3d8:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f3dc:	443b      	add	r3, r7
 800f3de:	3b5c      	subs	r3, #92	; 0x5c
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	461a      	mov	r2, r3
 800f3e4:	f001 f806 	bl	80103f4 <core_init_state>
	for (i=0 ; i<MULTITHREAD; i++) {
 800f3e8:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800f3ec:	3301      	adds	r3, #1
 800f3ee:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800f3f2:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	f43f af4e 	beq.w	800f298 <coremark_main+0x2f8>
		}
	}
	
	/* automatically determine number of iterations if not set */
	if (results[0].iterations==0) { 
 800f3fc:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 800f400:	2b00      	cmp	r3, #0
 800f402:	d14e      	bne.n	800f4a2 <coremark_main+0x502>
		secs_ret secs_passed=0;
 800f404:	f04f 0200 	mov.w	r2, #0
 800f408:	f04f 0300 	mov.w	r3, #0
 800f40c:	f607 0128 	addw	r1, r7, #2088	; 0x828
 800f410:	e9c1 2300 	strd	r2, r3, [r1]
		ee_u32 divisor;
		results[0].iterations=1;
 800f414:	2301      	movs	r3, #1
 800f416:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
		while (secs_passed < (secs_ret)1) {
 800f41a:	e01a      	b.n	800f452 <coremark_main+0x4b2>
			results[0].iterations*=10;
 800f41c:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 800f420:	4613      	mov	r3, r2
 800f422:	009b      	lsls	r3, r3, #2
 800f424:	4413      	add	r3, r2
 800f426:	005b      	lsls	r3, r3, #1
 800f428:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
			start_time();
 800f42c:	f000 feac 	bl	8010188 <start_time>
			iterate(&results[0]);
 800f430:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800f434:	4618      	mov	r0, r3
 800f436:	f7ff fd65 	bl	800ef04 <iterate>
			stop_time();
 800f43a:	f000 feb5 	bl	80101a8 <stop_time>
			secs_passed=time_in_secs(get_time());
 800f43e:	f000 fec3 	bl	80101c8 <get_time>
 800f442:	4603      	mov	r3, r0
 800f444:	4618      	mov	r0, r3
 800f446:	f000 fed3 	bl	80101f0 <time_in_secs>
 800f44a:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800f44e:	ed83 0b00 	vstr	d0, [r3]
		while (secs_passed < (secs_ret)1) {
 800f452:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800f456:	ed93 7b00 	vldr	d7, [r3]
 800f45a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f45e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f466:	d4d9      	bmi.n	800f41c <coremark_main+0x47c>
		}
		/* now we know it executes for at least 1 sec, set actual run time at about 10 secs */
		divisor=(ee_u32)secs_passed;
 800f468:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800f46c:	ed93 7b00 	vldr	d7, [r3]
 800f470:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800f474:	ee17 3a90 	vmov	r3, s15
 800f478:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
		if (divisor==0) /* some machines cast float to int as 0 since this conversion is not defined by ANSI, but we know at least one second passed */
 800f47c:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 800f480:	2b00      	cmp	r3, #0
 800f482:	d102      	bne.n	800f48a <coremark_main+0x4ea>
			divisor=1;
 800f484:	2301      	movs	r3, #1
 800f486:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
		results[0].iterations*=1+10/divisor;
 800f48a:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 800f48e:	210a      	movs	r1, #10
 800f490:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 800f494:	fbb1 f2f2 	udiv	r2, r1, r2
 800f498:	3201      	adds	r2, #1
 800f49a:	fb02 f303 	mul.w	r3, r2, r3
 800f49e:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
	}
	/* perform actual benchmark */
	start_time();
 800f4a2:	f000 fe71 	bl	8010188 <start_time>
	}
	for (i=0 ; i<default_num_contexts; i++) {
		core_stop_parallel(&results[i]);
	}
#else
	iterate(&results[0]);
 800f4a6:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f7ff fd2a 	bl	800ef04 <iterate>
#endif
	stop_time();
 800f4b0:	f000 fe7a 	bl	80101a8 <stop_time>
	total_time=get_time();
 800f4b4:	f000 fe88 	bl	80101c8 <get_time>
 800f4b8:	f8c7 081c 	str.w	r0, [r7, #2076]	; 0x81c
	/* get a function of the input to report */
	seedcrc=crc16(results[0].seed1,seedcrc);
 800f4bc:	f9b7 37d0 	ldrsh.w	r3, [r7, #2000]	; 0x7d0
 800f4c0:	f8b7 2822 	ldrh.w	r2, [r7, #2082]	; 0x822
 800f4c4:	4611      	mov	r1, r2
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f001 fa2d 	bl	8010926 <crc16>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	f8a7 3822 	strh.w	r3, [r7, #2082]	; 0x822
	seedcrc=crc16(results[0].seed2,seedcrc);
 800f4d2:	f9b7 37d2 	ldrsh.w	r3, [r7, #2002]	; 0x7d2
 800f4d6:	f8b7 2822 	ldrh.w	r2, [r7, #2082]	; 0x822
 800f4da:	4611      	mov	r1, r2
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f001 fa22 	bl	8010926 <crc16>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	f8a7 3822 	strh.w	r3, [r7, #2082]	; 0x822
	seedcrc=crc16(results[0].seed3,seedcrc);
 800f4e8:	f9b7 37d4 	ldrsh.w	r3, [r7, #2004]	; 0x7d4
 800f4ec:	f8b7 2822 	ldrh.w	r2, [r7, #2082]	; 0x822
 800f4f0:	4611      	mov	r1, r2
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f001 fa17 	bl	8010926 <crc16>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	f8a7 3822 	strh.w	r3, [r7, #2082]	; 0x822
	seedcrc=crc16(results[0].size,seedcrc);
 800f4fe:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 800f502:	b21b      	sxth	r3, r3
 800f504:	f8b7 2822 	ldrh.w	r2, [r7, #2082]	; 0x822
 800f508:	4611      	mov	r1, r2
 800f50a:	4618      	mov	r0, r3
 800f50c:	f001 fa0b 	bl	8010926 <crc16>
 800f510:	4603      	mov	r3, r0
 800f512:	f8a7 3822 	strh.w	r3, [r7, #2082]	; 0x822
	
	switch (seedcrc) { /* test known output for common seeds */
 800f516:	f8b7 3822 	ldrh.w	r3, [r7, #2082]	; 0x822
 800f51a:	f64e 12f5 	movw	r2, #59893	; 0xe9f5
 800f51e:	4293      	cmp	r3, r2
 800f520:	d031      	beq.n	800f586 <coremark_main+0x5e6>
 800f522:	f64e 12f5 	movw	r2, #59893	; 0xe9f5
 800f526:	4293      	cmp	r3, r2
 800f528:	dc3b      	bgt.n	800f5a2 <coremark_main+0x602>
 800f52a:	f648 2202 	movw	r2, #35330	; 0x8a02
 800f52e:	4293      	cmp	r3, r2
 800f530:	d014      	beq.n	800f55c <coremark_main+0x5bc>
 800f532:	f648 2202 	movw	r2, #35330	; 0x8a02
 800f536:	4293      	cmp	r3, r2
 800f538:	dc33      	bgt.n	800f5a2 <coremark_main+0x602>
 800f53a:	f647 3205 	movw	r2, #31493	; 0x7b05
 800f53e:	4293      	cmp	r3, r2
 800f540:	d013      	beq.n	800f56a <coremark_main+0x5ca>
 800f542:	f647 3205 	movw	r2, #31493	; 0x7b05
 800f546:	4293      	cmp	r3, r2
 800f548:	dc2b      	bgt.n	800f5a2 <coremark_main+0x602>
 800f54a:	f641 02f2 	movw	r2, #6386	; 0x18f2
 800f54e:	4293      	cmp	r3, r2
 800f550:	d020      	beq.n	800f594 <coremark_main+0x5f4>
 800f552:	f644 62af 	movw	r2, #20143	; 0x4eaf
 800f556:	4293      	cmp	r3, r2
 800f558:	d00e      	beq.n	800f578 <coremark_main+0x5d8>
 800f55a:	e022      	b.n	800f5a2 <coremark_main+0x602>
		case 0x8a02: /* seed1=0, seed2=0, seed3=0x66, size 2000 per algorithm */
			known_id=0;
 800f55c:	2300      	movs	r3, #0
 800f55e:	f8a7 3838 	strh.w	r3, [r7, #2104]	; 0x838
			ee_printf("6k performance run parameters for coremark.\n");
 800f562:	4817      	ldr	r0, [pc, #92]	; (800f5c0 <coremark_main+0x620>)
 800f564:	f003 fdca 	bl	80130fc <puts>
			break;
 800f568:	e020      	b.n	800f5ac <coremark_main+0x60c>
		case 0x7b05: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 2000 per algorithm */
			known_id=1;
 800f56a:	2301      	movs	r3, #1
 800f56c:	f8a7 3838 	strh.w	r3, [r7, #2104]	; 0x838
			ee_printf("6k validation run parameters for coremark.\n");
 800f570:	4814      	ldr	r0, [pc, #80]	; (800f5c4 <coremark_main+0x624>)
 800f572:	f003 fdc3 	bl	80130fc <puts>
			break;
 800f576:	e019      	b.n	800f5ac <coremark_main+0x60c>
		case 0x4eaf: /* seed1=0x8, seed2=0x8, seed3=0x8, size 400 per algorithm */
			known_id=2;
 800f578:	2302      	movs	r3, #2
 800f57a:	f8a7 3838 	strh.w	r3, [r7, #2104]	; 0x838
			ee_printf("Profile generation run parameters for coremark.\n");
 800f57e:	4812      	ldr	r0, [pc, #72]	; (800f5c8 <coremark_main+0x628>)
 800f580:	f003 fdbc 	bl	80130fc <puts>
			break;
 800f584:	e012      	b.n	800f5ac <coremark_main+0x60c>
		case 0xe9f5: /* seed1=0, seed2=0, seed3=0x66, size 666 per algorithm */
			known_id=3;
 800f586:	2303      	movs	r3, #3
 800f588:	f8a7 3838 	strh.w	r3, [r7, #2104]	; 0x838
			ee_printf("2K performance run parameters for coremark.\n");
 800f58c:	480f      	ldr	r0, [pc, #60]	; (800f5cc <coremark_main+0x62c>)
 800f58e:	f003 fdb5 	bl	80130fc <puts>
			break;
 800f592:	e00b      	b.n	800f5ac <coremark_main+0x60c>
		case 0x18f2: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 666 per algorithm */
			known_id=4;
 800f594:	2304      	movs	r3, #4
 800f596:	f8a7 3838 	strh.w	r3, [r7, #2104]	; 0x838
			ee_printf("2K validation run parameters for coremark.\n");
 800f59a:	480d      	ldr	r0, [pc, #52]	; (800f5d0 <coremark_main+0x630>)
 800f59c:	f003 fdae 	bl	80130fc <puts>
			break;
 800f5a0:	e004      	b.n	800f5ac <coremark_main+0x60c>
		default:
			total_errors=-1;
 800f5a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f5a6:	f8a7 3836 	strh.w	r3, [r7, #2102]	; 0x836
			break;
 800f5aa:	bf00      	nop
	}
	if (known_id>=0) {
 800f5ac:	f9b7 3838 	ldrsh.w	r3, [r7, #2104]	; 0x838
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	f2c0 8130 	blt.w	800f816 <coremark_main+0x876>
		for (i=0 ; i<default_num_contexts; i++) {
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800f5bc:	e124      	b.n	800f808 <coremark_main+0x868>
 800f5be:	bf00      	nop
 800f5c0:	08015364 	.word	0x08015364
 800f5c4:	08015390 	.word	0x08015390
 800f5c8:	080153bc 	.word	0x080153bc
 800f5cc:	080153ec 	.word	0x080153ec
 800f5d0:	08015418 	.word	0x08015418
			results[i].err=0;
 800f5d4:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f5d8:	4613      	mov	r3, r2
 800f5da:	011b      	lsls	r3, r3, #4
 800f5dc:	4413      	add	r3, r2
 800f5de:	009b      	lsls	r3, r3, #2
 800f5e0:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f5e4:	443b      	add	r3, r7
 800f5e6:	3b30      	subs	r3, #48	; 0x30
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	801a      	strh	r2, [r3, #0]
			if ((results[i].execs & ID_LIST) && 
 800f5ec:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f5f0:	4613      	mov	r3, r2
 800f5f2:	011b      	lsls	r3, r3, #4
 800f5f4:	4413      	add	r3, r2
 800f5f6:	009b      	lsls	r3, r3, #2
 800f5f8:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f5fc:	443b      	add	r3, r7
 800f5fe:	3b50      	subs	r3, #80	; 0x50
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	f003 0301 	and.w	r3, r3, #1
 800f606:	2b00      	cmp	r3, #0
 800f608:	d042      	beq.n	800f690 <coremark_main+0x6f0>
				(results[i].crclist!=list_known_crc[known_id])) {
 800f60a:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f60e:	4613      	mov	r3, r2
 800f610:	011b      	lsls	r3, r3, #4
 800f612:	4413      	add	r3, r2
 800f614:	009b      	lsls	r3, r3, #2
 800f616:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f61a:	443b      	add	r3, r7
 800f61c:	3b36      	subs	r3, #54	; 0x36
 800f61e:	881a      	ldrh	r2, [r3, #0]
 800f620:	f9b7 3838 	ldrsh.w	r3, [r7, #2104]	; 0x838
 800f624:	49ce      	ldr	r1, [pc, #824]	; (800f960 <coremark_main+0x9c0>)
 800f626:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
			if ((results[i].execs & ID_LIST) && 
 800f62a:	429a      	cmp	r2, r3
 800f62c:	d030      	beq.n	800f690 <coremark_main+0x6f0>
				ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",i,results[i].crclist,list_known_crc[known_id]);
 800f62e:	f8b7 183e 	ldrh.w	r1, [r7, #2110]	; 0x83e
 800f632:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f636:	4613      	mov	r3, r2
 800f638:	011b      	lsls	r3, r3, #4
 800f63a:	4413      	add	r3, r2
 800f63c:	009b      	lsls	r3, r3, #2
 800f63e:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f642:	443b      	add	r3, r7
 800f644:	3b36      	subs	r3, #54	; 0x36
 800f646:	881b      	ldrh	r3, [r3, #0]
 800f648:	4618      	mov	r0, r3
 800f64a:	f9b7 3838 	ldrsh.w	r3, [r7, #2104]	; 0x838
 800f64e:	4ac4      	ldr	r2, [pc, #784]	; (800f960 <coremark_main+0x9c0>)
 800f650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f654:	4602      	mov	r2, r0
 800f656:	48c3      	ldr	r0, [pc, #780]	; (800f964 <coremark_main+0x9c4>)
 800f658:	f003 fce2 	bl	8013020 <iprintf>
				results[i].err++;
 800f65c:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f660:	4613      	mov	r3, r2
 800f662:	011b      	lsls	r3, r3, #4
 800f664:	4413      	add	r3, r2
 800f666:	009b      	lsls	r3, r3, #2
 800f668:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f66c:	443b      	add	r3, r7
 800f66e:	3b30      	subs	r3, #48	; 0x30
 800f670:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f674:	b29b      	uxth	r3, r3
 800f676:	3301      	adds	r3, #1
 800f678:	b29b      	uxth	r3, r3
 800f67a:	b219      	sxth	r1, r3
 800f67c:	4613      	mov	r3, r2
 800f67e:	011b      	lsls	r3, r3, #4
 800f680:	4413      	add	r3, r2
 800f682:	009b      	lsls	r3, r3, #2
 800f684:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f688:	443b      	add	r3, r7
 800f68a:	3b30      	subs	r3, #48	; 0x30
 800f68c:	460a      	mov	r2, r1
 800f68e:	801a      	strh	r2, [r3, #0]
			}
			if ((results[i].execs & ID_MATRIX) &&
 800f690:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f694:	4613      	mov	r3, r2
 800f696:	011b      	lsls	r3, r3, #4
 800f698:	4413      	add	r3, r2
 800f69a:	009b      	lsls	r3, r3, #2
 800f69c:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f6a0:	443b      	add	r3, r7
 800f6a2:	3b50      	subs	r3, #80	; 0x50
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f003 0302 	and.w	r3, r3, #2
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d042      	beq.n	800f734 <coremark_main+0x794>
				(results[i].crcmatrix!=matrix_known_crc[known_id])) {
 800f6ae:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f6b2:	4613      	mov	r3, r2
 800f6b4:	011b      	lsls	r3, r3, #4
 800f6b6:	4413      	add	r3, r2
 800f6b8:	009b      	lsls	r3, r3, #2
 800f6ba:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f6be:	443b      	add	r3, r7
 800f6c0:	3b34      	subs	r3, #52	; 0x34
 800f6c2:	881a      	ldrh	r2, [r3, #0]
 800f6c4:	f9b7 3838 	ldrsh.w	r3, [r7, #2104]	; 0x838
 800f6c8:	49a7      	ldr	r1, [pc, #668]	; (800f968 <coremark_main+0x9c8>)
 800f6ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
			if ((results[i].execs & ID_MATRIX) &&
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d030      	beq.n	800f734 <coremark_main+0x794>
				ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",i,results[i].crcmatrix,matrix_known_crc[known_id]);
 800f6d2:	f8b7 183e 	ldrh.w	r1, [r7, #2110]	; 0x83e
 800f6d6:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f6da:	4613      	mov	r3, r2
 800f6dc:	011b      	lsls	r3, r3, #4
 800f6de:	4413      	add	r3, r2
 800f6e0:	009b      	lsls	r3, r3, #2
 800f6e2:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f6e6:	443b      	add	r3, r7
 800f6e8:	3b34      	subs	r3, #52	; 0x34
 800f6ea:	881b      	ldrh	r3, [r3, #0]
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f9b7 3838 	ldrsh.w	r3, [r7, #2104]	; 0x838
 800f6f2:	4a9d      	ldr	r2, [pc, #628]	; (800f968 <coremark_main+0x9c8>)
 800f6f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6f8:	4602      	mov	r2, r0
 800f6fa:	489c      	ldr	r0, [pc, #624]	; (800f96c <coremark_main+0x9cc>)
 800f6fc:	f003 fc90 	bl	8013020 <iprintf>
				results[i].err++;
 800f700:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f704:	4613      	mov	r3, r2
 800f706:	011b      	lsls	r3, r3, #4
 800f708:	4413      	add	r3, r2
 800f70a:	009b      	lsls	r3, r3, #2
 800f70c:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f710:	443b      	add	r3, r7
 800f712:	3b30      	subs	r3, #48	; 0x30
 800f714:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f718:	b29b      	uxth	r3, r3
 800f71a:	3301      	adds	r3, #1
 800f71c:	b29b      	uxth	r3, r3
 800f71e:	b219      	sxth	r1, r3
 800f720:	4613      	mov	r3, r2
 800f722:	011b      	lsls	r3, r3, #4
 800f724:	4413      	add	r3, r2
 800f726:	009b      	lsls	r3, r3, #2
 800f728:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f72c:	443b      	add	r3, r7
 800f72e:	3b30      	subs	r3, #48	; 0x30
 800f730:	460a      	mov	r2, r1
 800f732:	801a      	strh	r2, [r3, #0]
			}
			if ((results[i].execs & ID_STATE) &&
 800f734:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f738:	4613      	mov	r3, r2
 800f73a:	011b      	lsls	r3, r3, #4
 800f73c:	4413      	add	r3, r2
 800f73e:	009b      	lsls	r3, r3, #2
 800f740:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f744:	443b      	add	r3, r7
 800f746:	3b50      	subs	r3, #80	; 0x50
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	f003 0304 	and.w	r3, r3, #4
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d042      	beq.n	800f7d8 <coremark_main+0x838>
				(results[i].crcstate!=state_known_crc[known_id])) {
 800f752:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f756:	4613      	mov	r3, r2
 800f758:	011b      	lsls	r3, r3, #4
 800f75a:	4413      	add	r3, r2
 800f75c:	009b      	lsls	r3, r3, #2
 800f75e:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f762:	443b      	add	r3, r7
 800f764:	3b32      	subs	r3, #50	; 0x32
 800f766:	881a      	ldrh	r2, [r3, #0]
 800f768:	f9b7 3838 	ldrsh.w	r3, [r7, #2104]	; 0x838
 800f76c:	4980      	ldr	r1, [pc, #512]	; (800f970 <coremark_main+0x9d0>)
 800f76e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
			if ((results[i].execs & ID_STATE) &&
 800f772:	429a      	cmp	r2, r3
 800f774:	d030      	beq.n	800f7d8 <coremark_main+0x838>
				ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",i,results[i].crcstate,state_known_crc[known_id]);
 800f776:	f8b7 183e 	ldrh.w	r1, [r7, #2110]	; 0x83e
 800f77a:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f77e:	4613      	mov	r3, r2
 800f780:	011b      	lsls	r3, r3, #4
 800f782:	4413      	add	r3, r2
 800f784:	009b      	lsls	r3, r3, #2
 800f786:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f78a:	443b      	add	r3, r7
 800f78c:	3b32      	subs	r3, #50	; 0x32
 800f78e:	881b      	ldrh	r3, [r3, #0]
 800f790:	4618      	mov	r0, r3
 800f792:	f9b7 3838 	ldrsh.w	r3, [r7, #2104]	; 0x838
 800f796:	4a76      	ldr	r2, [pc, #472]	; (800f970 <coremark_main+0x9d0>)
 800f798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f79c:	4602      	mov	r2, r0
 800f79e:	4875      	ldr	r0, [pc, #468]	; (800f974 <coremark_main+0x9d4>)
 800f7a0:	f003 fc3e 	bl	8013020 <iprintf>
				results[i].err++;
 800f7a4:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f7a8:	4613      	mov	r3, r2
 800f7aa:	011b      	lsls	r3, r3, #4
 800f7ac:	4413      	add	r3, r2
 800f7ae:	009b      	lsls	r3, r3, #2
 800f7b0:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f7b4:	443b      	add	r3, r7
 800f7b6:	3b30      	subs	r3, #48	; 0x30
 800f7b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7bc:	b29b      	uxth	r3, r3
 800f7be:	3301      	adds	r3, #1
 800f7c0:	b29b      	uxth	r3, r3
 800f7c2:	b219      	sxth	r1, r3
 800f7c4:	4613      	mov	r3, r2
 800f7c6:	011b      	lsls	r3, r3, #4
 800f7c8:	4413      	add	r3, r2
 800f7ca:	009b      	lsls	r3, r3, #2
 800f7cc:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f7d0:	443b      	add	r3, r7
 800f7d2:	3b30      	subs	r3, #48	; 0x30
 800f7d4:	460a      	mov	r2, r1
 800f7d6:	801a      	strh	r2, [r3, #0]
			}
			total_errors+=results[i].err;
 800f7d8:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f7dc:	4613      	mov	r3, r2
 800f7de:	011b      	lsls	r3, r3, #4
 800f7e0:	4413      	add	r3, r2
 800f7e2:	009b      	lsls	r3, r3, #2
 800f7e4:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f7e8:	443b      	add	r3, r7
 800f7ea:	3b30      	subs	r3, #48	; 0x30
 800f7ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7f0:	b29a      	uxth	r2, r3
 800f7f2:	f8b7 3836 	ldrh.w	r3, [r7, #2102]	; 0x836
 800f7f6:	4413      	add	r3, r2
 800f7f8:	b29b      	uxth	r3, r3
 800f7fa:	f8a7 3836 	strh.w	r3, [r7, #2102]	; 0x836
		for (i=0 ; i<default_num_contexts; i++) {
 800f7fe:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800f802:	3301      	adds	r3, #1
 800f804:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800f808:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f80c:	4b5a      	ldr	r3, [pc, #360]	; (800f978 <coremark_main+0x9d8>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	429a      	cmp	r2, r3
 800f812:	f4ff aedf 	bcc.w	800f5d4 <coremark_main+0x634>
		}
	}
	total_errors+=check_data_types();
 800f816:	f001 f899 	bl	801094c <check_data_types>
 800f81a:	4603      	mov	r3, r0
 800f81c:	b29a      	uxth	r2, r3
 800f81e:	f8b7 3836 	ldrh.w	r3, [r7, #2102]	; 0x836
 800f822:	4413      	add	r3, r2
 800f824:	b29b      	uxth	r3, r3
 800f826:	f8a7 3836 	strh.w	r3, [r7, #2102]	; 0x836
	/* and report results */
	ee_printf("CoreMark Size    : %u\n",(ee_u32)results[0].size);
 800f82a:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 800f82e:	4619      	mov	r1, r3
 800f830:	4852      	ldr	r0, [pc, #328]	; (800f97c <coremark_main+0x9dc>)
 800f832:	f003 fbf5 	bl	8013020 <iprintf>
	ee_printf("Total ticks      : %u\n",(ee_u32)total_time);
 800f836:	f8d7 181c 	ldr.w	r1, [r7, #2076]	; 0x81c
 800f83a:	4851      	ldr	r0, [pc, #324]	; (800f980 <coremark_main+0x9e0>)
 800f83c:	f003 fbf0 	bl	8013020 <iprintf>
#if HAS_FLOAT
	ee_printf("Total time (secs): %f\n",time_in_secs(total_time));
 800f840:	f8d7 081c 	ldr.w	r0, [r7, #2076]	; 0x81c
 800f844:	f000 fcd4 	bl	80101f0 <time_in_secs>
 800f848:	ec53 2b10 	vmov	r2, r3, d0
 800f84c:	484d      	ldr	r0, [pc, #308]	; (800f984 <coremark_main+0x9e4>)
 800f84e:	f003 fbe7 	bl	8013020 <iprintf>
	if (time_in_secs(total_time) > 0)
 800f852:	f8d7 081c 	ldr.w	r0, [r7, #2076]	; 0x81c
 800f856:	f000 fccb 	bl	80101f0 <time_in_secs>
 800f85a:	eeb0 7b40 	vmov.f64	d7, d0
 800f85e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f866:	dd16      	ble.n	800f896 <coremark_main+0x8f6>
		ee_printf("Iterations/Sec   : %f\n",default_num_contexts*results[0].iterations/time_in_secs(total_time));
 800f868:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 800f86c:	4a42      	ldr	r2, [pc, #264]	; (800f978 <coremark_main+0x9d8>)
 800f86e:	6812      	ldr	r2, [r2, #0]
 800f870:	fb02 f303 	mul.w	r3, r2, r3
 800f874:	ee07 3a90 	vmov	s15, r3
 800f878:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800f87c:	f8d7 081c 	ldr.w	r0, [r7, #2076]	; 0x81c
 800f880:	f000 fcb6 	bl	80101f0 <time_in_secs>
 800f884:	eeb0 7b40 	vmov.f64	d7, d0
 800f888:	ee88 6b07 	vdiv.f64	d6, d8, d7
 800f88c:	ec53 2b16 	vmov	r2, r3, d6
 800f890:	483d      	ldr	r0, [pc, #244]	; (800f988 <coremark_main+0x9e8>)
 800f892:	f003 fbc5 	bl	8013020 <iprintf>
#else 
	ee_printf("Total time (secs): %d\n",time_in_secs(total_time));
	if (time_in_secs(total_time) > 0)
		ee_printf("Iterations/Sec   : %d\n",default_num_contexts*results[0].iterations/time_in_secs(total_time));
#endif
	if (time_in_secs(total_time) < 10) {
 800f896:	f8d7 081c 	ldr.w	r0, [r7, #2076]	; 0x81c
 800f89a:	f000 fca9 	bl	80101f0 <time_in_secs>
 800f89e:	eeb0 7b40 	vmov.f64	d7, d0
 800f8a2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800f8a6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ae:	d509      	bpl.n	800f8c4 <coremark_main+0x924>
		ee_printf("ERROR! Must execute for at least 10 secs for a valid result!\n");
 800f8b0:	4836      	ldr	r0, [pc, #216]	; (800f98c <coremark_main+0x9ec>)
 800f8b2:	f003 fc23 	bl	80130fc <puts>
		total_errors++;
 800f8b6:	f9b7 3836 	ldrsh.w	r3, [r7, #2102]	; 0x836
 800f8ba:	b29b      	uxth	r3, r3
 800f8bc:	3301      	adds	r3, #1
 800f8be:	b29b      	uxth	r3, r3
 800f8c0:	f8a7 3836 	strh.w	r3, [r7, #2102]	; 0x836
	}

	ee_printf("Iterations       : %u\n",(ee_u32)default_num_contexts*results[0].iterations);
 800f8c4:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 800f8c8:	4a2b      	ldr	r2, [pc, #172]	; (800f978 <coremark_main+0x9d8>)
 800f8ca:	6812      	ldr	r2, [r2, #0]
 800f8cc:	fb02 f303 	mul.w	r3, r2, r3
 800f8d0:	4619      	mov	r1, r3
 800f8d2:	482f      	ldr	r0, [pc, #188]	; (800f990 <coremark_main+0x9f0>)
 800f8d4:	f003 fba4 	bl	8013020 <iprintf>
#if defined(__GNUC__) && defined (__ARMCC_VERSION)
	ee_printf("Compiler version : Keil ver%d\n",__ARMCC_VERSION);
#elif defined(__CC_ARM)
	ee_printf("Compiler version : Keil ver%d\n",__ARMCC_VERSION);
#elif defined(__GNUC__)
	ee_printf("Compiler version : GCC ver%d.%d.%d\n",__GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__);
 800f8d8:	2301      	movs	r3, #1
 800f8da:	2203      	movs	r2, #3
 800f8dc:	210b      	movs	r1, #11
 800f8de:	482d      	ldr	r0, [pc, #180]	; (800f994 <coremark_main+0x9f4>)
 800f8e0:	f003 fb9e 	bl	8013020 <iprintf>
#elif defined(__ICCARM__)
	//ee_printf("Compiler version : IAR %d\n",__VER__);
	ee_printf("Compiler version : IAR ver%d\n",__IAR_SYSTEMS_ICC__);
#endif
	ee_printf("Compiler flags   : %s\n",COMPILER_FLAGS);
 800f8e4:	492c      	ldr	r1, [pc, #176]	; (800f998 <coremark_main+0x9f8>)
 800f8e6:	482d      	ldr	r0, [pc, #180]	; (800f99c <coremark_main+0x9fc>)
 800f8e8:	f003 fb9a 	bl	8013020 <iprintf>
#if (MULTITHREAD>1)
	ee_printf("Parallel %s : %d\n",PARALLEL_METHOD,default_num_contexts);
#endif
	ee_printf("Memory location  : %s\n",MEM_LOCATION);
 800f8ec:	492c      	ldr	r1, [pc, #176]	; (800f9a0 <coremark_main+0xa00>)
 800f8ee:	482d      	ldr	r0, [pc, #180]	; (800f9a4 <coremark_main+0xa04>)
 800f8f0:	f003 fb96 	bl	8013020 <iprintf>
	/* output for verification */
	ee_printf("seedcrc          : 0x%04x\n",seedcrc);
 800f8f4:	f8b7 3822 	ldrh.w	r3, [r7, #2082]	; 0x822
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	482b      	ldr	r0, [pc, #172]	; (800f9a8 <coremark_main+0xa08>)
 800f8fc:	f003 fb90 	bl	8013020 <iprintf>
	if (results[0].execs & ID_LIST)
 800f900:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 800f904:	f003 0301 	and.w	r3, r3, #1
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d01f      	beq.n	800f94c <coremark_main+0x9ac>
		for (i=0 ; i<default_num_contexts; i++) 
 800f90c:	2300      	movs	r3, #0
 800f90e:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800f912:	e015      	b.n	800f940 <coremark_main+0x9a0>
			ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
 800f914:	f8b7 183e 	ldrh.w	r1, [r7, #2110]	; 0x83e
 800f918:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f91c:	4613      	mov	r3, r2
 800f91e:	011b      	lsls	r3, r3, #4
 800f920:	4413      	add	r3, r2
 800f922:	009b      	lsls	r3, r3, #2
 800f924:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f928:	443b      	add	r3, r7
 800f92a:	3b36      	subs	r3, #54	; 0x36
 800f92c:	881b      	ldrh	r3, [r3, #0]
 800f92e:	461a      	mov	r2, r3
 800f930:	481e      	ldr	r0, [pc, #120]	; (800f9ac <coremark_main+0xa0c>)
 800f932:	f003 fb75 	bl	8013020 <iprintf>
		for (i=0 ; i<default_num_contexts; i++) 
 800f936:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800f93a:	3301      	adds	r3, #1
 800f93c:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800f940:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f944:	4b0c      	ldr	r3, [pc, #48]	; (800f978 <coremark_main+0x9d8>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	429a      	cmp	r2, r3
 800f94a:	d3e3      	bcc.n	800f914 <coremark_main+0x974>
	if (results[0].execs & ID_MATRIX) 
 800f94c:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 800f950:	f003 0302 	and.w	r3, r3, #2
 800f954:	2b00      	cmp	r3, #0
 800f956:	d047      	beq.n	800f9e8 <coremark_main+0xa48>
		for (i=0 ; i<default_num_contexts; i++) 
 800f958:	2300      	movs	r3, #0
 800f95a:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800f95e:	e03d      	b.n	800f9dc <coremark_main+0xa3c>
 800f960:	2400007c 	.word	0x2400007c
 800f964:	08015444 	.word	0x08015444
 800f968:	24000088 	.word	0x24000088
 800f96c:	08015474 	.word	0x08015474
 800f970:	24000094 	.word	0x24000094
 800f974:	080154a8 	.word	0x080154a8
 800f978:	240000a8 	.word	0x240000a8
 800f97c:	080154d8 	.word	0x080154d8
 800f980:	080154f0 	.word	0x080154f0
 800f984:	08015508 	.word	0x08015508
 800f988:	08015520 	.word	0x08015520
 800f98c:	08015538 	.word	0x08015538
 800f990:	08015578 	.word	0x08015578
 800f994:	08015590 	.word	0x08015590
 800f998:	080155b4 	.word	0x080155b4
 800f99c:	080155b8 	.word	0x080155b8
 800f9a0:	080155d0 	.word	0x080155d0
 800f9a4:	080155d8 	.word	0x080155d8
 800f9a8:	080155f0 	.word	0x080155f0
 800f9ac:	0801560c 	.word	0x0801560c
			ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
 800f9b0:	f8b7 183e 	ldrh.w	r1, [r7, #2110]	; 0x83e
 800f9b4:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f9b8:	4613      	mov	r3, r2
 800f9ba:	011b      	lsls	r3, r3, #4
 800f9bc:	4413      	add	r3, r2
 800f9be:	009b      	lsls	r3, r3, #2
 800f9c0:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800f9c4:	443b      	add	r3, r7
 800f9c6:	3b34      	subs	r3, #52	; 0x34
 800f9c8:	881b      	ldrh	r3, [r3, #0]
 800f9ca:	461a      	mov	r2, r3
 800f9cc:	484f      	ldr	r0, [pc, #316]	; (800fb0c <coremark_main+0xb6c>)
 800f9ce:	f003 fb27 	bl	8013020 <iprintf>
		for (i=0 ; i<default_num_contexts; i++) 
 800f9d2:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800f9dc:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800f9e0:	4b4b      	ldr	r3, [pc, #300]	; (800fb10 <coremark_main+0xb70>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d3e3      	bcc.n	800f9b0 <coremark_main+0xa10>
	if (results[0].execs & ID_STATE)
 800f9e8:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 800f9ec:	f003 0304 	and.w	r3, r3, #4
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d01f      	beq.n	800fa34 <coremark_main+0xa94>
		for (i=0 ; i<default_num_contexts; i++) 
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800f9fa:	e015      	b.n	800fa28 <coremark_main+0xa88>
			ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
 800f9fc:	f8b7 183e 	ldrh.w	r1, [r7, #2110]	; 0x83e
 800fa00:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800fa04:	4613      	mov	r3, r2
 800fa06:	011b      	lsls	r3, r3, #4
 800fa08:	4413      	add	r3, r2
 800fa0a:	009b      	lsls	r3, r3, #2
 800fa0c:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800fa10:	443b      	add	r3, r7
 800fa12:	3b32      	subs	r3, #50	; 0x32
 800fa14:	881b      	ldrh	r3, [r3, #0]
 800fa16:	461a      	mov	r2, r3
 800fa18:	483e      	ldr	r0, [pc, #248]	; (800fb14 <coremark_main+0xb74>)
 800fa1a:	f003 fb01 	bl	8013020 <iprintf>
		for (i=0 ; i<default_num_contexts; i++) 
 800fa1e:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800fa22:	3301      	adds	r3, #1
 800fa24:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800fa28:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800fa2c:	4b38      	ldr	r3, [pc, #224]	; (800fb10 <coremark_main+0xb70>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d3e3      	bcc.n	800f9fc <coremark_main+0xa5c>
	for (i=0 ; i<default_num_contexts; i++) 
 800fa34:	2300      	movs	r3, #0
 800fa36:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800fa3a:	e015      	b.n	800fa68 <coremark_main+0xac8>
		ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
 800fa3c:	f8b7 183e 	ldrh.w	r1, [r7, #2110]	; 0x83e
 800fa40:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800fa44:	4613      	mov	r3, r2
 800fa46:	011b      	lsls	r3, r3, #4
 800fa48:	4413      	add	r3, r2
 800fa4a:	009b      	lsls	r3, r3, #2
 800fa4c:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800fa50:	443b      	add	r3, r7
 800fa52:	3b38      	subs	r3, #56	; 0x38
 800fa54:	881b      	ldrh	r3, [r3, #0]
 800fa56:	461a      	mov	r2, r3
 800fa58:	482f      	ldr	r0, [pc, #188]	; (800fb18 <coremark_main+0xb78>)
 800fa5a:	f003 fae1 	bl	8013020 <iprintf>
	for (i=0 ; i<default_num_contexts; i++) 
 800fa5e:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800fa62:	3301      	adds	r3, #1
 800fa64:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800fa68:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800fa6c:	4b28      	ldr	r3, [pc, #160]	; (800fb10 <coremark_main+0xb70>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	429a      	cmp	r2, r3
 800fa72:	d3e3      	bcc.n	800fa3c <coremark_main+0xa9c>
	if (total_errors==0) {
 800fa74:	f9b7 3836 	ldrsh.w	r3, [r7, #2102]	; 0x836
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d12a      	bne.n	800fad2 <coremark_main+0xb32>
		ee_printf("Correct operation validated. See readme.txt for run and reporting rules.\n");
 800fa7c:	4827      	ldr	r0, [pc, #156]	; (800fb1c <coremark_main+0xb7c>)
 800fa7e:	f003 fb3d 	bl	80130fc <puts>
#if HAS_FLOAT
		if (known_id==3) {
 800fa82:	f9b7 3838 	ldrsh.w	r3, [r7, #2104]	; 0x838
 800fa86:	2b03      	cmp	r3, #3
 800fa88:	d123      	bne.n	800fad2 <coremark_main+0xb32>
#if defined(__GNUC__) && defined (__ARMCC_VERSION)
			ee_printf("CoreMark 1.0 : %f / Keil ver%d",default_num_contexts*results[0].iterations/time_in_secs(total_time), __ARMCC_VERSION);
#elif defined(__CC_ARM)
			ee_printf("CoreMark 1.0 : %f / Keil ver%d",default_num_contexts*results[0].iterations/time_in_secs(total_time), __ARMCC_VERSION);
#elif defined(__GNUC__)
			ee_printf("CoreMark 1.0 : %f / GCC ver%d.%d.%d",default_num_contexts*results[0].iterations/time_in_secs(total_time), __GNUC__,__GNUC_MINOR__,  __GNUC_PATCHLEVEL__);
 800fa8a:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 800fa8e:	4a20      	ldr	r2, [pc, #128]	; (800fb10 <coremark_main+0xb70>)
 800fa90:	6812      	ldr	r2, [r2, #0]
 800fa92:	fb02 f303 	mul.w	r3, r2, r3
 800fa96:	ee07 3a90 	vmov	s15, r3
 800fa9a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800fa9e:	f8d7 081c 	ldr.w	r0, [r7, #2076]	; 0x81c
 800faa2:	f000 fba5 	bl	80101f0 <time_in_secs>
 800faa6:	eeb0 7b40 	vmov.f64	d7, d0
 800faaa:	ee88 6b07 	vdiv.f64	d6, d8, d7
 800faae:	2301      	movs	r3, #1
 800fab0:	9302      	str	r3, [sp, #8]
 800fab2:	2303      	movs	r3, #3
 800fab4:	9301      	str	r3, [sp, #4]
 800fab6:	230b      	movs	r3, #11
 800fab8:	9300      	str	r3, [sp, #0]
 800faba:	ec53 2b16 	vmov	r2, r3, d6
 800fabe:	4818      	ldr	r0, [pc, #96]	; (800fb20 <coremark_main+0xb80>)
 800fac0:	f003 faae 	bl	8013020 <iprintf>
#elif defined(__ICCARM__)
			ee_printf("CoreMark 1.0 : %f / IAR ver%d",default_num_contexts*results[0].iterations/time_in_secs(total_time), __IAR_SYSTEMS_ICC__);
#endif

#if defined(MEM_LOCATION) && !defined(MEM_LOCATION_UNSPEC)
			ee_printf(" / %s",MEM_LOCATION);
 800fac4:	4917      	ldr	r1, [pc, #92]	; (800fb24 <coremark_main+0xb84>)
 800fac6:	4818      	ldr	r0, [pc, #96]	; (800fb28 <coremark_main+0xb88>)
 800fac8:	f003 faaa 	bl	8013020 <iprintf>
#endif

#if (MULTITHREAD>1)
			ee_printf(" / %d:%s",default_num_contexts,PARALLEL_METHOD);
#endif
			ee_printf("\n");
 800facc:	200a      	movs	r0, #10
 800face:	f003 fab9 	bl	8013044 <putchar>
		}
#endif
	}
	if (total_errors>0)
 800fad2:	f9b7 3836 	ldrsh.w	r3, [r7, #2102]	; 0x836
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	dd02      	ble.n	800fae0 <coremark_main+0xb40>
		ee_printf("Errors detected\n");
 800fada:	4814      	ldr	r0, [pc, #80]	; (800fb2c <coremark_main+0xb8c>)
 800fadc:	f003 fb0e 	bl	80130fc <puts>
	if (total_errors<0)
 800fae0:	f9b7 3836 	ldrsh.w	r3, [r7, #2102]	; 0x836
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	da02      	bge.n	800faee <coremark_main+0xb4e>
		ee_printf("Cannot validate operation for these seed values, please compare with results on a known platform.\n");
 800fae8:	4811      	ldr	r0, [pc, #68]	; (800fb30 <coremark_main+0xb90>)
 800faea:	f003 fb07 	bl	80130fc <puts>
#if (MEM_METHOD==MEM_MALLOC)
	for (i=0 ; i<MULTITHREAD; i++) 
		portable_free(results[i].memblock[0]);
#endif
	/* And last call any target specific code for finalizing */
	portable_fini(&(results[0].port));
 800faee:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800faf2:	3342      	adds	r3, #66	; 0x42
 800faf4:	4618      	mov	r0, r3
 800faf6:	f000 fbaa 	bl	801024e <portable_fini>

	return MAIN_RETURN_VAL;	
 800fafa:	2300      	movs	r3, #0
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	f507 6704 	add.w	r7, r7, #2112	; 0x840
 800fb02:	46bd      	mov	sp, r7
 800fb04:	ecbd 8b02 	vpop	{d8}
 800fb08:	bdb0      	pop	{r4, r5, r7, pc}
 800fb0a:	bf00      	nop
 800fb0c:	08015628 	.word	0x08015628
 800fb10:	240000a8 	.word	0x240000a8
 800fb14:	08015644 	.word	0x08015644
 800fb18:	08015660 	.word	0x08015660
 800fb1c:	0801567c 	.word	0x0801567c
 800fb20:	080156c8 	.word	0x080156c8
 800fb24:	080155d0 	.word	0x080155d0
 800fb28:	080156ec 	.word	0x080156ec
 800fb2c:	080156f4 	.word	0x080156f4
 800fb30:	08015704 	.word	0x08015704

0800fb34 <core_bench_matrix>:
	Benchmark function

	Iterate <matrix_test> N times, 
	changing the matrix values slightly by a constant amount each time.
*/
ee_u16 core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc) {
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b08a      	sub	sp, #40	; 0x28
 800fb38:	af02      	add	r7, sp, #8
 800fb3a:	6078      	str	r0, [r7, #4]
 800fb3c:	460b      	mov	r3, r1
 800fb3e:	807b      	strh	r3, [r7, #2]
 800fb40:	4613      	mov	r3, r2
 800fb42:	803b      	strh	r3, [r7, #0]
	ee_u32 N=p->N;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	61fb      	str	r3, [r7, #28]
	MATRES *C=p->C;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	68db      	ldr	r3, [r3, #12]
 800fb4e:	61bb      	str	r3, [r7, #24]
	MATDAT *A=p->A;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	685b      	ldr	r3, [r3, #4]
 800fb54:	617b      	str	r3, [r7, #20]
	MATDAT *B=p->B;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	689b      	ldr	r3, [r3, #8]
 800fb5a:	613b      	str	r3, [r7, #16]
	MATDAT val=(MATDAT)seed;
 800fb5c:	887b      	ldrh	r3, [r7, #2]
 800fb5e:	81fb      	strh	r3, [r7, #14]

	crc=crc16(matrix_test(N,C,A,B,val),crc);
 800fb60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fb64:	9300      	str	r3, [sp, #0]
 800fb66:	693b      	ldr	r3, [r7, #16]
 800fb68:	697a      	ldr	r2, [r7, #20]
 800fb6a:	69b9      	ldr	r1, [r7, #24]
 800fb6c:	69f8      	ldr	r0, [r7, #28]
 800fb6e:	f000 f80e 	bl	800fb8e <matrix_test>
 800fb72:	4603      	mov	r3, r0
 800fb74:	461a      	mov	r2, r3
 800fb76:	883b      	ldrh	r3, [r7, #0]
 800fb78:	4619      	mov	r1, r3
 800fb7a:	4610      	mov	r0, r2
 800fb7c:	f000 fed3 	bl	8010926 <crc16>
 800fb80:	4603      	mov	r3, r0
 800fb82:	803b      	strh	r3, [r7, #0]

	return crc;
 800fb84:	883b      	ldrh	r3, [r7, #0]
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3720      	adds	r7, #32
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}

0800fb8e <matrix_test>:
	4 - Multiply a matrix by a matrix.
	5 - Add a constant value to all elements of a matrix.

	After the last step, matrix A is back to original contents.
*/
ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
 800fb8e:	b580      	push	{r7, lr}
 800fb90:	b086      	sub	sp, #24
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	60f8      	str	r0, [r7, #12]
 800fb96:	60b9      	str	r1, [r7, #8]
 800fb98:	607a      	str	r2, [r7, #4]
 800fb9a:	603b      	str	r3, [r7, #0]
	ee_u16 crc=0;
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	82fb      	strh	r3, [r7, #22]
	MATDAT clipval=matrix_big(val);
 800fba0:	8c3b      	ldrh	r3, [r7, #32]
 800fba2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800fba6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800fbaa:	82bb      	strh	r3, [r7, #20]

	matrix_add_const(N,A,val); /* make sure data changes  */
 800fbac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fbb0:	461a      	mov	r2, r3
 800fbb2:	6879      	ldr	r1, [r7, #4]
 800fbb4:	68f8      	ldr	r0, [r7, #12]
 800fbb6:	f000 f98d 	bl	800fed4 <matrix_add_const>
#if CORE_DEBUG
	printmat(A,N,"matrix_add_const");
#endif
	matrix_mul_const(N,C,A,val);
 800fbba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fbbe:	687a      	ldr	r2, [r7, #4]
 800fbc0:	68b9      	ldr	r1, [r7, #8]
 800fbc2:	68f8      	ldr	r0, [r7, #12]
 800fbc4:	f000 f94a 	bl	800fe5c <matrix_mul_const>
	crc=crc16(matrix_sum(N,C,clipval),crc);
 800fbc8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fbcc:	461a      	mov	r2, r3
 800fbce:	68b9      	ldr	r1, [r7, #8]
 800fbd0:	68f8      	ldr	r0, [r7, #12]
 800fbd2:	f000 f8ef 	bl	800fdb4 <matrix_sum>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	461a      	mov	r2, r3
 800fbda:	8afb      	ldrh	r3, [r7, #22]
 800fbdc:	4619      	mov	r1, r3
 800fbde:	4610      	mov	r0, r2
 800fbe0:	f000 fea1 	bl	8010926 <crc16>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	82fb      	strh	r3, [r7, #22]
#if CORE_DEBUG
	printmatC(C,N,"matrix_mul_const");
#endif
	matrix_mul_vect(N,C,A,B);
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	687a      	ldr	r2, [r7, #4]
 800fbec:	68b9      	ldr	r1, [r7, #8]
 800fbee:	68f8      	ldr	r0, [r7, #12]
 800fbf0:	f000 f9ac 	bl	800ff4c <matrix_mul_vect>
	crc=crc16(matrix_sum(N,C,clipval),crc);
 800fbf4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	68b9      	ldr	r1, [r7, #8]
 800fbfc:	68f8      	ldr	r0, [r7, #12]
 800fbfe:	f000 f8d9 	bl	800fdb4 <matrix_sum>
 800fc02:	4603      	mov	r3, r0
 800fc04:	461a      	mov	r2, r3
 800fc06:	8afb      	ldrh	r3, [r7, #22]
 800fc08:	4619      	mov	r1, r3
 800fc0a:	4610      	mov	r0, r2
 800fc0c:	f000 fe8b 	bl	8010926 <crc16>
 800fc10:	4603      	mov	r3, r0
 800fc12:	82fb      	strh	r3, [r7, #22]
#if CORE_DEBUG
	printmatC(C,N,"matrix_mul_vect");
#endif
	matrix_mul_matrix(N,C,A,B);
 800fc14:	683b      	ldr	r3, [r7, #0]
 800fc16:	687a      	ldr	r2, [r7, #4]
 800fc18:	68b9      	ldr	r1, [r7, #8]
 800fc1a:	68f8      	ldr	r0, [r7, #12]
 800fc1c:	f000 f9dd 	bl	800ffda <matrix_mul_matrix>
	crc=crc16(matrix_sum(N,C,clipval),crc);
 800fc20:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fc24:	461a      	mov	r2, r3
 800fc26:	68b9      	ldr	r1, [r7, #8]
 800fc28:	68f8      	ldr	r0, [r7, #12]
 800fc2a:	f000 f8c3 	bl	800fdb4 <matrix_sum>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	461a      	mov	r2, r3
 800fc32:	8afb      	ldrh	r3, [r7, #22]
 800fc34:	4619      	mov	r1, r3
 800fc36:	4610      	mov	r0, r2
 800fc38:	f000 fe75 	bl	8010926 <crc16>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	82fb      	strh	r3, [r7, #22]
#if CORE_DEBUG
	printmatC(C,N,"matrix_mul_matrix");
#endif
	matrix_mul_matrix_bitextract(N,C,A,B);
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	687a      	ldr	r2, [r7, #4]
 800fc44:	68b9      	ldr	r1, [r7, #8]
 800fc46:	68f8      	ldr	r0, [r7, #12]
 800fc48:	f000 fa2c 	bl	80100a4 <matrix_mul_matrix_bitextract>
	crc=crc16(matrix_sum(N,C,clipval),crc);
 800fc4c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fc50:	461a      	mov	r2, r3
 800fc52:	68b9      	ldr	r1, [r7, #8]
 800fc54:	68f8      	ldr	r0, [r7, #12]
 800fc56:	f000 f8ad 	bl	800fdb4 <matrix_sum>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	461a      	mov	r2, r3
 800fc5e:	8afb      	ldrh	r3, [r7, #22]
 800fc60:	4619      	mov	r1, r3
 800fc62:	4610      	mov	r0, r2
 800fc64:	f000 fe5f 	bl	8010926 <crc16>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	82fb      	strh	r3, [r7, #22]
#if CORE_DEBUG
	printmatC(C,N,"matrix_mul_matrix_bitextract");
#endif
	
	matrix_add_const(N,A,-val); /* return matrix to initial value */
 800fc6c:	8c3b      	ldrh	r3, [r7, #32]
 800fc6e:	425b      	negs	r3, r3
 800fc70:	b29b      	uxth	r3, r3
 800fc72:	b21b      	sxth	r3, r3
 800fc74:	461a      	mov	r2, r3
 800fc76:	6879      	ldr	r1, [r7, #4]
 800fc78:	68f8      	ldr	r0, [r7, #12]
 800fc7a:	f000 f92b 	bl	800fed4 <matrix_add_const>
	return crc;
 800fc7e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	3718      	adds	r7, #24
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}

0800fc8a <core_init_matrix>:
	Matrix dimensions.
	
	Note:
	The seed parameter MUST be supplied from a source that cannot be determined at compile time
*/
ee_u32 core_init_matrix(ee_u32 blksize, void *memblk, ee_s32 seed, mat_params *p) {
 800fc8a:	b480      	push	{r7}
 800fc8c:	b08d      	sub	sp, #52	; 0x34
 800fc8e:	af00      	add	r7, sp, #0
 800fc90:	60f8      	str	r0, [r7, #12]
 800fc92:	60b9      	str	r1, [r7, #8]
 800fc94:	607a      	str	r2, [r7, #4]
 800fc96:	603b      	str	r3, [r7, #0]
	ee_u32 N=0;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	623b      	str	r3, [r7, #32]
	MATDAT *A;
	MATDAT *B;
	ee_s32 order=1;
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	MATDAT val;
	ee_u32 i=0,j=0;
 800fca0:	2300      	movs	r3, #0
 800fca2:	62bb      	str	r3, [r7, #40]	; 0x28
 800fca4:	2300      	movs	r3, #0
 800fca6:	627b      	str	r3, [r7, #36]	; 0x24
	if (seed==0)
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d10a      	bne.n	800fcc4 <core_init_matrix+0x3a>
		seed=1;
 800fcae:	2301      	movs	r3, #1
 800fcb0:	607b      	str	r3, [r7, #4]
	while (j<blksize) {
 800fcb2:	e007      	b.n	800fcc4 <core_init_matrix+0x3a>
		i++;
 800fcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb6:	3301      	adds	r3, #1
 800fcb8:	62bb      	str	r3, [r7, #40]	; 0x28
		j=i*i*2*4;		
 800fcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcbc:	fb03 f303 	mul.w	r3, r3, r3
 800fcc0:	00db      	lsls	r3, r3, #3
 800fcc2:	627b      	str	r3, [r7, #36]	; 0x24
	while (j<blksize) {
 800fcc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	429a      	cmp	r2, r3
 800fcca:	d3f3      	bcc.n	800fcb4 <core_init_matrix+0x2a>
	}
	N=i-1;
 800fccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcce:	3b01      	subs	r3, #1
 800fcd0:	623b      	str	r3, [r7, #32]
	A=(MATDAT *)align_mem(memblk);
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	3b01      	subs	r3, #1
 800fcd6:	f023 0303 	bic.w	r3, r3, #3
 800fcda:	3304      	adds	r3, #4
 800fcdc:	61fb      	str	r3, [r7, #28]
	B=A+N*N;
 800fcde:	6a3b      	ldr	r3, [r7, #32]
 800fce0:	fb03 f303 	mul.w	r3, r3, r3
 800fce4:	005b      	lsls	r3, r3, #1
 800fce6:	69fa      	ldr	r2, [r7, #28]
 800fce8:	4413      	add	r3, r2
 800fcea:	61bb      	str	r3, [r7, #24]

	for (i=0; i<N; i++) {
 800fcec:	2300      	movs	r3, #0
 800fcee:	62bb      	str	r3, [r7, #40]	; 0x28
 800fcf0:	e03f      	b.n	800fd72 <core_init_matrix+0xe8>
		for (j=0; j<N; j++) {
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	627b      	str	r3, [r7, #36]	; 0x24
 800fcf6:	e035      	b.n	800fd64 <core_init_matrix+0xda>
			seed = ( ( order * seed ) % 65536 );
 800fcf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcfa:	687a      	ldr	r2, [r7, #4]
 800fcfc:	fb02 f303 	mul.w	r3, r2, r3
 800fd00:	425a      	negs	r2, r3
 800fd02:	b29b      	uxth	r3, r3
 800fd04:	b292      	uxth	r2, r2
 800fd06:	bf58      	it	pl
 800fd08:	4253      	negpl	r3, r2
 800fd0a:	607b      	str	r3, [r7, #4]
			val = (seed + order);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	b29a      	uxth	r2, r3
 800fd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd12:	b29b      	uxth	r3, r3
 800fd14:	4413      	add	r3, r2
 800fd16:	b29b      	uxth	r3, r3
 800fd18:	82fb      	strh	r3, [r7, #22]
			val=matrix_clip(val,0);
			B[i*N+j] = val;
 800fd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd1c:	6a3a      	ldr	r2, [r7, #32]
 800fd1e:	fb03 f202 	mul.w	r2, r3, r2
 800fd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd24:	4413      	add	r3, r2
 800fd26:	005b      	lsls	r3, r3, #1
 800fd28:	69ba      	ldr	r2, [r7, #24]
 800fd2a:	4413      	add	r3, r2
 800fd2c:	8afa      	ldrh	r2, [r7, #22]
 800fd2e:	801a      	strh	r2, [r3, #0]
			val =  (val + order);
 800fd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd32:	b29a      	uxth	r2, r3
 800fd34:	8afb      	ldrh	r3, [r7, #22]
 800fd36:	4413      	add	r3, r2
 800fd38:	b29b      	uxth	r3, r3
 800fd3a:	82fb      	strh	r3, [r7, #22]
			val=matrix_clip(val,1);
 800fd3c:	8afb      	ldrh	r3, [r7, #22]
 800fd3e:	b2db      	uxtb	r3, r3
 800fd40:	82fb      	strh	r3, [r7, #22]
			A[i*N+j] = val;
 800fd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd44:	6a3a      	ldr	r2, [r7, #32]
 800fd46:	fb03 f202 	mul.w	r2, r3, r2
 800fd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4c:	4413      	add	r3, r2
 800fd4e:	005b      	lsls	r3, r3, #1
 800fd50:	69fa      	ldr	r2, [r7, #28]
 800fd52:	4413      	add	r3, r2
 800fd54:	8afa      	ldrh	r2, [r7, #22]
 800fd56:	801a      	strh	r2, [r3, #0]
			order++;
 800fd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd5a:	3301      	adds	r3, #1
 800fd5c:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (j=0; j<N; j++) {
 800fd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd60:	3301      	adds	r3, #1
 800fd62:	627b      	str	r3, [r7, #36]	; 0x24
 800fd64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd66:	6a3b      	ldr	r3, [r7, #32]
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	d3c5      	bcc.n	800fcf8 <core_init_matrix+0x6e>
	for (i=0; i<N; i++) {
 800fd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd6e:	3301      	adds	r3, #1
 800fd70:	62bb      	str	r3, [r7, #40]	; 0x28
 800fd72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd74:	6a3b      	ldr	r3, [r7, #32]
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d3bb      	bcc.n	800fcf2 <core_init_matrix+0x68>
		}
	}

	p->A=A;
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	69fa      	ldr	r2, [r7, #28]
 800fd7e:	605a      	str	r2, [r3, #4]
	p->B=B;
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	69ba      	ldr	r2, [r7, #24]
 800fd84:	609a      	str	r2, [r3, #8]
	p->C=(MATRES *)align_mem(B+N*N);
 800fd86:	6a3b      	ldr	r3, [r7, #32]
 800fd88:	fb03 f303 	mul.w	r3, r3, r3
 800fd8c:	005b      	lsls	r3, r3, #1
 800fd8e:	69ba      	ldr	r2, [r7, #24]
 800fd90:	4413      	add	r3, r2
 800fd92:	3b01      	subs	r3, #1
 800fd94:	f023 0303 	bic.w	r3, r3, #3
 800fd98:	3304      	adds	r3, #4
 800fd9a:	461a      	mov	r2, r3
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	60da      	str	r2, [r3, #12]
	p->N=N;
 800fda0:	6a3a      	ldr	r2, [r7, #32]
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	601a      	str	r2, [r3, #0]
#if CORE_DEBUG
	printmat(A,N,"A");
	printmat(B,N,"B");
#endif
	return N;
 800fda6:	6a3b      	ldr	r3, [r7, #32]
}
 800fda8:	4618      	mov	r0, r3
 800fdaa:	3734      	adds	r7, #52	; 0x34
 800fdac:	46bd      	mov	sp, r7
 800fdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb2:	4770      	bx	lr

0800fdb4 <matrix_sum>:
	As long as this value is under the parameter clipval, 
	add 1 to the result if the element is bigger then the previous.
	
	Otherwise, reset the accumulator and add 10 to the result.
*/
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
 800fdb4:	b480      	push	{r7}
 800fdb6:	b08b      	sub	sp, #44	; 0x2c
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	60f8      	str	r0, [r7, #12]
 800fdbc:	60b9      	str	r1, [r7, #8]
 800fdbe:	4613      	mov	r3, r2
 800fdc0:	80fb      	strh	r3, [r7, #6]
	MATRES tmp=0,prev=0,cur=0;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	627b      	str	r3, [r7, #36]	; 0x24
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	623b      	str	r3, [r7, #32]
 800fdca:	2300      	movs	r3, #0
 800fdcc:	613b      	str	r3, [r7, #16]
	ee_s16 ret=0;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	83fb      	strh	r3, [r7, #30]
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	61bb      	str	r3, [r7, #24]
 800fdd6:	e035      	b.n	800fe44 <matrix_sum+0x90>
		for (j=0; j<N; j++) {
 800fdd8:	2300      	movs	r3, #0
 800fdda:	617b      	str	r3, [r7, #20]
 800fddc:	e02b      	b.n	800fe36 <matrix_sum+0x82>
			cur=C[i*N+j];
 800fdde:	69bb      	ldr	r3, [r7, #24]
 800fde0:	68fa      	ldr	r2, [r7, #12]
 800fde2:	fb03 f202 	mul.w	r2, r3, r2
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	4413      	add	r3, r2
 800fdea:	009b      	lsls	r3, r3, #2
 800fdec:	68ba      	ldr	r2, [r7, #8]
 800fdee:	4413      	add	r3, r2
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	613b      	str	r3, [r7, #16]
			tmp+=cur;
 800fdf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdf6:	693b      	ldr	r3, [r7, #16]
 800fdf8:	4413      	add	r3, r2
 800fdfa:	627b      	str	r3, [r7, #36]	; 0x24
			if (tmp>clipval) {
 800fdfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fe00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe02:	429a      	cmp	r2, r3
 800fe04:	dd06      	ble.n	800fe14 <matrix_sum+0x60>
				ret+=10;
 800fe06:	8bfb      	ldrh	r3, [r7, #30]
 800fe08:	330a      	adds	r3, #10
 800fe0a:	b29b      	uxth	r3, r3
 800fe0c:	83fb      	strh	r3, [r7, #30]
				tmp=0;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	627b      	str	r3, [r7, #36]	; 0x24
 800fe12:	e00b      	b.n	800fe2c <matrix_sum+0x78>
			} else {
				ret += (cur>prev) ? 1 : 0;
 800fe14:	693a      	ldr	r2, [r7, #16]
 800fe16:	6a3b      	ldr	r3, [r7, #32]
 800fe18:	429a      	cmp	r2, r3
 800fe1a:	bfcc      	ite	gt
 800fe1c:	2301      	movgt	r3, #1
 800fe1e:	2300      	movle	r3, #0
 800fe20:	b2db      	uxtb	r3, r3
 800fe22:	b29a      	uxth	r2, r3
 800fe24:	8bfb      	ldrh	r3, [r7, #30]
 800fe26:	4413      	add	r3, r2
 800fe28:	b29b      	uxth	r3, r3
 800fe2a:	83fb      	strh	r3, [r7, #30]
			}
			prev=cur;
 800fe2c:	693b      	ldr	r3, [r7, #16]
 800fe2e:	623b      	str	r3, [r7, #32]
		for (j=0; j<N; j++) {
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	3301      	adds	r3, #1
 800fe34:	617b      	str	r3, [r7, #20]
 800fe36:	697a      	ldr	r2, [r7, #20]
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	429a      	cmp	r2, r3
 800fe3c:	d3cf      	bcc.n	800fdde <matrix_sum+0x2a>
	for (i=0; i<N; i++) {
 800fe3e:	69bb      	ldr	r3, [r7, #24]
 800fe40:	3301      	adds	r3, #1
 800fe42:	61bb      	str	r3, [r7, #24]
 800fe44:	69ba      	ldr	r2, [r7, #24]
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	429a      	cmp	r2, r3
 800fe4a:	d3c5      	bcc.n	800fdd8 <matrix_sum+0x24>
		}
	}
	return ret;
 800fe4c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	372c      	adds	r7, #44	; 0x2c
 800fe54:	46bd      	mov	sp, r7
 800fe56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5a:	4770      	bx	lr

0800fe5c <matrix_mul_const>:

/* Function: matrix_mul_const
	Multiply a matrix by a constant.
	This could be used as a scaler for instance.
*/
void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val) {
 800fe5c:	b480      	push	{r7}
 800fe5e:	b087      	sub	sp, #28
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	60f8      	str	r0, [r7, #12]
 800fe64:	60b9      	str	r1, [r7, #8]
 800fe66:	607a      	str	r2, [r7, #4]
 800fe68:	807b      	strh	r3, [r7, #2]
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	617b      	str	r3, [r7, #20]
 800fe6e:	e026      	b.n	800febe <matrix_mul_const+0x62>
		for (j=0; j<N; j++) {
 800fe70:	2300      	movs	r3, #0
 800fe72:	613b      	str	r3, [r7, #16]
 800fe74:	e01c      	b.n	800feb0 <matrix_mul_const+0x54>
			C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	68fa      	ldr	r2, [r7, #12]
 800fe7a:	fb03 f202 	mul.w	r2, r3, r2
 800fe7e:	693b      	ldr	r3, [r7, #16]
 800fe80:	4413      	add	r3, r2
 800fe82:	005b      	lsls	r3, r3, #1
 800fe84:	687a      	ldr	r2, [r7, #4]
 800fe86:	4413      	add	r3, r2
 800fe88:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	68f9      	ldr	r1, [r7, #12]
 800fe96:	fb03 f101 	mul.w	r1, r3, r1
 800fe9a:	693b      	ldr	r3, [r7, #16]
 800fe9c:	440b      	add	r3, r1
 800fe9e:	009b      	lsls	r3, r3, #2
 800fea0:	68b9      	ldr	r1, [r7, #8]
 800fea2:	440b      	add	r3, r1
 800fea4:	fb00 f202 	mul.w	r2, r0, r2
 800fea8:	601a      	str	r2, [r3, #0]
		for (j=0; j<N; j++) {
 800feaa:	693b      	ldr	r3, [r7, #16]
 800feac:	3301      	adds	r3, #1
 800feae:	613b      	str	r3, [r7, #16]
 800feb0:	693a      	ldr	r2, [r7, #16]
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	429a      	cmp	r2, r3
 800feb6:	d3de      	bcc.n	800fe76 <matrix_mul_const+0x1a>
	for (i=0; i<N; i++) {
 800feb8:	697b      	ldr	r3, [r7, #20]
 800feba:	3301      	adds	r3, #1
 800febc:	617b      	str	r3, [r7, #20]
 800febe:	697a      	ldr	r2, [r7, #20]
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	429a      	cmp	r2, r3
 800fec4:	d3d4      	bcc.n	800fe70 <matrix_mul_const+0x14>
		}
	}
}
 800fec6:	bf00      	nop
 800fec8:	bf00      	nop
 800feca:	371c      	adds	r7, #28
 800fecc:	46bd      	mov	sp, r7
 800fece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed2:	4770      	bx	lr

0800fed4 <matrix_add_const>:

/* Function: matrix_add_const
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
 800fed4:	b480      	push	{r7}
 800fed6:	b087      	sub	sp, #28
 800fed8:	af00      	add	r7, sp, #0
 800feda:	60f8      	str	r0, [r7, #12]
 800fedc:	60b9      	str	r1, [r7, #8]
 800fede:	4613      	mov	r3, r2
 800fee0:	80fb      	strh	r3, [r7, #6]
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 800fee2:	2300      	movs	r3, #0
 800fee4:	617b      	str	r3, [r7, #20]
 800fee6:	e026      	b.n	800ff36 <matrix_add_const+0x62>
		for (j=0; j<N; j++) {
 800fee8:	2300      	movs	r3, #0
 800feea:	613b      	str	r3, [r7, #16]
 800feec:	e01c      	b.n	800ff28 <matrix_add_const+0x54>
			A[i*N+j] += val;
 800feee:	697b      	ldr	r3, [r7, #20]
 800fef0:	68fa      	ldr	r2, [r7, #12]
 800fef2:	fb03 f202 	mul.w	r2, r3, r2
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	4413      	add	r3, r2
 800fefa:	005b      	lsls	r3, r3, #1
 800fefc:	68ba      	ldr	r2, [r7, #8]
 800fefe:	4413      	add	r3, r2
 800ff00:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff04:	b29a      	uxth	r2, r3
 800ff06:	88fb      	ldrh	r3, [r7, #6]
 800ff08:	4413      	add	r3, r2
 800ff0a:	b299      	uxth	r1, r3
 800ff0c:	697b      	ldr	r3, [r7, #20]
 800ff0e:	68fa      	ldr	r2, [r7, #12]
 800ff10:	fb03 f202 	mul.w	r2, r3, r2
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	4413      	add	r3, r2
 800ff18:	005b      	lsls	r3, r3, #1
 800ff1a:	68ba      	ldr	r2, [r7, #8]
 800ff1c:	4413      	add	r3, r2
 800ff1e:	b20a      	sxth	r2, r1
 800ff20:	801a      	strh	r2, [r3, #0]
		for (j=0; j<N; j++) {
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	3301      	adds	r3, #1
 800ff26:	613b      	str	r3, [r7, #16]
 800ff28:	693a      	ldr	r2, [r7, #16]
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d3de      	bcc.n	800feee <matrix_add_const+0x1a>
	for (i=0; i<N; i++) {
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	3301      	adds	r3, #1
 800ff34:	617b      	str	r3, [r7, #20]
 800ff36:	697a      	ldr	r2, [r7, #20]
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	d3d4      	bcc.n	800fee8 <matrix_add_const+0x14>
		}
	}
}
 800ff3e:	bf00      	nop
 800ff40:	bf00      	nop
 800ff42:	371c      	adds	r7, #28
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr

0800ff4c <matrix_mul_vect>:

/* Function: matrix_mul_vect
	Multiply a matrix by a vector.
	This is common in many simple filters (e.g. fir where a vector of coefficients is applied to the matrix.)
*/
void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
 800ff4c:	b480      	push	{r7}
 800ff4e:	b087      	sub	sp, #28
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	60f8      	str	r0, [r7, #12]
 800ff54:	60b9      	str	r1, [r7, #8]
 800ff56:	607a      	str	r2, [r7, #4]
 800ff58:	603b      	str	r3, [r7, #0]
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	617b      	str	r3, [r7, #20]
 800ff5e:	e031      	b.n	800ffc4 <matrix_mul_vect+0x78>
		C[i]=0;
 800ff60:	697b      	ldr	r3, [r7, #20]
 800ff62:	009b      	lsls	r3, r3, #2
 800ff64:	68ba      	ldr	r2, [r7, #8]
 800ff66:	4413      	add	r3, r2
 800ff68:	2200      	movs	r2, #0
 800ff6a:	601a      	str	r2, [r3, #0]
		for (j=0; j<N; j++) {
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	613b      	str	r3, [r7, #16]
 800ff70:	e021      	b.n	800ffb6 <matrix_mul_vect+0x6a>
			C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	009b      	lsls	r3, r3, #2
 800ff76:	68ba      	ldr	r2, [r7, #8]
 800ff78:	4413      	add	r3, r2
 800ff7a:	6819      	ldr	r1, [r3, #0]
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	68fa      	ldr	r2, [r7, #12]
 800ff80:	fb03 f202 	mul.w	r2, r3, r2
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	4413      	add	r3, r2
 800ff88:	005b      	lsls	r3, r3, #1
 800ff8a:	687a      	ldr	r2, [r7, #4]
 800ff8c:	4413      	add	r3, r2
 800ff8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff92:	4618      	mov	r0, r3
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	005b      	lsls	r3, r3, #1
 800ff98:	683a      	ldr	r2, [r7, #0]
 800ff9a:	4413      	add	r3, r2
 800ff9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ffa0:	fb03 f200 	mul.w	r2, r3, r0
 800ffa4:	697b      	ldr	r3, [r7, #20]
 800ffa6:	009b      	lsls	r3, r3, #2
 800ffa8:	68b8      	ldr	r0, [r7, #8]
 800ffaa:	4403      	add	r3, r0
 800ffac:	440a      	add	r2, r1
 800ffae:	601a      	str	r2, [r3, #0]
		for (j=0; j<N; j++) {
 800ffb0:	693b      	ldr	r3, [r7, #16]
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	613b      	str	r3, [r7, #16]
 800ffb6:	693a      	ldr	r2, [r7, #16]
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d3d9      	bcc.n	800ff72 <matrix_mul_vect+0x26>
	for (i=0; i<N; i++) {
 800ffbe:	697b      	ldr	r3, [r7, #20]
 800ffc0:	3301      	adds	r3, #1
 800ffc2:	617b      	str	r3, [r7, #20]
 800ffc4:	697a      	ldr	r2, [r7, #20]
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	d3c9      	bcc.n	800ff60 <matrix_mul_vect+0x14>
		}
	}
}
 800ffcc:	bf00      	nop
 800ffce:	bf00      	nop
 800ffd0:	371c      	adds	r7, #28
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd8:	4770      	bx	lr

0800ffda <matrix_mul_matrix>:

/* Function: matrix_mul_matrix
	Multiply a matrix by a matrix.
	Basic code is used in many algorithms, mostly with minor changes such as scaling.
*/
void matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
 800ffda:	b480      	push	{r7}
 800ffdc:	b089      	sub	sp, #36	; 0x24
 800ffde:	af00      	add	r7, sp, #0
 800ffe0:	60f8      	str	r0, [r7, #12]
 800ffe2:	60b9      	str	r1, [r7, #8]
 800ffe4:	607a      	str	r2, [r7, #4]
 800ffe6:	603b      	str	r3, [r7, #0]
	ee_u32 i,j,k;
	for (i=0; i<N; i++) {
 800ffe8:	2300      	movs	r3, #0
 800ffea:	61fb      	str	r3, [r7, #28]
 800ffec:	e04f      	b.n	801008e <matrix_mul_matrix+0xb4>
		for (j=0; j<N; j++) {
 800ffee:	2300      	movs	r3, #0
 800fff0:	61bb      	str	r3, [r7, #24]
 800fff2:	e045      	b.n	8010080 <matrix_mul_matrix+0xa6>
			C[i*N+j]=0;
 800fff4:	69fb      	ldr	r3, [r7, #28]
 800fff6:	68fa      	ldr	r2, [r7, #12]
 800fff8:	fb03 f202 	mul.w	r2, r3, r2
 800fffc:	69bb      	ldr	r3, [r7, #24]
 800fffe:	4413      	add	r3, r2
 8010000:	009b      	lsls	r3, r3, #2
 8010002:	68ba      	ldr	r2, [r7, #8]
 8010004:	4413      	add	r3, r2
 8010006:	2200      	movs	r2, #0
 8010008:	601a      	str	r2, [r3, #0]
			for(k=0;k<N;k++)
 801000a:	2300      	movs	r3, #0
 801000c:	617b      	str	r3, [r7, #20]
 801000e:	e030      	b.n	8010072 <matrix_mul_matrix+0x98>
			{
				C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
 8010010:	69fb      	ldr	r3, [r7, #28]
 8010012:	68fa      	ldr	r2, [r7, #12]
 8010014:	fb03 f202 	mul.w	r2, r3, r2
 8010018:	69bb      	ldr	r3, [r7, #24]
 801001a:	4413      	add	r3, r2
 801001c:	009b      	lsls	r3, r3, #2
 801001e:	68ba      	ldr	r2, [r7, #8]
 8010020:	4413      	add	r3, r2
 8010022:	6819      	ldr	r1, [r3, #0]
 8010024:	69fb      	ldr	r3, [r7, #28]
 8010026:	68fa      	ldr	r2, [r7, #12]
 8010028:	fb03 f202 	mul.w	r2, r3, r2
 801002c:	697b      	ldr	r3, [r7, #20]
 801002e:	4413      	add	r3, r2
 8010030:	005b      	lsls	r3, r3, #1
 8010032:	687a      	ldr	r2, [r7, #4]
 8010034:	4413      	add	r3, r2
 8010036:	f9b3 3000 	ldrsh.w	r3, [r3]
 801003a:	4618      	mov	r0, r3
 801003c:	697b      	ldr	r3, [r7, #20]
 801003e:	68fa      	ldr	r2, [r7, #12]
 8010040:	fb03 f202 	mul.w	r2, r3, r2
 8010044:	69bb      	ldr	r3, [r7, #24]
 8010046:	4413      	add	r3, r2
 8010048:	005b      	lsls	r3, r3, #1
 801004a:	683a      	ldr	r2, [r7, #0]
 801004c:	4413      	add	r3, r2
 801004e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010052:	fb03 f200 	mul.w	r2, r3, r0
 8010056:	69fb      	ldr	r3, [r7, #28]
 8010058:	68f8      	ldr	r0, [r7, #12]
 801005a:	fb03 f000 	mul.w	r0, r3, r0
 801005e:	69bb      	ldr	r3, [r7, #24]
 8010060:	4403      	add	r3, r0
 8010062:	009b      	lsls	r3, r3, #2
 8010064:	68b8      	ldr	r0, [r7, #8]
 8010066:	4403      	add	r3, r0
 8010068:	440a      	add	r2, r1
 801006a:	601a      	str	r2, [r3, #0]
			for(k=0;k<N;k++)
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	3301      	adds	r3, #1
 8010070:	617b      	str	r3, [r7, #20]
 8010072:	697a      	ldr	r2, [r7, #20]
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	429a      	cmp	r2, r3
 8010078:	d3ca      	bcc.n	8010010 <matrix_mul_matrix+0x36>
		for (j=0; j<N; j++) {
 801007a:	69bb      	ldr	r3, [r7, #24]
 801007c:	3301      	adds	r3, #1
 801007e:	61bb      	str	r3, [r7, #24]
 8010080:	69ba      	ldr	r2, [r7, #24]
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	429a      	cmp	r2, r3
 8010086:	d3b5      	bcc.n	800fff4 <matrix_mul_matrix+0x1a>
	for (i=0; i<N; i++) {
 8010088:	69fb      	ldr	r3, [r7, #28]
 801008a:	3301      	adds	r3, #1
 801008c:	61fb      	str	r3, [r7, #28]
 801008e:	69fa      	ldr	r2, [r7, #28]
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	429a      	cmp	r2, r3
 8010094:	d3ab      	bcc.n	800ffee <matrix_mul_matrix+0x14>
			}
		}
	}
}
 8010096:	bf00      	nop
 8010098:	bf00      	nop
 801009a:	3724      	adds	r7, #36	; 0x24
 801009c:	46bd      	mov	sp, r7
 801009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a2:	4770      	bx	lr

080100a4 <matrix_mul_matrix_bitextract>:

/* Function: matrix_mul_matrix_bitextract
	Multiply a matrix by a matrix, and extract some bits from the result.
	Basic code is used in many algorithms, mostly with minor changes such as scaling.
*/
void matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
 80100a4:	b480      	push	{r7}
 80100a6:	b089      	sub	sp, #36	; 0x24
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	60f8      	str	r0, [r7, #12]
 80100ac:	60b9      	str	r1, [r7, #8]
 80100ae:	607a      	str	r2, [r7, #4]
 80100b0:	603b      	str	r3, [r7, #0]
	ee_u32 i,j,k;
	for (i=0; i<N; i++) {
 80100b2:	2300      	movs	r3, #0
 80100b4:	61fb      	str	r3, [r7, #28]
 80100b6:	e05c      	b.n	8010172 <matrix_mul_matrix_bitextract+0xce>
		for (j=0; j<N; j++) {
 80100b8:	2300      	movs	r3, #0
 80100ba:	61bb      	str	r3, [r7, #24]
 80100bc:	e052      	b.n	8010164 <matrix_mul_matrix_bitextract+0xc0>
			C[i*N+j]=0;
 80100be:	69fb      	ldr	r3, [r7, #28]
 80100c0:	68fa      	ldr	r2, [r7, #12]
 80100c2:	fb03 f202 	mul.w	r2, r3, r2
 80100c6:	69bb      	ldr	r3, [r7, #24]
 80100c8:	4413      	add	r3, r2
 80100ca:	009b      	lsls	r3, r3, #2
 80100cc:	68ba      	ldr	r2, [r7, #8]
 80100ce:	4413      	add	r3, r2
 80100d0:	2200      	movs	r2, #0
 80100d2:	601a      	str	r2, [r3, #0]
			for(k=0;k<N;k++)
 80100d4:	2300      	movs	r3, #0
 80100d6:	617b      	str	r3, [r7, #20]
 80100d8:	e03d      	b.n	8010156 <matrix_mul_matrix_bitextract+0xb2>
			{
				MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
 80100da:	69fb      	ldr	r3, [r7, #28]
 80100dc:	68fa      	ldr	r2, [r7, #12]
 80100de:	fb03 f202 	mul.w	r2, r3, r2
 80100e2:	697b      	ldr	r3, [r7, #20]
 80100e4:	4413      	add	r3, r2
 80100e6:	005b      	lsls	r3, r3, #1
 80100e8:	687a      	ldr	r2, [r7, #4]
 80100ea:	4413      	add	r3, r2
 80100ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80100f0:	4619      	mov	r1, r3
 80100f2:	697b      	ldr	r3, [r7, #20]
 80100f4:	68fa      	ldr	r2, [r7, #12]
 80100f6:	fb03 f202 	mul.w	r2, r3, r2
 80100fa:	69bb      	ldr	r3, [r7, #24]
 80100fc:	4413      	add	r3, r2
 80100fe:	005b      	lsls	r3, r3, #1
 8010100:	683a      	ldr	r2, [r7, #0]
 8010102:	4413      	add	r3, r2
 8010104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010108:	fb01 f303 	mul.w	r3, r1, r3
 801010c:	613b      	str	r3, [r7, #16]
				C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
 801010e:	69fb      	ldr	r3, [r7, #28]
 8010110:	68fa      	ldr	r2, [r7, #12]
 8010112:	fb03 f202 	mul.w	r2, r3, r2
 8010116:	69bb      	ldr	r3, [r7, #24]
 8010118:	4413      	add	r3, r2
 801011a:	009b      	lsls	r3, r3, #2
 801011c:	68ba      	ldr	r2, [r7, #8]
 801011e:	4413      	add	r3, r2
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	4619      	mov	r1, r3
 8010124:	693b      	ldr	r3, [r7, #16]
 8010126:	109b      	asrs	r3, r3, #2
 8010128:	f003 030f 	and.w	r3, r3, #15
 801012c:	693a      	ldr	r2, [r7, #16]
 801012e:	1152      	asrs	r2, r2, #5
 8010130:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010134:	fb02 f303 	mul.w	r3, r2, r3
 8010138:	4419      	add	r1, r3
 801013a:	69fb      	ldr	r3, [r7, #28]
 801013c:	68fa      	ldr	r2, [r7, #12]
 801013e:	fb03 f202 	mul.w	r2, r3, r2
 8010142:	69bb      	ldr	r3, [r7, #24]
 8010144:	4413      	add	r3, r2
 8010146:	009b      	lsls	r3, r3, #2
 8010148:	68ba      	ldr	r2, [r7, #8]
 801014a:	4413      	add	r3, r2
 801014c:	460a      	mov	r2, r1
 801014e:	601a      	str	r2, [r3, #0]
			for(k=0;k<N;k++)
 8010150:	697b      	ldr	r3, [r7, #20]
 8010152:	3301      	adds	r3, #1
 8010154:	617b      	str	r3, [r7, #20]
 8010156:	697a      	ldr	r2, [r7, #20]
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	429a      	cmp	r2, r3
 801015c:	d3bd      	bcc.n	80100da <matrix_mul_matrix_bitextract+0x36>
		for (j=0; j<N; j++) {
 801015e:	69bb      	ldr	r3, [r7, #24]
 8010160:	3301      	adds	r3, #1
 8010162:	61bb      	str	r3, [r7, #24]
 8010164:	69ba      	ldr	r2, [r7, #24]
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	429a      	cmp	r2, r3
 801016a:	d3a8      	bcc.n	80100be <matrix_mul_matrix_bitextract+0x1a>
	for (i=0; i<N; i++) {
 801016c:	69fb      	ldr	r3, [r7, #28]
 801016e:	3301      	adds	r3, #1
 8010170:	61fb      	str	r3, [r7, #28]
 8010172:	69fa      	ldr	r2, [r7, #28]
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	429a      	cmp	r2, r3
 8010178:	d39e      	bcc.n	80100b8 <matrix_mul_matrix_bitextract+0x14>
			}
		}
	}
}
 801017a:	bf00      	nop
 801017c:	bf00      	nop
 801017e:	3724      	adds	r7, #36	; 0x24
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr

08010188 <start_time>:
	This function will be called right before starting the timed portion of the benchmark.

	Implementation may be capturing a system timer (as implemented in the example code) 
	or zeroing some system parameters - e.g. setting the cpu clocks cycles to 0.
*/
void start_time(void) {
 8010188:	b480      	push	{r7}
 801018a:	af00      	add	r7, sp, #0
	GETMYTIME(&start_time_val );      
	start_time_val = uwTick;
 801018c:	4b04      	ldr	r3, [pc, #16]	; (80101a0 <start_time+0x18>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	4a04      	ldr	r2, [pc, #16]	; (80101a4 <start_time+0x1c>)
 8010192:	6013      	str	r3, [r2, #0]
}
 8010194:	bf00      	nop
 8010196:	46bd      	mov	sp, r7
 8010198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019c:	4770      	bx	lr
 801019e:	bf00      	nop
 80101a0:	24008564 	.word	0x24008564
 80101a4:	24010b5c 	.word	0x24010b5c

080101a8 <stop_time>:
	This function will be called right after ending the timed portion of the benchmark.

	Implementation may be capturing a system timer (as implemented in the example code) 
	or other system parameters - e.g. reading the current value of cpu cycles counter.
*/
void stop_time(void) {
 80101a8:	b480      	push	{r7}
 80101aa:	af00      	add	r7, sp, #0
	GETMYTIME(&stop_time_val );      
	stop_time_val = uwTick;
 80101ac:	4b04      	ldr	r3, [pc, #16]	; (80101c0 <stop_time+0x18>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	4a04      	ldr	r2, [pc, #16]	; (80101c4 <stop_time+0x1c>)
 80101b2:	6013      	str	r3, [r2, #0]
}
 80101b4:	bf00      	nop
 80101b6:	46bd      	mov	sp, r7
 80101b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101bc:	4770      	bx	lr
 80101be:	bf00      	nop
 80101c0:	24008564 	.word	0x24008564
 80101c4:	24010b60 	.word	0x24010b60

080101c8 <get_time>:
	as long as it can be converted to seconds by <time_in_secs>.
	This methodology is taken to accomodate any hardware or simulated platform.
	The sample implementation returns millisecs by default, 
	and the resolution is controlled by <TIMER_RES_DIVIDER>
*/
CORE_TICKS get_time(void) {
 80101c8:	b480      	push	{r7}
 80101ca:	b083      	sub	sp, #12
 80101cc:	af00      	add	r7, sp, #0
	CORE_TICKS elapsed=(CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
 80101ce:	4b06      	ldr	r3, [pc, #24]	; (80101e8 <get_time+0x20>)
 80101d0:	681a      	ldr	r2, [r3, #0]
 80101d2:	4b06      	ldr	r3, [pc, #24]	; (80101ec <get_time+0x24>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	1ad3      	subs	r3, r2, r3
 80101d8:	607b      	str	r3, [r7, #4]
	return elapsed;
 80101da:	687b      	ldr	r3, [r7, #4]
}
 80101dc:	4618      	mov	r0, r3
 80101de:	370c      	adds	r7, #12
 80101e0:	46bd      	mov	sp, r7
 80101e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e6:	4770      	bx	lr
 80101e8:	24010b60 	.word	0x24010b60
 80101ec:	24010b5c 	.word	0x24010b5c

080101f0 <time_in_secs>:
	Convert the value returned by get_time to seconds.

	The <secs_ret> type is used to accomodate systems with no support for floating point.
	Default implementation implemented by the EE_TICKS_PER_SEC macro above.
*/
secs_ret time_in_secs(CORE_TICKS ticks) {
 80101f0:	b480      	push	{r7}
 80101f2:	b085      	sub	sp, #20
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
	secs_ret retval=((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	ee07 3a90 	vmov	s15, r3
 80101fe:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8010202:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8010228 <time_in_secs+0x38>
 8010206:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801020a:	ed87 7b02 	vstr	d7, [r7, #8]
	return retval;
 801020e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010212:	ec43 2b17 	vmov	d7, r2, r3
}
 8010216:	eeb0 0b47 	vmov.f64	d0, d7
 801021a:	3714      	adds	r7, #20
 801021c:	46bd      	mov	sp, r7
 801021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010222:	4770      	bx	lr
 8010224:	f3af 8000 	nop.w
 8010228:	00000000 	.word	0x00000000
 801022c:	408f4000 	.word	0x408f4000

08010230 <portable_init>:
/* Function : portable_init
	Target specific initialization code 
	Test for some common mistakes.
*/
void portable_init(core_portable *p, int *argc, char *argv[])
{
 8010230:	b480      	push	{r7}
 8010232:	b085      	sub	sp, #20
 8010234:	af00      	add	r7, sp, #0
 8010236:	60f8      	str	r0, [r7, #12]
 8010238:	60b9      	str	r1, [r7, #8]
 801023a:	607a      	str	r2, [r7, #4]
		ee_printf("ERROR! Please define ee_ptr_int to a type that holds a pointer!\n");
	}
	if (sizeof(ee_u32) != 4) {
		ee_printf("ERROR! Please define ee_u32 to a 32b unsigned type!\n");
	}
	p->portable_id=1;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	2201      	movs	r2, #1
 8010240:	701a      	strb	r2, [r3, #0]
}
 8010242:	bf00      	nop
 8010244:	3714      	adds	r7, #20
 8010246:	46bd      	mov	sp, r7
 8010248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024c:	4770      	bx	lr

0801024e <portable_fini>:
/* Function : portable_fini
	Target specific final code 
*/
void portable_fini(core_portable *p)
{
 801024e:	b480      	push	{r7}
 8010250:	b083      	sub	sp, #12
 8010252:	af00      	add	r7, sp, #0
 8010254:	6078      	str	r0, [r7, #4]
	p->portable_id=0;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2200      	movs	r2, #0
 801025a:	701a      	strb	r2, [r3, #0]
}
 801025c:	bf00      	nop
 801025e:	370c      	adds	r7, #12
 8010260:	46bd      	mov	sp, r7
 8010262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010266:	4770      	bx	lr

08010268 <core_bench_state>:

	Go over the input twice, once direct, and once after introducing some corruption. 
*/
ee_u16 core_bench_state(ee_u32 blksize, ee_u8 *memblock, 
		ee_s16 seed1, ee_s16 seed2, ee_s16 step, ee_u16 crc) 
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b098      	sub	sp, #96	; 0x60
 801026c:	af00      	add	r7, sp, #0
 801026e:	60f8      	str	r0, [r7, #12]
 8010270:	60b9      	str	r1, [r7, #8]
 8010272:	4611      	mov	r1, r2
 8010274:	461a      	mov	r2, r3
 8010276:	460b      	mov	r3, r1
 8010278:	80fb      	strh	r3, [r7, #6]
 801027a:	4613      	mov	r3, r2
 801027c:	80bb      	strh	r3, [r7, #4]
	ee_u32 final_counts[NUM_CORE_STATES];
	ee_u32 track_counts[NUM_CORE_STATES];
	ee_u8 *p=memblock;
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	617b      	str	r3, [r7, #20]


#if CORE_DEBUG
	ee_printf("State Bench: %d,%d,%d,%04x\n",seed1,seed2,step,crc);
#endif
	for (i=0; i<NUM_CORE_STATES; i++) {
 8010282:	2300      	movs	r3, #0
 8010284:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010286:	e015      	b.n	80102b4 <core_bench_state+0x4c>
		final_counts[i]=track_counts[i]=0;
 8010288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801028a:	009b      	lsls	r3, r3, #2
 801028c:	3360      	adds	r3, #96	; 0x60
 801028e:	443b      	add	r3, r7
 8010290:	2200      	movs	r2, #0
 8010292:	f843 2c48 	str.w	r2, [r3, #-72]
 8010296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010298:	009b      	lsls	r3, r3, #2
 801029a:	3360      	adds	r3, #96	; 0x60
 801029c:	443b      	add	r3, r7
 801029e:	f853 2c48 	ldr.w	r2, [r3, #-72]
 80102a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102a4:	009b      	lsls	r3, r3, #2
 80102a6:	3360      	adds	r3, #96	; 0x60
 80102a8:	443b      	add	r3, r7
 80102aa:	f843 2c28 	str.w	r2, [r3, #-40]
	for (i=0; i<NUM_CORE_STATES; i++) {
 80102ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102b0:	3301      	adds	r3, #1
 80102b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80102b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102b6:	2b07      	cmp	r3, #7
 80102b8:	d9e6      	bls.n	8010288 <core_bench_state+0x20>
	}
	/* run the state machine over the input */
	while (*p!=0) {
 80102ba:	e017      	b.n	80102ec <core_bench_state+0x84>
		enum CORE_STATE fstate=core_state_transition(&p,track_counts);
 80102bc:	f107 0218 	add.w	r2, r7, #24
 80102c0:	f107 0314 	add.w	r3, r7, #20
 80102c4:	4611      	mov	r1, r2
 80102c6:	4618      	mov	r0, r3
 80102c8:	f000 f964 	bl	8010594 <core_state_transition>
 80102cc:	4603      	mov	r3, r0
 80102ce:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		final_counts[fstate]++;
 80102d2:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 80102d6:	0093      	lsls	r3, r2, #2
 80102d8:	3360      	adds	r3, #96	; 0x60
 80102da:	443b      	add	r3, r7
 80102dc:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80102e0:	1c59      	adds	r1, r3, #1
 80102e2:	0093      	lsls	r3, r2, #2
 80102e4:	3360      	adds	r3, #96	; 0x60
 80102e6:	443b      	add	r3, r7
 80102e8:	f843 1c28 	str.w	r1, [r3, #-40]
	while (*p!=0) {
 80102ec:	697b      	ldr	r3, [r7, #20]
 80102ee:	781b      	ldrb	r3, [r3, #0]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d1e3      	bne.n	80102bc <core_bench_state+0x54>
	}
	ee_printf("\n");
#else
	}
#endif
	p=memblock;
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	617b      	str	r3, [r7, #20]
	while (p < (memblock+blksize)) { /* insert some corruption */
 80102f8:	e010      	b.n	801031c <core_bench_state+0xb4>
		if (*p!=',')
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	781b      	ldrb	r3, [r3, #0]
 80102fe:	2b2c      	cmp	r3, #44	; 0x2c
 8010300:	d007      	beq.n	8010312 <core_bench_state+0xaa>
			*p^=(ee_u8)seed1;
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	7819      	ldrb	r1, [r3, #0]
 8010306:	88fb      	ldrh	r3, [r7, #6]
 8010308:	b2da      	uxtb	r2, r3
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	404a      	eors	r2, r1
 801030e:	b2d2      	uxtb	r2, r2
 8010310:	701a      	strb	r2, [r3, #0]
		p+=step;
 8010312:	697a      	ldr	r2, [r7, #20]
 8010314:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 8010318:	4413      	add	r3, r2
 801031a:	617b      	str	r3, [r7, #20]
	while (p < (memblock+blksize)) { /* insert some corruption */
 801031c:	68ba      	ldr	r2, [r7, #8]
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	441a      	add	r2, r3
 8010322:	697b      	ldr	r3, [r7, #20]
 8010324:	429a      	cmp	r2, r3
 8010326:	d8e8      	bhi.n	80102fa <core_bench_state+0x92>
	}
	p=memblock;
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	617b      	str	r3, [r7, #20]
	/* run the state machine over the input again */
	while (*p!=0) {
 801032c:	e017      	b.n	801035e <core_bench_state+0xf6>
		enum CORE_STATE fstate=core_state_transition(&p,track_counts);
 801032e:	f107 0218 	add.w	r2, r7, #24
 8010332:	f107 0314 	add.w	r3, r7, #20
 8010336:	4611      	mov	r1, r2
 8010338:	4618      	mov	r0, r3
 801033a:	f000 f92b 	bl	8010594 <core_state_transition>
 801033e:	4603      	mov	r3, r0
 8010340:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		final_counts[fstate]++;
 8010344:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8010348:	0093      	lsls	r3, r2, #2
 801034a:	3360      	adds	r3, #96	; 0x60
 801034c:	443b      	add	r3, r7
 801034e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8010352:	1c59      	adds	r1, r3, #1
 8010354:	0093      	lsls	r3, r2, #2
 8010356:	3360      	adds	r3, #96	; 0x60
 8010358:	443b      	add	r3, r7
 801035a:	f843 1c28 	str.w	r1, [r3, #-40]
	while (*p!=0) {
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	781b      	ldrb	r3, [r3, #0]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d1e3      	bne.n	801032e <core_bench_state+0xc6>
	}
	ee_printf("\n");
#else
	}
#endif
	p=memblock;
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	617b      	str	r3, [r7, #20]
	while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
 801036a:	e010      	b.n	801038e <core_bench_state+0x126>
		if (*p!=',')
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	2b2c      	cmp	r3, #44	; 0x2c
 8010372:	d007      	beq.n	8010384 <core_bench_state+0x11c>
			*p^=(ee_u8)seed2;
 8010374:	697b      	ldr	r3, [r7, #20]
 8010376:	7819      	ldrb	r1, [r3, #0]
 8010378:	88bb      	ldrh	r3, [r7, #4]
 801037a:	b2da      	uxtb	r2, r3
 801037c:	697b      	ldr	r3, [r7, #20]
 801037e:	404a      	eors	r2, r1
 8010380:	b2d2      	uxtb	r2, r2
 8010382:	701a      	strb	r2, [r3, #0]
		p+=step;
 8010384:	697a      	ldr	r2, [r7, #20]
 8010386:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801038a:	4413      	add	r3, r2
 801038c:	617b      	str	r3, [r7, #20]
	while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
 801038e:	68ba      	ldr	r2, [r7, #8]
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	441a      	add	r2, r3
 8010394:	697b      	ldr	r3, [r7, #20]
 8010396:	429a      	cmp	r2, r3
 8010398:	d8e8      	bhi.n	801036c <core_bench_state+0x104>
	}
	/* end timing */
	for (i=0; i<NUM_CORE_STATES; i++) {
 801039a:	2300      	movs	r3, #0
 801039c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801039e:	e020      	b.n	80103e2 <core_bench_state+0x17a>
		crc=crcu32(final_counts[i],crc);
 80103a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103a2:	009b      	lsls	r3, r3, #2
 80103a4:	3360      	adds	r3, #96	; 0x60
 80103a6:	443b      	add	r3, r7
 80103a8:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80103ac:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80103b0:	4611      	mov	r1, r2
 80103b2:	4618      	mov	r0, r3
 80103b4:	f000 fa99 	bl	80108ea <crcu32>
 80103b8:	4603      	mov	r3, r0
 80103ba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
		crc=crcu32(track_counts[i],crc);
 80103be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103c0:	009b      	lsls	r3, r3, #2
 80103c2:	3360      	adds	r3, #96	; 0x60
 80103c4:	443b      	add	r3, r7
 80103c6:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80103ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80103ce:	4611      	mov	r1, r2
 80103d0:	4618      	mov	r0, r3
 80103d2:	f000 fa8a 	bl	80108ea <crcu32>
 80103d6:	4603      	mov	r3, r0
 80103d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	for (i=0; i<NUM_CORE_STATES; i++) {
 80103dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103de:	3301      	adds	r3, #1
 80103e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80103e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103e4:	2b07      	cmp	r3, #7
 80103e6:	d9db      	bls.n	80103a0 <core_bench_state+0x138>
	}
	return crc;
 80103e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	3760      	adds	r7, #96	; 0x60
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}

080103f4 <core_init_state>:
	Actual patterns chosen depend on the seed parameter.
	
	Note:
	The seed parameter MUST be supplied from a source that cannot be determined at compile time
*/
void core_init_state(ee_u32 size, ee_s16 seed, ee_u8 *p) {
 80103f4:	b480      	push	{r7}
 80103f6:	b089      	sub	sp, #36	; 0x24
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	60f8      	str	r0, [r7, #12]
 80103fc:	460b      	mov	r3, r1
 80103fe:	607a      	str	r2, [r7, #4]
 8010400:	817b      	strh	r3, [r7, #10]
	ee_u32 total=0,next=0,i;
 8010402:	2300      	movs	r3, #0
 8010404:	61fb      	str	r3, [r7, #28]
 8010406:	2300      	movs	r3, #0
 8010408:	61bb      	str	r3, [r7, #24]
	ee_u8 *buf=0;
 801040a:	2300      	movs	r3, #0
 801040c:	613b      	str	r3, [r7, #16]
#if CORE_DEBUG
	ee_u8 *start=p;
	ee_printf("State: %d,%d\n",size,seed);
#endif
	size--;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	3b01      	subs	r3, #1
 8010412:	60fb      	str	r3, [r7, #12]
	next=0;
 8010414:	2300      	movs	r3, #0
 8010416:	61bb      	str	r3, [r7, #24]
	while ((total+next+1)<size) {
 8010418:	e079      	b.n	801050e <core_init_state+0x11a>
		if (next>0) {
 801041a:	69bb      	ldr	r3, [r7, #24]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d01f      	beq.n	8010460 <core_init_state+0x6c>
			for(i=0;i<next;i++)
 8010420:	2300      	movs	r3, #0
 8010422:	617b      	str	r3, [r7, #20]
 8010424:	e00c      	b.n	8010440 <core_init_state+0x4c>
				*(p+total+i)=buf[i];
 8010426:	693a      	ldr	r2, [r7, #16]
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	441a      	add	r2, r3
 801042c:	69f9      	ldr	r1, [r7, #28]
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	440b      	add	r3, r1
 8010432:	6879      	ldr	r1, [r7, #4]
 8010434:	440b      	add	r3, r1
 8010436:	7812      	ldrb	r2, [r2, #0]
 8010438:	701a      	strb	r2, [r3, #0]
			for(i=0;i<next;i++)
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	3301      	adds	r3, #1
 801043e:	617b      	str	r3, [r7, #20]
 8010440:	697a      	ldr	r2, [r7, #20]
 8010442:	69bb      	ldr	r3, [r7, #24]
 8010444:	429a      	cmp	r2, r3
 8010446:	d3ee      	bcc.n	8010426 <core_init_state+0x32>
			*(p+total+i)=',';
 8010448:	69fa      	ldr	r2, [r7, #28]
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	4413      	add	r3, r2
 801044e:	687a      	ldr	r2, [r7, #4]
 8010450:	4413      	add	r3, r2
 8010452:	222c      	movs	r2, #44	; 0x2c
 8010454:	701a      	strb	r2, [r3, #0]
			total+=next+1;
 8010456:	69ba      	ldr	r2, [r7, #24]
 8010458:	69fb      	ldr	r3, [r7, #28]
 801045a:	4413      	add	r3, r2
 801045c:	3301      	adds	r3, #1
 801045e:	61fb      	str	r3, [r7, #28]
		}
		seed++;
 8010460:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010464:	b29b      	uxth	r3, r3
 8010466:	3301      	adds	r3, #1
 8010468:	b29b      	uxth	r3, r3
 801046a:	817b      	strh	r3, [r7, #10]
		switch (seed & 0x7) {
 801046c:	897b      	ldrh	r3, [r7, #10]
 801046e:	f003 0307 	and.w	r3, r3, #7
 8010472:	2b07      	cmp	r3, #7
 8010474:	d84a      	bhi.n	801050c <core_init_state+0x118>
 8010476:	a201      	add	r2, pc, #4	; (adr r2, 801047c <core_init_state+0x88>)
 8010478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801047c:	0801049d 	.word	0x0801049d
 8010480:	0801049d 	.word	0x0801049d
 8010484:	0801049d 	.word	0x0801049d
 8010488:	080104b9 	.word	0x080104b9
 801048c:	080104b9 	.word	0x080104b9
 8010490:	080104d5 	.word	0x080104d5
 8010494:	080104d5 	.word	0x080104d5
 8010498:	080104f1 	.word	0x080104f1
			case 0: /* int */
			case 1: /* int */
			case 2: /* int */
				buf=intpat[(seed>>3) & 0x3];
 801049c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80104a0:	10db      	asrs	r3, r3, #3
 80104a2:	b21b      	sxth	r3, r3
 80104a4:	b29b      	uxth	r3, r3
 80104a6:	f003 0303 	and.w	r3, r3, #3
 80104aa:	4a28      	ldr	r2, [pc, #160]	; (801054c <core_init_state+0x158>)
 80104ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104b0:	613b      	str	r3, [r7, #16]
				next=4;
 80104b2:	2304      	movs	r3, #4
 80104b4:	61bb      	str	r3, [r7, #24]
			break;
 80104b6:	e02a      	b.n	801050e <core_init_state+0x11a>
			case 3: /* float */
			case 4: /* float */
				buf=floatpat[(seed>>3) & 0x3];
 80104b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80104bc:	10db      	asrs	r3, r3, #3
 80104be:	b21b      	sxth	r3, r3
 80104c0:	b29b      	uxth	r3, r3
 80104c2:	f003 0303 	and.w	r3, r3, #3
 80104c6:	4a22      	ldr	r2, [pc, #136]	; (8010550 <core_init_state+0x15c>)
 80104c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104cc:	613b      	str	r3, [r7, #16]
				next=8;
 80104ce:	2308      	movs	r3, #8
 80104d0:	61bb      	str	r3, [r7, #24]
			break;
 80104d2:	e01c      	b.n	801050e <core_init_state+0x11a>
			case 5: /* scientific */
			case 6: /* scientific */
				buf=scipat[(seed>>3) & 0x3];
 80104d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80104d8:	10db      	asrs	r3, r3, #3
 80104da:	b21b      	sxth	r3, r3
 80104dc:	b29b      	uxth	r3, r3
 80104de:	f003 0303 	and.w	r3, r3, #3
 80104e2:	4a1c      	ldr	r2, [pc, #112]	; (8010554 <core_init_state+0x160>)
 80104e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104e8:	613b      	str	r3, [r7, #16]
				next=8;
 80104ea:	2308      	movs	r3, #8
 80104ec:	61bb      	str	r3, [r7, #24]
			break;
 80104ee:	e00e      	b.n	801050e <core_init_state+0x11a>
			case 7: /* invalid */
				buf=errpat[(seed>>3) & 0x3];
 80104f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80104f4:	10db      	asrs	r3, r3, #3
 80104f6:	b21b      	sxth	r3, r3
 80104f8:	b29b      	uxth	r3, r3
 80104fa:	f003 0303 	and.w	r3, r3, #3
 80104fe:	4a16      	ldr	r2, [pc, #88]	; (8010558 <core_init_state+0x164>)
 8010500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010504:	613b      	str	r3, [r7, #16]
				next=8;
 8010506:	2308      	movs	r3, #8
 8010508:	61bb      	str	r3, [r7, #24]
			break;
 801050a:	e000      	b.n	801050e <core_init_state+0x11a>
			default: /* Never happen, just to make some compilers happy */
			break;
 801050c:	bf00      	nop
	while ((total+next+1)<size) {
 801050e:	69fa      	ldr	r2, [r7, #28]
 8010510:	69bb      	ldr	r3, [r7, #24]
 8010512:	4413      	add	r3, r2
 8010514:	3301      	adds	r3, #1
 8010516:	68fa      	ldr	r2, [r7, #12]
 8010518:	429a      	cmp	r2, r3
 801051a:	f63f af7e 	bhi.w	801041a <core_init_state+0x26>
		}
	}
	size++;
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	3301      	adds	r3, #1
 8010522:	60fb      	str	r3, [r7, #12]
	while (total<size) { /* fill the rest with 0 */
 8010524:	e007      	b.n	8010536 <core_init_state+0x142>
		*(p+total)=0;
 8010526:	687a      	ldr	r2, [r7, #4]
 8010528:	69fb      	ldr	r3, [r7, #28]
 801052a:	4413      	add	r3, r2
 801052c:	2200      	movs	r2, #0
 801052e:	701a      	strb	r2, [r3, #0]
		total++;
 8010530:	69fb      	ldr	r3, [r7, #28]
 8010532:	3301      	adds	r3, #1
 8010534:	61fb      	str	r3, [r7, #28]
	while (total<size) { /* fill the rest with 0 */
 8010536:	69fa      	ldr	r2, [r7, #28]
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	429a      	cmp	r2, r3
 801053c:	d3f3      	bcc.n	8010526 <core_init_state+0x132>
	}
#if CORE_DEBUG
	ee_printf("State Input: %s\n",start);
#endif
}
 801053e:	bf00      	nop
 8010540:	bf00      	nop
 8010542:	3724      	adds	r7, #36	; 0x24
 8010544:	46bd      	mov	sp, r7
 8010546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054a:	4770      	bx	lr
 801054c:	240000ac 	.word	0x240000ac
 8010550:	240000bc 	.word	0x240000bc
 8010554:	240000cc 	.word	0x240000cc
 8010558:	240000dc 	.word	0x240000dc

0801055c <ee_isdigit>:

static ee_u8 ee_isdigit(ee_u8 c) {
 801055c:	b480      	push	{r7}
 801055e:	b085      	sub	sp, #20
 8010560:	af00      	add	r7, sp, #0
 8010562:	4603      	mov	r3, r0
 8010564:	71fb      	strb	r3, [r7, #7]
	ee_u8 retval;
	retval = ((c>='0') & (c<='9')) ? 1 : 0;
 8010566:	79fb      	ldrb	r3, [r7, #7]
 8010568:	2b2f      	cmp	r3, #47	; 0x2f
 801056a:	bf8c      	ite	hi
 801056c:	2301      	movhi	r3, #1
 801056e:	2300      	movls	r3, #0
 8010570:	b2da      	uxtb	r2, r3
 8010572:	79fb      	ldrb	r3, [r7, #7]
 8010574:	2b39      	cmp	r3, #57	; 0x39
 8010576:	bf94      	ite	ls
 8010578:	2301      	movls	r3, #1
 801057a:	2300      	movhi	r3, #0
 801057c:	b2db      	uxtb	r3, r3
 801057e:	4013      	ands	r3, r2
 8010580:	b2db      	uxtb	r3, r3
 8010582:	73fb      	strb	r3, [r7, #15]
	return retval;
 8010584:	7bfb      	ldrb	r3, [r7, #15]
}
 8010586:	4618      	mov	r0, r3
 8010588:	3714      	adds	r7, #20
 801058a:	46bd      	mov	sp, r7
 801058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010590:	4770      	bx	lr
	...

08010594 <core_state_transition>:
	2 - a valid number has been detected.
	
	The input pointer is updated to point to the end of the token, and the end state is returned (either specific format determined or invalid).
*/

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
 8010594:	b580      	push	{r7, lr}
 8010596:	b084      	sub	sp, #16
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	6039      	str	r1, [r7, #0]
	ee_u8 *str=*instr;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	60fb      	str	r3, [r7, #12]
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
 80105a4:	2300      	movs	r3, #0
 80105a6:	72fb      	strb	r3, [r7, #11]
	for( ; *str && state != CORE_INVALID; str++ ) {
 80105a8:	e0e5      	b.n	8010776 <core_state_transition+0x1e2>
		NEXT_SYMBOL = *str;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	72bb      	strb	r3, [r7, #10]
		if (NEXT_SYMBOL==',') /* end of this input */ {
 80105b0:	7abb      	ldrb	r3, [r7, #10]
 80105b2:	2b2c      	cmp	r3, #44	; 0x2c
 80105b4:	d103      	bne.n	80105be <core_state_transition+0x2a>
			str++;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	3301      	adds	r3, #1
 80105ba:	60fb      	str	r3, [r7, #12]
			break;
 80105bc:	e0e3      	b.n	8010786 <core_state_transition+0x1f2>
		}
		switch(state) {
 80105be:	7afb      	ldrb	r3, [r7, #11]
 80105c0:	2b07      	cmp	r3, #7
 80105c2:	f200 80ce 	bhi.w	8010762 <core_state_transition+0x1ce>
 80105c6:	a201      	add	r2, pc, #4	; (adr r2, 80105cc <core_state_transition+0x38>)
 80105c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105cc:	080105ed 	.word	0x080105ed
 80105d0:	08010763 	.word	0x08010763
 80105d4:	08010639 	.word	0x08010639
 80105d8:	080106eb 	.word	0x080106eb
 80105dc:	0801067d 	.word	0x0801067d
 80105e0:	080106b1 	.word	0x080106b1
 80105e4:	08010717 	.word	0x08010717
 80105e8:	08010745 	.word	0x08010745
		case CORE_START:
			if(ee_isdigit(NEXT_SYMBOL)) {
 80105ec:	7abb      	ldrb	r3, [r7, #10]
 80105ee:	4618      	mov	r0, r3
 80105f0:	f7ff ffb4 	bl	801055c <ee_isdigit>
 80105f4:	4603      	mov	r3, r0
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d002      	beq.n	8010600 <core_state_transition+0x6c>
				state = CORE_INT;
 80105fa:	2304      	movs	r3, #4
 80105fc:	72fb      	strb	r3, [r7, #11]
 80105fe:	e015      	b.n	801062c <core_state_transition+0x98>
			}
			else if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
 8010600:	7abb      	ldrb	r3, [r7, #10]
 8010602:	2b2b      	cmp	r3, #43	; 0x2b
 8010604:	d002      	beq.n	801060c <core_state_transition+0x78>
 8010606:	7abb      	ldrb	r3, [r7, #10]
 8010608:	2b2d      	cmp	r3, #45	; 0x2d
 801060a:	d102      	bne.n	8010612 <core_state_transition+0x7e>
				state = CORE_S1;
 801060c:	2302      	movs	r3, #2
 801060e:	72fb      	strb	r3, [r7, #11]
 8010610:	e00c      	b.n	801062c <core_state_transition+0x98>
			}
			else if( NEXT_SYMBOL == '.' ) {
 8010612:	7abb      	ldrb	r3, [r7, #10]
 8010614:	2b2e      	cmp	r3, #46	; 0x2e
 8010616:	d102      	bne.n	801061e <core_state_transition+0x8a>
				state = CORE_FLOAT;
 8010618:	2305      	movs	r3, #5
 801061a:	72fb      	strb	r3, [r7, #11]
 801061c:	e006      	b.n	801062c <core_state_transition+0x98>
			}
			else {
				state = CORE_INVALID;
 801061e:	2301      	movs	r3, #1
 8010620:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_INVALID]++;
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	3304      	adds	r3, #4
 8010626:	681a      	ldr	r2, [r3, #0]
 8010628:	3201      	adds	r2, #1
 801062a:	601a      	str	r2, [r3, #0]
			}
			transition_count[CORE_START]++;
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	1c5a      	adds	r2, r3, #1
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	601a      	str	r2, [r3, #0]
			break;
 8010636:	e09b      	b.n	8010770 <core_state_transition+0x1dc>
		case CORE_S1:
			if(ee_isdigit(NEXT_SYMBOL)) {
 8010638:	7abb      	ldrb	r3, [r7, #10]
 801063a:	4618      	mov	r0, r3
 801063c:	f7ff ff8e 	bl	801055c <ee_isdigit>
 8010640:	4603      	mov	r3, r0
 8010642:	2b00      	cmp	r3, #0
 8010644:	d007      	beq.n	8010656 <core_state_transition+0xc2>
				state = CORE_INT;
 8010646:	2304      	movs	r3, #4
 8010648:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_S1]++;
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	3308      	adds	r3, #8
 801064e:	681a      	ldr	r2, [r3, #0]
 8010650:	3201      	adds	r2, #1
 8010652:	601a      	str	r2, [r3, #0]
			}
			else {
				state = CORE_INVALID;
				transition_count[CORE_S1]++;
			}
			break;
 8010654:	e08c      	b.n	8010770 <core_state_transition+0x1dc>
			else if( NEXT_SYMBOL == '.' ) {
 8010656:	7abb      	ldrb	r3, [r7, #10]
 8010658:	2b2e      	cmp	r3, #46	; 0x2e
 801065a:	d107      	bne.n	801066c <core_state_transition+0xd8>
				state = CORE_FLOAT;
 801065c:	2305      	movs	r3, #5
 801065e:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_S1]++;
 8010660:	683b      	ldr	r3, [r7, #0]
 8010662:	3308      	adds	r3, #8
 8010664:	681a      	ldr	r2, [r3, #0]
 8010666:	3201      	adds	r2, #1
 8010668:	601a      	str	r2, [r3, #0]
			break;
 801066a:	e081      	b.n	8010770 <core_state_transition+0x1dc>
				state = CORE_INVALID;
 801066c:	2301      	movs	r3, #1
 801066e:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_S1]++;
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	3308      	adds	r3, #8
 8010674:	681a      	ldr	r2, [r3, #0]
 8010676:	3201      	adds	r2, #1
 8010678:	601a      	str	r2, [r3, #0]
			break;
 801067a:	e079      	b.n	8010770 <core_state_transition+0x1dc>
		case CORE_INT:
			if( NEXT_SYMBOL == '.' ) {
 801067c:	7abb      	ldrb	r3, [r7, #10]
 801067e:	2b2e      	cmp	r3, #46	; 0x2e
 8010680:	d107      	bne.n	8010692 <core_state_transition+0xfe>
				state = CORE_FLOAT;
 8010682:	2305      	movs	r3, #5
 8010684:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_INT]++;
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	3310      	adds	r3, #16
 801068a:	681a      	ldr	r2, [r3, #0]
 801068c:	3201      	adds	r2, #1
 801068e:	601a      	str	r2, [r3, #0]
			}
			else if(!ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_INVALID;
				transition_count[CORE_INT]++;
			}
			break;
 8010690:	e069      	b.n	8010766 <core_state_transition+0x1d2>
			else if(!ee_isdigit(NEXT_SYMBOL)) {
 8010692:	7abb      	ldrb	r3, [r7, #10]
 8010694:	4618      	mov	r0, r3
 8010696:	f7ff ff61 	bl	801055c <ee_isdigit>
 801069a:	4603      	mov	r3, r0
 801069c:	2b00      	cmp	r3, #0
 801069e:	d162      	bne.n	8010766 <core_state_transition+0x1d2>
				state = CORE_INVALID;
 80106a0:	2301      	movs	r3, #1
 80106a2:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_INT]++;
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	3310      	adds	r3, #16
 80106a8:	681a      	ldr	r2, [r3, #0]
 80106aa:	3201      	adds	r2, #1
 80106ac:	601a      	str	r2, [r3, #0]
			break;
 80106ae:	e05a      	b.n	8010766 <core_state_transition+0x1d2>
		case CORE_FLOAT:
			if( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' ) {
 80106b0:	7abb      	ldrb	r3, [r7, #10]
 80106b2:	2b45      	cmp	r3, #69	; 0x45
 80106b4:	d002      	beq.n	80106bc <core_state_transition+0x128>
 80106b6:	7abb      	ldrb	r3, [r7, #10]
 80106b8:	2b65      	cmp	r3, #101	; 0x65
 80106ba:	d107      	bne.n	80106cc <core_state_transition+0x138>
				state = CORE_S2;
 80106bc:	2303      	movs	r3, #3
 80106be:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_FLOAT]++;
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	3314      	adds	r3, #20
 80106c4:	681a      	ldr	r2, [r3, #0]
 80106c6:	3201      	adds	r2, #1
 80106c8:	601a      	str	r2, [r3, #0]
			}
			else if(!ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_INVALID;
				transition_count[CORE_FLOAT]++;
			}
			break;
 80106ca:	e04e      	b.n	801076a <core_state_transition+0x1d6>
			else if(!ee_isdigit(NEXT_SYMBOL)) {
 80106cc:	7abb      	ldrb	r3, [r7, #10]
 80106ce:	4618      	mov	r0, r3
 80106d0:	f7ff ff44 	bl	801055c <ee_isdigit>
 80106d4:	4603      	mov	r3, r0
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d147      	bne.n	801076a <core_state_transition+0x1d6>
				state = CORE_INVALID;
 80106da:	2301      	movs	r3, #1
 80106dc:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_FLOAT]++;
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	3314      	adds	r3, #20
 80106e2:	681a      	ldr	r2, [r3, #0]
 80106e4:	3201      	adds	r2, #1
 80106e6:	601a      	str	r2, [r3, #0]
			break;
 80106e8:	e03f      	b.n	801076a <core_state_transition+0x1d6>
		case CORE_S2:
			if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
 80106ea:	7abb      	ldrb	r3, [r7, #10]
 80106ec:	2b2b      	cmp	r3, #43	; 0x2b
 80106ee:	d002      	beq.n	80106f6 <core_state_transition+0x162>
 80106f0:	7abb      	ldrb	r3, [r7, #10]
 80106f2:	2b2d      	cmp	r3, #45	; 0x2d
 80106f4:	d107      	bne.n	8010706 <core_state_transition+0x172>
				state = CORE_EXPONENT;
 80106f6:	2306      	movs	r3, #6
 80106f8:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_S2]++;
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	330c      	adds	r3, #12
 80106fe:	681a      	ldr	r2, [r3, #0]
 8010700:	3201      	adds	r2, #1
 8010702:	601a      	str	r2, [r3, #0]
			}
			else {
				state = CORE_INVALID;
				transition_count[CORE_S2]++;
			}
			break;
 8010704:	e034      	b.n	8010770 <core_state_transition+0x1dc>
				state = CORE_INVALID;
 8010706:	2301      	movs	r3, #1
 8010708:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_S2]++;
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	330c      	adds	r3, #12
 801070e:	681a      	ldr	r2, [r3, #0]
 8010710:	3201      	adds	r2, #1
 8010712:	601a      	str	r2, [r3, #0]
			break;
 8010714:	e02c      	b.n	8010770 <core_state_transition+0x1dc>
		case CORE_EXPONENT:
			if(ee_isdigit(NEXT_SYMBOL)) {
 8010716:	7abb      	ldrb	r3, [r7, #10]
 8010718:	4618      	mov	r0, r3
 801071a:	f7ff ff1f 	bl	801055c <ee_isdigit>
 801071e:	4603      	mov	r3, r0
 8010720:	2b00      	cmp	r3, #0
 8010722:	d007      	beq.n	8010734 <core_state_transition+0x1a0>
				state = CORE_SCIENTIFIC;
 8010724:	2307      	movs	r3, #7
 8010726:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_EXPONENT]++;
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	3318      	adds	r3, #24
 801072c:	681a      	ldr	r2, [r3, #0]
 801072e:	3201      	adds	r2, #1
 8010730:	601a      	str	r2, [r3, #0]
			}
			else {
				state = CORE_INVALID;
				transition_count[CORE_EXPONENT]++;
			}
			break;
 8010732:	e01d      	b.n	8010770 <core_state_transition+0x1dc>
				state = CORE_INVALID;
 8010734:	2301      	movs	r3, #1
 8010736:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_EXPONENT]++;
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	3318      	adds	r3, #24
 801073c:	681a      	ldr	r2, [r3, #0]
 801073e:	3201      	adds	r2, #1
 8010740:	601a      	str	r2, [r3, #0]
			break;
 8010742:	e015      	b.n	8010770 <core_state_transition+0x1dc>
		case CORE_SCIENTIFIC:
			if(!ee_isdigit(NEXT_SYMBOL)) {
 8010744:	7abb      	ldrb	r3, [r7, #10]
 8010746:	4618      	mov	r0, r3
 8010748:	f7ff ff08 	bl	801055c <ee_isdigit>
 801074c:	4603      	mov	r3, r0
 801074e:	2b00      	cmp	r3, #0
 8010750:	d10d      	bne.n	801076e <core_state_transition+0x1da>
				state = CORE_INVALID;
 8010752:	2301      	movs	r3, #1
 8010754:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_INVALID]++;
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	3304      	adds	r3, #4
 801075a:	681a      	ldr	r2, [r3, #0]
 801075c:	3201      	adds	r2, #1
 801075e:	601a      	str	r2, [r3, #0]
			}
			break;
 8010760:	e005      	b.n	801076e <core_state_transition+0x1da>
		default:
			break;
 8010762:	bf00      	nop
 8010764:	e004      	b.n	8010770 <core_state_transition+0x1dc>
			break;
 8010766:	bf00      	nop
 8010768:	e002      	b.n	8010770 <core_state_transition+0x1dc>
			break;
 801076a:	bf00      	nop
 801076c:	e000      	b.n	8010770 <core_state_transition+0x1dc>
			break;
 801076e:	bf00      	nop
	for( ; *str && state != CORE_INVALID; str++ ) {
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	3301      	adds	r3, #1
 8010774:	60fb      	str	r3, [r7, #12]
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	781b      	ldrb	r3, [r3, #0]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d003      	beq.n	8010786 <core_state_transition+0x1f2>
 801077e:	7afb      	ldrb	r3, [r7, #11]
 8010780:	2b01      	cmp	r3, #1
 8010782:	f47f af12 	bne.w	80105aa <core_state_transition+0x16>
		}
	}
	*instr=str;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	68fa      	ldr	r2, [r7, #12]
 801078a:	601a      	str	r2, [r3, #0]
	return state;
 801078c:	7afb      	ldrb	r3, [r7, #11]
}
 801078e:	4618      	mov	r0, r3
 8010790:	3710      	adds	r7, #16
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop

08010798 <get_seed_32>:
	extern volatile ee_s32 seed1_volatile;
	extern volatile ee_s32 seed2_volatile;
	extern volatile ee_s32 seed3_volatile;
	extern volatile ee_s32 seed4_volatile;
	extern volatile ee_s32 seed5_volatile;
	ee_s32 get_seed_32(int i) {
 8010798:	b480      	push	{r7}
 801079a:	b085      	sub	sp, #20
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
		ee_s32 retval;
		switch (i) {
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	3b01      	subs	r3, #1
 80107a4:	2b04      	cmp	r3, #4
 80107a6:	d821      	bhi.n	80107ec <get_seed_32+0x54>
 80107a8:	a201      	add	r2, pc, #4	; (adr r2, 80107b0 <get_seed_32+0x18>)
 80107aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107ae:	bf00      	nop
 80107b0:	080107c5 	.word	0x080107c5
 80107b4:	080107cd 	.word	0x080107cd
 80107b8:	080107d5 	.word	0x080107d5
 80107bc:	080107dd 	.word	0x080107dd
 80107c0:	080107e5 	.word	0x080107e5
			case 1:
				retval=seed1_volatile;
 80107c4:	4b0e      	ldr	r3, [pc, #56]	; (8010800 <get_seed_32+0x68>)
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	60fb      	str	r3, [r7, #12]
				break;
 80107ca:	e012      	b.n	80107f2 <get_seed_32+0x5a>
			case 2:
				retval=seed2_volatile;
 80107cc:	4b0d      	ldr	r3, [pc, #52]	; (8010804 <get_seed_32+0x6c>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	60fb      	str	r3, [r7, #12]
				break;
 80107d2:	e00e      	b.n	80107f2 <get_seed_32+0x5a>
			case 3:
				retval=seed3_volatile;
 80107d4:	4b0c      	ldr	r3, [pc, #48]	; (8010808 <get_seed_32+0x70>)
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	60fb      	str	r3, [r7, #12]
				break;
 80107da:	e00a      	b.n	80107f2 <get_seed_32+0x5a>
			case 4:
				retval=seed4_volatile;
 80107dc:	4b0b      	ldr	r3, [pc, #44]	; (801080c <get_seed_32+0x74>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	60fb      	str	r3, [r7, #12]
				break;
 80107e2:	e006      	b.n	80107f2 <get_seed_32+0x5a>
			case 5:
				retval=seed5_volatile;
 80107e4:	4b0a      	ldr	r3, [pc, #40]	; (8010810 <get_seed_32+0x78>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	60fb      	str	r3, [r7, #12]
				break;
 80107ea:	e002      	b.n	80107f2 <get_seed_32+0x5a>
			default:
				retval=0;
 80107ec:	2300      	movs	r3, #0
 80107ee:	60fb      	str	r3, [r7, #12]
				break;
 80107f0:	bf00      	nop
		}
		return retval;
 80107f2:	68fb      	ldr	r3, [r7, #12]
	}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3714      	adds	r7, #20
 80107f8:	46bd      	mov	sp, r7
 80107fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fe:	4770      	bx	lr
 8010800:	24010b50 	.word	0x24010b50
 8010804:	24010b54 	.word	0x24010b54
 8010808:	240000a0 	.word	0x240000a0
 801080c:	240000a4 	.word	0x240000a4
 8010810:	24010b58 	.word	0x24010b58

08010814 <crcu8>:
/* Function: crc*
	Service functions to calculate 16b CRC code.

*/
ee_u16 crcu8(ee_u8 data, ee_u16 crc )
{
 8010814:	b480      	push	{r7}
 8010816:	b085      	sub	sp, #20
 8010818:	af00      	add	r7, sp, #0
 801081a:	4603      	mov	r3, r0
 801081c:	460a      	mov	r2, r1
 801081e:	71fb      	strb	r3, [r7, #7]
 8010820:	4613      	mov	r3, r2
 8010822:	80bb      	strh	r3, [r7, #4]
	ee_u8 i=0,x16=0,carry=0;
 8010824:	2300      	movs	r3, #0
 8010826:	73fb      	strb	r3, [r7, #15]
 8010828:	2300      	movs	r3, #0
 801082a:	737b      	strb	r3, [r7, #13]
 801082c:	2300      	movs	r3, #0
 801082e:	73bb      	strb	r3, [r7, #14]

	for (i = 0; i < 8; i++)
 8010830:	2300      	movs	r3, #0
 8010832:	73fb      	strb	r3, [r7, #15]
 8010834:	e02e      	b.n	8010894 <crcu8+0x80>
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8010836:	88bb      	ldrh	r3, [r7, #4]
 8010838:	b25a      	sxtb	r2, r3
 801083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801083e:	4053      	eors	r3, r2
 8010840:	b25b      	sxtb	r3, r3
 8010842:	b2db      	uxtb	r3, r3
 8010844:	f003 0301 	and.w	r3, r3, #1
 8010848:	737b      	strb	r3, [r7, #13]
		data >>= 1;
 801084a:	79fb      	ldrb	r3, [r7, #7]
 801084c:	085b      	lsrs	r3, r3, #1
 801084e:	71fb      	strb	r3, [r7, #7]

		if (x16 == 1)
 8010850:	7b7b      	ldrb	r3, [r7, #13]
 8010852:	2b01      	cmp	r3, #1
 8010854:	d108      	bne.n	8010868 <crcu8+0x54>
		{
		   crc ^= 0x4002;
 8010856:	88bb      	ldrh	r3, [r7, #4]
 8010858:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 801085c:	f083 0302 	eor.w	r3, r3, #2
 8010860:	80bb      	strh	r3, [r7, #4]
		   carry = 1;
 8010862:	2301      	movs	r3, #1
 8010864:	73bb      	strb	r3, [r7, #14]
 8010866:	e001      	b.n	801086c <crcu8+0x58>
		}
		else 
			carry = 0;
 8010868:	2300      	movs	r3, #0
 801086a:	73bb      	strb	r3, [r7, #14]
		crc >>= 1;
 801086c:	88bb      	ldrh	r3, [r7, #4]
 801086e:	085b      	lsrs	r3, r3, #1
 8010870:	80bb      	strh	r3, [r7, #4]
		if (carry)
 8010872:	7bbb      	ldrb	r3, [r7, #14]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d006      	beq.n	8010886 <crcu8+0x72>
		   crc |= 0x8000;
 8010878:	88bb      	ldrh	r3, [r7, #4]
 801087a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801087e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010882:	80bb      	strh	r3, [r7, #4]
 8010884:	e003      	b.n	801088e <crcu8+0x7a>
		else
		   crc &= 0x7fff;
 8010886:	88bb      	ldrh	r3, [r7, #4]
 8010888:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801088c:	80bb      	strh	r3, [r7, #4]
	for (i = 0; i < 8; i++)
 801088e:	7bfb      	ldrb	r3, [r7, #15]
 8010890:	3301      	adds	r3, #1
 8010892:	73fb      	strb	r3, [r7, #15]
 8010894:	7bfb      	ldrb	r3, [r7, #15]
 8010896:	2b07      	cmp	r3, #7
 8010898:	d9cd      	bls.n	8010836 <crcu8+0x22>
    }
	return crc;
 801089a:	88bb      	ldrh	r3, [r7, #4]
} 
 801089c:	4618      	mov	r0, r3
 801089e:	3714      	adds	r7, #20
 80108a0:	46bd      	mov	sp, r7
 80108a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a6:	4770      	bx	lr

080108a8 <crcu16>:
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b082      	sub	sp, #8
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	4603      	mov	r3, r0
 80108b0:	460a      	mov	r2, r1
 80108b2:	80fb      	strh	r3, [r7, #6]
 80108b4:	4613      	mov	r3, r2
 80108b6:	80bb      	strh	r3, [r7, #4]
	crc=crcu8( (ee_u8) (newval)				,crc);
 80108b8:	88fb      	ldrh	r3, [r7, #6]
 80108ba:	b2db      	uxtb	r3, r3
 80108bc:	88ba      	ldrh	r2, [r7, #4]
 80108be:	4611      	mov	r1, r2
 80108c0:	4618      	mov	r0, r3
 80108c2:	f7ff ffa7 	bl	8010814 <crcu8>
 80108c6:	4603      	mov	r3, r0
 80108c8:	80bb      	strh	r3, [r7, #4]
	crc=crcu8( (ee_u8) ((newval)>>8)	,crc);
 80108ca:	88fb      	ldrh	r3, [r7, #6]
 80108cc:	0a1b      	lsrs	r3, r3, #8
 80108ce:	b29b      	uxth	r3, r3
 80108d0:	b2db      	uxtb	r3, r3
 80108d2:	88ba      	ldrh	r2, [r7, #4]
 80108d4:	4611      	mov	r1, r2
 80108d6:	4618      	mov	r0, r3
 80108d8:	f7ff ff9c 	bl	8010814 <crcu8>
 80108dc:	4603      	mov	r3, r0
 80108de:	80bb      	strh	r3, [r7, #4]
	return crc;
 80108e0:	88bb      	ldrh	r3, [r7, #4]
}
 80108e2:	4618      	mov	r0, r3
 80108e4:	3708      	adds	r7, #8
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}

080108ea <crcu32>:
ee_u16 crcu32(ee_u32 newval, ee_u16 crc) {
 80108ea:	b580      	push	{r7, lr}
 80108ec:	b082      	sub	sp, #8
 80108ee:	af00      	add	r7, sp, #0
 80108f0:	6078      	str	r0, [r7, #4]
 80108f2:	460b      	mov	r3, r1
 80108f4:	807b      	strh	r3, [r7, #2]
	crc=crc16((ee_s16) newval		,crc);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	b21b      	sxth	r3, r3
 80108fa:	887a      	ldrh	r2, [r7, #2]
 80108fc:	4611      	mov	r1, r2
 80108fe:	4618      	mov	r0, r3
 8010900:	f000 f811 	bl	8010926 <crc16>
 8010904:	4603      	mov	r3, r0
 8010906:	807b      	strh	r3, [r7, #2]
	crc=crc16((ee_s16) (newval>>16)	,crc);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	0c1b      	lsrs	r3, r3, #16
 801090c:	b21b      	sxth	r3, r3
 801090e:	887a      	ldrh	r2, [r7, #2]
 8010910:	4611      	mov	r1, r2
 8010912:	4618      	mov	r0, r3
 8010914:	f000 f807 	bl	8010926 <crc16>
 8010918:	4603      	mov	r3, r0
 801091a:	807b      	strh	r3, [r7, #2]
	return crc;
 801091c:	887b      	ldrh	r3, [r7, #2]
}
 801091e:	4618      	mov	r0, r3
 8010920:	3708      	adds	r7, #8
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}

08010926 <crc16>:
ee_u16 crc16(ee_s16 newval, ee_u16 crc) {
 8010926:	b580      	push	{r7, lr}
 8010928:	b082      	sub	sp, #8
 801092a:	af00      	add	r7, sp, #0
 801092c:	4603      	mov	r3, r0
 801092e:	460a      	mov	r2, r1
 8010930:	80fb      	strh	r3, [r7, #6]
 8010932:	4613      	mov	r3, r2
 8010934:	80bb      	strh	r3, [r7, #4]
	return crcu16((ee_u16)newval, crc);
 8010936:	88fb      	ldrh	r3, [r7, #6]
 8010938:	88ba      	ldrh	r2, [r7, #4]
 801093a:	4611      	mov	r1, r2
 801093c:	4618      	mov	r0, r3
 801093e:	f7ff ffb3 	bl	80108a8 <crcu16>
 8010942:	4603      	mov	r3, r0
}
 8010944:	4618      	mov	r0, r3
 8010946:	3708      	adds	r7, #8
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}

0801094c <check_data_types>:

ee_u8 check_data_types() {
 801094c:	b580      	push	{r7, lr}
 801094e:	b082      	sub	sp, #8
 8010950:	af00      	add	r7, sp, #0
	ee_u8 retval=0;
 8010952:	2300      	movs	r3, #0
 8010954:	71fb      	strb	r3, [r7, #7]
	}
	if (sizeof(ee_ptr_int) != sizeof(int *)) {
		ee_printf("ERROR: ee_ptr_int is not a datatype that holds an int pointer!\n");
		retval++;
	}
	if (retval>0) {
 8010956:	79fb      	ldrb	r3, [r7, #7]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d002      	beq.n	8010962 <check_data_types+0x16>
		ee_printf("ERROR: Please modify the datatypes in core_portme.h!\n");
 801095c:	4803      	ldr	r0, [pc, #12]	; (801096c <check_data_types+0x20>)
 801095e:	f002 fbcd 	bl	80130fc <puts>
	}
	return retval;
 8010962:	79fb      	ldrb	r3, [r7, #7]
}
 8010964:	4618      	mov	r0, r3
 8010966:	3708      	adds	r7, #8
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}
 801096c:	08015818 	.word	0x08015818

08010970 <WIZCHIP_WRITE>:

#define _W6100_SPI_OP_          _WIZCHIP_SPI_VDM_OP_

//////////////////////////////////////////////////
void WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b084      	sub	sp, #16
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
 8010978:	460b      	mov	r3, r1
 801097a:	70fb      	strb	r3, [r7, #3]
   uint8_t tAD[4];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	0c1b      	lsrs	r3, r3, #16
 8010980:	b2db      	uxtb	r3, r3
 8010982:	733b      	strb	r3, [r7, #12]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	0a1b      	lsrs	r3, r3, #8
 8010988:	b2db      	uxtb	r3, r3
 801098a:	737b      	strb	r3, [r7, #13]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	b2db      	uxtb	r3, r3
 8010990:	73bb      	strb	r3, [r7, #14]
   tAD[3] = wb;
 8010992:	78fb      	ldrb	r3, [r7, #3]
 8010994:	73fb      	strb	r3, [r7, #15]

   WIZCHIP_CRITICAL_ENTER();
 8010996:	4b0e      	ldr	r3, [pc, #56]	; (80109d0 <WIZCHIP_WRITE+0x60>)
 8010998:	689b      	ldr	r3, [r3, #8]
 801099a:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 801099c:	4b0c      	ldr	r3, [pc, #48]	; (80109d0 <WIZCHIP_WRITE+0x60>)
 801099e:	691b      	ldr	r3, [r3, #16]
 80109a0:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_WRITE_ | _W6100_SPI_OP_);
 80109a2:	7bbb      	ldrb	r3, [r7, #14]
 80109a4:	f043 0304 	orr.w	r3, r3, #4
 80109a8:	b2db      	uxtb	r3, r3
 80109aa:	73bb      	strb	r3, [r7, #14]
   WIZCHIP.IF.SPI._write_byte_buf(tAD, 4);
 80109ac:	4b08      	ldr	r3, [pc, #32]	; (80109d0 <WIZCHIP_WRITE+0x60>)
 80109ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109b0:	f107 020c 	add.w	r2, r7, #12
 80109b4:	2104      	movs	r1, #4
 80109b6:	4610      	mov	r0, r2
 80109b8:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0, tAD, 4, 1);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 80109ba:	4b05      	ldr	r3, [pc, #20]	; (80109d0 <WIZCHIP_WRITE+0x60>)
 80109bc:	695b      	ldr	r3, [r3, #20]
 80109be:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80109c0:	4b03      	ldr	r3, [pc, #12]	; (80109d0 <WIZCHIP_WRITE+0x60>)
 80109c2:	68db      	ldr	r3, [r3, #12]
 80109c4:	4798      	blx	r3
}
 80109c6:	bf00      	nop
 80109c8:	3710      	adds	r7, #16
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}
 80109ce:	bf00      	nop
 80109d0:	240000f0 	.word	0x240000f0

080109d4 <WIZCHIP_READ>:

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b084      	sub	sp, #16
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	0c1b      	lsrs	r3, r3, #16
 80109e0:	b2db      	uxtb	r3, r3
 80109e2:	733b      	strb	r3, [r7, #12]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	0a1b      	lsrs	r3, r3, #8
 80109e8:	b2db      	uxtb	r3, r3
 80109ea:	737b      	strb	r3, [r7, #13]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	b2db      	uxtb	r3, r3
 80109f0:	73bb      	strb	r3, [r7, #14]

   WIZCHIP_CRITICAL_ENTER();
 80109f2:	4b0f      	ldr	r3, [pc, #60]	; (8010a30 <WIZCHIP_READ+0x5c>)
 80109f4:	689b      	ldr	r3, [r3, #8]
 80109f6:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 80109f8:	4b0d      	ldr	r3, [pc, #52]	; (8010a30 <WIZCHIP_READ+0x5c>)
 80109fa:	691b      	ldr	r3, [r3, #16]
 80109fc:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ ==  _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_READ_ | _W6100_SPI_OP_);
 80109fe:	7bbb      	ldrb	r3, [r7, #14]
 8010a00:	73bb      	strb	r3, [r7, #14]
   WIZCHIP.IF.SPI._write_byte_buf(tAD, 3);
 8010a02:	4b0b      	ldr	r3, [pc, #44]	; (8010a30 <WIZCHIP_READ+0x5c>)
 8010a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a06:	f107 020c 	add.w	r2, r7, #12
 8010a0a:	2103      	movs	r1, #3
 8010a0c:	4610      	mov	r0, r2
 8010a0e:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte();
 8010a10:	4b07      	ldr	r3, [pc, #28]	; (8010a30 <WIZCHIP_READ+0x5c>)
 8010a12:	699b      	ldr	r3, [r3, #24]
 8010a14:	4798      	blx	r3
 8010a16:	4603      	mov	r3, r0
 8010a18:	73fb      	strb	r3, [r7, #15]
   ret = WIZCHIP.IF.BUS._read_data(IDM_DR);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!"   
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 8010a1a:	4b05      	ldr	r3, [pc, #20]	; (8010a30 <WIZCHIP_READ+0x5c>)
 8010a1c:	695b      	ldr	r3, [r3, #20]
 8010a1e:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8010a20:	4b03      	ldr	r3, [pc, #12]	; (8010a30 <WIZCHIP_READ+0x5c>)
 8010a22:	68db      	ldr	r3, [r3, #12]
 8010a24:	4798      	blx	r3
   return ret;
 8010a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3710      	adds	r7, #16
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}
 8010a30:	240000f0 	.word	0x240000f0

08010a34 <WIZCHIP_WRITE_BUF>:

void WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, datasize_t len)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b086      	sub	sp, #24
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	60f8      	str	r0, [r7, #12]
 8010a3c:	60b9      	str	r1, [r7, #8]
 8010a3e:	4613      	mov	r3, r2
 8010a40:	80fb      	strh	r3, [r7, #6]
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	0c1b      	lsrs	r3, r3, #16
 8010a46:	b2db      	uxtb	r3, r3
 8010a48:	753b      	strb	r3, [r7, #20]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	0a1b      	lsrs	r3, r3, #8
 8010a4e:	b2db      	uxtb	r3, r3
 8010a50:	757b      	strb	r3, [r7, #21]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	b2db      	uxtb	r3, r3
 8010a56:	75bb      	strb	r3, [r7, #22]


   WIZCHIP_CRITICAL_ENTER();
 8010a58:	4b11      	ldr	r3, [pc, #68]	; (8010aa0 <WIZCHIP_WRITE_BUF+0x6c>)
 8010a5a:	689b      	ldr	r3, [r3, #8]
 8010a5c:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 8010a5e:	4b10      	ldr	r3, [pc, #64]	; (8010aa0 <WIZCHIP_WRITE_BUF+0x6c>)
 8010a60:	691b      	ldr	r3, [r3, #16]
 8010a62:	4798      	blx	r3

#if((_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_WRITE_ | _W6100_SPI_OP_);
 8010a64:	7dbb      	ldrb	r3, [r7, #22]
 8010a66:	f043 0304 	orr.w	r3, r3, #4
 8010a6a:	b2db      	uxtb	r3, r3
 8010a6c:	75bb      	strb	r3, [r7, #22]

   WIZCHIP.IF.SPI._write_byte_buf(tAD, 3);
 8010a6e:	4b0c      	ldr	r3, [pc, #48]	; (8010aa0 <WIZCHIP_WRITE_BUF+0x6c>)
 8010a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a72:	f107 0214 	add.w	r2, r7, #20
 8010a76:	2103      	movs	r1, #3
 8010a78:	4610      	mov	r0, r2
 8010a7a:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte_buf(pBuf, len);
 8010a7c:	4b08      	ldr	r3, [pc, #32]	; (8010aa0 <WIZCHIP_WRITE_BUF+0x6c>)
 8010a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a80:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010a84:	4611      	mov	r1, r2
 8010a86:	68b8      	ldr	r0, [r7, #8]
 8010a88:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data_buf(IDM_DR,pBuf,len, 0);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!!"
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 8010a8a:	4b05      	ldr	r3, [pc, #20]	; (8010aa0 <WIZCHIP_WRITE_BUF+0x6c>)
 8010a8c:	695b      	ldr	r3, [r3, #20]
 8010a8e:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8010a90:	4b03      	ldr	r3, [pc, #12]	; (8010aa0 <WIZCHIP_WRITE_BUF+0x6c>)
 8010a92:	68db      	ldr	r3, [r3, #12]
 8010a94:	4798      	blx	r3
}
 8010a96:	bf00      	nop
 8010a98:	3718      	adds	r7, #24
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	bd80      	pop	{r7, pc}
 8010a9e:	bf00      	nop
 8010aa0:	240000f0 	.word	0x240000f0

08010aa4 <WIZCHIP_READ_BUF>:

void WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, datasize_t len)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b086      	sub	sp, #24
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	60f8      	str	r0, [r7, #12]
 8010aac:	60b9      	str	r1, [r7, #8]
 8010aae:	4613      	mov	r3, r2
 8010ab0:	80fb      	strh	r3, [r7, #6]
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	0c1b      	lsrs	r3, r3, #16
 8010ab6:	b2db      	uxtb	r3, r3
 8010ab8:	753b      	strb	r3, [r7, #20]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	0a1b      	lsrs	r3, r3, #8
 8010abe:	b2db      	uxtb	r3, r3
 8010ac0:	757b      	strb	r3, [r7, #21]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	b2db      	uxtb	r3, r3
 8010ac6:	75bb      	strb	r3, [r7, #22]

   WIZCHIP_CRITICAL_ENTER();
 8010ac8:	4b0f      	ldr	r3, [pc, #60]	; (8010b08 <WIZCHIP_READ_BUF+0x64>)
 8010aca:	689b      	ldr	r3, [r3, #8]
 8010acc:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 8010ace:	4b0e      	ldr	r3, [pc, #56]	; (8010b08 <WIZCHIP_READ_BUF+0x64>)
 8010ad0:	691b      	ldr	r3, [r3, #16]
 8010ad2:	4798      	blx	r3

#if((_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_READ_ | _W6100_SPI_OP_);
 8010ad4:	7dbb      	ldrb	r3, [r7, #22]
 8010ad6:	75bb      	strb	r3, [r7, #22]
   WIZCHIP.IF.SPI._write_byte_buf(tAD,3);
 8010ad8:	4b0b      	ldr	r3, [pc, #44]	; (8010b08 <WIZCHIP_READ_BUF+0x64>)
 8010ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010adc:	f107 0214 	add.w	r2, r7, #20
 8010ae0:	2103      	movs	r1, #3
 8010ae2:	4610      	mov	r0, r2
 8010ae4:	4798      	blx	r3
   WIZCHIP.IF.SPI._read_byte_buf(pBuf, len);
 8010ae6:	4b08      	ldr	r3, [pc, #32]	; (8010b08 <WIZCHIP_READ_BUF+0x64>)
 8010ae8:	6a1b      	ldr	r3, [r3, #32]
 8010aea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010aee:	4611      	mov	r1, r2
 8010af0:	68b8      	ldr	r0, [r7, #8]
 8010af2:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0,tAD,3,1);
   WIZCHIP.IF.BUS._read_data_buf(IDM_DR,pBuf,len,0);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!!"
#endif
   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 8010af4:	4b04      	ldr	r3, [pc, #16]	; (8010b08 <WIZCHIP_READ_BUF+0x64>)
 8010af6:	695b      	ldr	r3, [r3, #20]
 8010af8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8010afa:	4b03      	ldr	r3, [pc, #12]	; (8010b08 <WIZCHIP_READ_BUF+0x64>)
 8010afc:	68db      	ldr	r3, [r3, #12]
 8010afe:	4798      	blx	r3
}
 8010b00:	bf00      	nop
 8010b02:	3718      	adds	r7, #24
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}
 8010b08:	240000f0 	.word	0x240000f0

08010b0c <getSn_TX_FSR>:

datasize_t getSn_TX_FSR(uint8_t sn)
{
 8010b0c:	b590      	push	{r4, r7, lr}
 8010b0e:	b085      	sub	sp, #20
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	4603      	mov	r3, r0
 8010b14:	71fb      	strb	r3, [r7, #7]
   datasize_t prev_val=-1,val=0;
 8010b16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010b1a:	81bb      	strh	r3, [r7, #12]
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	81fb      	strh	r3, [r7, #14]
   do
   {
      prev_val = val;
 8010b20:	89fb      	ldrh	r3, [r7, #14]
 8010b22:	81bb      	strh	r3, [r7, #12]
      val = WIZCHIP_READ(_Sn_TX_FSR_(sn));
 8010b24:	79fb      	ldrb	r3, [r7, #7]
 8010b26:	009b      	lsls	r3, r3, #2
 8010b28:	3301      	adds	r3, #1
 8010b2a:	00db      	lsls	r3, r3, #3
 8010b2c:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8010b30:	4618      	mov	r0, r3
 8010b32:	f7ff ff4f 	bl	80109d4 <WIZCHIP_READ>
 8010b36:	4603      	mov	r3, r0
 8010b38:	81fb      	strh	r3, [r7, #14]
      val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(_Sn_TX_FSR_(sn),1));
 8010b3a:	89fb      	ldrh	r3, [r7, #14]
 8010b3c:	021b      	lsls	r3, r3, #8
 8010b3e:	b29c      	uxth	r4, r3
 8010b40:	79fb      	ldrb	r3, [r7, #7]
 8010b42:	009b      	lsls	r3, r3, #2
 8010b44:	3301      	adds	r3, #1
 8010b46:	00da      	lsls	r2, r3, #3
 8010b48:	4b0a      	ldr	r3, [pc, #40]	; (8010b74 <getSn_TX_FSR+0x68>)
 8010b4a:	4413      	add	r3, r2
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f7ff ff41 	bl	80109d4 <WIZCHIP_READ>
 8010b52:	4603      	mov	r3, r0
 8010b54:	b29b      	uxth	r3, r3
 8010b56:	4423      	add	r3, r4
 8010b58:	b29b      	uxth	r3, r3
 8010b5a:	81fb      	strh	r3, [r7, #14]
   }while (val != prev_val);
 8010b5c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010b60:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d1db      	bne.n	8010b20 <getSn_TX_FSR+0x14>
   return val;
 8010b68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	3714      	adds	r7, #20
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd90      	pop	{r4, r7, pc}
 8010b74:	00020500 	.word	0x00020500

08010b78 <getSn_RX_RSR>:

datasize_t getSn_RX_RSR(uint8_t sn)
{
 8010b78:	b590      	push	{r4, r7, lr}
 8010b7a:	b085      	sub	sp, #20
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	4603      	mov	r3, r0
 8010b80:	71fb      	strb	r3, [r7, #7]
   datasize_t prev_val=-1,val=0;
 8010b82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010b86:	81bb      	strh	r3, [r7, #12]
 8010b88:	2300      	movs	r3, #0
 8010b8a:	81fb      	strh	r3, [r7, #14]
   do
   {
      prev_val = val;
 8010b8c:	89fb      	ldrh	r3, [r7, #14]
 8010b8e:	81bb      	strh	r3, [r7, #12]
      val = WIZCHIP_READ(_Sn_RX_RSR_(sn));
 8010b90:	79fb      	ldrb	r3, [r7, #7]
 8010b92:	009b      	lsls	r3, r3, #2
 8010b94:	3301      	adds	r3, #1
 8010b96:	00db      	lsls	r3, r3, #3
 8010b98:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f7ff ff19 	bl	80109d4 <WIZCHIP_READ>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	81fb      	strh	r3, [r7, #14]
      val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(_Sn_RX_RSR_(sn),1));
 8010ba6:	89fb      	ldrh	r3, [r7, #14]
 8010ba8:	021b      	lsls	r3, r3, #8
 8010baa:	b29c      	uxth	r4, r3
 8010bac:	79fb      	ldrb	r3, [r7, #7]
 8010bae:	009b      	lsls	r3, r3, #2
 8010bb0:	3301      	adds	r3, #1
 8010bb2:	00da      	lsls	r2, r3, #3
 8010bb4:	4b0a      	ldr	r3, [pc, #40]	; (8010be0 <getSn_RX_RSR+0x68>)
 8010bb6:	4413      	add	r3, r2
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f7ff ff0b 	bl	80109d4 <WIZCHIP_READ>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	b29b      	uxth	r3, r3
 8010bc2:	4423      	add	r3, r4
 8010bc4:	b29b      	uxth	r3, r3
 8010bc6:	81fb      	strh	r3, [r7, #14]
   }while (val != prev_val);
 8010bc8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010bcc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010bd0:	429a      	cmp	r2, r3
 8010bd2:	d1db      	bne.n	8010b8c <getSn_RX_RSR+0x14>
   return val;
 8010bd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3714      	adds	r7, #20
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd90      	pop	{r4, r7, pc}
 8010be0:	00022500 	.word	0x00022500

08010be4 <wiz_recv_data>:
   ptr += len;
   setSn_TX_WR(sn,ptr);
}

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, datasize_t len)
{
 8010be4:	b590      	push	{r4, r7, lr}
 8010be6:	b085      	sub	sp, #20
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	4603      	mov	r3, r0
 8010bec:	6039      	str	r1, [r7, #0]
 8010bee:	71fb      	strb	r3, [r7, #7]
 8010bf0:	4613      	mov	r3, r2
 8010bf2:	80bb      	strh	r3, [r7, #4]
   datasize_t ptr = 0;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	60bb      	str	r3, [r7, #8]
   if(len == 0) return;
 8010bfc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d04d      	beq.n	8010ca0 <wiz_recv_data+0xbc>
   ptr = getSn_RX_RD(sn);
 8010c04:	79fb      	ldrb	r3, [r7, #7]
 8010c06:	009b      	lsls	r3, r3, #2
 8010c08:	3301      	adds	r3, #1
 8010c0a:	00db      	lsls	r3, r3, #3
 8010c0c:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7ff fedf 	bl	80109d4 <WIZCHIP_READ>
 8010c16:	4603      	mov	r3, r0
 8010c18:	b29b      	uxth	r3, r3
 8010c1a:	021b      	lsls	r3, r3, #8
 8010c1c:	b29c      	uxth	r4, r3
 8010c1e:	79fb      	ldrb	r3, [r7, #7]
 8010c20:	009b      	lsls	r3, r3, #2
 8010c22:	3301      	adds	r3, #1
 8010c24:	00da      	lsls	r2, r3, #3
 8010c26:	4b20      	ldr	r3, [pc, #128]	; (8010ca8 <wiz_recv_data+0xc4>)
 8010c28:	4413      	add	r3, r2
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7ff fed2 	bl	80109d4 <WIZCHIP_READ>
 8010c30:	4603      	mov	r3, r0
 8010c32:	b29b      	uxth	r3, r3
 8010c34:	4423      	add	r3, r4
 8010c36:	b29b      	uxth	r3, r3
 8010c38:	81fb      	strh	r3, [r7, #14]
   addrsel = ((uint32_t)ptr << 8) + WIZCHIP_RXBUF_BLOCK(sn);
 8010c3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010c3e:	021b      	lsls	r3, r3, #8
 8010c40:	79fa      	ldrb	r2, [r7, #7]
 8010c42:	0092      	lsls	r2, r2, #2
 8010c44:	3203      	adds	r2, #3
 8010c46:	00d2      	lsls	r2, r2, #3
 8010c48:	4413      	add	r3, r2
 8010c4a:	60bb      	str	r3, [r7, #8]
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8010c4c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010c50:	461a      	mov	r2, r3
 8010c52:	6839      	ldr	r1, [r7, #0]
 8010c54:	68b8      	ldr	r0, [r7, #8]
 8010c56:	f7ff ff25 	bl	8010aa4 <WIZCHIP_READ_BUF>
   ptr += len;
 8010c5a:	89fa      	ldrh	r2, [r7, #14]
 8010c5c:	88bb      	ldrh	r3, [r7, #4]
 8010c5e:	4413      	add	r3, r2
 8010c60:	b29b      	uxth	r3, r3
 8010c62:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8010c64:	79fb      	ldrb	r3, [r7, #7]
 8010c66:	009b      	lsls	r3, r3, #2
 8010c68:	3301      	adds	r3, #1
 8010c6a:	00db      	lsls	r3, r3, #3
 8010c6c:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 8010c70:	461a      	mov	r2, r3
 8010c72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010c76:	121b      	asrs	r3, r3, #8
 8010c78:	b21b      	sxth	r3, r3
 8010c7a:	b2db      	uxtb	r3, r3
 8010c7c:	4619      	mov	r1, r3
 8010c7e:	4610      	mov	r0, r2
 8010c80:	f7ff fe76 	bl	8010970 <WIZCHIP_WRITE>
 8010c84:	79fb      	ldrb	r3, [r7, #7]
 8010c86:	009b      	lsls	r3, r3, #2
 8010c88:	3301      	adds	r3, #1
 8010c8a:	00da      	lsls	r2, r3, #3
 8010c8c:	4b06      	ldr	r3, [pc, #24]	; (8010ca8 <wiz_recv_data+0xc4>)
 8010c8e:	4413      	add	r3, r2
 8010c90:	461a      	mov	r2, r3
 8010c92:	89fb      	ldrh	r3, [r7, #14]
 8010c94:	b2db      	uxtb	r3, r3
 8010c96:	4619      	mov	r1, r3
 8010c98:	4610      	mov	r0, r2
 8010c9a:	f7ff fe69 	bl	8010970 <WIZCHIP_WRITE>
 8010c9e:	e000      	b.n	8010ca2 <wiz_recv_data+0xbe>
   if(len == 0) return;
 8010ca0:	bf00      	nop
}
 8010ca2:	3714      	adds	r7, #20
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd90      	pop	{r4, r7, pc}
 8010ca8:	00022900 	.word	0x00022900

08010cac <socket>:
   }while(0);



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{ 
 8010cac:	b590      	push	{r4, r7, lr}
 8010cae:	b08d      	sub	sp, #52	; 0x34
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	4604      	mov	r4, r0
 8010cb4:	4608      	mov	r0, r1
 8010cb6:	4611      	mov	r1, r2
 8010cb8:	461a      	mov	r2, r3
 8010cba:	4623      	mov	r3, r4
 8010cbc:	71fb      	strb	r3, [r7, #7]
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	71bb      	strb	r3, [r7, #6]
 8010cc2:	460b      	mov	r3, r1
 8010cc4:	80bb      	strh	r3, [r7, #4]
 8010cc6:	4613      	mov	r3, r2
 8010cc8:	70fb      	strb	r3, [r7, #3]
   uint8_t taddr[16];
   uint16_t local_port=0;
 8010cca:	2300      	movs	r3, #0
 8010ccc:	83fb      	strh	r3, [r7, #30]
   CHECK_SOCKNUM(); 
 8010cce:	79fb      	ldrb	r3, [r7, #7]
 8010cd0:	2b07      	cmp	r3, #7
 8010cd2:	d902      	bls.n	8010cda <socket+0x2e>
 8010cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8010cd8:	e1d6      	b.n	8011088 <socket+0x3dc>
   switch (protocol & 0x0F)
 8010cda:	79bb      	ldrb	r3, [r7, #6]
 8010cdc:	f003 030f 	and.w	r3, r3, #15
 8010ce0:	2b01      	cmp	r3, #1
 8010ce2:	d029      	beq.n	8010d38 <socket+0x8c>
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	f340 80bf 	ble.w	8010e68 <socket+0x1bc>
 8010cea:	2b0e      	cmp	r3, #14
 8010cec:	f300 80bc 	bgt.w	8010e68 <socket+0x1bc>
 8010cf0:	2b02      	cmp	r3, #2
 8010cf2:	f2c0 80b9 	blt.w	8010e68 <socket+0x1bc>
 8010cf6:	461a      	mov	r2, r3
 8010cf8:	2301      	movs	r3, #1
 8010cfa:	4093      	lsls	r3, r2
 8010cfc:	f644 428c 	movw	r2, #19596	; 0x4c8c
 8010d00:	401a      	ands	r2, r3
 8010d02:	2a00      	cmp	r2, #0
 8010d04:	bf14      	ite	ne
 8010d06:	2201      	movne	r2, #1
 8010d08:	2200      	moveq	r2, #0
 8010d0a:	b2d2      	uxtb	r2, r2
 8010d0c:	2a00      	cmp	r2, #0
 8010d0e:	f040 80ae 	bne.w	8010e6e <socket+0x1c2>
 8010d12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8010d16:	2a00      	cmp	r2, #0
 8010d18:	bf14      	ite	ne
 8010d1a:	2201      	movne	r2, #1
 8010d1c:	2200      	moveq	r2, #0
 8010d1e:	b2d2      	uxtb	r2, r2
 8010d20:	2a00      	cmp	r2, #0
 8010d22:	d155      	bne.n	8010dd0 <socket+0x124>
 8010d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	bf14      	ite	ne
 8010d2c:	2301      	movne	r3, #1
 8010d2e:	2300      	moveq	r3, #0
 8010d30:	b2db      	uxtb	r3, r3
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d126      	bne.n	8010d84 <socket+0xd8>
 8010d36:	e097      	b.n	8010e68 <socket+0x1bc>
   {
      case Sn_MR_TCP4 :
         getSIPR(taddr);
 8010d38:	f107 030c 	add.w	r3, r7, #12
 8010d3c:	2204      	movs	r2, #4
 8010d3e:	4619      	mov	r1, r3
 8010d40:	4876      	ldr	r0, [pc, #472]	; (8010f1c <socket+0x270>)
 8010d42:	f7ff feaf 	bl	8010aa4 <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 4);
 8010d46:	2300      	movs	r3, #0
 8010d48:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8010d50:	e00e      	b.n	8010d70 <socket+0xc4>
 8010d52:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010d56:	3330      	adds	r3, #48	; 0x30
 8010d58:	443b      	add	r3, r7
 8010d5a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8010d5e:	b29a      	uxth	r2, r3
 8010d60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d62:	4413      	add	r3, r2
 8010d64:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010d66:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010d6a:	3301      	adds	r3, #1
 8010d6c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8010d70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010d74:	2b03      	cmp	r3, #3
 8010d76:	d9ec      	bls.n	8010d52 <socket+0xa6>
 8010d78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d179      	bne.n	8010e72 <socket+0x1c6>
 8010d7e:	f06f 030b 	mvn.w	r3, #11
 8010d82:	e181      	b.n	8011088 <socket+0x3dc>
         break;
      case Sn_MR_TCP6 :
         getLLAR(taddr);
 8010d84:	f107 030c 	add.w	r3, r7, #12
 8010d88:	2210      	movs	r2, #16
 8010d8a:	4619      	mov	r1, r3
 8010d8c:	4864      	ldr	r0, [pc, #400]	; (8010f20 <socket+0x274>)
 8010d8e:	f7ff fe89 	bl	8010aa4 <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 16);
 8010d92:	2300      	movs	r3, #0
 8010d94:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010d96:	2300      	movs	r3, #0
 8010d98:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8010d9c:	e00e      	b.n	8010dbc <socket+0x110>
 8010d9e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8010da2:	3330      	adds	r3, #48	; 0x30
 8010da4:	443b      	add	r3, r7
 8010da6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8010daa:	b29a      	uxth	r2, r3
 8010dac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010dae:	4413      	add	r3, r2
 8010db0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010db2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8010db6:	3301      	adds	r3, #1
 8010db8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8010dbc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8010dc0:	2b0f      	cmp	r3, #15
 8010dc2:	d9ec      	bls.n	8010d9e <socket+0xf2>
 8010dc4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d155      	bne.n	8010e76 <socket+0x1ca>
 8010dca:	f06f 030b 	mvn.w	r3, #11
 8010dce:	e15b      	b.n	8011088 <socket+0x3dc>
         //getGUAR(taddr);
         //CHECK_IPZERO(taddr, 16);
         break;
      case Sn_MR_TCPD :  
         getSIPR(taddr);
 8010dd0:	f107 030c 	add.w	r3, r7, #12
 8010dd4:	2204      	movs	r2, #4
 8010dd6:	4619      	mov	r1, r3
 8010dd8:	4850      	ldr	r0, [pc, #320]	; (8010f1c <socket+0x270>)
 8010dda:	f7ff fe63 	bl	8010aa4 <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 4);
 8010dde:	2300      	movs	r3, #0
 8010de0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010de2:	2300      	movs	r3, #0
 8010de4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8010de8:	e00e      	b.n	8010e08 <socket+0x15c>
 8010dea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8010dee:	3330      	adds	r3, #48	; 0x30
 8010df0:	443b      	add	r3, r7
 8010df2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8010df6:	b29a      	uxth	r2, r3
 8010df8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010dfa:	4413      	add	r3, r2
 8010dfc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010dfe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8010e02:	3301      	adds	r3, #1
 8010e04:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8010e08:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8010e0c:	2b03      	cmp	r3, #3
 8010e0e:	d9ec      	bls.n	8010dea <socket+0x13e>
 8010e10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d102      	bne.n	8010e1c <socket+0x170>
 8010e16:	f06f 030b 	mvn.w	r3, #11
 8010e1a:	e135      	b.n	8011088 <socket+0x3dc>
         getLLAR(taddr);
 8010e1c:	f107 030c 	add.w	r3, r7, #12
 8010e20:	2210      	movs	r2, #16
 8010e22:	4619      	mov	r1, r3
 8010e24:	483e      	ldr	r0, [pc, #248]	; (8010f20 <socket+0x274>)
 8010e26:	f7ff fe3d 	bl	8010aa4 <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 16);
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	847b      	strh	r3, [r7, #34]	; 0x22
 8010e2e:	2300      	movs	r3, #0
 8010e30:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8010e34:	e00e      	b.n	8010e54 <socket+0x1a8>
 8010e36:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010e3a:	3330      	adds	r3, #48	; 0x30
 8010e3c:	443b      	add	r3, r7
 8010e3e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8010e42:	b29a      	uxth	r2, r3
 8010e44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e46:	4413      	add	r3, r2
 8010e48:	847b      	strh	r3, [r7, #34]	; 0x22
 8010e4a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010e4e:	3301      	adds	r3, #1
 8010e50:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8010e54:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010e58:	2b0f      	cmp	r3, #15
 8010e5a:	d9ec      	bls.n	8010e36 <socket+0x18a>
 8010e5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d10b      	bne.n	8010e7a <socket+0x1ce>
 8010e62:	f06f 030b 	mvn.w	r3, #11
 8010e66:	e10f      	b.n	8011088 <socket+0x3dc>
      case Sn_MR_MACRAW :
      case Sn_MR_IPRAW4 :
      case Sn_MR_IPRAW6 :
         break; 
      default :
        return SOCKERR_SOCKMODE;
 8010e68:	f06f 0304 	mvn.w	r3, #4
 8010e6c:	e10c      	b.n	8011088 <socket+0x3dc>
         break; 
 8010e6e:	bf00      	nop
 8010e70:	e004      	b.n	8010e7c <socket+0x1d0>
         break;
 8010e72:	bf00      	nop
 8010e74:	e002      	b.n	8010e7c <socket+0x1d0>
         break;
 8010e76:	bf00      	nop
 8010e78:	e000      	b.n	8010e7c <socket+0x1d0>
         break;
 8010e7a:	bf00      	nop
   } 

   if((flag & 0x04)) return SOCKERR_SOCKFLAG;
 8010e7c:	78fb      	ldrb	r3, [r7, #3]
 8010e7e:	f003 0304 	and.w	r3, r3, #4
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d002      	beq.n	8010e8c <socket+0x1e0>
 8010e86:	f06f 0305 	mvn.w	r3, #5
 8010e8a:	e0fd      	b.n	8011088 <socket+0x3dc>
   if(flag != 0)
 8010e8c:	78fb      	ldrb	r3, [r7, #3]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d049      	beq.n	8010f26 <socket+0x27a>
   {
      switch(protocol)
 8010e92:	79bb      	ldrb	r3, [r7, #6]
 8010e94:	2b0d      	cmp	r3, #13
 8010e96:	bf8c      	ite	hi
 8010e98:	2201      	movhi	r2, #1
 8010e9a:	2200      	movls	r2, #0
 8010e9c:	b2d2      	uxtb	r2, r2
 8010e9e:	2a00      	cmp	r2, #0
 8010ea0:	d135      	bne.n	8010f0e <socket+0x262>
 8010ea2:	2201      	movs	r2, #1
 8010ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8010ea8:	f242 2202 	movw	r2, #8706	; 0x2202
 8010eac:	401a      	ands	r2, r3
 8010eae:	2a00      	cmp	r2, #0
 8010eb0:	bf14      	ite	ne
 8010eb2:	2201      	movne	r2, #1
 8010eb4:	2200      	moveq	r2, #0
 8010eb6:	b2d2      	uxtb	r2, r2
 8010eb8:	2a00      	cmp	r2, #0
 8010eba:	d11a      	bne.n	8010ef2 <socket+0x246>
 8010ebc:	f640 0208 	movw	r2, #2056	; 0x808
 8010ec0:	401a      	ands	r2, r3
 8010ec2:	2a00      	cmp	r2, #0
 8010ec4:	bf14      	ite	ne
 8010ec6:	2201      	movne	r2, #1
 8010ec8:	2200      	moveq	r2, #0
 8010eca:	b2d2      	uxtb	r2, r2
 8010ecc:	2a00      	cmp	r2, #0
 8010ece:	d118      	bne.n	8010f02 <socket+0x256>
 8010ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	bf14      	ite	ne
 8010ed8:	2301      	movne	r3, #1
 8010eda:	2300      	moveq	r3, #0
 8010edc:	b2db      	uxtb	r3, r3
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d015      	beq.n	8010f0e <socket+0x262>
      {
         case Sn_MR_MACRAW:
            if((flag & (SF_DHA_MANUAL | SF_FORCE_ARP)) != 0)
 8010ee2:	78fb      	ldrb	r3, [r7, #3]
 8010ee4:	f003 0303 	and.w	r3, r3, #3
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d012      	beq.n	8010f12 <socket+0x266>
            	return SOCKERR_SOCKFLAG;
 8010eec:	f06f 0305 	mvn.w	r3, #5
 8010ef0:	e0ca      	b.n	8011088 <socket+0x3dc>
            break;
         case Sn_MR_TCP4:
         case Sn_MR_TCP6:
         case Sn_MR_TCPD:     
            if((flag & (SF_MULTI_ENABLE | SF_UNI_BLOCK)) !=0)
 8010ef2:	78fb      	ldrb	r3, [r7, #3]
 8010ef4:	f003 0390 	and.w	r3, r3, #144	; 0x90
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d00c      	beq.n	8010f16 <socket+0x26a>
            	return SOCKERR_SOCKFLAG;
 8010efc:	f06f 0305 	mvn.w	r3, #5
 8010f00:	e0c2      	b.n	8011088 <socket+0x3dc>
            break;
         case Sn_MR_IPRAW4:
         case Sn_MR_IPRAW6:
            if(flag !=0)
 8010f02:	78fb      	ldrb	r3, [r7, #3]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d00d      	beq.n	8010f24 <socket+0x278>
            	return SOCKERR_SOCKFLAG;
 8010f08:	f06f 0305 	mvn.w	r3, #5
 8010f0c:	e0bc      	b.n	8011088 <socket+0x3dc>
            break;
         default:
            break;
 8010f0e:	bf00      	nop
 8010f10:	e009      	b.n	8010f26 <socket+0x27a>
            break;
 8010f12:	bf00      	nop
 8010f14:	e007      	b.n	8010f26 <socket+0x27a>
            break;
 8010f16:	bf00      	nop
 8010f18:	e005      	b.n	8010f26 <socket+0x27a>
 8010f1a:	bf00      	nop
 8010f1c:	00413800 	.word	0x00413800
 8010f20:	00414000 	.word	0x00414000
            break;
 8010f24:	bf00      	nop
      }
   }
   close(sn);
 8010f26:	79fb      	ldrb	r3, [r7, #7]
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f000 f8bd 	bl	80110a8 <close>
   setSn_MR(sn,(protocol | (flag & 0xF0)));
 8010f2e:	79fb      	ldrb	r3, [r7, #7]
 8010f30:	009b      	lsls	r3, r3, #2
 8010f32:	3301      	adds	r3, #1
 8010f34:	00db      	lsls	r3, r3, #3
 8010f36:	4618      	mov	r0, r3
 8010f38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010f3c:	f023 030f 	bic.w	r3, r3, #15
 8010f40:	b25a      	sxtb	r2, r3
 8010f42:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010f46:	4313      	orrs	r3, r2
 8010f48:	b25b      	sxtb	r3, r3
 8010f4a:	b2db      	uxtb	r3, r3
 8010f4c:	4619      	mov	r1, r3
 8010f4e:	f7ff fd0f 	bl	8010970 <WIZCHIP_WRITE>
   setSn_MR2(sn, flag & 0x03);  
 8010f52:	79fb      	ldrb	r3, [r7, #7]
 8010f54:	009b      	lsls	r3, r3, #2
 8010f56:	3301      	adds	r3, #1
 8010f58:	00db      	lsls	r3, r3, #3
 8010f5a:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8010f5e:	461a      	mov	r2, r3
 8010f60:	78fb      	ldrb	r3, [r7, #3]
 8010f62:	f003 0303 	and.w	r3, r3, #3
 8010f66:	b2db      	uxtb	r3, r3
 8010f68:	4619      	mov	r1, r3
 8010f6a:	4610      	mov	r0, r2
 8010f6c:	f7ff fd00 	bl	8010970 <WIZCHIP_WRITE>
   if(!port)
 8010f70:	88bb      	ldrh	r3, [r7, #4]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d110      	bne.n	8010f98 <socket+0x2ec>
   {
      port = sock_any_port++;
 8010f76:	4b46      	ldr	r3, [pc, #280]	; (8011090 <socket+0x3e4>)
 8010f78:	881b      	ldrh	r3, [r3, #0]
 8010f7a:	1c5a      	adds	r2, r3, #1
 8010f7c:	b291      	uxth	r1, r2
 8010f7e:	4a44      	ldr	r2, [pc, #272]	; (8011090 <socket+0x3e4>)
 8010f80:	8011      	strh	r1, [r2, #0]
 8010f82:	80bb      	strh	r3, [r7, #4]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8010f84:	4b42      	ldr	r3, [pc, #264]	; (8011090 <socket+0x3e4>)
 8010f86:	881b      	ldrh	r3, [r3, #0]
 8010f88:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8010f8c:	4293      	cmp	r3, r2
 8010f8e:	d103      	bne.n	8010f98 <socket+0x2ec>
 8010f90:	4b3f      	ldr	r3, [pc, #252]	; (8011090 <socket+0x3e4>)
 8010f92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010f96:	801a      	strh	r2, [r3, #0]
   }
   setSn_PORTR(sn,port);
 8010f98:	79fb      	ldrb	r3, [r7, #7]
 8010f9a:	009b      	lsls	r3, r3, #2
 8010f9c:	3301      	adds	r3, #1
 8010f9e:	00db      	lsls	r3, r3, #3
 8010fa0:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8010fa4:	461a      	mov	r2, r3
 8010fa6:	88bb      	ldrh	r3, [r7, #4]
 8010fa8:	0a1b      	lsrs	r3, r3, #8
 8010faa:	b29b      	uxth	r3, r3
 8010fac:	b2db      	uxtb	r3, r3
 8010fae:	4619      	mov	r1, r3
 8010fb0:	4610      	mov	r0, r2
 8010fb2:	f7ff fcdd 	bl	8010970 <WIZCHIP_WRITE>
 8010fb6:	79fb      	ldrb	r3, [r7, #7]
 8010fb8:	009b      	lsls	r3, r3, #2
 8010fba:	3301      	adds	r3, #1
 8010fbc:	00da      	lsls	r2, r3, #3
 8010fbe:	4b35      	ldr	r3, [pc, #212]	; (8011094 <socket+0x3e8>)
 8010fc0:	4413      	add	r3, r2
 8010fc2:	461a      	mov	r2, r3
 8010fc4:	88bb      	ldrh	r3, [r7, #4]
 8010fc6:	b2db      	uxtb	r3, r3
 8010fc8:	4619      	mov	r1, r3
 8010fca:	4610      	mov	r0, r2
 8010fcc:	f7ff fcd0 	bl	8010970 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8010fd0:	79fb      	ldrb	r3, [r7, #7]
 8010fd2:	009b      	lsls	r3, r3, #2
 8010fd4:	3301      	adds	r3, #1
 8010fd6:	00db      	lsls	r3, r3, #3
 8010fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010fdc:	2101      	movs	r1, #1
 8010fde:	4618      	mov	r0, r3
 8010fe0:	f7ff fcc6 	bl	8010970 <WIZCHIP_WRITE>

   while(getSn_CR(sn));
 8010fe4:	bf00      	nop
 8010fe6:	79fb      	ldrb	r3, [r7, #7]
 8010fe8:	009b      	lsls	r3, r3, #2
 8010fea:	3301      	adds	r3, #1
 8010fec:	00db      	lsls	r3, r3, #3
 8010fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f7ff fcee 	bl	80109d4 <WIZCHIP_READ>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d1f3      	bne.n	8010fe6 <socket+0x33a>

   sock_io_mode &= ~(1 <<sn);
 8010ffe:	79fb      	ldrb	r3, [r7, #7]
 8011000:	2201      	movs	r2, #1
 8011002:	fa02 f303 	lsl.w	r3, r2, r3
 8011006:	b21b      	sxth	r3, r3
 8011008:	43db      	mvns	r3, r3
 801100a:	b21a      	sxth	r2, r3
 801100c:	4b22      	ldr	r3, [pc, #136]	; (8011098 <socket+0x3ec>)
 801100e:	881b      	ldrh	r3, [r3, #0]
 8011010:	b21b      	sxth	r3, r3
 8011012:	4013      	ands	r3, r2
 8011014:	b21b      	sxth	r3, r3
 8011016:	b29a      	uxth	r2, r3
 8011018:	4b1f      	ldr	r3, [pc, #124]	; (8011098 <socket+0x3ec>)
 801101a:	801a      	strh	r2, [r3, #0]
   sock_io_mode |= ((flag & (SF_IO_NONBLOCK>>3)) << sn);
 801101c:	78fb      	ldrb	r3, [r7, #3]
 801101e:	f003 0201 	and.w	r2, r3, #1
 8011022:	79fb      	ldrb	r3, [r7, #7]
 8011024:	fa02 f303 	lsl.w	r3, r2, r3
 8011028:	b21a      	sxth	r2, r3
 801102a:	4b1b      	ldr	r3, [pc, #108]	; (8011098 <socket+0x3ec>)
 801102c:	881b      	ldrh	r3, [r3, #0]
 801102e:	b21b      	sxth	r3, r3
 8011030:	4313      	orrs	r3, r2
 8011032:	b21b      	sxth	r3, r3
 8011034:	b29a      	uxth	r2, r3
 8011036:	4b18      	ldr	r3, [pc, #96]	; (8011098 <socket+0x3ec>)
 8011038:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 801103a:	79fb      	ldrb	r3, [r7, #7]
 801103c:	2201      	movs	r2, #1
 801103e:	fa02 f303 	lsl.w	r3, r2, r3
 8011042:	b21b      	sxth	r3, r3
 8011044:	43db      	mvns	r3, r3
 8011046:	b21a      	sxth	r2, r3
 8011048:	4b14      	ldr	r3, [pc, #80]	; (801109c <socket+0x3f0>)
 801104a:	881b      	ldrh	r3, [r3, #0]
 801104c:	b21b      	sxth	r3, r3
 801104e:	4013      	ands	r3, r2
 8011050:	b21b      	sxth	r3, r3
 8011052:	b29a      	uxth	r2, r3
 8011054:	4b11      	ldr	r3, [pc, #68]	; (801109c <socket+0x3f0>)
 8011056:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8011058:	79fb      	ldrb	r3, [r7, #7]
 801105a:	4a11      	ldr	r2, [pc, #68]	; (80110a0 <socket+0x3f4>)
 801105c:	2100      	movs	r1, #0
 801105e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 8011062:	79fb      	ldrb	r3, [r7, #7]
 8011064:	4a0f      	ldr	r2, [pc, #60]	; (80110a4 <socket+0x3f8>)
 8011066:	2100      	movs	r1, #0
 8011068:	54d1      	strb	r1, [r2, r3]

   while(getSn_SR(sn) == SOCK_CLOSED) ;
 801106a:	bf00      	nop
 801106c:	79fb      	ldrb	r3, [r7, #7]
 801106e:	009b      	lsls	r3, r3, #2
 8011070:	3301      	adds	r3, #1
 8011072:	00db      	lsls	r3, r3, #3
 8011074:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011078:	4618      	mov	r0, r3
 801107a:	f7ff fcab 	bl	80109d4 <WIZCHIP_READ>
 801107e:	4603      	mov	r3, r0
 8011080:	2b00      	cmp	r3, #0
 8011082:	d0f3      	beq.n	801106c <socket+0x3c0>
//   printf("[%d]%d\r\n", sn, getSn_PORTR(sn));
   return sn;
 8011084:	f997 3007 	ldrsb.w	r3, [r7, #7]
}  
 8011088:	4618      	mov	r0, r3
 801108a:	3734      	adds	r7, #52	; 0x34
 801108c:	46bd      	mov	sp, r7
 801108e:	bd90      	pop	{r4, r7, pc}
 8011090:	240000ec 	.word	0x240000ec
 8011094:	00011500 	.word	0x00011500
 8011098:	24010b64 	.word	0x24010b64
 801109c:	24010b66 	.word	0x24010b66
 80110a0:	24010b68 	.word	0x24010b68
 80110a4:	24010b78 	.word	0x24010b78

080110a8 <close>:


int8_t close(uint8_t sn)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b082      	sub	sp, #8
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	4603      	mov	r3, r0
 80110b0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80110b2:	79fb      	ldrb	r3, [r7, #7]
 80110b4:	2b07      	cmp	r3, #7
 80110b6:	d902      	bls.n	80110be <close+0x16>
 80110b8:	f04f 33ff 	mov.w	r3, #4294967295
 80110bc:	e055      	b.n	801116a <close+0xc2>
   setSn_CR(sn,Sn_CR_CLOSE);
 80110be:	79fb      	ldrb	r3, [r7, #7]
 80110c0:	009b      	lsls	r3, r3, #2
 80110c2:	3301      	adds	r3, #1
 80110c4:	00db      	lsls	r3, r3, #3
 80110c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80110ca:	2110      	movs	r1, #16
 80110cc:	4618      	mov	r0, r3
 80110ce:	f7ff fc4f 	bl	8010970 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 80110d2:	bf00      	nop
 80110d4:	79fb      	ldrb	r3, [r7, #7]
 80110d6:	009b      	lsls	r3, r3, #2
 80110d8:	3301      	adds	r3, #1
 80110da:	00db      	lsls	r3, r3, #3
 80110dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80110e0:	4618      	mov	r0, r3
 80110e2:	f7ff fc77 	bl	80109d4 <WIZCHIP_READ>
 80110e6:	4603      	mov	r3, r0
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d1f3      	bne.n	80110d4 <close+0x2c>
   /* clear all interrupt of SOCKETn. */
   setSn_IRCLR(sn, 0xFF);
 80110ec:	79fb      	ldrb	r3, [r7, #7]
 80110ee:	009b      	lsls	r3, r3, #2
 80110f0:	3301      	adds	r3, #1
 80110f2:	00db      	lsls	r3, r3, #3
 80110f4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80110f8:	21ff      	movs	r1, #255	; 0xff
 80110fa:	4618      	mov	r0, r3
 80110fc:	f7ff fc38 	bl	8010970 <WIZCHIP_WRITE>
   /* Release the sock_io_mode of SOCKETn. */
   sock_io_mode &= ~(1<<sn); 
 8011100:	79fb      	ldrb	r3, [r7, #7]
 8011102:	2201      	movs	r2, #1
 8011104:	fa02 f303 	lsl.w	r3, r2, r3
 8011108:	b21b      	sxth	r3, r3
 801110a:	43db      	mvns	r3, r3
 801110c:	b21a      	sxth	r2, r3
 801110e:	4b19      	ldr	r3, [pc, #100]	; (8011174 <close+0xcc>)
 8011110:	881b      	ldrh	r3, [r3, #0]
 8011112:	b21b      	sxth	r3, r3
 8011114:	4013      	ands	r3, r2
 8011116:	b21b      	sxth	r3, r3
 8011118:	b29a      	uxth	r2, r3
 801111a:	4b16      	ldr	r3, [pc, #88]	; (8011174 <close+0xcc>)
 801111c:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 801111e:	79fb      	ldrb	r3, [r7, #7]
 8011120:	4a15      	ldr	r2, [pc, #84]	; (8011178 <close+0xd0>)
 8011122:	2100      	movs	r1, #0
 8011124:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_is_sending &= ~(1<<sn);
 8011128:	79fb      	ldrb	r3, [r7, #7]
 801112a:	2201      	movs	r2, #1
 801112c:	fa02 f303 	lsl.w	r3, r2, r3
 8011130:	b21b      	sxth	r3, r3
 8011132:	43db      	mvns	r3, r3
 8011134:	b21a      	sxth	r2, r3
 8011136:	4b11      	ldr	r3, [pc, #68]	; (801117c <close+0xd4>)
 8011138:	881b      	ldrh	r3, [r3, #0]
 801113a:	b21b      	sxth	r3, r3
 801113c:	4013      	ands	r3, r2
 801113e:	b21b      	sxth	r3, r3
 8011140:	b29a      	uxth	r2, r3
 8011142:	4b0e      	ldr	r3, [pc, #56]	; (801117c <close+0xd4>)
 8011144:	801a      	strh	r2, [r3, #0]
   sock_pack_info[sn] = PACK_NONE;
 8011146:	79fb      	ldrb	r3, [r7, #7]
 8011148:	4a0d      	ldr	r2, [pc, #52]	; (8011180 <close+0xd8>)
 801114a:	2100      	movs	r1, #0
 801114c:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) != SOCK_CLOSED);
 801114e:	bf00      	nop
 8011150:	79fb      	ldrb	r3, [r7, #7]
 8011152:	009b      	lsls	r3, r3, #2
 8011154:	3301      	adds	r3, #1
 8011156:	00db      	lsls	r3, r3, #3
 8011158:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801115c:	4618      	mov	r0, r3
 801115e:	f7ff fc39 	bl	80109d4 <WIZCHIP_READ>
 8011162:	4603      	mov	r3, r0
 8011164:	2b00      	cmp	r3, #0
 8011166:	d1f3      	bne.n	8011150 <close+0xa8>
   return SOCK_OK;
 8011168:	2301      	movs	r3, #1
}
 801116a:	4618      	mov	r0, r3
 801116c:	3708      	adds	r7, #8
 801116e:	46bd      	mov	sp, r7
 8011170:	bd80      	pop	{r7, pc}
 8011172:	bf00      	nop
 8011174:	24010b64 	.word	0x24010b64
 8011178:	24010b68 	.word	0x24010b68
 801117c:	24010b66 	.word	0x24010b66
 8011180:	24010b78 	.word	0x24010b78

08011184 <listen>:


int8_t listen(uint8_t sn)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b082      	sub	sp, #8
 8011188:	af00      	add	r7, sp, #0
 801118a:	4603      	mov	r3, r0
 801118c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 801118e:	79fb      	ldrb	r3, [r7, #7]
 8011190:	2b07      	cmp	r3, #7
 8011192:	d902      	bls.n	801119a <listen+0x16>
 8011194:	f04f 33ff 	mov.w	r3, #4294967295
 8011198:	e03a      	b.n	8011210 <listen+0x8c>
   CHECK_SOCKINIT();
 801119a:	79fb      	ldrb	r3, [r7, #7]
 801119c:	009b      	lsls	r3, r3, #2
 801119e:	3301      	adds	r3, #1
 80111a0:	00db      	lsls	r3, r3, #3
 80111a2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80111a6:	4618      	mov	r0, r3
 80111a8:	f7ff fc14 	bl	80109d4 <WIZCHIP_READ>
 80111ac:	4603      	mov	r3, r0
 80111ae:	2b13      	cmp	r3, #19
 80111b0:	d002      	beq.n	80111b8 <listen+0x34>
 80111b2:	f06f 0302 	mvn.w	r3, #2
 80111b6:	e02b      	b.n	8011210 <listen+0x8c>
   setSn_CR(sn,Sn_CR_LISTEN);
 80111b8:	79fb      	ldrb	r3, [r7, #7]
 80111ba:	009b      	lsls	r3, r3, #2
 80111bc:	3301      	adds	r3, #1
 80111be:	00db      	lsls	r3, r3, #3
 80111c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80111c4:	2102      	movs	r1, #2
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7ff fbd2 	bl	8010970 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80111cc:	bf00      	nop
 80111ce:	79fb      	ldrb	r3, [r7, #7]
 80111d0:	009b      	lsls	r3, r3, #2
 80111d2:	3301      	adds	r3, #1
 80111d4:	00db      	lsls	r3, r3, #3
 80111d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80111da:	4618      	mov	r0, r3
 80111dc:	f7ff fbfa 	bl	80109d4 <WIZCHIP_READ>
 80111e0:	4603      	mov	r3, r0
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d1f3      	bne.n	80111ce <listen+0x4a>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80111e6:	e006      	b.n	80111f6 <listen+0x72>
   {
      close(sn);
 80111e8:	79fb      	ldrb	r3, [r7, #7]
 80111ea:	4618      	mov	r0, r3
 80111ec:	f7ff ff5c 	bl	80110a8 <close>
      return SOCKERR_SOCKCLOSED;
 80111f0:	f06f 0303 	mvn.w	r3, #3
 80111f4:	e00c      	b.n	8011210 <listen+0x8c>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80111f6:	79fb      	ldrb	r3, [r7, #7]
 80111f8:	009b      	lsls	r3, r3, #2
 80111fa:	3301      	adds	r3, #1
 80111fc:	00db      	lsls	r3, r3, #3
 80111fe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011202:	4618      	mov	r0, r3
 8011204:	f7ff fbe6 	bl	80109d4 <WIZCHIP_READ>
 8011208:	4603      	mov	r3, r0
 801120a:	2b14      	cmp	r3, #20
 801120c:	d1ec      	bne.n	80111e8 <listen+0x64>
   }
   return SOCK_OK;
 801120e:	2301      	movs	r3, #1
}
 8011210:	4618      	mov	r0, r3
 8011212:	3708      	adds	r7, #8
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <disconnect>:
   } 
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
 801121e:	4603      	mov	r3, r0
 8011220:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8011222:	79fb      	ldrb	r3, [r7, #7]
 8011224:	2b07      	cmp	r3, #7
 8011226:	d902      	bls.n	801122e <disconnect+0x16>
 8011228:	f04f 33ff 	mov.w	r3, #4294967295
 801122c:	e05f      	b.n	80112ee <disconnect+0xd6>
   CHECK_TCPMODE();
 801122e:	79fb      	ldrb	r3, [r7, #7]
 8011230:	009b      	lsls	r3, r3, #2
 8011232:	3301      	adds	r3, #1
 8011234:	00db      	lsls	r3, r3, #3
 8011236:	4618      	mov	r0, r3
 8011238:	f7ff fbcc 	bl	80109d4 <WIZCHIP_READ>
 801123c:	4603      	mov	r3, r0
 801123e:	f003 0303 	and.w	r3, r3, #3
 8011242:	2b01      	cmp	r3, #1
 8011244:	d002      	beq.n	801124c <disconnect+0x34>
 8011246:	f06f 0304 	mvn.w	r3, #4
 801124a:	e050      	b.n	80112ee <disconnect+0xd6>
   if(getSn_SR(sn) != SOCK_CLOSED)
 801124c:	79fb      	ldrb	r3, [r7, #7]
 801124e:	009b      	lsls	r3, r3, #2
 8011250:	3301      	adds	r3, #1
 8011252:	00db      	lsls	r3, r3, #3
 8011254:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011258:	4618      	mov	r0, r3
 801125a:	f7ff fbbb 	bl	80109d4 <WIZCHIP_READ>
 801125e:	4603      	mov	r3, r0
 8011260:	2b00      	cmp	r3, #0
 8011262:	d043      	beq.n	80112ec <disconnect+0xd4>
   {
      setSn_CR(sn,Sn_CR_DISCON);
 8011264:	79fb      	ldrb	r3, [r7, #7]
 8011266:	009b      	lsls	r3, r3, #2
 8011268:	3301      	adds	r3, #1
 801126a:	00db      	lsls	r3, r3, #3
 801126c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011270:	2108      	movs	r1, #8
 8011272:	4618      	mov	r0, r3
 8011274:	f7ff fb7c 	bl	8010970 <WIZCHIP_WRITE>
      /* wait to process the command... */
      while(getSn_CR(sn));
 8011278:	bf00      	nop
 801127a:	79fb      	ldrb	r3, [r7, #7]
 801127c:	009b      	lsls	r3, r3, #2
 801127e:	3301      	adds	r3, #1
 8011280:	00db      	lsls	r3, r3, #3
 8011282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011286:	4618      	mov	r0, r3
 8011288:	f7ff fba4 	bl	80109d4 <WIZCHIP_READ>
 801128c:	4603      	mov	r3, r0
 801128e:	2b00      	cmp	r3, #0
 8011290:	d1f3      	bne.n	801127a <disconnect+0x62>
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8011292:	4b19      	ldr	r3, [pc, #100]	; (80112f8 <disconnect+0xe0>)
 8011294:	881b      	ldrh	r3, [r3, #0]
 8011296:	461a      	mov	r2, r3
 8011298:	79fb      	ldrb	r3, [r7, #7]
 801129a:	fa42 f303 	asr.w	r3, r2, r3
 801129e:	f003 0301 	and.w	r3, r3, #1
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d016      	beq.n	80112d4 <disconnect+0xbc>
 80112a6:	2300      	movs	r3, #0
 80112a8:	e021      	b.n	80112ee <disconnect+0xd6>
      while(getSn_SR(sn) != SOCK_CLOSED)
      {
         if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80112aa:	79fb      	ldrb	r3, [r7, #7]
 80112ac:	009b      	lsls	r3, r3, #2
 80112ae:	3301      	adds	r3, #1
 80112b0:	00db      	lsls	r3, r3, #3
 80112b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80112b6:	4618      	mov	r0, r3
 80112b8:	f7ff fb8c 	bl	80109d4 <WIZCHIP_READ>
 80112bc:	4603      	mov	r3, r0
 80112be:	f003 0308 	and.w	r3, r3, #8
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d006      	beq.n	80112d4 <disconnect+0xbc>
         {
            close(sn);
 80112c6:	79fb      	ldrb	r3, [r7, #7]
 80112c8:	4618      	mov	r0, r3
 80112ca:	f7ff feed 	bl	80110a8 <close>
            return SOCKERR_TIMEOUT;
 80112ce:	f06f 030c 	mvn.w	r3, #12
 80112d2:	e00c      	b.n	80112ee <disconnect+0xd6>
      while(getSn_SR(sn) != SOCK_CLOSED)
 80112d4:	79fb      	ldrb	r3, [r7, #7]
 80112d6:	009b      	lsls	r3, r3, #2
 80112d8:	3301      	adds	r3, #1
 80112da:	00db      	lsls	r3, r3, #3
 80112dc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7ff fb77 	bl	80109d4 <WIZCHIP_READ>
 80112e6:	4603      	mov	r3, r0
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d1de      	bne.n	80112aa <disconnect+0x92>
         }
      }
   }
   return SOCK_OK;
 80112ec:	2301      	movs	r3, #1
}
 80112ee:	4618      	mov	r0, r3
 80112f0:	3708      	adds	r7, #8
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd80      	pop	{r7, pc}
 80112f6:	bf00      	nop
 80112f8:	24010b64 	.word	0x24010b64

080112fc <recv_iperf>:
   while(getSn_CR(sn));  
   return len;
}

datasize_t recv_iperf(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b082      	sub	sp, #8
 8011300:	af00      	add	r7, sp, #0
 8011302:	4603      	mov	r3, r0
 8011304:	6039      	str	r1, [r7, #0]
 8011306:	71fb      	strb	r3, [r7, #7]
 8011308:	4613      	mov	r3, r2
 801130a:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 801130c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011310:	79fb      	ldrb	r3, [r7, #7]
 8011312:	6839      	ldr	r1, [r7, #0]
 8011314:	4618      	mov	r0, r3
 8011316:	f7ff fc65 	bl	8010be4 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 801131a:	79fb      	ldrb	r3, [r7, #7]
 801131c:	009b      	lsls	r3, r3, #2
 801131e:	3301      	adds	r3, #1
 8011320:	00db      	lsls	r3, r3, #3
 8011322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011326:	2140      	movs	r1, #64	; 0x40
 8011328:	4618      	mov	r0, r3
 801132a:	f7ff fb21 	bl	8010970 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 801132e:	bf00      	nop
 8011330:	79fb      	ldrb	r3, [r7, #7]
 8011332:	009b      	lsls	r3, r3, #2
 8011334:	3301      	adds	r3, #1
 8011336:	00db      	lsls	r3, r3, #3
 8011338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801133c:	4618      	mov	r0, r3
 801133e:	f7ff fb49 	bl	80109d4 <WIZCHIP_READ>
 8011342:	4603      	mov	r3, r0
 8011344:	2b00      	cmp	r3, #0
 8011346:	d1f3      	bne.n	8011330 <recv_iperf+0x34>

   return (int32_t)len;
 8011348:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 801134c:	4618      	mov	r0, r3
 801134e:	3708      	adds	r7, #8
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}

08011354 <getsockopt>:
   } 
   return SOCK_OK;
}

int8_t getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 8011354:	b590      	push	{r4, r7, lr}
 8011356:	b083      	sub	sp, #12
 8011358:	af00      	add	r7, sp, #0
 801135a:	4603      	mov	r3, r0
 801135c:	603a      	str	r2, [r7, #0]
 801135e:	71fb      	strb	r3, [r7, #7]
 8011360:	460b      	mov	r3, r1
 8011362:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 8011364:	79fb      	ldrb	r3, [r7, #7]
 8011366:	2b07      	cmp	r3, #7
 8011368:	d902      	bls.n	8011370 <getsockopt+0x1c>
 801136a:	f04f 33ff 	mov.w	r3, #4294967295
 801136e:	e19e      	b.n	80116ae <getsockopt+0x35a>
   switch(sotype)
 8011370:	79bb      	ldrb	r3, [r7, #6]
 8011372:	2b0e      	cmp	r3, #14
 8011374:	f200 8197 	bhi.w	80116a6 <getsockopt+0x352>
 8011378:	a201      	add	r2, pc, #4	; (adr r2, 8011380 <getsockopt+0x2c>)
 801137a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801137e:	bf00      	nop
 8011380:	080113bd 	.word	0x080113bd
 8011384:	08011415 	.word	0x08011415
 8011388:	08011431 	.word	0x08011431
 801138c:	0801144d 	.word	0x0801144d
 8011390:	08011487 	.word	0x08011487
 8011394:	08011501 	.word	0x08011501
 8011398:	080116a7 	.word	0x080116a7
 801139c:	0801153b 	.word	0x0801153b
 80113a0:	08011575 	.word	0x08011575
 80113a4:	08011587 	.word	0x08011587
 80113a8:	08011599 	.word	0x08011599
 80113ac:	080115b5 	.word	0x080115b5
 80113b0:	080115f3 	.word	0x080115f3
 80113b4:	0801168b 	.word	0x0801168b
 80113b8:	08011647 	.word	0x08011647
   {
      case SO_FLAG:
         *(uint8_t*)arg = (getSn_MR(sn) & 0xF0) | (getSn_MR2(sn)) | ((uint8_t)(((sock_io_mode >> sn) & 0x0001) << 3));
 80113bc:	79fb      	ldrb	r3, [r7, #7]
 80113be:	009b      	lsls	r3, r3, #2
 80113c0:	3301      	adds	r3, #1
 80113c2:	00db      	lsls	r3, r3, #3
 80113c4:	4618      	mov	r0, r3
 80113c6:	f7ff fb05 	bl	80109d4 <WIZCHIP_READ>
 80113ca:	4603      	mov	r3, r0
 80113cc:	b25b      	sxtb	r3, r3
 80113ce:	f023 030f 	bic.w	r3, r3, #15
 80113d2:	b25c      	sxtb	r4, r3
 80113d4:	79fb      	ldrb	r3, [r7, #7]
 80113d6:	009b      	lsls	r3, r3, #2
 80113d8:	3301      	adds	r3, #1
 80113da:	00db      	lsls	r3, r3, #3
 80113dc:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 80113e0:	4618      	mov	r0, r3
 80113e2:	f7ff faf7 	bl	80109d4 <WIZCHIP_READ>
 80113e6:	4603      	mov	r3, r0
 80113e8:	b25b      	sxtb	r3, r3
 80113ea:	4323      	orrs	r3, r4
 80113ec:	b25a      	sxtb	r2, r3
 80113ee:	4bb2      	ldr	r3, [pc, #712]	; (80116b8 <getsockopt+0x364>)
 80113f0:	881b      	ldrh	r3, [r3, #0]
 80113f2:	4619      	mov	r1, r3
 80113f4:	79fb      	ldrb	r3, [r7, #7]
 80113f6:	fa41 f303 	asr.w	r3, r1, r3
 80113fa:	b2db      	uxtb	r3, r3
 80113fc:	00db      	lsls	r3, r3, #3
 80113fe:	b2db      	uxtb	r3, r3
 8011400:	b25b      	sxtb	r3, r3
 8011402:	f003 0308 	and.w	r3, r3, #8
 8011406:	b25b      	sxtb	r3, r3
 8011408:	4313      	orrs	r3, r2
 801140a:	b25b      	sxtb	r3, r3
 801140c:	b2da      	uxtb	r2, r3
 801140e:	683b      	ldr	r3, [r7, #0]
 8011410:	701a      	strb	r2, [r3, #0]
         break;
 8011412:	e14b      	b.n	80116ac <getsockopt+0x358>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTLR(sn);
 8011414:	79fb      	ldrb	r3, [r7, #7]
 8011416:	009b      	lsls	r3, r3, #2
 8011418:	3301      	adds	r3, #1
 801141a:	00db      	lsls	r3, r3, #3
 801141c:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8011420:	4618      	mov	r0, r3
 8011422:	f7ff fad7 	bl	80109d4 <WIZCHIP_READ>
 8011426:	4603      	mov	r3, r0
 8011428:	461a      	mov	r2, r3
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	701a      	strb	r2, [r3, #0]
         break;
 801142e:	e13d      	b.n	80116ac <getsockopt+0x358>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOSR(sn);
 8011430:	79fb      	ldrb	r3, [r7, #7]
 8011432:	009b      	lsls	r3, r3, #2
 8011434:	3301      	adds	r3, #1
 8011436:	00db      	lsls	r3, r3, #3
 8011438:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 801143c:	4618      	mov	r0, r3
 801143e:	f7ff fac9 	bl	80109d4 <WIZCHIP_READ>
 8011442:	4603      	mov	r3, r0
 8011444:	461a      	mov	r2, r3
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	701a      	strb	r2, [r3, #0]
         break;
 801144a:	e12f      	b.n	80116ac <getsockopt+0x358>
      case SO_MSS: 
         *(uint16_t*) arg = getSn_MSSR(sn);
 801144c:	79fb      	ldrb	r3, [r7, #7]
 801144e:	009b      	lsls	r3, r3, #2
 8011450:	3301      	adds	r3, #1
 8011452:	00db      	lsls	r3, r3, #3
 8011454:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8011458:	4618      	mov	r0, r3
 801145a:	f7ff fabb 	bl	80109d4 <WIZCHIP_READ>
 801145e:	4603      	mov	r3, r0
 8011460:	b29b      	uxth	r3, r3
 8011462:	021b      	lsls	r3, r3, #8
 8011464:	b29c      	uxth	r4, r3
 8011466:	79fb      	ldrb	r3, [r7, #7]
 8011468:	009b      	lsls	r3, r3, #2
 801146a:	3301      	adds	r3, #1
 801146c:	00da      	lsls	r2, r3, #3
 801146e:	4b93      	ldr	r3, [pc, #588]	; (80116bc <getsockopt+0x368>)
 8011470:	4413      	add	r3, r2
 8011472:	4618      	mov	r0, r3
 8011474:	f7ff faae 	bl	80109d4 <WIZCHIP_READ>
 8011478:	4603      	mov	r3, r0
 801147a:	b29b      	uxth	r3, r3
 801147c:	4423      	add	r3, r4
 801147e:	b29a      	uxth	r2, r3
 8011480:	683b      	ldr	r3, [r7, #0]
 8011482:	801a      	strh	r2, [r3, #0]
         break;
 8011484:	e112      	b.n	80116ac <getsockopt+0x358>
      case SO_DESTIP:
         CHECK_TCPMODE();
 8011486:	79fb      	ldrb	r3, [r7, #7]
 8011488:	009b      	lsls	r3, r3, #2
 801148a:	3301      	adds	r3, #1
 801148c:	00db      	lsls	r3, r3, #3
 801148e:	4618      	mov	r0, r3
 8011490:	f7ff faa0 	bl	80109d4 <WIZCHIP_READ>
 8011494:	4603      	mov	r3, r0
 8011496:	f003 0303 	and.w	r3, r3, #3
 801149a:	2b01      	cmp	r3, #1
 801149c:	d002      	beq.n	80114a4 <getsockopt+0x150>
 801149e:	f06f 0304 	mvn.w	r3, #4
 80114a2:	e104      	b.n	80116ae <getsockopt+0x35a>
         if(getSn_ESR(sn) & TCPSOCK_MODE) //IPv6 ?
 80114a4:	79fb      	ldrb	r3, [r7, #7]
 80114a6:	009b      	lsls	r3, r3, #2
 80114a8:	3301      	adds	r3, #1
 80114aa:	00db      	lsls	r3, r3, #3
 80114ac:	f503 5344 	add.w	r3, r3, #12544	; 0x3100
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7ff fa8f 	bl	80109d4 <WIZCHIP_READ>
 80114b6:	4603      	mov	r3, r0
 80114b8:	f003 0304 	and.w	r3, r3, #4
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d00f      	beq.n	80114e0 <getsockopt+0x18c>
         {
            getSn_DIP6R(sn, ((wiz_IPAddress*)arg)->ip);
 80114c0:	79fb      	ldrb	r3, [r7, #7]
 80114c2:	009b      	lsls	r3, r3, #2
 80114c4:	3301      	adds	r3, #1
 80114c6:	00db      	lsls	r3, r3, #3
 80114c8:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 80114cc:	4618      	mov	r0, r3
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	2210      	movs	r2, #16
 80114d2:	4619      	mov	r1, r3
 80114d4:	f7ff fae6 	bl	8010aa4 <WIZCHIP_READ_BUF>
            ((wiz_IPAddress*)arg)->len = 16;
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	2210      	movs	r2, #16
 80114dc:	741a      	strb	r2, [r3, #16]
         else
         {
            getSn_DIPR(sn, ((wiz_IPAddress*)arg)->ip);
            ((wiz_IPAddress*)arg)->len = 4;
         } 
         break;
 80114de:	e0e5      	b.n	80116ac <getsockopt+0x358>
            getSn_DIPR(sn, ((wiz_IPAddress*)arg)->ip);
 80114e0:	79fb      	ldrb	r3, [r7, #7]
 80114e2:	009b      	lsls	r3, r3, #2
 80114e4:	3301      	adds	r3, #1
 80114e6:	00db      	lsls	r3, r3, #3
 80114e8:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 80114ec:	4618      	mov	r0, r3
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	2204      	movs	r2, #4
 80114f2:	4619      	mov	r1, r3
 80114f4:	f7ff fad6 	bl	8010aa4 <WIZCHIP_READ_BUF>
            ((wiz_IPAddress*)arg)->len = 4;
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	2204      	movs	r2, #4
 80114fc:	741a      	strb	r2, [r3, #16]
         break;
 80114fe:	e0d5      	b.n	80116ac <getsockopt+0x358>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORTR(sn);
 8011500:	79fb      	ldrb	r3, [r7, #7]
 8011502:	009b      	lsls	r3, r3, #2
 8011504:	3301      	adds	r3, #1
 8011506:	00db      	lsls	r3, r3, #3
 8011508:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
 801150c:	4618      	mov	r0, r3
 801150e:	f7ff fa61 	bl	80109d4 <WIZCHIP_READ>
 8011512:	4603      	mov	r3, r0
 8011514:	b29b      	uxth	r3, r3
 8011516:	021b      	lsls	r3, r3, #8
 8011518:	b29c      	uxth	r4, r3
 801151a:	79fb      	ldrb	r3, [r7, #7]
 801151c:	009b      	lsls	r3, r3, #2
 801151e:	3301      	adds	r3, #1
 8011520:	00da      	lsls	r2, r3, #3
 8011522:	4b67      	ldr	r3, [pc, #412]	; (80116c0 <getsockopt+0x36c>)
 8011524:	4413      	add	r3, r2
 8011526:	4618      	mov	r0, r3
 8011528:	f7ff fa54 	bl	80109d4 <WIZCHIP_READ>
 801152c:	4603      	mov	r3, r0
 801152e:	b29b      	uxth	r3, r3
 8011530:	4423      	add	r3, r4
 8011532:	b29a      	uxth	r2, r3
 8011534:	683b      	ldr	r3, [r7, #0]
 8011536:	801a      	strh	r2, [r3, #0]
         break; 
 8011538:	e0b8      	b.n	80116ac <getsockopt+0x358>
      case SO_KEEPALIVEAUTO:
         CHECK_TCPMODE();
 801153a:	79fb      	ldrb	r3, [r7, #7]
 801153c:	009b      	lsls	r3, r3, #2
 801153e:	3301      	adds	r3, #1
 8011540:	00db      	lsls	r3, r3, #3
 8011542:	4618      	mov	r0, r3
 8011544:	f7ff fa46 	bl	80109d4 <WIZCHIP_READ>
 8011548:	4603      	mov	r3, r0
 801154a:	f003 0303 	and.w	r3, r3, #3
 801154e:	2b01      	cmp	r3, #1
 8011550:	d002      	beq.n	8011558 <getsockopt+0x204>
 8011552:	f06f 0304 	mvn.w	r3, #4
 8011556:	e0aa      	b.n	80116ae <getsockopt+0x35a>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 8011558:	79fb      	ldrb	r3, [r7, #7]
 801155a:	009b      	lsls	r3, r3, #2
 801155c:	3301      	adds	r3, #1
 801155e:	00db      	lsls	r3, r3, #3
 8011560:	f503 33c4 	add.w	r3, r3, #100352	; 0x18800
 8011564:	4618      	mov	r0, r3
 8011566:	f7ff fa35 	bl	80109d4 <WIZCHIP_READ>
 801156a:	4603      	mov	r3, r0
 801156c:	b29a      	uxth	r2, r3
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	801a      	strh	r2, [r3, #0]
         break;
 8011572:	e09b      	b.n	80116ac <getsockopt+0x358>
      case SO_SENDBUF:
         *(datasize_t*) arg = getSn_TX_FSR(sn);
 8011574:	79fb      	ldrb	r3, [r7, #7]
 8011576:	4618      	mov	r0, r3
 8011578:	f7ff fac8 	bl	8010b0c <getSn_TX_FSR>
 801157c:	4603      	mov	r3, r0
 801157e:	461a      	mov	r2, r3
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	801a      	strh	r2, [r3, #0]
         break;
 8011584:	e092      	b.n	80116ac <getsockopt+0x358>
      case SO_RECVBUF:
         *(datasize_t*) arg = getSn_RX_RSR(sn);
 8011586:	79fb      	ldrb	r3, [r7, #7]
 8011588:	4618      	mov	r0, r3
 801158a:	f7ff faf5 	bl	8010b78 <getSn_RX_RSR>
 801158e:	4603      	mov	r3, r0
 8011590:	461a      	mov	r2, r3
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	801a      	strh	r2, [r3, #0]
         break;
 8011596:	e089      	b.n	80116ac <getsockopt+0x358>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 8011598:	79fb      	ldrb	r3, [r7, #7]
 801159a:	009b      	lsls	r3, r3, #2
 801159c:	3301      	adds	r3, #1
 801159e:	00db      	lsls	r3, r3, #3
 80115a0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80115a4:	4618      	mov	r0, r3
 80115a6:	f7ff fa15 	bl	80109d4 <WIZCHIP_READ>
 80115aa:	4603      	mov	r3, r0
 80115ac:	461a      	mov	r2, r3
 80115ae:	683b      	ldr	r3, [r7, #0]
 80115b0:	701a      	strb	r2, [r3, #0]
         break;
 80115b2:	e07b      	b.n	80116ac <getsockopt+0x358>
      case SO_EXTSTATUS:
         CHECK_TCPMODE();
 80115b4:	79fb      	ldrb	r3, [r7, #7]
 80115b6:	009b      	lsls	r3, r3, #2
 80115b8:	3301      	adds	r3, #1
 80115ba:	00db      	lsls	r3, r3, #3
 80115bc:	4618      	mov	r0, r3
 80115be:	f7ff fa09 	bl	80109d4 <WIZCHIP_READ>
 80115c2:	4603      	mov	r3, r0
 80115c4:	f003 0303 	and.w	r3, r3, #3
 80115c8:	2b01      	cmp	r3, #1
 80115ca:	d002      	beq.n	80115d2 <getsockopt+0x27e>
 80115cc:	f06f 0304 	mvn.w	r3, #4
 80115d0:	e06d      	b.n	80116ae <getsockopt+0x35a>
         *(uint8_t*) arg = getSn_ESR(sn) & 0x07;
 80115d2:	79fb      	ldrb	r3, [r7, #7]
 80115d4:	009b      	lsls	r3, r3, #2
 80115d6:	3301      	adds	r3, #1
 80115d8:	00db      	lsls	r3, r3, #3
 80115da:	f503 5344 	add.w	r3, r3, #12544	; 0x3100
 80115de:	4618      	mov	r0, r3
 80115e0:	f7ff f9f8 	bl	80109d4 <WIZCHIP_READ>
 80115e4:	4603      	mov	r3, r0
 80115e6:	f003 0307 	and.w	r3, r3, #7
 80115ea:	b2da      	uxtb	r2, r3
 80115ec:	683b      	ldr	r3, [r7, #0]
 80115ee:	701a      	strb	r2, [r3, #0]
         break;
 80115f0:	e05c      	b.n	80116ac <getsockopt+0x358>
      case SO_REMAINSIZE:
         if(getSn_MR(sn)==SOCK_CLOSED) return SOCKERR_SOCKSTATUS;
 80115f2:	79fb      	ldrb	r3, [r7, #7]
 80115f4:	009b      	lsls	r3, r3, #2
 80115f6:	3301      	adds	r3, #1
 80115f8:	00db      	lsls	r3, r3, #3
 80115fa:	4618      	mov	r0, r3
 80115fc:	f7ff f9ea 	bl	80109d4 <WIZCHIP_READ>
 8011600:	4603      	mov	r3, r0
 8011602:	2b00      	cmp	r3, #0
 8011604:	d102      	bne.n	801160c <getsockopt+0x2b8>
 8011606:	f06f 0306 	mvn.w	r3, #6
 801160a:	e050      	b.n	80116ae <getsockopt+0x35a>
         if(getSn_MR(sn) & 0x01)   *(uint16_t*)arg = getSn_RX_RSR(sn);
 801160c:	79fb      	ldrb	r3, [r7, #7]
 801160e:	009b      	lsls	r3, r3, #2
 8011610:	3301      	adds	r3, #1
 8011612:	00db      	lsls	r3, r3, #3
 8011614:	4618      	mov	r0, r3
 8011616:	f7ff f9dd 	bl	80109d4 <WIZCHIP_READ>
 801161a:	4603      	mov	r3, r0
 801161c:	f003 0301 	and.w	r3, r3, #1
 8011620:	2b00      	cmp	r3, #0
 8011622:	d008      	beq.n	8011636 <getsockopt+0x2e2>
 8011624:	79fb      	ldrb	r3, [r7, #7]
 8011626:	4618      	mov	r0, r3
 8011628:	f7ff faa6 	bl	8010b78 <getSn_RX_RSR>
 801162c:	4603      	mov	r3, r0
 801162e:	b29a      	uxth	r2, r3
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	801a      	strh	r2, [r3, #0]
         else                      *(uint16_t*)arg = sock_remained_size[sn];
         break;
 8011634:	e03a      	b.n	80116ac <getsockopt+0x358>
         else                      *(uint16_t*)arg = sock_remained_size[sn];
 8011636:	79fb      	ldrb	r3, [r7, #7]
 8011638:	4a22      	ldr	r2, [pc, #136]	; (80116c4 <getsockopt+0x370>)
 801163a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801163e:	b29a      	uxth	r2, r3
 8011640:	683b      	ldr	r3, [r7, #0]
 8011642:	801a      	strh	r2, [r3, #0]
         break;
 8011644:	e032      	b.n	80116ac <getsockopt+0x358>
      case SO_PACKINFO:
         if(getSn_MR(sn)==SOCK_CLOSED) return SOCKERR_SOCKSTATUS;
 8011646:	79fb      	ldrb	r3, [r7, #7]
 8011648:	009b      	lsls	r3, r3, #2
 801164a:	3301      	adds	r3, #1
 801164c:	00db      	lsls	r3, r3, #3
 801164e:	4618      	mov	r0, r3
 8011650:	f7ff f9c0 	bl	80109d4 <WIZCHIP_READ>
 8011654:	4603      	mov	r3, r0
 8011656:	2b00      	cmp	r3, #0
 8011658:	d102      	bne.n	8011660 <getsockopt+0x30c>
 801165a:	f06f 0306 	mvn.w	r3, #6
 801165e:	e026      	b.n	80116ae <getsockopt+0x35a>
         if(getSn_MR(sn) & 0x01)       return SOCKERR_SOCKMODE;
 8011660:	79fb      	ldrb	r3, [r7, #7]
 8011662:	009b      	lsls	r3, r3, #2
 8011664:	3301      	adds	r3, #1
 8011666:	00db      	lsls	r3, r3, #3
 8011668:	4618      	mov	r0, r3
 801166a:	f7ff f9b3 	bl	80109d4 <WIZCHIP_READ>
 801166e:	4603      	mov	r3, r0
 8011670:	f003 0301 	and.w	r3, r3, #1
 8011674:	2b00      	cmp	r3, #0
 8011676:	d002      	beq.n	801167e <getsockopt+0x32a>
 8011678:	f06f 0304 	mvn.w	r3, #4
 801167c:	e017      	b.n	80116ae <getsockopt+0x35a>
         else *(uint8_t*)arg = sock_pack_info[sn];
 801167e:	79fb      	ldrb	r3, [r7, #7]
 8011680:	4a11      	ldr	r2, [pc, #68]	; (80116c8 <getsockopt+0x374>)
 8011682:	5cd2      	ldrb	r2, [r2, r3]
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	701a      	strb	r2, [r3, #0]
         break;
 8011688:	e010      	b.n	80116ac <getsockopt+0x358>
      case SO_MODE:
         *(uint8_t*) arg = 0x0F & getSn_MR(sn);
 801168a:	79fb      	ldrb	r3, [r7, #7]
 801168c:	009b      	lsls	r3, r3, #2
 801168e:	3301      	adds	r3, #1
 8011690:	00db      	lsls	r3, r3, #3
 8011692:	4618      	mov	r0, r3
 8011694:	f7ff f99e 	bl	80109d4 <WIZCHIP_READ>
 8011698:	4603      	mov	r3, r0
 801169a:	f003 030f 	and.w	r3, r3, #15
 801169e:	b2da      	uxtb	r2, r3
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	701a      	strb	r2, [r3, #0]
         break;
 80116a4:	e002      	b.n	80116ac <getsockopt+0x358>
      default:
         return SOCKERR_SOCKOPT;
 80116a6:	f06f 0301 	mvn.w	r3, #1
 80116aa:	e000      	b.n	80116ae <getsockopt+0x35a>
   }
   return SOCK_OK;
 80116ac:	2301      	movs	r3, #1
}
 80116ae:	4618      	mov	r0, r3
 80116b0:	370c      	adds	r7, #12
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd90      	pop	{r4, r7, pc}
 80116b6:	bf00      	nop
 80116b8:	24010b64 	.word	0x24010b64
 80116bc:	00011100 	.word	0x00011100
 80116c0:	00014100 	.word	0x00014100
 80116c4:	24010b68 	.word	0x24010b68
 80116c8:	24010b78 	.word	0x24010b78

080116cc <wizchip_cris_enter>:
 * @details @ref wizchip_cris_enter() provides the default protection while @ref _WIZCHIP_ is accessed. \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_exit()
 */
void wizchip_cris_enter(void)   {}
 80116cc:	b480      	push	{r7}
 80116ce:	af00      	add	r7, sp, #0
 80116d0:	bf00      	nop
 80116d2:	46bd      	mov	sp, r7
 80116d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d8:	4770      	bx	lr

080116da <wizchip_cris_exit>:
 * @details @ref wizchip_cris_exit provides the default protection while @ref _WIZCHIP_ is accessed\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_enter()
 */
void wizchip_cris_exit(void)   {}
 80116da:	b480      	push	{r7}
 80116dc:	af00      	add	r7, sp, #0
 80116de:	bf00      	nop
 80116e0:	46bd      	mov	sp, r7
 80116e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e6:	4770      	bx	lr

080116e8 <wizchip_cs_select>:
 * @details @ref wizchip_cs_select() provides the default selection @ref _WIZCHIP_,\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_deselect()
 */
void wizchip_cs_select(void)   {}
 80116e8:	b480      	push	{r7}
 80116ea:	af00      	add	r7, sp, #0
 80116ec:	bf00      	nop
 80116ee:	46bd      	mov	sp, r7
 80116f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f4:	4770      	bx	lr

080116f6 <wizchip_cs_deselect>:
 * @details @ref wizchip_cs_deselect() provides the default de-selection @ref _WIZCHIP_, \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_select()
 */
void wizchip_cs_deselect(void)   {}
 80116f6:	b480      	push	{r7}
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	bf00      	nop
 80116fc:	46bd      	mov	sp, r7
 80116fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011702:	4770      	bx	lr

08011704 <wizchip_spi_read>:
 * @details @ref wizchip_spi_read() provides the default read one byte data from SPI of @ref _WIZCHIP_,\n
 *          but it is null function.
 * @return uint8_t 
 * @todo It should be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
uint8_t wizchip_spi_read(void)        {return 0;}
 8011704:	b480      	push	{r7}
 8011706:	af00      	add	r7, sp, #0
 8011708:	2300      	movs	r3, #0
 801170a:	4618      	mov	r0, r3
 801170c:	46bd      	mov	sp, r7
 801170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011712:	4770      	bx	lr

08011714 <wizchip_spi_write>:
 *          but it is null function.
 * @param wb uint8_t data to be written
 * @return void 
 * @todo It should be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
void wizchip_spi_write(uint8_t wb) {}
 8011714:	b480      	push	{r7}
 8011716:	b083      	sub	sp, #12
 8011718:	af00      	add	r7, sp, #0
 801171a:	4603      	mov	r3, r0
 801171c:	71fb      	strb	r3, [r7, #7]
 801171e:	bf00      	nop
 8011720:	370c      	adds	r7, #12
 8011722:	46bd      	mov	sp, r7
 8011724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011728:	4770      	bx	lr
	...

0801172c <wizchip_spi_read_buf>:
 * @return void
 * @note It is use @ref wizchip_spi_read() as default. \n
 *       It can be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
void wizchip_spi_read_buf(uint8_t* buf, datasize_t len)
{
 801172c:	b590      	push	{r4, r7, lr}
 801172e:	b085      	sub	sp, #20
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	460b      	mov	r3, r1
 8011736:	807b      	strh	r3, [r7, #2]
   for(datasize_t i=0; i < len; i++) *buf++ = WIZCHIP.IF.SPI._read_byte();
 8011738:	2300      	movs	r3, #0
 801173a:	81fb      	strh	r3, [r7, #14]
 801173c:	e00d      	b.n	801175a <wizchip_spi_read_buf+0x2e>
 801173e:	4b0c      	ldr	r3, [pc, #48]	; (8011770 <wizchip_spi_read_buf+0x44>)
 8011740:	699b      	ldr	r3, [r3, #24]
 8011742:	687c      	ldr	r4, [r7, #4]
 8011744:	1c62      	adds	r2, r4, #1
 8011746:	607a      	str	r2, [r7, #4]
 8011748:	4798      	blx	r3
 801174a:	4603      	mov	r3, r0
 801174c:	7023      	strb	r3, [r4, #0]
 801174e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011752:	b29b      	uxth	r3, r3
 8011754:	3301      	adds	r3, #1
 8011756:	b29b      	uxth	r3, r3
 8011758:	81fb      	strh	r3, [r7, #14]
 801175a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801175e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011762:	429a      	cmp	r2, r3
 8011764:	dbeb      	blt.n	801173e <wizchip_spi_read_buf+0x12>
}
 8011766:	bf00      	nop
 8011768:	bf00      	nop
 801176a:	3714      	adds	r7, #20
 801176c:	46bd      	mov	sp, r7
 801176e:	bd90      	pop	{r4, r7, pc}
 8011770:	240000f0 	.word	0x240000f0

08011774 <wizchip_spi_write_buf>:
 * @return void
 * @note It is use @ref wizchip_spi_write() as default. \n
 *       It can be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
void wizchip_spi_write_buf(uint8_t* buf, datasize_t len)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b084      	sub	sp, #16
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
 801177c:	460b      	mov	r3, r1
 801177e:	807b      	strh	r3, [r7, #2]
   for(datasize_t i=0; i < len; i++) WIZCHIP.IF.SPI._write_byte(*buf++);
 8011780:	2300      	movs	r3, #0
 8011782:	81fb      	strh	r3, [r7, #14]
 8011784:	e00d      	b.n	80117a2 <wizchip_spi_write_buf+0x2e>
 8011786:	4b0c      	ldr	r3, [pc, #48]	; (80117b8 <wizchip_spi_write_buf+0x44>)
 8011788:	69da      	ldr	r2, [r3, #28]
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	1c59      	adds	r1, r3, #1
 801178e:	6079      	str	r1, [r7, #4]
 8011790:	781b      	ldrb	r3, [r3, #0]
 8011792:	4618      	mov	r0, r3
 8011794:	4790      	blx	r2
 8011796:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801179a:	b29b      	uxth	r3, r3
 801179c:	3301      	adds	r3, #1
 801179e:	b29b      	uxth	r3, r3
 80117a0:	81fb      	strh	r3, [r7, #14]
 80117a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80117a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80117aa:	429a      	cmp	r2, r3
 80117ac:	dbeb      	blt.n	8011786 <wizchip_spi_write_buf+0x12>
}
 80117ae:	bf00      	nop
 80117b0:	bf00      	nop
 80117b2:	3710      	adds	r7, #16
 80117b4:	46bd      	mov	sp, r7
 80117b6:	bd80      	pop	{r7, pc}
 80117b8:	240000f0 	.word	0x240000f0

080117bc <reg_wizchip_cs_cbfunc>:
   if(!cris_ex)   WIZCHIP.CRIS._e_x_i_t_  = wizchip_cris_exit;
   else           WIZCHIP.CRIS._e_x_i_t_  = cris_ex;
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80117bc:	b480      	push	{r7}
 80117be:	b083      	sub	sp, #12
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	6078      	str	r0, [r7, #4]
 80117c4:	6039      	str	r1, [r7, #0]
   if(!cs_sel)    WIZCHIP.CS._s_e_l_e_c_t_   = wizchip_cs_select;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d103      	bne.n	80117d4 <reg_wizchip_cs_cbfunc+0x18>
 80117cc:	4b0b      	ldr	r3, [pc, #44]	; (80117fc <reg_wizchip_cs_cbfunc+0x40>)
 80117ce:	4a0c      	ldr	r2, [pc, #48]	; (8011800 <reg_wizchip_cs_cbfunc+0x44>)
 80117d0:	611a      	str	r2, [r3, #16]
 80117d2:	e002      	b.n	80117da <reg_wizchip_cs_cbfunc+0x1e>
   else           WIZCHIP.CS._s_e_l_e_c_t_   = cs_sel; 
 80117d4:	4a09      	ldr	r2, [pc, #36]	; (80117fc <reg_wizchip_cs_cbfunc+0x40>)
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6113      	str	r3, [r2, #16]
   if(!cs_desel)  WIZCHIP.CS._d_e_s_e_l_e_c_t_ = wizchip_cs_deselect;
 80117da:	683b      	ldr	r3, [r7, #0]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d103      	bne.n	80117e8 <reg_wizchip_cs_cbfunc+0x2c>
 80117e0:	4b06      	ldr	r3, [pc, #24]	; (80117fc <reg_wizchip_cs_cbfunc+0x40>)
 80117e2:	4a08      	ldr	r2, [pc, #32]	; (8011804 <reg_wizchip_cs_cbfunc+0x48>)
 80117e4:	615a      	str	r2, [r3, #20]
   else           WIZCHIP.CS._d_e_s_e_l_e_c_t_ = cs_desel;
}
 80117e6:	e002      	b.n	80117ee <reg_wizchip_cs_cbfunc+0x32>
   else           WIZCHIP.CS._d_e_s_e_l_e_c_t_ = cs_desel;
 80117e8:	4a04      	ldr	r2, [pc, #16]	; (80117fc <reg_wizchip_cs_cbfunc+0x40>)
 80117ea:	683b      	ldr	r3, [r7, #0]
 80117ec:	6153      	str	r3, [r2, #20]
}
 80117ee:	bf00      	nop
 80117f0:	370c      	adds	r7, #12
 80117f2:	46bd      	mov	sp, r7
 80117f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f8:	4770      	bx	lr
 80117fa:	bf00      	nop
 80117fc:	240000f0 	.word	0x240000f0
 8011800:	080116e9 	.word	0x080116e9
 8011804:	080116f7 	.word	0x080116f7

08011808 <reg_wizchip_spi_cbfunc>:
#if (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_)
void reg_wizchip_spi_cbfunc( uint8_t (*spi_rb)(void), 
                             void (*spi_wb)(uint8_t wb),
                             void (*spi_rbuf)(uint8_t* buf, datasize_t len),
                             void (*spi_wbuf)(uint8_t* buf, datasize_t len) )
{
 8011808:	b480      	push	{r7}
 801180a:	b085      	sub	sp, #20
 801180c:	af00      	add	r7, sp, #0
 801180e:	60f8      	str	r0, [r7, #12]
 8011810:	60b9      	str	r1, [r7, #8]
 8011812:	607a      	str	r2, [r7, #4]
 8011814:	603b      	str	r3, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8011816:	bf00      	nop
 8011818:	4b19      	ldr	r3, [pc, #100]	; (8011880 <reg_wizchip_spi_cbfunc+0x78>)
 801181a:	881b      	ldrh	r3, [r3, #0]
 801181c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011820:	2b00      	cmp	r3, #0
 8011822:	d0f9      	beq.n	8011818 <reg_wizchip_spi_cbfunc+0x10>
   
   if(!spi_rb)    WIZCHIP.IF.SPI._read_byte      = wizchip_spi_read;
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d103      	bne.n	8011832 <reg_wizchip_spi_cbfunc+0x2a>
 801182a:	4b15      	ldr	r3, [pc, #84]	; (8011880 <reg_wizchip_spi_cbfunc+0x78>)
 801182c:	4a15      	ldr	r2, [pc, #84]	; (8011884 <reg_wizchip_spi_cbfunc+0x7c>)
 801182e:	619a      	str	r2, [r3, #24]
 8011830:	e002      	b.n	8011838 <reg_wizchip_spi_cbfunc+0x30>
   else           WIZCHIP.IF.SPI._read_byte      = spi_rb;
 8011832:	4a13      	ldr	r2, [pc, #76]	; (8011880 <reg_wizchip_spi_cbfunc+0x78>)
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	6193      	str	r3, [r2, #24]
   if(!spi_wb)    WIZCHIP.IF.SPI._write_byte     = wizchip_spi_write;
 8011838:	68bb      	ldr	r3, [r7, #8]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d103      	bne.n	8011846 <reg_wizchip_spi_cbfunc+0x3e>
 801183e:	4b10      	ldr	r3, [pc, #64]	; (8011880 <reg_wizchip_spi_cbfunc+0x78>)
 8011840:	4a11      	ldr	r2, [pc, #68]	; (8011888 <reg_wizchip_spi_cbfunc+0x80>)
 8011842:	61da      	str	r2, [r3, #28]
 8011844:	e002      	b.n	801184c <reg_wizchip_spi_cbfunc+0x44>
   else           WIZCHIP.IF.SPI._write_byte     = spi_wb;
 8011846:	4a0e      	ldr	r2, [pc, #56]	; (8011880 <reg_wizchip_spi_cbfunc+0x78>)
 8011848:	68bb      	ldr	r3, [r7, #8]
 801184a:	61d3      	str	r3, [r2, #28]

   if(!spi_rbuf)  WIZCHIP.IF.SPI._read_byte_buf  = wizchip_spi_read_buf;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d103      	bne.n	801185a <reg_wizchip_spi_cbfunc+0x52>
 8011852:	4b0b      	ldr	r3, [pc, #44]	; (8011880 <reg_wizchip_spi_cbfunc+0x78>)
 8011854:	4a0d      	ldr	r2, [pc, #52]	; (801188c <reg_wizchip_spi_cbfunc+0x84>)
 8011856:	621a      	str	r2, [r3, #32]
 8011858:	e002      	b.n	8011860 <reg_wizchip_spi_cbfunc+0x58>
   else           WIZCHIP.IF.SPI._read_byte_buf  = spi_rbuf;
 801185a:	4a09      	ldr	r2, [pc, #36]	; (8011880 <reg_wizchip_spi_cbfunc+0x78>)
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	6213      	str	r3, [r2, #32]
   if(!spi_wbuf)  WIZCHIP.IF.SPI._write_byte_buf = wizchip_spi_write_buf;
 8011860:	683b      	ldr	r3, [r7, #0]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d103      	bne.n	801186e <reg_wizchip_spi_cbfunc+0x66>
 8011866:	4b06      	ldr	r3, [pc, #24]	; (8011880 <reg_wizchip_spi_cbfunc+0x78>)
 8011868:	4a09      	ldr	r2, [pc, #36]	; (8011890 <reg_wizchip_spi_cbfunc+0x88>)
 801186a:	625a      	str	r2, [r3, #36]	; 0x24
   else           WIZCHIP.IF.SPI._write_byte_buf = spi_wbuf;
}
 801186c:	e002      	b.n	8011874 <reg_wizchip_spi_cbfunc+0x6c>
   else           WIZCHIP.IF.SPI._write_byte_buf = spi_wbuf;
 801186e:	4a04      	ldr	r2, [pc, #16]	; (8011880 <reg_wizchip_spi_cbfunc+0x78>)
 8011870:	683b      	ldr	r3, [r7, #0]
 8011872:	6253      	str	r3, [r2, #36]	; 0x24
}
 8011874:	bf00      	nop
 8011876:	3714      	adds	r7, #20
 8011878:	46bd      	mov	sp, r7
 801187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187e:	4770      	bx	lr
 8011880:	240000f0 	.word	0x240000f0
 8011884:	08011705 	.word	0x08011705
 8011888:	08011715 	.word	0x08011715
 801188c:	0801172d 	.word	0x0801172d
 8011890:	08011775 	.word	0x08011775

08011894 <ctlwizchip>:
#endif

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8011894:	b590      	push	{r4, r7, lr}
 8011896:	b087      	sub	sp, #28
 8011898:	af00      	add	r7, sp, #0
 801189a:	4603      	mov	r3, r0
 801189c:	6039      	str	r1, [r7, #0]
 801189e:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = *(uint8_t*) arg;
 80118a0:	683b      	ldr	r3, [r7, #0]
 80118a2:	781b      	ldrb	r3, [r3, #0]
 80118a4:	75fb      	strb	r3, [r7, #23]

   uint8_t* ptmp[2] = {0,0};
 80118a6:	2300      	movs	r3, #0
 80118a8:	60fb      	str	r3, [r7, #12]
 80118aa:	2300      	movs	r3, #0
 80118ac:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 80118ae:	79fb      	ldrb	r3, [r7, #7]
 80118b0:	2b17      	cmp	r3, #23
 80118b2:	f200 8163 	bhi.w	8011b7c <ctlwizchip+0x2e8>
 80118b6:	a201      	add	r2, pc, #4	; (adr r2, 80118bc <ctlwizchip+0x28>)
 80118b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118bc:	0801191d 	.word	0x0801191d
 80118c0:	08011957 	.word	0x08011957
 80118c4:	08011991 	.word	0x08011991
 80118c8:	080119a5 	.word	0x080119a5
 80118cc:	080119ab 	.word	0x080119ab
 80118d0:	080119cb 	.word	0x080119cb
 80118d4:	080119d7 	.word	0x080119d7
 80118d8:	080119e3 	.word	0x080119e3
 80118dc:	080119ef 	.word	0x080119ef
 80118e0:	080119fb 	.word	0x080119fb
 80118e4:	08011a1d 	.word	0x08011a1d
 80118e8:	08011a3f 	.word	0x08011a3f
 80118ec:	08011a75 	.word	0x08011a75
 80118f0:	08011a87 	.word	0x08011a87
 80118f4:	08011ac1 	.word	0x08011ac1
 80118f8:	08011ae7 	.word	0x08011ae7
 80118fc:	08011b25 	.word	0x08011b25
 8011900:	08011b39 	.word	0x08011b39
 8011904:	08011b3f 	.word	0x08011b3f
 8011908:	08011b47 	.word	0x08011b47
 801190c:	08011b4f 	.word	0x08011b4f
 8011910:	08011b57 	.word	0x08011b57
 8011914:	08011b61 	.word	0x08011b61
 8011918:	08011b6f 	.word	0x08011b6f
   {
      case CW_SYS_LOCK:
         if(tmp & SYS_CHIP_LOCK) CHIPLOCK();
 801191c:	7dfb      	ldrb	r3, [r7, #23]
 801191e:	f003 0304 	and.w	r3, r3, #4
 8011922:	2b00      	cmp	r3, #0
 8011924:	d003      	beq.n	801192e <ctlwizchip+0x9a>
 8011926:	21ff      	movs	r1, #255	; 0xff
 8011928:	489b      	ldr	r0, [pc, #620]	; (8011b98 <ctlwizchip+0x304>)
 801192a:	f7ff f821 	bl	8010970 <WIZCHIP_WRITE>
         if(tmp & SYS_NET_LOCK)  NETLOCK();
 801192e:	7dfb      	ldrb	r3, [r7, #23]
 8011930:	f003 0302 	and.w	r3, r3, #2
 8011934:	2b00      	cmp	r3, #0
 8011936:	d003      	beq.n	8011940 <ctlwizchip+0xac>
 8011938:	21c5      	movs	r1, #197	; 0xc5
 801193a:	4898      	ldr	r0, [pc, #608]	; (8011b9c <ctlwizchip+0x308>)
 801193c:	f7ff f818 	bl	8010970 <WIZCHIP_WRITE>
         if(tmp & SYS_PHY_LOCK)  PHYLOCK();
 8011940:	7dfb      	ldrb	r3, [r7, #23]
 8011942:	f003 0301 	and.w	r3, r3, #1
 8011946:	2b00      	cmp	r3, #0
 8011948:	f000 811b 	beq.w	8011b82 <ctlwizchip+0x2ee>
 801194c:	21ff      	movs	r1, #255	; 0xff
 801194e:	4894      	ldr	r0, [pc, #592]	; (8011ba0 <ctlwizchip+0x30c>)
 8011950:	f7ff f80e 	bl	8010970 <WIZCHIP_WRITE>
         break;
 8011954:	e115      	b.n	8011b82 <ctlwizchip+0x2ee>
      case CW_SYS_UNLOCK:
         if(tmp & SYS_CHIP_LOCK) CHIPUNLOCK();
 8011956:	7dfb      	ldrb	r3, [r7, #23]
 8011958:	f003 0304 	and.w	r3, r3, #4
 801195c:	2b00      	cmp	r3, #0
 801195e:	d003      	beq.n	8011968 <ctlwizchip+0xd4>
 8011960:	21ce      	movs	r1, #206	; 0xce
 8011962:	488d      	ldr	r0, [pc, #564]	; (8011b98 <ctlwizchip+0x304>)
 8011964:	f7ff f804 	bl	8010970 <WIZCHIP_WRITE>
         if(tmp & SYS_NET_LOCK)  NETUNLOCK();
 8011968:	7dfb      	ldrb	r3, [r7, #23]
 801196a:	f003 0302 	and.w	r3, r3, #2
 801196e:	2b00      	cmp	r3, #0
 8011970:	d003      	beq.n	801197a <ctlwizchip+0xe6>
 8011972:	213a      	movs	r1, #58	; 0x3a
 8011974:	4889      	ldr	r0, [pc, #548]	; (8011b9c <ctlwizchip+0x308>)
 8011976:	f7fe fffb 	bl	8010970 <WIZCHIP_WRITE>
         if(tmp & SYS_PHY_LOCK)  PHYUNLOCK();
 801197a:	7dfb      	ldrb	r3, [r7, #23]
 801197c:	f003 0301 	and.w	r3, r3, #1
 8011980:	2b00      	cmp	r3, #0
 8011982:	f000 8100 	beq.w	8011b86 <ctlwizchip+0x2f2>
 8011986:	2153      	movs	r1, #83	; 0x53
 8011988:	4885      	ldr	r0, [pc, #532]	; (8011ba0 <ctlwizchip+0x30c>)
 801198a:	f7fe fff1 	bl	8010970 <WIZCHIP_WRITE>
         break;
 801198e:	e0fa      	b.n	8011b86 <ctlwizchip+0x2f2>
      case CW_GET_SYSLOCK:
         *(uint8_t*)arg = getSYSR() >> 5;
 8011990:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8011994:	f7ff f81e 	bl	80109d4 <WIZCHIP_READ>
 8011998:	4603      	mov	r3, r0
 801199a:	095b      	lsrs	r3, r3, #5
 801199c:	b2da      	uxtb	r2, r3
 801199e:	683b      	ldr	r3, [r7, #0]
 80119a0:	701a      	strb	r2, [r3, #0]
         break;
 80119a2:	e0f3      	b.n	8011b8c <ctlwizchip+0x2f8>
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80119a4:	f000 f958 	bl	8011c58 <wizchip_sw_reset>
         break;
 80119a8:	e0f0      	b.n	8011b8c <ctlwizchip+0x2f8>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80119aa:	683b      	ldr	r3, [r7, #0]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d004      	beq.n	80119ba <ctlwizchip+0x126>
         {
            ptmp[0] = (uint8_t*)arg;
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	3308      	adds	r3, #8
 80119b8:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	693a      	ldr	r2, [r7, #16]
 80119be:	4611      	mov	r1, r2
 80119c0:	4618      	mov	r0, r3
 80119c2:	f000 f9fd 	bl	8011dc0 <wizchip_init>
 80119c6:	4603      	mov	r3, r0
 80119c8:	e0e1      	b.n	8011b8e <ctlwizchip+0x2fa>
      case CW_GET_INTERRUPT:
        *(intr_kind*)arg = wizchip_getinterrupt();
 80119ca:	f000 fabf 	bl	8011f4c <wizchip_getinterrupt>
 80119ce:	4602      	mov	r2, r0
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	601a      	str	r2, [r3, #0]
         break;
 80119d4:	e0da      	b.n	8011b8c <ctlwizchip+0x2f8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*(intr_kind*)arg);
 80119d6:	683b      	ldr	r3, [r7, #0]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	4618      	mov	r0, r3
 80119dc:	f000 fa7c 	bl	8011ed8 <wizchip_clrinterrupt>
         break;
 80119e0:	e0d4      	b.n	8011b8c <ctlwizchip+0x2f8>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*(intr_kind*)arg);
 80119e2:	683b      	ldr	r3, [r7, #0]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	4618      	mov	r0, r3
 80119e8:	f000 face 	bl	8011f88 <wizchip_setinterruptmask>
         break;         
 80119ec:	e0ce      	b.n	8011b8c <ctlwizchip+0x2f8>
      case CW_GET_INTRMASK:
         *(intr_kind*)arg = wizchip_getinterruptmask();
 80119ee:	f000 faf1 	bl	8011fd4 <wizchip_getinterruptmask>
 80119f2:	4602      	mov	r2, r0
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	601a      	str	r2, [r3, #0]
         break;   
 80119f8:	e0c8      	b.n	8011b8c <ctlwizchip+0x2f8>
      case CW_SET_INTRTIME:
         setINTPTMR(*(uint16_t*)arg);
 80119fa:	683b      	ldr	r3, [r7, #0]
 80119fc:	881b      	ldrh	r3, [r3, #0]
 80119fe:	0a1b      	lsrs	r3, r3, #8
 8011a00:	b29b      	uxth	r3, r3
 8011a02:	b2db      	uxtb	r3, r3
 8011a04:	4619      	mov	r1, r3
 8011a06:	4867      	ldr	r0, [pc, #412]	; (8011ba4 <ctlwizchip+0x310>)
 8011a08:	f7fe ffb2 	bl	8010970 <WIZCHIP_WRITE>
 8011a0c:	683b      	ldr	r3, [r7, #0]
 8011a0e:	881b      	ldrh	r3, [r3, #0]
 8011a10:	b2db      	uxtb	r3, r3
 8011a12:	4619      	mov	r1, r3
 8011a14:	4864      	ldr	r0, [pc, #400]	; (8011ba8 <ctlwizchip+0x314>)
 8011a16:	f7fe ffab 	bl	8010970 <WIZCHIP_WRITE>
         break;
 8011a1a:	e0b7      	b.n	8011b8c <ctlwizchip+0x2f8>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTPTMR();
 8011a1c:	4861      	ldr	r0, [pc, #388]	; (8011ba4 <ctlwizchip+0x310>)
 8011a1e:	f7fe ffd9 	bl	80109d4 <WIZCHIP_READ>
 8011a22:	4603      	mov	r3, r0
 8011a24:	b29b      	uxth	r3, r3
 8011a26:	021b      	lsls	r3, r3, #8
 8011a28:	b29c      	uxth	r4, r3
 8011a2a:	485f      	ldr	r0, [pc, #380]	; (8011ba8 <ctlwizchip+0x314>)
 8011a2c:	f7fe ffd2 	bl	80109d4 <WIZCHIP_READ>
 8011a30:	4603      	mov	r3, r0
 8011a32:	b29b      	uxth	r3, r3
 8011a34:	4423      	add	r3, r4
 8011a36:	b29a      	uxth	r2, r3
 8011a38:	683b      	ldr	r3, [r7, #0]
 8011a3a:	801a      	strh	r2, [r3, #0]
         break;   
 8011a3c:	e0a6      	b.n	8011b8c <ctlwizchip+0x2f8>
      case CW_SET_IEN:
         tmp = getSYCR1();
 8011a3e:	485b      	ldr	r0, [pc, #364]	; (8011bac <ctlwizchip+0x318>)
 8011a40:	f7fe ffc8 	bl	80109d4 <WIZCHIP_READ>
 8011a44:	4603      	mov	r3, r0
 8011a46:	75fb      	strb	r3, [r7, #23]
         if(*(uint8_t*)arg == 1) setSYCR1(tmp | SYCR1_IEN);
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	781b      	ldrb	r3, [r3, #0]
 8011a4c:	2b01      	cmp	r3, #1
 8011a4e:	d108      	bne.n	8011a62 <ctlwizchip+0x1ce>
 8011a50:	7dfb      	ldrb	r3, [r7, #23]
 8011a52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011a56:	b2db      	uxtb	r3, r3
 8011a58:	4619      	mov	r1, r3
 8011a5a:	4854      	ldr	r0, [pc, #336]	; (8011bac <ctlwizchip+0x318>)
 8011a5c:	f7fe ff88 	bl	8010970 <WIZCHIP_WRITE>
         else                      setSYCR1(tmp & ~SYCR1_IEN);
         break;
 8011a60:	e094      	b.n	8011b8c <ctlwizchip+0x2f8>
         else                      setSYCR1(tmp & ~SYCR1_IEN);
 8011a62:	7dfb      	ldrb	r3, [r7, #23]
 8011a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011a68:	b2db      	uxtb	r3, r3
 8011a6a:	4619      	mov	r1, r3
 8011a6c:	484f      	ldr	r0, [pc, #316]	; (8011bac <ctlwizchip+0x318>)
 8011a6e:	f7fe ff7f 	bl	8010970 <WIZCHIP_WRITE>
         break;
 8011a72:	e08b      	b.n	8011b8c <ctlwizchip+0x2f8>
      case CW_GET_IEN:
         *((uint8_t*)arg) = getSYCR1() >> 7;
 8011a74:	484d      	ldr	r0, [pc, #308]	; (8011bac <ctlwizchip+0x318>)
 8011a76:	f7fe ffad 	bl	80109d4 <WIZCHIP_READ>
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	09db      	lsrs	r3, r3, #7
 8011a7e:	b2da      	uxtb	r2, r3
 8011a80:	683b      	ldr	r3, [r7, #0]
 8011a82:	701a      	strb	r2, [r3, #0]
         break;
 8011a84:	e082      	b.n	8011b8c <ctlwizchip+0x2f8>
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8011a86:	4b4a      	ldr	r3, [pc, #296]	; (8011bb0 <ctlwizchip+0x31c>)
 8011a88:	789a      	ldrb	r2, [r3, #2]
 8011a8a:	683b      	ldr	r3, [r7, #0]
 8011a8c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	3301      	adds	r3, #1
 8011a92:	4a47      	ldr	r2, [pc, #284]	; (8011bb0 <ctlwizchip+0x31c>)
 8011a94:	78d2      	ldrb	r2, [r2, #3]
 8011a96:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8011a98:	683b      	ldr	r3, [r7, #0]
 8011a9a:	3302      	adds	r3, #2
 8011a9c:	4a44      	ldr	r2, [pc, #272]	; (8011bb0 <ctlwizchip+0x31c>)
 8011a9e:	7912      	ldrb	r2, [r2, #4]
 8011aa0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	3303      	adds	r3, #3
 8011aa6:	4a42      	ldr	r2, [pc, #264]	; (8011bb0 <ctlwizchip+0x31c>)
 8011aa8:	7952      	ldrb	r2, [r2, #5]
 8011aaa:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	3304      	adds	r3, #4
 8011ab0:	4a3f      	ldr	r2, [pc, #252]	; (8011bb0 <ctlwizchip+0x31c>)
 8011ab2:	7992      	ldrb	r2, [r2, #6]
 8011ab4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8011ab6:	683b      	ldr	r3, [r7, #0]
 8011ab8:	3305      	adds	r3, #5
 8011aba:	2200      	movs	r2, #0
 8011abc:	701a      	strb	r2, [r3, #0]
         break;   
 8011abe:	e065      	b.n	8011b8c <ctlwizchip+0x2f8>
      case CW_GET_VER:
         *(uint16_t*)arg = getVER();
 8011ac0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011ac4:	f7fe ff86 	bl	80109d4 <WIZCHIP_READ>
 8011ac8:	4603      	mov	r3, r0
 8011aca:	b29b      	uxth	r3, r3
 8011acc:	021b      	lsls	r3, r3, #8
 8011ace:	b29c      	uxth	r4, r3
 8011ad0:	f44f 7040 	mov.w	r0, #768	; 0x300
 8011ad4:	f7fe ff7e 	bl	80109d4 <WIZCHIP_READ>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	b29b      	uxth	r3, r3
 8011adc:	4423      	add	r3, r4
 8011ade:	b29a      	uxth	r2, r3
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	801a      	strh	r2, [r3, #0]
         break;
 8011ae4:	e052      	b.n	8011b8c <ctlwizchip+0x2f8>
      case CW_SET_SYSCLK:
         tmp = getSYCR1();
 8011ae6:	4831      	ldr	r0, [pc, #196]	; (8011bac <ctlwizchip+0x318>)
 8011ae8:	f7fe ff74 	bl	80109d4 <WIZCHIP_READ>
 8011aec:	4603      	mov	r3, r0
 8011aee:	75fb      	strb	r3, [r7, #23]
         if(*(uint8_t*)arg == SYSCLK_100MHZ)     setSYCR1(tmp & ~SYCR1_CLKSEL);
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	781b      	ldrb	r3, [r3, #0]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d108      	bne.n	8011b0a <ctlwizchip+0x276>
 8011af8:	7dfb      	ldrb	r3, [r7, #23]
 8011afa:	f023 0301 	bic.w	r3, r3, #1
 8011afe:	b2db      	uxtb	r3, r3
 8011b00:	4619      	mov	r1, r3
 8011b02:	482a      	ldr	r0, [pc, #168]	; (8011bac <ctlwizchip+0x318>)
 8011b04:	f7fe ff34 	bl	8010970 <WIZCHIP_WRITE>
         else if(*(uint8_t*)arg == SYSCLK_25MHZ) setSYCR1(tmp |  SYCR1_CLKSEL);
         break;
 8011b08:	e03f      	b.n	8011b8a <ctlwizchip+0x2f6>
         else if(*(uint8_t*)arg == SYSCLK_25MHZ) setSYCR1(tmp |  SYCR1_CLKSEL);
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	781b      	ldrb	r3, [r3, #0]
 8011b0e:	2b01      	cmp	r3, #1
 8011b10:	d13b      	bne.n	8011b8a <ctlwizchip+0x2f6>
 8011b12:	7dfb      	ldrb	r3, [r7, #23]
 8011b14:	f043 0301 	orr.w	r3, r3, #1
 8011b18:	b2db      	uxtb	r3, r3
 8011b1a:	4619      	mov	r1, r3
 8011b1c:	4823      	ldr	r0, [pc, #140]	; (8011bac <ctlwizchip+0x318>)
 8011b1e:	f7fe ff27 	bl	8010970 <WIZCHIP_WRITE>
         break;
 8011b22:	e032      	b.n	8011b8a <ctlwizchip+0x2f6>
      case CW_GET_SYSCLK:
         *(uint8_t*)arg = (getSYCR1() & SYCR1_CLKSEL);
 8011b24:	4821      	ldr	r0, [pc, #132]	; (8011bac <ctlwizchip+0x318>)
 8011b26:	f7fe ff55 	bl	80109d4 <WIZCHIP_READ>
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	f003 0301 	and.w	r3, r3, #1
 8011b30:	b2da      	uxtb	r2, r3
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	701a      	strb	r2, [r3, #0]
         break;
 8011b36:	e029      	b.n	8011b8c <ctlwizchip+0x2f8>
      case CW_RESET_PHY:
         wizphy_reset();
 8011b38:	f000 fa7a 	bl	8012030 <wizphy_reset>
         break;
 8011b3c:	e026      	b.n	8011b8c <ctlwizchip+0x2f8>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8011b3e:	6838      	ldr	r0, [r7, #0]
 8011b40:	f000 fa96 	bl	8012070 <wizphy_setphyconf>
         break;
 8011b44:	e022      	b.n	8011b8c <ctlwizchip+0x2f8>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8011b46:	6838      	ldr	r0, [r7, #0]
 8011b48:	f000 fade 	bl	8012108 <wizphy_getphyconf>
         break;
 8011b4c:	e01e      	b.n	8011b8c <ctlwizchip+0x2f8>
      case CW_GET_PHYSTATUS:
         wizphy_getphystatus((wiz_PhyConf*)arg);
 8011b4e:	6838      	ldr	r0, [r7, #0]
 8011b50:	f000 fb1a 	bl	8012188 <wizphy_getphystatus>
         break;
 8011b54:	e01a      	b.n	8011b8c <ctlwizchip+0x2f8>
      case CW_SET_PHYPOWMODE:
         wizphy_setphypmode(tmp);
 8011b56:	7dfb      	ldrb	r3, [r7, #23]
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f000 fb55 	bl	8012208 <wizphy_setphypmode>
         break;
 8011b5e:	e015      	b.n	8011b8c <ctlwizchip+0x2f8>
      case CW_GET_PHYPOWMODE:
         *(uint8_t*)arg = wizphy_getphypmode();
 8011b60:	f000 fb74 	bl	801224c <wizphy_getphypmode>
 8011b64:	4603      	mov	r3, r0
 8011b66:	b2da      	uxtb	r2, r3
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	701a      	strb	r2, [r3, #0]
         break;
 8011b6c:	e00e      	b.n	8011b8c <ctlwizchip+0x2f8>
      case CW_GET_PHYLINK:
         *(uint8_t*)arg = wizphy_getphylink();
 8011b6e:	f000 fa51 	bl	8012014 <wizphy_getphylink>
 8011b72:	4603      	mov	r3, r0
 8011b74:	b2da      	uxtb	r2, r3
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	701a      	strb	r2, [r3, #0]
         break;
 8011b7a:	e007      	b.n	8011b8c <ctlwizchip+0x2f8>
      default:
         return -1;
 8011b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8011b80:	e005      	b.n	8011b8e <ctlwizchip+0x2fa>
         break;
 8011b82:	bf00      	nop
 8011b84:	e002      	b.n	8011b8c <ctlwizchip+0x2f8>
         break;
 8011b86:	bf00      	nop
 8011b88:	e000      	b.n	8011b8c <ctlwizchip+0x2f8>
         break;
 8011b8a:	bf00      	nop
   }
   return 0;
 8011b8c:	2300      	movs	r3, #0
}
 8011b8e:	4618      	mov	r0, r3
 8011b90:	371c      	adds	r7, #28
 8011b92:	46bd      	mov	sp, r7
 8011b94:	bd90      	pop	{r4, r7, pc}
 8011b96:	bf00      	nop
 8011b98:	0041f400 	.word	0x0041f400
 8011b9c:	0041f500 	.word	0x0041f500
 8011ba0:	0041f600 	.word	0x0041f600
 8011ba4:	0041c500 	.word	0x0041c500
 8011ba8:	0041c600 	.word	0x0041c600
 8011bac:	00200500 	.word	0x00200500
 8011bb0:	240000f0 	.word	0x240000f0

08011bb4 <ctlnetwork>:

int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b082      	sub	sp, #8
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	4603      	mov	r3, r0
 8011bbc:	6039      	str	r1, [r7, #0]
 8011bbe:	71fb      	strb	r3, [r7, #7]
   switch(cntype)
 8011bc0:	79fb      	ldrb	r3, [r7, #7]
 8011bc2:	2b07      	cmp	r3, #7
 8011bc4:	d83d      	bhi.n	8011c42 <ctlnetwork+0x8e>
 8011bc6:	a201      	add	r2, pc, #4	; (adr r2, 8011bcc <ctlnetwork+0x18>)
 8011bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bcc:	08011bed 	.word	0x08011bed
 8011bd0:	08011bf5 	.word	0x08011bf5
 8011bd4:	08011bfd 	.word	0x08011bfd
 8011bd8:	08011c09 	.word	0x08011c09
 8011bdc:	08011c15 	.word	0x08011c15
 8011be0:	08011c1d 	.word	0x08011c1d
 8011be4:	08011c25 	.word	0x08011c25
 8011be8:	08011c33 	.word	0x08011c33
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8011bec:	6838      	ldr	r0, [r7, #0]
 8011bee:	f000 fb3f 	bl	8012270 <wizchip_setnetinfo>
         break;
 8011bf2:	e029      	b.n	8011c48 <ctlnetwork+0x94>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8011bf4:	6838      	ldr	r0, [r7, #0]
 8011bf6:	f000 fbb9 	bl	801236c <wizchip_getnetinfo>
         break;
 8011bfa:	e025      	b.n	8011c48 <ctlnetwork+0x94>
      case CN_SET_NETMODE:
         wizchip_setnetmode(*(netmode_type*)arg);
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	4618      	mov	r0, r3
 8011c02:	f000 fc33 	bl	801246c <wizchip_setnetmode>
         break;
 8011c06:	e01f      	b.n	8011c48 <ctlnetwork+0x94>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8011c08:	f000 fc5c 	bl	80124c4 <wizchip_getnetmode>
 8011c0c:	4602      	mov	r2, r0
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	601a      	str	r2, [r3, #0]
         break;
 8011c12:	e019      	b.n	8011c48 <ctlnetwork+0x94>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8011c14:	6838      	ldr	r0, [r7, #0]
 8011c16:	f000 fc83 	bl	8012520 <wizchip_settimeout>
         break;
 8011c1a:	e015      	b.n	8011c48 <ctlnetwork+0x94>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8011c1c:	6838      	ldr	r0, [r7, #0]
 8011c1e:	f000 fcbf 	bl	80125a0 <wizchip_gettimeout>
         break;
 8011c22:	e011      	b.n	8011c48 <ctlnetwork+0x94>
      case CN_SET_PREFER:
         setSLPSR(*(uint8_t*)arg);
 8011c24:	683b      	ldr	r3, [r7, #0]
 8011c26:	781b      	ldrb	r3, [r3, #0]
 8011c28:	4619      	mov	r1, r3
 8011c2a:	480a      	ldr	r0, [pc, #40]	; (8011c54 <ctlnetwork+0xa0>)
 8011c2c:	f7fe fea0 	bl	8010970 <WIZCHIP_WRITE>
         break;
 8011c30:	e00a      	b.n	8011c48 <ctlnetwork+0x94>
      case CN_GET_PREFER:
    	  *(uint8_t*)arg= getSLPSR();
 8011c32:	4808      	ldr	r0, [pc, #32]	; (8011c54 <ctlnetwork+0xa0>)
 8011c34:	f7fe fece 	bl	80109d4 <WIZCHIP_READ>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	461a      	mov	r2, r3
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	701a      	strb	r2, [r3, #0]
         break;
 8011c40:	e002      	b.n	8011c48 <ctlnetwork+0x94>
      default:
         return -1;
 8011c42:	f04f 33ff 	mov.w	r3, #4294967295
 8011c46:	e000      	b.n	8011c4a <ctlnetwork+0x96>
   }
   return 0;
 8011c48:	2300      	movs	r3, #0
}
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	3708      	adds	r7, #8
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	bd80      	pop	{r7, pc}
 8011c52:	bf00      	nop
 8011c54:	00212c00 	.word	0x00212c00

08011c58 <wizchip_sw_reset>:
          break;
   }
}

void wizchip_sw_reset(void)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b096      	sub	sp, #88	; 0x58
 8011c5c:	af00      	add	r7, sp, #0
   uint8_t gw[4], sn[4], sip[4], gw6[16], sn6[16], lla[16], gua[16];
   uint8_t mac[6];
   uint8_t islock = getSYSR();
 8011c5e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8011c62:	f7fe feb7 	bl	80109d4 <WIZCHIP_READ>
 8011c66:	4603      	mov	r3, r0
 8011c68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

   CHIPUNLOCK();
 8011c6c:	21ce      	movs	r1, #206	; 0xce
 8011c6e:	4849      	ldr	r0, [pc, #292]	; (8011d94 <wizchip_sw_reset+0x13c>)
 8011c70:	f7fe fe7e 	bl	8010970 <WIZCHIP_WRITE>

   getSHAR(mac);
 8011c74:	463b      	mov	r3, r7
 8011c76:	2206      	movs	r2, #6
 8011c78:	4619      	mov	r1, r3
 8011c7a:	4847      	ldr	r0, [pc, #284]	; (8011d98 <wizchip_sw_reset+0x140>)
 8011c7c:	f7fe ff12 	bl	8010aa4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);	getGA6R(gw6); getSUB6R(sn6); getLLAR(lla); getGUAR(gua);
 8011c80:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011c84:	2204      	movs	r2, #4
 8011c86:	4619      	mov	r1, r3
 8011c88:	4844      	ldr	r0, [pc, #272]	; (8011d9c <wizchip_sw_reset+0x144>)
 8011c8a:	f7fe ff0b 	bl	8010aa4 <WIZCHIP_READ_BUF>
 8011c8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011c92:	2204      	movs	r2, #4
 8011c94:	4619      	mov	r1, r3
 8011c96:	4842      	ldr	r0, [pc, #264]	; (8011da0 <wizchip_sw_reset+0x148>)
 8011c98:	f7fe ff04 	bl	8010aa4 <WIZCHIP_READ_BUF>
 8011c9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011ca0:	2204      	movs	r2, #4
 8011ca2:	4619      	mov	r1, r3
 8011ca4:	483f      	ldr	r0, [pc, #252]	; (8011da4 <wizchip_sw_reset+0x14c>)
 8011ca6:	f7fe fefd 	bl	8010aa4 <WIZCHIP_READ_BUF>
 8011caa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011cae:	2210      	movs	r2, #16
 8011cb0:	4619      	mov	r1, r3
 8011cb2:	483d      	ldr	r0, [pc, #244]	; (8011da8 <wizchip_sw_reset+0x150>)
 8011cb4:	f7fe fef6 	bl	8010aa4 <WIZCHIP_READ_BUF>
 8011cb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011cbc:	2210      	movs	r2, #16
 8011cbe:	4619      	mov	r1, r3
 8011cc0:	483a      	ldr	r0, [pc, #232]	; (8011dac <wizchip_sw_reset+0x154>)
 8011cc2:	f7fe feef 	bl	8010aa4 <WIZCHIP_READ_BUF>
 8011cc6:	f107 0318 	add.w	r3, r7, #24
 8011cca:	2210      	movs	r2, #16
 8011ccc:	4619      	mov	r1, r3
 8011cce:	4838      	ldr	r0, [pc, #224]	; (8011db0 <wizchip_sw_reset+0x158>)
 8011cd0:	f7fe fee8 	bl	8010aa4 <WIZCHIP_READ_BUF>
 8011cd4:	f107 0308 	add.w	r3, r7, #8
 8011cd8:	2210      	movs	r2, #16
 8011cda:	4619      	mov	r1, r3
 8011cdc:	4835      	ldr	r0, [pc, #212]	; (8011db4 <wizchip_sw_reset+0x15c>)
 8011cde:	f7fe fee1 	bl	8010aa4 <WIZCHIP_READ_BUF>
   setSYCR0(SYCR0_RST);
 8011ce2:	2100      	movs	r1, #0
 8011ce4:	4834      	ldr	r0, [pc, #208]	; (8011db8 <wizchip_sw_reset+0x160>)
 8011ce6:	f7fe fe43 	bl	8010970 <WIZCHIP_WRITE>
   getSYCR0(); // for delay
 8011cea:	4833      	ldr	r0, [pc, #204]	; (8011db8 <wizchip_sw_reset+0x160>)
 8011cec:	f7fe fe72 	bl	80109d4 <WIZCHIP_READ>

   NETUNLOCK();
 8011cf0:	213a      	movs	r1, #58	; 0x3a
 8011cf2:	4832      	ldr	r0, [pc, #200]	; (8011dbc <wizchip_sw_reset+0x164>)
 8011cf4:	f7fe fe3c 	bl	8010970 <WIZCHIP_WRITE>

   setSHAR(mac);
 8011cf8:	463b      	mov	r3, r7
 8011cfa:	2206      	movs	r2, #6
 8011cfc:	4619      	mov	r1, r3
 8011cfe:	4826      	ldr	r0, [pc, #152]	; (8011d98 <wizchip_sw_reset+0x140>)
 8011d00:	f7fe fe98 	bl	8010a34 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8011d04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011d08:	2204      	movs	r2, #4
 8011d0a:	4619      	mov	r1, r3
 8011d0c:	4823      	ldr	r0, [pc, #140]	; (8011d9c <wizchip_sw_reset+0x144>)
 8011d0e:	f7fe fe91 	bl	8010a34 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8011d12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011d16:	2204      	movs	r2, #4
 8011d18:	4619      	mov	r1, r3
 8011d1a:	4821      	ldr	r0, [pc, #132]	; (8011da0 <wizchip_sw_reset+0x148>)
 8011d1c:	f7fe fe8a 	bl	8010a34 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8011d20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011d24:	2204      	movs	r2, #4
 8011d26:	4619      	mov	r1, r3
 8011d28:	481e      	ldr	r0, [pc, #120]	; (8011da4 <wizchip_sw_reset+0x14c>)
 8011d2a:	f7fe fe83 	bl	8010a34 <WIZCHIP_WRITE_BUF>
   setGA6R(gw6); 
 8011d2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011d32:	2210      	movs	r2, #16
 8011d34:	4619      	mov	r1, r3
 8011d36:	481c      	ldr	r0, [pc, #112]	; (8011da8 <wizchip_sw_reset+0x150>)
 8011d38:	f7fe fe7c 	bl	8010a34 <WIZCHIP_WRITE_BUF>
   setSUB6R(sn6); 
 8011d3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011d40:	2210      	movs	r2, #16
 8011d42:	4619      	mov	r1, r3
 8011d44:	4819      	ldr	r0, [pc, #100]	; (8011dac <wizchip_sw_reset+0x154>)
 8011d46:	f7fe fe75 	bl	8010a34 <WIZCHIP_WRITE_BUF>
   setLLAR(lla);
 8011d4a:	f107 0318 	add.w	r3, r7, #24
 8011d4e:	2210      	movs	r2, #16
 8011d50:	4619      	mov	r1, r3
 8011d52:	4817      	ldr	r0, [pc, #92]	; (8011db0 <wizchip_sw_reset+0x158>)
 8011d54:	f7fe fe6e 	bl	8010a34 <WIZCHIP_WRITE_BUF>
   setGUAR(gua);
 8011d58:	f107 0308 	add.w	r3, r7, #8
 8011d5c:	2210      	movs	r2, #16
 8011d5e:	4619      	mov	r1, r3
 8011d60:	4814      	ldr	r0, [pc, #80]	; (8011db4 <wizchip_sw_reset+0x15c>)
 8011d62:	f7fe fe67 	bl	8010a34 <WIZCHIP_WRITE_BUF>
   if(islock & SYSR_CHPL) CHIPLOCK();
 8011d66:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	da03      	bge.n	8011d76 <wizchip_sw_reset+0x11e>
 8011d6e:	21ff      	movs	r1, #255	; 0xff
 8011d70:	4808      	ldr	r0, [pc, #32]	; (8011d94 <wizchip_sw_reset+0x13c>)
 8011d72:	f7fe fdfd 	bl	8010970 <WIZCHIP_WRITE>
   if(islock & SYSR_NETL) NETLOCK();
 8011d76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d003      	beq.n	8011d8a <wizchip_sw_reset+0x132>
 8011d82:	21c5      	movs	r1, #197	; 0xc5
 8011d84:	480d      	ldr	r0, [pc, #52]	; (8011dbc <wizchip_sw_reset+0x164>)
 8011d86:	f7fe fdf3 	bl	8010970 <WIZCHIP_WRITE>
}
 8011d8a:	bf00      	nop
 8011d8c:	3758      	adds	r7, #88	; 0x58
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}
 8011d92:	bf00      	nop
 8011d94:	0041f400 	.word	0x0041f400
 8011d98:	00412000 	.word	0x00412000
 8011d9c:	00413000 	.word	0x00413000
 8011da0:	00413400 	.word	0x00413400
 8011da4:	00413800 	.word	0x00413800
 8011da8:	00417000 	.word	0x00417000
 8011dac:	00416000 	.word	0x00416000
 8011db0:	00414000 	.word	0x00414000
 8011db4:	00415000 	.word	0x00415000
 8011db8:	00200400 	.word	0x00200400
 8011dbc:	0041f500 	.word	0x0041f500

08011dc0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b084      	sub	sp, #16
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
 8011dc8:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 8011dca:	2300      	movs	r3, #0
 8011dcc:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8011dce:	f7ff ff43 	bl	8011c58 <wizchip_sw_reset>
   if(txsize)
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d03b      	beq.n	8011e50 <wizchip_init+0x90>
   {
      tmp = 0;
 8011dd8:	2300      	movs	r3, #0
 8011dda:	73bb      	strb	r3, [r7, #14]
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8011ddc:	2300      	movs	r3, #0
 8011dde:	73fb      	strb	r3, [r7, #15]
 8011de0:	e015      	b.n	8011e0e <wizchip_init+0x4e>
			{
				tmp += txsize[i];		
 8011de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011de6:	687a      	ldr	r2, [r7, #4]
 8011de8:	4413      	add	r3, r2
 8011dea:	781a      	ldrb	r2, [r3, #0]
 8011dec:	7bbb      	ldrb	r3, [r7, #14]
 8011dee:	4413      	add	r3, r2
 8011df0:	b2db      	uxtb	r3, r3
 8011df2:	73bb      	strb	r3, [r7, #14]
				if(tmp > 2*_WIZCHIP_SOCK_NUM_) return -1;		
 8011df4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011df8:	2b10      	cmp	r3, #16
 8011dfa:	dd02      	ble.n	8011e02 <wizchip_init+0x42>
 8011dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8011e00:	e066      	b.n	8011ed0 <wizchip_init+0x110>
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8011e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e06:	b2db      	uxtb	r3, r3
 8011e08:	3301      	adds	r3, #1
 8011e0a:	b2db      	uxtb	r3, r3
 8011e0c:	73fb      	strb	r3, [r7, #15]
 8011e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e12:	2b07      	cmp	r3, #7
 8011e14:	dde5      	ble.n	8011de2 <wizchip_init+0x22>
			}
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++) setSn_TXBUF_SIZE(i, txsize[i]);			
 8011e16:	2300      	movs	r3, #0
 8011e18:	73fb      	strb	r3, [r7, #15]
 8011e1a:	e015      	b.n	8011e48 <wizchip_init+0x88>
 8011e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e20:	009b      	lsls	r3, r3, #2
 8011e22:	3301      	adds	r3, #1
 8011e24:	00db      	lsls	r3, r3, #3
 8011e26:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e30:	687a      	ldr	r2, [r7, #4]
 8011e32:	4413      	add	r3, r2
 8011e34:	781b      	ldrb	r3, [r3, #0]
 8011e36:	4619      	mov	r1, r3
 8011e38:	f7fe fd9a 	bl	8010970 <WIZCHIP_WRITE>
 8011e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e40:	b2db      	uxtb	r3, r3
 8011e42:	3301      	adds	r3, #1
 8011e44:	b2db      	uxtb	r3, r3
 8011e46:	73fb      	strb	r3, [r7, #15]
 8011e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e4c:	2b07      	cmp	r3, #7
 8011e4e:	dde5      	ble.n	8011e1c <wizchip_init+0x5c>
   }
   if(rxsize)
 8011e50:	683b      	ldr	r3, [r7, #0]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d03b      	beq.n	8011ece <wizchip_init+0x10e>
   {
      tmp = 0;
 8011e56:	2300      	movs	r3, #0
 8011e58:	73bb      	strb	r3, [r7, #14]
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	73fb      	strb	r3, [r7, #15]
 8011e5e:	e015      	b.n	8011e8c <wizchip_init+0xcc>
			{
				tmp += rxsize[i];		
 8011e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e64:	683a      	ldr	r2, [r7, #0]
 8011e66:	4413      	add	r3, r2
 8011e68:	781a      	ldrb	r2, [r3, #0]
 8011e6a:	7bbb      	ldrb	r3, [r7, #14]
 8011e6c:	4413      	add	r3, r2
 8011e6e:	b2db      	uxtb	r3, r3
 8011e70:	73bb      	strb	r3, [r7, #14]
				if(tmp > 2*_WIZCHIP_SOCK_NUM_) return -1;		
 8011e72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011e76:	2b10      	cmp	r3, #16
 8011e78:	dd02      	ble.n	8011e80 <wizchip_init+0xc0>
 8011e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8011e7e:	e027      	b.n	8011ed0 <wizchip_init+0x110>
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8011e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e84:	b2db      	uxtb	r3, r3
 8011e86:	3301      	adds	r3, #1
 8011e88:	b2db      	uxtb	r3, r3
 8011e8a:	73fb      	strb	r3, [r7, #15]
 8011e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e90:	2b07      	cmp	r3, #7
 8011e92:	dde5      	ble.n	8011e60 <wizchip_init+0xa0>
			}
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++) setSn_RXBUF_SIZE(i, rxsize[i]);
 8011e94:	2300      	movs	r3, #0
 8011e96:	73fb      	strb	r3, [r7, #15]
 8011e98:	e015      	b.n	8011ec6 <wizchip_init+0x106>
 8011e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e9e:	009b      	lsls	r3, r3, #2
 8011ea0:	3301      	adds	r3, #1
 8011ea2:	00db      	lsls	r3, r3, #3
 8011ea4:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011eae:	683a      	ldr	r2, [r7, #0]
 8011eb0:	4413      	add	r3, r2
 8011eb2:	781b      	ldrb	r3, [r3, #0]
 8011eb4:	4619      	mov	r1, r3
 8011eb6:	f7fe fd5b 	bl	8010970 <WIZCHIP_WRITE>
 8011eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ebe:	b2db      	uxtb	r3, r3
 8011ec0:	3301      	adds	r3, #1
 8011ec2:	b2db      	uxtb	r3, r3
 8011ec4:	73fb      	strb	r3, [r7, #15]
 8011ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011eca:	2b07      	cmp	r3, #7
 8011ecc:	dde5      	ble.n	8011e9a <wizchip_init+0xda>
   }
   return 0;
 8011ece:	2300      	movs	r3, #0
}
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	3710      	adds	r7, #16
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}

08011ed8 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b084      	sub	sp, #16
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
   int i;
   uint8_t ir   = (uint8_t)intr;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	72fb      	strb	r3, [r7, #11]
   uint8_t sir  = (uint8_t)((uint32_t)intr >> 8);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	0a1b      	lsrs	r3, r3, #8
 8011ee8:	72bb      	strb	r3, [r7, #10]
   uint8_t slir = (uint8_t)((uint32_t)intr >> 16);
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	0c1b      	lsrs	r3, r3, #16
 8011eee:	727b      	strb	r3, [r7, #9]
   setIRCLR(ir);
 8011ef0:	7afb      	ldrb	r3, [r7, #11]
 8011ef2:	4619      	mov	r1, r3
 8011ef4:	4813      	ldr	r0, [pc, #76]	; (8011f44 <wizchip_clrinterrupt+0x6c>)
 8011ef6:	f7fe fd3b 	bl	8010970 <WIZCHIP_WRITE>
   for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 8011efa:	2300      	movs	r3, #0
 8011efc:	60fb      	str	r3, [r7, #12]
 8011efe:	e014      	b.n	8011f2a <wizchip_clrinterrupt+0x52>
   {
   	if(sir&(1<<i))   	setSn_IRCLR(i,0xFF);
 8011f00:	7aba      	ldrb	r2, [r7, #10]
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	fa42 f303 	asr.w	r3, r2, r3
 8011f08:	f003 0301 	and.w	r3, r3, #1
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d009      	beq.n	8011f24 <wizchip_clrinterrupt+0x4c>
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	009b      	lsls	r3, r3, #2
 8011f14:	3301      	adds	r3, #1
 8011f16:	00db      	lsls	r3, r3, #3
 8011f18:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8011f1c:	21ff      	movs	r1, #255	; 0xff
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f7fe fd26 	bl	8010970 <WIZCHIP_WRITE>
   for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	3301      	adds	r3, #1
 8011f28:	60fb      	str	r3, [r7, #12]
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	2b07      	cmp	r3, #7
 8011f2e:	dde7      	ble.n	8011f00 <wizchip_clrinterrupt+0x28>
   }
   setSLIRCLR(slir);
 8011f30:	7a7b      	ldrb	r3, [r7, #9]
 8011f32:	4619      	mov	r1, r3
 8011f34:	4804      	ldr	r0, [pc, #16]	; (8011f48 <wizchip_clrinterrupt+0x70>)
 8011f36:	f7fe fd1b 	bl	8010970 <WIZCHIP_WRITE>
}
 8011f3a:	bf00      	nop
 8011f3c:	3710      	adds	r7, #16
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}
 8011f42:	bf00      	nop
 8011f44:	00210800 	.word	0x00210800
 8011f48:	00212800 	.word	0x00212800

08011f4c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8011f4c:	b590      	push	{r4, r7, lr}
 8011f4e:	b083      	sub	sp, #12
 8011f50:	af00      	add	r7, sp, #0
   uint32_t ret;
   ret = (((uint32_t)getSLIR())<<16) | (((uint32_t)getSIR())<<8) | (((uint32_t)getIR()));
 8011f52:	480b      	ldr	r0, [pc, #44]	; (8011f80 <wizchip_getinterrupt+0x34>)
 8011f54:	f7fe fd3e 	bl	80109d4 <WIZCHIP_READ>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	041c      	lsls	r4, r3, #16
 8011f5c:	4809      	ldr	r0, [pc, #36]	; (8011f84 <wizchip_getinterrupt+0x38>)
 8011f5e:	f7fe fd39 	bl	80109d4 <WIZCHIP_READ>
 8011f62:	4603      	mov	r3, r0
 8011f64:	021b      	lsls	r3, r3, #8
 8011f66:	431c      	orrs	r4, r3
 8011f68:	f44f 1004 	mov.w	r0, #2162688	; 0x210000
 8011f6c:	f7fe fd32 	bl	80109d4 <WIZCHIP_READ>
 8011f70:	4603      	mov	r3, r0
 8011f72:	4323      	orrs	r3, r4
 8011f74:	607b      	str	r3, [r7, #4]
   return (intr_kind)ret;
 8011f76:	687b      	ldr	r3, [r7, #4]
}
 8011f78:	4618      	mov	r0, r3
 8011f7a:	370c      	adds	r7, #12
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	bd90      	pop	{r4, r7, pc}
 8011f80:	00210200 	.word	0x00210200
 8011f84:	00210100 	.word	0x00210100

08011f88 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b084      	sub	sp, #16
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
   uint8_t imr   = (uint8_t)intr;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	73fb      	strb	r3, [r7, #15]
   uint8_t simr  = (uint8_t)((uint32_t)intr >> 8);
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	0a1b      	lsrs	r3, r3, #8
 8011f98:	73bb      	strb	r3, [r7, #14]
   uint8_t slimr = (uint8_t)((uint32_t)intr >> 16);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	0c1b      	lsrs	r3, r3, #16
 8011f9e:	737b      	strb	r3, [r7, #13]
   setIMR(imr);
 8011fa0:	7bfb      	ldrb	r3, [r7, #15]
 8011fa2:	4619      	mov	r1, r3
 8011fa4:	4808      	ldr	r0, [pc, #32]	; (8011fc8 <wizchip_setinterruptmask+0x40>)
 8011fa6:	f7fe fce3 	bl	8010970 <WIZCHIP_WRITE>
   setSIMR(simr);
 8011faa:	7bbb      	ldrb	r3, [r7, #14]
 8011fac:	4619      	mov	r1, r3
 8011fae:	4807      	ldr	r0, [pc, #28]	; (8011fcc <wizchip_setinterruptmask+0x44>)
 8011fb0:	f7fe fcde 	bl	8010970 <WIZCHIP_WRITE>
   setSLIMR(slimr);
 8011fb4:	7b7b      	ldrb	r3, [r7, #13]
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	4805      	ldr	r0, [pc, #20]	; (8011fd0 <wizchip_setinterruptmask+0x48>)
 8011fba:	f7fe fcd9 	bl	8010970 <WIZCHIP_WRITE>
}
 8011fbe:	bf00      	nop
 8011fc0:	3710      	adds	r7, #16
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	bd80      	pop	{r7, pc}
 8011fc6:	bf00      	nop
 8011fc8:	00210400 	.word	0x00210400
 8011fcc:	00211400 	.word	0x00211400
 8011fd0:	00212400 	.word	0x00212400

08011fd4 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8011fd4:	b590      	push	{r4, r7, lr}
 8011fd6:	b083      	sub	sp, #12
 8011fd8:	af00      	add	r7, sp, #0
   uint32_t ret;
   ret = (((uint32_t)getSLIMR())<<16) | (((uint32_t)getSIMR())<<8) | (((uint32_t)getIMR()));
 8011fda:	480b      	ldr	r0, [pc, #44]	; (8012008 <wizchip_getinterruptmask+0x34>)
 8011fdc:	f7fe fcfa 	bl	80109d4 <WIZCHIP_READ>
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	041c      	lsls	r4, r3, #16
 8011fe4:	4809      	ldr	r0, [pc, #36]	; (801200c <wizchip_getinterruptmask+0x38>)
 8011fe6:	f7fe fcf5 	bl	80109d4 <WIZCHIP_READ>
 8011fea:	4603      	mov	r3, r0
 8011fec:	021b      	lsls	r3, r3, #8
 8011fee:	431c      	orrs	r4, r3
 8011ff0:	4807      	ldr	r0, [pc, #28]	; (8012010 <wizchip_getinterruptmask+0x3c>)
 8011ff2:	f7fe fcef 	bl	80109d4 <WIZCHIP_READ>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	4323      	orrs	r3, r4
 8011ffa:	607b      	str	r3, [r7, #4]
   return (intr_kind)ret;
 8011ffc:	687b      	ldr	r3, [r7, #4]
}
 8011ffe:	4618      	mov	r0, r3
 8012000:	370c      	adds	r7, #12
 8012002:	46bd      	mov	sp, r7
 8012004:	bd90      	pop	{r4, r7, pc}
 8012006:	bf00      	nop
 8012008:	00212400 	.word	0x00212400
 801200c:	00211400 	.word	0x00211400
 8012010:	00210400 	.word	0x00210400

08012014 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   return (getPHYSR() & PHYSR_LNK);
 8012018:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 801201c:	f7fe fcda 	bl	80109d4 <WIZCHIP_READ>
 8012020:	4603      	mov	r3, r0
 8012022:	b25b      	sxtb	r3, r3
 8012024:	f003 0301 	and.w	r3, r3, #1
 8012028:	b25b      	sxtb	r3, r3
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
   if(wiz_mdio_read(PHYRAR_BMSR) & BMSR_LINK_STATUS) return PHY_LINK_ON;
   return PHY_LINK_OFF;
#endif  
}
 801202a:	4618      	mov	r0, r3
 801202c:	bd80      	pop	{r7, pc}
	...

08012030 <wizphy_reset>:

void wizphy_reset(void)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b082      	sub	sp, #8
 8012034:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = getPHYCR1() | PHYCR1_RST;
 8012036:	480c      	ldr	r0, [pc, #48]	; (8012068 <wizphy_reset+0x38>)
 8012038:	f7fe fccc 	bl	80109d4 <WIZCHIP_READ>
 801203c:	4603      	mov	r3, r0
 801203e:	f043 0301 	orr.w	r3, r3, #1
 8012042:	71fb      	strb	r3, [r7, #7]
   PHYUNLOCK();
 8012044:	2153      	movs	r1, #83	; 0x53
 8012046:	4809      	ldr	r0, [pc, #36]	; (801206c <wizphy_reset+0x3c>)
 8012048:	f7fe fc92 	bl	8010970 <WIZCHIP_WRITE>
   setPHYCR1(tmp);
 801204c:	79fb      	ldrb	r3, [r7, #7]
 801204e:	4619      	mov	r1, r3
 8012050:	4805      	ldr	r0, [pc, #20]	; (8012068 <wizphy_reset+0x38>)
 8012052:	f7fe fc8d 	bl	8010970 <WIZCHIP_WRITE>
   PHYLOCK();
 8012056:	21ff      	movs	r1, #255	; 0xff
 8012058:	4804      	ldr	r0, [pc, #16]	; (801206c <wizphy_reset+0x3c>)
 801205a:	f7fe fc89 	bl	8010970 <WIZCHIP_WRITE>
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
	wiz_mdio_write(PHYRAR_BMCR, wiz_mdio_read(PHYRAR_BMCR) | BMCR_RST);
	while(wiz_mdio_read(PHYRAR_BMCR) & BMCR_RST);
#endif
}
 801205e:	bf00      	nop
 8012060:	3708      	adds	r7, #8
 8012062:	46bd      	mov	sp, r7
 8012064:	bd80      	pop	{r7, pc}
 8012066:	bf00      	nop
 8012068:	00301d00 	.word	0x00301d00
 801206c:	0041f600 	.word	0x0041f600

08012070 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b084      	sub	sp, #16
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = 0;
 8012078:	2300      	movs	r3, #0
 801207a:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_TE)
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	781b      	ldrb	r3, [r3, #0]
 8012080:	2b02      	cmp	r3, #2
 8012082:	d10d      	bne.n	80120a0 <wizphy_setphyconf+0x30>
   {
      setPHYCR1(getPHYCR1() | PHYCR1_TE);
 8012084:	481e      	ldr	r0, [pc, #120]	; (8012100 <wizphy_setphyconf+0x90>)
 8012086:	f7fe fca5 	bl	80109d4 <WIZCHIP_READ>
 801208a:	4603      	mov	r3, r0
 801208c:	f043 0308 	orr.w	r3, r3, #8
 8012090:	b2db      	uxtb	r3, r3
 8012092:	4619      	mov	r1, r3
 8012094:	481a      	ldr	r0, [pc, #104]	; (8012100 <wizphy_setphyconf+0x90>)
 8012096:	f7fe fc6b 	bl	8010970 <WIZCHIP_WRITE>
      tmp = PHYCR0_AUTO;
 801209a:	2300      	movs	r3, #0
 801209c:	73fb      	strb	r3, [r7, #15]
 801209e:	e025      	b.n	80120ec <wizphy_setphyconf+0x7c>
   }
   else
   {
      setPHYCR1(getPHYCR1() & ~PHYCR1_TE);
 80120a0:	4817      	ldr	r0, [pc, #92]	; (8012100 <wizphy_setphyconf+0x90>)
 80120a2:	f7fe fc97 	bl	80109d4 <WIZCHIP_READ>
 80120a6:	4603      	mov	r3, r0
 80120a8:	f023 0308 	bic.w	r3, r3, #8
 80120ac:	b2db      	uxtb	r3, r3
 80120ae:	4619      	mov	r1, r3
 80120b0:	4813      	ldr	r0, [pc, #76]	; (8012100 <wizphy_setphyconf+0x90>)
 80120b2:	f7fe fc5d 	bl	8010970 <WIZCHIP_WRITE>
      if(phyconf->mode == PHY_MODE_AUTONEGO) tmp = PHYCR0_AUTO;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	781b      	ldrb	r3, [r3, #0]
 80120ba:	2b01      	cmp	r3, #1
 80120bc:	d102      	bne.n	80120c4 <wizphy_setphyconf+0x54>
 80120be:	2300      	movs	r3, #0
 80120c0:	73fb      	strb	r3, [r7, #15]
 80120c2:	e013      	b.n	80120ec <wizphy_setphyconf+0x7c>
      else
      {
         tmp |= 0x04;
 80120c4:	7bfb      	ldrb	r3, [r7, #15]
 80120c6:	f043 0304 	orr.w	r3, r3, #4
 80120ca:	73fb      	strb	r3, [r7, #15]
         if(phyconf->speed  == PHY_SPEED_10)    tmp |= 0x02;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	785b      	ldrb	r3, [r3, #1]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d103      	bne.n	80120dc <wizphy_setphyconf+0x6c>
 80120d4:	7bfb      	ldrb	r3, [r7, #15]
 80120d6:	f043 0302 	orr.w	r3, r3, #2
 80120da:	73fb      	strb	r3, [r7, #15]
         if(phyconf->duplex == PHY_DUPLEX_HALF) tmp |= 0x01;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	789b      	ldrb	r3, [r3, #2]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d103      	bne.n	80120ec <wizphy_setphyconf+0x7c>
 80120e4:	7bfb      	ldrb	r3, [r7, #15]
 80120e6:	f043 0301 	orr.w	r3, r3, #1
 80120ea:	73fb      	strb	r3, [r7, #15]
      }
   }
   setPHYCR0(tmp);
 80120ec:	7bfb      	ldrb	r3, [r7, #15]
 80120ee:	4619      	mov	r1, r3
 80120f0:	4804      	ldr	r0, [pc, #16]	; (8012104 <wizphy_setphyconf+0x94>)
 80120f2:	f7fe fc3d 	bl	8010970 <WIZCHIP_WRITE>
         if(phyconf->speed == PHY_SPEED_100)    tmp |= BMCR_SPD;
      }
      wiz_mdio_write(PHYRAR_BMCR, tmp);
   }
#endif   
}
 80120f6:	bf00      	nop
 80120f8:	3710      	adds	r7, #16
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}
 80120fe:	bf00      	nop
 8012100:	00301d00 	.word	0x00301d00
 8012104:	00301c00 	.word	0x00301c00

08012108 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b084      	sub	sp, #16
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = 0;
 8012110:	2300      	movs	r3, #0
 8012112:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYSR();
 8012114:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8012118:	f7fe fc5c 	bl	80109d4 <WIZCHIP_READ>
 801211c:	4603      	mov	r3, r0
 801211e:	73fb      	strb	r3, [r7, #15]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
 8012120:	4818      	ldr	r0, [pc, #96]	; (8012184 <wizphy_getphyconf+0x7c>)
 8012122:	f7fe fc57 	bl	80109d4 <WIZCHIP_READ>
 8012126:	4603      	mov	r3, r0
 8012128:	f003 0308 	and.w	r3, r3, #8
 801212c:	2b00      	cmp	r3, #0
 801212e:	d003      	beq.n	8012138 <wizphy_getphyconf+0x30>
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	2202      	movs	r2, #2
 8012134:	701a      	strb	r2, [r3, #0]
 8012136:	e00a      	b.n	801214e <wizphy_getphyconf+0x46>
   else                        phyconf->mode = (tmp & (1<<5)) ? PHY_MODE_MANUAL : PHY_MODE_AUTONEGO ;
 8012138:	7bfb      	ldrb	r3, [r7, #15]
 801213a:	f003 0320 	and.w	r3, r3, #32
 801213e:	2b00      	cmp	r3, #0
 8012140:	bf0c      	ite	eq
 8012142:	2301      	moveq	r3, #1
 8012144:	2300      	movne	r3, #0
 8012146:	b2db      	uxtb	r3, r3
 8012148:	461a      	mov	r2, r3
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	701a      	strb	r2, [r3, #0]
   phyconf->speed  = (tmp & (1<<4)) ? PHY_SPEED_10    : PHY_SPEED_100;
 801214e:	7bfb      	ldrb	r3, [r7, #15]
 8012150:	f003 0310 	and.w	r3, r3, #16
 8012154:	2b00      	cmp	r3, #0
 8012156:	bf0c      	ite	eq
 8012158:	2301      	moveq	r3, #1
 801215a:	2300      	movne	r3, #0
 801215c:	b2db      	uxtb	r3, r3
 801215e:	461a      	mov	r2, r3
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	705a      	strb	r2, [r3, #1]
   phyconf->duplex = (tmp & (1<<3)) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
 8012164:	7bfb      	ldrb	r3, [r7, #15]
 8012166:	f003 0308 	and.w	r3, r3, #8
 801216a:	2b00      	cmp	r3, #0
 801216c:	bf0c      	ite	eq
 801216e:	2301      	moveq	r3, #1
 8012170:	2300      	movne	r3, #0
 8012172:	b2db      	uxtb	r3, r3
 8012174:	461a      	mov	r2, r3
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	709a      	strb	r2, [r3, #2]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
   else phyconf->mode   = (tmp & BMCR_ANE) ? PHY_MODE_AUTONEGO : PHY_MODE_MANUAL;
   phyconf->duplex = (tmp & BMCR_DPX) ? PHY_DUPLEX_FULL   : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & BMCR_SPD) ? PHY_SPEED_100     : PHY_SPEED_10;
#endif
}
 801217a:	bf00      	nop
 801217c:	3710      	adds	r7, #16
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}
 8012182:	bf00      	nop
 8012184:	00301d00 	.word	0x00301d00

08012188 <wizphy_getphystatus>:

void wizphy_getphystatus(wiz_PhyConf* phyconf)
{
 8012188:	b580      	push	{r7, lr}
 801218a:	b084      	sub	sp, #16
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8012190:	2300      	movs	r3, #0
 8012192:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYSR();
 8012194:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8012198:	f7fe fc1c 	bl	80109d4 <WIZCHIP_READ>
 801219c:	4603      	mov	r3, r0
 801219e:	73fb      	strb	r3, [r7, #15]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
 80121a0:	4818      	ldr	r0, [pc, #96]	; (8012204 <wizphy_getphystatus+0x7c>)
 80121a2:	f7fe fc17 	bl	80109d4 <WIZCHIP_READ>
 80121a6:	4603      	mov	r3, r0
 80121a8:	f003 0308 	and.w	r3, r3, #8
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d003      	beq.n	80121b8 <wizphy_getphystatus+0x30>
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2202      	movs	r2, #2
 80121b4:	701a      	strb	r2, [r3, #0]
 80121b6:	e00a      	b.n	80121ce <wizphy_getphystatus+0x46>
   else phyconf->mode   = (tmp & (1<<5))    ? PHY_MODE_MANUAL : PHY_MODE_AUTONEGO ;
 80121b8:	7bfb      	ldrb	r3, [r7, #15]
 80121ba:	f003 0320 	and.w	r3, r3, #32
 80121be:	2b00      	cmp	r3, #0
 80121c0:	bf0c      	ite	eq
 80121c2:	2301      	moveq	r3, #1
 80121c4:	2300      	movne	r3, #0
 80121c6:	b2db      	uxtb	r3, r3
 80121c8:	461a      	mov	r2, r3
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	701a      	strb	r2, [r3, #0]
   phyconf->speed  = (tmp & PHYSR_SPD) ? PHY_SPEED_10    : PHY_SPEED_100;
 80121ce:	7bfb      	ldrb	r3, [r7, #15]
 80121d0:	f003 0302 	and.w	r3, r3, #2
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	bf0c      	ite	eq
 80121d8:	2301      	moveq	r3, #1
 80121da:	2300      	movne	r3, #0
 80121dc:	b2db      	uxtb	r3, r3
 80121de:	461a      	mov	r2, r3
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	705a      	strb	r2, [r3, #1]
   phyconf->duplex = (tmp & PHYSR_DPX) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
 80121e4:	7bfb      	ldrb	r3, [r7, #15]
 80121e6:	f003 0304 	and.w	r3, r3, #4
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	bf0c      	ite	eq
 80121ee:	2301      	moveq	r3, #1
 80121f0:	2300      	movne	r3, #0
 80121f2:	b2db      	uxtb	r3, r3
 80121f4:	461a      	mov	r2, r3
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	709a      	strb	r2, [r3, #2]
}
 80121fa:	bf00      	nop
 80121fc:	3710      	adds	r7, #16
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}
 8012202:	bf00      	nop
 8012204:	00301d00 	.word	0x00301d00

08012208 <wizphy_setphypmode>:

void wizphy_setphypmode(uint8_t pmode)
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b084      	sub	sp, #16
 801220c:	af00      	add	r7, sp, #0
 801220e:	4603      	mov	r3, r0
 8012210:	71fb      	strb	r3, [r7, #7]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = getPHYCR1();
 8012212:	480d      	ldr	r0, [pc, #52]	; (8012248 <wizphy_setphypmode+0x40>)
 8012214:	f7fe fbde 	bl	80109d4 <WIZCHIP_READ>
 8012218:	4603      	mov	r3, r0
 801221a:	73fb      	strb	r3, [r7, #15]
   if (pmode == PHY_POWER_DOWN)    tmp |= PHYCR1_PWDN;
 801221c:	79fb      	ldrb	r3, [r7, #7]
 801221e:	2b01      	cmp	r3, #1
 8012220:	d104      	bne.n	801222c <wizphy_setphypmode+0x24>
 8012222:	7bfb      	ldrb	r3, [r7, #15]
 8012224:	f043 0320 	orr.w	r3, r3, #32
 8012228:	73fb      	strb	r3, [r7, #15]
 801222a:	e003      	b.n	8012234 <wizphy_setphypmode+0x2c>
   else                            tmp &= ~PHYCR1_PWDN;
 801222c:	7bfb      	ldrb	r3, [r7, #15]
 801222e:	f023 0320 	bic.w	r3, r3, #32
 8012232:	73fb      	strb	r3, [r7, #15]
   setPHYCR1(tmp);
 8012234:	7bfb      	ldrb	r3, [r7, #15]
 8012236:	4619      	mov	r1, r3
 8012238:	4803      	ldr	r0, [pc, #12]	; (8012248 <wizphy_setphypmode+0x40>)
 801223a:	f7fe fb99 	bl	8010970 <WIZCHIP_WRITE>
   tmp = wiz_mdio_read(PHYRAR_BMCR);
   if (pmode == PHY_POWER_DOWN)    tmp |= BMCR_PWDN;
   else                            tmp &= ~BMCR_PWDN;
   wiz_mdio_write(PHYRAR_BMCR, tmp);
#endif   
}
 801223e:	bf00      	nop
 8012240:	3710      	adds	r7, #16
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}
 8012246:	bf00      	nop
 8012248:	00301d00 	.word	0x00301d00

0801224c <wizphy_getphypmode>:

int8_t wizphy_getphypmode(void)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   if (getPHYCR1() & PHYCR1_PWDN)              return PHY_POWER_DOWN;
 8012250:	4806      	ldr	r0, [pc, #24]	; (801226c <wizphy_getphypmode+0x20>)
 8012252:	f7fe fbbf 	bl	80109d4 <WIZCHIP_READ>
 8012256:	4603      	mov	r3, r0
 8012258:	f003 0320 	and.w	r3, r3, #32
 801225c:	2b00      	cmp	r3, #0
 801225e:	d001      	beq.n	8012264 <wizphy_getphypmode+0x18>
 8012260:	2301      	movs	r3, #1
 8012262:	e000      	b.n	8012266 <wizphy_getphypmode+0x1a>
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
   if (wiz_mdio_read(PHYRAR_BMCR) & BMCR_PWDN) return PHY_POWER_DOWN;
#endif   
   return PHY_POWER_NORM;
 8012264:	2300      	movs	r3, #0
}
 8012266:	4618      	mov	r0, r3
 8012268:	bd80      	pop	{r7, pc}
 801226a:	bf00      	nop
 801226c:	00301d00 	.word	0x00301d00

08012270 <wizchip_setnetinfo>:

void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b084      	sub	sp, #16
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
   uint8_t i=0;
 8012278:	2300      	movs	r3, #0
 801227a:	73fb      	strb	r3, [r7, #15]
   setSHAR(pnetinfo->mac);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	2206      	movs	r2, #6
 8012280:	4619      	mov	r1, r3
 8012282:	482f      	ldr	r0, [pc, #188]	; (8012340 <wizchip_setnetinfo+0xd0>)
 8012284:	f7fe fbd6 	bl	8010a34 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	330e      	adds	r3, #14
 801228c:	2204      	movs	r2, #4
 801228e:	4619      	mov	r1, r3
 8012290:	482c      	ldr	r0, [pc, #176]	; (8012344 <wizchip_setnetinfo+0xd4>)
 8012292:	f7fe fbcf 	bl	8010a34 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	330a      	adds	r3, #10
 801229a:	2204      	movs	r2, #4
 801229c:	4619      	mov	r1, r3
 801229e:	482a      	ldr	r0, [pc, #168]	; (8012348 <wizchip_setnetinfo+0xd8>)
 80122a0:	f7fe fbc8 	bl	8010a34 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);   
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	3306      	adds	r3, #6
 80122a8:	2204      	movs	r2, #4
 80122aa:	4619      	mov	r1, r3
 80122ac:	4827      	ldr	r0, [pc, #156]	; (801234c <wizchip_setnetinfo+0xdc>)
 80122ae:	f7fe fbc1 	bl	8010a34 <WIZCHIP_WRITE_BUF>
   setGA6R(pnetinfo->gw6);
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	3342      	adds	r3, #66	; 0x42
 80122b6:	2210      	movs	r2, #16
 80122b8:	4619      	mov	r1, r3
 80122ba:	4825      	ldr	r0, [pc, #148]	; (8012350 <wizchip_setnetinfo+0xe0>)
 80122bc:	f7fe fbba 	bl	8010a34 <WIZCHIP_WRITE_BUF>
   setSUB6R(pnetinfo->sn6);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	3332      	adds	r3, #50	; 0x32
 80122c4:	2210      	movs	r2, #16
 80122c6:	4619      	mov	r1, r3
 80122c8:	4822      	ldr	r0, [pc, #136]	; (8012354 <wizchip_setnetinfo+0xe4>)
 80122ca:	f7fe fbb3 	bl	8010a34 <WIZCHIP_WRITE_BUF>
   setLLAR(pnetinfo->lla);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	3312      	adds	r3, #18
 80122d2:	2210      	movs	r2, #16
 80122d4:	4619      	mov	r1, r3
 80122d6:	4820      	ldr	r0, [pc, #128]	; (8012358 <wizchip_setnetinfo+0xe8>)
 80122d8:	f7fe fbac 	bl	8010a34 <WIZCHIP_WRITE_BUF>
   setGUAR(pnetinfo->gua);
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	3322      	adds	r3, #34	; 0x22
 80122e0:	2210      	movs	r2, #16
 80122e2:	4619      	mov	r1, r3
 80122e4:	481d      	ldr	r0, [pc, #116]	; (801235c <wizchip_setnetinfo+0xec>)
 80122e6:	f7fe fba5 	bl	8010a34 <WIZCHIP_WRITE_BUF>

   for(i=0; i<4; i++)  _DNS_[i]  = pnetinfo->dns[i];
 80122ea:	2300      	movs	r3, #0
 80122ec:	73fb      	strb	r3, [r7, #15]
 80122ee:	e00a      	b.n	8012306 <wizchip_setnetinfo+0x96>
 80122f0:	7bfa      	ldrb	r2, [r7, #15]
 80122f2:	7bfb      	ldrb	r3, [r7, #15]
 80122f4:	6879      	ldr	r1, [r7, #4]
 80122f6:	440a      	add	r2, r1
 80122f8:	f892 1052 	ldrb.w	r1, [r2, #82]	; 0x52
 80122fc:	4a18      	ldr	r2, [pc, #96]	; (8012360 <wizchip_setnetinfo+0xf0>)
 80122fe:	54d1      	strb	r1, [r2, r3]
 8012300:	7bfb      	ldrb	r3, [r7, #15]
 8012302:	3301      	adds	r3, #1
 8012304:	73fb      	strb	r3, [r7, #15]
 8012306:	7bfb      	ldrb	r3, [r7, #15]
 8012308:	2b03      	cmp	r3, #3
 801230a:	d9f1      	bls.n	80122f0 <wizchip_setnetinfo+0x80>
   for(i=0; i<16; i++) _DNS6_[i] = pnetinfo->dns6[i];
 801230c:	2300      	movs	r3, #0
 801230e:	73fb      	strb	r3, [r7, #15]
 8012310:	e00a      	b.n	8012328 <wizchip_setnetinfo+0xb8>
 8012312:	7bfa      	ldrb	r2, [r7, #15]
 8012314:	7bfb      	ldrb	r3, [r7, #15]
 8012316:	6879      	ldr	r1, [r7, #4]
 8012318:	440a      	add	r2, r1
 801231a:	f892 1056 	ldrb.w	r1, [r2, #86]	; 0x56
 801231e:	4a11      	ldr	r2, [pc, #68]	; (8012364 <wizchip_setnetinfo+0xf4>)
 8012320:	54d1      	strb	r1, [r2, r3]
 8012322:	7bfb      	ldrb	r3, [r7, #15]
 8012324:	3301      	adds	r3, #1
 8012326:	73fb      	strb	r3, [r7, #15]
 8012328:	7bfb      	ldrb	r3, [r7, #15]
 801232a:	2b0f      	cmp	r3, #15
 801232c:	d9f1      	bls.n	8012312 <wizchip_setnetinfo+0xa2>

   _IPMODE_   = pnetinfo->ipmode;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 8012334:	4b0c      	ldr	r3, [pc, #48]	; (8012368 <wizchip_setnetinfo+0xf8>)
 8012336:	701a      	strb	r2, [r3, #0]
}
 8012338:	bf00      	nop
 801233a:	3710      	adds	r7, #16
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}
 8012340:	00412000 	.word	0x00412000
 8012344:	00413000 	.word	0x00413000
 8012348:	00413400 	.word	0x00413400
 801234c:	00413800 	.word	0x00413800
 8012350:	00417000 	.word	0x00417000
 8012354:	00416000 	.word	0x00416000
 8012358:	00414000 	.word	0x00414000
 801235c:	00415000 	.word	0x00415000
 8012360:	24010b80 	.word	0x24010b80
 8012364:	24010b84 	.word	0x24010b84
 8012368:	24010b94 	.word	0x24010b94

0801236c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b084      	sub	sp, #16
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
   uint8_t i = 0;
 8012374:	2300      	movs	r3, #0
 8012376:	73fb      	strb	r3, [r7, #15]
   getSHAR(pnetinfo->mac);
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	2206      	movs	r2, #6
 801237c:	4619      	mov	r1, r3
 801237e:	4830      	ldr	r0, [pc, #192]	; (8012440 <wizchip_getnetinfo+0xd4>)
 8012380:	f7fe fb90 	bl	8010aa4 <WIZCHIP_READ_BUF>

   getGAR(pnetinfo->gw);
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	330e      	adds	r3, #14
 8012388:	2204      	movs	r2, #4
 801238a:	4619      	mov	r1, r3
 801238c:	482d      	ldr	r0, [pc, #180]	; (8012444 <wizchip_getnetinfo+0xd8>)
 801238e:	f7fe fb89 	bl	8010aa4 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	330a      	adds	r3, #10
 8012396:	2204      	movs	r2, #4
 8012398:	4619      	mov	r1, r3
 801239a:	482b      	ldr	r0, [pc, #172]	; (8012448 <wizchip_getnetinfo+0xdc>)
 801239c:	f7fe fb82 	bl	8010aa4 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	3306      	adds	r3, #6
 80123a4:	2204      	movs	r2, #4
 80123a6:	4619      	mov	r1, r3
 80123a8:	4828      	ldr	r0, [pc, #160]	; (801244c <wizchip_getnetinfo+0xe0>)
 80123aa:	f7fe fb7b 	bl	8010aa4 <WIZCHIP_READ_BUF>
   
   getGA6R(pnetinfo->gw6);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	3342      	adds	r3, #66	; 0x42
 80123b2:	2210      	movs	r2, #16
 80123b4:	4619      	mov	r1, r3
 80123b6:	4826      	ldr	r0, [pc, #152]	; (8012450 <wizchip_getnetinfo+0xe4>)
 80123b8:	f7fe fb74 	bl	8010aa4 <WIZCHIP_READ_BUF>
   getSUB6R(pnetinfo->sn6);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	3332      	adds	r3, #50	; 0x32
 80123c0:	2210      	movs	r2, #16
 80123c2:	4619      	mov	r1, r3
 80123c4:	4823      	ldr	r0, [pc, #140]	; (8012454 <wizchip_getnetinfo+0xe8>)
 80123c6:	f7fe fb6d 	bl	8010aa4 <WIZCHIP_READ_BUF>
   getLLAR(pnetinfo->lla);
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	3312      	adds	r3, #18
 80123ce:	2210      	movs	r2, #16
 80123d0:	4619      	mov	r1, r3
 80123d2:	4821      	ldr	r0, [pc, #132]	; (8012458 <wizchip_getnetinfo+0xec>)
 80123d4:	f7fe fb66 	bl	8010aa4 <WIZCHIP_READ_BUF>
   getGUAR(pnetinfo->gua);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	3322      	adds	r3, #34	; 0x22
 80123dc:	2210      	movs	r2, #16
 80123de:	4619      	mov	r1, r3
 80123e0:	481e      	ldr	r0, [pc, #120]	; (801245c <wizchip_getnetinfo+0xf0>)
 80123e2:	f7fe fb5f 	bl	8010aa4 <WIZCHIP_READ_BUF>
   for(i=0; i<4; i++)  pnetinfo->dns[i] = _DNS_[i];
 80123e6:	2300      	movs	r3, #0
 80123e8:	73fb      	strb	r3, [r7, #15]
 80123ea:	e00b      	b.n	8012404 <wizchip_getnetinfo+0x98>
 80123ec:	7bfa      	ldrb	r2, [r7, #15]
 80123ee:	7bfb      	ldrb	r3, [r7, #15]
 80123f0:	491b      	ldr	r1, [pc, #108]	; (8012460 <wizchip_getnetinfo+0xf4>)
 80123f2:	5c89      	ldrb	r1, [r1, r2]
 80123f4:	687a      	ldr	r2, [r7, #4]
 80123f6:	4413      	add	r3, r2
 80123f8:	460a      	mov	r2, r1
 80123fa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 80123fe:	7bfb      	ldrb	r3, [r7, #15]
 8012400:	3301      	adds	r3, #1
 8012402:	73fb      	strb	r3, [r7, #15]
 8012404:	7bfb      	ldrb	r3, [r7, #15]
 8012406:	2b03      	cmp	r3, #3
 8012408:	d9f0      	bls.n	80123ec <wizchip_getnetinfo+0x80>
   for(i=0; i<16; i++) pnetinfo->dns6[i]  = _DNS6_[i];
 801240a:	2300      	movs	r3, #0
 801240c:	73fb      	strb	r3, [r7, #15]
 801240e:	e00b      	b.n	8012428 <wizchip_getnetinfo+0xbc>
 8012410:	7bfa      	ldrb	r2, [r7, #15]
 8012412:	7bfb      	ldrb	r3, [r7, #15]
 8012414:	4913      	ldr	r1, [pc, #76]	; (8012464 <wizchip_getnetinfo+0xf8>)
 8012416:	5c89      	ldrb	r1, [r1, r2]
 8012418:	687a      	ldr	r2, [r7, #4]
 801241a:	4413      	add	r3, r2
 801241c:	460a      	mov	r2, r1
 801241e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8012422:	7bfb      	ldrb	r3, [r7, #15]
 8012424:	3301      	adds	r3, #1
 8012426:	73fb      	strb	r3, [r7, #15]
 8012428:	7bfb      	ldrb	r3, [r7, #15]
 801242a:	2b0f      	cmp	r3, #15
 801242c:	d9f0      	bls.n	8012410 <wizchip_getnetinfo+0xa4>

   pnetinfo->ipmode = _IPMODE_;
 801242e:	4b0e      	ldr	r3, [pc, #56]	; (8012468 <wizchip_getnetinfo+0xfc>)
 8012430:	781a      	ldrb	r2, [r3, #0]
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
 8012438:	bf00      	nop
 801243a:	3710      	adds	r7, #16
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}
 8012440:	00412000 	.word	0x00412000
 8012444:	00413000 	.word	0x00413000
 8012448:	00413400 	.word	0x00413400
 801244c:	00413800 	.word	0x00413800
 8012450:	00417000 	.word	0x00417000
 8012454:	00416000 	.word	0x00416000
 8012458:	00414000 	.word	0x00414000
 801245c:	00415000 	.word	0x00415000
 8012460:	24010b80 	.word	0x24010b80
 8012464:	24010b84 	.word	0x24010b84
 8012468:	24010b94 	.word	0x24010b94

0801246c <wizchip_setnetmode>:

void wizchip_setnetmode(netmode_type netmode)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b084      	sub	sp, #16
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
   uint32_t tmp = (uint32_t) netmode;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	60fb      	str	r3, [r7, #12]
   setNETMR ((uint8_t)tmp);
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	b2db      	uxtb	r3, r3
 801247c:	4619      	mov	r1, r3
 801247e:	480e      	ldr	r0, [pc, #56]	; (80124b8 <wizchip_setnetmode+0x4c>)
 8012480:	f7fe fa76 	bl	8010970 <WIZCHIP_WRITE>
   setNETMR2((uint8_t)(tmp>>8));
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	0a1b      	lsrs	r3, r3, #8
 8012488:	b2db      	uxtb	r3, r3
 801248a:	4619      	mov	r1, r3
 801248c:	480b      	ldr	r0, [pc, #44]	; (80124bc <wizchip_setnetmode+0x50>)
 801248e:	f7fe fa6f 	bl	8010970 <WIZCHIP_WRITE>
   setNET4MR((uint8_t)(tmp>>16));
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	0c1b      	lsrs	r3, r3, #16
 8012496:	b2db      	uxtb	r3, r3
 8012498:	4619      	mov	r1, r3
 801249a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 801249e:	f7fe fa67 	bl	8010970 <WIZCHIP_WRITE>
   setNET6MR((uint8_t)(tmp>>24));
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	0e1b      	lsrs	r3, r3, #24
 80124a6:	b2db      	uxtb	r3, r3
 80124a8:	4619      	mov	r1, r3
 80124aa:	4805      	ldr	r0, [pc, #20]	; (80124c0 <wizchip_setnetmode+0x54>)
 80124ac:	f7fe fa60 	bl	8010970 <WIZCHIP_WRITE>
}
 80124b0:	bf00      	nop
 80124b2:	3710      	adds	r7, #16
 80124b4:	46bd      	mov	sp, r7
 80124b6:	bd80      	pop	{r7, pc}
 80124b8:	00400800 	.word	0x00400800
 80124bc:	00400900 	.word	0x00400900
 80124c0:	00400400 	.word	0x00400400

080124c4 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 80124c4:	b590      	push	{r4, r7, lr}
 80124c6:	b083      	sub	sp, #12
 80124c8:	af00      	add	r7, sp, #0
   uint32_t ret = 0;
 80124ca:	2300      	movs	r3, #0
 80124cc:	607b      	str	r3, [r7, #4]
   ret = getNETMR();
 80124ce:	4811      	ldr	r0, [pc, #68]	; (8012514 <wizchip_getnetmode+0x50>)
 80124d0:	f7fe fa80 	bl	80109d4 <WIZCHIP_READ>
 80124d4:	4603      	mov	r3, r0
 80124d6:	607b      	str	r3, [r7, #4]
   ret = (ret << 8)  + getNETMR2();
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	021c      	lsls	r4, r3, #8
 80124dc:	480e      	ldr	r0, [pc, #56]	; (8012518 <wizchip_getnetmode+0x54>)
 80124de:	f7fe fa79 	bl	80109d4 <WIZCHIP_READ>
 80124e2:	4603      	mov	r3, r0
 80124e4:	4423      	add	r3, r4
 80124e6:	607b      	str	r3, [r7, #4]
   ret = (ret << 16) + getNET4MR();
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	041c      	lsls	r4, r3, #16
 80124ec:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80124f0:	f7fe fa70 	bl	80109d4 <WIZCHIP_READ>
 80124f4:	4603      	mov	r3, r0
 80124f6:	4423      	add	r3, r4
 80124f8:	607b      	str	r3, [r7, #4]
   ret = (ret << 24) + getNET6MR();
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	061c      	lsls	r4, r3, #24
 80124fe:	4807      	ldr	r0, [pc, #28]	; (801251c <wizchip_getnetmode+0x58>)
 8012500:	f7fe fa68 	bl	80109d4 <WIZCHIP_READ>
 8012504:	4603      	mov	r3, r0
 8012506:	4423      	add	r3, r4
 8012508:	607b      	str	r3, [r7, #4]
   return (netmode_type)ret;
 801250a:	687b      	ldr	r3, [r7, #4]
}
 801250c:	4618      	mov	r0, r3
 801250e:	370c      	adds	r7, #12
 8012510:	46bd      	mov	sp, r7
 8012512:	bd90      	pop	{r4, r7, pc}
 8012514:	00400800 	.word	0x00400800
 8012518:	00400900 	.word	0x00400900
 801251c:	00400400 	.word	0x00400400

08012520 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b082      	sub	sp, #8
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
   setRCR(nettime->s_retry_cnt);
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	781b      	ldrb	r3, [r3, #0]
 801252c:	4619      	mov	r1, r3
 801252e:	4817      	ldr	r0, [pc, #92]	; (801258c <wizchip_settimeout+0x6c>)
 8012530:	f7fe fa1e 	bl	8010970 <WIZCHIP_WRITE>
   setRTR(nettime->s_time_100us);
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	885b      	ldrh	r3, [r3, #2]
 8012538:	0a1b      	lsrs	r3, r3, #8
 801253a:	b29b      	uxth	r3, r3
 801253c:	b2db      	uxtb	r3, r3
 801253e:	4619      	mov	r1, r3
 8012540:	f44f 0084 	mov.w	r0, #4325376	; 0x420000
 8012544:	f7fe fa14 	bl	8010970 <WIZCHIP_WRITE>
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	885b      	ldrh	r3, [r3, #2]
 801254c:	b2db      	uxtb	r3, r3
 801254e:	4619      	mov	r1, r3
 8012550:	480f      	ldr	r0, [pc, #60]	; (8012590 <wizchip_settimeout+0x70>)
 8012552:	f7fe fa0d 	bl	8010970 <WIZCHIP_WRITE>
   setSLRCR(nettime->sl_retry_cnt);
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	791b      	ldrb	r3, [r3, #4]
 801255a:	4619      	mov	r1, r3
 801255c:	480d      	ldr	r0, [pc, #52]	; (8012594 <wizchip_settimeout+0x74>)
 801255e:	f7fe fa07 	bl	8010970 <WIZCHIP_WRITE>
   setSLRTR(nettime->sl_time_100us);
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	88db      	ldrh	r3, [r3, #6]
 8012566:	0a1b      	lsrs	r3, r3, #8
 8012568:	b29b      	uxth	r3, r3
 801256a:	b2db      	uxtb	r3, r3
 801256c:	4619      	mov	r1, r3
 801256e:	480a      	ldr	r0, [pc, #40]	; (8012598 <wizchip_settimeout+0x78>)
 8012570:	f7fe f9fe 	bl	8010970 <WIZCHIP_WRITE>
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	88db      	ldrh	r3, [r3, #6]
 8012578:	b2db      	uxtb	r3, r3
 801257a:	4619      	mov	r1, r3
 801257c:	4807      	ldr	r0, [pc, #28]	; (801259c <wizchip_settimeout+0x7c>)
 801257e:	f7fe f9f7 	bl	8010970 <WIZCHIP_WRITE>
}
 8012582:	bf00      	nop
 8012584:	3708      	adds	r7, #8
 8012586:	46bd      	mov	sp, r7
 8012588:	bd80      	pop	{r7, pc}
 801258a:	bf00      	nop
 801258c:	00420400 	.word	0x00420400
 8012590:	00420100 	.word	0x00420100
 8012594:	00420c00 	.word	0x00420c00
 8012598:	00420800 	.word	0x00420800
 801259c:	00420900 	.word	0x00420900

080125a0 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80125a0:	b590      	push	{r4, r7, lr}
 80125a2:	b083      	sub	sp, #12
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
   nettime->s_retry_cnt   = getRCR();
 80125a8:	4819      	ldr	r0, [pc, #100]	; (8012610 <wizchip_gettimeout+0x70>)
 80125aa:	f7fe fa13 	bl	80109d4 <WIZCHIP_READ>
 80125ae:	4603      	mov	r3, r0
 80125b0:	461a      	mov	r2, r3
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	701a      	strb	r2, [r3, #0]
   nettime->s_time_100us  = getRTR();
 80125b6:	f44f 0084 	mov.w	r0, #4325376	; 0x420000
 80125ba:	f7fe fa0b 	bl	80109d4 <WIZCHIP_READ>
 80125be:	4603      	mov	r3, r0
 80125c0:	b29b      	uxth	r3, r3
 80125c2:	021b      	lsls	r3, r3, #8
 80125c4:	b29c      	uxth	r4, r3
 80125c6:	4813      	ldr	r0, [pc, #76]	; (8012614 <wizchip_gettimeout+0x74>)
 80125c8:	f7fe fa04 	bl	80109d4 <WIZCHIP_READ>
 80125cc:	4603      	mov	r3, r0
 80125ce:	b29b      	uxth	r3, r3
 80125d0:	4423      	add	r3, r4
 80125d2:	b29a      	uxth	r2, r3
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	805a      	strh	r2, [r3, #2]
   nettime->sl_retry_cnt  = getSLRCR();
 80125d8:	480f      	ldr	r0, [pc, #60]	; (8012618 <wizchip_gettimeout+0x78>)
 80125da:	f7fe f9fb 	bl	80109d4 <WIZCHIP_READ>
 80125de:	4603      	mov	r3, r0
 80125e0:	461a      	mov	r2, r3
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	711a      	strb	r2, [r3, #4]
   nettime->sl_time_100us = getSLRTR();
 80125e6:	480d      	ldr	r0, [pc, #52]	; (801261c <wizchip_gettimeout+0x7c>)
 80125e8:	f7fe f9f4 	bl	80109d4 <WIZCHIP_READ>
 80125ec:	4603      	mov	r3, r0
 80125ee:	b29b      	uxth	r3, r3
 80125f0:	021b      	lsls	r3, r3, #8
 80125f2:	b29c      	uxth	r4, r3
 80125f4:	480a      	ldr	r0, [pc, #40]	; (8012620 <wizchip_gettimeout+0x80>)
 80125f6:	f7fe f9ed 	bl	80109d4 <WIZCHIP_READ>
 80125fa:	4603      	mov	r3, r0
 80125fc:	b29b      	uxth	r3, r3
 80125fe:	4423      	add	r3, r4
 8012600:	b29a      	uxth	r2, r3
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	80da      	strh	r2, [r3, #6]
}
 8012606:	bf00      	nop
 8012608:	370c      	adds	r7, #12
 801260a:	46bd      	mov	sp, r7
 801260c:	bd90      	pop	{r4, r7, pc}
 801260e:	bf00      	nop
 8012610:	00420400 	.word	0x00420400
 8012614:	00420100 	.word	0x00420100
 8012618:	00420c00 	.word	0x00420c00
 801261c:	00420800 	.word	0x00420800
 8012620:	00420900 	.word	0x00420900

08012624 <__cvt>:
 8012624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012626:	ed2d 8b02 	vpush	{d8}
 801262a:	eeb0 8b40 	vmov.f64	d8, d0
 801262e:	b085      	sub	sp, #20
 8012630:	4617      	mov	r7, r2
 8012632:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012634:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012636:	ee18 2a90 	vmov	r2, s17
 801263a:	f025 0520 	bic.w	r5, r5, #32
 801263e:	2a00      	cmp	r2, #0
 8012640:	bfb6      	itet	lt
 8012642:	222d      	movlt	r2, #45	; 0x2d
 8012644:	2200      	movge	r2, #0
 8012646:	eeb1 8b40 	vneglt.f64	d8, d0
 801264a:	2d46      	cmp	r5, #70	; 0x46
 801264c:	460c      	mov	r4, r1
 801264e:	701a      	strb	r2, [r3, #0]
 8012650:	d004      	beq.n	801265c <__cvt+0x38>
 8012652:	2d45      	cmp	r5, #69	; 0x45
 8012654:	d100      	bne.n	8012658 <__cvt+0x34>
 8012656:	3401      	adds	r4, #1
 8012658:	2102      	movs	r1, #2
 801265a:	e000      	b.n	801265e <__cvt+0x3a>
 801265c:	2103      	movs	r1, #3
 801265e:	ab03      	add	r3, sp, #12
 8012660:	9301      	str	r3, [sp, #4]
 8012662:	ab02      	add	r3, sp, #8
 8012664:	9300      	str	r3, [sp, #0]
 8012666:	4622      	mov	r2, r4
 8012668:	4633      	mov	r3, r6
 801266a:	eeb0 0b48 	vmov.f64	d0, d8
 801266e:	f000 ff93 	bl	8013598 <_dtoa_r>
 8012672:	2d47      	cmp	r5, #71	; 0x47
 8012674:	d101      	bne.n	801267a <__cvt+0x56>
 8012676:	07fb      	lsls	r3, r7, #31
 8012678:	d51a      	bpl.n	80126b0 <__cvt+0x8c>
 801267a:	2d46      	cmp	r5, #70	; 0x46
 801267c:	eb00 0204 	add.w	r2, r0, r4
 8012680:	d10c      	bne.n	801269c <__cvt+0x78>
 8012682:	7803      	ldrb	r3, [r0, #0]
 8012684:	2b30      	cmp	r3, #48	; 0x30
 8012686:	d107      	bne.n	8012698 <__cvt+0x74>
 8012688:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801268c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012690:	bf1c      	itt	ne
 8012692:	f1c4 0401 	rsbne	r4, r4, #1
 8012696:	6034      	strne	r4, [r6, #0]
 8012698:	6833      	ldr	r3, [r6, #0]
 801269a:	441a      	add	r2, r3
 801269c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80126a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126a4:	bf08      	it	eq
 80126a6:	9203      	streq	r2, [sp, #12]
 80126a8:	2130      	movs	r1, #48	; 0x30
 80126aa:	9b03      	ldr	r3, [sp, #12]
 80126ac:	4293      	cmp	r3, r2
 80126ae:	d307      	bcc.n	80126c0 <__cvt+0x9c>
 80126b0:	9b03      	ldr	r3, [sp, #12]
 80126b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80126b4:	1a1b      	subs	r3, r3, r0
 80126b6:	6013      	str	r3, [r2, #0]
 80126b8:	b005      	add	sp, #20
 80126ba:	ecbd 8b02 	vpop	{d8}
 80126be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126c0:	1c5c      	adds	r4, r3, #1
 80126c2:	9403      	str	r4, [sp, #12]
 80126c4:	7019      	strb	r1, [r3, #0]
 80126c6:	e7f0      	b.n	80126aa <__cvt+0x86>

080126c8 <__exponent>:
 80126c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80126ca:	4603      	mov	r3, r0
 80126cc:	2900      	cmp	r1, #0
 80126ce:	bfb8      	it	lt
 80126d0:	4249      	neglt	r1, r1
 80126d2:	f803 2b02 	strb.w	r2, [r3], #2
 80126d6:	bfb4      	ite	lt
 80126d8:	222d      	movlt	r2, #45	; 0x2d
 80126da:	222b      	movge	r2, #43	; 0x2b
 80126dc:	2909      	cmp	r1, #9
 80126de:	7042      	strb	r2, [r0, #1]
 80126e0:	dd2a      	ble.n	8012738 <__exponent+0x70>
 80126e2:	f10d 0207 	add.w	r2, sp, #7
 80126e6:	4617      	mov	r7, r2
 80126e8:	260a      	movs	r6, #10
 80126ea:	4694      	mov	ip, r2
 80126ec:	fb91 f5f6 	sdiv	r5, r1, r6
 80126f0:	fb06 1415 	mls	r4, r6, r5, r1
 80126f4:	3430      	adds	r4, #48	; 0x30
 80126f6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80126fa:	460c      	mov	r4, r1
 80126fc:	2c63      	cmp	r4, #99	; 0x63
 80126fe:	f102 32ff 	add.w	r2, r2, #4294967295
 8012702:	4629      	mov	r1, r5
 8012704:	dcf1      	bgt.n	80126ea <__exponent+0x22>
 8012706:	3130      	adds	r1, #48	; 0x30
 8012708:	f1ac 0402 	sub.w	r4, ip, #2
 801270c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012710:	1c41      	adds	r1, r0, #1
 8012712:	4622      	mov	r2, r4
 8012714:	42ba      	cmp	r2, r7
 8012716:	d30a      	bcc.n	801272e <__exponent+0x66>
 8012718:	f10d 0209 	add.w	r2, sp, #9
 801271c:	eba2 020c 	sub.w	r2, r2, ip
 8012720:	42bc      	cmp	r4, r7
 8012722:	bf88      	it	hi
 8012724:	2200      	movhi	r2, #0
 8012726:	4413      	add	r3, r2
 8012728:	1a18      	subs	r0, r3, r0
 801272a:	b003      	add	sp, #12
 801272c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801272e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012732:	f801 5f01 	strb.w	r5, [r1, #1]!
 8012736:	e7ed      	b.n	8012714 <__exponent+0x4c>
 8012738:	2330      	movs	r3, #48	; 0x30
 801273a:	3130      	adds	r1, #48	; 0x30
 801273c:	7083      	strb	r3, [r0, #2]
 801273e:	70c1      	strb	r1, [r0, #3]
 8012740:	1d03      	adds	r3, r0, #4
 8012742:	e7f1      	b.n	8012728 <__exponent+0x60>
 8012744:	0000      	movs	r0, r0
	...

08012748 <_printf_float>:
 8012748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801274c:	b08b      	sub	sp, #44	; 0x2c
 801274e:	460c      	mov	r4, r1
 8012750:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8012754:	4616      	mov	r6, r2
 8012756:	461f      	mov	r7, r3
 8012758:	4605      	mov	r5, r0
 801275a:	f000 fdb7 	bl	80132cc <_localeconv_r>
 801275e:	f8d0 b000 	ldr.w	fp, [r0]
 8012762:	4658      	mov	r0, fp
 8012764:	f7ed fe24 	bl	80003b0 <strlen>
 8012768:	2300      	movs	r3, #0
 801276a:	9308      	str	r3, [sp, #32]
 801276c:	f8d8 3000 	ldr.w	r3, [r8]
 8012770:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012774:	6822      	ldr	r2, [r4, #0]
 8012776:	3307      	adds	r3, #7
 8012778:	f023 0307 	bic.w	r3, r3, #7
 801277c:	f103 0108 	add.w	r1, r3, #8
 8012780:	f8c8 1000 	str.w	r1, [r8]
 8012784:	ed93 0b00 	vldr	d0, [r3]
 8012788:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80129e8 <_printf_float+0x2a0>
 801278c:	eeb0 7bc0 	vabs.f64	d7, d0
 8012790:	eeb4 7b46 	vcmp.f64	d7, d6
 8012794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012798:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801279c:	4682      	mov	sl, r0
 801279e:	dd24      	ble.n	80127ea <_printf_float+0xa2>
 80127a0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80127a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127a8:	d502      	bpl.n	80127b0 <_printf_float+0x68>
 80127aa:	232d      	movs	r3, #45	; 0x2d
 80127ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80127b0:	498f      	ldr	r1, [pc, #572]	; (80129f0 <_printf_float+0x2a8>)
 80127b2:	4b90      	ldr	r3, [pc, #576]	; (80129f4 <_printf_float+0x2ac>)
 80127b4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80127b8:	bf94      	ite	ls
 80127ba:	4688      	movls	r8, r1
 80127bc:	4698      	movhi	r8, r3
 80127be:	2303      	movs	r3, #3
 80127c0:	6123      	str	r3, [r4, #16]
 80127c2:	f022 0204 	bic.w	r2, r2, #4
 80127c6:	2300      	movs	r3, #0
 80127c8:	6022      	str	r2, [r4, #0]
 80127ca:	9304      	str	r3, [sp, #16]
 80127cc:	9700      	str	r7, [sp, #0]
 80127ce:	4633      	mov	r3, r6
 80127d0:	aa09      	add	r2, sp, #36	; 0x24
 80127d2:	4621      	mov	r1, r4
 80127d4:	4628      	mov	r0, r5
 80127d6:	f000 f9d1 	bl	8012b7c <_printf_common>
 80127da:	3001      	adds	r0, #1
 80127dc:	f040 808a 	bne.w	80128f4 <_printf_float+0x1ac>
 80127e0:	f04f 30ff 	mov.w	r0, #4294967295
 80127e4:	b00b      	add	sp, #44	; 0x2c
 80127e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127ea:	eeb4 0b40 	vcmp.f64	d0, d0
 80127ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127f2:	d709      	bvc.n	8012808 <_printf_float+0xc0>
 80127f4:	ee10 3a90 	vmov	r3, s1
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	bfbc      	itt	lt
 80127fc:	232d      	movlt	r3, #45	; 0x2d
 80127fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012802:	497d      	ldr	r1, [pc, #500]	; (80129f8 <_printf_float+0x2b0>)
 8012804:	4b7d      	ldr	r3, [pc, #500]	; (80129fc <_printf_float+0x2b4>)
 8012806:	e7d5      	b.n	80127b4 <_printf_float+0x6c>
 8012808:	6863      	ldr	r3, [r4, #4]
 801280a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801280e:	9104      	str	r1, [sp, #16]
 8012810:	1c59      	adds	r1, r3, #1
 8012812:	d13c      	bne.n	801288e <_printf_float+0x146>
 8012814:	2306      	movs	r3, #6
 8012816:	6063      	str	r3, [r4, #4]
 8012818:	2300      	movs	r3, #0
 801281a:	9303      	str	r3, [sp, #12]
 801281c:	ab08      	add	r3, sp, #32
 801281e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012822:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012826:	ab07      	add	r3, sp, #28
 8012828:	6861      	ldr	r1, [r4, #4]
 801282a:	9300      	str	r3, [sp, #0]
 801282c:	6022      	str	r2, [r4, #0]
 801282e:	f10d 031b 	add.w	r3, sp, #27
 8012832:	4628      	mov	r0, r5
 8012834:	f7ff fef6 	bl	8012624 <__cvt>
 8012838:	9b04      	ldr	r3, [sp, #16]
 801283a:	9907      	ldr	r1, [sp, #28]
 801283c:	2b47      	cmp	r3, #71	; 0x47
 801283e:	4680      	mov	r8, r0
 8012840:	d108      	bne.n	8012854 <_printf_float+0x10c>
 8012842:	1cc8      	adds	r0, r1, #3
 8012844:	db02      	blt.n	801284c <_printf_float+0x104>
 8012846:	6863      	ldr	r3, [r4, #4]
 8012848:	4299      	cmp	r1, r3
 801284a:	dd41      	ble.n	80128d0 <_printf_float+0x188>
 801284c:	f1a9 0902 	sub.w	r9, r9, #2
 8012850:	fa5f f989 	uxtb.w	r9, r9
 8012854:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012858:	d820      	bhi.n	801289c <_printf_float+0x154>
 801285a:	3901      	subs	r1, #1
 801285c:	464a      	mov	r2, r9
 801285e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012862:	9107      	str	r1, [sp, #28]
 8012864:	f7ff ff30 	bl	80126c8 <__exponent>
 8012868:	9a08      	ldr	r2, [sp, #32]
 801286a:	9004      	str	r0, [sp, #16]
 801286c:	1813      	adds	r3, r2, r0
 801286e:	2a01      	cmp	r2, #1
 8012870:	6123      	str	r3, [r4, #16]
 8012872:	dc02      	bgt.n	801287a <_printf_float+0x132>
 8012874:	6822      	ldr	r2, [r4, #0]
 8012876:	07d2      	lsls	r2, r2, #31
 8012878:	d501      	bpl.n	801287e <_printf_float+0x136>
 801287a:	3301      	adds	r3, #1
 801287c:	6123      	str	r3, [r4, #16]
 801287e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d0a2      	beq.n	80127cc <_printf_float+0x84>
 8012886:	232d      	movs	r3, #45	; 0x2d
 8012888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801288c:	e79e      	b.n	80127cc <_printf_float+0x84>
 801288e:	9904      	ldr	r1, [sp, #16]
 8012890:	2947      	cmp	r1, #71	; 0x47
 8012892:	d1c1      	bne.n	8012818 <_printf_float+0xd0>
 8012894:	2b00      	cmp	r3, #0
 8012896:	d1bf      	bne.n	8012818 <_printf_float+0xd0>
 8012898:	2301      	movs	r3, #1
 801289a:	e7bc      	b.n	8012816 <_printf_float+0xce>
 801289c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80128a0:	d118      	bne.n	80128d4 <_printf_float+0x18c>
 80128a2:	2900      	cmp	r1, #0
 80128a4:	6863      	ldr	r3, [r4, #4]
 80128a6:	dd0b      	ble.n	80128c0 <_printf_float+0x178>
 80128a8:	6121      	str	r1, [r4, #16]
 80128aa:	b913      	cbnz	r3, 80128b2 <_printf_float+0x16a>
 80128ac:	6822      	ldr	r2, [r4, #0]
 80128ae:	07d0      	lsls	r0, r2, #31
 80128b0:	d502      	bpl.n	80128b8 <_printf_float+0x170>
 80128b2:	3301      	adds	r3, #1
 80128b4:	440b      	add	r3, r1
 80128b6:	6123      	str	r3, [r4, #16]
 80128b8:	2300      	movs	r3, #0
 80128ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80128bc:	9304      	str	r3, [sp, #16]
 80128be:	e7de      	b.n	801287e <_printf_float+0x136>
 80128c0:	b913      	cbnz	r3, 80128c8 <_printf_float+0x180>
 80128c2:	6822      	ldr	r2, [r4, #0]
 80128c4:	07d2      	lsls	r2, r2, #31
 80128c6:	d501      	bpl.n	80128cc <_printf_float+0x184>
 80128c8:	3302      	adds	r3, #2
 80128ca:	e7f4      	b.n	80128b6 <_printf_float+0x16e>
 80128cc:	2301      	movs	r3, #1
 80128ce:	e7f2      	b.n	80128b6 <_printf_float+0x16e>
 80128d0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80128d4:	9b08      	ldr	r3, [sp, #32]
 80128d6:	4299      	cmp	r1, r3
 80128d8:	db05      	blt.n	80128e6 <_printf_float+0x19e>
 80128da:	6823      	ldr	r3, [r4, #0]
 80128dc:	6121      	str	r1, [r4, #16]
 80128de:	07d8      	lsls	r0, r3, #31
 80128e0:	d5ea      	bpl.n	80128b8 <_printf_float+0x170>
 80128e2:	1c4b      	adds	r3, r1, #1
 80128e4:	e7e7      	b.n	80128b6 <_printf_float+0x16e>
 80128e6:	2900      	cmp	r1, #0
 80128e8:	bfd4      	ite	le
 80128ea:	f1c1 0202 	rsble	r2, r1, #2
 80128ee:	2201      	movgt	r2, #1
 80128f0:	4413      	add	r3, r2
 80128f2:	e7e0      	b.n	80128b6 <_printf_float+0x16e>
 80128f4:	6823      	ldr	r3, [r4, #0]
 80128f6:	055a      	lsls	r2, r3, #21
 80128f8:	d407      	bmi.n	801290a <_printf_float+0x1c2>
 80128fa:	6923      	ldr	r3, [r4, #16]
 80128fc:	4642      	mov	r2, r8
 80128fe:	4631      	mov	r1, r6
 8012900:	4628      	mov	r0, r5
 8012902:	47b8      	blx	r7
 8012904:	3001      	adds	r0, #1
 8012906:	d12a      	bne.n	801295e <_printf_float+0x216>
 8012908:	e76a      	b.n	80127e0 <_printf_float+0x98>
 801290a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801290e:	f240 80e0 	bls.w	8012ad2 <_printf_float+0x38a>
 8012912:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012916:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801291a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801291e:	d133      	bne.n	8012988 <_printf_float+0x240>
 8012920:	4a37      	ldr	r2, [pc, #220]	; (8012a00 <_printf_float+0x2b8>)
 8012922:	2301      	movs	r3, #1
 8012924:	4631      	mov	r1, r6
 8012926:	4628      	mov	r0, r5
 8012928:	47b8      	blx	r7
 801292a:	3001      	adds	r0, #1
 801292c:	f43f af58 	beq.w	80127e0 <_printf_float+0x98>
 8012930:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012934:	429a      	cmp	r2, r3
 8012936:	db02      	blt.n	801293e <_printf_float+0x1f6>
 8012938:	6823      	ldr	r3, [r4, #0]
 801293a:	07d8      	lsls	r0, r3, #31
 801293c:	d50f      	bpl.n	801295e <_printf_float+0x216>
 801293e:	4653      	mov	r3, sl
 8012940:	465a      	mov	r2, fp
 8012942:	4631      	mov	r1, r6
 8012944:	4628      	mov	r0, r5
 8012946:	47b8      	blx	r7
 8012948:	3001      	adds	r0, #1
 801294a:	f43f af49 	beq.w	80127e0 <_printf_float+0x98>
 801294e:	f04f 0800 	mov.w	r8, #0
 8012952:	f104 091a 	add.w	r9, r4, #26
 8012956:	9b08      	ldr	r3, [sp, #32]
 8012958:	3b01      	subs	r3, #1
 801295a:	4543      	cmp	r3, r8
 801295c:	dc09      	bgt.n	8012972 <_printf_float+0x22a>
 801295e:	6823      	ldr	r3, [r4, #0]
 8012960:	079b      	lsls	r3, r3, #30
 8012962:	f100 8106 	bmi.w	8012b72 <_printf_float+0x42a>
 8012966:	68e0      	ldr	r0, [r4, #12]
 8012968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801296a:	4298      	cmp	r0, r3
 801296c:	bfb8      	it	lt
 801296e:	4618      	movlt	r0, r3
 8012970:	e738      	b.n	80127e4 <_printf_float+0x9c>
 8012972:	2301      	movs	r3, #1
 8012974:	464a      	mov	r2, r9
 8012976:	4631      	mov	r1, r6
 8012978:	4628      	mov	r0, r5
 801297a:	47b8      	blx	r7
 801297c:	3001      	adds	r0, #1
 801297e:	f43f af2f 	beq.w	80127e0 <_printf_float+0x98>
 8012982:	f108 0801 	add.w	r8, r8, #1
 8012986:	e7e6      	b.n	8012956 <_printf_float+0x20e>
 8012988:	9b07      	ldr	r3, [sp, #28]
 801298a:	2b00      	cmp	r3, #0
 801298c:	dc3a      	bgt.n	8012a04 <_printf_float+0x2bc>
 801298e:	4a1c      	ldr	r2, [pc, #112]	; (8012a00 <_printf_float+0x2b8>)
 8012990:	2301      	movs	r3, #1
 8012992:	4631      	mov	r1, r6
 8012994:	4628      	mov	r0, r5
 8012996:	47b8      	blx	r7
 8012998:	3001      	adds	r0, #1
 801299a:	f43f af21 	beq.w	80127e0 <_printf_float+0x98>
 801299e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80129a2:	4313      	orrs	r3, r2
 80129a4:	d102      	bne.n	80129ac <_printf_float+0x264>
 80129a6:	6823      	ldr	r3, [r4, #0]
 80129a8:	07d9      	lsls	r1, r3, #31
 80129aa:	d5d8      	bpl.n	801295e <_printf_float+0x216>
 80129ac:	4653      	mov	r3, sl
 80129ae:	465a      	mov	r2, fp
 80129b0:	4631      	mov	r1, r6
 80129b2:	4628      	mov	r0, r5
 80129b4:	47b8      	blx	r7
 80129b6:	3001      	adds	r0, #1
 80129b8:	f43f af12 	beq.w	80127e0 <_printf_float+0x98>
 80129bc:	f04f 0900 	mov.w	r9, #0
 80129c0:	f104 0a1a 	add.w	sl, r4, #26
 80129c4:	9b07      	ldr	r3, [sp, #28]
 80129c6:	425b      	negs	r3, r3
 80129c8:	454b      	cmp	r3, r9
 80129ca:	dc01      	bgt.n	80129d0 <_printf_float+0x288>
 80129cc:	9b08      	ldr	r3, [sp, #32]
 80129ce:	e795      	b.n	80128fc <_printf_float+0x1b4>
 80129d0:	2301      	movs	r3, #1
 80129d2:	4652      	mov	r2, sl
 80129d4:	4631      	mov	r1, r6
 80129d6:	4628      	mov	r0, r5
 80129d8:	47b8      	blx	r7
 80129da:	3001      	adds	r0, #1
 80129dc:	f43f af00 	beq.w	80127e0 <_printf_float+0x98>
 80129e0:	f109 0901 	add.w	r9, r9, #1
 80129e4:	e7ee      	b.n	80129c4 <_printf_float+0x27c>
 80129e6:	bf00      	nop
 80129e8:	ffffffff 	.word	0xffffffff
 80129ec:	7fefffff 	.word	0x7fefffff
 80129f0:	080158d8 	.word	0x080158d8
 80129f4:	080158dc 	.word	0x080158dc
 80129f8:	080158e0 	.word	0x080158e0
 80129fc:	080158e4 	.word	0x080158e4
 8012a00:	080158e8 	.word	0x080158e8
 8012a04:	9a08      	ldr	r2, [sp, #32]
 8012a06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012a08:	429a      	cmp	r2, r3
 8012a0a:	bfa8      	it	ge
 8012a0c:	461a      	movge	r2, r3
 8012a0e:	2a00      	cmp	r2, #0
 8012a10:	4691      	mov	r9, r2
 8012a12:	dc38      	bgt.n	8012a86 <_printf_float+0x33e>
 8012a14:	2300      	movs	r3, #0
 8012a16:	9305      	str	r3, [sp, #20]
 8012a18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a1c:	f104 021a 	add.w	r2, r4, #26
 8012a20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012a22:	9905      	ldr	r1, [sp, #20]
 8012a24:	9304      	str	r3, [sp, #16]
 8012a26:	eba3 0309 	sub.w	r3, r3, r9
 8012a2a:	428b      	cmp	r3, r1
 8012a2c:	dc33      	bgt.n	8012a96 <_printf_float+0x34e>
 8012a2e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012a32:	429a      	cmp	r2, r3
 8012a34:	db3c      	blt.n	8012ab0 <_printf_float+0x368>
 8012a36:	6823      	ldr	r3, [r4, #0]
 8012a38:	07da      	lsls	r2, r3, #31
 8012a3a:	d439      	bmi.n	8012ab0 <_printf_float+0x368>
 8012a3c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8012a40:	eba2 0903 	sub.w	r9, r2, r3
 8012a44:	9b04      	ldr	r3, [sp, #16]
 8012a46:	1ad2      	subs	r2, r2, r3
 8012a48:	4591      	cmp	r9, r2
 8012a4a:	bfa8      	it	ge
 8012a4c:	4691      	movge	r9, r2
 8012a4e:	f1b9 0f00 	cmp.w	r9, #0
 8012a52:	dc35      	bgt.n	8012ac0 <_printf_float+0x378>
 8012a54:	f04f 0800 	mov.w	r8, #0
 8012a58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a5c:	f104 0a1a 	add.w	sl, r4, #26
 8012a60:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012a64:	1a9b      	subs	r3, r3, r2
 8012a66:	eba3 0309 	sub.w	r3, r3, r9
 8012a6a:	4543      	cmp	r3, r8
 8012a6c:	f77f af77 	ble.w	801295e <_printf_float+0x216>
 8012a70:	2301      	movs	r3, #1
 8012a72:	4652      	mov	r2, sl
 8012a74:	4631      	mov	r1, r6
 8012a76:	4628      	mov	r0, r5
 8012a78:	47b8      	blx	r7
 8012a7a:	3001      	adds	r0, #1
 8012a7c:	f43f aeb0 	beq.w	80127e0 <_printf_float+0x98>
 8012a80:	f108 0801 	add.w	r8, r8, #1
 8012a84:	e7ec      	b.n	8012a60 <_printf_float+0x318>
 8012a86:	4613      	mov	r3, r2
 8012a88:	4631      	mov	r1, r6
 8012a8a:	4642      	mov	r2, r8
 8012a8c:	4628      	mov	r0, r5
 8012a8e:	47b8      	blx	r7
 8012a90:	3001      	adds	r0, #1
 8012a92:	d1bf      	bne.n	8012a14 <_printf_float+0x2cc>
 8012a94:	e6a4      	b.n	80127e0 <_printf_float+0x98>
 8012a96:	2301      	movs	r3, #1
 8012a98:	4631      	mov	r1, r6
 8012a9a:	4628      	mov	r0, r5
 8012a9c:	9204      	str	r2, [sp, #16]
 8012a9e:	47b8      	blx	r7
 8012aa0:	3001      	adds	r0, #1
 8012aa2:	f43f ae9d 	beq.w	80127e0 <_printf_float+0x98>
 8012aa6:	9b05      	ldr	r3, [sp, #20]
 8012aa8:	9a04      	ldr	r2, [sp, #16]
 8012aaa:	3301      	adds	r3, #1
 8012aac:	9305      	str	r3, [sp, #20]
 8012aae:	e7b7      	b.n	8012a20 <_printf_float+0x2d8>
 8012ab0:	4653      	mov	r3, sl
 8012ab2:	465a      	mov	r2, fp
 8012ab4:	4631      	mov	r1, r6
 8012ab6:	4628      	mov	r0, r5
 8012ab8:	47b8      	blx	r7
 8012aba:	3001      	adds	r0, #1
 8012abc:	d1be      	bne.n	8012a3c <_printf_float+0x2f4>
 8012abe:	e68f      	b.n	80127e0 <_printf_float+0x98>
 8012ac0:	9a04      	ldr	r2, [sp, #16]
 8012ac2:	464b      	mov	r3, r9
 8012ac4:	4442      	add	r2, r8
 8012ac6:	4631      	mov	r1, r6
 8012ac8:	4628      	mov	r0, r5
 8012aca:	47b8      	blx	r7
 8012acc:	3001      	adds	r0, #1
 8012ace:	d1c1      	bne.n	8012a54 <_printf_float+0x30c>
 8012ad0:	e686      	b.n	80127e0 <_printf_float+0x98>
 8012ad2:	9a08      	ldr	r2, [sp, #32]
 8012ad4:	2a01      	cmp	r2, #1
 8012ad6:	dc01      	bgt.n	8012adc <_printf_float+0x394>
 8012ad8:	07db      	lsls	r3, r3, #31
 8012ada:	d537      	bpl.n	8012b4c <_printf_float+0x404>
 8012adc:	2301      	movs	r3, #1
 8012ade:	4642      	mov	r2, r8
 8012ae0:	4631      	mov	r1, r6
 8012ae2:	4628      	mov	r0, r5
 8012ae4:	47b8      	blx	r7
 8012ae6:	3001      	adds	r0, #1
 8012ae8:	f43f ae7a 	beq.w	80127e0 <_printf_float+0x98>
 8012aec:	4653      	mov	r3, sl
 8012aee:	465a      	mov	r2, fp
 8012af0:	4631      	mov	r1, r6
 8012af2:	4628      	mov	r0, r5
 8012af4:	47b8      	blx	r7
 8012af6:	3001      	adds	r0, #1
 8012af8:	f43f ae72 	beq.w	80127e0 <_printf_float+0x98>
 8012afc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012b00:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b08:	9b08      	ldr	r3, [sp, #32]
 8012b0a:	d01a      	beq.n	8012b42 <_printf_float+0x3fa>
 8012b0c:	3b01      	subs	r3, #1
 8012b0e:	f108 0201 	add.w	r2, r8, #1
 8012b12:	4631      	mov	r1, r6
 8012b14:	4628      	mov	r0, r5
 8012b16:	47b8      	blx	r7
 8012b18:	3001      	adds	r0, #1
 8012b1a:	d10e      	bne.n	8012b3a <_printf_float+0x3f2>
 8012b1c:	e660      	b.n	80127e0 <_printf_float+0x98>
 8012b1e:	2301      	movs	r3, #1
 8012b20:	464a      	mov	r2, r9
 8012b22:	4631      	mov	r1, r6
 8012b24:	4628      	mov	r0, r5
 8012b26:	47b8      	blx	r7
 8012b28:	3001      	adds	r0, #1
 8012b2a:	f43f ae59 	beq.w	80127e0 <_printf_float+0x98>
 8012b2e:	f108 0801 	add.w	r8, r8, #1
 8012b32:	9b08      	ldr	r3, [sp, #32]
 8012b34:	3b01      	subs	r3, #1
 8012b36:	4543      	cmp	r3, r8
 8012b38:	dcf1      	bgt.n	8012b1e <_printf_float+0x3d6>
 8012b3a:	9b04      	ldr	r3, [sp, #16]
 8012b3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012b40:	e6dd      	b.n	80128fe <_printf_float+0x1b6>
 8012b42:	f04f 0800 	mov.w	r8, #0
 8012b46:	f104 091a 	add.w	r9, r4, #26
 8012b4a:	e7f2      	b.n	8012b32 <_printf_float+0x3ea>
 8012b4c:	2301      	movs	r3, #1
 8012b4e:	4642      	mov	r2, r8
 8012b50:	e7df      	b.n	8012b12 <_printf_float+0x3ca>
 8012b52:	2301      	movs	r3, #1
 8012b54:	464a      	mov	r2, r9
 8012b56:	4631      	mov	r1, r6
 8012b58:	4628      	mov	r0, r5
 8012b5a:	47b8      	blx	r7
 8012b5c:	3001      	adds	r0, #1
 8012b5e:	f43f ae3f 	beq.w	80127e0 <_printf_float+0x98>
 8012b62:	f108 0801 	add.w	r8, r8, #1
 8012b66:	68e3      	ldr	r3, [r4, #12]
 8012b68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012b6a:	1a5b      	subs	r3, r3, r1
 8012b6c:	4543      	cmp	r3, r8
 8012b6e:	dcf0      	bgt.n	8012b52 <_printf_float+0x40a>
 8012b70:	e6f9      	b.n	8012966 <_printf_float+0x21e>
 8012b72:	f04f 0800 	mov.w	r8, #0
 8012b76:	f104 0919 	add.w	r9, r4, #25
 8012b7a:	e7f4      	b.n	8012b66 <_printf_float+0x41e>

08012b7c <_printf_common>:
 8012b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b80:	4616      	mov	r6, r2
 8012b82:	4699      	mov	r9, r3
 8012b84:	688a      	ldr	r2, [r1, #8]
 8012b86:	690b      	ldr	r3, [r1, #16]
 8012b88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012b8c:	4293      	cmp	r3, r2
 8012b8e:	bfb8      	it	lt
 8012b90:	4613      	movlt	r3, r2
 8012b92:	6033      	str	r3, [r6, #0]
 8012b94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012b98:	4607      	mov	r7, r0
 8012b9a:	460c      	mov	r4, r1
 8012b9c:	b10a      	cbz	r2, 8012ba2 <_printf_common+0x26>
 8012b9e:	3301      	adds	r3, #1
 8012ba0:	6033      	str	r3, [r6, #0]
 8012ba2:	6823      	ldr	r3, [r4, #0]
 8012ba4:	0699      	lsls	r1, r3, #26
 8012ba6:	bf42      	ittt	mi
 8012ba8:	6833      	ldrmi	r3, [r6, #0]
 8012baa:	3302      	addmi	r3, #2
 8012bac:	6033      	strmi	r3, [r6, #0]
 8012bae:	6825      	ldr	r5, [r4, #0]
 8012bb0:	f015 0506 	ands.w	r5, r5, #6
 8012bb4:	d106      	bne.n	8012bc4 <_printf_common+0x48>
 8012bb6:	f104 0a19 	add.w	sl, r4, #25
 8012bba:	68e3      	ldr	r3, [r4, #12]
 8012bbc:	6832      	ldr	r2, [r6, #0]
 8012bbe:	1a9b      	subs	r3, r3, r2
 8012bc0:	42ab      	cmp	r3, r5
 8012bc2:	dc26      	bgt.n	8012c12 <_printf_common+0x96>
 8012bc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012bc8:	1e13      	subs	r3, r2, #0
 8012bca:	6822      	ldr	r2, [r4, #0]
 8012bcc:	bf18      	it	ne
 8012bce:	2301      	movne	r3, #1
 8012bd0:	0692      	lsls	r2, r2, #26
 8012bd2:	d42b      	bmi.n	8012c2c <_printf_common+0xb0>
 8012bd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012bd8:	4649      	mov	r1, r9
 8012bda:	4638      	mov	r0, r7
 8012bdc:	47c0      	blx	r8
 8012bde:	3001      	adds	r0, #1
 8012be0:	d01e      	beq.n	8012c20 <_printf_common+0xa4>
 8012be2:	6823      	ldr	r3, [r4, #0]
 8012be4:	6922      	ldr	r2, [r4, #16]
 8012be6:	f003 0306 	and.w	r3, r3, #6
 8012bea:	2b04      	cmp	r3, #4
 8012bec:	bf02      	ittt	eq
 8012bee:	68e5      	ldreq	r5, [r4, #12]
 8012bf0:	6833      	ldreq	r3, [r6, #0]
 8012bf2:	1aed      	subeq	r5, r5, r3
 8012bf4:	68a3      	ldr	r3, [r4, #8]
 8012bf6:	bf0c      	ite	eq
 8012bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012bfc:	2500      	movne	r5, #0
 8012bfe:	4293      	cmp	r3, r2
 8012c00:	bfc4      	itt	gt
 8012c02:	1a9b      	subgt	r3, r3, r2
 8012c04:	18ed      	addgt	r5, r5, r3
 8012c06:	2600      	movs	r6, #0
 8012c08:	341a      	adds	r4, #26
 8012c0a:	42b5      	cmp	r5, r6
 8012c0c:	d11a      	bne.n	8012c44 <_printf_common+0xc8>
 8012c0e:	2000      	movs	r0, #0
 8012c10:	e008      	b.n	8012c24 <_printf_common+0xa8>
 8012c12:	2301      	movs	r3, #1
 8012c14:	4652      	mov	r2, sl
 8012c16:	4649      	mov	r1, r9
 8012c18:	4638      	mov	r0, r7
 8012c1a:	47c0      	blx	r8
 8012c1c:	3001      	adds	r0, #1
 8012c1e:	d103      	bne.n	8012c28 <_printf_common+0xac>
 8012c20:	f04f 30ff 	mov.w	r0, #4294967295
 8012c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c28:	3501      	adds	r5, #1
 8012c2a:	e7c6      	b.n	8012bba <_printf_common+0x3e>
 8012c2c:	18e1      	adds	r1, r4, r3
 8012c2e:	1c5a      	adds	r2, r3, #1
 8012c30:	2030      	movs	r0, #48	; 0x30
 8012c32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012c36:	4422      	add	r2, r4
 8012c38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012c3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012c40:	3302      	adds	r3, #2
 8012c42:	e7c7      	b.n	8012bd4 <_printf_common+0x58>
 8012c44:	2301      	movs	r3, #1
 8012c46:	4622      	mov	r2, r4
 8012c48:	4649      	mov	r1, r9
 8012c4a:	4638      	mov	r0, r7
 8012c4c:	47c0      	blx	r8
 8012c4e:	3001      	adds	r0, #1
 8012c50:	d0e6      	beq.n	8012c20 <_printf_common+0xa4>
 8012c52:	3601      	adds	r6, #1
 8012c54:	e7d9      	b.n	8012c0a <_printf_common+0x8e>
	...

08012c58 <_printf_i>:
 8012c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c5c:	7e0f      	ldrb	r7, [r1, #24]
 8012c5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012c60:	2f78      	cmp	r7, #120	; 0x78
 8012c62:	4691      	mov	r9, r2
 8012c64:	4680      	mov	r8, r0
 8012c66:	460c      	mov	r4, r1
 8012c68:	469a      	mov	sl, r3
 8012c6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012c6e:	d807      	bhi.n	8012c80 <_printf_i+0x28>
 8012c70:	2f62      	cmp	r7, #98	; 0x62
 8012c72:	d80a      	bhi.n	8012c8a <_printf_i+0x32>
 8012c74:	2f00      	cmp	r7, #0
 8012c76:	f000 80d4 	beq.w	8012e22 <_printf_i+0x1ca>
 8012c7a:	2f58      	cmp	r7, #88	; 0x58
 8012c7c:	f000 80c0 	beq.w	8012e00 <_printf_i+0x1a8>
 8012c80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012c84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012c88:	e03a      	b.n	8012d00 <_printf_i+0xa8>
 8012c8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012c8e:	2b15      	cmp	r3, #21
 8012c90:	d8f6      	bhi.n	8012c80 <_printf_i+0x28>
 8012c92:	a101      	add	r1, pc, #4	; (adr r1, 8012c98 <_printf_i+0x40>)
 8012c94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012c98:	08012cf1 	.word	0x08012cf1
 8012c9c:	08012d05 	.word	0x08012d05
 8012ca0:	08012c81 	.word	0x08012c81
 8012ca4:	08012c81 	.word	0x08012c81
 8012ca8:	08012c81 	.word	0x08012c81
 8012cac:	08012c81 	.word	0x08012c81
 8012cb0:	08012d05 	.word	0x08012d05
 8012cb4:	08012c81 	.word	0x08012c81
 8012cb8:	08012c81 	.word	0x08012c81
 8012cbc:	08012c81 	.word	0x08012c81
 8012cc0:	08012c81 	.word	0x08012c81
 8012cc4:	08012e09 	.word	0x08012e09
 8012cc8:	08012d31 	.word	0x08012d31
 8012ccc:	08012dc3 	.word	0x08012dc3
 8012cd0:	08012c81 	.word	0x08012c81
 8012cd4:	08012c81 	.word	0x08012c81
 8012cd8:	08012e2b 	.word	0x08012e2b
 8012cdc:	08012c81 	.word	0x08012c81
 8012ce0:	08012d31 	.word	0x08012d31
 8012ce4:	08012c81 	.word	0x08012c81
 8012ce8:	08012c81 	.word	0x08012c81
 8012cec:	08012dcb 	.word	0x08012dcb
 8012cf0:	682b      	ldr	r3, [r5, #0]
 8012cf2:	1d1a      	adds	r2, r3, #4
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	602a      	str	r2, [r5, #0]
 8012cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012cfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012d00:	2301      	movs	r3, #1
 8012d02:	e09f      	b.n	8012e44 <_printf_i+0x1ec>
 8012d04:	6820      	ldr	r0, [r4, #0]
 8012d06:	682b      	ldr	r3, [r5, #0]
 8012d08:	0607      	lsls	r7, r0, #24
 8012d0a:	f103 0104 	add.w	r1, r3, #4
 8012d0e:	6029      	str	r1, [r5, #0]
 8012d10:	d501      	bpl.n	8012d16 <_printf_i+0xbe>
 8012d12:	681e      	ldr	r6, [r3, #0]
 8012d14:	e003      	b.n	8012d1e <_printf_i+0xc6>
 8012d16:	0646      	lsls	r6, r0, #25
 8012d18:	d5fb      	bpl.n	8012d12 <_printf_i+0xba>
 8012d1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012d1e:	2e00      	cmp	r6, #0
 8012d20:	da03      	bge.n	8012d2a <_printf_i+0xd2>
 8012d22:	232d      	movs	r3, #45	; 0x2d
 8012d24:	4276      	negs	r6, r6
 8012d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d2a:	485a      	ldr	r0, [pc, #360]	; (8012e94 <_printf_i+0x23c>)
 8012d2c:	230a      	movs	r3, #10
 8012d2e:	e012      	b.n	8012d56 <_printf_i+0xfe>
 8012d30:	682b      	ldr	r3, [r5, #0]
 8012d32:	6820      	ldr	r0, [r4, #0]
 8012d34:	1d19      	adds	r1, r3, #4
 8012d36:	6029      	str	r1, [r5, #0]
 8012d38:	0605      	lsls	r5, r0, #24
 8012d3a:	d501      	bpl.n	8012d40 <_printf_i+0xe8>
 8012d3c:	681e      	ldr	r6, [r3, #0]
 8012d3e:	e002      	b.n	8012d46 <_printf_i+0xee>
 8012d40:	0641      	lsls	r1, r0, #25
 8012d42:	d5fb      	bpl.n	8012d3c <_printf_i+0xe4>
 8012d44:	881e      	ldrh	r6, [r3, #0]
 8012d46:	4853      	ldr	r0, [pc, #332]	; (8012e94 <_printf_i+0x23c>)
 8012d48:	2f6f      	cmp	r7, #111	; 0x6f
 8012d4a:	bf0c      	ite	eq
 8012d4c:	2308      	moveq	r3, #8
 8012d4e:	230a      	movne	r3, #10
 8012d50:	2100      	movs	r1, #0
 8012d52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012d56:	6865      	ldr	r5, [r4, #4]
 8012d58:	60a5      	str	r5, [r4, #8]
 8012d5a:	2d00      	cmp	r5, #0
 8012d5c:	bfa2      	ittt	ge
 8012d5e:	6821      	ldrge	r1, [r4, #0]
 8012d60:	f021 0104 	bicge.w	r1, r1, #4
 8012d64:	6021      	strge	r1, [r4, #0]
 8012d66:	b90e      	cbnz	r6, 8012d6c <_printf_i+0x114>
 8012d68:	2d00      	cmp	r5, #0
 8012d6a:	d04b      	beq.n	8012e04 <_printf_i+0x1ac>
 8012d6c:	4615      	mov	r5, r2
 8012d6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8012d72:	fb03 6711 	mls	r7, r3, r1, r6
 8012d76:	5dc7      	ldrb	r7, [r0, r7]
 8012d78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012d7c:	4637      	mov	r7, r6
 8012d7e:	42bb      	cmp	r3, r7
 8012d80:	460e      	mov	r6, r1
 8012d82:	d9f4      	bls.n	8012d6e <_printf_i+0x116>
 8012d84:	2b08      	cmp	r3, #8
 8012d86:	d10b      	bne.n	8012da0 <_printf_i+0x148>
 8012d88:	6823      	ldr	r3, [r4, #0]
 8012d8a:	07de      	lsls	r6, r3, #31
 8012d8c:	d508      	bpl.n	8012da0 <_printf_i+0x148>
 8012d8e:	6923      	ldr	r3, [r4, #16]
 8012d90:	6861      	ldr	r1, [r4, #4]
 8012d92:	4299      	cmp	r1, r3
 8012d94:	bfde      	ittt	le
 8012d96:	2330      	movle	r3, #48	; 0x30
 8012d98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012d9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012da0:	1b52      	subs	r2, r2, r5
 8012da2:	6122      	str	r2, [r4, #16]
 8012da4:	f8cd a000 	str.w	sl, [sp]
 8012da8:	464b      	mov	r3, r9
 8012daa:	aa03      	add	r2, sp, #12
 8012dac:	4621      	mov	r1, r4
 8012dae:	4640      	mov	r0, r8
 8012db0:	f7ff fee4 	bl	8012b7c <_printf_common>
 8012db4:	3001      	adds	r0, #1
 8012db6:	d14a      	bne.n	8012e4e <_printf_i+0x1f6>
 8012db8:	f04f 30ff 	mov.w	r0, #4294967295
 8012dbc:	b004      	add	sp, #16
 8012dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dc2:	6823      	ldr	r3, [r4, #0]
 8012dc4:	f043 0320 	orr.w	r3, r3, #32
 8012dc8:	6023      	str	r3, [r4, #0]
 8012dca:	4833      	ldr	r0, [pc, #204]	; (8012e98 <_printf_i+0x240>)
 8012dcc:	2778      	movs	r7, #120	; 0x78
 8012dce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012dd2:	6823      	ldr	r3, [r4, #0]
 8012dd4:	6829      	ldr	r1, [r5, #0]
 8012dd6:	061f      	lsls	r7, r3, #24
 8012dd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8012ddc:	d402      	bmi.n	8012de4 <_printf_i+0x18c>
 8012dde:	065f      	lsls	r7, r3, #25
 8012de0:	bf48      	it	mi
 8012de2:	b2b6      	uxthmi	r6, r6
 8012de4:	07df      	lsls	r7, r3, #31
 8012de6:	bf48      	it	mi
 8012de8:	f043 0320 	orrmi.w	r3, r3, #32
 8012dec:	6029      	str	r1, [r5, #0]
 8012dee:	bf48      	it	mi
 8012df0:	6023      	strmi	r3, [r4, #0]
 8012df2:	b91e      	cbnz	r6, 8012dfc <_printf_i+0x1a4>
 8012df4:	6823      	ldr	r3, [r4, #0]
 8012df6:	f023 0320 	bic.w	r3, r3, #32
 8012dfa:	6023      	str	r3, [r4, #0]
 8012dfc:	2310      	movs	r3, #16
 8012dfe:	e7a7      	b.n	8012d50 <_printf_i+0xf8>
 8012e00:	4824      	ldr	r0, [pc, #144]	; (8012e94 <_printf_i+0x23c>)
 8012e02:	e7e4      	b.n	8012dce <_printf_i+0x176>
 8012e04:	4615      	mov	r5, r2
 8012e06:	e7bd      	b.n	8012d84 <_printf_i+0x12c>
 8012e08:	682b      	ldr	r3, [r5, #0]
 8012e0a:	6826      	ldr	r6, [r4, #0]
 8012e0c:	6961      	ldr	r1, [r4, #20]
 8012e0e:	1d18      	adds	r0, r3, #4
 8012e10:	6028      	str	r0, [r5, #0]
 8012e12:	0635      	lsls	r5, r6, #24
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	d501      	bpl.n	8012e1c <_printf_i+0x1c4>
 8012e18:	6019      	str	r1, [r3, #0]
 8012e1a:	e002      	b.n	8012e22 <_printf_i+0x1ca>
 8012e1c:	0670      	lsls	r0, r6, #25
 8012e1e:	d5fb      	bpl.n	8012e18 <_printf_i+0x1c0>
 8012e20:	8019      	strh	r1, [r3, #0]
 8012e22:	2300      	movs	r3, #0
 8012e24:	6123      	str	r3, [r4, #16]
 8012e26:	4615      	mov	r5, r2
 8012e28:	e7bc      	b.n	8012da4 <_printf_i+0x14c>
 8012e2a:	682b      	ldr	r3, [r5, #0]
 8012e2c:	1d1a      	adds	r2, r3, #4
 8012e2e:	602a      	str	r2, [r5, #0]
 8012e30:	681d      	ldr	r5, [r3, #0]
 8012e32:	6862      	ldr	r2, [r4, #4]
 8012e34:	2100      	movs	r1, #0
 8012e36:	4628      	mov	r0, r5
 8012e38:	f7ed fa6a 	bl	8000310 <memchr>
 8012e3c:	b108      	cbz	r0, 8012e42 <_printf_i+0x1ea>
 8012e3e:	1b40      	subs	r0, r0, r5
 8012e40:	6060      	str	r0, [r4, #4]
 8012e42:	6863      	ldr	r3, [r4, #4]
 8012e44:	6123      	str	r3, [r4, #16]
 8012e46:	2300      	movs	r3, #0
 8012e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e4c:	e7aa      	b.n	8012da4 <_printf_i+0x14c>
 8012e4e:	6923      	ldr	r3, [r4, #16]
 8012e50:	462a      	mov	r2, r5
 8012e52:	4649      	mov	r1, r9
 8012e54:	4640      	mov	r0, r8
 8012e56:	47d0      	blx	sl
 8012e58:	3001      	adds	r0, #1
 8012e5a:	d0ad      	beq.n	8012db8 <_printf_i+0x160>
 8012e5c:	6823      	ldr	r3, [r4, #0]
 8012e5e:	079b      	lsls	r3, r3, #30
 8012e60:	d413      	bmi.n	8012e8a <_printf_i+0x232>
 8012e62:	68e0      	ldr	r0, [r4, #12]
 8012e64:	9b03      	ldr	r3, [sp, #12]
 8012e66:	4298      	cmp	r0, r3
 8012e68:	bfb8      	it	lt
 8012e6a:	4618      	movlt	r0, r3
 8012e6c:	e7a6      	b.n	8012dbc <_printf_i+0x164>
 8012e6e:	2301      	movs	r3, #1
 8012e70:	4632      	mov	r2, r6
 8012e72:	4649      	mov	r1, r9
 8012e74:	4640      	mov	r0, r8
 8012e76:	47d0      	blx	sl
 8012e78:	3001      	adds	r0, #1
 8012e7a:	d09d      	beq.n	8012db8 <_printf_i+0x160>
 8012e7c:	3501      	adds	r5, #1
 8012e7e:	68e3      	ldr	r3, [r4, #12]
 8012e80:	9903      	ldr	r1, [sp, #12]
 8012e82:	1a5b      	subs	r3, r3, r1
 8012e84:	42ab      	cmp	r3, r5
 8012e86:	dcf2      	bgt.n	8012e6e <_printf_i+0x216>
 8012e88:	e7eb      	b.n	8012e62 <_printf_i+0x20a>
 8012e8a:	2500      	movs	r5, #0
 8012e8c:	f104 0619 	add.w	r6, r4, #25
 8012e90:	e7f5      	b.n	8012e7e <_printf_i+0x226>
 8012e92:	bf00      	nop
 8012e94:	080158ea 	.word	0x080158ea
 8012e98:	080158fb 	.word	0x080158fb

08012e9c <std>:
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	b510      	push	{r4, lr}
 8012ea0:	4604      	mov	r4, r0
 8012ea2:	e9c0 3300 	strd	r3, r3, [r0]
 8012ea6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012eaa:	6083      	str	r3, [r0, #8]
 8012eac:	8181      	strh	r1, [r0, #12]
 8012eae:	6643      	str	r3, [r0, #100]	; 0x64
 8012eb0:	81c2      	strh	r2, [r0, #14]
 8012eb2:	6183      	str	r3, [r0, #24]
 8012eb4:	4619      	mov	r1, r3
 8012eb6:	2208      	movs	r2, #8
 8012eb8:	305c      	adds	r0, #92	; 0x5c
 8012eba:	f000 f9ff 	bl	80132bc <memset>
 8012ebe:	4b0d      	ldr	r3, [pc, #52]	; (8012ef4 <std+0x58>)
 8012ec0:	6263      	str	r3, [r4, #36]	; 0x24
 8012ec2:	4b0d      	ldr	r3, [pc, #52]	; (8012ef8 <std+0x5c>)
 8012ec4:	62a3      	str	r3, [r4, #40]	; 0x28
 8012ec6:	4b0d      	ldr	r3, [pc, #52]	; (8012efc <std+0x60>)
 8012ec8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012eca:	4b0d      	ldr	r3, [pc, #52]	; (8012f00 <std+0x64>)
 8012ecc:	6323      	str	r3, [r4, #48]	; 0x30
 8012ece:	4b0d      	ldr	r3, [pc, #52]	; (8012f04 <std+0x68>)
 8012ed0:	6224      	str	r4, [r4, #32]
 8012ed2:	429c      	cmp	r4, r3
 8012ed4:	d006      	beq.n	8012ee4 <std+0x48>
 8012ed6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012eda:	4294      	cmp	r4, r2
 8012edc:	d002      	beq.n	8012ee4 <std+0x48>
 8012ede:	33d0      	adds	r3, #208	; 0xd0
 8012ee0:	429c      	cmp	r4, r3
 8012ee2:	d105      	bne.n	8012ef0 <std+0x54>
 8012ee4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012eec:	f000 bab8 	b.w	8013460 <__retarget_lock_init_recursive>
 8012ef0:	bd10      	pop	{r4, pc}
 8012ef2:	bf00      	nop
 8012ef4:	0801310d 	.word	0x0801310d
 8012ef8:	0801312f 	.word	0x0801312f
 8012efc:	08013167 	.word	0x08013167
 8012f00:	0801318b 	.word	0x0801318b
 8012f04:	24010b98 	.word	0x24010b98

08012f08 <stdio_exit_handler>:
 8012f08:	4a02      	ldr	r2, [pc, #8]	; (8012f14 <stdio_exit_handler+0xc>)
 8012f0a:	4903      	ldr	r1, [pc, #12]	; (8012f18 <stdio_exit_handler+0x10>)
 8012f0c:	4803      	ldr	r0, [pc, #12]	; (8012f1c <stdio_exit_handler+0x14>)
 8012f0e:	f000 b869 	b.w	8012fe4 <_fwalk_sglue>
 8012f12:	bf00      	nop
 8012f14:	24000118 	.word	0x24000118
 8012f18:	08014cfd 	.word	0x08014cfd
 8012f1c:	24000124 	.word	0x24000124

08012f20 <cleanup_stdio>:
 8012f20:	6841      	ldr	r1, [r0, #4]
 8012f22:	4b0c      	ldr	r3, [pc, #48]	; (8012f54 <cleanup_stdio+0x34>)
 8012f24:	4299      	cmp	r1, r3
 8012f26:	b510      	push	{r4, lr}
 8012f28:	4604      	mov	r4, r0
 8012f2a:	d001      	beq.n	8012f30 <cleanup_stdio+0x10>
 8012f2c:	f001 fee6 	bl	8014cfc <_fflush_r>
 8012f30:	68a1      	ldr	r1, [r4, #8]
 8012f32:	4b09      	ldr	r3, [pc, #36]	; (8012f58 <cleanup_stdio+0x38>)
 8012f34:	4299      	cmp	r1, r3
 8012f36:	d002      	beq.n	8012f3e <cleanup_stdio+0x1e>
 8012f38:	4620      	mov	r0, r4
 8012f3a:	f001 fedf 	bl	8014cfc <_fflush_r>
 8012f3e:	68e1      	ldr	r1, [r4, #12]
 8012f40:	4b06      	ldr	r3, [pc, #24]	; (8012f5c <cleanup_stdio+0x3c>)
 8012f42:	4299      	cmp	r1, r3
 8012f44:	d004      	beq.n	8012f50 <cleanup_stdio+0x30>
 8012f46:	4620      	mov	r0, r4
 8012f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f4c:	f001 bed6 	b.w	8014cfc <_fflush_r>
 8012f50:	bd10      	pop	{r4, pc}
 8012f52:	bf00      	nop
 8012f54:	24010b98 	.word	0x24010b98
 8012f58:	24010c00 	.word	0x24010c00
 8012f5c:	24010c68 	.word	0x24010c68

08012f60 <global_stdio_init.part.0>:
 8012f60:	b510      	push	{r4, lr}
 8012f62:	4b0b      	ldr	r3, [pc, #44]	; (8012f90 <global_stdio_init.part.0+0x30>)
 8012f64:	4c0b      	ldr	r4, [pc, #44]	; (8012f94 <global_stdio_init.part.0+0x34>)
 8012f66:	4a0c      	ldr	r2, [pc, #48]	; (8012f98 <global_stdio_init.part.0+0x38>)
 8012f68:	601a      	str	r2, [r3, #0]
 8012f6a:	4620      	mov	r0, r4
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	2104      	movs	r1, #4
 8012f70:	f7ff ff94 	bl	8012e9c <std>
 8012f74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012f78:	2201      	movs	r2, #1
 8012f7a:	2109      	movs	r1, #9
 8012f7c:	f7ff ff8e 	bl	8012e9c <std>
 8012f80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012f84:	2202      	movs	r2, #2
 8012f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f8a:	2112      	movs	r1, #18
 8012f8c:	f7ff bf86 	b.w	8012e9c <std>
 8012f90:	24010cd0 	.word	0x24010cd0
 8012f94:	24010b98 	.word	0x24010b98
 8012f98:	08012f09 	.word	0x08012f09

08012f9c <__sfp_lock_acquire>:
 8012f9c:	4801      	ldr	r0, [pc, #4]	; (8012fa4 <__sfp_lock_acquire+0x8>)
 8012f9e:	f000 ba60 	b.w	8013462 <__retarget_lock_acquire_recursive>
 8012fa2:	bf00      	nop
 8012fa4:	24010cd9 	.word	0x24010cd9

08012fa8 <__sfp_lock_release>:
 8012fa8:	4801      	ldr	r0, [pc, #4]	; (8012fb0 <__sfp_lock_release+0x8>)
 8012faa:	f000 ba5b 	b.w	8013464 <__retarget_lock_release_recursive>
 8012fae:	bf00      	nop
 8012fb0:	24010cd9 	.word	0x24010cd9

08012fb4 <__sinit>:
 8012fb4:	b510      	push	{r4, lr}
 8012fb6:	4604      	mov	r4, r0
 8012fb8:	f7ff fff0 	bl	8012f9c <__sfp_lock_acquire>
 8012fbc:	6a23      	ldr	r3, [r4, #32]
 8012fbe:	b11b      	cbz	r3, 8012fc8 <__sinit+0x14>
 8012fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012fc4:	f7ff bff0 	b.w	8012fa8 <__sfp_lock_release>
 8012fc8:	4b04      	ldr	r3, [pc, #16]	; (8012fdc <__sinit+0x28>)
 8012fca:	6223      	str	r3, [r4, #32]
 8012fcc:	4b04      	ldr	r3, [pc, #16]	; (8012fe0 <__sinit+0x2c>)
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d1f5      	bne.n	8012fc0 <__sinit+0xc>
 8012fd4:	f7ff ffc4 	bl	8012f60 <global_stdio_init.part.0>
 8012fd8:	e7f2      	b.n	8012fc0 <__sinit+0xc>
 8012fda:	bf00      	nop
 8012fdc:	08012f21 	.word	0x08012f21
 8012fe0:	24010cd0 	.word	0x24010cd0

08012fe4 <_fwalk_sglue>:
 8012fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fe8:	4607      	mov	r7, r0
 8012fea:	4688      	mov	r8, r1
 8012fec:	4614      	mov	r4, r2
 8012fee:	2600      	movs	r6, #0
 8012ff0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012ff4:	f1b9 0901 	subs.w	r9, r9, #1
 8012ff8:	d505      	bpl.n	8013006 <_fwalk_sglue+0x22>
 8012ffa:	6824      	ldr	r4, [r4, #0]
 8012ffc:	2c00      	cmp	r4, #0
 8012ffe:	d1f7      	bne.n	8012ff0 <_fwalk_sglue+0xc>
 8013000:	4630      	mov	r0, r6
 8013002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013006:	89ab      	ldrh	r3, [r5, #12]
 8013008:	2b01      	cmp	r3, #1
 801300a:	d907      	bls.n	801301c <_fwalk_sglue+0x38>
 801300c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013010:	3301      	adds	r3, #1
 8013012:	d003      	beq.n	801301c <_fwalk_sglue+0x38>
 8013014:	4629      	mov	r1, r5
 8013016:	4638      	mov	r0, r7
 8013018:	47c0      	blx	r8
 801301a:	4306      	orrs	r6, r0
 801301c:	3568      	adds	r5, #104	; 0x68
 801301e:	e7e9      	b.n	8012ff4 <_fwalk_sglue+0x10>

08013020 <iprintf>:
 8013020:	b40f      	push	{r0, r1, r2, r3}
 8013022:	b507      	push	{r0, r1, r2, lr}
 8013024:	4906      	ldr	r1, [pc, #24]	; (8013040 <iprintf+0x20>)
 8013026:	ab04      	add	r3, sp, #16
 8013028:	6808      	ldr	r0, [r1, #0]
 801302a:	f853 2b04 	ldr.w	r2, [r3], #4
 801302e:	6881      	ldr	r1, [r0, #8]
 8013030:	9301      	str	r3, [sp, #4]
 8013032:	f001 fcc3 	bl	80149bc <_vfiprintf_r>
 8013036:	b003      	add	sp, #12
 8013038:	f85d eb04 	ldr.w	lr, [sp], #4
 801303c:	b004      	add	sp, #16
 801303e:	4770      	bx	lr
 8013040:	24000170 	.word	0x24000170

08013044 <putchar>:
 8013044:	4b02      	ldr	r3, [pc, #8]	; (8013050 <putchar+0xc>)
 8013046:	4601      	mov	r1, r0
 8013048:	6818      	ldr	r0, [r3, #0]
 801304a:	6882      	ldr	r2, [r0, #8]
 801304c:	f001 bee0 	b.w	8014e10 <_putc_r>
 8013050:	24000170 	.word	0x24000170

08013054 <_puts_r>:
 8013054:	6a03      	ldr	r3, [r0, #32]
 8013056:	b570      	push	{r4, r5, r6, lr}
 8013058:	6884      	ldr	r4, [r0, #8]
 801305a:	4605      	mov	r5, r0
 801305c:	460e      	mov	r6, r1
 801305e:	b90b      	cbnz	r3, 8013064 <_puts_r+0x10>
 8013060:	f7ff ffa8 	bl	8012fb4 <__sinit>
 8013064:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013066:	07db      	lsls	r3, r3, #31
 8013068:	d405      	bmi.n	8013076 <_puts_r+0x22>
 801306a:	89a3      	ldrh	r3, [r4, #12]
 801306c:	0598      	lsls	r0, r3, #22
 801306e:	d402      	bmi.n	8013076 <_puts_r+0x22>
 8013070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013072:	f000 f9f6 	bl	8013462 <__retarget_lock_acquire_recursive>
 8013076:	89a3      	ldrh	r3, [r4, #12]
 8013078:	0719      	lsls	r1, r3, #28
 801307a:	d513      	bpl.n	80130a4 <_puts_r+0x50>
 801307c:	6923      	ldr	r3, [r4, #16]
 801307e:	b18b      	cbz	r3, 80130a4 <_puts_r+0x50>
 8013080:	3e01      	subs	r6, #1
 8013082:	68a3      	ldr	r3, [r4, #8]
 8013084:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013088:	3b01      	subs	r3, #1
 801308a:	60a3      	str	r3, [r4, #8]
 801308c:	b9e9      	cbnz	r1, 80130ca <_puts_r+0x76>
 801308e:	2b00      	cmp	r3, #0
 8013090:	da2e      	bge.n	80130f0 <_puts_r+0x9c>
 8013092:	4622      	mov	r2, r4
 8013094:	210a      	movs	r1, #10
 8013096:	4628      	mov	r0, r5
 8013098:	f000 f87b 	bl	8013192 <__swbuf_r>
 801309c:	3001      	adds	r0, #1
 801309e:	d007      	beq.n	80130b0 <_puts_r+0x5c>
 80130a0:	250a      	movs	r5, #10
 80130a2:	e007      	b.n	80130b4 <_puts_r+0x60>
 80130a4:	4621      	mov	r1, r4
 80130a6:	4628      	mov	r0, r5
 80130a8:	f000 f8b0 	bl	801320c <__swsetup_r>
 80130ac:	2800      	cmp	r0, #0
 80130ae:	d0e7      	beq.n	8013080 <_puts_r+0x2c>
 80130b0:	f04f 35ff 	mov.w	r5, #4294967295
 80130b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80130b6:	07da      	lsls	r2, r3, #31
 80130b8:	d405      	bmi.n	80130c6 <_puts_r+0x72>
 80130ba:	89a3      	ldrh	r3, [r4, #12]
 80130bc:	059b      	lsls	r3, r3, #22
 80130be:	d402      	bmi.n	80130c6 <_puts_r+0x72>
 80130c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80130c2:	f000 f9cf 	bl	8013464 <__retarget_lock_release_recursive>
 80130c6:	4628      	mov	r0, r5
 80130c8:	bd70      	pop	{r4, r5, r6, pc}
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	da04      	bge.n	80130d8 <_puts_r+0x84>
 80130ce:	69a2      	ldr	r2, [r4, #24]
 80130d0:	429a      	cmp	r2, r3
 80130d2:	dc06      	bgt.n	80130e2 <_puts_r+0x8e>
 80130d4:	290a      	cmp	r1, #10
 80130d6:	d004      	beq.n	80130e2 <_puts_r+0x8e>
 80130d8:	6823      	ldr	r3, [r4, #0]
 80130da:	1c5a      	adds	r2, r3, #1
 80130dc:	6022      	str	r2, [r4, #0]
 80130de:	7019      	strb	r1, [r3, #0]
 80130e0:	e7cf      	b.n	8013082 <_puts_r+0x2e>
 80130e2:	4622      	mov	r2, r4
 80130e4:	4628      	mov	r0, r5
 80130e6:	f000 f854 	bl	8013192 <__swbuf_r>
 80130ea:	3001      	adds	r0, #1
 80130ec:	d1c9      	bne.n	8013082 <_puts_r+0x2e>
 80130ee:	e7df      	b.n	80130b0 <_puts_r+0x5c>
 80130f0:	6823      	ldr	r3, [r4, #0]
 80130f2:	250a      	movs	r5, #10
 80130f4:	1c5a      	adds	r2, r3, #1
 80130f6:	6022      	str	r2, [r4, #0]
 80130f8:	701d      	strb	r5, [r3, #0]
 80130fa:	e7db      	b.n	80130b4 <_puts_r+0x60>

080130fc <puts>:
 80130fc:	4b02      	ldr	r3, [pc, #8]	; (8013108 <puts+0xc>)
 80130fe:	4601      	mov	r1, r0
 8013100:	6818      	ldr	r0, [r3, #0]
 8013102:	f7ff bfa7 	b.w	8013054 <_puts_r>
 8013106:	bf00      	nop
 8013108:	24000170 	.word	0x24000170

0801310c <__sread>:
 801310c:	b510      	push	{r4, lr}
 801310e:	460c      	mov	r4, r1
 8013110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013114:	f000 f956 	bl	80133c4 <_read_r>
 8013118:	2800      	cmp	r0, #0
 801311a:	bfab      	itete	ge
 801311c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801311e:	89a3      	ldrhlt	r3, [r4, #12]
 8013120:	181b      	addge	r3, r3, r0
 8013122:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013126:	bfac      	ite	ge
 8013128:	6563      	strge	r3, [r4, #84]	; 0x54
 801312a:	81a3      	strhlt	r3, [r4, #12]
 801312c:	bd10      	pop	{r4, pc}

0801312e <__swrite>:
 801312e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013132:	461f      	mov	r7, r3
 8013134:	898b      	ldrh	r3, [r1, #12]
 8013136:	05db      	lsls	r3, r3, #23
 8013138:	4605      	mov	r5, r0
 801313a:	460c      	mov	r4, r1
 801313c:	4616      	mov	r6, r2
 801313e:	d505      	bpl.n	801314c <__swrite+0x1e>
 8013140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013144:	2302      	movs	r3, #2
 8013146:	2200      	movs	r2, #0
 8013148:	f000 f92a 	bl	80133a0 <_lseek_r>
 801314c:	89a3      	ldrh	r3, [r4, #12]
 801314e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013152:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013156:	81a3      	strh	r3, [r4, #12]
 8013158:	4632      	mov	r2, r6
 801315a:	463b      	mov	r3, r7
 801315c:	4628      	mov	r0, r5
 801315e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013162:	f000 b941 	b.w	80133e8 <_write_r>

08013166 <__sseek>:
 8013166:	b510      	push	{r4, lr}
 8013168:	460c      	mov	r4, r1
 801316a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801316e:	f000 f917 	bl	80133a0 <_lseek_r>
 8013172:	1c43      	adds	r3, r0, #1
 8013174:	89a3      	ldrh	r3, [r4, #12]
 8013176:	bf15      	itete	ne
 8013178:	6560      	strne	r0, [r4, #84]	; 0x54
 801317a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801317e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013182:	81a3      	strheq	r3, [r4, #12]
 8013184:	bf18      	it	ne
 8013186:	81a3      	strhne	r3, [r4, #12]
 8013188:	bd10      	pop	{r4, pc}

0801318a <__sclose>:
 801318a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801318e:	f000 b8a1 	b.w	80132d4 <_close_r>

08013192 <__swbuf_r>:
 8013192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013194:	460e      	mov	r6, r1
 8013196:	4614      	mov	r4, r2
 8013198:	4605      	mov	r5, r0
 801319a:	b118      	cbz	r0, 80131a4 <__swbuf_r+0x12>
 801319c:	6a03      	ldr	r3, [r0, #32]
 801319e:	b90b      	cbnz	r3, 80131a4 <__swbuf_r+0x12>
 80131a0:	f7ff ff08 	bl	8012fb4 <__sinit>
 80131a4:	69a3      	ldr	r3, [r4, #24]
 80131a6:	60a3      	str	r3, [r4, #8]
 80131a8:	89a3      	ldrh	r3, [r4, #12]
 80131aa:	071a      	lsls	r2, r3, #28
 80131ac:	d525      	bpl.n	80131fa <__swbuf_r+0x68>
 80131ae:	6923      	ldr	r3, [r4, #16]
 80131b0:	b31b      	cbz	r3, 80131fa <__swbuf_r+0x68>
 80131b2:	6823      	ldr	r3, [r4, #0]
 80131b4:	6922      	ldr	r2, [r4, #16]
 80131b6:	1a98      	subs	r0, r3, r2
 80131b8:	6963      	ldr	r3, [r4, #20]
 80131ba:	b2f6      	uxtb	r6, r6
 80131bc:	4283      	cmp	r3, r0
 80131be:	4637      	mov	r7, r6
 80131c0:	dc04      	bgt.n	80131cc <__swbuf_r+0x3a>
 80131c2:	4621      	mov	r1, r4
 80131c4:	4628      	mov	r0, r5
 80131c6:	f001 fd99 	bl	8014cfc <_fflush_r>
 80131ca:	b9e0      	cbnz	r0, 8013206 <__swbuf_r+0x74>
 80131cc:	68a3      	ldr	r3, [r4, #8]
 80131ce:	3b01      	subs	r3, #1
 80131d0:	60a3      	str	r3, [r4, #8]
 80131d2:	6823      	ldr	r3, [r4, #0]
 80131d4:	1c5a      	adds	r2, r3, #1
 80131d6:	6022      	str	r2, [r4, #0]
 80131d8:	701e      	strb	r6, [r3, #0]
 80131da:	6962      	ldr	r2, [r4, #20]
 80131dc:	1c43      	adds	r3, r0, #1
 80131de:	429a      	cmp	r2, r3
 80131e0:	d004      	beq.n	80131ec <__swbuf_r+0x5a>
 80131e2:	89a3      	ldrh	r3, [r4, #12]
 80131e4:	07db      	lsls	r3, r3, #31
 80131e6:	d506      	bpl.n	80131f6 <__swbuf_r+0x64>
 80131e8:	2e0a      	cmp	r6, #10
 80131ea:	d104      	bne.n	80131f6 <__swbuf_r+0x64>
 80131ec:	4621      	mov	r1, r4
 80131ee:	4628      	mov	r0, r5
 80131f0:	f001 fd84 	bl	8014cfc <_fflush_r>
 80131f4:	b938      	cbnz	r0, 8013206 <__swbuf_r+0x74>
 80131f6:	4638      	mov	r0, r7
 80131f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131fa:	4621      	mov	r1, r4
 80131fc:	4628      	mov	r0, r5
 80131fe:	f000 f805 	bl	801320c <__swsetup_r>
 8013202:	2800      	cmp	r0, #0
 8013204:	d0d5      	beq.n	80131b2 <__swbuf_r+0x20>
 8013206:	f04f 37ff 	mov.w	r7, #4294967295
 801320a:	e7f4      	b.n	80131f6 <__swbuf_r+0x64>

0801320c <__swsetup_r>:
 801320c:	b538      	push	{r3, r4, r5, lr}
 801320e:	4b2a      	ldr	r3, [pc, #168]	; (80132b8 <__swsetup_r+0xac>)
 8013210:	4605      	mov	r5, r0
 8013212:	6818      	ldr	r0, [r3, #0]
 8013214:	460c      	mov	r4, r1
 8013216:	b118      	cbz	r0, 8013220 <__swsetup_r+0x14>
 8013218:	6a03      	ldr	r3, [r0, #32]
 801321a:	b90b      	cbnz	r3, 8013220 <__swsetup_r+0x14>
 801321c:	f7ff feca 	bl	8012fb4 <__sinit>
 8013220:	89a3      	ldrh	r3, [r4, #12]
 8013222:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013226:	0718      	lsls	r0, r3, #28
 8013228:	d422      	bmi.n	8013270 <__swsetup_r+0x64>
 801322a:	06d9      	lsls	r1, r3, #27
 801322c:	d407      	bmi.n	801323e <__swsetup_r+0x32>
 801322e:	2309      	movs	r3, #9
 8013230:	602b      	str	r3, [r5, #0]
 8013232:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013236:	81a3      	strh	r3, [r4, #12]
 8013238:	f04f 30ff 	mov.w	r0, #4294967295
 801323c:	e034      	b.n	80132a8 <__swsetup_r+0x9c>
 801323e:	0758      	lsls	r0, r3, #29
 8013240:	d512      	bpl.n	8013268 <__swsetup_r+0x5c>
 8013242:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013244:	b141      	cbz	r1, 8013258 <__swsetup_r+0x4c>
 8013246:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801324a:	4299      	cmp	r1, r3
 801324c:	d002      	beq.n	8013254 <__swsetup_r+0x48>
 801324e:	4628      	mov	r0, r5
 8013250:	f000 ff0e 	bl	8014070 <_free_r>
 8013254:	2300      	movs	r3, #0
 8013256:	6363      	str	r3, [r4, #52]	; 0x34
 8013258:	89a3      	ldrh	r3, [r4, #12]
 801325a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801325e:	81a3      	strh	r3, [r4, #12]
 8013260:	2300      	movs	r3, #0
 8013262:	6063      	str	r3, [r4, #4]
 8013264:	6923      	ldr	r3, [r4, #16]
 8013266:	6023      	str	r3, [r4, #0]
 8013268:	89a3      	ldrh	r3, [r4, #12]
 801326a:	f043 0308 	orr.w	r3, r3, #8
 801326e:	81a3      	strh	r3, [r4, #12]
 8013270:	6923      	ldr	r3, [r4, #16]
 8013272:	b94b      	cbnz	r3, 8013288 <__swsetup_r+0x7c>
 8013274:	89a3      	ldrh	r3, [r4, #12]
 8013276:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801327a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801327e:	d003      	beq.n	8013288 <__swsetup_r+0x7c>
 8013280:	4621      	mov	r1, r4
 8013282:	4628      	mov	r0, r5
 8013284:	f001 fd88 	bl	8014d98 <__smakebuf_r>
 8013288:	89a0      	ldrh	r0, [r4, #12]
 801328a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801328e:	f010 0301 	ands.w	r3, r0, #1
 8013292:	d00a      	beq.n	80132aa <__swsetup_r+0x9e>
 8013294:	2300      	movs	r3, #0
 8013296:	60a3      	str	r3, [r4, #8]
 8013298:	6963      	ldr	r3, [r4, #20]
 801329a:	425b      	negs	r3, r3
 801329c:	61a3      	str	r3, [r4, #24]
 801329e:	6923      	ldr	r3, [r4, #16]
 80132a0:	b943      	cbnz	r3, 80132b4 <__swsetup_r+0xa8>
 80132a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80132a6:	d1c4      	bne.n	8013232 <__swsetup_r+0x26>
 80132a8:	bd38      	pop	{r3, r4, r5, pc}
 80132aa:	0781      	lsls	r1, r0, #30
 80132ac:	bf58      	it	pl
 80132ae:	6963      	ldrpl	r3, [r4, #20]
 80132b0:	60a3      	str	r3, [r4, #8]
 80132b2:	e7f4      	b.n	801329e <__swsetup_r+0x92>
 80132b4:	2000      	movs	r0, #0
 80132b6:	e7f7      	b.n	80132a8 <__swsetup_r+0x9c>
 80132b8:	24000170 	.word	0x24000170

080132bc <memset>:
 80132bc:	4402      	add	r2, r0
 80132be:	4603      	mov	r3, r0
 80132c0:	4293      	cmp	r3, r2
 80132c2:	d100      	bne.n	80132c6 <memset+0xa>
 80132c4:	4770      	bx	lr
 80132c6:	f803 1b01 	strb.w	r1, [r3], #1
 80132ca:	e7f9      	b.n	80132c0 <memset+0x4>

080132cc <_localeconv_r>:
 80132cc:	4800      	ldr	r0, [pc, #0]	; (80132d0 <_localeconv_r+0x4>)
 80132ce:	4770      	bx	lr
 80132d0:	24000264 	.word	0x24000264

080132d4 <_close_r>:
 80132d4:	b538      	push	{r3, r4, r5, lr}
 80132d6:	4d06      	ldr	r5, [pc, #24]	; (80132f0 <_close_r+0x1c>)
 80132d8:	2300      	movs	r3, #0
 80132da:	4604      	mov	r4, r0
 80132dc:	4608      	mov	r0, r1
 80132de:	602b      	str	r3, [r5, #0]
 80132e0:	f7ee fa8b 	bl	80017fa <_close>
 80132e4:	1c43      	adds	r3, r0, #1
 80132e6:	d102      	bne.n	80132ee <_close_r+0x1a>
 80132e8:	682b      	ldr	r3, [r5, #0]
 80132ea:	b103      	cbz	r3, 80132ee <_close_r+0x1a>
 80132ec:	6023      	str	r3, [r4, #0]
 80132ee:	bd38      	pop	{r3, r4, r5, pc}
 80132f0:	24010cd4 	.word	0x24010cd4

080132f4 <_reclaim_reent>:
 80132f4:	4b29      	ldr	r3, [pc, #164]	; (801339c <_reclaim_reent+0xa8>)
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	4283      	cmp	r3, r0
 80132fa:	b570      	push	{r4, r5, r6, lr}
 80132fc:	4604      	mov	r4, r0
 80132fe:	d04b      	beq.n	8013398 <_reclaim_reent+0xa4>
 8013300:	69c3      	ldr	r3, [r0, #28]
 8013302:	b143      	cbz	r3, 8013316 <_reclaim_reent+0x22>
 8013304:	68db      	ldr	r3, [r3, #12]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d144      	bne.n	8013394 <_reclaim_reent+0xa0>
 801330a:	69e3      	ldr	r3, [r4, #28]
 801330c:	6819      	ldr	r1, [r3, #0]
 801330e:	b111      	cbz	r1, 8013316 <_reclaim_reent+0x22>
 8013310:	4620      	mov	r0, r4
 8013312:	f000 fead 	bl	8014070 <_free_r>
 8013316:	6961      	ldr	r1, [r4, #20]
 8013318:	b111      	cbz	r1, 8013320 <_reclaim_reent+0x2c>
 801331a:	4620      	mov	r0, r4
 801331c:	f000 fea8 	bl	8014070 <_free_r>
 8013320:	69e1      	ldr	r1, [r4, #28]
 8013322:	b111      	cbz	r1, 801332a <_reclaim_reent+0x36>
 8013324:	4620      	mov	r0, r4
 8013326:	f000 fea3 	bl	8014070 <_free_r>
 801332a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801332c:	b111      	cbz	r1, 8013334 <_reclaim_reent+0x40>
 801332e:	4620      	mov	r0, r4
 8013330:	f000 fe9e 	bl	8014070 <_free_r>
 8013334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013336:	b111      	cbz	r1, 801333e <_reclaim_reent+0x4a>
 8013338:	4620      	mov	r0, r4
 801333a:	f000 fe99 	bl	8014070 <_free_r>
 801333e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013340:	b111      	cbz	r1, 8013348 <_reclaim_reent+0x54>
 8013342:	4620      	mov	r0, r4
 8013344:	f000 fe94 	bl	8014070 <_free_r>
 8013348:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801334a:	b111      	cbz	r1, 8013352 <_reclaim_reent+0x5e>
 801334c:	4620      	mov	r0, r4
 801334e:	f000 fe8f 	bl	8014070 <_free_r>
 8013352:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8013354:	b111      	cbz	r1, 801335c <_reclaim_reent+0x68>
 8013356:	4620      	mov	r0, r4
 8013358:	f000 fe8a 	bl	8014070 <_free_r>
 801335c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801335e:	b111      	cbz	r1, 8013366 <_reclaim_reent+0x72>
 8013360:	4620      	mov	r0, r4
 8013362:	f000 fe85 	bl	8014070 <_free_r>
 8013366:	6a23      	ldr	r3, [r4, #32]
 8013368:	b1b3      	cbz	r3, 8013398 <_reclaim_reent+0xa4>
 801336a:	4620      	mov	r0, r4
 801336c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013370:	4718      	bx	r3
 8013372:	5949      	ldr	r1, [r1, r5]
 8013374:	b941      	cbnz	r1, 8013388 <_reclaim_reent+0x94>
 8013376:	3504      	adds	r5, #4
 8013378:	69e3      	ldr	r3, [r4, #28]
 801337a:	2d80      	cmp	r5, #128	; 0x80
 801337c:	68d9      	ldr	r1, [r3, #12]
 801337e:	d1f8      	bne.n	8013372 <_reclaim_reent+0x7e>
 8013380:	4620      	mov	r0, r4
 8013382:	f000 fe75 	bl	8014070 <_free_r>
 8013386:	e7c0      	b.n	801330a <_reclaim_reent+0x16>
 8013388:	680e      	ldr	r6, [r1, #0]
 801338a:	4620      	mov	r0, r4
 801338c:	f000 fe70 	bl	8014070 <_free_r>
 8013390:	4631      	mov	r1, r6
 8013392:	e7ef      	b.n	8013374 <_reclaim_reent+0x80>
 8013394:	2500      	movs	r5, #0
 8013396:	e7ef      	b.n	8013378 <_reclaim_reent+0x84>
 8013398:	bd70      	pop	{r4, r5, r6, pc}
 801339a:	bf00      	nop
 801339c:	24000170 	.word	0x24000170

080133a0 <_lseek_r>:
 80133a0:	b538      	push	{r3, r4, r5, lr}
 80133a2:	4d07      	ldr	r5, [pc, #28]	; (80133c0 <_lseek_r+0x20>)
 80133a4:	4604      	mov	r4, r0
 80133a6:	4608      	mov	r0, r1
 80133a8:	4611      	mov	r1, r2
 80133aa:	2200      	movs	r2, #0
 80133ac:	602a      	str	r2, [r5, #0]
 80133ae:	461a      	mov	r2, r3
 80133b0:	f7ee fa4a 	bl	8001848 <_lseek>
 80133b4:	1c43      	adds	r3, r0, #1
 80133b6:	d102      	bne.n	80133be <_lseek_r+0x1e>
 80133b8:	682b      	ldr	r3, [r5, #0]
 80133ba:	b103      	cbz	r3, 80133be <_lseek_r+0x1e>
 80133bc:	6023      	str	r3, [r4, #0]
 80133be:	bd38      	pop	{r3, r4, r5, pc}
 80133c0:	24010cd4 	.word	0x24010cd4

080133c4 <_read_r>:
 80133c4:	b538      	push	{r3, r4, r5, lr}
 80133c6:	4d07      	ldr	r5, [pc, #28]	; (80133e4 <_read_r+0x20>)
 80133c8:	4604      	mov	r4, r0
 80133ca:	4608      	mov	r0, r1
 80133cc:	4611      	mov	r1, r2
 80133ce:	2200      	movs	r2, #0
 80133d0:	602a      	str	r2, [r5, #0]
 80133d2:	461a      	mov	r2, r3
 80133d4:	f7ee f9d8 	bl	8001788 <_read>
 80133d8:	1c43      	adds	r3, r0, #1
 80133da:	d102      	bne.n	80133e2 <_read_r+0x1e>
 80133dc:	682b      	ldr	r3, [r5, #0]
 80133de:	b103      	cbz	r3, 80133e2 <_read_r+0x1e>
 80133e0:	6023      	str	r3, [r4, #0]
 80133e2:	bd38      	pop	{r3, r4, r5, pc}
 80133e4:	24010cd4 	.word	0x24010cd4

080133e8 <_write_r>:
 80133e8:	b538      	push	{r3, r4, r5, lr}
 80133ea:	4d07      	ldr	r5, [pc, #28]	; (8013408 <_write_r+0x20>)
 80133ec:	4604      	mov	r4, r0
 80133ee:	4608      	mov	r0, r1
 80133f0:	4611      	mov	r1, r2
 80133f2:	2200      	movs	r2, #0
 80133f4:	602a      	str	r2, [r5, #0]
 80133f6:	461a      	mov	r2, r3
 80133f8:	f7ee f9e3 	bl	80017c2 <_write>
 80133fc:	1c43      	adds	r3, r0, #1
 80133fe:	d102      	bne.n	8013406 <_write_r+0x1e>
 8013400:	682b      	ldr	r3, [r5, #0]
 8013402:	b103      	cbz	r3, 8013406 <_write_r+0x1e>
 8013404:	6023      	str	r3, [r4, #0]
 8013406:	bd38      	pop	{r3, r4, r5, pc}
 8013408:	24010cd4 	.word	0x24010cd4

0801340c <__errno>:
 801340c:	4b01      	ldr	r3, [pc, #4]	; (8013414 <__errno+0x8>)
 801340e:	6818      	ldr	r0, [r3, #0]
 8013410:	4770      	bx	lr
 8013412:	bf00      	nop
 8013414:	24000170 	.word	0x24000170

08013418 <__libc_init_array>:
 8013418:	b570      	push	{r4, r5, r6, lr}
 801341a:	4d0d      	ldr	r5, [pc, #52]	; (8013450 <__libc_init_array+0x38>)
 801341c:	4c0d      	ldr	r4, [pc, #52]	; (8013454 <__libc_init_array+0x3c>)
 801341e:	1b64      	subs	r4, r4, r5
 8013420:	10a4      	asrs	r4, r4, #2
 8013422:	2600      	movs	r6, #0
 8013424:	42a6      	cmp	r6, r4
 8013426:	d109      	bne.n	801343c <__libc_init_array+0x24>
 8013428:	4d0b      	ldr	r5, [pc, #44]	; (8013458 <__libc_init_array+0x40>)
 801342a:	4c0c      	ldr	r4, [pc, #48]	; (801345c <__libc_init_array+0x44>)
 801342c:	f001 fe08 	bl	8015040 <_init>
 8013430:	1b64      	subs	r4, r4, r5
 8013432:	10a4      	asrs	r4, r4, #2
 8013434:	2600      	movs	r6, #0
 8013436:	42a6      	cmp	r6, r4
 8013438:	d105      	bne.n	8013446 <__libc_init_array+0x2e>
 801343a:	bd70      	pop	{r4, r5, r6, pc}
 801343c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013440:	4798      	blx	r3
 8013442:	3601      	adds	r6, #1
 8013444:	e7ee      	b.n	8013424 <__libc_init_array+0xc>
 8013446:	f855 3b04 	ldr.w	r3, [r5], #4
 801344a:	4798      	blx	r3
 801344c:	3601      	adds	r6, #1
 801344e:	e7f2      	b.n	8013436 <__libc_init_array+0x1e>
 8013450:	08015c54 	.word	0x08015c54
 8013454:	08015c54 	.word	0x08015c54
 8013458:	08015c54 	.word	0x08015c54
 801345c:	08015c58 	.word	0x08015c58

08013460 <__retarget_lock_init_recursive>:
 8013460:	4770      	bx	lr

08013462 <__retarget_lock_acquire_recursive>:
 8013462:	4770      	bx	lr

08013464 <__retarget_lock_release_recursive>:
 8013464:	4770      	bx	lr

08013466 <memcpy>:
 8013466:	440a      	add	r2, r1
 8013468:	4291      	cmp	r1, r2
 801346a:	f100 33ff 	add.w	r3, r0, #4294967295
 801346e:	d100      	bne.n	8013472 <memcpy+0xc>
 8013470:	4770      	bx	lr
 8013472:	b510      	push	{r4, lr}
 8013474:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013478:	f803 4f01 	strb.w	r4, [r3, #1]!
 801347c:	4291      	cmp	r1, r2
 801347e:	d1f9      	bne.n	8013474 <memcpy+0xe>
 8013480:	bd10      	pop	{r4, pc}

08013482 <quorem>:
 8013482:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013486:	6903      	ldr	r3, [r0, #16]
 8013488:	690c      	ldr	r4, [r1, #16]
 801348a:	42a3      	cmp	r3, r4
 801348c:	4607      	mov	r7, r0
 801348e:	db7e      	blt.n	801358e <quorem+0x10c>
 8013490:	3c01      	subs	r4, #1
 8013492:	f101 0814 	add.w	r8, r1, #20
 8013496:	f100 0514 	add.w	r5, r0, #20
 801349a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801349e:	9301      	str	r3, [sp, #4]
 80134a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80134a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80134a8:	3301      	adds	r3, #1
 80134aa:	429a      	cmp	r2, r3
 80134ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80134b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80134b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80134b8:	d331      	bcc.n	801351e <quorem+0x9c>
 80134ba:	f04f 0e00 	mov.w	lr, #0
 80134be:	4640      	mov	r0, r8
 80134c0:	46ac      	mov	ip, r5
 80134c2:	46f2      	mov	sl, lr
 80134c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80134c8:	b293      	uxth	r3, r2
 80134ca:	fb06 e303 	mla	r3, r6, r3, lr
 80134ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80134d2:	0c1a      	lsrs	r2, r3, #16
 80134d4:	b29b      	uxth	r3, r3
 80134d6:	ebaa 0303 	sub.w	r3, sl, r3
 80134da:	f8dc a000 	ldr.w	sl, [ip]
 80134de:	fa13 f38a 	uxtah	r3, r3, sl
 80134e2:	fb06 220e 	mla	r2, r6, lr, r2
 80134e6:	9300      	str	r3, [sp, #0]
 80134e8:	9b00      	ldr	r3, [sp, #0]
 80134ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80134ee:	b292      	uxth	r2, r2
 80134f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80134f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80134f8:	f8bd 3000 	ldrh.w	r3, [sp]
 80134fc:	4581      	cmp	r9, r0
 80134fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013502:	f84c 3b04 	str.w	r3, [ip], #4
 8013506:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801350a:	d2db      	bcs.n	80134c4 <quorem+0x42>
 801350c:	f855 300b 	ldr.w	r3, [r5, fp]
 8013510:	b92b      	cbnz	r3, 801351e <quorem+0x9c>
 8013512:	9b01      	ldr	r3, [sp, #4]
 8013514:	3b04      	subs	r3, #4
 8013516:	429d      	cmp	r5, r3
 8013518:	461a      	mov	r2, r3
 801351a:	d32c      	bcc.n	8013576 <quorem+0xf4>
 801351c:	613c      	str	r4, [r7, #16]
 801351e:	4638      	mov	r0, r7
 8013520:	f001 f922 	bl	8014768 <__mcmp>
 8013524:	2800      	cmp	r0, #0
 8013526:	db22      	blt.n	801356e <quorem+0xec>
 8013528:	3601      	adds	r6, #1
 801352a:	4629      	mov	r1, r5
 801352c:	2000      	movs	r0, #0
 801352e:	f858 2b04 	ldr.w	r2, [r8], #4
 8013532:	f8d1 c000 	ldr.w	ip, [r1]
 8013536:	b293      	uxth	r3, r2
 8013538:	1ac3      	subs	r3, r0, r3
 801353a:	0c12      	lsrs	r2, r2, #16
 801353c:	fa13 f38c 	uxtah	r3, r3, ip
 8013540:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8013544:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013548:	b29b      	uxth	r3, r3
 801354a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801354e:	45c1      	cmp	r9, r8
 8013550:	f841 3b04 	str.w	r3, [r1], #4
 8013554:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013558:	d2e9      	bcs.n	801352e <quorem+0xac>
 801355a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801355e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013562:	b922      	cbnz	r2, 801356e <quorem+0xec>
 8013564:	3b04      	subs	r3, #4
 8013566:	429d      	cmp	r5, r3
 8013568:	461a      	mov	r2, r3
 801356a:	d30a      	bcc.n	8013582 <quorem+0x100>
 801356c:	613c      	str	r4, [r7, #16]
 801356e:	4630      	mov	r0, r6
 8013570:	b003      	add	sp, #12
 8013572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013576:	6812      	ldr	r2, [r2, #0]
 8013578:	3b04      	subs	r3, #4
 801357a:	2a00      	cmp	r2, #0
 801357c:	d1ce      	bne.n	801351c <quorem+0x9a>
 801357e:	3c01      	subs	r4, #1
 8013580:	e7c9      	b.n	8013516 <quorem+0x94>
 8013582:	6812      	ldr	r2, [r2, #0]
 8013584:	3b04      	subs	r3, #4
 8013586:	2a00      	cmp	r2, #0
 8013588:	d1f0      	bne.n	801356c <quorem+0xea>
 801358a:	3c01      	subs	r4, #1
 801358c:	e7eb      	b.n	8013566 <quorem+0xe4>
 801358e:	2000      	movs	r0, #0
 8013590:	e7ee      	b.n	8013570 <quorem+0xee>
 8013592:	0000      	movs	r0, r0
 8013594:	0000      	movs	r0, r0
	...

08013598 <_dtoa_r>:
 8013598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801359c:	ed2d 8b02 	vpush	{d8}
 80135a0:	69c5      	ldr	r5, [r0, #28]
 80135a2:	b091      	sub	sp, #68	; 0x44
 80135a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80135a8:	ec59 8b10 	vmov	r8, r9, d0
 80135ac:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80135ae:	9106      	str	r1, [sp, #24]
 80135b0:	4606      	mov	r6, r0
 80135b2:	9208      	str	r2, [sp, #32]
 80135b4:	930c      	str	r3, [sp, #48]	; 0x30
 80135b6:	b975      	cbnz	r5, 80135d6 <_dtoa_r+0x3e>
 80135b8:	2010      	movs	r0, #16
 80135ba:	f000 fda5 	bl	8014108 <malloc>
 80135be:	4602      	mov	r2, r0
 80135c0:	61f0      	str	r0, [r6, #28]
 80135c2:	b920      	cbnz	r0, 80135ce <_dtoa_r+0x36>
 80135c4:	4ba6      	ldr	r3, [pc, #664]	; (8013860 <_dtoa_r+0x2c8>)
 80135c6:	21ef      	movs	r1, #239	; 0xef
 80135c8:	48a6      	ldr	r0, [pc, #664]	; (8013864 <_dtoa_r+0x2cc>)
 80135ca:	f001 fc87 	bl	8014edc <__assert_func>
 80135ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80135d2:	6005      	str	r5, [r0, #0]
 80135d4:	60c5      	str	r5, [r0, #12]
 80135d6:	69f3      	ldr	r3, [r6, #28]
 80135d8:	6819      	ldr	r1, [r3, #0]
 80135da:	b151      	cbz	r1, 80135f2 <_dtoa_r+0x5a>
 80135dc:	685a      	ldr	r2, [r3, #4]
 80135de:	604a      	str	r2, [r1, #4]
 80135e0:	2301      	movs	r3, #1
 80135e2:	4093      	lsls	r3, r2
 80135e4:	608b      	str	r3, [r1, #8]
 80135e6:	4630      	mov	r0, r6
 80135e8:	f000 fe82 	bl	80142f0 <_Bfree>
 80135ec:	69f3      	ldr	r3, [r6, #28]
 80135ee:	2200      	movs	r2, #0
 80135f0:	601a      	str	r2, [r3, #0]
 80135f2:	f1b9 0300 	subs.w	r3, r9, #0
 80135f6:	bfbb      	ittet	lt
 80135f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80135fc:	9303      	strlt	r3, [sp, #12]
 80135fe:	2300      	movge	r3, #0
 8013600:	2201      	movlt	r2, #1
 8013602:	bfac      	ite	ge
 8013604:	6023      	strge	r3, [r4, #0]
 8013606:	6022      	strlt	r2, [r4, #0]
 8013608:	4b97      	ldr	r3, [pc, #604]	; (8013868 <_dtoa_r+0x2d0>)
 801360a:	9c03      	ldr	r4, [sp, #12]
 801360c:	43a3      	bics	r3, r4
 801360e:	d11c      	bne.n	801364a <_dtoa_r+0xb2>
 8013610:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013612:	f242 730f 	movw	r3, #9999	; 0x270f
 8013616:	6013      	str	r3, [r2, #0]
 8013618:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801361c:	ea53 0308 	orrs.w	r3, r3, r8
 8013620:	f000 84fb 	beq.w	801401a <_dtoa_r+0xa82>
 8013624:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013626:	b963      	cbnz	r3, 8013642 <_dtoa_r+0xaa>
 8013628:	4b90      	ldr	r3, [pc, #576]	; (801386c <_dtoa_r+0x2d4>)
 801362a:	e020      	b.n	801366e <_dtoa_r+0xd6>
 801362c:	4b90      	ldr	r3, [pc, #576]	; (8013870 <_dtoa_r+0x2d8>)
 801362e:	9301      	str	r3, [sp, #4]
 8013630:	3308      	adds	r3, #8
 8013632:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013634:	6013      	str	r3, [r2, #0]
 8013636:	9801      	ldr	r0, [sp, #4]
 8013638:	b011      	add	sp, #68	; 0x44
 801363a:	ecbd 8b02 	vpop	{d8}
 801363e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013642:	4b8a      	ldr	r3, [pc, #552]	; (801386c <_dtoa_r+0x2d4>)
 8013644:	9301      	str	r3, [sp, #4]
 8013646:	3303      	adds	r3, #3
 8013648:	e7f3      	b.n	8013632 <_dtoa_r+0x9a>
 801364a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801364e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013656:	d10c      	bne.n	8013672 <_dtoa_r+0xda>
 8013658:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801365a:	2301      	movs	r3, #1
 801365c:	6013      	str	r3, [r2, #0]
 801365e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013660:	2b00      	cmp	r3, #0
 8013662:	f000 84d7 	beq.w	8014014 <_dtoa_r+0xa7c>
 8013666:	4b83      	ldr	r3, [pc, #524]	; (8013874 <_dtoa_r+0x2dc>)
 8013668:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801366a:	6013      	str	r3, [r2, #0]
 801366c:	3b01      	subs	r3, #1
 801366e:	9301      	str	r3, [sp, #4]
 8013670:	e7e1      	b.n	8013636 <_dtoa_r+0x9e>
 8013672:	aa0e      	add	r2, sp, #56	; 0x38
 8013674:	a90f      	add	r1, sp, #60	; 0x3c
 8013676:	4630      	mov	r0, r6
 8013678:	eeb0 0b48 	vmov.f64	d0, d8
 801367c:	f001 f91a 	bl	80148b4 <__d2b>
 8013680:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8013684:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013686:	4605      	mov	r5, r0
 8013688:	2b00      	cmp	r3, #0
 801368a:	d046      	beq.n	801371a <_dtoa_r+0x182>
 801368c:	eeb0 7b48 	vmov.f64	d7, d8
 8013690:	ee18 1a90 	vmov	r1, s17
 8013694:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013698:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801369c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80136a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80136a4:	2000      	movs	r0, #0
 80136a6:	ee07 1a90 	vmov	s15, r1
 80136aa:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80136ae:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8013848 <_dtoa_r+0x2b0>
 80136b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80136b6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8013850 <_dtoa_r+0x2b8>
 80136ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 80136be:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8013858 <_dtoa_r+0x2c0>
 80136c2:	ee07 3a90 	vmov	s15, r3
 80136c6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80136ca:	eeb0 7b46 	vmov.f64	d7, d6
 80136ce:	eea4 7b05 	vfma.f64	d7, d4, d5
 80136d2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80136d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80136da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136de:	ee16 ba90 	vmov	fp, s13
 80136e2:	9009      	str	r0, [sp, #36]	; 0x24
 80136e4:	d508      	bpl.n	80136f8 <_dtoa_r+0x160>
 80136e6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80136ea:	eeb4 6b47 	vcmp.f64	d6, d7
 80136ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136f2:	bf18      	it	ne
 80136f4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80136f8:	f1bb 0f16 	cmp.w	fp, #22
 80136fc:	d82b      	bhi.n	8013756 <_dtoa_r+0x1be>
 80136fe:	495e      	ldr	r1, [pc, #376]	; (8013878 <_dtoa_r+0x2e0>)
 8013700:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8013704:	ed91 7b00 	vldr	d7, [r1]
 8013708:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801370c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013710:	d501      	bpl.n	8013716 <_dtoa_r+0x17e>
 8013712:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013716:	2100      	movs	r1, #0
 8013718:	e01e      	b.n	8013758 <_dtoa_r+0x1c0>
 801371a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801371c:	4413      	add	r3, r2
 801371e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8013722:	2920      	cmp	r1, #32
 8013724:	bfc1      	itttt	gt
 8013726:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801372a:	408c      	lslgt	r4, r1
 801372c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8013730:	fa28 f101 	lsrgt.w	r1, r8, r1
 8013734:	bfd6      	itet	le
 8013736:	f1c1 0120 	rsble	r1, r1, #32
 801373a:	4321      	orrgt	r1, r4
 801373c:	fa08 f101 	lslle.w	r1, r8, r1
 8013740:	ee07 1a90 	vmov	s15, r1
 8013744:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013748:	3b01      	subs	r3, #1
 801374a:	ee17 1a90 	vmov	r1, s15
 801374e:	2001      	movs	r0, #1
 8013750:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8013754:	e7a7      	b.n	80136a6 <_dtoa_r+0x10e>
 8013756:	2101      	movs	r1, #1
 8013758:	1ad2      	subs	r2, r2, r3
 801375a:	1e53      	subs	r3, r2, #1
 801375c:	9305      	str	r3, [sp, #20]
 801375e:	bf45      	ittet	mi
 8013760:	f1c2 0301 	rsbmi	r3, r2, #1
 8013764:	9304      	strmi	r3, [sp, #16]
 8013766:	2300      	movpl	r3, #0
 8013768:	2300      	movmi	r3, #0
 801376a:	bf4c      	ite	mi
 801376c:	9305      	strmi	r3, [sp, #20]
 801376e:	9304      	strpl	r3, [sp, #16]
 8013770:	f1bb 0f00 	cmp.w	fp, #0
 8013774:	910b      	str	r1, [sp, #44]	; 0x2c
 8013776:	db18      	blt.n	80137aa <_dtoa_r+0x212>
 8013778:	9b05      	ldr	r3, [sp, #20]
 801377a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801377e:	445b      	add	r3, fp
 8013780:	9305      	str	r3, [sp, #20]
 8013782:	2300      	movs	r3, #0
 8013784:	9a06      	ldr	r2, [sp, #24]
 8013786:	2a09      	cmp	r2, #9
 8013788:	d848      	bhi.n	801381c <_dtoa_r+0x284>
 801378a:	2a05      	cmp	r2, #5
 801378c:	bfc4      	itt	gt
 801378e:	3a04      	subgt	r2, #4
 8013790:	9206      	strgt	r2, [sp, #24]
 8013792:	9a06      	ldr	r2, [sp, #24]
 8013794:	f1a2 0202 	sub.w	r2, r2, #2
 8013798:	bfcc      	ite	gt
 801379a:	2400      	movgt	r4, #0
 801379c:	2401      	movle	r4, #1
 801379e:	2a03      	cmp	r2, #3
 80137a0:	d847      	bhi.n	8013832 <_dtoa_r+0x29a>
 80137a2:	e8df f002 	tbb	[pc, r2]
 80137a6:	2d0b      	.short	0x2d0b
 80137a8:	392b      	.short	0x392b
 80137aa:	9b04      	ldr	r3, [sp, #16]
 80137ac:	2200      	movs	r2, #0
 80137ae:	eba3 030b 	sub.w	r3, r3, fp
 80137b2:	9304      	str	r3, [sp, #16]
 80137b4:	920a      	str	r2, [sp, #40]	; 0x28
 80137b6:	f1cb 0300 	rsb	r3, fp, #0
 80137ba:	e7e3      	b.n	8013784 <_dtoa_r+0x1ec>
 80137bc:	2200      	movs	r2, #0
 80137be:	9207      	str	r2, [sp, #28]
 80137c0:	9a08      	ldr	r2, [sp, #32]
 80137c2:	2a00      	cmp	r2, #0
 80137c4:	dc38      	bgt.n	8013838 <_dtoa_r+0x2a0>
 80137c6:	f04f 0a01 	mov.w	sl, #1
 80137ca:	46d1      	mov	r9, sl
 80137cc:	4652      	mov	r2, sl
 80137ce:	f8cd a020 	str.w	sl, [sp, #32]
 80137d2:	69f7      	ldr	r7, [r6, #28]
 80137d4:	2100      	movs	r1, #0
 80137d6:	2004      	movs	r0, #4
 80137d8:	f100 0c14 	add.w	ip, r0, #20
 80137dc:	4594      	cmp	ip, r2
 80137de:	d930      	bls.n	8013842 <_dtoa_r+0x2aa>
 80137e0:	6079      	str	r1, [r7, #4]
 80137e2:	4630      	mov	r0, r6
 80137e4:	930d      	str	r3, [sp, #52]	; 0x34
 80137e6:	f000 fd43 	bl	8014270 <_Balloc>
 80137ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80137ec:	9001      	str	r0, [sp, #4]
 80137ee:	4602      	mov	r2, r0
 80137f0:	2800      	cmp	r0, #0
 80137f2:	d145      	bne.n	8013880 <_dtoa_r+0x2e8>
 80137f4:	4b21      	ldr	r3, [pc, #132]	; (801387c <_dtoa_r+0x2e4>)
 80137f6:	f240 11af 	movw	r1, #431	; 0x1af
 80137fa:	e6e5      	b.n	80135c8 <_dtoa_r+0x30>
 80137fc:	2201      	movs	r2, #1
 80137fe:	e7de      	b.n	80137be <_dtoa_r+0x226>
 8013800:	2200      	movs	r2, #0
 8013802:	9207      	str	r2, [sp, #28]
 8013804:	9a08      	ldr	r2, [sp, #32]
 8013806:	eb0b 0a02 	add.w	sl, fp, r2
 801380a:	f10a 0901 	add.w	r9, sl, #1
 801380e:	464a      	mov	r2, r9
 8013810:	2a01      	cmp	r2, #1
 8013812:	bfb8      	it	lt
 8013814:	2201      	movlt	r2, #1
 8013816:	e7dc      	b.n	80137d2 <_dtoa_r+0x23a>
 8013818:	2201      	movs	r2, #1
 801381a:	e7f2      	b.n	8013802 <_dtoa_r+0x26a>
 801381c:	2401      	movs	r4, #1
 801381e:	2200      	movs	r2, #0
 8013820:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8013824:	f04f 3aff 	mov.w	sl, #4294967295
 8013828:	2100      	movs	r1, #0
 801382a:	46d1      	mov	r9, sl
 801382c:	2212      	movs	r2, #18
 801382e:	9108      	str	r1, [sp, #32]
 8013830:	e7cf      	b.n	80137d2 <_dtoa_r+0x23a>
 8013832:	2201      	movs	r2, #1
 8013834:	9207      	str	r2, [sp, #28]
 8013836:	e7f5      	b.n	8013824 <_dtoa_r+0x28c>
 8013838:	f8dd a020 	ldr.w	sl, [sp, #32]
 801383c:	46d1      	mov	r9, sl
 801383e:	4652      	mov	r2, sl
 8013840:	e7c7      	b.n	80137d2 <_dtoa_r+0x23a>
 8013842:	3101      	adds	r1, #1
 8013844:	0040      	lsls	r0, r0, #1
 8013846:	e7c7      	b.n	80137d8 <_dtoa_r+0x240>
 8013848:	636f4361 	.word	0x636f4361
 801384c:	3fd287a7 	.word	0x3fd287a7
 8013850:	8b60c8b3 	.word	0x8b60c8b3
 8013854:	3fc68a28 	.word	0x3fc68a28
 8013858:	509f79fb 	.word	0x509f79fb
 801385c:	3fd34413 	.word	0x3fd34413
 8013860:	08015919 	.word	0x08015919
 8013864:	08015930 	.word	0x08015930
 8013868:	7ff00000 	.word	0x7ff00000
 801386c:	08015915 	.word	0x08015915
 8013870:	0801590c 	.word	0x0801590c
 8013874:	080158e9 	.word	0x080158e9
 8013878:	08015a20 	.word	0x08015a20
 801387c:	08015988 	.word	0x08015988
 8013880:	69f2      	ldr	r2, [r6, #28]
 8013882:	9901      	ldr	r1, [sp, #4]
 8013884:	6011      	str	r1, [r2, #0]
 8013886:	f1b9 0f0e 	cmp.w	r9, #14
 801388a:	d86c      	bhi.n	8013966 <_dtoa_r+0x3ce>
 801388c:	2c00      	cmp	r4, #0
 801388e:	d06a      	beq.n	8013966 <_dtoa_r+0x3ce>
 8013890:	f1bb 0f00 	cmp.w	fp, #0
 8013894:	f340 80a0 	ble.w	80139d8 <_dtoa_r+0x440>
 8013898:	4ac1      	ldr	r2, [pc, #772]	; (8013ba0 <_dtoa_r+0x608>)
 801389a:	f00b 010f 	and.w	r1, fp, #15
 801389e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80138a2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80138a6:	ed92 7b00 	vldr	d7, [r2]
 80138aa:	ea4f 122b 	mov.w	r2, fp, asr #4
 80138ae:	f000 8087 	beq.w	80139c0 <_dtoa_r+0x428>
 80138b2:	49bc      	ldr	r1, [pc, #752]	; (8013ba4 <_dtoa_r+0x60c>)
 80138b4:	ed91 6b08 	vldr	d6, [r1, #32]
 80138b8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80138bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80138c0:	f002 020f 	and.w	r2, r2, #15
 80138c4:	2103      	movs	r1, #3
 80138c6:	48b7      	ldr	r0, [pc, #732]	; (8013ba4 <_dtoa_r+0x60c>)
 80138c8:	2a00      	cmp	r2, #0
 80138ca:	d17b      	bne.n	80139c4 <_dtoa_r+0x42c>
 80138cc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80138d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80138d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80138d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80138da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80138de:	2a00      	cmp	r2, #0
 80138e0:	f000 80a0 	beq.w	8013a24 <_dtoa_r+0x48c>
 80138e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80138e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80138ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138f0:	f140 8098 	bpl.w	8013a24 <_dtoa_r+0x48c>
 80138f4:	f1b9 0f00 	cmp.w	r9, #0
 80138f8:	f000 8094 	beq.w	8013a24 <_dtoa_r+0x48c>
 80138fc:	f1ba 0f00 	cmp.w	sl, #0
 8013900:	dd2f      	ble.n	8013962 <_dtoa_r+0x3ca>
 8013902:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8013906:	ee27 7b06 	vmul.f64	d7, d7, d6
 801390a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801390e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8013912:	3101      	adds	r1, #1
 8013914:	4654      	mov	r4, sl
 8013916:	ed9d 6b02 	vldr	d6, [sp, #8]
 801391a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801391e:	ee07 1a90 	vmov	s15, r1
 8013922:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013926:	eea7 5b06 	vfma.f64	d5, d7, d6
 801392a:	ee15 7a90 	vmov	r7, s11
 801392e:	ec51 0b15 	vmov	r0, r1, d5
 8013932:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8013936:	2c00      	cmp	r4, #0
 8013938:	d177      	bne.n	8013a2a <_dtoa_r+0x492>
 801393a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801393e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013942:	ec41 0b17 	vmov	d7, r0, r1
 8013946:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801394a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801394e:	f300 826a 	bgt.w	8013e26 <_dtoa_r+0x88e>
 8013952:	eeb1 7b47 	vneg.f64	d7, d7
 8013956:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801395a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801395e:	f100 8260 	bmi.w	8013e22 <_dtoa_r+0x88a>
 8013962:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013966:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013968:	2a00      	cmp	r2, #0
 801396a:	f2c0 811d 	blt.w	8013ba8 <_dtoa_r+0x610>
 801396e:	f1bb 0f0e 	cmp.w	fp, #14
 8013972:	f300 8119 	bgt.w	8013ba8 <_dtoa_r+0x610>
 8013976:	4b8a      	ldr	r3, [pc, #552]	; (8013ba0 <_dtoa_r+0x608>)
 8013978:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801397c:	ed93 6b00 	vldr	d6, [r3]
 8013980:	9b08      	ldr	r3, [sp, #32]
 8013982:	2b00      	cmp	r3, #0
 8013984:	f280 80b7 	bge.w	8013af6 <_dtoa_r+0x55e>
 8013988:	f1b9 0f00 	cmp.w	r9, #0
 801398c:	f300 80b3 	bgt.w	8013af6 <_dtoa_r+0x55e>
 8013990:	f040 8246 	bne.w	8013e20 <_dtoa_r+0x888>
 8013994:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013998:	ee26 6b07 	vmul.f64	d6, d6, d7
 801399c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80139a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80139a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139a8:	464c      	mov	r4, r9
 80139aa:	464f      	mov	r7, r9
 80139ac:	f280 821c 	bge.w	8013de8 <_dtoa_r+0x850>
 80139b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80139b4:	2331      	movs	r3, #49	; 0x31
 80139b6:	f808 3b01 	strb.w	r3, [r8], #1
 80139ba:	f10b 0b01 	add.w	fp, fp, #1
 80139be:	e218      	b.n	8013df2 <_dtoa_r+0x85a>
 80139c0:	2102      	movs	r1, #2
 80139c2:	e780      	b.n	80138c6 <_dtoa_r+0x32e>
 80139c4:	07d4      	lsls	r4, r2, #31
 80139c6:	d504      	bpl.n	80139d2 <_dtoa_r+0x43a>
 80139c8:	ed90 6b00 	vldr	d6, [r0]
 80139cc:	3101      	adds	r1, #1
 80139ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80139d2:	1052      	asrs	r2, r2, #1
 80139d4:	3008      	adds	r0, #8
 80139d6:	e777      	b.n	80138c8 <_dtoa_r+0x330>
 80139d8:	d022      	beq.n	8013a20 <_dtoa_r+0x488>
 80139da:	f1cb 0200 	rsb	r2, fp, #0
 80139de:	4970      	ldr	r1, [pc, #448]	; (8013ba0 <_dtoa_r+0x608>)
 80139e0:	f002 000f 	and.w	r0, r2, #15
 80139e4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80139e8:	ed91 7b00 	vldr	d7, [r1]
 80139ec:	ee28 7b07 	vmul.f64	d7, d8, d7
 80139f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80139f4:	486b      	ldr	r0, [pc, #428]	; (8013ba4 <_dtoa_r+0x60c>)
 80139f6:	1112      	asrs	r2, r2, #4
 80139f8:	2400      	movs	r4, #0
 80139fa:	2102      	movs	r1, #2
 80139fc:	b92a      	cbnz	r2, 8013a0a <_dtoa_r+0x472>
 80139fe:	2c00      	cmp	r4, #0
 8013a00:	f43f af6a 	beq.w	80138d8 <_dtoa_r+0x340>
 8013a04:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013a08:	e766      	b.n	80138d8 <_dtoa_r+0x340>
 8013a0a:	07d7      	lsls	r7, r2, #31
 8013a0c:	d505      	bpl.n	8013a1a <_dtoa_r+0x482>
 8013a0e:	ed90 6b00 	vldr	d6, [r0]
 8013a12:	3101      	adds	r1, #1
 8013a14:	2401      	movs	r4, #1
 8013a16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013a1a:	1052      	asrs	r2, r2, #1
 8013a1c:	3008      	adds	r0, #8
 8013a1e:	e7ed      	b.n	80139fc <_dtoa_r+0x464>
 8013a20:	2102      	movs	r1, #2
 8013a22:	e759      	b.n	80138d8 <_dtoa_r+0x340>
 8013a24:	465a      	mov	r2, fp
 8013a26:	464c      	mov	r4, r9
 8013a28:	e775      	b.n	8013916 <_dtoa_r+0x37e>
 8013a2a:	ec41 0b17 	vmov	d7, r0, r1
 8013a2e:	495c      	ldr	r1, [pc, #368]	; (8013ba0 <_dtoa_r+0x608>)
 8013a30:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8013a34:	ed11 4b02 	vldr	d4, [r1, #-8]
 8013a38:	9901      	ldr	r1, [sp, #4]
 8013a3a:	440c      	add	r4, r1
 8013a3c:	9907      	ldr	r1, [sp, #28]
 8013a3e:	b351      	cbz	r1, 8013a96 <_dtoa_r+0x4fe>
 8013a40:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8013a44:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8013a48:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013a4c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013a50:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013a54:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013a58:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013a5c:	ee14 1a90 	vmov	r1, s9
 8013a60:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013a64:	3130      	adds	r1, #48	; 0x30
 8013a66:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013a6a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a72:	f808 1b01 	strb.w	r1, [r8], #1
 8013a76:	d439      	bmi.n	8013aec <_dtoa_r+0x554>
 8013a78:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013a7c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a84:	d472      	bmi.n	8013b6c <_dtoa_r+0x5d4>
 8013a86:	45a0      	cmp	r8, r4
 8013a88:	f43f af6b 	beq.w	8013962 <_dtoa_r+0x3ca>
 8013a8c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013a90:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013a94:	e7e0      	b.n	8013a58 <_dtoa_r+0x4c0>
 8013a96:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013a9a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013a9e:	4620      	mov	r0, r4
 8013aa0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013aa4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013aa8:	ee14 1a90 	vmov	r1, s9
 8013aac:	3130      	adds	r1, #48	; 0x30
 8013aae:	f808 1b01 	strb.w	r1, [r8], #1
 8013ab2:	45a0      	cmp	r8, r4
 8013ab4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013ab8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013abc:	d118      	bne.n	8013af0 <_dtoa_r+0x558>
 8013abe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8013ac2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013ac6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8013aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ace:	dc4d      	bgt.n	8013b6c <_dtoa_r+0x5d4>
 8013ad0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8013ad4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8013ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013adc:	f57f af41 	bpl.w	8013962 <_dtoa_r+0x3ca>
 8013ae0:	4680      	mov	r8, r0
 8013ae2:	3801      	subs	r0, #1
 8013ae4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8013ae8:	2b30      	cmp	r3, #48	; 0x30
 8013aea:	d0f9      	beq.n	8013ae0 <_dtoa_r+0x548>
 8013aec:	4693      	mov	fp, r2
 8013aee:	e02a      	b.n	8013b46 <_dtoa_r+0x5ae>
 8013af0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013af4:	e7d6      	b.n	8013aa4 <_dtoa_r+0x50c>
 8013af6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013afa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8013afe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013b02:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8013b06:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8013b0a:	ee15 3a10 	vmov	r3, s10
 8013b0e:	3330      	adds	r3, #48	; 0x30
 8013b10:	f808 3b01 	strb.w	r3, [r8], #1
 8013b14:	9b01      	ldr	r3, [sp, #4]
 8013b16:	eba8 0303 	sub.w	r3, r8, r3
 8013b1a:	4599      	cmp	r9, r3
 8013b1c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013b20:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013b24:	d133      	bne.n	8013b8e <_dtoa_r+0x5f6>
 8013b26:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013b2a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b32:	dc1a      	bgt.n	8013b6a <_dtoa_r+0x5d2>
 8013b34:	eeb4 7b46 	vcmp.f64	d7, d6
 8013b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b3c:	d103      	bne.n	8013b46 <_dtoa_r+0x5ae>
 8013b3e:	ee15 3a10 	vmov	r3, s10
 8013b42:	07d9      	lsls	r1, r3, #31
 8013b44:	d411      	bmi.n	8013b6a <_dtoa_r+0x5d2>
 8013b46:	4629      	mov	r1, r5
 8013b48:	4630      	mov	r0, r6
 8013b4a:	f000 fbd1 	bl	80142f0 <_Bfree>
 8013b4e:	2300      	movs	r3, #0
 8013b50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013b52:	f888 3000 	strb.w	r3, [r8]
 8013b56:	f10b 0301 	add.w	r3, fp, #1
 8013b5a:	6013      	str	r3, [r2, #0]
 8013b5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	f43f ad69 	beq.w	8013636 <_dtoa_r+0x9e>
 8013b64:	f8c3 8000 	str.w	r8, [r3]
 8013b68:	e565      	b.n	8013636 <_dtoa_r+0x9e>
 8013b6a:	465a      	mov	r2, fp
 8013b6c:	4643      	mov	r3, r8
 8013b6e:	4698      	mov	r8, r3
 8013b70:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8013b74:	2939      	cmp	r1, #57	; 0x39
 8013b76:	d106      	bne.n	8013b86 <_dtoa_r+0x5ee>
 8013b78:	9901      	ldr	r1, [sp, #4]
 8013b7a:	4299      	cmp	r1, r3
 8013b7c:	d1f7      	bne.n	8013b6e <_dtoa_r+0x5d6>
 8013b7e:	9801      	ldr	r0, [sp, #4]
 8013b80:	2130      	movs	r1, #48	; 0x30
 8013b82:	3201      	adds	r2, #1
 8013b84:	7001      	strb	r1, [r0, #0]
 8013b86:	7819      	ldrb	r1, [r3, #0]
 8013b88:	3101      	adds	r1, #1
 8013b8a:	7019      	strb	r1, [r3, #0]
 8013b8c:	e7ae      	b.n	8013aec <_dtoa_r+0x554>
 8013b8e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013b92:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b9a:	d1b2      	bne.n	8013b02 <_dtoa_r+0x56a>
 8013b9c:	e7d3      	b.n	8013b46 <_dtoa_r+0x5ae>
 8013b9e:	bf00      	nop
 8013ba0:	08015a20 	.word	0x08015a20
 8013ba4:	080159f8 	.word	0x080159f8
 8013ba8:	9907      	ldr	r1, [sp, #28]
 8013baa:	2900      	cmp	r1, #0
 8013bac:	f000 80d0 	beq.w	8013d50 <_dtoa_r+0x7b8>
 8013bb0:	9906      	ldr	r1, [sp, #24]
 8013bb2:	2901      	cmp	r1, #1
 8013bb4:	f300 80b4 	bgt.w	8013d20 <_dtoa_r+0x788>
 8013bb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013bba:	2900      	cmp	r1, #0
 8013bbc:	f000 80ac 	beq.w	8013d18 <_dtoa_r+0x780>
 8013bc0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013bc4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013bc8:	461c      	mov	r4, r3
 8013bca:	9309      	str	r3, [sp, #36]	; 0x24
 8013bcc:	9b04      	ldr	r3, [sp, #16]
 8013bce:	4413      	add	r3, r2
 8013bd0:	9304      	str	r3, [sp, #16]
 8013bd2:	9b05      	ldr	r3, [sp, #20]
 8013bd4:	2101      	movs	r1, #1
 8013bd6:	4413      	add	r3, r2
 8013bd8:	4630      	mov	r0, r6
 8013bda:	9305      	str	r3, [sp, #20]
 8013bdc:	f000 fc3e 	bl	801445c <__i2b>
 8013be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013be2:	4607      	mov	r7, r0
 8013be4:	f1b8 0f00 	cmp.w	r8, #0
 8013be8:	d00d      	beq.n	8013c06 <_dtoa_r+0x66e>
 8013bea:	9a05      	ldr	r2, [sp, #20]
 8013bec:	2a00      	cmp	r2, #0
 8013bee:	dd0a      	ble.n	8013c06 <_dtoa_r+0x66e>
 8013bf0:	4542      	cmp	r2, r8
 8013bf2:	9904      	ldr	r1, [sp, #16]
 8013bf4:	bfa8      	it	ge
 8013bf6:	4642      	movge	r2, r8
 8013bf8:	1a89      	subs	r1, r1, r2
 8013bfa:	9104      	str	r1, [sp, #16]
 8013bfc:	9905      	ldr	r1, [sp, #20]
 8013bfe:	eba8 0802 	sub.w	r8, r8, r2
 8013c02:	1a8a      	subs	r2, r1, r2
 8013c04:	9205      	str	r2, [sp, #20]
 8013c06:	b303      	cbz	r3, 8013c4a <_dtoa_r+0x6b2>
 8013c08:	9a07      	ldr	r2, [sp, #28]
 8013c0a:	2a00      	cmp	r2, #0
 8013c0c:	f000 80a5 	beq.w	8013d5a <_dtoa_r+0x7c2>
 8013c10:	2c00      	cmp	r4, #0
 8013c12:	dd13      	ble.n	8013c3c <_dtoa_r+0x6a4>
 8013c14:	4639      	mov	r1, r7
 8013c16:	4622      	mov	r2, r4
 8013c18:	4630      	mov	r0, r6
 8013c1a:	930d      	str	r3, [sp, #52]	; 0x34
 8013c1c:	f000 fcde 	bl	80145dc <__pow5mult>
 8013c20:	462a      	mov	r2, r5
 8013c22:	4601      	mov	r1, r0
 8013c24:	4607      	mov	r7, r0
 8013c26:	4630      	mov	r0, r6
 8013c28:	f000 fc2e 	bl	8014488 <__multiply>
 8013c2c:	4629      	mov	r1, r5
 8013c2e:	9009      	str	r0, [sp, #36]	; 0x24
 8013c30:	4630      	mov	r0, r6
 8013c32:	f000 fb5d 	bl	80142f0 <_Bfree>
 8013c36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c3a:	4615      	mov	r5, r2
 8013c3c:	1b1a      	subs	r2, r3, r4
 8013c3e:	d004      	beq.n	8013c4a <_dtoa_r+0x6b2>
 8013c40:	4629      	mov	r1, r5
 8013c42:	4630      	mov	r0, r6
 8013c44:	f000 fcca 	bl	80145dc <__pow5mult>
 8013c48:	4605      	mov	r5, r0
 8013c4a:	2101      	movs	r1, #1
 8013c4c:	4630      	mov	r0, r6
 8013c4e:	f000 fc05 	bl	801445c <__i2b>
 8013c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	4604      	mov	r4, r0
 8013c58:	f340 8081 	ble.w	8013d5e <_dtoa_r+0x7c6>
 8013c5c:	461a      	mov	r2, r3
 8013c5e:	4601      	mov	r1, r0
 8013c60:	4630      	mov	r0, r6
 8013c62:	f000 fcbb 	bl	80145dc <__pow5mult>
 8013c66:	9b06      	ldr	r3, [sp, #24]
 8013c68:	2b01      	cmp	r3, #1
 8013c6a:	4604      	mov	r4, r0
 8013c6c:	dd7a      	ble.n	8013d64 <_dtoa_r+0x7cc>
 8013c6e:	2300      	movs	r3, #0
 8013c70:	9309      	str	r3, [sp, #36]	; 0x24
 8013c72:	6922      	ldr	r2, [r4, #16]
 8013c74:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013c78:	6910      	ldr	r0, [r2, #16]
 8013c7a:	f000 fba1 	bl	80143c0 <__hi0bits>
 8013c7e:	f1c0 0020 	rsb	r0, r0, #32
 8013c82:	9b05      	ldr	r3, [sp, #20]
 8013c84:	4418      	add	r0, r3
 8013c86:	f010 001f 	ands.w	r0, r0, #31
 8013c8a:	f000 8093 	beq.w	8013db4 <_dtoa_r+0x81c>
 8013c8e:	f1c0 0220 	rsb	r2, r0, #32
 8013c92:	2a04      	cmp	r2, #4
 8013c94:	f340 8085 	ble.w	8013da2 <_dtoa_r+0x80a>
 8013c98:	9b04      	ldr	r3, [sp, #16]
 8013c9a:	f1c0 001c 	rsb	r0, r0, #28
 8013c9e:	4403      	add	r3, r0
 8013ca0:	9304      	str	r3, [sp, #16]
 8013ca2:	9b05      	ldr	r3, [sp, #20]
 8013ca4:	4480      	add	r8, r0
 8013ca6:	4403      	add	r3, r0
 8013ca8:	9305      	str	r3, [sp, #20]
 8013caa:	9b04      	ldr	r3, [sp, #16]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	dd05      	ble.n	8013cbc <_dtoa_r+0x724>
 8013cb0:	4629      	mov	r1, r5
 8013cb2:	461a      	mov	r2, r3
 8013cb4:	4630      	mov	r0, r6
 8013cb6:	f000 fceb 	bl	8014690 <__lshift>
 8013cba:	4605      	mov	r5, r0
 8013cbc:	9b05      	ldr	r3, [sp, #20]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	dd05      	ble.n	8013cce <_dtoa_r+0x736>
 8013cc2:	4621      	mov	r1, r4
 8013cc4:	461a      	mov	r2, r3
 8013cc6:	4630      	mov	r0, r6
 8013cc8:	f000 fce2 	bl	8014690 <__lshift>
 8013ccc:	4604      	mov	r4, r0
 8013cce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d071      	beq.n	8013db8 <_dtoa_r+0x820>
 8013cd4:	4621      	mov	r1, r4
 8013cd6:	4628      	mov	r0, r5
 8013cd8:	f000 fd46 	bl	8014768 <__mcmp>
 8013cdc:	2800      	cmp	r0, #0
 8013cde:	da6b      	bge.n	8013db8 <_dtoa_r+0x820>
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	4629      	mov	r1, r5
 8013ce4:	220a      	movs	r2, #10
 8013ce6:	4630      	mov	r0, r6
 8013ce8:	f000 fb24 	bl	8014334 <__multadd>
 8013cec:	9b07      	ldr	r3, [sp, #28]
 8013cee:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013cf2:	4605      	mov	r5, r0
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	f000 8197 	beq.w	8014028 <_dtoa_r+0xa90>
 8013cfa:	4639      	mov	r1, r7
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	220a      	movs	r2, #10
 8013d00:	4630      	mov	r0, r6
 8013d02:	f000 fb17 	bl	8014334 <__multadd>
 8013d06:	f1ba 0f00 	cmp.w	sl, #0
 8013d0a:	4607      	mov	r7, r0
 8013d0c:	f300 8093 	bgt.w	8013e36 <_dtoa_r+0x89e>
 8013d10:	9b06      	ldr	r3, [sp, #24]
 8013d12:	2b02      	cmp	r3, #2
 8013d14:	dc57      	bgt.n	8013dc6 <_dtoa_r+0x82e>
 8013d16:	e08e      	b.n	8013e36 <_dtoa_r+0x89e>
 8013d18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013d1a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013d1e:	e751      	b.n	8013bc4 <_dtoa_r+0x62c>
 8013d20:	f109 34ff 	add.w	r4, r9, #4294967295
 8013d24:	42a3      	cmp	r3, r4
 8013d26:	bfbf      	itttt	lt
 8013d28:	1ae2      	sublt	r2, r4, r3
 8013d2a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8013d2c:	189b      	addlt	r3, r3, r2
 8013d2e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8013d30:	bfae      	itee	ge
 8013d32:	1b1c      	subge	r4, r3, r4
 8013d34:	4623      	movlt	r3, r4
 8013d36:	2400      	movlt	r4, #0
 8013d38:	f1b9 0f00 	cmp.w	r9, #0
 8013d3c:	bfb5      	itete	lt
 8013d3e:	9a04      	ldrlt	r2, [sp, #16]
 8013d40:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8013d44:	eba2 0809 	sublt.w	r8, r2, r9
 8013d48:	464a      	movge	r2, r9
 8013d4a:	bfb8      	it	lt
 8013d4c:	2200      	movlt	r2, #0
 8013d4e:	e73c      	b.n	8013bca <_dtoa_r+0x632>
 8013d50:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013d54:	9f07      	ldr	r7, [sp, #28]
 8013d56:	461c      	mov	r4, r3
 8013d58:	e744      	b.n	8013be4 <_dtoa_r+0x64c>
 8013d5a:	461a      	mov	r2, r3
 8013d5c:	e770      	b.n	8013c40 <_dtoa_r+0x6a8>
 8013d5e:	9b06      	ldr	r3, [sp, #24]
 8013d60:	2b01      	cmp	r3, #1
 8013d62:	dc18      	bgt.n	8013d96 <_dtoa_r+0x7fe>
 8013d64:	9b02      	ldr	r3, [sp, #8]
 8013d66:	b9b3      	cbnz	r3, 8013d96 <_dtoa_r+0x7fe>
 8013d68:	9b03      	ldr	r3, [sp, #12]
 8013d6a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013d6e:	b9a2      	cbnz	r2, 8013d9a <_dtoa_r+0x802>
 8013d70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013d74:	0d12      	lsrs	r2, r2, #20
 8013d76:	0512      	lsls	r2, r2, #20
 8013d78:	b18a      	cbz	r2, 8013d9e <_dtoa_r+0x806>
 8013d7a:	9b04      	ldr	r3, [sp, #16]
 8013d7c:	3301      	adds	r3, #1
 8013d7e:	9304      	str	r3, [sp, #16]
 8013d80:	9b05      	ldr	r3, [sp, #20]
 8013d82:	3301      	adds	r3, #1
 8013d84:	9305      	str	r3, [sp, #20]
 8013d86:	2301      	movs	r3, #1
 8013d88:	9309      	str	r3, [sp, #36]	; 0x24
 8013d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	f47f af70 	bne.w	8013c72 <_dtoa_r+0x6da>
 8013d92:	2001      	movs	r0, #1
 8013d94:	e775      	b.n	8013c82 <_dtoa_r+0x6ea>
 8013d96:	2300      	movs	r3, #0
 8013d98:	e7f6      	b.n	8013d88 <_dtoa_r+0x7f0>
 8013d9a:	9b02      	ldr	r3, [sp, #8]
 8013d9c:	e7f4      	b.n	8013d88 <_dtoa_r+0x7f0>
 8013d9e:	9209      	str	r2, [sp, #36]	; 0x24
 8013da0:	e7f3      	b.n	8013d8a <_dtoa_r+0x7f2>
 8013da2:	d082      	beq.n	8013caa <_dtoa_r+0x712>
 8013da4:	9b04      	ldr	r3, [sp, #16]
 8013da6:	321c      	adds	r2, #28
 8013da8:	4413      	add	r3, r2
 8013daa:	9304      	str	r3, [sp, #16]
 8013dac:	9b05      	ldr	r3, [sp, #20]
 8013dae:	4490      	add	r8, r2
 8013db0:	4413      	add	r3, r2
 8013db2:	e779      	b.n	8013ca8 <_dtoa_r+0x710>
 8013db4:	4602      	mov	r2, r0
 8013db6:	e7f5      	b.n	8013da4 <_dtoa_r+0x80c>
 8013db8:	f1b9 0f00 	cmp.w	r9, #0
 8013dbc:	dc36      	bgt.n	8013e2c <_dtoa_r+0x894>
 8013dbe:	9b06      	ldr	r3, [sp, #24]
 8013dc0:	2b02      	cmp	r3, #2
 8013dc2:	dd33      	ble.n	8013e2c <_dtoa_r+0x894>
 8013dc4:	46ca      	mov	sl, r9
 8013dc6:	f1ba 0f00 	cmp.w	sl, #0
 8013dca:	d10d      	bne.n	8013de8 <_dtoa_r+0x850>
 8013dcc:	4621      	mov	r1, r4
 8013dce:	4653      	mov	r3, sl
 8013dd0:	2205      	movs	r2, #5
 8013dd2:	4630      	mov	r0, r6
 8013dd4:	f000 faae 	bl	8014334 <__multadd>
 8013dd8:	4601      	mov	r1, r0
 8013dda:	4604      	mov	r4, r0
 8013ddc:	4628      	mov	r0, r5
 8013dde:	f000 fcc3 	bl	8014768 <__mcmp>
 8013de2:	2800      	cmp	r0, #0
 8013de4:	f73f ade4 	bgt.w	80139b0 <_dtoa_r+0x418>
 8013de8:	9b08      	ldr	r3, [sp, #32]
 8013dea:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013dee:	ea6f 0b03 	mvn.w	fp, r3
 8013df2:	f04f 0900 	mov.w	r9, #0
 8013df6:	4621      	mov	r1, r4
 8013df8:	4630      	mov	r0, r6
 8013dfa:	f000 fa79 	bl	80142f0 <_Bfree>
 8013dfe:	2f00      	cmp	r7, #0
 8013e00:	f43f aea1 	beq.w	8013b46 <_dtoa_r+0x5ae>
 8013e04:	f1b9 0f00 	cmp.w	r9, #0
 8013e08:	d005      	beq.n	8013e16 <_dtoa_r+0x87e>
 8013e0a:	45b9      	cmp	r9, r7
 8013e0c:	d003      	beq.n	8013e16 <_dtoa_r+0x87e>
 8013e0e:	4649      	mov	r1, r9
 8013e10:	4630      	mov	r0, r6
 8013e12:	f000 fa6d 	bl	80142f0 <_Bfree>
 8013e16:	4639      	mov	r1, r7
 8013e18:	4630      	mov	r0, r6
 8013e1a:	f000 fa69 	bl	80142f0 <_Bfree>
 8013e1e:	e692      	b.n	8013b46 <_dtoa_r+0x5ae>
 8013e20:	2400      	movs	r4, #0
 8013e22:	4627      	mov	r7, r4
 8013e24:	e7e0      	b.n	8013de8 <_dtoa_r+0x850>
 8013e26:	4693      	mov	fp, r2
 8013e28:	4627      	mov	r7, r4
 8013e2a:	e5c1      	b.n	80139b0 <_dtoa_r+0x418>
 8013e2c:	9b07      	ldr	r3, [sp, #28]
 8013e2e:	46ca      	mov	sl, r9
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	f000 8100 	beq.w	8014036 <_dtoa_r+0xa9e>
 8013e36:	f1b8 0f00 	cmp.w	r8, #0
 8013e3a:	dd05      	ble.n	8013e48 <_dtoa_r+0x8b0>
 8013e3c:	4639      	mov	r1, r7
 8013e3e:	4642      	mov	r2, r8
 8013e40:	4630      	mov	r0, r6
 8013e42:	f000 fc25 	bl	8014690 <__lshift>
 8013e46:	4607      	mov	r7, r0
 8013e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d05d      	beq.n	8013f0a <_dtoa_r+0x972>
 8013e4e:	6879      	ldr	r1, [r7, #4]
 8013e50:	4630      	mov	r0, r6
 8013e52:	f000 fa0d 	bl	8014270 <_Balloc>
 8013e56:	4680      	mov	r8, r0
 8013e58:	b928      	cbnz	r0, 8013e66 <_dtoa_r+0x8ce>
 8013e5a:	4b82      	ldr	r3, [pc, #520]	; (8014064 <_dtoa_r+0xacc>)
 8013e5c:	4602      	mov	r2, r0
 8013e5e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8013e62:	f7ff bbb1 	b.w	80135c8 <_dtoa_r+0x30>
 8013e66:	693a      	ldr	r2, [r7, #16]
 8013e68:	3202      	adds	r2, #2
 8013e6a:	0092      	lsls	r2, r2, #2
 8013e6c:	f107 010c 	add.w	r1, r7, #12
 8013e70:	300c      	adds	r0, #12
 8013e72:	f7ff faf8 	bl	8013466 <memcpy>
 8013e76:	2201      	movs	r2, #1
 8013e78:	4641      	mov	r1, r8
 8013e7a:	4630      	mov	r0, r6
 8013e7c:	f000 fc08 	bl	8014690 <__lshift>
 8013e80:	9b01      	ldr	r3, [sp, #4]
 8013e82:	3301      	adds	r3, #1
 8013e84:	9304      	str	r3, [sp, #16]
 8013e86:	9b01      	ldr	r3, [sp, #4]
 8013e88:	4453      	add	r3, sl
 8013e8a:	9308      	str	r3, [sp, #32]
 8013e8c:	9b02      	ldr	r3, [sp, #8]
 8013e8e:	f003 0301 	and.w	r3, r3, #1
 8013e92:	46b9      	mov	r9, r7
 8013e94:	9307      	str	r3, [sp, #28]
 8013e96:	4607      	mov	r7, r0
 8013e98:	9b04      	ldr	r3, [sp, #16]
 8013e9a:	4621      	mov	r1, r4
 8013e9c:	3b01      	subs	r3, #1
 8013e9e:	4628      	mov	r0, r5
 8013ea0:	9302      	str	r3, [sp, #8]
 8013ea2:	f7ff faee 	bl	8013482 <quorem>
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	3330      	adds	r3, #48	; 0x30
 8013eaa:	9005      	str	r0, [sp, #20]
 8013eac:	4649      	mov	r1, r9
 8013eae:	4628      	mov	r0, r5
 8013eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8013eb2:	f000 fc59 	bl	8014768 <__mcmp>
 8013eb6:	463a      	mov	r2, r7
 8013eb8:	4682      	mov	sl, r0
 8013eba:	4621      	mov	r1, r4
 8013ebc:	4630      	mov	r0, r6
 8013ebe:	f000 fc6f 	bl	80147a0 <__mdiff>
 8013ec2:	68c2      	ldr	r2, [r0, #12]
 8013ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ec6:	4680      	mov	r8, r0
 8013ec8:	bb0a      	cbnz	r2, 8013f0e <_dtoa_r+0x976>
 8013eca:	4601      	mov	r1, r0
 8013ecc:	4628      	mov	r0, r5
 8013ece:	f000 fc4b 	bl	8014768 <__mcmp>
 8013ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ed4:	4602      	mov	r2, r0
 8013ed6:	4641      	mov	r1, r8
 8013ed8:	4630      	mov	r0, r6
 8013eda:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8013ede:	f000 fa07 	bl	80142f0 <_Bfree>
 8013ee2:	9b06      	ldr	r3, [sp, #24]
 8013ee4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013ee6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013eea:	ea43 0102 	orr.w	r1, r3, r2
 8013eee:	9b07      	ldr	r3, [sp, #28]
 8013ef0:	4319      	orrs	r1, r3
 8013ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ef4:	d10d      	bne.n	8013f12 <_dtoa_r+0x97a>
 8013ef6:	2b39      	cmp	r3, #57	; 0x39
 8013ef8:	d029      	beq.n	8013f4e <_dtoa_r+0x9b6>
 8013efa:	f1ba 0f00 	cmp.w	sl, #0
 8013efe:	dd01      	ble.n	8013f04 <_dtoa_r+0x96c>
 8013f00:	9b05      	ldr	r3, [sp, #20]
 8013f02:	3331      	adds	r3, #49	; 0x31
 8013f04:	9a02      	ldr	r2, [sp, #8]
 8013f06:	7013      	strb	r3, [r2, #0]
 8013f08:	e775      	b.n	8013df6 <_dtoa_r+0x85e>
 8013f0a:	4638      	mov	r0, r7
 8013f0c:	e7b8      	b.n	8013e80 <_dtoa_r+0x8e8>
 8013f0e:	2201      	movs	r2, #1
 8013f10:	e7e1      	b.n	8013ed6 <_dtoa_r+0x93e>
 8013f12:	f1ba 0f00 	cmp.w	sl, #0
 8013f16:	db06      	blt.n	8013f26 <_dtoa_r+0x98e>
 8013f18:	9906      	ldr	r1, [sp, #24]
 8013f1a:	ea41 0a0a 	orr.w	sl, r1, sl
 8013f1e:	9907      	ldr	r1, [sp, #28]
 8013f20:	ea5a 0a01 	orrs.w	sl, sl, r1
 8013f24:	d120      	bne.n	8013f68 <_dtoa_r+0x9d0>
 8013f26:	2a00      	cmp	r2, #0
 8013f28:	ddec      	ble.n	8013f04 <_dtoa_r+0x96c>
 8013f2a:	4629      	mov	r1, r5
 8013f2c:	2201      	movs	r2, #1
 8013f2e:	4630      	mov	r0, r6
 8013f30:	9304      	str	r3, [sp, #16]
 8013f32:	f000 fbad 	bl	8014690 <__lshift>
 8013f36:	4621      	mov	r1, r4
 8013f38:	4605      	mov	r5, r0
 8013f3a:	f000 fc15 	bl	8014768 <__mcmp>
 8013f3e:	2800      	cmp	r0, #0
 8013f40:	9b04      	ldr	r3, [sp, #16]
 8013f42:	dc02      	bgt.n	8013f4a <_dtoa_r+0x9b2>
 8013f44:	d1de      	bne.n	8013f04 <_dtoa_r+0x96c>
 8013f46:	07da      	lsls	r2, r3, #31
 8013f48:	d5dc      	bpl.n	8013f04 <_dtoa_r+0x96c>
 8013f4a:	2b39      	cmp	r3, #57	; 0x39
 8013f4c:	d1d8      	bne.n	8013f00 <_dtoa_r+0x968>
 8013f4e:	9a02      	ldr	r2, [sp, #8]
 8013f50:	2339      	movs	r3, #57	; 0x39
 8013f52:	7013      	strb	r3, [r2, #0]
 8013f54:	4643      	mov	r3, r8
 8013f56:	4698      	mov	r8, r3
 8013f58:	3b01      	subs	r3, #1
 8013f5a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8013f5e:	2a39      	cmp	r2, #57	; 0x39
 8013f60:	d051      	beq.n	8014006 <_dtoa_r+0xa6e>
 8013f62:	3201      	adds	r2, #1
 8013f64:	701a      	strb	r2, [r3, #0]
 8013f66:	e746      	b.n	8013df6 <_dtoa_r+0x85e>
 8013f68:	2a00      	cmp	r2, #0
 8013f6a:	dd03      	ble.n	8013f74 <_dtoa_r+0x9dc>
 8013f6c:	2b39      	cmp	r3, #57	; 0x39
 8013f6e:	d0ee      	beq.n	8013f4e <_dtoa_r+0x9b6>
 8013f70:	3301      	adds	r3, #1
 8013f72:	e7c7      	b.n	8013f04 <_dtoa_r+0x96c>
 8013f74:	9a04      	ldr	r2, [sp, #16]
 8013f76:	9908      	ldr	r1, [sp, #32]
 8013f78:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013f7c:	428a      	cmp	r2, r1
 8013f7e:	d02b      	beq.n	8013fd8 <_dtoa_r+0xa40>
 8013f80:	4629      	mov	r1, r5
 8013f82:	2300      	movs	r3, #0
 8013f84:	220a      	movs	r2, #10
 8013f86:	4630      	mov	r0, r6
 8013f88:	f000 f9d4 	bl	8014334 <__multadd>
 8013f8c:	45b9      	cmp	r9, r7
 8013f8e:	4605      	mov	r5, r0
 8013f90:	f04f 0300 	mov.w	r3, #0
 8013f94:	f04f 020a 	mov.w	r2, #10
 8013f98:	4649      	mov	r1, r9
 8013f9a:	4630      	mov	r0, r6
 8013f9c:	d107      	bne.n	8013fae <_dtoa_r+0xa16>
 8013f9e:	f000 f9c9 	bl	8014334 <__multadd>
 8013fa2:	4681      	mov	r9, r0
 8013fa4:	4607      	mov	r7, r0
 8013fa6:	9b04      	ldr	r3, [sp, #16]
 8013fa8:	3301      	adds	r3, #1
 8013faa:	9304      	str	r3, [sp, #16]
 8013fac:	e774      	b.n	8013e98 <_dtoa_r+0x900>
 8013fae:	f000 f9c1 	bl	8014334 <__multadd>
 8013fb2:	4639      	mov	r1, r7
 8013fb4:	4681      	mov	r9, r0
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	220a      	movs	r2, #10
 8013fba:	4630      	mov	r0, r6
 8013fbc:	f000 f9ba 	bl	8014334 <__multadd>
 8013fc0:	4607      	mov	r7, r0
 8013fc2:	e7f0      	b.n	8013fa6 <_dtoa_r+0xa0e>
 8013fc4:	f1ba 0f00 	cmp.w	sl, #0
 8013fc8:	9a01      	ldr	r2, [sp, #4]
 8013fca:	bfcc      	ite	gt
 8013fcc:	46d0      	movgt	r8, sl
 8013fce:	f04f 0801 	movle.w	r8, #1
 8013fd2:	4490      	add	r8, r2
 8013fd4:	f04f 0900 	mov.w	r9, #0
 8013fd8:	4629      	mov	r1, r5
 8013fda:	2201      	movs	r2, #1
 8013fdc:	4630      	mov	r0, r6
 8013fde:	9302      	str	r3, [sp, #8]
 8013fe0:	f000 fb56 	bl	8014690 <__lshift>
 8013fe4:	4621      	mov	r1, r4
 8013fe6:	4605      	mov	r5, r0
 8013fe8:	f000 fbbe 	bl	8014768 <__mcmp>
 8013fec:	2800      	cmp	r0, #0
 8013fee:	dcb1      	bgt.n	8013f54 <_dtoa_r+0x9bc>
 8013ff0:	d102      	bne.n	8013ff8 <_dtoa_r+0xa60>
 8013ff2:	9b02      	ldr	r3, [sp, #8]
 8013ff4:	07db      	lsls	r3, r3, #31
 8013ff6:	d4ad      	bmi.n	8013f54 <_dtoa_r+0x9bc>
 8013ff8:	4643      	mov	r3, r8
 8013ffa:	4698      	mov	r8, r3
 8013ffc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014000:	2a30      	cmp	r2, #48	; 0x30
 8014002:	d0fa      	beq.n	8013ffa <_dtoa_r+0xa62>
 8014004:	e6f7      	b.n	8013df6 <_dtoa_r+0x85e>
 8014006:	9a01      	ldr	r2, [sp, #4]
 8014008:	429a      	cmp	r2, r3
 801400a:	d1a4      	bne.n	8013f56 <_dtoa_r+0x9be>
 801400c:	f10b 0b01 	add.w	fp, fp, #1
 8014010:	2331      	movs	r3, #49	; 0x31
 8014012:	e778      	b.n	8013f06 <_dtoa_r+0x96e>
 8014014:	4b14      	ldr	r3, [pc, #80]	; (8014068 <_dtoa_r+0xad0>)
 8014016:	f7ff bb2a 	b.w	801366e <_dtoa_r+0xd6>
 801401a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801401c:	2b00      	cmp	r3, #0
 801401e:	f47f ab05 	bne.w	801362c <_dtoa_r+0x94>
 8014022:	4b12      	ldr	r3, [pc, #72]	; (801406c <_dtoa_r+0xad4>)
 8014024:	f7ff bb23 	b.w	801366e <_dtoa_r+0xd6>
 8014028:	f1ba 0f00 	cmp.w	sl, #0
 801402c:	dc03      	bgt.n	8014036 <_dtoa_r+0xa9e>
 801402e:	9b06      	ldr	r3, [sp, #24]
 8014030:	2b02      	cmp	r3, #2
 8014032:	f73f aec8 	bgt.w	8013dc6 <_dtoa_r+0x82e>
 8014036:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801403a:	4621      	mov	r1, r4
 801403c:	4628      	mov	r0, r5
 801403e:	f7ff fa20 	bl	8013482 <quorem>
 8014042:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014046:	f808 3b01 	strb.w	r3, [r8], #1
 801404a:	9a01      	ldr	r2, [sp, #4]
 801404c:	eba8 0202 	sub.w	r2, r8, r2
 8014050:	4592      	cmp	sl, r2
 8014052:	ddb7      	ble.n	8013fc4 <_dtoa_r+0xa2c>
 8014054:	4629      	mov	r1, r5
 8014056:	2300      	movs	r3, #0
 8014058:	220a      	movs	r2, #10
 801405a:	4630      	mov	r0, r6
 801405c:	f000 f96a 	bl	8014334 <__multadd>
 8014060:	4605      	mov	r5, r0
 8014062:	e7ea      	b.n	801403a <_dtoa_r+0xaa2>
 8014064:	08015988 	.word	0x08015988
 8014068:	080158e8 	.word	0x080158e8
 801406c:	0801590c 	.word	0x0801590c

08014070 <_free_r>:
 8014070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014072:	2900      	cmp	r1, #0
 8014074:	d044      	beq.n	8014100 <_free_r+0x90>
 8014076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801407a:	9001      	str	r0, [sp, #4]
 801407c:	2b00      	cmp	r3, #0
 801407e:	f1a1 0404 	sub.w	r4, r1, #4
 8014082:	bfb8      	it	lt
 8014084:	18e4      	addlt	r4, r4, r3
 8014086:	f000 f8e7 	bl	8014258 <__malloc_lock>
 801408a:	4a1e      	ldr	r2, [pc, #120]	; (8014104 <_free_r+0x94>)
 801408c:	9801      	ldr	r0, [sp, #4]
 801408e:	6813      	ldr	r3, [r2, #0]
 8014090:	b933      	cbnz	r3, 80140a0 <_free_r+0x30>
 8014092:	6063      	str	r3, [r4, #4]
 8014094:	6014      	str	r4, [r2, #0]
 8014096:	b003      	add	sp, #12
 8014098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801409c:	f000 b8e2 	b.w	8014264 <__malloc_unlock>
 80140a0:	42a3      	cmp	r3, r4
 80140a2:	d908      	bls.n	80140b6 <_free_r+0x46>
 80140a4:	6825      	ldr	r5, [r4, #0]
 80140a6:	1961      	adds	r1, r4, r5
 80140a8:	428b      	cmp	r3, r1
 80140aa:	bf01      	itttt	eq
 80140ac:	6819      	ldreq	r1, [r3, #0]
 80140ae:	685b      	ldreq	r3, [r3, #4]
 80140b0:	1949      	addeq	r1, r1, r5
 80140b2:	6021      	streq	r1, [r4, #0]
 80140b4:	e7ed      	b.n	8014092 <_free_r+0x22>
 80140b6:	461a      	mov	r2, r3
 80140b8:	685b      	ldr	r3, [r3, #4]
 80140ba:	b10b      	cbz	r3, 80140c0 <_free_r+0x50>
 80140bc:	42a3      	cmp	r3, r4
 80140be:	d9fa      	bls.n	80140b6 <_free_r+0x46>
 80140c0:	6811      	ldr	r1, [r2, #0]
 80140c2:	1855      	adds	r5, r2, r1
 80140c4:	42a5      	cmp	r5, r4
 80140c6:	d10b      	bne.n	80140e0 <_free_r+0x70>
 80140c8:	6824      	ldr	r4, [r4, #0]
 80140ca:	4421      	add	r1, r4
 80140cc:	1854      	adds	r4, r2, r1
 80140ce:	42a3      	cmp	r3, r4
 80140d0:	6011      	str	r1, [r2, #0]
 80140d2:	d1e0      	bne.n	8014096 <_free_r+0x26>
 80140d4:	681c      	ldr	r4, [r3, #0]
 80140d6:	685b      	ldr	r3, [r3, #4]
 80140d8:	6053      	str	r3, [r2, #4]
 80140da:	440c      	add	r4, r1
 80140dc:	6014      	str	r4, [r2, #0]
 80140de:	e7da      	b.n	8014096 <_free_r+0x26>
 80140e0:	d902      	bls.n	80140e8 <_free_r+0x78>
 80140e2:	230c      	movs	r3, #12
 80140e4:	6003      	str	r3, [r0, #0]
 80140e6:	e7d6      	b.n	8014096 <_free_r+0x26>
 80140e8:	6825      	ldr	r5, [r4, #0]
 80140ea:	1961      	adds	r1, r4, r5
 80140ec:	428b      	cmp	r3, r1
 80140ee:	bf04      	itt	eq
 80140f0:	6819      	ldreq	r1, [r3, #0]
 80140f2:	685b      	ldreq	r3, [r3, #4]
 80140f4:	6063      	str	r3, [r4, #4]
 80140f6:	bf04      	itt	eq
 80140f8:	1949      	addeq	r1, r1, r5
 80140fa:	6021      	streq	r1, [r4, #0]
 80140fc:	6054      	str	r4, [r2, #4]
 80140fe:	e7ca      	b.n	8014096 <_free_r+0x26>
 8014100:	b003      	add	sp, #12
 8014102:	bd30      	pop	{r4, r5, pc}
 8014104:	24010cdc 	.word	0x24010cdc

08014108 <malloc>:
 8014108:	4b02      	ldr	r3, [pc, #8]	; (8014114 <malloc+0xc>)
 801410a:	4601      	mov	r1, r0
 801410c:	6818      	ldr	r0, [r3, #0]
 801410e:	f000 b823 	b.w	8014158 <_malloc_r>
 8014112:	bf00      	nop
 8014114:	24000170 	.word	0x24000170

08014118 <sbrk_aligned>:
 8014118:	b570      	push	{r4, r5, r6, lr}
 801411a:	4e0e      	ldr	r6, [pc, #56]	; (8014154 <sbrk_aligned+0x3c>)
 801411c:	460c      	mov	r4, r1
 801411e:	6831      	ldr	r1, [r6, #0]
 8014120:	4605      	mov	r5, r0
 8014122:	b911      	cbnz	r1, 801412a <sbrk_aligned+0x12>
 8014124:	f000 feca 	bl	8014ebc <_sbrk_r>
 8014128:	6030      	str	r0, [r6, #0]
 801412a:	4621      	mov	r1, r4
 801412c:	4628      	mov	r0, r5
 801412e:	f000 fec5 	bl	8014ebc <_sbrk_r>
 8014132:	1c43      	adds	r3, r0, #1
 8014134:	d00a      	beq.n	801414c <sbrk_aligned+0x34>
 8014136:	1cc4      	adds	r4, r0, #3
 8014138:	f024 0403 	bic.w	r4, r4, #3
 801413c:	42a0      	cmp	r0, r4
 801413e:	d007      	beq.n	8014150 <sbrk_aligned+0x38>
 8014140:	1a21      	subs	r1, r4, r0
 8014142:	4628      	mov	r0, r5
 8014144:	f000 feba 	bl	8014ebc <_sbrk_r>
 8014148:	3001      	adds	r0, #1
 801414a:	d101      	bne.n	8014150 <sbrk_aligned+0x38>
 801414c:	f04f 34ff 	mov.w	r4, #4294967295
 8014150:	4620      	mov	r0, r4
 8014152:	bd70      	pop	{r4, r5, r6, pc}
 8014154:	24010ce0 	.word	0x24010ce0

08014158 <_malloc_r>:
 8014158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801415c:	1ccd      	adds	r5, r1, #3
 801415e:	f025 0503 	bic.w	r5, r5, #3
 8014162:	3508      	adds	r5, #8
 8014164:	2d0c      	cmp	r5, #12
 8014166:	bf38      	it	cc
 8014168:	250c      	movcc	r5, #12
 801416a:	2d00      	cmp	r5, #0
 801416c:	4607      	mov	r7, r0
 801416e:	db01      	blt.n	8014174 <_malloc_r+0x1c>
 8014170:	42a9      	cmp	r1, r5
 8014172:	d905      	bls.n	8014180 <_malloc_r+0x28>
 8014174:	230c      	movs	r3, #12
 8014176:	603b      	str	r3, [r7, #0]
 8014178:	2600      	movs	r6, #0
 801417a:	4630      	mov	r0, r6
 801417c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014180:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014254 <_malloc_r+0xfc>
 8014184:	f000 f868 	bl	8014258 <__malloc_lock>
 8014188:	f8d8 3000 	ldr.w	r3, [r8]
 801418c:	461c      	mov	r4, r3
 801418e:	bb5c      	cbnz	r4, 80141e8 <_malloc_r+0x90>
 8014190:	4629      	mov	r1, r5
 8014192:	4638      	mov	r0, r7
 8014194:	f7ff ffc0 	bl	8014118 <sbrk_aligned>
 8014198:	1c43      	adds	r3, r0, #1
 801419a:	4604      	mov	r4, r0
 801419c:	d155      	bne.n	801424a <_malloc_r+0xf2>
 801419e:	f8d8 4000 	ldr.w	r4, [r8]
 80141a2:	4626      	mov	r6, r4
 80141a4:	2e00      	cmp	r6, #0
 80141a6:	d145      	bne.n	8014234 <_malloc_r+0xdc>
 80141a8:	2c00      	cmp	r4, #0
 80141aa:	d048      	beq.n	801423e <_malloc_r+0xe6>
 80141ac:	6823      	ldr	r3, [r4, #0]
 80141ae:	4631      	mov	r1, r6
 80141b0:	4638      	mov	r0, r7
 80141b2:	eb04 0903 	add.w	r9, r4, r3
 80141b6:	f000 fe81 	bl	8014ebc <_sbrk_r>
 80141ba:	4581      	cmp	r9, r0
 80141bc:	d13f      	bne.n	801423e <_malloc_r+0xe6>
 80141be:	6821      	ldr	r1, [r4, #0]
 80141c0:	1a6d      	subs	r5, r5, r1
 80141c2:	4629      	mov	r1, r5
 80141c4:	4638      	mov	r0, r7
 80141c6:	f7ff ffa7 	bl	8014118 <sbrk_aligned>
 80141ca:	3001      	adds	r0, #1
 80141cc:	d037      	beq.n	801423e <_malloc_r+0xe6>
 80141ce:	6823      	ldr	r3, [r4, #0]
 80141d0:	442b      	add	r3, r5
 80141d2:	6023      	str	r3, [r4, #0]
 80141d4:	f8d8 3000 	ldr.w	r3, [r8]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d038      	beq.n	801424e <_malloc_r+0xf6>
 80141dc:	685a      	ldr	r2, [r3, #4]
 80141de:	42a2      	cmp	r2, r4
 80141e0:	d12b      	bne.n	801423a <_malloc_r+0xe2>
 80141e2:	2200      	movs	r2, #0
 80141e4:	605a      	str	r2, [r3, #4]
 80141e6:	e00f      	b.n	8014208 <_malloc_r+0xb0>
 80141e8:	6822      	ldr	r2, [r4, #0]
 80141ea:	1b52      	subs	r2, r2, r5
 80141ec:	d41f      	bmi.n	801422e <_malloc_r+0xd6>
 80141ee:	2a0b      	cmp	r2, #11
 80141f0:	d917      	bls.n	8014222 <_malloc_r+0xca>
 80141f2:	1961      	adds	r1, r4, r5
 80141f4:	42a3      	cmp	r3, r4
 80141f6:	6025      	str	r5, [r4, #0]
 80141f8:	bf18      	it	ne
 80141fa:	6059      	strne	r1, [r3, #4]
 80141fc:	6863      	ldr	r3, [r4, #4]
 80141fe:	bf08      	it	eq
 8014200:	f8c8 1000 	streq.w	r1, [r8]
 8014204:	5162      	str	r2, [r4, r5]
 8014206:	604b      	str	r3, [r1, #4]
 8014208:	4638      	mov	r0, r7
 801420a:	f104 060b 	add.w	r6, r4, #11
 801420e:	f000 f829 	bl	8014264 <__malloc_unlock>
 8014212:	f026 0607 	bic.w	r6, r6, #7
 8014216:	1d23      	adds	r3, r4, #4
 8014218:	1af2      	subs	r2, r6, r3
 801421a:	d0ae      	beq.n	801417a <_malloc_r+0x22>
 801421c:	1b9b      	subs	r3, r3, r6
 801421e:	50a3      	str	r3, [r4, r2]
 8014220:	e7ab      	b.n	801417a <_malloc_r+0x22>
 8014222:	42a3      	cmp	r3, r4
 8014224:	6862      	ldr	r2, [r4, #4]
 8014226:	d1dd      	bne.n	80141e4 <_malloc_r+0x8c>
 8014228:	f8c8 2000 	str.w	r2, [r8]
 801422c:	e7ec      	b.n	8014208 <_malloc_r+0xb0>
 801422e:	4623      	mov	r3, r4
 8014230:	6864      	ldr	r4, [r4, #4]
 8014232:	e7ac      	b.n	801418e <_malloc_r+0x36>
 8014234:	4634      	mov	r4, r6
 8014236:	6876      	ldr	r6, [r6, #4]
 8014238:	e7b4      	b.n	80141a4 <_malloc_r+0x4c>
 801423a:	4613      	mov	r3, r2
 801423c:	e7cc      	b.n	80141d8 <_malloc_r+0x80>
 801423e:	230c      	movs	r3, #12
 8014240:	603b      	str	r3, [r7, #0]
 8014242:	4638      	mov	r0, r7
 8014244:	f000 f80e 	bl	8014264 <__malloc_unlock>
 8014248:	e797      	b.n	801417a <_malloc_r+0x22>
 801424a:	6025      	str	r5, [r4, #0]
 801424c:	e7dc      	b.n	8014208 <_malloc_r+0xb0>
 801424e:	605b      	str	r3, [r3, #4]
 8014250:	deff      	udf	#255	; 0xff
 8014252:	bf00      	nop
 8014254:	24010cdc 	.word	0x24010cdc

08014258 <__malloc_lock>:
 8014258:	4801      	ldr	r0, [pc, #4]	; (8014260 <__malloc_lock+0x8>)
 801425a:	f7ff b902 	b.w	8013462 <__retarget_lock_acquire_recursive>
 801425e:	bf00      	nop
 8014260:	24010cd8 	.word	0x24010cd8

08014264 <__malloc_unlock>:
 8014264:	4801      	ldr	r0, [pc, #4]	; (801426c <__malloc_unlock+0x8>)
 8014266:	f7ff b8fd 	b.w	8013464 <__retarget_lock_release_recursive>
 801426a:	bf00      	nop
 801426c:	24010cd8 	.word	0x24010cd8

08014270 <_Balloc>:
 8014270:	b570      	push	{r4, r5, r6, lr}
 8014272:	69c6      	ldr	r6, [r0, #28]
 8014274:	4604      	mov	r4, r0
 8014276:	460d      	mov	r5, r1
 8014278:	b976      	cbnz	r6, 8014298 <_Balloc+0x28>
 801427a:	2010      	movs	r0, #16
 801427c:	f7ff ff44 	bl	8014108 <malloc>
 8014280:	4602      	mov	r2, r0
 8014282:	61e0      	str	r0, [r4, #28]
 8014284:	b920      	cbnz	r0, 8014290 <_Balloc+0x20>
 8014286:	4b18      	ldr	r3, [pc, #96]	; (80142e8 <_Balloc+0x78>)
 8014288:	4818      	ldr	r0, [pc, #96]	; (80142ec <_Balloc+0x7c>)
 801428a:	216b      	movs	r1, #107	; 0x6b
 801428c:	f000 fe26 	bl	8014edc <__assert_func>
 8014290:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014294:	6006      	str	r6, [r0, #0]
 8014296:	60c6      	str	r6, [r0, #12]
 8014298:	69e6      	ldr	r6, [r4, #28]
 801429a:	68f3      	ldr	r3, [r6, #12]
 801429c:	b183      	cbz	r3, 80142c0 <_Balloc+0x50>
 801429e:	69e3      	ldr	r3, [r4, #28]
 80142a0:	68db      	ldr	r3, [r3, #12]
 80142a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80142a6:	b9b8      	cbnz	r0, 80142d8 <_Balloc+0x68>
 80142a8:	2101      	movs	r1, #1
 80142aa:	fa01 f605 	lsl.w	r6, r1, r5
 80142ae:	1d72      	adds	r2, r6, #5
 80142b0:	0092      	lsls	r2, r2, #2
 80142b2:	4620      	mov	r0, r4
 80142b4:	f000 fe30 	bl	8014f18 <_calloc_r>
 80142b8:	b160      	cbz	r0, 80142d4 <_Balloc+0x64>
 80142ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80142be:	e00e      	b.n	80142de <_Balloc+0x6e>
 80142c0:	2221      	movs	r2, #33	; 0x21
 80142c2:	2104      	movs	r1, #4
 80142c4:	4620      	mov	r0, r4
 80142c6:	f000 fe27 	bl	8014f18 <_calloc_r>
 80142ca:	69e3      	ldr	r3, [r4, #28]
 80142cc:	60f0      	str	r0, [r6, #12]
 80142ce:	68db      	ldr	r3, [r3, #12]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d1e4      	bne.n	801429e <_Balloc+0x2e>
 80142d4:	2000      	movs	r0, #0
 80142d6:	bd70      	pop	{r4, r5, r6, pc}
 80142d8:	6802      	ldr	r2, [r0, #0]
 80142da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80142de:	2300      	movs	r3, #0
 80142e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80142e4:	e7f7      	b.n	80142d6 <_Balloc+0x66>
 80142e6:	bf00      	nop
 80142e8:	08015919 	.word	0x08015919
 80142ec:	08015999 	.word	0x08015999

080142f0 <_Bfree>:
 80142f0:	b570      	push	{r4, r5, r6, lr}
 80142f2:	69c6      	ldr	r6, [r0, #28]
 80142f4:	4605      	mov	r5, r0
 80142f6:	460c      	mov	r4, r1
 80142f8:	b976      	cbnz	r6, 8014318 <_Bfree+0x28>
 80142fa:	2010      	movs	r0, #16
 80142fc:	f7ff ff04 	bl	8014108 <malloc>
 8014300:	4602      	mov	r2, r0
 8014302:	61e8      	str	r0, [r5, #28]
 8014304:	b920      	cbnz	r0, 8014310 <_Bfree+0x20>
 8014306:	4b09      	ldr	r3, [pc, #36]	; (801432c <_Bfree+0x3c>)
 8014308:	4809      	ldr	r0, [pc, #36]	; (8014330 <_Bfree+0x40>)
 801430a:	218f      	movs	r1, #143	; 0x8f
 801430c:	f000 fde6 	bl	8014edc <__assert_func>
 8014310:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014314:	6006      	str	r6, [r0, #0]
 8014316:	60c6      	str	r6, [r0, #12]
 8014318:	b13c      	cbz	r4, 801432a <_Bfree+0x3a>
 801431a:	69eb      	ldr	r3, [r5, #28]
 801431c:	6862      	ldr	r2, [r4, #4]
 801431e:	68db      	ldr	r3, [r3, #12]
 8014320:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014324:	6021      	str	r1, [r4, #0]
 8014326:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801432a:	bd70      	pop	{r4, r5, r6, pc}
 801432c:	08015919 	.word	0x08015919
 8014330:	08015999 	.word	0x08015999

08014334 <__multadd>:
 8014334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014338:	690d      	ldr	r5, [r1, #16]
 801433a:	4607      	mov	r7, r0
 801433c:	460c      	mov	r4, r1
 801433e:	461e      	mov	r6, r3
 8014340:	f101 0c14 	add.w	ip, r1, #20
 8014344:	2000      	movs	r0, #0
 8014346:	f8dc 3000 	ldr.w	r3, [ip]
 801434a:	b299      	uxth	r1, r3
 801434c:	fb02 6101 	mla	r1, r2, r1, r6
 8014350:	0c1e      	lsrs	r6, r3, #16
 8014352:	0c0b      	lsrs	r3, r1, #16
 8014354:	fb02 3306 	mla	r3, r2, r6, r3
 8014358:	b289      	uxth	r1, r1
 801435a:	3001      	adds	r0, #1
 801435c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014360:	4285      	cmp	r5, r0
 8014362:	f84c 1b04 	str.w	r1, [ip], #4
 8014366:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801436a:	dcec      	bgt.n	8014346 <__multadd+0x12>
 801436c:	b30e      	cbz	r6, 80143b2 <__multadd+0x7e>
 801436e:	68a3      	ldr	r3, [r4, #8]
 8014370:	42ab      	cmp	r3, r5
 8014372:	dc19      	bgt.n	80143a8 <__multadd+0x74>
 8014374:	6861      	ldr	r1, [r4, #4]
 8014376:	4638      	mov	r0, r7
 8014378:	3101      	adds	r1, #1
 801437a:	f7ff ff79 	bl	8014270 <_Balloc>
 801437e:	4680      	mov	r8, r0
 8014380:	b928      	cbnz	r0, 801438e <__multadd+0x5a>
 8014382:	4602      	mov	r2, r0
 8014384:	4b0c      	ldr	r3, [pc, #48]	; (80143b8 <__multadd+0x84>)
 8014386:	480d      	ldr	r0, [pc, #52]	; (80143bc <__multadd+0x88>)
 8014388:	21ba      	movs	r1, #186	; 0xba
 801438a:	f000 fda7 	bl	8014edc <__assert_func>
 801438e:	6922      	ldr	r2, [r4, #16]
 8014390:	3202      	adds	r2, #2
 8014392:	f104 010c 	add.w	r1, r4, #12
 8014396:	0092      	lsls	r2, r2, #2
 8014398:	300c      	adds	r0, #12
 801439a:	f7ff f864 	bl	8013466 <memcpy>
 801439e:	4621      	mov	r1, r4
 80143a0:	4638      	mov	r0, r7
 80143a2:	f7ff ffa5 	bl	80142f0 <_Bfree>
 80143a6:	4644      	mov	r4, r8
 80143a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80143ac:	3501      	adds	r5, #1
 80143ae:	615e      	str	r6, [r3, #20]
 80143b0:	6125      	str	r5, [r4, #16]
 80143b2:	4620      	mov	r0, r4
 80143b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143b8:	08015988 	.word	0x08015988
 80143bc:	08015999 	.word	0x08015999

080143c0 <__hi0bits>:
 80143c0:	0c03      	lsrs	r3, r0, #16
 80143c2:	041b      	lsls	r3, r3, #16
 80143c4:	b9d3      	cbnz	r3, 80143fc <__hi0bits+0x3c>
 80143c6:	0400      	lsls	r0, r0, #16
 80143c8:	2310      	movs	r3, #16
 80143ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80143ce:	bf04      	itt	eq
 80143d0:	0200      	lsleq	r0, r0, #8
 80143d2:	3308      	addeq	r3, #8
 80143d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80143d8:	bf04      	itt	eq
 80143da:	0100      	lsleq	r0, r0, #4
 80143dc:	3304      	addeq	r3, #4
 80143de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80143e2:	bf04      	itt	eq
 80143e4:	0080      	lsleq	r0, r0, #2
 80143e6:	3302      	addeq	r3, #2
 80143e8:	2800      	cmp	r0, #0
 80143ea:	db05      	blt.n	80143f8 <__hi0bits+0x38>
 80143ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80143f0:	f103 0301 	add.w	r3, r3, #1
 80143f4:	bf08      	it	eq
 80143f6:	2320      	moveq	r3, #32
 80143f8:	4618      	mov	r0, r3
 80143fa:	4770      	bx	lr
 80143fc:	2300      	movs	r3, #0
 80143fe:	e7e4      	b.n	80143ca <__hi0bits+0xa>

08014400 <__lo0bits>:
 8014400:	6803      	ldr	r3, [r0, #0]
 8014402:	f013 0207 	ands.w	r2, r3, #7
 8014406:	d00c      	beq.n	8014422 <__lo0bits+0x22>
 8014408:	07d9      	lsls	r1, r3, #31
 801440a:	d422      	bmi.n	8014452 <__lo0bits+0x52>
 801440c:	079a      	lsls	r2, r3, #30
 801440e:	bf49      	itett	mi
 8014410:	085b      	lsrmi	r3, r3, #1
 8014412:	089b      	lsrpl	r3, r3, #2
 8014414:	6003      	strmi	r3, [r0, #0]
 8014416:	2201      	movmi	r2, #1
 8014418:	bf5c      	itt	pl
 801441a:	6003      	strpl	r3, [r0, #0]
 801441c:	2202      	movpl	r2, #2
 801441e:	4610      	mov	r0, r2
 8014420:	4770      	bx	lr
 8014422:	b299      	uxth	r1, r3
 8014424:	b909      	cbnz	r1, 801442a <__lo0bits+0x2a>
 8014426:	0c1b      	lsrs	r3, r3, #16
 8014428:	2210      	movs	r2, #16
 801442a:	b2d9      	uxtb	r1, r3
 801442c:	b909      	cbnz	r1, 8014432 <__lo0bits+0x32>
 801442e:	3208      	adds	r2, #8
 8014430:	0a1b      	lsrs	r3, r3, #8
 8014432:	0719      	lsls	r1, r3, #28
 8014434:	bf04      	itt	eq
 8014436:	091b      	lsreq	r3, r3, #4
 8014438:	3204      	addeq	r2, #4
 801443a:	0799      	lsls	r1, r3, #30
 801443c:	bf04      	itt	eq
 801443e:	089b      	lsreq	r3, r3, #2
 8014440:	3202      	addeq	r2, #2
 8014442:	07d9      	lsls	r1, r3, #31
 8014444:	d403      	bmi.n	801444e <__lo0bits+0x4e>
 8014446:	085b      	lsrs	r3, r3, #1
 8014448:	f102 0201 	add.w	r2, r2, #1
 801444c:	d003      	beq.n	8014456 <__lo0bits+0x56>
 801444e:	6003      	str	r3, [r0, #0]
 8014450:	e7e5      	b.n	801441e <__lo0bits+0x1e>
 8014452:	2200      	movs	r2, #0
 8014454:	e7e3      	b.n	801441e <__lo0bits+0x1e>
 8014456:	2220      	movs	r2, #32
 8014458:	e7e1      	b.n	801441e <__lo0bits+0x1e>
	...

0801445c <__i2b>:
 801445c:	b510      	push	{r4, lr}
 801445e:	460c      	mov	r4, r1
 8014460:	2101      	movs	r1, #1
 8014462:	f7ff ff05 	bl	8014270 <_Balloc>
 8014466:	4602      	mov	r2, r0
 8014468:	b928      	cbnz	r0, 8014476 <__i2b+0x1a>
 801446a:	4b05      	ldr	r3, [pc, #20]	; (8014480 <__i2b+0x24>)
 801446c:	4805      	ldr	r0, [pc, #20]	; (8014484 <__i2b+0x28>)
 801446e:	f240 1145 	movw	r1, #325	; 0x145
 8014472:	f000 fd33 	bl	8014edc <__assert_func>
 8014476:	2301      	movs	r3, #1
 8014478:	6144      	str	r4, [r0, #20]
 801447a:	6103      	str	r3, [r0, #16]
 801447c:	bd10      	pop	{r4, pc}
 801447e:	bf00      	nop
 8014480:	08015988 	.word	0x08015988
 8014484:	08015999 	.word	0x08015999

08014488 <__multiply>:
 8014488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801448c:	4691      	mov	r9, r2
 801448e:	690a      	ldr	r2, [r1, #16]
 8014490:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014494:	429a      	cmp	r2, r3
 8014496:	bfb8      	it	lt
 8014498:	460b      	movlt	r3, r1
 801449a:	460c      	mov	r4, r1
 801449c:	bfbc      	itt	lt
 801449e:	464c      	movlt	r4, r9
 80144a0:	4699      	movlt	r9, r3
 80144a2:	6927      	ldr	r7, [r4, #16]
 80144a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80144a8:	68a3      	ldr	r3, [r4, #8]
 80144aa:	6861      	ldr	r1, [r4, #4]
 80144ac:	eb07 060a 	add.w	r6, r7, sl
 80144b0:	42b3      	cmp	r3, r6
 80144b2:	b085      	sub	sp, #20
 80144b4:	bfb8      	it	lt
 80144b6:	3101      	addlt	r1, #1
 80144b8:	f7ff feda 	bl	8014270 <_Balloc>
 80144bc:	b930      	cbnz	r0, 80144cc <__multiply+0x44>
 80144be:	4602      	mov	r2, r0
 80144c0:	4b44      	ldr	r3, [pc, #272]	; (80145d4 <__multiply+0x14c>)
 80144c2:	4845      	ldr	r0, [pc, #276]	; (80145d8 <__multiply+0x150>)
 80144c4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80144c8:	f000 fd08 	bl	8014edc <__assert_func>
 80144cc:	f100 0514 	add.w	r5, r0, #20
 80144d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80144d4:	462b      	mov	r3, r5
 80144d6:	2200      	movs	r2, #0
 80144d8:	4543      	cmp	r3, r8
 80144da:	d321      	bcc.n	8014520 <__multiply+0x98>
 80144dc:	f104 0314 	add.w	r3, r4, #20
 80144e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80144e4:	f109 0314 	add.w	r3, r9, #20
 80144e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80144ec:	9202      	str	r2, [sp, #8]
 80144ee:	1b3a      	subs	r2, r7, r4
 80144f0:	3a15      	subs	r2, #21
 80144f2:	f022 0203 	bic.w	r2, r2, #3
 80144f6:	3204      	adds	r2, #4
 80144f8:	f104 0115 	add.w	r1, r4, #21
 80144fc:	428f      	cmp	r7, r1
 80144fe:	bf38      	it	cc
 8014500:	2204      	movcc	r2, #4
 8014502:	9201      	str	r2, [sp, #4]
 8014504:	9a02      	ldr	r2, [sp, #8]
 8014506:	9303      	str	r3, [sp, #12]
 8014508:	429a      	cmp	r2, r3
 801450a:	d80c      	bhi.n	8014526 <__multiply+0x9e>
 801450c:	2e00      	cmp	r6, #0
 801450e:	dd03      	ble.n	8014518 <__multiply+0x90>
 8014510:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014514:	2b00      	cmp	r3, #0
 8014516:	d05b      	beq.n	80145d0 <__multiply+0x148>
 8014518:	6106      	str	r6, [r0, #16]
 801451a:	b005      	add	sp, #20
 801451c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014520:	f843 2b04 	str.w	r2, [r3], #4
 8014524:	e7d8      	b.n	80144d8 <__multiply+0x50>
 8014526:	f8b3 a000 	ldrh.w	sl, [r3]
 801452a:	f1ba 0f00 	cmp.w	sl, #0
 801452e:	d024      	beq.n	801457a <__multiply+0xf2>
 8014530:	f104 0e14 	add.w	lr, r4, #20
 8014534:	46a9      	mov	r9, r5
 8014536:	f04f 0c00 	mov.w	ip, #0
 801453a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801453e:	f8d9 1000 	ldr.w	r1, [r9]
 8014542:	fa1f fb82 	uxth.w	fp, r2
 8014546:	b289      	uxth	r1, r1
 8014548:	fb0a 110b 	mla	r1, sl, fp, r1
 801454c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014550:	f8d9 2000 	ldr.w	r2, [r9]
 8014554:	4461      	add	r1, ip
 8014556:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801455a:	fb0a c20b 	mla	r2, sl, fp, ip
 801455e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014562:	b289      	uxth	r1, r1
 8014564:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014568:	4577      	cmp	r7, lr
 801456a:	f849 1b04 	str.w	r1, [r9], #4
 801456e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014572:	d8e2      	bhi.n	801453a <__multiply+0xb2>
 8014574:	9a01      	ldr	r2, [sp, #4]
 8014576:	f845 c002 	str.w	ip, [r5, r2]
 801457a:	9a03      	ldr	r2, [sp, #12]
 801457c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014580:	3304      	adds	r3, #4
 8014582:	f1b9 0f00 	cmp.w	r9, #0
 8014586:	d021      	beq.n	80145cc <__multiply+0x144>
 8014588:	6829      	ldr	r1, [r5, #0]
 801458a:	f104 0c14 	add.w	ip, r4, #20
 801458e:	46ae      	mov	lr, r5
 8014590:	f04f 0a00 	mov.w	sl, #0
 8014594:	f8bc b000 	ldrh.w	fp, [ip]
 8014598:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801459c:	fb09 220b 	mla	r2, r9, fp, r2
 80145a0:	4452      	add	r2, sl
 80145a2:	b289      	uxth	r1, r1
 80145a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80145a8:	f84e 1b04 	str.w	r1, [lr], #4
 80145ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 80145b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80145b4:	f8be 1000 	ldrh.w	r1, [lr]
 80145b8:	fb09 110a 	mla	r1, r9, sl, r1
 80145bc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80145c0:	4567      	cmp	r7, ip
 80145c2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80145c6:	d8e5      	bhi.n	8014594 <__multiply+0x10c>
 80145c8:	9a01      	ldr	r2, [sp, #4]
 80145ca:	50a9      	str	r1, [r5, r2]
 80145cc:	3504      	adds	r5, #4
 80145ce:	e799      	b.n	8014504 <__multiply+0x7c>
 80145d0:	3e01      	subs	r6, #1
 80145d2:	e79b      	b.n	801450c <__multiply+0x84>
 80145d4:	08015988 	.word	0x08015988
 80145d8:	08015999 	.word	0x08015999

080145dc <__pow5mult>:
 80145dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145e0:	4615      	mov	r5, r2
 80145e2:	f012 0203 	ands.w	r2, r2, #3
 80145e6:	4606      	mov	r6, r0
 80145e8:	460f      	mov	r7, r1
 80145ea:	d007      	beq.n	80145fc <__pow5mult+0x20>
 80145ec:	4c25      	ldr	r4, [pc, #148]	; (8014684 <__pow5mult+0xa8>)
 80145ee:	3a01      	subs	r2, #1
 80145f0:	2300      	movs	r3, #0
 80145f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80145f6:	f7ff fe9d 	bl	8014334 <__multadd>
 80145fa:	4607      	mov	r7, r0
 80145fc:	10ad      	asrs	r5, r5, #2
 80145fe:	d03d      	beq.n	801467c <__pow5mult+0xa0>
 8014600:	69f4      	ldr	r4, [r6, #28]
 8014602:	b97c      	cbnz	r4, 8014624 <__pow5mult+0x48>
 8014604:	2010      	movs	r0, #16
 8014606:	f7ff fd7f 	bl	8014108 <malloc>
 801460a:	4602      	mov	r2, r0
 801460c:	61f0      	str	r0, [r6, #28]
 801460e:	b928      	cbnz	r0, 801461c <__pow5mult+0x40>
 8014610:	4b1d      	ldr	r3, [pc, #116]	; (8014688 <__pow5mult+0xac>)
 8014612:	481e      	ldr	r0, [pc, #120]	; (801468c <__pow5mult+0xb0>)
 8014614:	f240 11b3 	movw	r1, #435	; 0x1b3
 8014618:	f000 fc60 	bl	8014edc <__assert_func>
 801461c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014620:	6004      	str	r4, [r0, #0]
 8014622:	60c4      	str	r4, [r0, #12]
 8014624:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8014628:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801462c:	b94c      	cbnz	r4, 8014642 <__pow5mult+0x66>
 801462e:	f240 2171 	movw	r1, #625	; 0x271
 8014632:	4630      	mov	r0, r6
 8014634:	f7ff ff12 	bl	801445c <__i2b>
 8014638:	2300      	movs	r3, #0
 801463a:	f8c8 0008 	str.w	r0, [r8, #8]
 801463e:	4604      	mov	r4, r0
 8014640:	6003      	str	r3, [r0, #0]
 8014642:	f04f 0900 	mov.w	r9, #0
 8014646:	07eb      	lsls	r3, r5, #31
 8014648:	d50a      	bpl.n	8014660 <__pow5mult+0x84>
 801464a:	4639      	mov	r1, r7
 801464c:	4622      	mov	r2, r4
 801464e:	4630      	mov	r0, r6
 8014650:	f7ff ff1a 	bl	8014488 <__multiply>
 8014654:	4639      	mov	r1, r7
 8014656:	4680      	mov	r8, r0
 8014658:	4630      	mov	r0, r6
 801465a:	f7ff fe49 	bl	80142f0 <_Bfree>
 801465e:	4647      	mov	r7, r8
 8014660:	106d      	asrs	r5, r5, #1
 8014662:	d00b      	beq.n	801467c <__pow5mult+0xa0>
 8014664:	6820      	ldr	r0, [r4, #0]
 8014666:	b938      	cbnz	r0, 8014678 <__pow5mult+0x9c>
 8014668:	4622      	mov	r2, r4
 801466a:	4621      	mov	r1, r4
 801466c:	4630      	mov	r0, r6
 801466e:	f7ff ff0b 	bl	8014488 <__multiply>
 8014672:	6020      	str	r0, [r4, #0]
 8014674:	f8c0 9000 	str.w	r9, [r0]
 8014678:	4604      	mov	r4, r0
 801467a:	e7e4      	b.n	8014646 <__pow5mult+0x6a>
 801467c:	4638      	mov	r0, r7
 801467e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014682:	bf00      	nop
 8014684:	08015ae8 	.word	0x08015ae8
 8014688:	08015919 	.word	0x08015919
 801468c:	08015999 	.word	0x08015999

08014690 <__lshift>:
 8014690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014694:	460c      	mov	r4, r1
 8014696:	6849      	ldr	r1, [r1, #4]
 8014698:	6923      	ldr	r3, [r4, #16]
 801469a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801469e:	68a3      	ldr	r3, [r4, #8]
 80146a0:	4607      	mov	r7, r0
 80146a2:	4691      	mov	r9, r2
 80146a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80146a8:	f108 0601 	add.w	r6, r8, #1
 80146ac:	42b3      	cmp	r3, r6
 80146ae:	db0b      	blt.n	80146c8 <__lshift+0x38>
 80146b0:	4638      	mov	r0, r7
 80146b2:	f7ff fddd 	bl	8014270 <_Balloc>
 80146b6:	4605      	mov	r5, r0
 80146b8:	b948      	cbnz	r0, 80146ce <__lshift+0x3e>
 80146ba:	4602      	mov	r2, r0
 80146bc:	4b28      	ldr	r3, [pc, #160]	; (8014760 <__lshift+0xd0>)
 80146be:	4829      	ldr	r0, [pc, #164]	; (8014764 <__lshift+0xd4>)
 80146c0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80146c4:	f000 fc0a 	bl	8014edc <__assert_func>
 80146c8:	3101      	adds	r1, #1
 80146ca:	005b      	lsls	r3, r3, #1
 80146cc:	e7ee      	b.n	80146ac <__lshift+0x1c>
 80146ce:	2300      	movs	r3, #0
 80146d0:	f100 0114 	add.w	r1, r0, #20
 80146d4:	f100 0210 	add.w	r2, r0, #16
 80146d8:	4618      	mov	r0, r3
 80146da:	4553      	cmp	r3, sl
 80146dc:	db33      	blt.n	8014746 <__lshift+0xb6>
 80146de:	6920      	ldr	r0, [r4, #16]
 80146e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80146e4:	f104 0314 	add.w	r3, r4, #20
 80146e8:	f019 091f 	ands.w	r9, r9, #31
 80146ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80146f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80146f4:	d02b      	beq.n	801474e <__lshift+0xbe>
 80146f6:	f1c9 0e20 	rsb	lr, r9, #32
 80146fa:	468a      	mov	sl, r1
 80146fc:	2200      	movs	r2, #0
 80146fe:	6818      	ldr	r0, [r3, #0]
 8014700:	fa00 f009 	lsl.w	r0, r0, r9
 8014704:	4310      	orrs	r0, r2
 8014706:	f84a 0b04 	str.w	r0, [sl], #4
 801470a:	f853 2b04 	ldr.w	r2, [r3], #4
 801470e:	459c      	cmp	ip, r3
 8014710:	fa22 f20e 	lsr.w	r2, r2, lr
 8014714:	d8f3      	bhi.n	80146fe <__lshift+0x6e>
 8014716:	ebac 0304 	sub.w	r3, ip, r4
 801471a:	3b15      	subs	r3, #21
 801471c:	f023 0303 	bic.w	r3, r3, #3
 8014720:	3304      	adds	r3, #4
 8014722:	f104 0015 	add.w	r0, r4, #21
 8014726:	4584      	cmp	ip, r0
 8014728:	bf38      	it	cc
 801472a:	2304      	movcc	r3, #4
 801472c:	50ca      	str	r2, [r1, r3]
 801472e:	b10a      	cbz	r2, 8014734 <__lshift+0xa4>
 8014730:	f108 0602 	add.w	r6, r8, #2
 8014734:	3e01      	subs	r6, #1
 8014736:	4638      	mov	r0, r7
 8014738:	612e      	str	r6, [r5, #16]
 801473a:	4621      	mov	r1, r4
 801473c:	f7ff fdd8 	bl	80142f0 <_Bfree>
 8014740:	4628      	mov	r0, r5
 8014742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014746:	f842 0f04 	str.w	r0, [r2, #4]!
 801474a:	3301      	adds	r3, #1
 801474c:	e7c5      	b.n	80146da <__lshift+0x4a>
 801474e:	3904      	subs	r1, #4
 8014750:	f853 2b04 	ldr.w	r2, [r3], #4
 8014754:	f841 2f04 	str.w	r2, [r1, #4]!
 8014758:	459c      	cmp	ip, r3
 801475a:	d8f9      	bhi.n	8014750 <__lshift+0xc0>
 801475c:	e7ea      	b.n	8014734 <__lshift+0xa4>
 801475e:	bf00      	nop
 8014760:	08015988 	.word	0x08015988
 8014764:	08015999 	.word	0x08015999

08014768 <__mcmp>:
 8014768:	b530      	push	{r4, r5, lr}
 801476a:	6902      	ldr	r2, [r0, #16]
 801476c:	690c      	ldr	r4, [r1, #16]
 801476e:	1b12      	subs	r2, r2, r4
 8014770:	d10e      	bne.n	8014790 <__mcmp+0x28>
 8014772:	f100 0314 	add.w	r3, r0, #20
 8014776:	3114      	adds	r1, #20
 8014778:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801477c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014780:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014784:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014788:	42a5      	cmp	r5, r4
 801478a:	d003      	beq.n	8014794 <__mcmp+0x2c>
 801478c:	d305      	bcc.n	801479a <__mcmp+0x32>
 801478e:	2201      	movs	r2, #1
 8014790:	4610      	mov	r0, r2
 8014792:	bd30      	pop	{r4, r5, pc}
 8014794:	4283      	cmp	r3, r0
 8014796:	d3f3      	bcc.n	8014780 <__mcmp+0x18>
 8014798:	e7fa      	b.n	8014790 <__mcmp+0x28>
 801479a:	f04f 32ff 	mov.w	r2, #4294967295
 801479e:	e7f7      	b.n	8014790 <__mcmp+0x28>

080147a0 <__mdiff>:
 80147a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147a4:	460c      	mov	r4, r1
 80147a6:	4606      	mov	r6, r0
 80147a8:	4611      	mov	r1, r2
 80147aa:	4620      	mov	r0, r4
 80147ac:	4690      	mov	r8, r2
 80147ae:	f7ff ffdb 	bl	8014768 <__mcmp>
 80147b2:	1e05      	subs	r5, r0, #0
 80147b4:	d110      	bne.n	80147d8 <__mdiff+0x38>
 80147b6:	4629      	mov	r1, r5
 80147b8:	4630      	mov	r0, r6
 80147ba:	f7ff fd59 	bl	8014270 <_Balloc>
 80147be:	b930      	cbnz	r0, 80147ce <__mdiff+0x2e>
 80147c0:	4b3a      	ldr	r3, [pc, #232]	; (80148ac <__mdiff+0x10c>)
 80147c2:	4602      	mov	r2, r0
 80147c4:	f240 2137 	movw	r1, #567	; 0x237
 80147c8:	4839      	ldr	r0, [pc, #228]	; (80148b0 <__mdiff+0x110>)
 80147ca:	f000 fb87 	bl	8014edc <__assert_func>
 80147ce:	2301      	movs	r3, #1
 80147d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80147d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147d8:	bfa4      	itt	ge
 80147da:	4643      	movge	r3, r8
 80147dc:	46a0      	movge	r8, r4
 80147de:	4630      	mov	r0, r6
 80147e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80147e4:	bfa6      	itte	ge
 80147e6:	461c      	movge	r4, r3
 80147e8:	2500      	movge	r5, #0
 80147ea:	2501      	movlt	r5, #1
 80147ec:	f7ff fd40 	bl	8014270 <_Balloc>
 80147f0:	b920      	cbnz	r0, 80147fc <__mdiff+0x5c>
 80147f2:	4b2e      	ldr	r3, [pc, #184]	; (80148ac <__mdiff+0x10c>)
 80147f4:	4602      	mov	r2, r0
 80147f6:	f240 2145 	movw	r1, #581	; 0x245
 80147fa:	e7e5      	b.n	80147c8 <__mdiff+0x28>
 80147fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014800:	6926      	ldr	r6, [r4, #16]
 8014802:	60c5      	str	r5, [r0, #12]
 8014804:	f104 0914 	add.w	r9, r4, #20
 8014808:	f108 0514 	add.w	r5, r8, #20
 801480c:	f100 0e14 	add.w	lr, r0, #20
 8014810:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014814:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014818:	f108 0210 	add.w	r2, r8, #16
 801481c:	46f2      	mov	sl, lr
 801481e:	2100      	movs	r1, #0
 8014820:	f859 3b04 	ldr.w	r3, [r9], #4
 8014824:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014828:	fa11 f88b 	uxtah	r8, r1, fp
 801482c:	b299      	uxth	r1, r3
 801482e:	0c1b      	lsrs	r3, r3, #16
 8014830:	eba8 0801 	sub.w	r8, r8, r1
 8014834:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014838:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801483c:	fa1f f888 	uxth.w	r8, r8
 8014840:	1419      	asrs	r1, r3, #16
 8014842:	454e      	cmp	r6, r9
 8014844:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014848:	f84a 3b04 	str.w	r3, [sl], #4
 801484c:	d8e8      	bhi.n	8014820 <__mdiff+0x80>
 801484e:	1b33      	subs	r3, r6, r4
 8014850:	3b15      	subs	r3, #21
 8014852:	f023 0303 	bic.w	r3, r3, #3
 8014856:	3304      	adds	r3, #4
 8014858:	3415      	adds	r4, #21
 801485a:	42a6      	cmp	r6, r4
 801485c:	bf38      	it	cc
 801485e:	2304      	movcc	r3, #4
 8014860:	441d      	add	r5, r3
 8014862:	4473      	add	r3, lr
 8014864:	469e      	mov	lr, r3
 8014866:	462e      	mov	r6, r5
 8014868:	4566      	cmp	r6, ip
 801486a:	d30e      	bcc.n	801488a <__mdiff+0xea>
 801486c:	f10c 0203 	add.w	r2, ip, #3
 8014870:	1b52      	subs	r2, r2, r5
 8014872:	f022 0203 	bic.w	r2, r2, #3
 8014876:	3d03      	subs	r5, #3
 8014878:	45ac      	cmp	ip, r5
 801487a:	bf38      	it	cc
 801487c:	2200      	movcc	r2, #0
 801487e:	4413      	add	r3, r2
 8014880:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014884:	b17a      	cbz	r2, 80148a6 <__mdiff+0x106>
 8014886:	6107      	str	r7, [r0, #16]
 8014888:	e7a4      	b.n	80147d4 <__mdiff+0x34>
 801488a:	f856 8b04 	ldr.w	r8, [r6], #4
 801488e:	fa11 f288 	uxtah	r2, r1, r8
 8014892:	1414      	asrs	r4, r2, #16
 8014894:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014898:	b292      	uxth	r2, r2
 801489a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801489e:	f84e 2b04 	str.w	r2, [lr], #4
 80148a2:	1421      	asrs	r1, r4, #16
 80148a4:	e7e0      	b.n	8014868 <__mdiff+0xc8>
 80148a6:	3f01      	subs	r7, #1
 80148a8:	e7ea      	b.n	8014880 <__mdiff+0xe0>
 80148aa:	bf00      	nop
 80148ac:	08015988 	.word	0x08015988
 80148b0:	08015999 	.word	0x08015999

080148b4 <__d2b>:
 80148b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80148b8:	460f      	mov	r7, r1
 80148ba:	2101      	movs	r1, #1
 80148bc:	ec59 8b10 	vmov	r8, r9, d0
 80148c0:	4616      	mov	r6, r2
 80148c2:	f7ff fcd5 	bl	8014270 <_Balloc>
 80148c6:	4604      	mov	r4, r0
 80148c8:	b930      	cbnz	r0, 80148d8 <__d2b+0x24>
 80148ca:	4602      	mov	r2, r0
 80148cc:	4b24      	ldr	r3, [pc, #144]	; (8014960 <__d2b+0xac>)
 80148ce:	4825      	ldr	r0, [pc, #148]	; (8014964 <__d2b+0xb0>)
 80148d0:	f240 310f 	movw	r1, #783	; 0x30f
 80148d4:	f000 fb02 	bl	8014edc <__assert_func>
 80148d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80148dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80148e0:	bb2d      	cbnz	r5, 801492e <__d2b+0x7a>
 80148e2:	9301      	str	r3, [sp, #4]
 80148e4:	f1b8 0300 	subs.w	r3, r8, #0
 80148e8:	d026      	beq.n	8014938 <__d2b+0x84>
 80148ea:	4668      	mov	r0, sp
 80148ec:	9300      	str	r3, [sp, #0]
 80148ee:	f7ff fd87 	bl	8014400 <__lo0bits>
 80148f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80148f6:	b1e8      	cbz	r0, 8014934 <__d2b+0x80>
 80148f8:	f1c0 0320 	rsb	r3, r0, #32
 80148fc:	fa02 f303 	lsl.w	r3, r2, r3
 8014900:	430b      	orrs	r3, r1
 8014902:	40c2      	lsrs	r2, r0
 8014904:	6163      	str	r3, [r4, #20]
 8014906:	9201      	str	r2, [sp, #4]
 8014908:	9b01      	ldr	r3, [sp, #4]
 801490a:	61a3      	str	r3, [r4, #24]
 801490c:	2b00      	cmp	r3, #0
 801490e:	bf14      	ite	ne
 8014910:	2202      	movne	r2, #2
 8014912:	2201      	moveq	r2, #1
 8014914:	6122      	str	r2, [r4, #16]
 8014916:	b1bd      	cbz	r5, 8014948 <__d2b+0x94>
 8014918:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801491c:	4405      	add	r5, r0
 801491e:	603d      	str	r5, [r7, #0]
 8014920:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014924:	6030      	str	r0, [r6, #0]
 8014926:	4620      	mov	r0, r4
 8014928:	b003      	add	sp, #12
 801492a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801492e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014932:	e7d6      	b.n	80148e2 <__d2b+0x2e>
 8014934:	6161      	str	r1, [r4, #20]
 8014936:	e7e7      	b.n	8014908 <__d2b+0x54>
 8014938:	a801      	add	r0, sp, #4
 801493a:	f7ff fd61 	bl	8014400 <__lo0bits>
 801493e:	9b01      	ldr	r3, [sp, #4]
 8014940:	6163      	str	r3, [r4, #20]
 8014942:	3020      	adds	r0, #32
 8014944:	2201      	movs	r2, #1
 8014946:	e7e5      	b.n	8014914 <__d2b+0x60>
 8014948:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801494c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014950:	6038      	str	r0, [r7, #0]
 8014952:	6918      	ldr	r0, [r3, #16]
 8014954:	f7ff fd34 	bl	80143c0 <__hi0bits>
 8014958:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801495c:	e7e2      	b.n	8014924 <__d2b+0x70>
 801495e:	bf00      	nop
 8014960:	08015988 	.word	0x08015988
 8014964:	08015999 	.word	0x08015999

08014968 <__sfputc_r>:
 8014968:	6893      	ldr	r3, [r2, #8]
 801496a:	3b01      	subs	r3, #1
 801496c:	2b00      	cmp	r3, #0
 801496e:	b410      	push	{r4}
 8014970:	6093      	str	r3, [r2, #8]
 8014972:	da08      	bge.n	8014986 <__sfputc_r+0x1e>
 8014974:	6994      	ldr	r4, [r2, #24]
 8014976:	42a3      	cmp	r3, r4
 8014978:	db01      	blt.n	801497e <__sfputc_r+0x16>
 801497a:	290a      	cmp	r1, #10
 801497c:	d103      	bne.n	8014986 <__sfputc_r+0x1e>
 801497e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014982:	f7fe bc06 	b.w	8013192 <__swbuf_r>
 8014986:	6813      	ldr	r3, [r2, #0]
 8014988:	1c58      	adds	r0, r3, #1
 801498a:	6010      	str	r0, [r2, #0]
 801498c:	7019      	strb	r1, [r3, #0]
 801498e:	4608      	mov	r0, r1
 8014990:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014994:	4770      	bx	lr

08014996 <__sfputs_r>:
 8014996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014998:	4606      	mov	r6, r0
 801499a:	460f      	mov	r7, r1
 801499c:	4614      	mov	r4, r2
 801499e:	18d5      	adds	r5, r2, r3
 80149a0:	42ac      	cmp	r4, r5
 80149a2:	d101      	bne.n	80149a8 <__sfputs_r+0x12>
 80149a4:	2000      	movs	r0, #0
 80149a6:	e007      	b.n	80149b8 <__sfputs_r+0x22>
 80149a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149ac:	463a      	mov	r2, r7
 80149ae:	4630      	mov	r0, r6
 80149b0:	f7ff ffda 	bl	8014968 <__sfputc_r>
 80149b4:	1c43      	adds	r3, r0, #1
 80149b6:	d1f3      	bne.n	80149a0 <__sfputs_r+0xa>
 80149b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080149bc <_vfiprintf_r>:
 80149bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149c0:	460d      	mov	r5, r1
 80149c2:	b09d      	sub	sp, #116	; 0x74
 80149c4:	4614      	mov	r4, r2
 80149c6:	4698      	mov	r8, r3
 80149c8:	4606      	mov	r6, r0
 80149ca:	b118      	cbz	r0, 80149d4 <_vfiprintf_r+0x18>
 80149cc:	6a03      	ldr	r3, [r0, #32]
 80149ce:	b90b      	cbnz	r3, 80149d4 <_vfiprintf_r+0x18>
 80149d0:	f7fe faf0 	bl	8012fb4 <__sinit>
 80149d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80149d6:	07d9      	lsls	r1, r3, #31
 80149d8:	d405      	bmi.n	80149e6 <_vfiprintf_r+0x2a>
 80149da:	89ab      	ldrh	r3, [r5, #12]
 80149dc:	059a      	lsls	r2, r3, #22
 80149de:	d402      	bmi.n	80149e6 <_vfiprintf_r+0x2a>
 80149e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80149e2:	f7fe fd3e 	bl	8013462 <__retarget_lock_acquire_recursive>
 80149e6:	89ab      	ldrh	r3, [r5, #12]
 80149e8:	071b      	lsls	r3, r3, #28
 80149ea:	d501      	bpl.n	80149f0 <_vfiprintf_r+0x34>
 80149ec:	692b      	ldr	r3, [r5, #16]
 80149ee:	b99b      	cbnz	r3, 8014a18 <_vfiprintf_r+0x5c>
 80149f0:	4629      	mov	r1, r5
 80149f2:	4630      	mov	r0, r6
 80149f4:	f7fe fc0a 	bl	801320c <__swsetup_r>
 80149f8:	b170      	cbz	r0, 8014a18 <_vfiprintf_r+0x5c>
 80149fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80149fc:	07dc      	lsls	r4, r3, #31
 80149fe:	d504      	bpl.n	8014a0a <_vfiprintf_r+0x4e>
 8014a00:	f04f 30ff 	mov.w	r0, #4294967295
 8014a04:	b01d      	add	sp, #116	; 0x74
 8014a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a0a:	89ab      	ldrh	r3, [r5, #12]
 8014a0c:	0598      	lsls	r0, r3, #22
 8014a0e:	d4f7      	bmi.n	8014a00 <_vfiprintf_r+0x44>
 8014a10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a12:	f7fe fd27 	bl	8013464 <__retarget_lock_release_recursive>
 8014a16:	e7f3      	b.n	8014a00 <_vfiprintf_r+0x44>
 8014a18:	2300      	movs	r3, #0
 8014a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8014a1c:	2320      	movs	r3, #32
 8014a1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014a22:	f8cd 800c 	str.w	r8, [sp, #12]
 8014a26:	2330      	movs	r3, #48	; 0x30
 8014a28:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014bdc <_vfiprintf_r+0x220>
 8014a2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014a30:	f04f 0901 	mov.w	r9, #1
 8014a34:	4623      	mov	r3, r4
 8014a36:	469a      	mov	sl, r3
 8014a38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a3c:	b10a      	cbz	r2, 8014a42 <_vfiprintf_r+0x86>
 8014a3e:	2a25      	cmp	r2, #37	; 0x25
 8014a40:	d1f9      	bne.n	8014a36 <_vfiprintf_r+0x7a>
 8014a42:	ebba 0b04 	subs.w	fp, sl, r4
 8014a46:	d00b      	beq.n	8014a60 <_vfiprintf_r+0xa4>
 8014a48:	465b      	mov	r3, fp
 8014a4a:	4622      	mov	r2, r4
 8014a4c:	4629      	mov	r1, r5
 8014a4e:	4630      	mov	r0, r6
 8014a50:	f7ff ffa1 	bl	8014996 <__sfputs_r>
 8014a54:	3001      	adds	r0, #1
 8014a56:	f000 80a9 	beq.w	8014bac <_vfiprintf_r+0x1f0>
 8014a5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a5c:	445a      	add	r2, fp
 8014a5e:	9209      	str	r2, [sp, #36]	; 0x24
 8014a60:	f89a 3000 	ldrb.w	r3, [sl]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	f000 80a1 	beq.w	8014bac <_vfiprintf_r+0x1f0>
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8014a70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a74:	f10a 0a01 	add.w	sl, sl, #1
 8014a78:	9304      	str	r3, [sp, #16]
 8014a7a:	9307      	str	r3, [sp, #28]
 8014a7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014a80:	931a      	str	r3, [sp, #104]	; 0x68
 8014a82:	4654      	mov	r4, sl
 8014a84:	2205      	movs	r2, #5
 8014a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a8a:	4854      	ldr	r0, [pc, #336]	; (8014bdc <_vfiprintf_r+0x220>)
 8014a8c:	f7eb fc40 	bl	8000310 <memchr>
 8014a90:	9a04      	ldr	r2, [sp, #16]
 8014a92:	b9d8      	cbnz	r0, 8014acc <_vfiprintf_r+0x110>
 8014a94:	06d1      	lsls	r1, r2, #27
 8014a96:	bf44      	itt	mi
 8014a98:	2320      	movmi	r3, #32
 8014a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a9e:	0713      	lsls	r3, r2, #28
 8014aa0:	bf44      	itt	mi
 8014aa2:	232b      	movmi	r3, #43	; 0x2b
 8014aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8014aac:	2b2a      	cmp	r3, #42	; 0x2a
 8014aae:	d015      	beq.n	8014adc <_vfiprintf_r+0x120>
 8014ab0:	9a07      	ldr	r2, [sp, #28]
 8014ab2:	4654      	mov	r4, sl
 8014ab4:	2000      	movs	r0, #0
 8014ab6:	f04f 0c0a 	mov.w	ip, #10
 8014aba:	4621      	mov	r1, r4
 8014abc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014ac0:	3b30      	subs	r3, #48	; 0x30
 8014ac2:	2b09      	cmp	r3, #9
 8014ac4:	d94d      	bls.n	8014b62 <_vfiprintf_r+0x1a6>
 8014ac6:	b1b0      	cbz	r0, 8014af6 <_vfiprintf_r+0x13a>
 8014ac8:	9207      	str	r2, [sp, #28]
 8014aca:	e014      	b.n	8014af6 <_vfiprintf_r+0x13a>
 8014acc:	eba0 0308 	sub.w	r3, r0, r8
 8014ad0:	fa09 f303 	lsl.w	r3, r9, r3
 8014ad4:	4313      	orrs	r3, r2
 8014ad6:	9304      	str	r3, [sp, #16]
 8014ad8:	46a2      	mov	sl, r4
 8014ada:	e7d2      	b.n	8014a82 <_vfiprintf_r+0xc6>
 8014adc:	9b03      	ldr	r3, [sp, #12]
 8014ade:	1d19      	adds	r1, r3, #4
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	9103      	str	r1, [sp, #12]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	bfbb      	ittet	lt
 8014ae8:	425b      	neglt	r3, r3
 8014aea:	f042 0202 	orrlt.w	r2, r2, #2
 8014aee:	9307      	strge	r3, [sp, #28]
 8014af0:	9307      	strlt	r3, [sp, #28]
 8014af2:	bfb8      	it	lt
 8014af4:	9204      	strlt	r2, [sp, #16]
 8014af6:	7823      	ldrb	r3, [r4, #0]
 8014af8:	2b2e      	cmp	r3, #46	; 0x2e
 8014afa:	d10c      	bne.n	8014b16 <_vfiprintf_r+0x15a>
 8014afc:	7863      	ldrb	r3, [r4, #1]
 8014afe:	2b2a      	cmp	r3, #42	; 0x2a
 8014b00:	d134      	bne.n	8014b6c <_vfiprintf_r+0x1b0>
 8014b02:	9b03      	ldr	r3, [sp, #12]
 8014b04:	1d1a      	adds	r2, r3, #4
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	9203      	str	r2, [sp, #12]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	bfb8      	it	lt
 8014b0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014b12:	3402      	adds	r4, #2
 8014b14:	9305      	str	r3, [sp, #20]
 8014b16:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014bec <_vfiprintf_r+0x230>
 8014b1a:	7821      	ldrb	r1, [r4, #0]
 8014b1c:	2203      	movs	r2, #3
 8014b1e:	4650      	mov	r0, sl
 8014b20:	f7eb fbf6 	bl	8000310 <memchr>
 8014b24:	b138      	cbz	r0, 8014b36 <_vfiprintf_r+0x17a>
 8014b26:	9b04      	ldr	r3, [sp, #16]
 8014b28:	eba0 000a 	sub.w	r0, r0, sl
 8014b2c:	2240      	movs	r2, #64	; 0x40
 8014b2e:	4082      	lsls	r2, r0
 8014b30:	4313      	orrs	r3, r2
 8014b32:	3401      	adds	r4, #1
 8014b34:	9304      	str	r3, [sp, #16]
 8014b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b3a:	4829      	ldr	r0, [pc, #164]	; (8014be0 <_vfiprintf_r+0x224>)
 8014b3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014b40:	2206      	movs	r2, #6
 8014b42:	f7eb fbe5 	bl	8000310 <memchr>
 8014b46:	2800      	cmp	r0, #0
 8014b48:	d03f      	beq.n	8014bca <_vfiprintf_r+0x20e>
 8014b4a:	4b26      	ldr	r3, [pc, #152]	; (8014be4 <_vfiprintf_r+0x228>)
 8014b4c:	bb1b      	cbnz	r3, 8014b96 <_vfiprintf_r+0x1da>
 8014b4e:	9b03      	ldr	r3, [sp, #12]
 8014b50:	3307      	adds	r3, #7
 8014b52:	f023 0307 	bic.w	r3, r3, #7
 8014b56:	3308      	adds	r3, #8
 8014b58:	9303      	str	r3, [sp, #12]
 8014b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b5c:	443b      	add	r3, r7
 8014b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8014b60:	e768      	b.n	8014a34 <_vfiprintf_r+0x78>
 8014b62:	fb0c 3202 	mla	r2, ip, r2, r3
 8014b66:	460c      	mov	r4, r1
 8014b68:	2001      	movs	r0, #1
 8014b6a:	e7a6      	b.n	8014aba <_vfiprintf_r+0xfe>
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	3401      	adds	r4, #1
 8014b70:	9305      	str	r3, [sp, #20]
 8014b72:	4619      	mov	r1, r3
 8014b74:	f04f 0c0a 	mov.w	ip, #10
 8014b78:	4620      	mov	r0, r4
 8014b7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b7e:	3a30      	subs	r2, #48	; 0x30
 8014b80:	2a09      	cmp	r2, #9
 8014b82:	d903      	bls.n	8014b8c <_vfiprintf_r+0x1d0>
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d0c6      	beq.n	8014b16 <_vfiprintf_r+0x15a>
 8014b88:	9105      	str	r1, [sp, #20]
 8014b8a:	e7c4      	b.n	8014b16 <_vfiprintf_r+0x15a>
 8014b8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014b90:	4604      	mov	r4, r0
 8014b92:	2301      	movs	r3, #1
 8014b94:	e7f0      	b.n	8014b78 <_vfiprintf_r+0x1bc>
 8014b96:	ab03      	add	r3, sp, #12
 8014b98:	9300      	str	r3, [sp, #0]
 8014b9a:	462a      	mov	r2, r5
 8014b9c:	4b12      	ldr	r3, [pc, #72]	; (8014be8 <_vfiprintf_r+0x22c>)
 8014b9e:	a904      	add	r1, sp, #16
 8014ba0:	4630      	mov	r0, r6
 8014ba2:	f7fd fdd1 	bl	8012748 <_printf_float>
 8014ba6:	4607      	mov	r7, r0
 8014ba8:	1c78      	adds	r0, r7, #1
 8014baa:	d1d6      	bne.n	8014b5a <_vfiprintf_r+0x19e>
 8014bac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014bae:	07d9      	lsls	r1, r3, #31
 8014bb0:	d405      	bmi.n	8014bbe <_vfiprintf_r+0x202>
 8014bb2:	89ab      	ldrh	r3, [r5, #12]
 8014bb4:	059a      	lsls	r2, r3, #22
 8014bb6:	d402      	bmi.n	8014bbe <_vfiprintf_r+0x202>
 8014bb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014bba:	f7fe fc53 	bl	8013464 <__retarget_lock_release_recursive>
 8014bbe:	89ab      	ldrh	r3, [r5, #12]
 8014bc0:	065b      	lsls	r3, r3, #25
 8014bc2:	f53f af1d 	bmi.w	8014a00 <_vfiprintf_r+0x44>
 8014bc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014bc8:	e71c      	b.n	8014a04 <_vfiprintf_r+0x48>
 8014bca:	ab03      	add	r3, sp, #12
 8014bcc:	9300      	str	r3, [sp, #0]
 8014bce:	462a      	mov	r2, r5
 8014bd0:	4b05      	ldr	r3, [pc, #20]	; (8014be8 <_vfiprintf_r+0x22c>)
 8014bd2:	a904      	add	r1, sp, #16
 8014bd4:	4630      	mov	r0, r6
 8014bd6:	f7fe f83f 	bl	8012c58 <_printf_i>
 8014bda:	e7e4      	b.n	8014ba6 <_vfiprintf_r+0x1ea>
 8014bdc:	08015af4 	.word	0x08015af4
 8014be0:	08015afe 	.word	0x08015afe
 8014be4:	08012749 	.word	0x08012749
 8014be8:	08014997 	.word	0x08014997
 8014bec:	08015afa 	.word	0x08015afa

08014bf0 <__sflush_r>:
 8014bf0:	898a      	ldrh	r2, [r1, #12]
 8014bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bf6:	4605      	mov	r5, r0
 8014bf8:	0710      	lsls	r0, r2, #28
 8014bfa:	460c      	mov	r4, r1
 8014bfc:	d458      	bmi.n	8014cb0 <__sflush_r+0xc0>
 8014bfe:	684b      	ldr	r3, [r1, #4]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	dc05      	bgt.n	8014c10 <__sflush_r+0x20>
 8014c04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	dc02      	bgt.n	8014c10 <__sflush_r+0x20>
 8014c0a:	2000      	movs	r0, #0
 8014c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014c12:	2e00      	cmp	r6, #0
 8014c14:	d0f9      	beq.n	8014c0a <__sflush_r+0x1a>
 8014c16:	2300      	movs	r3, #0
 8014c18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014c1c:	682f      	ldr	r7, [r5, #0]
 8014c1e:	6a21      	ldr	r1, [r4, #32]
 8014c20:	602b      	str	r3, [r5, #0]
 8014c22:	d032      	beq.n	8014c8a <__sflush_r+0x9a>
 8014c24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014c26:	89a3      	ldrh	r3, [r4, #12]
 8014c28:	075a      	lsls	r2, r3, #29
 8014c2a:	d505      	bpl.n	8014c38 <__sflush_r+0x48>
 8014c2c:	6863      	ldr	r3, [r4, #4]
 8014c2e:	1ac0      	subs	r0, r0, r3
 8014c30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014c32:	b10b      	cbz	r3, 8014c38 <__sflush_r+0x48>
 8014c34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014c36:	1ac0      	subs	r0, r0, r3
 8014c38:	2300      	movs	r3, #0
 8014c3a:	4602      	mov	r2, r0
 8014c3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014c3e:	6a21      	ldr	r1, [r4, #32]
 8014c40:	4628      	mov	r0, r5
 8014c42:	47b0      	blx	r6
 8014c44:	1c43      	adds	r3, r0, #1
 8014c46:	89a3      	ldrh	r3, [r4, #12]
 8014c48:	d106      	bne.n	8014c58 <__sflush_r+0x68>
 8014c4a:	6829      	ldr	r1, [r5, #0]
 8014c4c:	291d      	cmp	r1, #29
 8014c4e:	d82b      	bhi.n	8014ca8 <__sflush_r+0xb8>
 8014c50:	4a29      	ldr	r2, [pc, #164]	; (8014cf8 <__sflush_r+0x108>)
 8014c52:	410a      	asrs	r2, r1
 8014c54:	07d6      	lsls	r6, r2, #31
 8014c56:	d427      	bmi.n	8014ca8 <__sflush_r+0xb8>
 8014c58:	2200      	movs	r2, #0
 8014c5a:	6062      	str	r2, [r4, #4]
 8014c5c:	04d9      	lsls	r1, r3, #19
 8014c5e:	6922      	ldr	r2, [r4, #16]
 8014c60:	6022      	str	r2, [r4, #0]
 8014c62:	d504      	bpl.n	8014c6e <__sflush_r+0x7e>
 8014c64:	1c42      	adds	r2, r0, #1
 8014c66:	d101      	bne.n	8014c6c <__sflush_r+0x7c>
 8014c68:	682b      	ldr	r3, [r5, #0]
 8014c6a:	b903      	cbnz	r3, 8014c6e <__sflush_r+0x7e>
 8014c6c:	6560      	str	r0, [r4, #84]	; 0x54
 8014c6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014c70:	602f      	str	r7, [r5, #0]
 8014c72:	2900      	cmp	r1, #0
 8014c74:	d0c9      	beq.n	8014c0a <__sflush_r+0x1a>
 8014c76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014c7a:	4299      	cmp	r1, r3
 8014c7c:	d002      	beq.n	8014c84 <__sflush_r+0x94>
 8014c7e:	4628      	mov	r0, r5
 8014c80:	f7ff f9f6 	bl	8014070 <_free_r>
 8014c84:	2000      	movs	r0, #0
 8014c86:	6360      	str	r0, [r4, #52]	; 0x34
 8014c88:	e7c0      	b.n	8014c0c <__sflush_r+0x1c>
 8014c8a:	2301      	movs	r3, #1
 8014c8c:	4628      	mov	r0, r5
 8014c8e:	47b0      	blx	r6
 8014c90:	1c41      	adds	r1, r0, #1
 8014c92:	d1c8      	bne.n	8014c26 <__sflush_r+0x36>
 8014c94:	682b      	ldr	r3, [r5, #0]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d0c5      	beq.n	8014c26 <__sflush_r+0x36>
 8014c9a:	2b1d      	cmp	r3, #29
 8014c9c:	d001      	beq.n	8014ca2 <__sflush_r+0xb2>
 8014c9e:	2b16      	cmp	r3, #22
 8014ca0:	d101      	bne.n	8014ca6 <__sflush_r+0xb6>
 8014ca2:	602f      	str	r7, [r5, #0]
 8014ca4:	e7b1      	b.n	8014c0a <__sflush_r+0x1a>
 8014ca6:	89a3      	ldrh	r3, [r4, #12]
 8014ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014cac:	81a3      	strh	r3, [r4, #12]
 8014cae:	e7ad      	b.n	8014c0c <__sflush_r+0x1c>
 8014cb0:	690f      	ldr	r7, [r1, #16]
 8014cb2:	2f00      	cmp	r7, #0
 8014cb4:	d0a9      	beq.n	8014c0a <__sflush_r+0x1a>
 8014cb6:	0793      	lsls	r3, r2, #30
 8014cb8:	680e      	ldr	r6, [r1, #0]
 8014cba:	bf08      	it	eq
 8014cbc:	694b      	ldreq	r3, [r1, #20]
 8014cbe:	600f      	str	r7, [r1, #0]
 8014cc0:	bf18      	it	ne
 8014cc2:	2300      	movne	r3, #0
 8014cc4:	eba6 0807 	sub.w	r8, r6, r7
 8014cc8:	608b      	str	r3, [r1, #8]
 8014cca:	f1b8 0f00 	cmp.w	r8, #0
 8014cce:	dd9c      	ble.n	8014c0a <__sflush_r+0x1a>
 8014cd0:	6a21      	ldr	r1, [r4, #32]
 8014cd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014cd4:	4643      	mov	r3, r8
 8014cd6:	463a      	mov	r2, r7
 8014cd8:	4628      	mov	r0, r5
 8014cda:	47b0      	blx	r6
 8014cdc:	2800      	cmp	r0, #0
 8014cde:	dc06      	bgt.n	8014cee <__sflush_r+0xfe>
 8014ce0:	89a3      	ldrh	r3, [r4, #12]
 8014ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ce6:	81a3      	strh	r3, [r4, #12]
 8014ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8014cec:	e78e      	b.n	8014c0c <__sflush_r+0x1c>
 8014cee:	4407      	add	r7, r0
 8014cf0:	eba8 0800 	sub.w	r8, r8, r0
 8014cf4:	e7e9      	b.n	8014cca <__sflush_r+0xda>
 8014cf6:	bf00      	nop
 8014cf8:	dfbffffe 	.word	0xdfbffffe

08014cfc <_fflush_r>:
 8014cfc:	b538      	push	{r3, r4, r5, lr}
 8014cfe:	690b      	ldr	r3, [r1, #16]
 8014d00:	4605      	mov	r5, r0
 8014d02:	460c      	mov	r4, r1
 8014d04:	b913      	cbnz	r3, 8014d0c <_fflush_r+0x10>
 8014d06:	2500      	movs	r5, #0
 8014d08:	4628      	mov	r0, r5
 8014d0a:	bd38      	pop	{r3, r4, r5, pc}
 8014d0c:	b118      	cbz	r0, 8014d16 <_fflush_r+0x1a>
 8014d0e:	6a03      	ldr	r3, [r0, #32]
 8014d10:	b90b      	cbnz	r3, 8014d16 <_fflush_r+0x1a>
 8014d12:	f7fe f94f 	bl	8012fb4 <__sinit>
 8014d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d0f3      	beq.n	8014d06 <_fflush_r+0xa>
 8014d1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014d20:	07d0      	lsls	r0, r2, #31
 8014d22:	d404      	bmi.n	8014d2e <_fflush_r+0x32>
 8014d24:	0599      	lsls	r1, r3, #22
 8014d26:	d402      	bmi.n	8014d2e <_fflush_r+0x32>
 8014d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014d2a:	f7fe fb9a 	bl	8013462 <__retarget_lock_acquire_recursive>
 8014d2e:	4628      	mov	r0, r5
 8014d30:	4621      	mov	r1, r4
 8014d32:	f7ff ff5d 	bl	8014bf0 <__sflush_r>
 8014d36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014d38:	07da      	lsls	r2, r3, #31
 8014d3a:	4605      	mov	r5, r0
 8014d3c:	d4e4      	bmi.n	8014d08 <_fflush_r+0xc>
 8014d3e:	89a3      	ldrh	r3, [r4, #12]
 8014d40:	059b      	lsls	r3, r3, #22
 8014d42:	d4e1      	bmi.n	8014d08 <_fflush_r+0xc>
 8014d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014d46:	f7fe fb8d 	bl	8013464 <__retarget_lock_release_recursive>
 8014d4a:	e7dd      	b.n	8014d08 <_fflush_r+0xc>

08014d4c <__swhatbuf_r>:
 8014d4c:	b570      	push	{r4, r5, r6, lr}
 8014d4e:	460c      	mov	r4, r1
 8014d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d54:	2900      	cmp	r1, #0
 8014d56:	b096      	sub	sp, #88	; 0x58
 8014d58:	4615      	mov	r5, r2
 8014d5a:	461e      	mov	r6, r3
 8014d5c:	da0d      	bge.n	8014d7a <__swhatbuf_r+0x2e>
 8014d5e:	89a3      	ldrh	r3, [r4, #12]
 8014d60:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014d64:	f04f 0100 	mov.w	r1, #0
 8014d68:	bf0c      	ite	eq
 8014d6a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014d6e:	2340      	movne	r3, #64	; 0x40
 8014d70:	2000      	movs	r0, #0
 8014d72:	6031      	str	r1, [r6, #0]
 8014d74:	602b      	str	r3, [r5, #0]
 8014d76:	b016      	add	sp, #88	; 0x58
 8014d78:	bd70      	pop	{r4, r5, r6, pc}
 8014d7a:	466a      	mov	r2, sp
 8014d7c:	f000 f87c 	bl	8014e78 <_fstat_r>
 8014d80:	2800      	cmp	r0, #0
 8014d82:	dbec      	blt.n	8014d5e <__swhatbuf_r+0x12>
 8014d84:	9901      	ldr	r1, [sp, #4]
 8014d86:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014d8a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8014d8e:	4259      	negs	r1, r3
 8014d90:	4159      	adcs	r1, r3
 8014d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014d96:	e7eb      	b.n	8014d70 <__swhatbuf_r+0x24>

08014d98 <__smakebuf_r>:
 8014d98:	898b      	ldrh	r3, [r1, #12]
 8014d9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014d9c:	079d      	lsls	r5, r3, #30
 8014d9e:	4606      	mov	r6, r0
 8014da0:	460c      	mov	r4, r1
 8014da2:	d507      	bpl.n	8014db4 <__smakebuf_r+0x1c>
 8014da4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014da8:	6023      	str	r3, [r4, #0]
 8014daa:	6123      	str	r3, [r4, #16]
 8014dac:	2301      	movs	r3, #1
 8014dae:	6163      	str	r3, [r4, #20]
 8014db0:	b002      	add	sp, #8
 8014db2:	bd70      	pop	{r4, r5, r6, pc}
 8014db4:	ab01      	add	r3, sp, #4
 8014db6:	466a      	mov	r2, sp
 8014db8:	f7ff ffc8 	bl	8014d4c <__swhatbuf_r>
 8014dbc:	9900      	ldr	r1, [sp, #0]
 8014dbe:	4605      	mov	r5, r0
 8014dc0:	4630      	mov	r0, r6
 8014dc2:	f7ff f9c9 	bl	8014158 <_malloc_r>
 8014dc6:	b948      	cbnz	r0, 8014ddc <__smakebuf_r+0x44>
 8014dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014dcc:	059a      	lsls	r2, r3, #22
 8014dce:	d4ef      	bmi.n	8014db0 <__smakebuf_r+0x18>
 8014dd0:	f023 0303 	bic.w	r3, r3, #3
 8014dd4:	f043 0302 	orr.w	r3, r3, #2
 8014dd8:	81a3      	strh	r3, [r4, #12]
 8014dda:	e7e3      	b.n	8014da4 <__smakebuf_r+0xc>
 8014ddc:	89a3      	ldrh	r3, [r4, #12]
 8014dde:	6020      	str	r0, [r4, #0]
 8014de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014de4:	81a3      	strh	r3, [r4, #12]
 8014de6:	9b00      	ldr	r3, [sp, #0]
 8014de8:	6163      	str	r3, [r4, #20]
 8014dea:	9b01      	ldr	r3, [sp, #4]
 8014dec:	6120      	str	r0, [r4, #16]
 8014dee:	b15b      	cbz	r3, 8014e08 <__smakebuf_r+0x70>
 8014df0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014df4:	4630      	mov	r0, r6
 8014df6:	f000 f851 	bl	8014e9c <_isatty_r>
 8014dfa:	b128      	cbz	r0, 8014e08 <__smakebuf_r+0x70>
 8014dfc:	89a3      	ldrh	r3, [r4, #12]
 8014dfe:	f023 0303 	bic.w	r3, r3, #3
 8014e02:	f043 0301 	orr.w	r3, r3, #1
 8014e06:	81a3      	strh	r3, [r4, #12]
 8014e08:	89a3      	ldrh	r3, [r4, #12]
 8014e0a:	431d      	orrs	r5, r3
 8014e0c:	81a5      	strh	r5, [r4, #12]
 8014e0e:	e7cf      	b.n	8014db0 <__smakebuf_r+0x18>

08014e10 <_putc_r>:
 8014e10:	b570      	push	{r4, r5, r6, lr}
 8014e12:	460d      	mov	r5, r1
 8014e14:	4614      	mov	r4, r2
 8014e16:	4606      	mov	r6, r0
 8014e18:	b118      	cbz	r0, 8014e22 <_putc_r+0x12>
 8014e1a:	6a03      	ldr	r3, [r0, #32]
 8014e1c:	b90b      	cbnz	r3, 8014e22 <_putc_r+0x12>
 8014e1e:	f7fe f8c9 	bl	8012fb4 <__sinit>
 8014e22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014e24:	07d8      	lsls	r0, r3, #31
 8014e26:	d405      	bmi.n	8014e34 <_putc_r+0x24>
 8014e28:	89a3      	ldrh	r3, [r4, #12]
 8014e2a:	0599      	lsls	r1, r3, #22
 8014e2c:	d402      	bmi.n	8014e34 <_putc_r+0x24>
 8014e2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014e30:	f7fe fb17 	bl	8013462 <__retarget_lock_acquire_recursive>
 8014e34:	68a3      	ldr	r3, [r4, #8]
 8014e36:	3b01      	subs	r3, #1
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	60a3      	str	r3, [r4, #8]
 8014e3c:	da05      	bge.n	8014e4a <_putc_r+0x3a>
 8014e3e:	69a2      	ldr	r2, [r4, #24]
 8014e40:	4293      	cmp	r3, r2
 8014e42:	db12      	blt.n	8014e6a <_putc_r+0x5a>
 8014e44:	b2eb      	uxtb	r3, r5
 8014e46:	2b0a      	cmp	r3, #10
 8014e48:	d00f      	beq.n	8014e6a <_putc_r+0x5a>
 8014e4a:	6823      	ldr	r3, [r4, #0]
 8014e4c:	1c5a      	adds	r2, r3, #1
 8014e4e:	6022      	str	r2, [r4, #0]
 8014e50:	701d      	strb	r5, [r3, #0]
 8014e52:	b2ed      	uxtb	r5, r5
 8014e54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014e56:	07da      	lsls	r2, r3, #31
 8014e58:	d405      	bmi.n	8014e66 <_putc_r+0x56>
 8014e5a:	89a3      	ldrh	r3, [r4, #12]
 8014e5c:	059b      	lsls	r3, r3, #22
 8014e5e:	d402      	bmi.n	8014e66 <_putc_r+0x56>
 8014e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014e62:	f7fe faff 	bl	8013464 <__retarget_lock_release_recursive>
 8014e66:	4628      	mov	r0, r5
 8014e68:	bd70      	pop	{r4, r5, r6, pc}
 8014e6a:	4629      	mov	r1, r5
 8014e6c:	4622      	mov	r2, r4
 8014e6e:	4630      	mov	r0, r6
 8014e70:	f7fe f98f 	bl	8013192 <__swbuf_r>
 8014e74:	4605      	mov	r5, r0
 8014e76:	e7ed      	b.n	8014e54 <_putc_r+0x44>

08014e78 <_fstat_r>:
 8014e78:	b538      	push	{r3, r4, r5, lr}
 8014e7a:	4d07      	ldr	r5, [pc, #28]	; (8014e98 <_fstat_r+0x20>)
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	4604      	mov	r4, r0
 8014e80:	4608      	mov	r0, r1
 8014e82:	4611      	mov	r1, r2
 8014e84:	602b      	str	r3, [r5, #0]
 8014e86:	f7ec fcc4 	bl	8001812 <_fstat>
 8014e8a:	1c43      	adds	r3, r0, #1
 8014e8c:	d102      	bne.n	8014e94 <_fstat_r+0x1c>
 8014e8e:	682b      	ldr	r3, [r5, #0]
 8014e90:	b103      	cbz	r3, 8014e94 <_fstat_r+0x1c>
 8014e92:	6023      	str	r3, [r4, #0]
 8014e94:	bd38      	pop	{r3, r4, r5, pc}
 8014e96:	bf00      	nop
 8014e98:	24010cd4 	.word	0x24010cd4

08014e9c <_isatty_r>:
 8014e9c:	b538      	push	{r3, r4, r5, lr}
 8014e9e:	4d06      	ldr	r5, [pc, #24]	; (8014eb8 <_isatty_r+0x1c>)
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	4604      	mov	r4, r0
 8014ea4:	4608      	mov	r0, r1
 8014ea6:	602b      	str	r3, [r5, #0]
 8014ea8:	f7ec fcc3 	bl	8001832 <_isatty>
 8014eac:	1c43      	adds	r3, r0, #1
 8014eae:	d102      	bne.n	8014eb6 <_isatty_r+0x1a>
 8014eb0:	682b      	ldr	r3, [r5, #0]
 8014eb2:	b103      	cbz	r3, 8014eb6 <_isatty_r+0x1a>
 8014eb4:	6023      	str	r3, [r4, #0]
 8014eb6:	bd38      	pop	{r3, r4, r5, pc}
 8014eb8:	24010cd4 	.word	0x24010cd4

08014ebc <_sbrk_r>:
 8014ebc:	b538      	push	{r3, r4, r5, lr}
 8014ebe:	4d06      	ldr	r5, [pc, #24]	; (8014ed8 <_sbrk_r+0x1c>)
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	4604      	mov	r4, r0
 8014ec4:	4608      	mov	r0, r1
 8014ec6:	602b      	str	r3, [r5, #0]
 8014ec8:	f7ec fccc 	bl	8001864 <_sbrk>
 8014ecc:	1c43      	adds	r3, r0, #1
 8014ece:	d102      	bne.n	8014ed6 <_sbrk_r+0x1a>
 8014ed0:	682b      	ldr	r3, [r5, #0]
 8014ed2:	b103      	cbz	r3, 8014ed6 <_sbrk_r+0x1a>
 8014ed4:	6023      	str	r3, [r4, #0]
 8014ed6:	bd38      	pop	{r3, r4, r5, pc}
 8014ed8:	24010cd4 	.word	0x24010cd4

08014edc <__assert_func>:
 8014edc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014ede:	4614      	mov	r4, r2
 8014ee0:	461a      	mov	r2, r3
 8014ee2:	4b09      	ldr	r3, [pc, #36]	; (8014f08 <__assert_func+0x2c>)
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	4605      	mov	r5, r0
 8014ee8:	68d8      	ldr	r0, [r3, #12]
 8014eea:	b14c      	cbz	r4, 8014f00 <__assert_func+0x24>
 8014eec:	4b07      	ldr	r3, [pc, #28]	; (8014f0c <__assert_func+0x30>)
 8014eee:	9100      	str	r1, [sp, #0]
 8014ef0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014ef4:	4906      	ldr	r1, [pc, #24]	; (8014f10 <__assert_func+0x34>)
 8014ef6:	462b      	mov	r3, r5
 8014ef8:	f000 f844 	bl	8014f84 <fiprintf>
 8014efc:	f000 f854 	bl	8014fa8 <abort>
 8014f00:	4b04      	ldr	r3, [pc, #16]	; (8014f14 <__assert_func+0x38>)
 8014f02:	461c      	mov	r4, r3
 8014f04:	e7f3      	b.n	8014eee <__assert_func+0x12>
 8014f06:	bf00      	nop
 8014f08:	24000170 	.word	0x24000170
 8014f0c:	08015b0f 	.word	0x08015b0f
 8014f10:	08015b1c 	.word	0x08015b1c
 8014f14:	08015b4a 	.word	0x08015b4a

08014f18 <_calloc_r>:
 8014f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014f1a:	fba1 2402 	umull	r2, r4, r1, r2
 8014f1e:	b94c      	cbnz	r4, 8014f34 <_calloc_r+0x1c>
 8014f20:	4611      	mov	r1, r2
 8014f22:	9201      	str	r2, [sp, #4]
 8014f24:	f7ff f918 	bl	8014158 <_malloc_r>
 8014f28:	9a01      	ldr	r2, [sp, #4]
 8014f2a:	4605      	mov	r5, r0
 8014f2c:	b930      	cbnz	r0, 8014f3c <_calloc_r+0x24>
 8014f2e:	4628      	mov	r0, r5
 8014f30:	b003      	add	sp, #12
 8014f32:	bd30      	pop	{r4, r5, pc}
 8014f34:	220c      	movs	r2, #12
 8014f36:	6002      	str	r2, [r0, #0]
 8014f38:	2500      	movs	r5, #0
 8014f3a:	e7f8      	b.n	8014f2e <_calloc_r+0x16>
 8014f3c:	4621      	mov	r1, r4
 8014f3e:	f7fe f9bd 	bl	80132bc <memset>
 8014f42:	e7f4      	b.n	8014f2e <_calloc_r+0x16>

08014f44 <__ascii_mbtowc>:
 8014f44:	b082      	sub	sp, #8
 8014f46:	b901      	cbnz	r1, 8014f4a <__ascii_mbtowc+0x6>
 8014f48:	a901      	add	r1, sp, #4
 8014f4a:	b142      	cbz	r2, 8014f5e <__ascii_mbtowc+0x1a>
 8014f4c:	b14b      	cbz	r3, 8014f62 <__ascii_mbtowc+0x1e>
 8014f4e:	7813      	ldrb	r3, [r2, #0]
 8014f50:	600b      	str	r3, [r1, #0]
 8014f52:	7812      	ldrb	r2, [r2, #0]
 8014f54:	1e10      	subs	r0, r2, #0
 8014f56:	bf18      	it	ne
 8014f58:	2001      	movne	r0, #1
 8014f5a:	b002      	add	sp, #8
 8014f5c:	4770      	bx	lr
 8014f5e:	4610      	mov	r0, r2
 8014f60:	e7fb      	b.n	8014f5a <__ascii_mbtowc+0x16>
 8014f62:	f06f 0001 	mvn.w	r0, #1
 8014f66:	e7f8      	b.n	8014f5a <__ascii_mbtowc+0x16>

08014f68 <__ascii_wctomb>:
 8014f68:	b149      	cbz	r1, 8014f7e <__ascii_wctomb+0x16>
 8014f6a:	2aff      	cmp	r2, #255	; 0xff
 8014f6c:	bf85      	ittet	hi
 8014f6e:	238a      	movhi	r3, #138	; 0x8a
 8014f70:	6003      	strhi	r3, [r0, #0]
 8014f72:	700a      	strbls	r2, [r1, #0]
 8014f74:	f04f 30ff 	movhi.w	r0, #4294967295
 8014f78:	bf98      	it	ls
 8014f7a:	2001      	movls	r0, #1
 8014f7c:	4770      	bx	lr
 8014f7e:	4608      	mov	r0, r1
 8014f80:	4770      	bx	lr
	...

08014f84 <fiprintf>:
 8014f84:	b40e      	push	{r1, r2, r3}
 8014f86:	b503      	push	{r0, r1, lr}
 8014f88:	4601      	mov	r1, r0
 8014f8a:	ab03      	add	r3, sp, #12
 8014f8c:	4805      	ldr	r0, [pc, #20]	; (8014fa4 <fiprintf+0x20>)
 8014f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f92:	6800      	ldr	r0, [r0, #0]
 8014f94:	9301      	str	r3, [sp, #4]
 8014f96:	f7ff fd11 	bl	80149bc <_vfiprintf_r>
 8014f9a:	b002      	add	sp, #8
 8014f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014fa0:	b003      	add	sp, #12
 8014fa2:	4770      	bx	lr
 8014fa4:	24000170 	.word	0x24000170

08014fa8 <abort>:
 8014fa8:	b508      	push	{r3, lr}
 8014faa:	2006      	movs	r0, #6
 8014fac:	f000 f82c 	bl	8015008 <raise>
 8014fb0:	2001      	movs	r0, #1
 8014fb2:	f7ec fbdf 	bl	8001774 <_exit>

08014fb6 <_raise_r>:
 8014fb6:	291f      	cmp	r1, #31
 8014fb8:	b538      	push	{r3, r4, r5, lr}
 8014fba:	4604      	mov	r4, r0
 8014fbc:	460d      	mov	r5, r1
 8014fbe:	d904      	bls.n	8014fca <_raise_r+0x14>
 8014fc0:	2316      	movs	r3, #22
 8014fc2:	6003      	str	r3, [r0, #0]
 8014fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8014fc8:	bd38      	pop	{r3, r4, r5, pc}
 8014fca:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014fcc:	b112      	cbz	r2, 8014fd4 <_raise_r+0x1e>
 8014fce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014fd2:	b94b      	cbnz	r3, 8014fe8 <_raise_r+0x32>
 8014fd4:	4620      	mov	r0, r4
 8014fd6:	f000 f831 	bl	801503c <_getpid_r>
 8014fda:	462a      	mov	r2, r5
 8014fdc:	4601      	mov	r1, r0
 8014fde:	4620      	mov	r0, r4
 8014fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014fe4:	f000 b818 	b.w	8015018 <_kill_r>
 8014fe8:	2b01      	cmp	r3, #1
 8014fea:	d00a      	beq.n	8015002 <_raise_r+0x4c>
 8014fec:	1c59      	adds	r1, r3, #1
 8014fee:	d103      	bne.n	8014ff8 <_raise_r+0x42>
 8014ff0:	2316      	movs	r3, #22
 8014ff2:	6003      	str	r3, [r0, #0]
 8014ff4:	2001      	movs	r0, #1
 8014ff6:	e7e7      	b.n	8014fc8 <_raise_r+0x12>
 8014ff8:	2400      	movs	r4, #0
 8014ffa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014ffe:	4628      	mov	r0, r5
 8015000:	4798      	blx	r3
 8015002:	2000      	movs	r0, #0
 8015004:	e7e0      	b.n	8014fc8 <_raise_r+0x12>
	...

08015008 <raise>:
 8015008:	4b02      	ldr	r3, [pc, #8]	; (8015014 <raise+0xc>)
 801500a:	4601      	mov	r1, r0
 801500c:	6818      	ldr	r0, [r3, #0]
 801500e:	f7ff bfd2 	b.w	8014fb6 <_raise_r>
 8015012:	bf00      	nop
 8015014:	24000170 	.word	0x24000170

08015018 <_kill_r>:
 8015018:	b538      	push	{r3, r4, r5, lr}
 801501a:	4d07      	ldr	r5, [pc, #28]	; (8015038 <_kill_r+0x20>)
 801501c:	2300      	movs	r3, #0
 801501e:	4604      	mov	r4, r0
 8015020:	4608      	mov	r0, r1
 8015022:	4611      	mov	r1, r2
 8015024:	602b      	str	r3, [r5, #0]
 8015026:	f7ec fb95 	bl	8001754 <_kill>
 801502a:	1c43      	adds	r3, r0, #1
 801502c:	d102      	bne.n	8015034 <_kill_r+0x1c>
 801502e:	682b      	ldr	r3, [r5, #0]
 8015030:	b103      	cbz	r3, 8015034 <_kill_r+0x1c>
 8015032:	6023      	str	r3, [r4, #0]
 8015034:	bd38      	pop	{r3, r4, r5, pc}
 8015036:	bf00      	nop
 8015038:	24010cd4 	.word	0x24010cd4

0801503c <_getpid_r>:
 801503c:	f7ec bb82 	b.w	8001744 <_getpid>

08015040 <_init>:
 8015040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015042:	bf00      	nop
 8015044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015046:	bc08      	pop	{r3}
 8015048:	469e      	mov	lr, r3
 801504a:	4770      	bx	lr

0801504c <_fini>:
 801504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801504e:	bf00      	nop
 8015050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015052:	bc08      	pop	{r3}
 8015054:	469e      	mov	lr, r3
 8015056:	4770      	bx	lr
