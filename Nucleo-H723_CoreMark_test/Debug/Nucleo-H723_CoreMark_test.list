
Nucleo-H723_CoreMark_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a74  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ddc  08014d48  08014d48  00024d48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015b24  08015b24  00025b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015b2c  08015b2c  00025b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015b30  08015b30  00025b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002e8  24000000  08015b34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000cfa0  240002e8  08015e1c  000302e8  2**2
                  ALLOC
  8 ._user_heap_stack 00005000  2400d288  08015e1c  0003d288  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002b339  00000000  00000000  00030316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005478  00000000  00000000  0005b64f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002028  00000000  00000000  00060ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001e00  00000000  00000000  00062af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00008f90  00000000  00000000  000648f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ad72  00000000  00000000  0006d880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00164b63  00000000  00000000  000985f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001fd155  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009620  00000000  00000000  001fd1a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002e8 	.word	0x240002e8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08014d2c 	.word	0x08014d2c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002ec 	.word	0x240002ec
 800030c:	08014d2c 	.word	0x08014d2c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b974 	b.w	80006c0 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468e      	mov	lr, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d14d      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fe:	428a      	cmp	r2, r1
 8000400:	4694      	mov	ip, r2
 8000402:	d969      	bls.n	80004d8 <__udivmoddi4+0xe8>
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	b152      	cbz	r2, 8000420 <__udivmoddi4+0x30>
 800040a:	fa01 f302 	lsl.w	r3, r1, r2
 800040e:	f1c2 0120 	rsb	r1, r2, #32
 8000412:	fa20 f101 	lsr.w	r1, r0, r1
 8000416:	fa0c fc02 	lsl.w	ip, ip, r2
 800041a:	ea41 0e03 	orr.w	lr, r1, r3
 800041e:	4094      	lsls	r4, r2
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	0c21      	lsrs	r1, r4, #16
 8000426:	fbbe f6f8 	udiv	r6, lr, r8
 800042a:	fa1f f78c 	uxth.w	r7, ip
 800042e:	fb08 e316 	mls	r3, r8, r6, lr
 8000432:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000436:	fb06 f107 	mul.w	r1, r6, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f106 30ff 	add.w	r0, r6, #4294967295
 8000446:	f080 811f 	bcs.w	8000688 <__udivmoddi4+0x298>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 811c 	bls.w	8000688 <__udivmoddi4+0x298>
 8000450:	3e02      	subs	r6, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3310 	mls	r3, r8, r0, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb00 f707 	mul.w	r7, r0, r7
 8000468:	42a7      	cmp	r7, r4
 800046a:	d90a      	bls.n	8000482 <__udivmoddi4+0x92>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295
 8000474:	f080 810a 	bcs.w	800068c <__udivmoddi4+0x29c>
 8000478:	42a7      	cmp	r7, r4
 800047a:	f240 8107 	bls.w	800068c <__udivmoddi4+0x29c>
 800047e:	4464      	add	r4, ip
 8000480:	3802      	subs	r0, #2
 8000482:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000486:	1be4      	subs	r4, r4, r7
 8000488:	2600      	movs	r6, #0
 800048a:	b11d      	cbz	r5, 8000494 <__udivmoddi4+0xa4>
 800048c:	40d4      	lsrs	r4, r2
 800048e:	2300      	movs	r3, #0
 8000490:	e9c5 4300 	strd	r4, r3, [r5]
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d909      	bls.n	80004b2 <__udivmoddi4+0xc2>
 800049e:	2d00      	cmp	r5, #0
 80004a0:	f000 80ef 	beq.w	8000682 <__udivmoddi4+0x292>
 80004a4:	2600      	movs	r6, #0
 80004a6:	e9c5 0100 	strd	r0, r1, [r5]
 80004aa:	4630      	mov	r0, r6
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	fab3 f683 	clz	r6, r3
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	d14a      	bne.n	8000550 <__udivmoddi4+0x160>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d302      	bcc.n	80004c4 <__udivmoddi4+0xd4>
 80004be:	4282      	cmp	r2, r0
 80004c0:	f200 80f9 	bhi.w	80006b6 <__udivmoddi4+0x2c6>
 80004c4:	1a84      	subs	r4, r0, r2
 80004c6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ca:	2001      	movs	r0, #1
 80004cc:	469e      	mov	lr, r3
 80004ce:	2d00      	cmp	r5, #0
 80004d0:	d0e0      	beq.n	8000494 <__udivmoddi4+0xa4>
 80004d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004d6:	e7dd      	b.n	8000494 <__udivmoddi4+0xa4>
 80004d8:	b902      	cbnz	r2, 80004dc <__udivmoddi4+0xec>
 80004da:	deff      	udf	#255	; 0xff
 80004dc:	fab2 f282 	clz	r2, r2
 80004e0:	2a00      	cmp	r2, #0
 80004e2:	f040 8092 	bne.w	800060a <__udivmoddi4+0x21a>
 80004e6:	eba1 010c 	sub.w	r1, r1, ip
 80004ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ee:	fa1f fe8c 	uxth.w	lr, ip
 80004f2:	2601      	movs	r6, #1
 80004f4:	0c20      	lsrs	r0, r4, #16
 80004f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004fa:	fb07 1113 	mls	r1, r7, r3, r1
 80004fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000502:	fb0e f003 	mul.w	r0, lr, r3
 8000506:	4288      	cmp	r0, r1
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x12c>
 800050a:	eb1c 0101 	adds.w	r1, ip, r1
 800050e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x12a>
 8000514:	4288      	cmp	r0, r1
 8000516:	f200 80cb 	bhi.w	80006b0 <__udivmoddi4+0x2c0>
 800051a:	4643      	mov	r3, r8
 800051c:	1a09      	subs	r1, r1, r0
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb1 f0f7 	udiv	r0, r1, r7
 8000524:	fb07 1110 	mls	r1, r7, r0, r1
 8000528:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800052c:	fb0e fe00 	mul.w	lr, lr, r0
 8000530:	45a6      	cmp	lr, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x156>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f100 31ff 	add.w	r1, r0, #4294967295
 800053c:	d202      	bcs.n	8000544 <__udivmoddi4+0x154>
 800053e:	45a6      	cmp	lr, r4
 8000540:	f200 80bb 	bhi.w	80006ba <__udivmoddi4+0x2ca>
 8000544:	4608      	mov	r0, r1
 8000546:	eba4 040e 	sub.w	r4, r4, lr
 800054a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x9a>
 8000550:	f1c6 0720 	rsb	r7, r6, #32
 8000554:	40b3      	lsls	r3, r6
 8000556:	fa22 fc07 	lsr.w	ip, r2, r7
 800055a:	ea4c 0c03 	orr.w	ip, ip, r3
 800055e:	fa20 f407 	lsr.w	r4, r0, r7
 8000562:	fa01 f306 	lsl.w	r3, r1, r6
 8000566:	431c      	orrs	r4, r3
 8000568:	40f9      	lsrs	r1, r7
 800056a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800056e:	fa00 f306 	lsl.w	r3, r0, r6
 8000572:	fbb1 f8f9 	udiv	r8, r1, r9
 8000576:	0c20      	lsrs	r0, r4, #16
 8000578:	fa1f fe8c 	uxth.w	lr, ip
 800057c:	fb09 1118 	mls	r1, r9, r8, r1
 8000580:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000584:	fb08 f00e 	mul.w	r0, r8, lr
 8000588:	4288      	cmp	r0, r1
 800058a:	fa02 f206 	lsl.w	r2, r2, r6
 800058e:	d90b      	bls.n	80005a8 <__udivmoddi4+0x1b8>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f108 3aff 	add.w	sl, r8, #4294967295
 8000598:	f080 8088 	bcs.w	80006ac <__udivmoddi4+0x2bc>
 800059c:	4288      	cmp	r0, r1
 800059e:	f240 8085 	bls.w	80006ac <__udivmoddi4+0x2bc>
 80005a2:	f1a8 0802 	sub.w	r8, r8, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	1a09      	subs	r1, r1, r0
 80005aa:	b2a4      	uxth	r4, r4
 80005ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80005b0:	fb09 1110 	mls	r1, r9, r0, r1
 80005b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005bc:	458e      	cmp	lr, r1
 80005be:	d908      	bls.n	80005d2 <__udivmoddi4+0x1e2>
 80005c0:	eb1c 0101 	adds.w	r1, ip, r1
 80005c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005c8:	d26c      	bcs.n	80006a4 <__udivmoddi4+0x2b4>
 80005ca:	458e      	cmp	lr, r1
 80005cc:	d96a      	bls.n	80006a4 <__udivmoddi4+0x2b4>
 80005ce:	3802      	subs	r0, #2
 80005d0:	4461      	add	r1, ip
 80005d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005d6:	fba0 9402 	umull	r9, r4, r0, r2
 80005da:	eba1 010e 	sub.w	r1, r1, lr
 80005de:	42a1      	cmp	r1, r4
 80005e0:	46c8      	mov	r8, r9
 80005e2:	46a6      	mov	lr, r4
 80005e4:	d356      	bcc.n	8000694 <__udivmoddi4+0x2a4>
 80005e6:	d053      	beq.n	8000690 <__udivmoddi4+0x2a0>
 80005e8:	b15d      	cbz	r5, 8000602 <__udivmoddi4+0x212>
 80005ea:	ebb3 0208 	subs.w	r2, r3, r8
 80005ee:	eb61 010e 	sbc.w	r1, r1, lr
 80005f2:	fa01 f707 	lsl.w	r7, r1, r7
 80005f6:	fa22 f306 	lsr.w	r3, r2, r6
 80005fa:	40f1      	lsrs	r1, r6
 80005fc:	431f      	orrs	r7, r3
 80005fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000602:	2600      	movs	r6, #0
 8000604:	4631      	mov	r1, r6
 8000606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	40d8      	lsrs	r0, r3
 8000610:	fa0c fc02 	lsl.w	ip, ip, r2
 8000614:	fa21 f303 	lsr.w	r3, r1, r3
 8000618:	4091      	lsls	r1, r2
 800061a:	4301      	orrs	r1, r0
 800061c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000620:	fa1f fe8c 	uxth.w	lr, ip
 8000624:	fbb3 f0f7 	udiv	r0, r3, r7
 8000628:	fb07 3610 	mls	r6, r7, r0, r3
 800062c:	0c0b      	lsrs	r3, r1, #16
 800062e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000632:	fb00 f60e 	mul.w	r6, r0, lr
 8000636:	429e      	cmp	r6, r3
 8000638:	fa04 f402 	lsl.w	r4, r4, r2
 800063c:	d908      	bls.n	8000650 <__udivmoddi4+0x260>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f100 38ff 	add.w	r8, r0, #4294967295
 8000646:	d22f      	bcs.n	80006a8 <__udivmoddi4+0x2b8>
 8000648:	429e      	cmp	r6, r3
 800064a:	d92d      	bls.n	80006a8 <__udivmoddi4+0x2b8>
 800064c:	3802      	subs	r0, #2
 800064e:	4463      	add	r3, ip
 8000650:	1b9b      	subs	r3, r3, r6
 8000652:	b289      	uxth	r1, r1
 8000654:	fbb3 f6f7 	udiv	r6, r3, r7
 8000658:	fb07 3316 	mls	r3, r7, r6, r3
 800065c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000660:	fb06 f30e 	mul.w	r3, r6, lr
 8000664:	428b      	cmp	r3, r1
 8000666:	d908      	bls.n	800067a <__udivmoddi4+0x28a>
 8000668:	eb1c 0101 	adds.w	r1, ip, r1
 800066c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000670:	d216      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000672:	428b      	cmp	r3, r1
 8000674:	d914      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000676:	3e02      	subs	r6, #2
 8000678:	4461      	add	r1, ip
 800067a:	1ac9      	subs	r1, r1, r3
 800067c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000680:	e738      	b.n	80004f4 <__udivmoddi4+0x104>
 8000682:	462e      	mov	r6, r5
 8000684:	4628      	mov	r0, r5
 8000686:	e705      	b.n	8000494 <__udivmoddi4+0xa4>
 8000688:	4606      	mov	r6, r0
 800068a:	e6e3      	b.n	8000454 <__udivmoddi4+0x64>
 800068c:	4618      	mov	r0, r3
 800068e:	e6f8      	b.n	8000482 <__udivmoddi4+0x92>
 8000690:	454b      	cmp	r3, r9
 8000692:	d2a9      	bcs.n	80005e8 <__udivmoddi4+0x1f8>
 8000694:	ebb9 0802 	subs.w	r8, r9, r2
 8000698:	eb64 0e0c 	sbc.w	lr, r4, ip
 800069c:	3801      	subs	r0, #1
 800069e:	e7a3      	b.n	80005e8 <__udivmoddi4+0x1f8>
 80006a0:	4646      	mov	r6, r8
 80006a2:	e7ea      	b.n	800067a <__udivmoddi4+0x28a>
 80006a4:	4620      	mov	r0, r4
 80006a6:	e794      	b.n	80005d2 <__udivmoddi4+0x1e2>
 80006a8:	4640      	mov	r0, r8
 80006aa:	e7d1      	b.n	8000650 <__udivmoddi4+0x260>
 80006ac:	46d0      	mov	r8, sl
 80006ae:	e77b      	b.n	80005a8 <__udivmoddi4+0x1b8>
 80006b0:	3b02      	subs	r3, #2
 80006b2:	4461      	add	r1, ip
 80006b4:	e732      	b.n	800051c <__udivmoddi4+0x12c>
 80006b6:	4630      	mov	r0, r6
 80006b8:	e709      	b.n	80004ce <__udivmoddi4+0xde>
 80006ba:	4464      	add	r4, ip
 80006bc:	3802      	subs	r0, #2
 80006be:	e742      	b.n	8000546 <__udivmoddi4+0x156>

080006c0 <__aeabi_idiv0>:
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop

080006c4 <HAL_UART_RxCpltCallback>:
		}
		return len;
	}
#endif

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
    */

     /*
       loop back received data
     */
     HAL_UART_Receive_IT(&huart3, &rxData, 1);
 80006cc:	2201      	movs	r2, #1
 80006ce:	4923      	ldr	r1, [pc, #140]	; (800075c <HAL_UART_RxCpltCallback+0x98>)
 80006d0:	4823      	ldr	r0, [pc, #140]	; (8000760 <HAL_UART_RxCpltCallback+0x9c>)
 80006d2:	f007 ffef 	bl	80086b4 <HAL_UART_Receive_IT>
     if (rxData == '\n')
 80006d6:	4b21      	ldr	r3, [pc, #132]	; (800075c <HAL_UART_RxCpltCallback+0x98>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b0a      	cmp	r3, #10
 80006dc:	d11f      	bne.n	800071e <HAL_UART_RxCpltCallback+0x5a>
	 {
	   if (rx_buffer[rx_index - 1] == '\r')
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <HAL_UART_RxCpltCallback+0xa0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	4a20      	ldr	r2, [pc, #128]	; (8000768 <HAL_UART_RxCpltCallback+0xa4>)
 80006e6:	5cd3      	ldrb	r3, [r2, r3]
 80006e8:	2b0d      	cmp	r3, #13
 80006ea:	d10d      	bne.n	8000708 <HAL_UART_RxCpltCallback+0x44>
	   {
		 rx_index--;
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <HAL_UART_RxCpltCallback+0xa0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	3b01      	subs	r3, #1
 80006f2:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <HAL_UART_RxCpltCallback+0xa0>)
 80006f4:	6013      	str	r3, [r2, #0]
		 rx_flag = 1;
 80006f6:	4b1d      	ldr	r3, [pc, #116]	; (800076c <HAL_UART_RxCpltCallback+0xa8>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]
		 rx_buffer[rx_index] = 0;
 80006fc:	4b19      	ldr	r3, [pc, #100]	; (8000764 <HAL_UART_RxCpltCallback+0xa0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a19      	ldr	r2, [pc, #100]	; (8000768 <HAL_UART_RxCpltCallback+0xa4>)
 8000702:	2100      	movs	r1, #0
 8000704:	54d1      	strb	r1, [r2, r3]
 8000706:	e01d      	b.n	8000744 <HAL_UART_RxCpltCallback+0x80>
	   }
	   else
	   {
		 rx_index = 0;
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <HAL_UART_RxCpltCallback+0xa0>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
		 HAL_UART_Transmit(&huart3, "not support format\r\n", 20, 1000);
 800070e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000712:	2214      	movs	r2, #20
 8000714:	4916      	ldr	r1, [pc, #88]	; (8000770 <HAL_UART_RxCpltCallback+0xac>)
 8000716:	4812      	ldr	r0, [pc, #72]	; (8000760 <HAL_UART_RxCpltCallback+0x9c>)
 8000718:	f007 ff36 	bl	8008588 <HAL_UART_Transmit>
 800071c:	e012      	b.n	8000744 <HAL_UART_RxCpltCallback+0x80>
	   }
	 }
	 else if (rxData == 0x08) // back space
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <HAL_UART_RxCpltCallback+0x98>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b08      	cmp	r3, #8
 8000724:	d105      	bne.n	8000732 <HAL_UART_RxCpltCallback+0x6e>
	 {
	   rx_index--;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <HAL_UART_RxCpltCallback+0xa0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	3b01      	subs	r3, #1
 800072c:	4a0d      	ldr	r2, [pc, #52]	; (8000764 <HAL_UART_RxCpltCallback+0xa0>)
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	e008      	b.n	8000744 <HAL_UART_RxCpltCallback+0x80>
	 }
	 else
	 {
	   rx_buffer[rx_index++] = rxData;
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <HAL_UART_RxCpltCallback+0xa0>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	1c5a      	adds	r2, r3, #1
 8000738:	490a      	ldr	r1, [pc, #40]	; (8000764 <HAL_UART_RxCpltCallback+0xa0>)
 800073a:	600a      	str	r2, [r1, #0]
 800073c:	4a07      	ldr	r2, [pc, #28]	; (800075c <HAL_UART_RxCpltCallback+0x98>)
 800073e:	7811      	ldrb	r1, [r2, #0]
 8000740:	4a09      	ldr	r2, [pc, #36]	; (8000768 <HAL_UART_RxCpltCallback+0xa4>)
 8000742:	54d1      	strb	r1, [r2, r3]
	 }
     HAL_UART_Transmit(&huart3, &rxData, 1, 1000);
 8000744:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000748:	2201      	movs	r2, #1
 800074a:	4904      	ldr	r1, [pc, #16]	; (800075c <HAL_UART_RxCpltCallback+0x98>)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <HAL_UART_RxCpltCallback+0x9c>)
 800074e:	f007 ff1b 	bl	8008588 <HAL_UART_Transmit>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	24000515 	.word	0x24000515
 8000760:	2400047c 	.word	0x2400047c
 8000764:	24000d18 	.word	0x24000d18
 8000768:	24000518 	.word	0x24000518
 800076c:	24000d1c 	.word	0x24000d1c
 8000770:	08014d60 	.word	0x08014d60

08000774 <HAL_SPI_TxRxCpltCallback>:
void W6100CsEnable(void);
void W6100CsDisable(void);
#define W6100_CS_GPIO  1
#if 1
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	//printf("SPI DMA Complete\r\n");
	SPI_DMA_flag = 1;
 800077c:	4b04      	ldr	r3, [pc, #16]	; (8000790 <HAL_SPI_TxRxCpltCallback+0x1c>)
 800077e:	2201      	movs	r2, #1
 8000780:	701a      	strb	r2, [r3, #0]
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	24000514 	.word	0x24000514

08000794 <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	SPI_DMA_flag = 1;
 800079c:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <HAL_SPI_TxCpltCallback+0x1c>)
 800079e:	2201      	movs	r2, #1
 80007a0:	701a      	strb	r2, [r3, #0]
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	24000514 	.word	0x24000514

080007b4 <dma_write_data>:
#else
#define spi_delay_en 0
uint8_t temp_pbuf[8024]={0,}; //16384+3
uint8_t temp_pbuf1[8024]={0,};
uint8_t dma_write_data(uint32_t address, uint8_t *buff, uint16_t len)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	4613      	mov	r3, r2
 80007c0:	80fb      	strh	r3, [r7, #6]
	temp_pbuf[0] = (uint8_t)((address & 0x00FF0000) >> 16);
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	0c1b      	lsrs	r3, r3, #16
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <dma_write_data+0x60>)
 80007ca:	701a      	strb	r2, [r3, #0]
	temp_pbuf[1] = (uint8_t)((address & 0x0000FF00) >> 8);
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	0a1b      	lsrs	r3, r3, #8
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <dma_write_data+0x60>)
 80007d4:	705a      	strb	r2, [r3, #1]
	temp_pbuf[2] = (uint8_t)((address & 0x000000ff)|(_W6100_SPI_WRITE_ ));
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	f043 0304 	orr.w	r3, r3, #4
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <dma_write_data+0x60>)
 80007e2:	709a      	strb	r2, [r3, #2]
	memcpy(temp_pbuf+3, buff, len);
 80007e4:	480c      	ldr	r0, [pc, #48]	; (8000818 <dma_write_data+0x64>)
 80007e6:	88fb      	ldrh	r3, [r7, #6]
 80007e8:	461a      	mov	r2, r3
 80007ea:	68b9      	ldr	r1, [r7, #8]
 80007ec:	f011 fdc9 	bl	8012382 <memcpy>
	SPI_DMA_flag = 0;
	HAL_SPI_Transmit_DMA(&hspi1, temp_pbuf, len+3);
	while(SPI_DMA_flag == 0);
#else
  #if W6100_CS_GPIO
  W6100CsEnable();
 80007f0:	f000 fc9c 	bl	800112c <W6100CsEnable>
  #endif
#if 1
	HAL_SPI_Transmit(&hspi1, temp_pbuf, len+3, 10);
 80007f4:	88fb      	ldrh	r3, [r7, #6]
 80007f6:	3303      	adds	r3, #3
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	230a      	movs	r3, #10
 80007fc:	4905      	ldr	r1, [pc, #20]	; (8000814 <dma_write_data+0x60>)
 80007fe:	4807      	ldr	r0, [pc, #28]	; (800081c <dma_write_data+0x68>)
 8000800:	f006 fc82 	bl	8007108 <HAL_SPI_Transmit>
	SPI_DMA_flag = 0;
	HAL_SPI_Transmit_DMA(&hspi1, temp_pbuf, len+3);
	while(SPI_DMA_flag == 0);
#endif
  #if W6100_CS_GPIO
  W6100CsDisable();
 8000804:	f000 fc9e 	bl	8001144 <W6100CsDisable>
  {
    temp_delay_dumi++;
  }
#endif
	//while (HAL_DMA_GetState(hspi1.hdmatx) == HAL_DMA_STATE_BUSY|| HAL_DMA_GetState(hspi1.hdmatx) == HAL_DMA_STATE_RESET);
	return 0;
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	24000d20 	.word	0x24000d20
 8000818:	24000d23 	.word	0x24000d23
 800081c:	24000304 	.word	0x24000304

08000820 <dma_read_data>:
uint8_t dma_read_data(uint32_t address, uint8_t *buff, uint16_t len)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af02      	add	r7, sp, #8
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	4613      	mov	r3, r2
 800082c:	80fb      	strh	r3, [r7, #6]
  temp_pbuf[0] = (uint8_t)((address & 0x00FF0000) >> 16);
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	0c1b      	lsrs	r3, r3, #16
 8000832:	b2da      	uxtb	r2, r3
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <dma_read_data+0x64>)
 8000836:	701a      	strb	r2, [r3, #0]
	temp_pbuf[1] = (uint8_t)((address & 0x0000FF00) >> 8);
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	0a1b      	lsrs	r3, r3, #8
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <dma_read_data+0x64>)
 8000840:	705a      	strb	r2, [r3, #1]
	temp_pbuf[2] = (uint8_t)((address & 0x000000ff)|(_W6100_SPI_READ_ ));
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <dma_read_data+0x64>)
 8000848:	709a      	strb	r2, [r3, #2]
  for(temp_delay=0;temp_delay<10; temp_delay++)
  {
    temp_delay_dumi++;
  }
#endif
	SPI_DMA_flag = 0;
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <dma_read_data+0x68>)
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
  #if 0
	HAL_SPI_TransmitReceive_DMA(&hspi1,temp_pbuf, temp_pbuf1, len + 3);
	while(SPI_DMA_flag == 0);
  #else
  #if W6100_CS_GPIO
  W6100CsEnable();
 8000850:	f000 fc6c 	bl	800112c <W6100CsEnable>
  #endif
#if 1
  HAL_SPI_TransmitReceive(&hspi1,temp_pbuf, temp_pbuf1, len + 3, 10);
 8000854:	88fb      	ldrh	r3, [r7, #6]
 8000856:	3303      	adds	r3, #3
 8000858:	b29b      	uxth	r3, r3
 800085a:	220a      	movs	r2, #10
 800085c:	9200      	str	r2, [sp, #0]
 800085e:	4a0b      	ldr	r2, [pc, #44]	; (800088c <dma_read_data+0x6c>)
 8000860:	4908      	ldr	r1, [pc, #32]	; (8000884 <dma_read_data+0x64>)
 8000862:	480b      	ldr	r0, [pc, #44]	; (8000890 <dma_read_data+0x70>)
 8000864:	f006 fe42 	bl	80074ec <HAL_SPI_TransmitReceive>
  SPI_DMA_flag = 0;
  HAL_SPI_TransmitReceive_DMA(&hspi1,temp_pbuf, temp_pbuf1, len + 3);
  	while(SPI_DMA_flag == 0);
#endif
  #if W6100_CS_GPIO
  W6100CsDisable();
 8000868:	f000 fc6c 	bl	8001144 <W6100CsDisable>
  #endif
  #endif
	//while (HAL_DMA_GetState(hspi1.hdmarx) == HAL_DMA_STATE_BUSY|| HAL_DMA_GetState(hspi1.hdmarx) == HAL_DMA_STATE_RESET);
	memcpy(buff,temp_pbuf1 + 3, len);
 800086c:	4909      	ldr	r1, [pc, #36]	; (8000894 <dma_read_data+0x74>)
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	461a      	mov	r2, r3
 8000872:	68b8      	ldr	r0, [r7, #8]
 8000874:	f011 fd85 	bl	8012382 <memcpy>
  for(temp_delay=0;temp_delay<10; temp_delay++)
  {
    temp_delay_dumi++;
  }
#endif
	return len;
 8000878:	88fb      	ldrh	r3, [r7, #6]
 800087a:	b2db      	uxtb	r3, r3
}
 800087c:	4618      	mov	r0, r3
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	24000d20 	.word	0x24000d20
 8000888:	24000514 	.word	0x24000514
 800088c:	24002c78 	.word	0x24002c78
 8000890:	24000304 	.word	0x24000304
 8000894:	24002c7b 	.word	0x24002c7b

08000898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b08d      	sub	sp, #52	; 0x34
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t temp_ver[2]={0,};
 800089e:	2300      	movs	r3, #0
 80008a0:	823b      	strh	r3, [r7, #16]
	PLL2_ClocksTypeDef PLL2_Clk_data;
	uint16_t temp_presc = 1, temp_presc_set, temp_presc_cnt = 0;
 80008a2:	2301      	movs	r3, #1
 80008a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80008a6:	2300      	movs	r3, #0
 80008a8:	85bb      	strh	r3, [r7, #44]	; 0x2c
	int i = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80008ae:	f000 fe9f 	bl	80015f0 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008b2:	4b88      	ldr	r3, [pc, #544]	; (8000ad4 <main+0x23c>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d11b      	bne.n	80008f6 <main+0x5e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008be:	f3bf 8f4f 	dsb	sy
}
 80008c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008c4:	f3bf 8f6f 	isb	sy
}
 80008c8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008ca:	4b82      	ldr	r3, [pc, #520]	; (8000ad4 <main+0x23c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008d2:	f3bf 8f4f 	dsb	sy
}
 80008d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008d8:	f3bf 8f6f 	isb	sy
}
 80008dc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008de:	4b7d      	ldr	r3, [pc, #500]	; (8000ad4 <main+0x23c>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	4a7c      	ldr	r2, [pc, #496]	; (8000ad4 <main+0x23c>)
 80008e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008ea:	f3bf 8f4f 	dsb	sy
}
 80008ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008f0:	f3bf 8f6f 	isb	sy
}
 80008f4:	e000      	b.n	80008f8 <main+0x60>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008f6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008f8:	4b76      	ldr	r3, [pc, #472]	; (8000ad4 <main+0x23c>)
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000900:	2b00      	cmp	r3, #0
 8000902:	d138      	bne.n	8000976 <main+0xde>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000904:	4b73      	ldr	r3, [pc, #460]	; (8000ad4 <main+0x23c>)
 8000906:	2200      	movs	r2, #0
 8000908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800090c:	f3bf 8f4f 	dsb	sy
}
 8000910:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000912:	4b70      	ldr	r3, [pc, #448]	; (8000ad4 <main+0x23c>)
 8000914:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000918:	61fb      	str	r3, [r7, #28]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	0b5b      	lsrs	r3, r3, #13
 800091e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000922:	61bb      	str	r3, [r7, #24]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	08db      	lsrs	r3, r3, #3
 8000928:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800092c:	617b      	str	r3, [r7, #20]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	015a      	lsls	r2, r3, #5
 8000932:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000936:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800093c:	4965      	ldr	r1, [pc, #404]	; (8000ad4 <main+0x23c>)
 800093e:	4313      	orrs	r3, r2
 8000940:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	1e5a      	subs	r2, r3, #1
 8000948:	617a      	str	r2, [r7, #20]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d1ef      	bne.n	800092e <main+0x96>
    } while(sets-- != 0U);
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	1e5a      	subs	r2, r3, #1
 8000952:	61ba      	str	r2, [r7, #24]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1e5      	bne.n	8000924 <main+0x8c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000958:	f3bf 8f4f 	dsb	sy
}
 800095c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800095e:	4b5d      	ldr	r3, [pc, #372]	; (8000ad4 <main+0x23c>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	4a5c      	ldr	r2, [pc, #368]	; (8000ad4 <main+0x23c>)
 8000964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000968:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800096a:	f3bf 8f4f 	dsb	sy
}
 800096e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000970:	f3bf 8f6f 	isb	sy
}
 8000974:	e000      	b.n	8000978 <main+0xe0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000976:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000978:	f001 fa50 	bl	8001e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097c:	f000 f8d4 	bl	8000b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000980:	f000 fa16 	bl	8000db0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000984:	f000 f9a0 	bl	8000cc8 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000988:	f000 f948 	bl	8000c1c <MX_SPI1_Init>
  MX_DMA_Init();
 800098c:	f000 f9e8 	bl	8000d60 <MX_DMA_Init>
  //MX_CoreMarkApp_Init();
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rxData, 1);
 8000990:	2201      	movs	r2, #1
 8000992:	4951      	ldr	r1, [pc, #324]	; (8000ad8 <main+0x240>)
 8000994:	4851      	ldr	r0, [pc, #324]	; (8000adc <main+0x244>)
 8000996:	f007 fe8d 	bl	80086b4 <HAL_UART_Receive_IT>
    printf("< W6100 clock TEST!! >\r\n");
 800099a:	4851      	ldr	r0, [pc, #324]	; (8000ae0 <main+0x248>)
 800099c:	f012 fa7a 	bl	8012e94 <puts>
    W6100CsDisable();
 80009a0:	f000 fbd0 	bl	8001144 <W6100CsDisable>
    HAL_RCCEx_GetPLL2ClockFreq(&PLL2_Clk_data);
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	4618      	mov	r0, r3
 80009a8:	f005 fe9c 	bl	80066e4 <HAL_RCCEx_GetPLL2ClockFreq>
      printf("SET PLL2 P:%ld, Q:%ld, R:%ld \r\n", PLL2_Clk_data.PLL2_P_Frequency, PLL2_Clk_data.PLL2_Q_Frequency, PLL2_Clk_data.PLL2_R_Frequency);
 80009ac:	6879      	ldr	r1, [r7, #4]
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	484c      	ldr	r0, [pc, #304]	; (8000ae4 <main+0x24c>)
 80009b4:	f012 f9d2 	bl	8012d5c <iprintf>
      temp_presc_set = (hspi1.Init.BaudRatePrescaler>>(4*7));
 80009b8:	4b4b      	ldr	r3, [pc, #300]	; (8000ae8 <main+0x250>)
 80009ba:	69db      	ldr	r3, [r3, #28]
 80009bc:	0f1b      	lsrs	r3, r3, #28
 80009be:	84fb      	strh	r3, [r7, #38]	; 0x26
      printf("pre = %d\r\n", temp_presc_set);
 80009c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009c2:	4619      	mov	r1, r3
 80009c4:	4849      	ldr	r0, [pc, #292]	; (8000aec <main+0x254>)
 80009c6:	f012 f9c9 	bl	8012d5c <iprintf>
      for(temp_presc_cnt = 0; temp_presc_cnt < temp_presc_set; temp_presc_cnt++)
 80009ca:	2300      	movs	r3, #0
 80009cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80009ce:	e005      	b.n	80009dc <main+0x144>
      {
      	temp_presc = temp_presc*2;
 80009d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      for(temp_presc_cnt = 0; temp_presc_cnt < temp_presc_set; temp_presc_cnt++)
 80009d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80009d8:	3301      	adds	r3, #1
 80009da:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80009dc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80009de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d3f5      	bcc.n	80009d0 <main+0x138>
      }
      printf("SPI CLK %d Mhz \r\n", (int)(PLL2_Clk_data.PLL2_P_Frequency / (2*temp_presc) / 1000000));
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80009e8:	0052      	lsls	r2, r2, #1
 80009ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80009ee:	4a40      	ldr	r2, [pc, #256]	; (8000af0 <main+0x258>)
 80009f0:	fba2 2303 	umull	r2, r3, r2, r3
 80009f4:	0c9b      	lsrs	r3, r3, #18
 80009f6:	4619      	mov	r1, r3
 80009f8:	483e      	ldr	r0, [pc, #248]	; (8000af4 <main+0x25c>)
 80009fa:	f012 f9af 	bl	8012d5c <iprintf>
  	dma_read_data(0x000200, temp_ver, 2);
    W6100CsDisable();
  	printf("VER 0x%02X %02X\r\n", temp_ver[0], temp_ver[1]);
#endif
  	//int i = 0;
  		uint8_t syslock = SYS_NET_LOCK;
 80009fe:	2302      	movs	r3, #2
 8000a00:	70fb      	strb	r3, [r7, #3]
  		int8_t *data= NULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
  		int32_t ret;
  		//uint8_t temp_ver[2]={0,};
  		printf("start W6100 \r\n");
 8000a06:	483c      	ldr	r0, [pc, #240]	; (8000af8 <main+0x260>)
 8000a08:	f012 fa44 	bl	8012e94 <puts>
  		W6100CsEnable();
 8000a0c:	f000 fb8e 	bl	800112c <W6100CsEnable>
  		dma_read_data(0x000200, temp_ver, 2);
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	2202      	movs	r2, #2
 8000a16:	4619      	mov	r1, r3
 8000a18:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a1c:	f7ff ff00 	bl	8000820 <dma_read_data>
  		W6100CsDisable();
 8000a20:	f000 fb90 	bl	8001144 <W6100CsDisable>
  		printf("VER 0x%02X %02X\r\n", temp_ver[0], temp_ver[1]);
 8000a24:	7c3b      	ldrb	r3, [r7, #16]
 8000a26:	4619      	mov	r1, r3
 8000a28:	7c7b      	ldrb	r3, [r7, #17]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4833      	ldr	r0, [pc, #204]	; (8000afc <main+0x264>)
 8000a2e:	f012 f995 	bl	8012d5c <iprintf>
  		W6100Initialze();
 8000a32:	f000 fb93 	bl	800115c <W6100Initialze>
  		ctlwizchip(CW_SYS_UNLOCK,& syslock);
 8000a36:	1cfb      	adds	r3, r7, #3
 8000a38:	4619      	mov	r1, r3
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f010 fcb6 	bl	80113ac <ctlwizchip>
  		ctlnetwork(CN_SET_NETINFO,&gWIZNETINFO);
 8000a40:	492f      	ldr	r1, [pc, #188]	; (8000b00 <main+0x268>)
 8000a42:	2000      	movs	r0, #0
 8000a44:	f010 fe42 	bl	80116cc <ctlnetwork>
  		for (i = 0; i < 8; i++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a4c:	e012      	b.n	8000a74 <main+0x1dc>
  		  {
  			printf("%d : max size = %d k \r\n", i, getSn_TxMAX(i));
 8000a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	3301      	adds	r3, #1
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f00f fb38 	bl	80100d0 <WIZCHIP_READ>
 8000a60:	4603      	mov	r3, r0
 8000a62:	029b      	lsls	r3, r3, #10
 8000a64:	461a      	mov	r2, r3
 8000a66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000a68:	4826      	ldr	r0, [pc, #152]	; (8000b04 <main+0x26c>)
 8000a6a:	f012 f977 	bl	8012d5c <iprintf>
  		for (i = 0; i < 8; i++)
 8000a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a70:	3301      	adds	r3, #1
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a76:	2b07      	cmp	r3, #7
 8000a78:	dde9      	ble.n	8000a4e <main+0x1b6>
  		  }
  		printf("VERSION(%x) = %.2x \r\n", _VER_,getVER());
 8000a7a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a7e:	f00f fb27 	bl	80100d0 <WIZCHIP_READ>
 8000a82:	4603      	mov	r3, r0
 8000a84:	021c      	lsls	r4, r3, #8
 8000a86:	f44f 7040 	mov.w	r0, #768	; 0x300
 8000a8a:	f00f fb21 	bl	80100d0 <WIZCHIP_READ>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	4423      	add	r3, r4
 8000a92:	461a      	mov	r2, r3
 8000a94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a98:	481b      	ldr	r0, [pc, #108]	; (8000b08 <main+0x270>)
 8000a9a:	f012 f95f 	bl	8012d5c <iprintf>
  		print_network_information();
 8000a9e:	f000 fbb7 	bl	8001210 <print_network_information>
  		printf("\r\n>");
 8000aa2:	481a      	ldr	r0, [pc, #104]	; (8000b0c <main+0x274>)
 8000aa4:	f012 f95a 	bl	8012d5c <iprintf>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000aa8:	f00a f9ce 	bl	800ae48 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000aac:	4a18      	ldr	r2, [pc, #96]	; (8000b10 <main+0x278>)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4818      	ldr	r0, [pc, #96]	; (8000b14 <main+0x27c>)
 8000ab2:	f00a fa13 	bl	800aedc <osThreadNew>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <main+0x280>)
 8000aba:	6013      	str	r3, [r2, #0]

  /* creation of CoreMark */
  CoreMarkHandle = osThreadNew(StartCoreMark, NULL, &CoreMark_attributes);
 8000abc:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <main+0x284>)
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4817      	ldr	r0, [pc, #92]	; (8000b20 <main+0x288>)
 8000ac2:	f00a fa0b 	bl	800aedc <osThreadNew>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4a16      	ldr	r2, [pc, #88]	; (8000b24 <main+0x28c>)
 8000aca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000acc:	f00a f9e0 	bl	800ae90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <main+0x238>
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00
 8000ad8:	24000515 	.word	0x24000515
 8000adc:	2400047c 	.word	0x2400047c
 8000ae0:	08014d7c 	.word	0x08014d7c
 8000ae4:	08014d94 	.word	0x08014d94
 8000ae8:	24000304 	.word	0x24000304
 8000aec:	08014db4 	.word	0x08014db4
 8000af0:	431bde83 	.word	0x431bde83
 8000af4:	08014dc0 	.word	0x08014dc0
 8000af8:	08014dd4 	.word	0x08014dd4
 8000afc:	08014de4 	.word	0x08014de4
 8000b00:	24000000 	.word	0x24000000
 8000b04:	08014df8 	.word	0x08014df8
 8000b08:	08014e10 	.word	0x08014e10
 8000b0c:	08014e28 	.word	0x08014e28
 8000b10:	080156c0 	.word	0x080156c0
 8000b14:	080015b9 	.word	0x080015b9
 8000b18:	2400050c 	.word	0x2400050c
 8000b1c:	080156e4 	.word	0x080156e4
 8000b20:	080015d1 	.word	0x080015d1
 8000b24:	24000510 	.word	0x24000510

08000b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b09c      	sub	sp, #112	; 0x70
 8000b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	224c      	movs	r2, #76	; 0x4c
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f011 fc31 	bl	801239e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2220      	movs	r2, #32
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f011 fc2b 	bl	801239e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f003 ff05 	bl	8004958 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b4e:	2300      	movs	r3, #0
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	4b30      	ldr	r3, [pc, #192]	; (8000c14 <SystemClock_Config+0xec>)
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	4a2f      	ldr	r2, [pc, #188]	; (8000c14 <SystemClock_Config+0xec>)
 8000b58:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b5c:	6193      	str	r3, [r2, #24]
 8000b5e:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <SystemClock_Config+0xec>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b6a:	bf00      	nop
 8000b6c:	4b29      	ldr	r3, [pc, #164]	; (8000c14 <SystemClock_Config+0xec>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b78:	d1f8      	bne.n	8000b6c <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_CSI);
 8000b7a:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <SystemClock_Config+0xf0>)
 8000b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b7e:	f023 0303 	bic.w	r3, r3, #3
 8000b82:	4a25      	ldr	r2, [pc, #148]	; (8000c18 <SystemClock_Config+0xf0>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000b8a:	2310      	movs	r3, #16
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000b8e:	2380      	movs	r3, #128	; 0x80
 8000b90:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8000b92:	2310      	movs	r3, #16
 8000b94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b96:	2302      	movs	r3, #2
 8000b98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000ba2:	f240 1313 	movw	r3, #275	; 0x113
 8000ba6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bac:	2304      	movs	r3, #4
 8000bae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f003 ff01 	bl	80049cc <HAL_RCC_OscConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000bd0:	f000 fd4c 	bl	800166c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd4:	233f      	movs	r3, #63	; 0x3f
 8000bd6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000be0:	2308      	movs	r3, #8
 8000be2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000be4:	2340      	movs	r3, #64	; 0x40
 8000be6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000be8:	2340      	movs	r3, #64	; 0x40
 8000bea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bf2:	2340      	movs	r3, #64	; 0x40
 8000bf4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2103      	movs	r1, #3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f004 fa94 	bl	8005128 <HAL_RCC_ClockConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000c06:	f000 fd31 	bl	800166c <Error_Handler>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3770      	adds	r7, #112	; 0x70
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	58024800 	.word	0x58024800
 8000c18:	58024400 	.word	0x58024400

08000c1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c20:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c22:	4a28      	ldr	r2, [pc, #160]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000c24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c26:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c28:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c2e:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c34:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c36:	2207      	movs	r2, #7
 8000c38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c3a:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c40:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c46:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c48:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c54:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c60:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c72:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000cac:	f006 f926 	bl	8006efc <HAL_SPI_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000cb6:	f000 fcd9 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	24000304 	.word	0x24000304
 8000cc4:	40013000 	.word	0x40013000

08000cc8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000cce:	4a23      	ldr	r2, [pc, #140]	; (8000d5c <MX_USART3_UART_Init+0x94>)
 8000cd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cd2:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000cd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cda:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ce0:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cec:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf2:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d10:	4811      	ldr	r0, [pc, #68]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000d12:	f007 fbe9 	bl	80084e8 <HAL_UART_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d1c:	f000 fca6 	bl	800166c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d20:	2100      	movs	r1, #0
 8000d22:	480d      	ldr	r0, [pc, #52]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000d24:	f009 ff81 	bl	800ac2a <HAL_UARTEx_SetTxFifoThreshold>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d2e:	f000 fc9d 	bl	800166c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d32:	2100      	movs	r1, #0
 8000d34:	4808      	ldr	r0, [pc, #32]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000d36:	f009 ffb6 	bl	800aca6 <HAL_UARTEx_SetRxFifoThreshold>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d40:	f000 fc94 	bl	800166c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <MX_USART3_UART_Init+0x90>)
 8000d46:	f009 ff37 	bl	800abb8 <HAL_UARTEx_DisableFifoMode>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d50:	f000 fc8c 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2400047c 	.word	0x2400047c
 8000d5c:	40004800 	.word	0x40004800

08000d60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_DMA_Init+0x4c>)
 8000d68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d6c:	4a0f      	ldr	r2, [pc, #60]	; (8000dac <MX_DMA_Init+0x4c>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d76:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <MX_DMA_Init+0x4c>)
 8000d78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2105      	movs	r1, #5
 8000d88:	200b      	movs	r0, #11
 8000d8a:	f001 f95b 	bl	8002044 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d8e:	200b      	movs	r0, #11
 8000d90:	f001 f972 	bl	8002078 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2105      	movs	r1, #5
 8000d98:	200c      	movs	r0, #12
 8000d9a:	f001 f953 	bl	8002044 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d9e:	200c      	movs	r0, #12
 8000da0:	f001 f96a 	bl	8002078 <HAL_NVIC_EnableIRQ>

}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	58024400 	.word	0x58024400

08000db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08c      	sub	sp, #48	; 0x30
 8000db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc6:	4b93      	ldr	r3, [pc, #588]	; (8001014 <MX_GPIO_Init+0x264>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dcc:	4a91      	ldr	r2, [pc, #580]	; (8001014 <MX_GPIO_Init+0x264>)
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd6:	4b8f      	ldr	r3, [pc, #572]	; (8001014 <MX_GPIO_Init+0x264>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
 8000de2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000de4:	4b8b      	ldr	r3, [pc, #556]	; (8001014 <MX_GPIO_Init+0x264>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dea:	4a8a      	ldr	r2, [pc, #552]	; (8001014 <MX_GPIO_Init+0x264>)
 8000dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df4:	4b87      	ldr	r3, [pc, #540]	; (8001014 <MX_GPIO_Init+0x264>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	4b84      	ldr	r3, [pc, #528]	; (8001014 <MX_GPIO_Init+0x264>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e08:	4a82      	ldr	r2, [pc, #520]	; (8001014 <MX_GPIO_Init+0x264>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e12:	4b80      	ldr	r3, [pc, #512]	; (8001014 <MX_GPIO_Init+0x264>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e20:	4b7c      	ldr	r3, [pc, #496]	; (8001014 <MX_GPIO_Init+0x264>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e26:	4a7b      	ldr	r2, [pc, #492]	; (8001014 <MX_GPIO_Init+0x264>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e30:	4b78      	ldr	r3, [pc, #480]	; (8001014 <MX_GPIO_Init+0x264>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3e:	4b75      	ldr	r3, [pc, #468]	; (8001014 <MX_GPIO_Init+0x264>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e44:	4a73      	ldr	r2, [pc, #460]	; (8001014 <MX_GPIO_Init+0x264>)
 8000e46:	f043 0308 	orr.w	r3, r3, #8
 8000e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4e:	4b71      	ldr	r3, [pc, #452]	; (8001014 <MX_GPIO_Init+0x264>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	f003 0308 	and.w	r3, r3, #8
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e5c:	4b6d      	ldr	r3, [pc, #436]	; (8001014 <MX_GPIO_Init+0x264>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e62:	4a6c      	ldr	r2, [pc, #432]	; (8001014 <MX_GPIO_Init+0x264>)
 8000e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6c:	4b69      	ldr	r3, [pc, #420]	; (8001014 <MX_GPIO_Init+0x264>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e7a:	4b66      	ldr	r3, [pc, #408]	; (8001014 <MX_GPIO_Init+0x264>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e80:	4a64      	ldr	r2, [pc, #400]	; (8001014 <MX_GPIO_Init+0x264>)
 8000e82:	f043 0310 	orr.w	r3, r3, #16
 8000e86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8a:	4b62      	ldr	r3, [pc, #392]	; (8001014 <MX_GPIO_Init+0x264>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e90:	f003 0310 	and.w	r3, r3, #16
 8000e94:	603b      	str	r3, [r7, #0]
 8000e96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e9e:	485e      	ldr	r0, [pc, #376]	; (8001018 <MX_GPIO_Init+0x268>)
 8000ea0:	f003 fd40 	bl	8004924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|W6100_CS_Pin|Trace_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8000eaa:	485c      	ldr	r0, [pc, #368]	; (800101c <MX_GPIO_Init+0x26c>)
 8000eac:	f003 fd3a 	bl	8004924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2102      	movs	r1, #2
 8000eb4:	485a      	ldr	r0, [pc, #360]	; (8001020 <MX_GPIO_Init+0x270>)
 8000eb6:	f003 fd35 	bl	8004924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4855      	ldr	r0, [pc, #340]	; (8001024 <MX_GPIO_Init+0x274>)
 8000ed0:	f003 fb80 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ed4:	2332      	movs	r3, #50	; 0x32
 8000ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee4:	230b      	movs	r3, #11
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4619      	mov	r1, r3
 8000eee:	484d      	ldr	r0, [pc, #308]	; (8001024 <MX_GPIO_Init+0x274>)
 8000ef0:	f003 fb70 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ef4:	2386      	movs	r3, #134	; 0x86
 8000ef6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2300      	movs	r3, #0
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f04:	230b      	movs	r3, #11
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4846      	ldr	r0, [pc, #280]	; (8001028 <MX_GPIO_Init+0x278>)
 8000f10:	f003 fb60 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000f14:	f244 0301 	movw	r3, #16385	; 0x4001
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	483a      	ldr	r0, [pc, #232]	; (8001018 <MX_GPIO_Init+0x268>)
 8000f2e:	f003 fb51 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f44:	230b      	movs	r3, #11
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4832      	ldr	r0, [pc, #200]	; (8001018 <MX_GPIO_Init+0x268>)
 8000f50:	f003 fb40 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000f54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	482b      	ldr	r0, [pc, #172]	; (800101c <MX_GPIO_Init+0x26c>)
 8000f6e:	f003 fb31 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : W6100_CS_Pin Trace_Pin */
  GPIO_InitStruct.Pin = W6100_CS_Pin|Trace_Pin;
 8000f72:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4824      	ldr	r0, [pc, #144]	; (800101c <MX_GPIO_Init+0x26c>)
 8000f8c:	f003 fb22 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f94:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4821      	ldr	r0, [pc, #132]	; (800102c <MX_GPIO_Init+0x27c>)
 8000fa6:	f003 fb15 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000fbc:	230a      	movs	r3, #10
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4818      	ldr	r0, [pc, #96]	; (8001028 <MX_GPIO_Init+0x278>)
 8000fc8:	f003 fb04 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000fcc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fde:	230b      	movs	r3, #11
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4810      	ldr	r0, [pc, #64]	; (800102c <MX_GPIO_Init+0x27c>)
 8000fea:	f003 faf3 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	4806      	ldr	r0, [pc, #24]	; (8001020 <MX_GPIO_Init+0x270>)
 8001006:	f003 fae5 	bl	80045d4 <HAL_GPIO_Init>

}
 800100a:	bf00      	nop
 800100c:	3730      	adds	r7, #48	; 0x30
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	58024400 	.word	0x58024400
 8001018:	58020400 	.word	0x58020400
 800101c:	58020c00 	.word	0x58020c00
 8001020:	58021000 	.word	0x58021000
 8001024:	58020800 	.word	0x58020800
 8001028:	58020000 	.word	0x58020000
 800102c:	58021800 	.word	0x58021800

08001030 <W6100SpiReadByte>:

/* USER CODE BEGIN 4 */

uint8_t W6100SpiReadByte(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af02      	add	r7, sp, #8

	uint8_t rx = 0, tx = 0xFF;
 8001036:	2300      	movs	r3, #0
 8001038:	71fb      	strb	r3, [r7, #7]
 800103a:	23ff      	movs	r3, #255	; 0xff
 800103c:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1, 10);
 800103e:	1dfa      	adds	r2, r7, #7
 8001040:	1db9      	adds	r1, r7, #6
 8001042:	230a      	movs	r3, #10
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2301      	movs	r3, #1
 8001048:	4803      	ldr	r0, [pc, #12]	; (8001058 <W6100SpiReadByte+0x28>)
 800104a:	f006 fa4f 	bl	80074ec <HAL_SPI_TransmitReceive>
	//HAL_SPI_Receive(&hspi1, &rx, 1, 10);
	return rx;
 800104e:	79fb      	ldrb	r3, [r7, #7]

}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	24000304 	.word	0x24000304

0800105c <W6100SpiWriteByte>:

void W6100SpiWriteByte(uint8_t byte)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af02      	add	r7, sp, #8
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
	SPI_I2S_ReceiveData(W6100_SPI);

#elif defined USE_HAL_DRIVER

	uint8_t rx;
	HAL_SPI_TransmitReceive(&hspi1, &byte, &rx, 1, 10);
 8001066:	f107 020f 	add.w	r2, r7, #15
 800106a:	1df9      	adds	r1, r7, #7
 800106c:	230a      	movs	r3, #10
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2301      	movs	r3, #1
 8001072:	4803      	ldr	r0, [pc, #12]	; (8001080 <W6100SpiWriteByte+0x24>)
 8001074:	f006 fa3a 	bl	80074ec <HAL_SPI_TransmitReceive>
#endif
    return 0;
 8001078:	bf00      	nop
}
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	24000304 	.word	0x24000304

08001084 <W6100SpiReadBurst>:
void W6100SpiReadBurst(uint8_t* buf, datasize_t len)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	f5ad 5d7a 	sub.w	sp, sp, #16000	; 0x3e80
 800108a:	b084      	sub	sp, #16
 800108c:	af02      	add	r7, sp, #8
 800108e:	f607 6388 	addw	r3, r7, #3720	; 0xe88
 8001092:	f6a3 6384 	subw	r3, r3, #3716	; 0xe84
 8001096:	6018      	str	r0, [r3, #0]
 8001098:	460a      	mov	r2, r1
 800109a:	f607 6388 	addw	r3, r7, #3720	; 0xe88
 800109e:	f6a3 6386 	subw	r3, r3, #3718	; 0xe86
 80010a2:	801a      	strh	r2, [r3, #0]
	uint8_t tx[Send_data_size];
	HAL_SPI_TransmitReceive(&hspi1, tx, buf, len, 10);
 80010a4:	f607 6388 	addw	r3, r7, #3720	; 0xe88
 80010a8:	f6a3 6386 	subw	r3, r3, #3718	; 0xe86
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	f607 6288 	addw	r2, r7, #3720	; 0xe88
 80010b2:	f6a2 6284 	subw	r2, r2, #3716	; 0xe84
 80010b6:	f107 0108 	add.w	r1, r7, #8
 80010ba:	200a      	movs	r0, #10
 80010bc:	9000      	str	r0, [sp, #0]
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <W6100SpiReadBurst+0x50>)
 80010c2:	f006 fa13 	bl	80074ec <HAL_SPI_TransmitReceive>
	//HAL_SPI_Receive(&hspi1, buf, len, 10);
}
 80010c6:	bf00      	nop
 80010c8:	f507 577a 	add.w	r7, r7, #16000	; 0x3e80
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	24000304 	.word	0x24000304

080010d8 <W6100SpiWriteBurst>:
void W6100SpiWriteBurst(uint8_t* buf, datasize_t len)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	f5ad 5d7a 	sub.w	sp, sp, #16000	; 0x3e80
 80010de:	b084      	sub	sp, #16
 80010e0:	af02      	add	r7, sp, #8
 80010e2:	f607 6388 	addw	r3, r7, #3720	; 0xe88
 80010e6:	f6a3 6384 	subw	r3, r3, #3716	; 0xe84
 80010ea:	6018      	str	r0, [r3, #0]
 80010ec:	460a      	mov	r2, r1
 80010ee:	f607 6388 	addw	r3, r7, #3720	; 0xe88
 80010f2:	f6a3 6386 	subw	r3, r3, #3718	; 0xe86
 80010f6:	801a      	strh	r2, [r3, #0]
	uint8_t rx[Send_data_size];
	HAL_SPI_TransmitReceive(&hspi1, buf, rx, len, 10);
 80010f8:	f607 6388 	addw	r3, r7, #3720	; 0xe88
 80010fc:	f6a3 6386 	subw	r3, r3, #3718	; 0xe86
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	f107 0208 	add.w	r2, r7, #8
 8001106:	f607 6188 	addw	r1, r7, #3720	; 0xe88
 800110a:	f6a1 6184 	subw	r1, r1, #3716	; 0xe84
 800110e:	200a      	movs	r0, #10
 8001110:	9000      	str	r0, [sp, #0]
 8001112:	6809      	ldr	r1, [r1, #0]
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <W6100SpiWriteBurst+0x50>)
 8001116:	f006 f9e9 	bl	80074ec <HAL_SPI_TransmitReceive>
}
 800111a:	bf00      	nop
 800111c:	f507 577a 	add.w	r7, r7, #16000	; 0x3e80
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	24000304 	.word	0x24000304

0800112c <W6100CsEnable>:
void W6100CsEnable(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W6100_CS_GPIO_Port, W6100_CS_Pin, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001136:	4802      	ldr	r0, [pc, #8]	; (8001140 <W6100CsEnable+0x14>)
 8001138:	f003 fbf4 	bl	8004924 <HAL_GPIO_WritePin>
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	58020c00 	.word	0x58020c00

08001144 <W6100CsDisable>:

void W6100CsDisable(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W6100_CS_GPIO_Port, W6100_CS_Pin, GPIO_PIN_SET);
 8001148:	2201      	movs	r2, #1
 800114a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800114e:	4802      	ldr	r0, [pc, #8]	; (8001158 <W6100CsDisable+0x14>)
 8001150:	f003 fbe8 	bl	8004924 <HAL_GPIO_WritePin>
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	58020c00 	.word	0x58020c00

0800115c <W6100Initialze>:

void W6100Initialze(void)
{
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
	//W6100Reset();

#if _WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_
/* SPI method callback registration */
	#if defined SPI_DMA
	reg_wizchip_spi_cbfunc(W6100SpiReadByte, W6100SpiWriteByte, W6100SpiReadBurst, W6100SpiWriteBurst);
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <W6100Initialze+0x88>)
 8001164:	4a20      	ldr	r2, [pc, #128]	; (80011e8 <W6100Initialze+0x8c>)
 8001166:	4921      	ldr	r1, [pc, #132]	; (80011ec <W6100Initialze+0x90>)
 8001168:	4821      	ldr	r0, [pc, #132]	; (80011f0 <W6100Initialze+0x94>)
 800116a:	f010 f8d9 	bl	8011320 <reg_wizchip_spi_cbfunc>
	#else
	reg_wizchip_spi_cbfunc(W6100SpiReadByte, W6100SpiWriteByte, 0, 0);
	#endif
	/* CS function register */
	reg_wizchip_cs_cbfunc(W6100CsEnable, W6100CsDisable);
 800116e:	4921      	ldr	r1, [pc, #132]	; (80011f4 <W6100Initialze+0x98>)
 8001170:	4821      	ldr	r0, [pc, #132]	; (80011f8 <W6100Initialze+0x9c>)
 8001172:	f010 f8af 	bl	80112d4 <reg_wizchip_cs_cbfunc>
	reg_wizchip_bus_cbfunc(W6100BusReadByte, W6100BusWriteByte, 0, 0);
	#endif
#endif
	uint8_t temp;
	//unsigned char W6100_AdrSet[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
	unsigned char W6100_AdrSet[2][8] = {{16, 0, 0, 0, 0, 0, 0, 0}, {16, 0, 0, 0, 0, 0, 0, 0}};
 8001176:	4b21      	ldr	r3, [pc, #132]	; (80011fc <W6100Initialze+0xa0>)
 8001178:	1d3c      	adds	r4, r7, #4
 800117a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800117c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	do
	{
		if (ctlwizchip(CW_GET_PHYLINK, (void *)&temp) == -1)
 8001180:	f107 0317 	add.w	r3, r7, #23
 8001184:	4619      	mov	r1, r3
 8001186:	2017      	movs	r0, #23
 8001188:	f010 f910 	bl	80113ac <ctlwizchip>
 800118c:	4603      	mov	r3, r0
 800118e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001192:	d102      	bne.n	800119a <W6100Initialze+0x3e>
		{
			printf("Unknown PHY link status.\r\n");
 8001194:	481a      	ldr	r0, [pc, #104]	; (8001200 <W6100Initialze+0xa4>)
 8001196:	f011 fe7d 	bl	8012e94 <puts>
		}
	} while (temp == PHY_LINK_OFF);
 800119a:	7dfb      	ldrb	r3, [r7, #23]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0ef      	beq.n	8001180 <W6100Initialze+0x24>
	printf("PHY OK.\r\n");
 80011a0:	4818      	ldr	r0, [pc, #96]	; (8001204 <W6100Initialze+0xa8>)
 80011a2:	f011 fe77 	bl	8012e94 <puts>

	temp = IK_DEST_UNREACH;
 80011a6:	2302      	movs	r3, #2
 80011a8:	75fb      	strb	r3, [r7, #23]

	if (ctlwizchip(CW_INIT_WIZCHIP, (void *)W6100_AdrSet) == -1)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	2004      	movs	r0, #4
 80011b0:	f010 f8fc 	bl	80113ac <ctlwizchip>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ba:	d102      	bne.n	80011c2 <W6100Initialze+0x66>
	{
		printf("W6100 initialized fail.\r\n");
 80011bc:	4812      	ldr	r0, [pc, #72]	; (8001208 <W6100Initialze+0xac>)
 80011be:	f011 fe69 	bl	8012e94 <puts>
	}

	if (ctlwizchip(CW_SET_INTRMASK, &temp) == -1)
 80011c2:	f107 0317 	add.w	r3, r7, #23
 80011c6:	4619      	mov	r1, r3
 80011c8:	2007      	movs	r0, #7
 80011ca:	f010 f8ef 	bl	80113ac <ctlwizchip>
 80011ce:	4603      	mov	r3, r0
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d4:	d102      	bne.n	80011dc <W6100Initialze+0x80>
	{
		printf("W6100 interrupt\r\n");
 80011d6:	480d      	ldr	r0, [pc, #52]	; (800120c <W6100Initialze+0xb0>)
 80011d8:	f011 fe5c 	bl	8012e94 <puts>
	}
	//printf("interrupt mask: %02x\r\n",getIMR());
}
 80011dc:	bf00      	nop
 80011de:	371c      	adds	r7, #28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd90      	pop	{r4, r7, pc}
 80011e4:	080010d9 	.word	0x080010d9
 80011e8:	08001085 	.word	0x08001085
 80011ec:	0800105d 	.word	0x0800105d
 80011f0:	08001031 	.word	0x08001031
 80011f4:	08001145 	.word	0x08001145
 80011f8:	0800112d 	.word	0x0800112d
 80011fc:	08014e84 	.word	0x08014e84
 8001200:	08014e2c 	.word	0x08014e2c
 8001204:	08014e48 	.word	0x08014e48
 8001208:	08014e54 	.word	0x08014e54
 800120c:	08014e70 	.word	0x08014e70

08001210 <print_network_information>:
void print_network_information(void)
{
 8001210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001214:	b094      	sub	sp, #80	; 0x50
 8001216:	af0e      	add	r7, sp, #56	; 0x38
	wizchip_getnetinfo(&gWIZNETINFO);
 8001218:	48a4      	ldr	r0, [pc, #656]	; (80014ac <print_network_information+0x29c>)
 800121a:	f010 fe33 	bl	8011e84 <wizchip_getnetinfo>
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 800121e:	4ba3      	ldr	r3, [pc, #652]	; (80014ac <print_network_information+0x29c>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	4ba1      	ldr	r3, [pc, #644]	; (80014ac <print_network_information+0x29c>)
 8001226:	785b      	ldrb	r3, [r3, #1]
 8001228:	461c      	mov	r4, r3
 800122a:	4ba0      	ldr	r3, [pc, #640]	; (80014ac <print_network_information+0x29c>)
 800122c:	789b      	ldrb	r3, [r3, #2]
 800122e:	461d      	mov	r5, r3
 8001230:	4b9e      	ldr	r3, [pc, #632]	; (80014ac <print_network_information+0x29c>)
 8001232:	78db      	ldrb	r3, [r3, #3]
 8001234:	461a      	mov	r2, r3
 8001236:	4b9d      	ldr	r3, [pc, #628]	; (80014ac <print_network_information+0x29c>)
 8001238:	791b      	ldrb	r3, [r3, #4]
 800123a:	4619      	mov	r1, r3
 800123c:	4b9b      	ldr	r3, [pc, #620]	; (80014ac <print_network_information+0x29c>)
 800123e:	795b      	ldrb	r3, [r3, #5]
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	9101      	str	r1, [sp, #4]
 8001244:	9200      	str	r2, [sp, #0]
 8001246:	462b      	mov	r3, r5
 8001248:	4622      	mov	r2, r4
 800124a:	4601      	mov	r1, r0
 800124c:	4898      	ldr	r0, [pc, #608]	; (80014b0 <print_network_information+0x2a0>)
 800124e:	f011 fd85 	bl	8012d5c <iprintf>
	printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 8001252:	4b96      	ldr	r3, [pc, #600]	; (80014ac <print_network_information+0x29c>)
 8001254:	799b      	ldrb	r3, [r3, #6]
 8001256:	4619      	mov	r1, r3
 8001258:	4b94      	ldr	r3, [pc, #592]	; (80014ac <print_network_information+0x29c>)
 800125a:	79db      	ldrb	r3, [r3, #7]
 800125c:	461a      	mov	r2, r3
 800125e:	4b93      	ldr	r3, [pc, #588]	; (80014ac <print_network_information+0x29c>)
 8001260:	7a1b      	ldrb	r3, [r3, #8]
 8001262:	4618      	mov	r0, r3
 8001264:	4b91      	ldr	r3, [pc, #580]	; (80014ac <print_network_information+0x29c>)
 8001266:	7a5b      	ldrb	r3, [r3, #9]
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	4603      	mov	r3, r0
 800126c:	4891      	ldr	r0, [pc, #580]	; (80014b4 <print_network_information+0x2a4>)
 800126e:	f011 fd75 	bl	8012d5c <iprintf>
	printf("SN Mask	   : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8001272:	4b8e      	ldr	r3, [pc, #568]	; (80014ac <print_network_information+0x29c>)
 8001274:	7a9b      	ldrb	r3, [r3, #10]
 8001276:	4619      	mov	r1, r3
 8001278:	4b8c      	ldr	r3, [pc, #560]	; (80014ac <print_network_information+0x29c>)
 800127a:	7adb      	ldrb	r3, [r3, #11]
 800127c:	461a      	mov	r2, r3
 800127e:	4b8b      	ldr	r3, [pc, #556]	; (80014ac <print_network_information+0x29c>)
 8001280:	7b1b      	ldrb	r3, [r3, #12]
 8001282:	4618      	mov	r0, r3
 8001284:	4b89      	ldr	r3, [pc, #548]	; (80014ac <print_network_information+0x29c>)
 8001286:	7b5b      	ldrb	r3, [r3, #13]
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	4603      	mov	r3, r0
 800128c:	488a      	ldr	r0, [pc, #552]	; (80014b8 <print_network_information+0x2a8>)
 800128e:	f011 fd65 	bl	8012d5c <iprintf>
	printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8001292:	4b86      	ldr	r3, [pc, #536]	; (80014ac <print_network_information+0x29c>)
 8001294:	7b9b      	ldrb	r3, [r3, #14]
 8001296:	4619      	mov	r1, r3
 8001298:	4b84      	ldr	r3, [pc, #528]	; (80014ac <print_network_information+0x29c>)
 800129a:	7bdb      	ldrb	r3, [r3, #15]
 800129c:	461a      	mov	r2, r3
 800129e:	4b83      	ldr	r3, [pc, #524]	; (80014ac <print_network_information+0x29c>)
 80012a0:	7c1b      	ldrb	r3, [r3, #16]
 80012a2:	4618      	mov	r0, r3
 80012a4:	4b81      	ldr	r3, [pc, #516]	; (80014ac <print_network_information+0x29c>)
 80012a6:	7c5b      	ldrb	r3, [r3, #17]
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	4603      	mov	r3, r0
 80012ac:	4883      	ldr	r0, [pc, #524]	; (80014bc <print_network_information+0x2ac>)
 80012ae:	f011 fd55 	bl	8012d5c <iprintf>
	printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 80012b2:	4b7e      	ldr	r3, [pc, #504]	; (80014ac <print_network_information+0x29c>)
 80012b4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80012b8:	4619      	mov	r1, r3
 80012ba:	4b7c      	ldr	r3, [pc, #496]	; (80014ac <print_network_information+0x29c>)
 80012bc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b7a      	ldr	r3, [pc, #488]	; (80014ac <print_network_information+0x29c>)
 80012c4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80012c8:	4618      	mov	r0, r3
 80012ca:	4b78      	ldr	r3, [pc, #480]	; (80014ac <print_network_information+0x29c>)
 80012cc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	4603      	mov	r3, r0
 80012d4:	487a      	ldr	r0, [pc, #488]	; (80014c0 <print_network_information+0x2b0>)
 80012d6:	f011 fd41 	bl	8012d5c <iprintf>
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 80012da:	4b74      	ldr	r3, [pc, #464]	; (80014ac <print_network_information+0x29c>)
 80012dc:	7c9b      	ldrb	r3, [r3, #18]
 80012de:	469c      	mov	ip, r3
 80012e0:	4b72      	ldr	r3, [pc, #456]	; (80014ac <print_network_information+0x29c>)
 80012e2:	7cdb      	ldrb	r3, [r3, #19]
 80012e4:	469e      	mov	lr, r3
 80012e6:	4b71      	ldr	r3, [pc, #452]	; (80014ac <print_network_information+0x29c>)
 80012e8:	7d1b      	ldrb	r3, [r3, #20]
 80012ea:	4698      	mov	r8, r3
 80012ec:	4b6f      	ldr	r3, [pc, #444]	; (80014ac <print_network_information+0x29c>)
 80012ee:	7d5b      	ldrb	r3, [r3, #21]
 80012f0:	4618      	mov	r0, r3
									gWIZNETINFO.lla[4],gWIZNETINFO.lla[5],gWIZNETINFO.lla[6],gWIZNETINFO.lla[7],\
 80012f2:	4b6e      	ldr	r3, [pc, #440]	; (80014ac <print_network_information+0x29c>)
 80012f4:	7d9b      	ldrb	r3, [r3, #22]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 80012f6:	461c      	mov	r4, r3
									gWIZNETINFO.lla[4],gWIZNETINFO.lla[5],gWIZNETINFO.lla[6],gWIZNETINFO.lla[7],\
 80012f8:	4b6c      	ldr	r3, [pc, #432]	; (80014ac <print_network_information+0x29c>)
 80012fa:	7ddb      	ldrb	r3, [r3, #23]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 80012fc:	461d      	mov	r5, r3
									gWIZNETINFO.lla[4],gWIZNETINFO.lla[5],gWIZNETINFO.lla[6],gWIZNETINFO.lla[7],\
 80012fe:	4b6b      	ldr	r3, [pc, #428]	; (80014ac <print_network_information+0x29c>)
 8001300:	7e1b      	ldrb	r3, [r3, #24]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 8001302:	461e      	mov	r6, r3
									gWIZNETINFO.lla[4],gWIZNETINFO.lla[5],gWIZNETINFO.lla[6],gWIZNETINFO.lla[7],\
 8001304:	4b69      	ldr	r3, [pc, #420]	; (80014ac <print_network_information+0x29c>)
 8001306:	7e5b      	ldrb	r3, [r3, #25]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 8001308:	617b      	str	r3, [r7, #20]
									gWIZNETINFO.lla[8],gWIZNETINFO.lla[9],gWIZNETINFO.lla[10],gWIZNETINFO.lla[11],\
 800130a:	4b68      	ldr	r3, [pc, #416]	; (80014ac <print_network_information+0x29c>)
 800130c:	7e9b      	ldrb	r3, [r3, #26]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 800130e:	613b      	str	r3, [r7, #16]
									gWIZNETINFO.lla[8],gWIZNETINFO.lla[9],gWIZNETINFO.lla[10],gWIZNETINFO.lla[11],\
 8001310:	4b66      	ldr	r3, [pc, #408]	; (80014ac <print_network_information+0x29c>)
 8001312:	7edb      	ldrb	r3, [r3, #27]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 8001314:	60fb      	str	r3, [r7, #12]
									gWIZNETINFO.lla[8],gWIZNETINFO.lla[9],gWIZNETINFO.lla[10],gWIZNETINFO.lla[11],\
 8001316:	4b65      	ldr	r3, [pc, #404]	; (80014ac <print_network_information+0x29c>)
 8001318:	7f1b      	ldrb	r3, [r3, #28]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 800131a:	60bb      	str	r3, [r7, #8]
									gWIZNETINFO.lla[8],gWIZNETINFO.lla[9],gWIZNETINFO.lla[10],gWIZNETINFO.lla[11],\
 800131c:	4b63      	ldr	r3, [pc, #396]	; (80014ac <print_network_information+0x29c>)
 800131e:	7f5b      	ldrb	r3, [r3, #29]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 8001320:	607b      	str	r3, [r7, #4]
									gWIZNETINFO.lla[12],gWIZNETINFO.lla[13],gWIZNETINFO.lla[14],gWIZNETINFO.lla[15]);
 8001322:	4b62      	ldr	r3, [pc, #392]	; (80014ac <print_network_information+0x29c>)
 8001324:	7f9b      	ldrb	r3, [r3, #30]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 8001326:	603b      	str	r3, [r7, #0]
									gWIZNETINFO.lla[12],gWIZNETINFO.lla[13],gWIZNETINFO.lla[14],gWIZNETINFO.lla[15]);
 8001328:	4b60      	ldr	r3, [pc, #384]	; (80014ac <print_network_information+0x29c>)
 800132a:	7fdb      	ldrb	r3, [r3, #31]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 800132c:	4619      	mov	r1, r3
									gWIZNETINFO.lla[12],gWIZNETINFO.lla[13],gWIZNETINFO.lla[14],gWIZNETINFO.lla[15]);
 800132e:	4b5f      	ldr	r3, [pc, #380]	; (80014ac <print_network_information+0x29c>)
 8001330:	f893 3020 	ldrb.w	r3, [r3, #32]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 8001334:	461a      	mov	r2, r3
									gWIZNETINFO.lla[12],gWIZNETINFO.lla[13],gWIZNETINFO.lla[14],gWIZNETINFO.lla[15]);
 8001336:	4b5d      	ldr	r3, [pc, #372]	; (80014ac <print_network_information+0x29c>)
 8001338:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 800133c:	930c      	str	r3, [sp, #48]	; 0x30
 800133e:	920b      	str	r2, [sp, #44]	; 0x2c
 8001340:	910a      	str	r1, [sp, #40]	; 0x28
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	9209      	str	r2, [sp, #36]	; 0x24
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	9208      	str	r2, [sp, #32]
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	9207      	str	r2, [sp, #28]
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	9206      	str	r2, [sp, #24]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	9205      	str	r2, [sp, #20]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	9304      	str	r3, [sp, #16]
 800135a:	9603      	str	r6, [sp, #12]
 800135c:	9502      	str	r5, [sp, #8]
 800135e:	9401      	str	r4, [sp, #4]
 8001360:	9000      	str	r0, [sp, #0]
 8001362:	4643      	mov	r3, r8
 8001364:	4672      	mov	r2, lr
 8001366:	4661      	mov	r1, ip
 8001368:	4856      	ldr	r0, [pc, #344]	; (80014c4 <print_network_information+0x2b4>)
 800136a:	f011 fcf7 	bl	8012d5c <iprintf>
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 800136e:	4b4f      	ldr	r3, [pc, #316]	; (80014ac <print_network_information+0x29c>)
 8001370:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001374:	469c      	mov	ip, r3
 8001376:	4b4d      	ldr	r3, [pc, #308]	; (80014ac <print_network_information+0x29c>)
 8001378:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800137c:	469e      	mov	lr, r3
 800137e:	4b4b      	ldr	r3, [pc, #300]	; (80014ac <print_network_information+0x29c>)
 8001380:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001384:	4698      	mov	r8, r3
 8001386:	4b49      	ldr	r3, [pc, #292]	; (80014ac <print_network_information+0x29c>)
 8001388:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800138c:	4618      	mov	r0, r3
									gWIZNETINFO.gua[4],gWIZNETINFO.gua[5],gWIZNETINFO.gua[6],gWIZNETINFO.gua[7],\
 800138e:	4b47      	ldr	r3, [pc, #284]	; (80014ac <print_network_information+0x29c>)
 8001390:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 8001394:	461c      	mov	r4, r3
									gWIZNETINFO.gua[4],gWIZNETINFO.gua[5],gWIZNETINFO.gua[6],gWIZNETINFO.gua[7],\
 8001396:	4b45      	ldr	r3, [pc, #276]	; (80014ac <print_network_information+0x29c>)
 8001398:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 800139c:	461d      	mov	r5, r3
									gWIZNETINFO.gua[4],gWIZNETINFO.gua[5],gWIZNETINFO.gua[6],gWIZNETINFO.gua[7],\
 800139e:	4b43      	ldr	r3, [pc, #268]	; (80014ac <print_network_information+0x29c>)
 80013a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80013a4:	461e      	mov	r6, r3
									gWIZNETINFO.gua[4],gWIZNETINFO.gua[5],gWIZNETINFO.gua[6],gWIZNETINFO.gua[7],\
 80013a6:	4b41      	ldr	r3, [pc, #260]	; (80014ac <print_network_information+0x29c>)
 80013a8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80013ac:	617b      	str	r3, [r7, #20]
									gWIZNETINFO.gua[8],gWIZNETINFO.gua[9],gWIZNETINFO.gua[10],gWIZNETINFO.gua[11],\
 80013ae:	4b3f      	ldr	r3, [pc, #252]	; (80014ac <print_network_information+0x29c>)
 80013b0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80013b4:	613b      	str	r3, [r7, #16]
									gWIZNETINFO.gua[8],gWIZNETINFO.gua[9],gWIZNETINFO.gua[10],gWIZNETINFO.gua[11],\
 80013b6:	4b3d      	ldr	r3, [pc, #244]	; (80014ac <print_network_information+0x29c>)
 80013b8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80013bc:	60fb      	str	r3, [r7, #12]
									gWIZNETINFO.gua[8],gWIZNETINFO.gua[9],gWIZNETINFO.gua[10],gWIZNETINFO.gua[11],\
 80013be:	4b3b      	ldr	r3, [pc, #236]	; (80014ac <print_network_information+0x29c>)
 80013c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80013c4:	60bb      	str	r3, [r7, #8]
									gWIZNETINFO.gua[8],gWIZNETINFO.gua[9],gWIZNETINFO.gua[10],gWIZNETINFO.gua[11],\
 80013c6:	4b39      	ldr	r3, [pc, #228]	; (80014ac <print_network_information+0x29c>)
 80013c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80013cc:	607b      	str	r3, [r7, #4]
									gWIZNETINFO.gua[12],gWIZNETINFO.gua[13],gWIZNETINFO.gua[14],gWIZNETINFO.gua[15]);
 80013ce:	4b37      	ldr	r3, [pc, #220]	; (80014ac <print_network_information+0x29c>)
 80013d0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80013d4:	603b      	str	r3, [r7, #0]
									gWIZNETINFO.gua[12],gWIZNETINFO.gua[13],gWIZNETINFO.gua[14],gWIZNETINFO.gua[15]);
 80013d6:	4b35      	ldr	r3, [pc, #212]	; (80014ac <print_network_information+0x29c>)
 80013d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80013dc:	4619      	mov	r1, r3
									gWIZNETINFO.gua[12],gWIZNETINFO.gua[13],gWIZNETINFO.gua[14],gWIZNETINFO.gua[15]);
 80013de:	4b33      	ldr	r3, [pc, #204]	; (80014ac <print_network_information+0x29c>)
 80013e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80013e4:	461a      	mov	r2, r3
									gWIZNETINFO.gua[12],gWIZNETINFO.gua[13],gWIZNETINFO.gua[14],gWIZNETINFO.gua[15]);
 80013e6:	4b31      	ldr	r3, [pc, #196]	; (80014ac <print_network_information+0x29c>)
 80013e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80013ec:	930c      	str	r3, [sp, #48]	; 0x30
 80013ee:	920b      	str	r2, [sp, #44]	; 0x2c
 80013f0:	910a      	str	r1, [sp, #40]	; 0x28
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	9209      	str	r2, [sp, #36]	; 0x24
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	9208      	str	r2, [sp, #32]
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	9207      	str	r2, [sp, #28]
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	9206      	str	r2, [sp, #24]
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	9205      	str	r2, [sp, #20]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	9304      	str	r3, [sp, #16]
 800140a:	9603      	str	r6, [sp, #12]
 800140c:	9502      	str	r5, [sp, #8]
 800140e:	9401      	str	r4, [sp, #4]
 8001410:	9000      	str	r0, [sp, #0]
 8001412:	4643      	mov	r3, r8
 8001414:	4672      	mov	r2, lr
 8001416:	4661      	mov	r1, ip
 8001418:	482b      	ldr	r0, [pc, #172]	; (80014c8 <print_network_information+0x2b8>)
 800141a:	f011 fc9f 	bl	8012d5c <iprintf>
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 800141e:	4b23      	ldr	r3, [pc, #140]	; (80014ac <print_network_information+0x29c>)
 8001420:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001424:	469c      	mov	ip, r3
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <print_network_information+0x29c>)
 8001428:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800142c:	469e      	mov	lr, r3
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <print_network_information+0x29c>)
 8001430:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001434:	4698      	mov	r8, r3
 8001436:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <print_network_information+0x29c>)
 8001438:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800143c:	4618      	mov	r0, r3
									gWIZNETINFO.sn6[4],gWIZNETINFO.sn6[5],gWIZNETINFO.sn6[6],gWIZNETINFO.sn6[7],\
 800143e:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <print_network_information+0x29c>)
 8001440:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8001444:	461c      	mov	r4, r3
									gWIZNETINFO.sn6[4],gWIZNETINFO.sn6[5],gWIZNETINFO.sn6[6],gWIZNETINFO.sn6[7],\
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <print_network_information+0x29c>)
 8001448:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 800144c:	461d      	mov	r5, r3
									gWIZNETINFO.sn6[4],gWIZNETINFO.sn6[5],gWIZNETINFO.sn6[6],gWIZNETINFO.sn6[7],\
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <print_network_information+0x29c>)
 8001450:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8001454:	461e      	mov	r6, r3
									gWIZNETINFO.sn6[4],gWIZNETINFO.sn6[5],gWIZNETINFO.sn6[6],gWIZNETINFO.sn6[7],\
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <print_network_information+0x29c>)
 8001458:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 800145c:	617b      	str	r3, [r7, #20]
									gWIZNETINFO.sn6[8],gWIZNETINFO.sn6[9],gWIZNETINFO.sn6[10],gWIZNETINFO.sn6[11],\
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <print_network_information+0x29c>)
 8001460:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8001464:	613b      	str	r3, [r7, #16]
									gWIZNETINFO.sn6[8],gWIZNETINFO.sn6[9],gWIZNETINFO.sn6[10],gWIZNETINFO.sn6[11],\
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <print_network_information+0x29c>)
 8001468:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 800146c:	60fb      	str	r3, [r7, #12]
									gWIZNETINFO.sn6[8],gWIZNETINFO.sn6[9],gWIZNETINFO.sn6[10],gWIZNETINFO.sn6[11],\
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <print_network_information+0x29c>)
 8001470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8001474:	60bb      	str	r3, [r7, #8]
									gWIZNETINFO.sn6[8],gWIZNETINFO.sn6[9],gWIZNETINFO.sn6[10],gWIZNETINFO.sn6[11],\
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <print_network_information+0x29c>)
 8001478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 800147c:	607b      	str	r3, [r7, #4]
									gWIZNETINFO.sn6[12],gWIZNETINFO.sn6[13],gWIZNETINFO.sn6[14],gWIZNETINFO.sn6[15]);
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <print_network_information+0x29c>)
 8001480:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8001484:	603b      	str	r3, [r7, #0]
									gWIZNETINFO.sn6[12],gWIZNETINFO.sn6[13],gWIZNETINFO.sn6[14],gWIZNETINFO.sn6[15]);
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <print_network_information+0x29c>)
 8001488:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 800148c:	4619      	mov	r1, r3
									gWIZNETINFO.sn6[12],gWIZNETINFO.sn6[13],gWIZNETINFO.sn6[14],gWIZNETINFO.sn6[15]);
 800148e:	4b07      	ldr	r3, [pc, #28]	; (80014ac <print_network_information+0x29c>)
 8001490:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8001494:	461a      	mov	r2, r3
									gWIZNETINFO.sn6[12],gWIZNETINFO.sn6[13],gWIZNETINFO.sn6[14],gWIZNETINFO.sn6[15]);
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <print_network_information+0x29c>)
 8001498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 800149c:	930c      	str	r3, [sp, #48]	; 0x30
 800149e:	920b      	str	r2, [sp, #44]	; 0x2c
 80014a0:	910a      	str	r1, [sp, #40]	; 0x28
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	9209      	str	r2, [sp, #36]	; 0x24
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	e010      	b.n	80014cc <print_network_information+0x2bc>
 80014aa:	bf00      	nop
 80014ac:	24000000 	.word	0x24000000
 80014b0:	08014e94 	.word	0x08014e94
 80014b4:	08014ec4 	.word	0x08014ec4
 80014b8:	08014ee0 	.word	0x08014ee0
 80014bc:	08014efc 	.word	0x08014efc
 80014c0:	08014f18 	.word	0x08014f18
 80014c4:	08014f34 	.word	0x08014f34
 80014c8:	08014f88 	.word	0x08014f88
 80014cc:	9208      	str	r2, [sp, #32]
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	9207      	str	r2, [sp, #28]
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	9206      	str	r2, [sp, #24]
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	9205      	str	r2, [sp, #20]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	9304      	str	r3, [sp, #16]
 80014de:	9603      	str	r6, [sp, #12]
 80014e0:	9502      	str	r5, [sp, #8]
 80014e2:	9401      	str	r4, [sp, #4]
 80014e4:	9000      	str	r0, [sp, #0]
 80014e6:	4643      	mov	r3, r8
 80014e8:	4672      	mov	r2, lr
 80014ea:	4661      	mov	r1, ip
 80014ec:	482f      	ldr	r0, [pc, #188]	; (80015ac <print_network_information+0x39c>)
 80014ee:	f011 fc35 	bl	8012d5c <iprintf>
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 80014f2:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <print_network_information+0x3a0>)
 80014f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80014f8:	469c      	mov	ip, r3
 80014fa:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <print_network_information+0x3a0>)
 80014fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001500:	469e      	mov	lr, r3
 8001502:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <print_network_information+0x3a0>)
 8001504:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001508:	4698      	mov	r8, r3
 800150a:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <print_network_information+0x3a0>)
 800150c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001510:	4618      	mov	r0, r3
									gWIZNETINFO.gw6[4],gWIZNETINFO.gw6[5],gWIZNETINFO.gw6[6],gWIZNETINFO.gw6[7],\
 8001512:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <print_network_information+0x3a0>)
 8001514:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001518:	461c      	mov	r4, r3
									gWIZNETINFO.gw6[4],gWIZNETINFO.gw6[5],gWIZNETINFO.gw6[6],gWIZNETINFO.gw6[7],\
 800151a:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <print_network_information+0x3a0>)
 800151c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001520:	461d      	mov	r5, r3
									gWIZNETINFO.gw6[4],gWIZNETINFO.gw6[5],gWIZNETINFO.gw6[6],gWIZNETINFO.gw6[7],\
 8001522:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <print_network_information+0x3a0>)
 8001524:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001528:	461e      	mov	r6, r3
									gWIZNETINFO.gw6[4],gWIZNETINFO.gw6[5],gWIZNETINFO.gw6[6],gWIZNETINFO.gw6[7],\
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <print_network_information+0x3a0>)
 800152c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001530:	617b      	str	r3, [r7, #20]
									gWIZNETINFO.gw6[8],gWIZNETINFO.gw6[9],gWIZNETINFO.gw6[10],gWIZNETINFO.gw6[11],\
 8001532:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <print_network_information+0x3a0>)
 8001534:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001538:	613b      	str	r3, [r7, #16]
									gWIZNETINFO.gw6[8],gWIZNETINFO.gw6[9],gWIZNETINFO.gw6[10],gWIZNETINFO.gw6[11],\
 800153a:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <print_network_information+0x3a0>)
 800153c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001540:	60fb      	str	r3, [r7, #12]
									gWIZNETINFO.gw6[8],gWIZNETINFO.gw6[9],gWIZNETINFO.gw6[10],gWIZNETINFO.gw6[11],\
 8001542:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <print_network_information+0x3a0>)
 8001544:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001548:	60bb      	str	r3, [r7, #8]
									gWIZNETINFO.gw6[8],gWIZNETINFO.gw6[9],gWIZNETINFO.gw6[10],gWIZNETINFO.gw6[11],\
 800154a:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <print_network_information+0x3a0>)
 800154c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001550:	607b      	str	r3, [r7, #4]
									gWIZNETINFO.gw6[12],gWIZNETINFO.gw6[13],gWIZNETINFO.gw6[14],gWIZNETINFO.gw6[15]);
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <print_network_information+0x3a0>)
 8001554:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001558:	603b      	str	r3, [r7, #0]
									gWIZNETINFO.gw6[12],gWIZNETINFO.gw6[13],gWIZNETINFO.gw6[14],gWIZNETINFO.gw6[15]);
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <print_network_information+0x3a0>)
 800155c:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001560:	4619      	mov	r1, r3
									gWIZNETINFO.gw6[12],gWIZNETINFO.gw6[13],gWIZNETINFO.gw6[14],gWIZNETINFO.gw6[15]);
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <print_network_information+0x3a0>)
 8001564:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001568:	461a      	mov	r2, r3
									gWIZNETINFO.gw6[12],gWIZNETINFO.gw6[13],gWIZNETINFO.gw6[14],gWIZNETINFO.gw6[15]);
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <print_network_information+0x3a0>)
 800156c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8001570:	930c      	str	r3, [sp, #48]	; 0x30
 8001572:	920b      	str	r2, [sp, #44]	; 0x2c
 8001574:	910a      	str	r1, [sp, #40]	; 0x28
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	9209      	str	r2, [sp, #36]	; 0x24
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	9208      	str	r2, [sp, #32]
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	9207      	str	r2, [sp, #28]
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	9206      	str	r2, [sp, #24]
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	9205      	str	r2, [sp, #20]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	9304      	str	r3, [sp, #16]
 800158e:	9603      	str	r6, [sp, #12]
 8001590:	9502      	str	r5, [sp, #8]
 8001592:	9401      	str	r4, [sp, #4]
 8001594:	9000      	str	r0, [sp, #0]
 8001596:	4643      	mov	r3, r8
 8001598:	4672      	mov	r2, lr
 800159a:	4661      	mov	r1, ip
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <print_network_information+0x3a4>)
 800159e:	f011 fbdd 	bl	8012d5c <iprintf>
}
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015ac:	08014fdc 	.word	0x08014fdc
 80015b0:	24000000 	.word	0x24000000
 80015b4:	08015030 	.word	0x08015030

080015b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  tcps_status(0, 5001, AS_IPV4);
 80015c0:	2202      	movs	r2, #2
 80015c2:	f241 3189 	movw	r1, #5001	; 0x1389
 80015c6:	2000      	movs	r0, #0
 80015c8:	f00e fada 	bl	800fb80 <tcps_status>
  {
 80015cc:	e7f8      	b.n	80015c0 <StartDefaultTask+0x8>
	...

080015d0 <StartCoreMark>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCoreMark */
void StartCoreMark(void *argument)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCoreMark */
	printf("Start Core Mark Task\r\n");
 80015d8:	4804      	ldr	r0, [pc, #16]	; (80015ec <StartCoreMark+0x1c>)
 80015da:	f011 fc5b 	bl	8012e94 <puts>
  MX_CoreMarkApp_Init();
 80015de:	f000 fbfb 	bl	8001dd8 <MX_CoreMarkApp_Init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80015e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015e6:	f009 fd0b 	bl	800b000 <osDelay>
 80015ea:	e7fa      	b.n	80015e2 <StartCoreMark+0x12>
 80015ec:	08015084 	.word	0x08015084

080015f0 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80015f6:	463b      	mov	r3, r7
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001602:	f000 fd47 	bl	8002094 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001606:	2301      	movs	r3, #1
 8001608:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800160a:	2300      	movs	r3, #0
 800160c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001612:	231f      	movs	r3, #31
 8001614:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001616:	2387      	movs	r3, #135	; 0x87
 8001618:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800161a:	2300      	movs	r3, #0
 800161c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800161e:	2300      	movs	r3, #0
 8001620:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001622:	2301      	movs	r3, #1
 8001624:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001626:	2301      	movs	r3, #1
 8001628:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001632:	463b      	mov	r3, r7
 8001634:	4618      	mov	r0, r3
 8001636:	f000 fd65 	bl	8002104 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800163a:	2004      	movs	r0, #4
 800163c:	f000 fd42 	bl	80020c4 <HAL_MPU_Enable>

}
 8001640:	bf00      	nop
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d101      	bne.n	800165e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800165a:	f000 fc1b 	bl	8001e94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40001000 	.word	0x40001000

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001674:	e7fe      	b.n	8001674 <Error_Handler+0x8>
	...

08001678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <HAL_MspInit+0x38>)
 8001680:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001684:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_MspInit+0x38>)
 8001686:	f043 0302 	orr.w	r3, r3, #2
 800168a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <HAL_MspInit+0x38>)
 8001690:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800169c:	2200      	movs	r2, #0
 800169e:	210f      	movs	r1, #15
 80016a0:	f06f 0001 	mvn.w	r0, #1
 80016a4:	f000 fcce 	bl	8002044 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	58024400 	.word	0x58024400

080016b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b0b8      	sub	sp, #224	; 0xe0
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016cc:	f107 0318 	add.w	r3, r7, #24
 80016d0:	22b4      	movs	r2, #180	; 0xb4
 80016d2:	2100      	movs	r1, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f010 fe62 	bl	801239e <memset>
  if(hspi->Instance==SPI1)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a71      	ldr	r2, [pc, #452]	; (80018a4 <HAL_SPI_MspInit+0x1f0>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	f040 80db 	bne.w	800189c <HAL_SPI_MspInit+0x1e8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80016e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 80016ec:	2302      	movs	r3, #2
 80016ee:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 100;
 80016f0:	2364      	movs	r3, #100	; 0x64
 80016f2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80016f4:	2302      	movs	r3, #2
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80016f8:	2302      	movs	r3, #2
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80016fc:	2302      	movs	r3, #2
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001700:	2340      	movs	r3, #64	; 0x40
 8001702:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001704:	2300      	movs	r3, #0
 8001706:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800170c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001710:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001712:	f107 0318 	add.w	r3, r7, #24
 8001716:	4618      	mov	r0, r3
 8001718:	f004 f8d4 	bl	80058c4 <HAL_RCCEx_PeriphCLKConfig>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_SPI_MspInit+0x72>
    {
      Error_Handler();
 8001722:	f7ff ffa3 	bl	800166c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001726:	4b60      	ldr	r3, [pc, #384]	; (80018a8 <HAL_SPI_MspInit+0x1f4>)
 8001728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800172c:	4a5e      	ldr	r2, [pc, #376]	; (80018a8 <HAL_SPI_MspInit+0x1f4>)
 800172e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001732:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001736:	4b5c      	ldr	r3, [pc, #368]	; (80018a8 <HAL_SPI_MspInit+0x1f4>)
 8001738:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800173c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4b58      	ldr	r3, [pc, #352]	; (80018a8 <HAL_SPI_MspInit+0x1f4>)
 8001746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174a:	4a57      	ldr	r2, [pc, #348]	; (80018a8 <HAL_SPI_MspInit+0x1f4>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001754:	4b54      	ldr	r3, [pc, #336]	; (80018a8 <HAL_SPI_MspInit+0x1f4>)
 8001756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001762:	4b51      	ldr	r3, [pc, #324]	; (80018a8 <HAL_SPI_MspInit+0x1f4>)
 8001764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001768:	4a4f      	ldr	r2, [pc, #316]	; (80018a8 <HAL_SPI_MspInit+0x1f4>)
 800176a:	f043 0302 	orr.w	r3, r3, #2
 800176e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001772:	4b4d      	ldr	r3, [pc, #308]	; (80018a8 <HAL_SPI_MspInit+0x1f4>)
 8001774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001780:	2360      	movs	r3, #96	; 0x60
 8001782:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001798:	2305      	movs	r3, #5
 800179a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017a2:	4619      	mov	r1, r3
 80017a4:	4841      	ldr	r0, [pc, #260]	; (80018ac <HAL_SPI_MspInit+0x1f8>)
 80017a6:	f002 ff15 	bl	80045d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017aa:	2320      	movs	r3, #32
 80017ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017c2:	2305      	movs	r3, #5
 80017c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017cc:	4619      	mov	r1, r3
 80017ce:	4838      	ldr	r0, [pc, #224]	; (80018b0 <HAL_SPI_MspInit+0x1fc>)
 80017d0:	f002 ff00 	bl	80045d4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 80017d4:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <HAL_SPI_MspInit+0x200>)
 80017d6:	4a38      	ldr	r2, [pc, #224]	; (80018b8 <HAL_SPI_MspInit+0x204>)
 80017d8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80017da:	4b36      	ldr	r3, [pc, #216]	; (80018b4 <HAL_SPI_MspInit+0x200>)
 80017dc:	2225      	movs	r2, #37	; 0x25
 80017de:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017e0:	4b34      	ldr	r3, [pc, #208]	; (80018b4 <HAL_SPI_MspInit+0x200>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e6:	4b33      	ldr	r3, [pc, #204]	; (80018b4 <HAL_SPI_MspInit+0x200>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017ec:	4b31      	ldr	r3, [pc, #196]	; (80018b4 <HAL_SPI_MspInit+0x200>)
 80017ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017f2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017f4:	4b2f      	ldr	r3, [pc, #188]	; (80018b4 <HAL_SPI_MspInit+0x200>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017fa:	4b2e      	ldr	r3, [pc, #184]	; (80018b4 <HAL_SPI_MspInit+0x200>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001800:	4b2c      	ldr	r3, [pc, #176]	; (80018b4 <HAL_SPI_MspInit+0x200>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001806:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <HAL_SPI_MspInit+0x200>)
 8001808:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800180c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800180e:	4b29      	ldr	r3, [pc, #164]	; (80018b4 <HAL_SPI_MspInit+0x200>)
 8001810:	2200      	movs	r2, #0
 8001812:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001814:	4827      	ldr	r0, [pc, #156]	; (80018b4 <HAL_SPI_MspInit+0x200>)
 8001816:	f000 fcb9 	bl	800218c <HAL_DMA_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_SPI_MspInit+0x170>
    {
      Error_Handler();
 8001820:	f7ff ff24 	bl	800166c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a23      	ldr	r2, [pc, #140]	; (80018b4 <HAL_SPI_MspInit+0x200>)
 8001828:	67da      	str	r2, [r3, #124]	; 0x7c
 800182a:	4a22      	ldr	r2, [pc, #136]	; (80018b4 <HAL_SPI_MspInit+0x200>)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8001830:	4b22      	ldr	r3, [pc, #136]	; (80018bc <HAL_SPI_MspInit+0x208>)
 8001832:	4a23      	ldr	r2, [pc, #140]	; (80018c0 <HAL_SPI_MspInit+0x20c>)
 8001834:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001836:	4b21      	ldr	r3, [pc, #132]	; (80018bc <HAL_SPI_MspInit+0x208>)
 8001838:	2226      	movs	r2, #38	; 0x26
 800183a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800183c:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <HAL_SPI_MspInit+0x208>)
 800183e:	2240      	movs	r2, #64	; 0x40
 8001840:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001842:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <HAL_SPI_MspInit+0x208>)
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001848:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <HAL_SPI_MspInit+0x208>)
 800184a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800184e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001850:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <HAL_SPI_MspInit+0x208>)
 8001852:	2200      	movs	r2, #0
 8001854:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001856:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_SPI_MspInit+0x208>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <HAL_SPI_MspInit+0x208>)
 800185e:	2200      	movs	r2, #0
 8001860:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HAL_SPI_MspInit+0x208>)
 8001864:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001868:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800186a:	4b14      	ldr	r3, [pc, #80]	; (80018bc <HAL_SPI_MspInit+0x208>)
 800186c:	2200      	movs	r2, #0
 800186e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001870:	4812      	ldr	r0, [pc, #72]	; (80018bc <HAL_SPI_MspInit+0x208>)
 8001872:	f000 fc8b 	bl	800218c <HAL_DMA_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <HAL_SPI_MspInit+0x1cc>
    {
      Error_Handler();
 800187c:	f7ff fef6 	bl	800166c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <HAL_SPI_MspInit+0x208>)
 8001884:	679a      	str	r2, [r3, #120]	; 0x78
 8001886:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <HAL_SPI_MspInit+0x208>)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	2105      	movs	r1, #5
 8001890:	2023      	movs	r0, #35	; 0x23
 8001892:	f000 fbd7 	bl	8002044 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001896:	2023      	movs	r0, #35	; 0x23
 8001898:	f000 fbee 	bl	8002078 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800189c:	bf00      	nop
 800189e:	37e0      	adds	r7, #224	; 0xe0
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40013000 	.word	0x40013000
 80018a8:	58024400 	.word	0x58024400
 80018ac:	58020000 	.word	0x58020000
 80018b0:	58020400 	.word	0x58020400
 80018b4:	2400038c 	.word	0x2400038c
 80018b8:	40020010 	.word	0x40020010
 80018bc:	24000404 	.word	0x24000404
 80018c0:	40020028 	.word	0x40020028

080018c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b0b6      	sub	sp, #216	; 0xd8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018dc:	f107 0310 	add.w	r3, r7, #16
 80018e0:	22b4      	movs	r2, #180	; 0xb4
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f010 fd5a 	bl	801239e <memset>
  if(huart->Instance==USART3)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a29      	ldr	r2, [pc, #164]	; (8001994 <HAL_UART_MspInit+0xd0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d14a      	bne.n	800198a <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018f4:	2302      	movs	r3, #2
 80018f6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018fe:	f107 0310 	add.w	r3, r7, #16
 8001902:	4618      	mov	r0, r3
 8001904:	f003 ffde 	bl	80058c4 <HAL_RCCEx_PeriphCLKConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800190e:	f7ff fead 	bl	800166c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001912:	4b21      	ldr	r3, [pc, #132]	; (8001998 <HAL_UART_MspInit+0xd4>)
 8001914:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001918:	4a1f      	ldr	r2, [pc, #124]	; (8001998 <HAL_UART_MspInit+0xd4>)
 800191a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800191e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001922:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <HAL_UART_MspInit+0xd4>)
 8001924:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001928:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_UART_MspInit+0xd4>)
 8001932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001936:	4a18      	ldr	r2, [pc, #96]	; (8001998 <HAL_UART_MspInit+0xd4>)
 8001938:	f043 0308 	orr.w	r3, r3, #8
 800193c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001940:	4b15      	ldr	r3, [pc, #84]	; (8001998 <HAL_UART_MspInit+0xd4>)
 8001942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800194e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001952:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001968:	2307      	movs	r3, #7
 800196a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800196e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001972:	4619      	mov	r1, r3
 8001974:	4809      	ldr	r0, [pc, #36]	; (800199c <HAL_UART_MspInit+0xd8>)
 8001976:	f002 fe2d 	bl	80045d4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2105      	movs	r1, #5
 800197e:	2027      	movs	r0, #39	; 0x27
 8001980:	f000 fb60 	bl	8002044 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001984:	2027      	movs	r0, #39	; 0x27
 8001986:	f000 fb77 	bl	8002078 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800198a:	bf00      	nop
 800198c:	37d8      	adds	r7, #216	; 0xd8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40004800 	.word	0x40004800
 8001998:	58024400 	.word	0x58024400
 800199c:	58020c00 	.word	0x58020c00

080019a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b090      	sub	sp, #64	; 0x40
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b0f      	cmp	r3, #15
 80019ac:	d827      	bhi.n	80019fe <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80019ae:	2200      	movs	r2, #0
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	2036      	movs	r0, #54	; 0x36
 80019b4:	f000 fb46 	bl	8002044 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019b8:	2036      	movs	r0, #54	; 0x36
 80019ba:	f000 fb5d 	bl	8002078 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80019be:	4a29      	ldr	r2, [pc, #164]	; (8001a64 <HAL_InitTick+0xc4>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019c4:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <HAL_InitTick+0xc8>)
 80019c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019ca:	4a27      	ldr	r2, [pc, #156]	; (8001a68 <HAL_InitTick+0xc8>)
 80019cc:	f043 0310 	orr.w	r3, r3, #16
 80019d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <HAL_InitTick+0xc8>)
 80019d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019e2:	f107 0210 	add.w	r2, r7, #16
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 ff27 	bl	8005840 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d106      	bne.n	8001a0a <HAL_InitTick+0x6a>
 80019fc:	e001      	b.n	8001a02 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e02b      	b.n	8001a5a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a02:	f003 fef1 	bl	80057e8 <HAL_RCC_GetPCLK1Freq>
 8001a06:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001a08:	e004      	b.n	8001a14 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a0a:	f003 feed 	bl	80057e8 <HAL_RCC_GetPCLK1Freq>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a16:	4a15      	ldr	r2, [pc, #84]	; (8001a6c <HAL_InitTick+0xcc>)
 8001a18:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1c:	0c9b      	lsrs	r3, r3, #18
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <HAL_InitTick+0xd0>)
 8001a24:	4a13      	ldr	r2, [pc, #76]	; (8001a74 <HAL_InitTick+0xd4>)
 8001a26:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_InitTick+0xd0>)
 8001a2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a2e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a30:	4a0f      	ldr	r2, [pc, #60]	; (8001a70 <HAL_InitTick+0xd0>)
 8001a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a34:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <HAL_InitTick+0xd0>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <HAL_InitTick+0xd0>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001a42:	480b      	ldr	r0, [pc, #44]	; (8001a70 <HAL_InitTick+0xd0>)
 8001a44:	f006 fa5d 	bl	8007f02 <HAL_TIM_Base_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d104      	bne.n	8001a58 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001a4e:	4808      	ldr	r0, [pc, #32]	; (8001a70 <HAL_InitTick+0xd0>)
 8001a50:	f006 fab8 	bl	8007fc4 <HAL_TIM_Base_Start_IT>
 8001a54:	4603      	mov	r3, r0
 8001a56:	e000      	b.n	8001a5a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3740      	adds	r7, #64	; 0x40
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	24000070 	.word	0x24000070
 8001a68:	58024400 	.word	0x58024400
 8001a6c:	431bde83 	.word	0x431bde83
 8001a70:	24004bd0 	.word	0x24004bd0
 8001a74:	40001000 	.word	0x40001000

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <NMI_Handler+0x4>

08001a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <BusFault_Handler+0x4>

08001a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <UsageFault_Handler+0x4>

08001a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <DMA1_Stream0_IRQHandler+0x10>)
 8001aaa:	f001 fc2d 	bl	8003308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	2400038c 	.word	0x2400038c

08001ab8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <DMA1_Stream1_IRQHandler+0x10>)
 8001abe:	f001 fc23 	bl	8003308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	24000404 	.word	0x24000404

08001acc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <SPI1_IRQHandler+0x10>)
 8001ad2:	f005 ff33 	bl	800793c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	24000304 	.word	0x24000304

08001ae0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ae4:	4802      	ldr	r0, [pc, #8]	; (8001af0 <USART3_IRQHandler+0x10>)
 8001ae6:	f006 fe3b 	bl	8008760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	2400047c 	.word	0x2400047c

08001af4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <TIM6_DAC_IRQHandler+0x10>)
 8001afa:	f006 fae9 	bl	80080d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	24004bd0 	.word	0x24004bd0

08001b08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
	return 1;
 8001b0c:	2301      	movs	r3, #1
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <_kill>:

int _kill(int pid, int sig)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b22:	f010 fb0b 	bl	801213c <__errno>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2216      	movs	r2, #22
 8001b2a:	601a      	str	r2, [r3, #0]
	return -1;
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <_exit>:

void _exit (int status)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ffe7 	bl	8001b18 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b4a:	e7fe      	b.n	8001b4a <_exit+0x12>

08001b4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	e00a      	b.n	8001b74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b5e:	f3af 8000 	nop.w
 8001b62:	4601      	mov	r1, r0
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	60ba      	str	r2, [r7, #8]
 8001b6a:	b2ca      	uxtb	r2, r1
 8001b6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	3301      	adds	r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	dbf0      	blt.n	8001b5e <_read+0x12>
	}

return len;
 8001b7c:	687b      	ldr	r3, [r7, #4]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e009      	b.n	8001bac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	60ba      	str	r2, [r7, #8]
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f000 f929 	bl	8001df8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	dbf1      	blt.n	8001b98 <_write+0x12>
	}
	return len;
 8001bb4:	687b      	ldr	r3, [r7, #4]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <_close>:

int _close(int file)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
	return -1;
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001be6:	605a      	str	r2, [r3, #4]
	return 0;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <_isatty>:

int _isatty(int file)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
	return 1;
 8001bfe:	2301      	movs	r3, #1
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
	return 0;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c30:	4a14      	ldr	r2, [pc, #80]	; (8001c84 <_sbrk+0x5c>)
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <_sbrk+0x60>)
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c3c:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <_sbrk+0x64>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <_sbrk+0x68>)
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d207      	bcs.n	8001c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c58:	f010 fa70 	bl	801213c <__errno>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	220c      	movs	r2, #12
 8001c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
 8001c66:	e009      	b.n	8001c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <_sbrk+0x64>)
 8001c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	24050000 	.word	0x24050000
 8001c88:	00004000 	.word	0x00004000
 8001c8c:	24004c1c 	.word	0x24004c1c
 8001c90:	2400d288 	.word	0x2400d288

08001c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c98:	4b32      	ldr	r3, [pc, #200]	; (8001d64 <SystemInit+0xd0>)
 8001c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9e:	4a31      	ldr	r2, [pc, #196]	; (8001d64 <SystemInit+0xd0>)
 8001ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ca8:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <SystemInit+0xd4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	2b06      	cmp	r3, #6
 8001cb2:	d807      	bhi.n	8001cc4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cb4:	4b2c      	ldr	r3, [pc, #176]	; (8001d68 <SystemInit+0xd4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f023 030f 	bic.w	r3, r3, #15
 8001cbc:	4a2a      	ldr	r2, [pc, #168]	; (8001d68 <SystemInit+0xd4>)
 8001cbe:	f043 0307 	orr.w	r3, r3, #7
 8001cc2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001cc4:	4b29      	ldr	r3, [pc, #164]	; (8001d6c <SystemInit+0xd8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a28      	ldr	r2, [pc, #160]	; (8001d6c <SystemInit+0xd8>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001cd0:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <SystemInit+0xd8>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001cd6:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <SystemInit+0xd8>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4924      	ldr	r1, [pc, #144]	; (8001d6c <SystemInit+0xd8>)
 8001cdc:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <SystemInit+0xdc>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ce2:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <SystemInit+0xd4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cee:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <SystemInit+0xd4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 030f 	bic.w	r3, r3, #15
 8001cf6:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <SystemInit+0xd4>)
 8001cf8:	f043 0307 	orr.w	r3, r3, #7
 8001cfc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <SystemInit+0xd8>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d04:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <SystemInit+0xd8>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <SystemInit+0xd8>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d10:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <SystemInit+0xd8>)
 8001d12:	4a18      	ldr	r2, [pc, #96]	; (8001d74 <SystemInit+0xe0>)
 8001d14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <SystemInit+0xd8>)
 8001d18:	4a17      	ldr	r2, [pc, #92]	; (8001d78 <SystemInit+0xe4>)
 8001d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <SystemInit+0xd8>)
 8001d1e:	4a17      	ldr	r2, [pc, #92]	; (8001d7c <SystemInit+0xe8>)
 8001d20:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <SystemInit+0xd8>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d28:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <SystemInit+0xd8>)
 8001d2a:	4a14      	ldr	r2, [pc, #80]	; (8001d7c <SystemInit+0xe8>)
 8001d2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d2e:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <SystemInit+0xd8>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d34:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <SystemInit+0xd8>)
 8001d36:	4a11      	ldr	r2, [pc, #68]	; (8001d7c <SystemInit+0xe8>)
 8001d38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <SystemInit+0xd8>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <SystemInit+0xd8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a09      	ldr	r2, [pc, #36]	; (8001d6c <SystemInit+0xd8>)
 8001d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <SystemInit+0xd8>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <SystemInit+0xec>)
 8001d54:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001d58:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00
 8001d68:	52002000 	.word	0x52002000
 8001d6c:	58024400 	.word	0x58024400
 8001d70:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d74:	02020200 	.word	0x02020200
 8001d78:	01ff0000 	.word	0x01ff0000
 8001d7c:	01010280 	.word	0x01010280
 8001d80:	52004000 	.word	0x52004000

08001d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d88:	f7ff ff84 	bl	8001c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d8c:	480c      	ldr	r0, [pc, #48]	; (8001dc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d8e:	490d      	ldr	r1, [pc, #52]	; (8001dc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d90:	4a0d      	ldr	r2, [pc, #52]	; (8001dc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d94:	e002      	b.n	8001d9c <LoopCopyDataInit>

08001d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d9a:	3304      	adds	r3, #4

08001d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da0:	d3f9      	bcc.n	8001d96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001da2:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001da4:	4c0a      	ldr	r4, [pc, #40]	; (8001dd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da8:	e001      	b.n	8001dae <LoopFillZerobss>

08001daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dac:	3204      	adds	r2, #4

08001dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db0:	d3fb      	bcc.n	8001daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001db2:	f010 fabf 	bl	8012334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001db6:	f7fe fd6f 	bl	8000898 <main>
  bx  lr
 8001dba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dbc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001dc0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001dc4:	240002e8 	.word	0x240002e8
  ldr r2, =_sidata
 8001dc8:	08015b34 	.word	0x08015b34
  ldr r2, =_sbss
 8001dcc:	240002e8 	.word	0x240002e8
  ldr r4, =_ebss
 8001dd0:	2400d288 	.word	0x2400d288

08001dd4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dd4:	e7fe      	b.n	8001dd4 <ADC3_IRQHandler>
	...

08001dd8 <MX_CoreMarkApp_Init>:
#include "main.h"
#include <stdio.h>
#include "app_coremarkapp.h"

void MX_CoreMarkApp_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  printf("CoreMark Test Begins!\r\n");
 8001ddc:	4804      	ldr	r0, [pc, #16]	; (8001df0 <MX_CoreMarkApp_Init+0x18>)
 8001dde:	f011 f859 	bl	8012e94 <puts>
  coremark_main();
 8001de2:	f00c f9e5 	bl	800e1b0 <coremark_main>
  printf("CoreMark Test Finishes!\r\n");
 8001de6:	4803      	ldr	r0, [pc, #12]	; (8001df4 <MX_CoreMarkApp_Init+0x1c>)
 8001de8:	f011 f854 	bl	8012e94 <puts>
}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	0801509c 	.word	0x0801509c
 8001df4:	080150b4 	.word	0x080150b4

08001df8 <__io_putchar>:
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#elif defined(__ICCARM__)
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&PRINTF_UART_PORT, (uint8_t *)&ch, 1, 0xFFFF);
 8001e00:	1d39      	adds	r1, r7, #4
 8001e02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e06:	2201      	movs	r2, #1
 8001e08:	4803      	ldr	r0, [pc, #12]	; (8001e18 <__io_putchar+0x20>)
 8001e0a:	f006 fbbd 	bl	8008588 <HAL_UART_Transmit>
  return ch;
 8001e0e:	687b      	ldr	r3, [r7, #4]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	2400047c 	.word	0x2400047c

08001e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e22:	2003      	movs	r0, #3
 8001e24:	f000 f903 	bl	800202e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e28:	f003 fb34 	bl	8005494 <HAL_RCC_GetSysClockFreq>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <HAL_Init+0x68>)
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	0a1b      	lsrs	r3, r3, #8
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	4913      	ldr	r1, [pc, #76]	; (8001e88 <HAL_Init+0x6c>)
 8001e3a:	5ccb      	ldrb	r3, [r1, r3]
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
 8001e44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e46:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <HAL_Init+0x68>)
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <HAL_Init+0x6c>)
 8001e50:	5cd3      	ldrb	r3, [r2, r3]
 8001e52:	f003 031f 	and.w	r3, r3, #31
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	fa22 f303 	lsr.w	r3, r2, r3
 8001e5c:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <HAL_Init+0x70>)
 8001e5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e60:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <HAL_Init+0x74>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e66:	200f      	movs	r0, #15
 8001e68:	f7ff fd9a 	bl	80019a0 <HAL_InitTick>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e002      	b.n	8001e7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e76:	f7ff fbff 	bl	8001678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	58024400 	.word	0x58024400
 8001e88:	08015708 	.word	0x08015708
 8001e8c:	2400006c 	.word	0x2400006c
 8001e90:	24000068 	.word	0x24000068

08001e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_IncTick+0x20>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_IncTick+0x24>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <HAL_IncTick+0x24>)
 8001ea6:	6013      	str	r3, [r2, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	24000074 	.word	0x24000074
 8001eb8:	24004c20 	.word	0x24004c20

08001ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <HAL_GetTick+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	24004c20 	.word	0x24004c20

08001ed4 <__NVIC_SetPriorityGrouping>:
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <__NVIC_SetPriorityGrouping+0x40>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <__NVIC_SetPriorityGrouping+0x44>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <__NVIC_SetPriorityGrouping+0x40>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00
 8001f18:	05fa0000 	.word	0x05fa0000

08001f1c <__NVIC_GetPriorityGrouping>:
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <__NVIC_GetPriorityGrouping+0x18>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	0a1b      	lsrs	r3, r3, #8
 8001f26:	f003 0307 	and.w	r3, r3, #7
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <__NVIC_EnableIRQ>:
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	db0b      	blt.n	8001f62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	f003 021f 	and.w	r2, r3, #31
 8001f50:	4907      	ldr	r1, [pc, #28]	; (8001f70 <__NVIC_EnableIRQ+0x38>)
 8001f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f56:	095b      	lsrs	r3, r3, #5
 8001f58:	2001      	movs	r0, #1
 8001f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000e100 	.word	0xe000e100

08001f74 <__NVIC_SetPriority>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	6039      	str	r1, [r7, #0]
 8001f7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	db0a      	blt.n	8001f9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	490c      	ldr	r1, [pc, #48]	; (8001fc0 <__NVIC_SetPriority+0x4c>)
 8001f8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f92:	0112      	lsls	r2, r2, #4
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	440b      	add	r3, r1
 8001f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f9c:	e00a      	b.n	8001fb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	4908      	ldr	r1, [pc, #32]	; (8001fc4 <__NVIC_SetPriority+0x50>)
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	3b04      	subs	r3, #4
 8001fac:	0112      	lsls	r2, r2, #4
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	761a      	strb	r2, [r3, #24]
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000e100 	.word	0xe000e100
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <NVIC_EncodePriority>:
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	; 0x24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f1c3 0307 	rsb	r3, r3, #7
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	bf28      	it	cs
 8001fe6:	2304      	movcs	r3, #4
 8001fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3304      	adds	r3, #4
 8001fee:	2b06      	cmp	r3, #6
 8001ff0:	d902      	bls.n	8001ff8 <NVIC_EncodePriority+0x30>
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3b03      	subs	r3, #3
 8001ff6:	e000      	b.n	8001ffa <NVIC_EncodePriority+0x32>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43da      	mvns	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	401a      	ands	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002010:	f04f 31ff 	mov.w	r1, #4294967295
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	fa01 f303 	lsl.w	r3, r1, r3
 800201a:	43d9      	mvns	r1, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	4313      	orrs	r3, r2
}
 8002022:	4618      	mov	r0, r3
 8002024:	3724      	adds	r7, #36	; 0x24
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff ff4c 	bl	8001ed4 <__NVIC_SetPriorityGrouping>
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
 8002050:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002052:	f7ff ff63 	bl	8001f1c <__NVIC_GetPriorityGrouping>
 8002056:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	68b9      	ldr	r1, [r7, #8]
 800205c:	6978      	ldr	r0, [r7, #20]
 800205e:	f7ff ffb3 	bl	8001fc8 <NVIC_EncodePriority>
 8002062:	4602      	mov	r2, r0
 8002064:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ff82 	bl	8001f74 <__NVIC_SetPriority>
}
 8002070:	bf00      	nop
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff56 	bl	8001f38 <__NVIC_EnableIRQ>
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002098:	f3bf 8f5f 	dmb	sy
}
 800209c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800209e:	4b07      	ldr	r3, [pc, #28]	; (80020bc <HAL_MPU_Disable+0x28>)
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	4a06      	ldr	r2, [pc, #24]	; (80020bc <HAL_MPU_Disable+0x28>)
 80020a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HAL_MPU_Disable+0x2c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	605a      	str	r2, [r3, #4]
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000ed00 	.word	0xe000ed00
 80020c0:	e000ed90 	.word	0xe000ed90

080020c4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80020cc:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <HAL_MPU_Enable+0x38>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_MPU_Enable+0x3c>)
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	4a09      	ldr	r2, [pc, #36]	; (8002100 <HAL_MPU_Enable+0x3c>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80020e2:	f3bf 8f4f 	dsb	sy
}
 80020e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80020e8:	f3bf 8f6f 	isb	sy
}
 80020ec:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000ed90 	.word	0xe000ed90
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	785a      	ldrb	r2, [r3, #1]
 8002110:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <HAL_MPU_ConfigRegion+0x84>)
 8002112:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d029      	beq.n	8002170 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800211c:	4a1a      	ldr	r2, [pc, #104]	; (8002188 <HAL_MPU_ConfigRegion+0x84>)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	7b1b      	ldrb	r3, [r3, #12]
 8002128:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	7adb      	ldrb	r3, [r3, #11]
 800212e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002130:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	7a9b      	ldrb	r3, [r3, #10]
 8002136:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002138:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	7b5b      	ldrb	r3, [r3, #13]
 800213e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002140:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	7b9b      	ldrb	r3, [r3, #14]
 8002146:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002148:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	7bdb      	ldrb	r3, [r3, #15]
 800214e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002150:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7a5b      	ldrb	r3, [r3, #9]
 8002156:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002158:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	7a1b      	ldrb	r3, [r3, #8]
 800215e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002160:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	7812      	ldrb	r2, [r2, #0]
 8002166:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002168:	4a07      	ldr	r2, [pc, #28]	; (8002188 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800216a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800216c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800216e:	e005      	b.n	800217c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_MPU_ConfigRegion+0x84>)
 8002172:	2200      	movs	r2, #0
 8002174:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002176:	4b04      	ldr	r3, [pc, #16]	; (8002188 <HAL_MPU_ConfigRegion+0x84>)
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed90 	.word	0xe000ed90

0800218c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002194:	f7ff fe92 	bl	8001ebc <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e314      	b.n	80027ce <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a66      	ldr	r2, [pc, #408]	; (8002344 <HAL_DMA_Init+0x1b8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d04a      	beq.n	8002244 <HAL_DMA_Init+0xb8>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a65      	ldr	r2, [pc, #404]	; (8002348 <HAL_DMA_Init+0x1bc>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d045      	beq.n	8002244 <HAL_DMA_Init+0xb8>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a63      	ldr	r2, [pc, #396]	; (800234c <HAL_DMA_Init+0x1c0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d040      	beq.n	8002244 <HAL_DMA_Init+0xb8>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a62      	ldr	r2, [pc, #392]	; (8002350 <HAL_DMA_Init+0x1c4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d03b      	beq.n	8002244 <HAL_DMA_Init+0xb8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a60      	ldr	r2, [pc, #384]	; (8002354 <HAL_DMA_Init+0x1c8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d036      	beq.n	8002244 <HAL_DMA_Init+0xb8>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a5f      	ldr	r2, [pc, #380]	; (8002358 <HAL_DMA_Init+0x1cc>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d031      	beq.n	8002244 <HAL_DMA_Init+0xb8>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a5d      	ldr	r2, [pc, #372]	; (800235c <HAL_DMA_Init+0x1d0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d02c      	beq.n	8002244 <HAL_DMA_Init+0xb8>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a5c      	ldr	r2, [pc, #368]	; (8002360 <HAL_DMA_Init+0x1d4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d027      	beq.n	8002244 <HAL_DMA_Init+0xb8>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a5a      	ldr	r2, [pc, #360]	; (8002364 <HAL_DMA_Init+0x1d8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d022      	beq.n	8002244 <HAL_DMA_Init+0xb8>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a59      	ldr	r2, [pc, #356]	; (8002368 <HAL_DMA_Init+0x1dc>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d01d      	beq.n	8002244 <HAL_DMA_Init+0xb8>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a57      	ldr	r2, [pc, #348]	; (800236c <HAL_DMA_Init+0x1e0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d018      	beq.n	8002244 <HAL_DMA_Init+0xb8>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a56      	ldr	r2, [pc, #344]	; (8002370 <HAL_DMA_Init+0x1e4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d013      	beq.n	8002244 <HAL_DMA_Init+0xb8>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a54      	ldr	r2, [pc, #336]	; (8002374 <HAL_DMA_Init+0x1e8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00e      	beq.n	8002244 <HAL_DMA_Init+0xb8>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a53      	ldr	r2, [pc, #332]	; (8002378 <HAL_DMA_Init+0x1ec>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d009      	beq.n	8002244 <HAL_DMA_Init+0xb8>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a51      	ldr	r2, [pc, #324]	; (800237c <HAL_DMA_Init+0x1f0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d004      	beq.n	8002244 <HAL_DMA_Init+0xb8>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a50      	ldr	r2, [pc, #320]	; (8002380 <HAL_DMA_Init+0x1f4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d101      	bne.n	8002248 <HAL_DMA_Init+0xbc>
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <HAL_DMA_Init+0xbe>
 8002248:	2300      	movs	r3, #0
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 813c 	beq.w	80024c8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a37      	ldr	r2, [pc, #220]	; (8002344 <HAL_DMA_Init+0x1b8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d04a      	beq.n	8002300 <HAL_DMA_Init+0x174>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a36      	ldr	r2, [pc, #216]	; (8002348 <HAL_DMA_Init+0x1bc>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d045      	beq.n	8002300 <HAL_DMA_Init+0x174>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a34      	ldr	r2, [pc, #208]	; (800234c <HAL_DMA_Init+0x1c0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d040      	beq.n	8002300 <HAL_DMA_Init+0x174>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a33      	ldr	r2, [pc, #204]	; (8002350 <HAL_DMA_Init+0x1c4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d03b      	beq.n	8002300 <HAL_DMA_Init+0x174>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a31      	ldr	r2, [pc, #196]	; (8002354 <HAL_DMA_Init+0x1c8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d036      	beq.n	8002300 <HAL_DMA_Init+0x174>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a30      	ldr	r2, [pc, #192]	; (8002358 <HAL_DMA_Init+0x1cc>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d031      	beq.n	8002300 <HAL_DMA_Init+0x174>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a2e      	ldr	r2, [pc, #184]	; (800235c <HAL_DMA_Init+0x1d0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d02c      	beq.n	8002300 <HAL_DMA_Init+0x174>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a2d      	ldr	r2, [pc, #180]	; (8002360 <HAL_DMA_Init+0x1d4>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d027      	beq.n	8002300 <HAL_DMA_Init+0x174>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a2b      	ldr	r2, [pc, #172]	; (8002364 <HAL_DMA_Init+0x1d8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d022      	beq.n	8002300 <HAL_DMA_Init+0x174>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a2a      	ldr	r2, [pc, #168]	; (8002368 <HAL_DMA_Init+0x1dc>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d01d      	beq.n	8002300 <HAL_DMA_Init+0x174>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a28      	ldr	r2, [pc, #160]	; (800236c <HAL_DMA_Init+0x1e0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d018      	beq.n	8002300 <HAL_DMA_Init+0x174>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a27      	ldr	r2, [pc, #156]	; (8002370 <HAL_DMA_Init+0x1e4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d013      	beq.n	8002300 <HAL_DMA_Init+0x174>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a25      	ldr	r2, [pc, #148]	; (8002374 <HAL_DMA_Init+0x1e8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00e      	beq.n	8002300 <HAL_DMA_Init+0x174>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a24      	ldr	r2, [pc, #144]	; (8002378 <HAL_DMA_Init+0x1ec>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d009      	beq.n	8002300 <HAL_DMA_Init+0x174>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a22      	ldr	r2, [pc, #136]	; (800237c <HAL_DMA_Init+0x1f0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d004      	beq.n	8002300 <HAL_DMA_Init+0x174>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a21      	ldr	r2, [pc, #132]	; (8002380 <HAL_DMA_Init+0x1f4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d108      	bne.n	8002312 <HAL_DMA_Init+0x186>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0201 	bic.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	e007      	b.n	8002322 <HAL_DMA_Init+0x196>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0201 	bic.w	r2, r2, #1
 8002320:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002322:	e02f      	b.n	8002384 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002324:	f7ff fdca 	bl	8001ebc <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b05      	cmp	r3, #5
 8002330:	d928      	bls.n	8002384 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2220      	movs	r2, #32
 8002336:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2203      	movs	r2, #3
 800233c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e244      	b.n	80027ce <HAL_DMA_Init+0x642>
 8002344:	40020010 	.word	0x40020010
 8002348:	40020028 	.word	0x40020028
 800234c:	40020040 	.word	0x40020040
 8002350:	40020058 	.word	0x40020058
 8002354:	40020070 	.word	0x40020070
 8002358:	40020088 	.word	0x40020088
 800235c:	400200a0 	.word	0x400200a0
 8002360:	400200b8 	.word	0x400200b8
 8002364:	40020410 	.word	0x40020410
 8002368:	40020428 	.word	0x40020428
 800236c:	40020440 	.word	0x40020440
 8002370:	40020458 	.word	0x40020458
 8002374:	40020470 	.word	0x40020470
 8002378:	40020488 	.word	0x40020488
 800237c:	400204a0 	.word	0x400204a0
 8002380:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1c8      	bne.n	8002324 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	4b84      	ldr	r3, [pc, #528]	; (80025b0 <HAL_DMA_Init+0x424>)
 800239e:	4013      	ands	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80023aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d107      	bne.n	80023e8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	4313      	orrs	r3, r2
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b28      	cmp	r3, #40	; 0x28
 80023ee:	d903      	bls.n	80023f8 <HAL_DMA_Init+0x26c>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b2e      	cmp	r3, #46	; 0x2e
 80023f6:	d91f      	bls.n	8002438 <HAL_DMA_Init+0x2ac>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b3e      	cmp	r3, #62	; 0x3e
 80023fe:	d903      	bls.n	8002408 <HAL_DMA_Init+0x27c>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b42      	cmp	r3, #66	; 0x42
 8002406:	d917      	bls.n	8002438 <HAL_DMA_Init+0x2ac>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b46      	cmp	r3, #70	; 0x46
 800240e:	d903      	bls.n	8002418 <HAL_DMA_Init+0x28c>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b48      	cmp	r3, #72	; 0x48
 8002416:	d90f      	bls.n	8002438 <HAL_DMA_Init+0x2ac>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b4e      	cmp	r3, #78	; 0x4e
 800241e:	d903      	bls.n	8002428 <HAL_DMA_Init+0x29c>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b52      	cmp	r3, #82	; 0x52
 8002426:	d907      	bls.n	8002438 <HAL_DMA_Init+0x2ac>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b73      	cmp	r3, #115	; 0x73
 800242e:	d905      	bls.n	800243c <HAL_DMA_Init+0x2b0>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b77      	cmp	r3, #119	; 0x77
 8002436:	d801      	bhi.n	800243c <HAL_DMA_Init+0x2b0>
 8002438:	2301      	movs	r3, #1
 800243a:	e000      	b.n	800243e <HAL_DMA_Init+0x2b2>
 800243c:	2300      	movs	r3, #0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002448:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f023 0307 	bic.w	r3, r3, #7
 8002460:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4313      	orrs	r3, r2
 800246a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	2b04      	cmp	r3, #4
 8002472:	d117      	bne.n	80024a4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	4313      	orrs	r3, r2
 800247c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00e      	beq.n	80024a4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f001 ff1a 	bl	80042c0 <DMA_CheckFifoParam>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d008      	beq.n	80024a4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2240      	movs	r2, #64	; 0x40
 8002496:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e194      	b.n	80027ce <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f001 fe55 	bl	800415c <DMA_CalcBaseAndBitshift>
 80024b2:	4603      	mov	r3, r0
 80024b4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ba:	f003 031f 	and.w	r3, r3, #31
 80024be:	223f      	movs	r2, #63	; 0x3f
 80024c0:	409a      	lsls	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	609a      	str	r2, [r3, #8]
 80024c6:	e0ca      	b.n	800265e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a39      	ldr	r2, [pc, #228]	; (80025b4 <HAL_DMA_Init+0x428>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d022      	beq.n	8002518 <HAL_DMA_Init+0x38c>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a38      	ldr	r2, [pc, #224]	; (80025b8 <HAL_DMA_Init+0x42c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d01d      	beq.n	8002518 <HAL_DMA_Init+0x38c>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a36      	ldr	r2, [pc, #216]	; (80025bc <HAL_DMA_Init+0x430>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d018      	beq.n	8002518 <HAL_DMA_Init+0x38c>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a35      	ldr	r2, [pc, #212]	; (80025c0 <HAL_DMA_Init+0x434>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d013      	beq.n	8002518 <HAL_DMA_Init+0x38c>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a33      	ldr	r2, [pc, #204]	; (80025c4 <HAL_DMA_Init+0x438>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00e      	beq.n	8002518 <HAL_DMA_Init+0x38c>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a32      	ldr	r2, [pc, #200]	; (80025c8 <HAL_DMA_Init+0x43c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d009      	beq.n	8002518 <HAL_DMA_Init+0x38c>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a30      	ldr	r2, [pc, #192]	; (80025cc <HAL_DMA_Init+0x440>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d004      	beq.n	8002518 <HAL_DMA_Init+0x38c>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a2f      	ldr	r2, [pc, #188]	; (80025d0 <HAL_DMA_Init+0x444>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d101      	bne.n	800251c <HAL_DMA_Init+0x390>
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <HAL_DMA_Init+0x392>
 800251c:	2300      	movs	r3, #0
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 8094 	beq.w	800264c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a22      	ldr	r2, [pc, #136]	; (80025b4 <HAL_DMA_Init+0x428>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d021      	beq.n	8002572 <HAL_DMA_Init+0x3e6>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a21      	ldr	r2, [pc, #132]	; (80025b8 <HAL_DMA_Init+0x42c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d01c      	beq.n	8002572 <HAL_DMA_Init+0x3e6>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a1f      	ldr	r2, [pc, #124]	; (80025bc <HAL_DMA_Init+0x430>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d017      	beq.n	8002572 <HAL_DMA_Init+0x3e6>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a1e      	ldr	r2, [pc, #120]	; (80025c0 <HAL_DMA_Init+0x434>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d012      	beq.n	8002572 <HAL_DMA_Init+0x3e6>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1c      	ldr	r2, [pc, #112]	; (80025c4 <HAL_DMA_Init+0x438>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00d      	beq.n	8002572 <HAL_DMA_Init+0x3e6>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1b      	ldr	r2, [pc, #108]	; (80025c8 <HAL_DMA_Init+0x43c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d008      	beq.n	8002572 <HAL_DMA_Init+0x3e6>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a19      	ldr	r2, [pc, #100]	; (80025cc <HAL_DMA_Init+0x440>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d003      	beq.n	8002572 <HAL_DMA_Init+0x3e6>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a18      	ldr	r2, [pc, #96]	; (80025d0 <HAL_DMA_Init+0x444>)
 8002570:	4293      	cmp	r3, r2
 8002572:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <HAL_DMA_Init+0x448>)
 8002590:	4013      	ands	r3, r2
 8002592:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b40      	cmp	r3, #64	; 0x40
 800259a:	d01d      	beq.n	80025d8 <HAL_DMA_Init+0x44c>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b80      	cmp	r3, #128	; 0x80
 80025a2:	d102      	bne.n	80025aa <HAL_DMA_Init+0x41e>
 80025a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025a8:	e017      	b.n	80025da <HAL_DMA_Init+0x44e>
 80025aa:	2300      	movs	r3, #0
 80025ac:	e015      	b.n	80025da <HAL_DMA_Init+0x44e>
 80025ae:	bf00      	nop
 80025b0:	fe10803f 	.word	0xfe10803f
 80025b4:	58025408 	.word	0x58025408
 80025b8:	5802541c 	.word	0x5802541c
 80025bc:	58025430 	.word	0x58025430
 80025c0:	58025444 	.word	0x58025444
 80025c4:	58025458 	.word	0x58025458
 80025c8:	5802546c 	.word	0x5802546c
 80025cc:	58025480 	.word	0x58025480
 80025d0:	58025494 	.word	0x58025494
 80025d4:	fffe000f 	.word	0xfffe000f
 80025d8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68d2      	ldr	r2, [r2, #12]
 80025de:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80025e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80025f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80025f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002600:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002608:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4313      	orrs	r3, r2
 800260e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	4b6e      	ldr	r3, [pc, #440]	; (80027d8 <HAL_DMA_Init+0x64c>)
 8002620:	4413      	add	r3, r2
 8002622:	4a6e      	ldr	r2, [pc, #440]	; (80027dc <HAL_DMA_Init+0x650>)
 8002624:	fba2 2303 	umull	r2, r3, r2, r3
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	009a      	lsls	r2, r3, #2
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f001 fd93 	bl	800415c <DMA_CalcBaseAndBitshift>
 8002636:	4603      	mov	r3, r0
 8002638:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	2201      	movs	r2, #1
 8002644:	409a      	lsls	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	e008      	b.n	800265e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2240      	movs	r2, #64	; 0x40
 8002650:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2203      	movs	r2, #3
 8002656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e0b7      	b.n	80027ce <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a5f      	ldr	r2, [pc, #380]	; (80027e0 <HAL_DMA_Init+0x654>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d072      	beq.n	800274e <HAL_DMA_Init+0x5c2>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a5d      	ldr	r2, [pc, #372]	; (80027e4 <HAL_DMA_Init+0x658>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d06d      	beq.n	800274e <HAL_DMA_Init+0x5c2>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a5c      	ldr	r2, [pc, #368]	; (80027e8 <HAL_DMA_Init+0x65c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d068      	beq.n	800274e <HAL_DMA_Init+0x5c2>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a5a      	ldr	r2, [pc, #360]	; (80027ec <HAL_DMA_Init+0x660>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d063      	beq.n	800274e <HAL_DMA_Init+0x5c2>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a59      	ldr	r2, [pc, #356]	; (80027f0 <HAL_DMA_Init+0x664>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d05e      	beq.n	800274e <HAL_DMA_Init+0x5c2>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a57      	ldr	r2, [pc, #348]	; (80027f4 <HAL_DMA_Init+0x668>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d059      	beq.n	800274e <HAL_DMA_Init+0x5c2>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a56      	ldr	r2, [pc, #344]	; (80027f8 <HAL_DMA_Init+0x66c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d054      	beq.n	800274e <HAL_DMA_Init+0x5c2>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a54      	ldr	r2, [pc, #336]	; (80027fc <HAL_DMA_Init+0x670>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d04f      	beq.n	800274e <HAL_DMA_Init+0x5c2>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a53      	ldr	r2, [pc, #332]	; (8002800 <HAL_DMA_Init+0x674>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d04a      	beq.n	800274e <HAL_DMA_Init+0x5c2>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a51      	ldr	r2, [pc, #324]	; (8002804 <HAL_DMA_Init+0x678>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d045      	beq.n	800274e <HAL_DMA_Init+0x5c2>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a50      	ldr	r2, [pc, #320]	; (8002808 <HAL_DMA_Init+0x67c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d040      	beq.n	800274e <HAL_DMA_Init+0x5c2>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a4e      	ldr	r2, [pc, #312]	; (800280c <HAL_DMA_Init+0x680>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d03b      	beq.n	800274e <HAL_DMA_Init+0x5c2>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a4d      	ldr	r2, [pc, #308]	; (8002810 <HAL_DMA_Init+0x684>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d036      	beq.n	800274e <HAL_DMA_Init+0x5c2>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a4b      	ldr	r2, [pc, #300]	; (8002814 <HAL_DMA_Init+0x688>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d031      	beq.n	800274e <HAL_DMA_Init+0x5c2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a4a      	ldr	r2, [pc, #296]	; (8002818 <HAL_DMA_Init+0x68c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d02c      	beq.n	800274e <HAL_DMA_Init+0x5c2>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a48      	ldr	r2, [pc, #288]	; (800281c <HAL_DMA_Init+0x690>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d027      	beq.n	800274e <HAL_DMA_Init+0x5c2>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a47      	ldr	r2, [pc, #284]	; (8002820 <HAL_DMA_Init+0x694>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d022      	beq.n	800274e <HAL_DMA_Init+0x5c2>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a45      	ldr	r2, [pc, #276]	; (8002824 <HAL_DMA_Init+0x698>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d01d      	beq.n	800274e <HAL_DMA_Init+0x5c2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a44      	ldr	r2, [pc, #272]	; (8002828 <HAL_DMA_Init+0x69c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d018      	beq.n	800274e <HAL_DMA_Init+0x5c2>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a42      	ldr	r2, [pc, #264]	; (800282c <HAL_DMA_Init+0x6a0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d013      	beq.n	800274e <HAL_DMA_Init+0x5c2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a41      	ldr	r2, [pc, #260]	; (8002830 <HAL_DMA_Init+0x6a4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d00e      	beq.n	800274e <HAL_DMA_Init+0x5c2>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a3f      	ldr	r2, [pc, #252]	; (8002834 <HAL_DMA_Init+0x6a8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d009      	beq.n	800274e <HAL_DMA_Init+0x5c2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a3e      	ldr	r2, [pc, #248]	; (8002838 <HAL_DMA_Init+0x6ac>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d004      	beq.n	800274e <HAL_DMA_Init+0x5c2>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a3c      	ldr	r2, [pc, #240]	; (800283c <HAL_DMA_Init+0x6b0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d101      	bne.n	8002752 <HAL_DMA_Init+0x5c6>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_DMA_Init+0x5c8>
 8002752:	2300      	movs	r3, #0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d032      	beq.n	80027be <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f001 fe2d 	bl	80043b8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b80      	cmp	r3, #128	; 0x80
 8002764:	d102      	bne.n	800276c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002780:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d010      	beq.n	80027ac <HAL_DMA_Init+0x620>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b08      	cmp	r3, #8
 8002790:	d80c      	bhi.n	80027ac <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f001 feaa 	bl	80044ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	e008      	b.n	80027be <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	a7fdabf8 	.word	0xa7fdabf8
 80027dc:	cccccccd 	.word	0xcccccccd
 80027e0:	40020010 	.word	0x40020010
 80027e4:	40020028 	.word	0x40020028
 80027e8:	40020040 	.word	0x40020040
 80027ec:	40020058 	.word	0x40020058
 80027f0:	40020070 	.word	0x40020070
 80027f4:	40020088 	.word	0x40020088
 80027f8:	400200a0 	.word	0x400200a0
 80027fc:	400200b8 	.word	0x400200b8
 8002800:	40020410 	.word	0x40020410
 8002804:	40020428 	.word	0x40020428
 8002808:	40020440 	.word	0x40020440
 800280c:	40020458 	.word	0x40020458
 8002810:	40020470 	.word	0x40020470
 8002814:	40020488 	.word	0x40020488
 8002818:	400204a0 	.word	0x400204a0
 800281c:	400204b8 	.word	0x400204b8
 8002820:	58025408 	.word	0x58025408
 8002824:	5802541c 	.word	0x5802541c
 8002828:	58025430 	.word	0x58025430
 800282c:	58025444 	.word	0x58025444
 8002830:	58025458 	.word	0x58025458
 8002834:	5802546c 	.word	0x5802546c
 8002838:	58025480 	.word	0x58025480
 800283c:	58025494 	.word	0x58025494

08002840 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002848:	f7ff fb38 	bl	8001ebc <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e2dc      	b.n	8002e12 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d008      	beq.n	8002876 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2280      	movs	r2, #128	; 0x80
 8002868:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e2cd      	b.n	8002e12 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a76      	ldr	r2, [pc, #472]	; (8002a54 <HAL_DMA_Abort+0x214>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d04a      	beq.n	8002916 <HAL_DMA_Abort+0xd6>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a74      	ldr	r2, [pc, #464]	; (8002a58 <HAL_DMA_Abort+0x218>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d045      	beq.n	8002916 <HAL_DMA_Abort+0xd6>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a73      	ldr	r2, [pc, #460]	; (8002a5c <HAL_DMA_Abort+0x21c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d040      	beq.n	8002916 <HAL_DMA_Abort+0xd6>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a71      	ldr	r2, [pc, #452]	; (8002a60 <HAL_DMA_Abort+0x220>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d03b      	beq.n	8002916 <HAL_DMA_Abort+0xd6>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a70      	ldr	r2, [pc, #448]	; (8002a64 <HAL_DMA_Abort+0x224>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d036      	beq.n	8002916 <HAL_DMA_Abort+0xd6>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a6e      	ldr	r2, [pc, #440]	; (8002a68 <HAL_DMA_Abort+0x228>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d031      	beq.n	8002916 <HAL_DMA_Abort+0xd6>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a6d      	ldr	r2, [pc, #436]	; (8002a6c <HAL_DMA_Abort+0x22c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d02c      	beq.n	8002916 <HAL_DMA_Abort+0xd6>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a6b      	ldr	r2, [pc, #428]	; (8002a70 <HAL_DMA_Abort+0x230>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d027      	beq.n	8002916 <HAL_DMA_Abort+0xd6>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6a      	ldr	r2, [pc, #424]	; (8002a74 <HAL_DMA_Abort+0x234>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d022      	beq.n	8002916 <HAL_DMA_Abort+0xd6>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a68      	ldr	r2, [pc, #416]	; (8002a78 <HAL_DMA_Abort+0x238>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d01d      	beq.n	8002916 <HAL_DMA_Abort+0xd6>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a67      	ldr	r2, [pc, #412]	; (8002a7c <HAL_DMA_Abort+0x23c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d018      	beq.n	8002916 <HAL_DMA_Abort+0xd6>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a65      	ldr	r2, [pc, #404]	; (8002a80 <HAL_DMA_Abort+0x240>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <HAL_DMA_Abort+0xd6>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a64      	ldr	r2, [pc, #400]	; (8002a84 <HAL_DMA_Abort+0x244>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d00e      	beq.n	8002916 <HAL_DMA_Abort+0xd6>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a62      	ldr	r2, [pc, #392]	; (8002a88 <HAL_DMA_Abort+0x248>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d009      	beq.n	8002916 <HAL_DMA_Abort+0xd6>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a61      	ldr	r2, [pc, #388]	; (8002a8c <HAL_DMA_Abort+0x24c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d004      	beq.n	8002916 <HAL_DMA_Abort+0xd6>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a5f      	ldr	r2, [pc, #380]	; (8002a90 <HAL_DMA_Abort+0x250>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d101      	bne.n	800291a <HAL_DMA_Abort+0xda>
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <HAL_DMA_Abort+0xdc>
 800291a:	2300      	movs	r3, #0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d013      	beq.n	8002948 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 021e 	bic.w	r2, r2, #30
 800292e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800293e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	e00a      	b.n	800295e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 020e 	bic.w	r2, r2, #14
 8002956:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a3c      	ldr	r2, [pc, #240]	; (8002a54 <HAL_DMA_Abort+0x214>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d072      	beq.n	8002a4e <HAL_DMA_Abort+0x20e>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a3a      	ldr	r2, [pc, #232]	; (8002a58 <HAL_DMA_Abort+0x218>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d06d      	beq.n	8002a4e <HAL_DMA_Abort+0x20e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a39      	ldr	r2, [pc, #228]	; (8002a5c <HAL_DMA_Abort+0x21c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d068      	beq.n	8002a4e <HAL_DMA_Abort+0x20e>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a37      	ldr	r2, [pc, #220]	; (8002a60 <HAL_DMA_Abort+0x220>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d063      	beq.n	8002a4e <HAL_DMA_Abort+0x20e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a36      	ldr	r2, [pc, #216]	; (8002a64 <HAL_DMA_Abort+0x224>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d05e      	beq.n	8002a4e <HAL_DMA_Abort+0x20e>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a34      	ldr	r2, [pc, #208]	; (8002a68 <HAL_DMA_Abort+0x228>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d059      	beq.n	8002a4e <HAL_DMA_Abort+0x20e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a33      	ldr	r2, [pc, #204]	; (8002a6c <HAL_DMA_Abort+0x22c>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d054      	beq.n	8002a4e <HAL_DMA_Abort+0x20e>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a31      	ldr	r2, [pc, #196]	; (8002a70 <HAL_DMA_Abort+0x230>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d04f      	beq.n	8002a4e <HAL_DMA_Abort+0x20e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a30      	ldr	r2, [pc, #192]	; (8002a74 <HAL_DMA_Abort+0x234>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d04a      	beq.n	8002a4e <HAL_DMA_Abort+0x20e>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a2e      	ldr	r2, [pc, #184]	; (8002a78 <HAL_DMA_Abort+0x238>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d045      	beq.n	8002a4e <HAL_DMA_Abort+0x20e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a2d      	ldr	r2, [pc, #180]	; (8002a7c <HAL_DMA_Abort+0x23c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d040      	beq.n	8002a4e <HAL_DMA_Abort+0x20e>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a2b      	ldr	r2, [pc, #172]	; (8002a80 <HAL_DMA_Abort+0x240>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d03b      	beq.n	8002a4e <HAL_DMA_Abort+0x20e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a2a      	ldr	r2, [pc, #168]	; (8002a84 <HAL_DMA_Abort+0x244>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d036      	beq.n	8002a4e <HAL_DMA_Abort+0x20e>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a28      	ldr	r2, [pc, #160]	; (8002a88 <HAL_DMA_Abort+0x248>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d031      	beq.n	8002a4e <HAL_DMA_Abort+0x20e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a27      	ldr	r2, [pc, #156]	; (8002a8c <HAL_DMA_Abort+0x24c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d02c      	beq.n	8002a4e <HAL_DMA_Abort+0x20e>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a25      	ldr	r2, [pc, #148]	; (8002a90 <HAL_DMA_Abort+0x250>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d027      	beq.n	8002a4e <HAL_DMA_Abort+0x20e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a24      	ldr	r2, [pc, #144]	; (8002a94 <HAL_DMA_Abort+0x254>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d022      	beq.n	8002a4e <HAL_DMA_Abort+0x20e>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a22      	ldr	r2, [pc, #136]	; (8002a98 <HAL_DMA_Abort+0x258>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d01d      	beq.n	8002a4e <HAL_DMA_Abort+0x20e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a21      	ldr	r2, [pc, #132]	; (8002a9c <HAL_DMA_Abort+0x25c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d018      	beq.n	8002a4e <HAL_DMA_Abort+0x20e>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1f      	ldr	r2, [pc, #124]	; (8002aa0 <HAL_DMA_Abort+0x260>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d013      	beq.n	8002a4e <HAL_DMA_Abort+0x20e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1e      	ldr	r2, [pc, #120]	; (8002aa4 <HAL_DMA_Abort+0x264>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d00e      	beq.n	8002a4e <HAL_DMA_Abort+0x20e>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1c      	ldr	r2, [pc, #112]	; (8002aa8 <HAL_DMA_Abort+0x268>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d009      	beq.n	8002a4e <HAL_DMA_Abort+0x20e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1b      	ldr	r2, [pc, #108]	; (8002aac <HAL_DMA_Abort+0x26c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d004      	beq.n	8002a4e <HAL_DMA_Abort+0x20e>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a19      	ldr	r2, [pc, #100]	; (8002ab0 <HAL_DMA_Abort+0x270>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d132      	bne.n	8002ab4 <HAL_DMA_Abort+0x274>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e031      	b.n	8002ab6 <HAL_DMA_Abort+0x276>
 8002a52:	bf00      	nop
 8002a54:	40020010 	.word	0x40020010
 8002a58:	40020028 	.word	0x40020028
 8002a5c:	40020040 	.word	0x40020040
 8002a60:	40020058 	.word	0x40020058
 8002a64:	40020070 	.word	0x40020070
 8002a68:	40020088 	.word	0x40020088
 8002a6c:	400200a0 	.word	0x400200a0
 8002a70:	400200b8 	.word	0x400200b8
 8002a74:	40020410 	.word	0x40020410
 8002a78:	40020428 	.word	0x40020428
 8002a7c:	40020440 	.word	0x40020440
 8002a80:	40020458 	.word	0x40020458
 8002a84:	40020470 	.word	0x40020470
 8002a88:	40020488 	.word	0x40020488
 8002a8c:	400204a0 	.word	0x400204a0
 8002a90:	400204b8 	.word	0x400204b8
 8002a94:	58025408 	.word	0x58025408
 8002a98:	5802541c 	.word	0x5802541c
 8002a9c:	58025430 	.word	0x58025430
 8002aa0:	58025444 	.word	0x58025444
 8002aa4:	58025458 	.word	0x58025458
 8002aa8:	5802546c 	.word	0x5802546c
 8002aac:	58025480 	.word	0x58025480
 8002ab0:	58025494 	.word	0x58025494
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d007      	beq.n	8002aca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ac8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a6d      	ldr	r2, [pc, #436]	; (8002c84 <HAL_DMA_Abort+0x444>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d04a      	beq.n	8002b6a <HAL_DMA_Abort+0x32a>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a6b      	ldr	r2, [pc, #428]	; (8002c88 <HAL_DMA_Abort+0x448>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d045      	beq.n	8002b6a <HAL_DMA_Abort+0x32a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a6a      	ldr	r2, [pc, #424]	; (8002c8c <HAL_DMA_Abort+0x44c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d040      	beq.n	8002b6a <HAL_DMA_Abort+0x32a>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a68      	ldr	r2, [pc, #416]	; (8002c90 <HAL_DMA_Abort+0x450>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d03b      	beq.n	8002b6a <HAL_DMA_Abort+0x32a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a67      	ldr	r2, [pc, #412]	; (8002c94 <HAL_DMA_Abort+0x454>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d036      	beq.n	8002b6a <HAL_DMA_Abort+0x32a>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a65      	ldr	r2, [pc, #404]	; (8002c98 <HAL_DMA_Abort+0x458>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d031      	beq.n	8002b6a <HAL_DMA_Abort+0x32a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a64      	ldr	r2, [pc, #400]	; (8002c9c <HAL_DMA_Abort+0x45c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d02c      	beq.n	8002b6a <HAL_DMA_Abort+0x32a>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a62      	ldr	r2, [pc, #392]	; (8002ca0 <HAL_DMA_Abort+0x460>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d027      	beq.n	8002b6a <HAL_DMA_Abort+0x32a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a61      	ldr	r2, [pc, #388]	; (8002ca4 <HAL_DMA_Abort+0x464>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d022      	beq.n	8002b6a <HAL_DMA_Abort+0x32a>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a5f      	ldr	r2, [pc, #380]	; (8002ca8 <HAL_DMA_Abort+0x468>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d01d      	beq.n	8002b6a <HAL_DMA_Abort+0x32a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a5e      	ldr	r2, [pc, #376]	; (8002cac <HAL_DMA_Abort+0x46c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d018      	beq.n	8002b6a <HAL_DMA_Abort+0x32a>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a5c      	ldr	r2, [pc, #368]	; (8002cb0 <HAL_DMA_Abort+0x470>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d013      	beq.n	8002b6a <HAL_DMA_Abort+0x32a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a5b      	ldr	r2, [pc, #364]	; (8002cb4 <HAL_DMA_Abort+0x474>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00e      	beq.n	8002b6a <HAL_DMA_Abort+0x32a>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a59      	ldr	r2, [pc, #356]	; (8002cb8 <HAL_DMA_Abort+0x478>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d009      	beq.n	8002b6a <HAL_DMA_Abort+0x32a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a58      	ldr	r2, [pc, #352]	; (8002cbc <HAL_DMA_Abort+0x47c>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d004      	beq.n	8002b6a <HAL_DMA_Abort+0x32a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a56      	ldr	r2, [pc, #344]	; (8002cc0 <HAL_DMA_Abort+0x480>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d108      	bne.n	8002b7c <HAL_DMA_Abort+0x33c>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0201 	bic.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e007      	b.n	8002b8c <HAL_DMA_Abort+0x34c>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0201 	bic.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002b8c:	e013      	b.n	8002bb6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b8e:	f7ff f995 	bl	8001ebc <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b05      	cmp	r3, #5
 8002b9a:	d90c      	bls.n	8002bb6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e12d      	b.n	8002e12 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1e5      	bne.n	8002b8e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a2f      	ldr	r2, [pc, #188]	; (8002c84 <HAL_DMA_Abort+0x444>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d04a      	beq.n	8002c62 <HAL_DMA_Abort+0x422>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a2d      	ldr	r2, [pc, #180]	; (8002c88 <HAL_DMA_Abort+0x448>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d045      	beq.n	8002c62 <HAL_DMA_Abort+0x422>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a2c      	ldr	r2, [pc, #176]	; (8002c8c <HAL_DMA_Abort+0x44c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d040      	beq.n	8002c62 <HAL_DMA_Abort+0x422>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a2a      	ldr	r2, [pc, #168]	; (8002c90 <HAL_DMA_Abort+0x450>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d03b      	beq.n	8002c62 <HAL_DMA_Abort+0x422>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a29      	ldr	r2, [pc, #164]	; (8002c94 <HAL_DMA_Abort+0x454>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d036      	beq.n	8002c62 <HAL_DMA_Abort+0x422>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a27      	ldr	r2, [pc, #156]	; (8002c98 <HAL_DMA_Abort+0x458>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d031      	beq.n	8002c62 <HAL_DMA_Abort+0x422>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a26      	ldr	r2, [pc, #152]	; (8002c9c <HAL_DMA_Abort+0x45c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d02c      	beq.n	8002c62 <HAL_DMA_Abort+0x422>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a24      	ldr	r2, [pc, #144]	; (8002ca0 <HAL_DMA_Abort+0x460>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d027      	beq.n	8002c62 <HAL_DMA_Abort+0x422>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a23      	ldr	r2, [pc, #140]	; (8002ca4 <HAL_DMA_Abort+0x464>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d022      	beq.n	8002c62 <HAL_DMA_Abort+0x422>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a21      	ldr	r2, [pc, #132]	; (8002ca8 <HAL_DMA_Abort+0x468>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d01d      	beq.n	8002c62 <HAL_DMA_Abort+0x422>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a20      	ldr	r2, [pc, #128]	; (8002cac <HAL_DMA_Abort+0x46c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d018      	beq.n	8002c62 <HAL_DMA_Abort+0x422>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a1e      	ldr	r2, [pc, #120]	; (8002cb0 <HAL_DMA_Abort+0x470>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d013      	beq.n	8002c62 <HAL_DMA_Abort+0x422>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a1d      	ldr	r2, [pc, #116]	; (8002cb4 <HAL_DMA_Abort+0x474>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d00e      	beq.n	8002c62 <HAL_DMA_Abort+0x422>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1b      	ldr	r2, [pc, #108]	; (8002cb8 <HAL_DMA_Abort+0x478>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d009      	beq.n	8002c62 <HAL_DMA_Abort+0x422>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1a      	ldr	r2, [pc, #104]	; (8002cbc <HAL_DMA_Abort+0x47c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d004      	beq.n	8002c62 <HAL_DMA_Abort+0x422>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a18      	ldr	r2, [pc, #96]	; (8002cc0 <HAL_DMA_Abort+0x480>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d101      	bne.n	8002c66 <HAL_DMA_Abort+0x426>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <HAL_DMA_Abort+0x428>
 8002c66:	2300      	movs	r3, #0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d02b      	beq.n	8002cc4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c70:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c76:	f003 031f 	and.w	r3, r3, #31
 8002c7a:	223f      	movs	r2, #63	; 0x3f
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	609a      	str	r2, [r3, #8]
 8002c82:	e02a      	b.n	8002cda <HAL_DMA_Abort+0x49a>
 8002c84:	40020010 	.word	0x40020010
 8002c88:	40020028 	.word	0x40020028
 8002c8c:	40020040 	.word	0x40020040
 8002c90:	40020058 	.word	0x40020058
 8002c94:	40020070 	.word	0x40020070
 8002c98:	40020088 	.word	0x40020088
 8002c9c:	400200a0 	.word	0x400200a0
 8002ca0:	400200b8 	.word	0x400200b8
 8002ca4:	40020410 	.word	0x40020410
 8002ca8:	40020428 	.word	0x40020428
 8002cac:	40020440 	.word	0x40020440
 8002cb0:	40020458 	.word	0x40020458
 8002cb4:	40020470 	.word	0x40020470
 8002cb8:	40020488 	.word	0x40020488
 8002cbc:	400204a0 	.word	0x400204a0
 8002cc0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	409a      	lsls	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a4f      	ldr	r2, [pc, #316]	; (8002e1c <HAL_DMA_Abort+0x5dc>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d072      	beq.n	8002dca <HAL_DMA_Abort+0x58a>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a4d      	ldr	r2, [pc, #308]	; (8002e20 <HAL_DMA_Abort+0x5e0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d06d      	beq.n	8002dca <HAL_DMA_Abort+0x58a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a4c      	ldr	r2, [pc, #304]	; (8002e24 <HAL_DMA_Abort+0x5e4>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d068      	beq.n	8002dca <HAL_DMA_Abort+0x58a>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a4a      	ldr	r2, [pc, #296]	; (8002e28 <HAL_DMA_Abort+0x5e8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d063      	beq.n	8002dca <HAL_DMA_Abort+0x58a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a49      	ldr	r2, [pc, #292]	; (8002e2c <HAL_DMA_Abort+0x5ec>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d05e      	beq.n	8002dca <HAL_DMA_Abort+0x58a>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a47      	ldr	r2, [pc, #284]	; (8002e30 <HAL_DMA_Abort+0x5f0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d059      	beq.n	8002dca <HAL_DMA_Abort+0x58a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a46      	ldr	r2, [pc, #280]	; (8002e34 <HAL_DMA_Abort+0x5f4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d054      	beq.n	8002dca <HAL_DMA_Abort+0x58a>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a44      	ldr	r2, [pc, #272]	; (8002e38 <HAL_DMA_Abort+0x5f8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d04f      	beq.n	8002dca <HAL_DMA_Abort+0x58a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a43      	ldr	r2, [pc, #268]	; (8002e3c <HAL_DMA_Abort+0x5fc>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d04a      	beq.n	8002dca <HAL_DMA_Abort+0x58a>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a41      	ldr	r2, [pc, #260]	; (8002e40 <HAL_DMA_Abort+0x600>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d045      	beq.n	8002dca <HAL_DMA_Abort+0x58a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a40      	ldr	r2, [pc, #256]	; (8002e44 <HAL_DMA_Abort+0x604>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d040      	beq.n	8002dca <HAL_DMA_Abort+0x58a>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a3e      	ldr	r2, [pc, #248]	; (8002e48 <HAL_DMA_Abort+0x608>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d03b      	beq.n	8002dca <HAL_DMA_Abort+0x58a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a3d      	ldr	r2, [pc, #244]	; (8002e4c <HAL_DMA_Abort+0x60c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d036      	beq.n	8002dca <HAL_DMA_Abort+0x58a>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a3b      	ldr	r2, [pc, #236]	; (8002e50 <HAL_DMA_Abort+0x610>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d031      	beq.n	8002dca <HAL_DMA_Abort+0x58a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a3a      	ldr	r2, [pc, #232]	; (8002e54 <HAL_DMA_Abort+0x614>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d02c      	beq.n	8002dca <HAL_DMA_Abort+0x58a>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a38      	ldr	r2, [pc, #224]	; (8002e58 <HAL_DMA_Abort+0x618>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d027      	beq.n	8002dca <HAL_DMA_Abort+0x58a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a37      	ldr	r2, [pc, #220]	; (8002e5c <HAL_DMA_Abort+0x61c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d022      	beq.n	8002dca <HAL_DMA_Abort+0x58a>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a35      	ldr	r2, [pc, #212]	; (8002e60 <HAL_DMA_Abort+0x620>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d01d      	beq.n	8002dca <HAL_DMA_Abort+0x58a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a34      	ldr	r2, [pc, #208]	; (8002e64 <HAL_DMA_Abort+0x624>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d018      	beq.n	8002dca <HAL_DMA_Abort+0x58a>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a32      	ldr	r2, [pc, #200]	; (8002e68 <HAL_DMA_Abort+0x628>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d013      	beq.n	8002dca <HAL_DMA_Abort+0x58a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a31      	ldr	r2, [pc, #196]	; (8002e6c <HAL_DMA_Abort+0x62c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d00e      	beq.n	8002dca <HAL_DMA_Abort+0x58a>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a2f      	ldr	r2, [pc, #188]	; (8002e70 <HAL_DMA_Abort+0x630>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d009      	beq.n	8002dca <HAL_DMA_Abort+0x58a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a2e      	ldr	r2, [pc, #184]	; (8002e74 <HAL_DMA_Abort+0x634>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d004      	beq.n	8002dca <HAL_DMA_Abort+0x58a>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a2c      	ldr	r2, [pc, #176]	; (8002e78 <HAL_DMA_Abort+0x638>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d101      	bne.n	8002dce <HAL_DMA_Abort+0x58e>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <HAL_DMA_Abort+0x590>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d015      	beq.n	8002e00 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ddc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00c      	beq.n	8002e00 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002df4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002dfe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40020010 	.word	0x40020010
 8002e20:	40020028 	.word	0x40020028
 8002e24:	40020040 	.word	0x40020040
 8002e28:	40020058 	.word	0x40020058
 8002e2c:	40020070 	.word	0x40020070
 8002e30:	40020088 	.word	0x40020088
 8002e34:	400200a0 	.word	0x400200a0
 8002e38:	400200b8 	.word	0x400200b8
 8002e3c:	40020410 	.word	0x40020410
 8002e40:	40020428 	.word	0x40020428
 8002e44:	40020440 	.word	0x40020440
 8002e48:	40020458 	.word	0x40020458
 8002e4c:	40020470 	.word	0x40020470
 8002e50:	40020488 	.word	0x40020488
 8002e54:	400204a0 	.word	0x400204a0
 8002e58:	400204b8 	.word	0x400204b8
 8002e5c:	58025408 	.word	0x58025408
 8002e60:	5802541c 	.word	0x5802541c
 8002e64:	58025430 	.word	0x58025430
 8002e68:	58025444 	.word	0x58025444
 8002e6c:	58025458 	.word	0x58025458
 8002e70:	5802546c 	.word	0x5802546c
 8002e74:	58025480 	.word	0x58025480
 8002e78:	58025494 	.word	0x58025494

08002e7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e237      	b.n	80032fe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d004      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2280      	movs	r2, #128	; 0x80
 8002e9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e22c      	b.n	80032fe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a5c      	ldr	r2, [pc, #368]	; (800301c <HAL_DMA_Abort_IT+0x1a0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d04a      	beq.n	8002f44 <HAL_DMA_Abort_IT+0xc8>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a5b      	ldr	r2, [pc, #364]	; (8003020 <HAL_DMA_Abort_IT+0x1a4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d045      	beq.n	8002f44 <HAL_DMA_Abort_IT+0xc8>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a59      	ldr	r2, [pc, #356]	; (8003024 <HAL_DMA_Abort_IT+0x1a8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d040      	beq.n	8002f44 <HAL_DMA_Abort_IT+0xc8>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a58      	ldr	r2, [pc, #352]	; (8003028 <HAL_DMA_Abort_IT+0x1ac>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d03b      	beq.n	8002f44 <HAL_DMA_Abort_IT+0xc8>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a56      	ldr	r2, [pc, #344]	; (800302c <HAL_DMA_Abort_IT+0x1b0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d036      	beq.n	8002f44 <HAL_DMA_Abort_IT+0xc8>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a55      	ldr	r2, [pc, #340]	; (8003030 <HAL_DMA_Abort_IT+0x1b4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d031      	beq.n	8002f44 <HAL_DMA_Abort_IT+0xc8>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a53      	ldr	r2, [pc, #332]	; (8003034 <HAL_DMA_Abort_IT+0x1b8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d02c      	beq.n	8002f44 <HAL_DMA_Abort_IT+0xc8>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a52      	ldr	r2, [pc, #328]	; (8003038 <HAL_DMA_Abort_IT+0x1bc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d027      	beq.n	8002f44 <HAL_DMA_Abort_IT+0xc8>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a50      	ldr	r2, [pc, #320]	; (800303c <HAL_DMA_Abort_IT+0x1c0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d022      	beq.n	8002f44 <HAL_DMA_Abort_IT+0xc8>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a4f      	ldr	r2, [pc, #316]	; (8003040 <HAL_DMA_Abort_IT+0x1c4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d01d      	beq.n	8002f44 <HAL_DMA_Abort_IT+0xc8>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a4d      	ldr	r2, [pc, #308]	; (8003044 <HAL_DMA_Abort_IT+0x1c8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d018      	beq.n	8002f44 <HAL_DMA_Abort_IT+0xc8>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a4c      	ldr	r2, [pc, #304]	; (8003048 <HAL_DMA_Abort_IT+0x1cc>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d013      	beq.n	8002f44 <HAL_DMA_Abort_IT+0xc8>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a4a      	ldr	r2, [pc, #296]	; (800304c <HAL_DMA_Abort_IT+0x1d0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00e      	beq.n	8002f44 <HAL_DMA_Abort_IT+0xc8>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a49      	ldr	r2, [pc, #292]	; (8003050 <HAL_DMA_Abort_IT+0x1d4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d009      	beq.n	8002f44 <HAL_DMA_Abort_IT+0xc8>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a47      	ldr	r2, [pc, #284]	; (8003054 <HAL_DMA_Abort_IT+0x1d8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d004      	beq.n	8002f44 <HAL_DMA_Abort_IT+0xc8>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a46      	ldr	r2, [pc, #280]	; (8003058 <HAL_DMA_Abort_IT+0x1dc>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d101      	bne.n	8002f48 <HAL_DMA_Abort_IT+0xcc>
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <HAL_DMA_Abort_IT+0xce>
 8002f48:	2300      	movs	r3, #0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 8086 	beq.w	800305c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2204      	movs	r2, #4
 8002f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a2f      	ldr	r2, [pc, #188]	; (800301c <HAL_DMA_Abort_IT+0x1a0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d04a      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x17c>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a2e      	ldr	r2, [pc, #184]	; (8003020 <HAL_DMA_Abort_IT+0x1a4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d045      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x17c>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a2c      	ldr	r2, [pc, #176]	; (8003024 <HAL_DMA_Abort_IT+0x1a8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d040      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x17c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a2b      	ldr	r2, [pc, #172]	; (8003028 <HAL_DMA_Abort_IT+0x1ac>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d03b      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x17c>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a29      	ldr	r2, [pc, #164]	; (800302c <HAL_DMA_Abort_IT+0x1b0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d036      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x17c>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a28      	ldr	r2, [pc, #160]	; (8003030 <HAL_DMA_Abort_IT+0x1b4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d031      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x17c>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a26      	ldr	r2, [pc, #152]	; (8003034 <HAL_DMA_Abort_IT+0x1b8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d02c      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x17c>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a25      	ldr	r2, [pc, #148]	; (8003038 <HAL_DMA_Abort_IT+0x1bc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d027      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x17c>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a23      	ldr	r2, [pc, #140]	; (800303c <HAL_DMA_Abort_IT+0x1c0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d022      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x17c>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a22      	ldr	r2, [pc, #136]	; (8003040 <HAL_DMA_Abort_IT+0x1c4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d01d      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x17c>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a20      	ldr	r2, [pc, #128]	; (8003044 <HAL_DMA_Abort_IT+0x1c8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d018      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x17c>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a1f      	ldr	r2, [pc, #124]	; (8003048 <HAL_DMA_Abort_IT+0x1cc>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d013      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x17c>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a1d      	ldr	r2, [pc, #116]	; (800304c <HAL_DMA_Abort_IT+0x1d0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00e      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x17c>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a1c      	ldr	r2, [pc, #112]	; (8003050 <HAL_DMA_Abort_IT+0x1d4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d009      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x17c>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a1a      	ldr	r2, [pc, #104]	; (8003054 <HAL_DMA_Abort_IT+0x1d8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x17c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a19      	ldr	r2, [pc, #100]	; (8003058 <HAL_DMA_Abort_IT+0x1dc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d108      	bne.n	800300a <HAL_DMA_Abort_IT+0x18e>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0201 	bic.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	e178      	b.n	80032fc <HAL_DMA_Abort_IT+0x480>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0201 	bic.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	e16f      	b.n	80032fc <HAL_DMA_Abort_IT+0x480>
 800301c:	40020010 	.word	0x40020010
 8003020:	40020028 	.word	0x40020028
 8003024:	40020040 	.word	0x40020040
 8003028:	40020058 	.word	0x40020058
 800302c:	40020070 	.word	0x40020070
 8003030:	40020088 	.word	0x40020088
 8003034:	400200a0 	.word	0x400200a0
 8003038:	400200b8 	.word	0x400200b8
 800303c:	40020410 	.word	0x40020410
 8003040:	40020428 	.word	0x40020428
 8003044:	40020440 	.word	0x40020440
 8003048:	40020458 	.word	0x40020458
 800304c:	40020470 	.word	0x40020470
 8003050:	40020488 	.word	0x40020488
 8003054:	400204a0 	.word	0x400204a0
 8003058:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 020e 	bic.w	r2, r2, #14
 800306a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a6c      	ldr	r2, [pc, #432]	; (8003224 <HAL_DMA_Abort_IT+0x3a8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d04a      	beq.n	800310c <HAL_DMA_Abort_IT+0x290>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a6b      	ldr	r2, [pc, #428]	; (8003228 <HAL_DMA_Abort_IT+0x3ac>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d045      	beq.n	800310c <HAL_DMA_Abort_IT+0x290>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a69      	ldr	r2, [pc, #420]	; (800322c <HAL_DMA_Abort_IT+0x3b0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d040      	beq.n	800310c <HAL_DMA_Abort_IT+0x290>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a68      	ldr	r2, [pc, #416]	; (8003230 <HAL_DMA_Abort_IT+0x3b4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d03b      	beq.n	800310c <HAL_DMA_Abort_IT+0x290>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a66      	ldr	r2, [pc, #408]	; (8003234 <HAL_DMA_Abort_IT+0x3b8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d036      	beq.n	800310c <HAL_DMA_Abort_IT+0x290>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a65      	ldr	r2, [pc, #404]	; (8003238 <HAL_DMA_Abort_IT+0x3bc>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d031      	beq.n	800310c <HAL_DMA_Abort_IT+0x290>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a63      	ldr	r2, [pc, #396]	; (800323c <HAL_DMA_Abort_IT+0x3c0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d02c      	beq.n	800310c <HAL_DMA_Abort_IT+0x290>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a62      	ldr	r2, [pc, #392]	; (8003240 <HAL_DMA_Abort_IT+0x3c4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d027      	beq.n	800310c <HAL_DMA_Abort_IT+0x290>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a60      	ldr	r2, [pc, #384]	; (8003244 <HAL_DMA_Abort_IT+0x3c8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d022      	beq.n	800310c <HAL_DMA_Abort_IT+0x290>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a5f      	ldr	r2, [pc, #380]	; (8003248 <HAL_DMA_Abort_IT+0x3cc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d01d      	beq.n	800310c <HAL_DMA_Abort_IT+0x290>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a5d      	ldr	r2, [pc, #372]	; (800324c <HAL_DMA_Abort_IT+0x3d0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d018      	beq.n	800310c <HAL_DMA_Abort_IT+0x290>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a5c      	ldr	r2, [pc, #368]	; (8003250 <HAL_DMA_Abort_IT+0x3d4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d013      	beq.n	800310c <HAL_DMA_Abort_IT+0x290>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a5a      	ldr	r2, [pc, #360]	; (8003254 <HAL_DMA_Abort_IT+0x3d8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d00e      	beq.n	800310c <HAL_DMA_Abort_IT+0x290>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a59      	ldr	r2, [pc, #356]	; (8003258 <HAL_DMA_Abort_IT+0x3dc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d009      	beq.n	800310c <HAL_DMA_Abort_IT+0x290>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a57      	ldr	r2, [pc, #348]	; (800325c <HAL_DMA_Abort_IT+0x3e0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d004      	beq.n	800310c <HAL_DMA_Abort_IT+0x290>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a56      	ldr	r2, [pc, #344]	; (8003260 <HAL_DMA_Abort_IT+0x3e4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d108      	bne.n	800311e <HAL_DMA_Abort_IT+0x2a2>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0201 	bic.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	e007      	b.n	800312e <HAL_DMA_Abort_IT+0x2b2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0201 	bic.w	r2, r2, #1
 800312c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a3c      	ldr	r2, [pc, #240]	; (8003224 <HAL_DMA_Abort_IT+0x3a8>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d072      	beq.n	800321e <HAL_DMA_Abort_IT+0x3a2>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a3a      	ldr	r2, [pc, #232]	; (8003228 <HAL_DMA_Abort_IT+0x3ac>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d06d      	beq.n	800321e <HAL_DMA_Abort_IT+0x3a2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a39      	ldr	r2, [pc, #228]	; (800322c <HAL_DMA_Abort_IT+0x3b0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d068      	beq.n	800321e <HAL_DMA_Abort_IT+0x3a2>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a37      	ldr	r2, [pc, #220]	; (8003230 <HAL_DMA_Abort_IT+0x3b4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d063      	beq.n	800321e <HAL_DMA_Abort_IT+0x3a2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a36      	ldr	r2, [pc, #216]	; (8003234 <HAL_DMA_Abort_IT+0x3b8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d05e      	beq.n	800321e <HAL_DMA_Abort_IT+0x3a2>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a34      	ldr	r2, [pc, #208]	; (8003238 <HAL_DMA_Abort_IT+0x3bc>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d059      	beq.n	800321e <HAL_DMA_Abort_IT+0x3a2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a33      	ldr	r2, [pc, #204]	; (800323c <HAL_DMA_Abort_IT+0x3c0>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d054      	beq.n	800321e <HAL_DMA_Abort_IT+0x3a2>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a31      	ldr	r2, [pc, #196]	; (8003240 <HAL_DMA_Abort_IT+0x3c4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d04f      	beq.n	800321e <HAL_DMA_Abort_IT+0x3a2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a30      	ldr	r2, [pc, #192]	; (8003244 <HAL_DMA_Abort_IT+0x3c8>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d04a      	beq.n	800321e <HAL_DMA_Abort_IT+0x3a2>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a2e      	ldr	r2, [pc, #184]	; (8003248 <HAL_DMA_Abort_IT+0x3cc>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d045      	beq.n	800321e <HAL_DMA_Abort_IT+0x3a2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a2d      	ldr	r2, [pc, #180]	; (800324c <HAL_DMA_Abort_IT+0x3d0>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d040      	beq.n	800321e <HAL_DMA_Abort_IT+0x3a2>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a2b      	ldr	r2, [pc, #172]	; (8003250 <HAL_DMA_Abort_IT+0x3d4>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d03b      	beq.n	800321e <HAL_DMA_Abort_IT+0x3a2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a2a      	ldr	r2, [pc, #168]	; (8003254 <HAL_DMA_Abort_IT+0x3d8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d036      	beq.n	800321e <HAL_DMA_Abort_IT+0x3a2>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a28      	ldr	r2, [pc, #160]	; (8003258 <HAL_DMA_Abort_IT+0x3dc>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d031      	beq.n	800321e <HAL_DMA_Abort_IT+0x3a2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a27      	ldr	r2, [pc, #156]	; (800325c <HAL_DMA_Abort_IT+0x3e0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d02c      	beq.n	800321e <HAL_DMA_Abort_IT+0x3a2>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a25      	ldr	r2, [pc, #148]	; (8003260 <HAL_DMA_Abort_IT+0x3e4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d027      	beq.n	800321e <HAL_DMA_Abort_IT+0x3a2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a24      	ldr	r2, [pc, #144]	; (8003264 <HAL_DMA_Abort_IT+0x3e8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d022      	beq.n	800321e <HAL_DMA_Abort_IT+0x3a2>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a22      	ldr	r2, [pc, #136]	; (8003268 <HAL_DMA_Abort_IT+0x3ec>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d01d      	beq.n	800321e <HAL_DMA_Abort_IT+0x3a2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a21      	ldr	r2, [pc, #132]	; (800326c <HAL_DMA_Abort_IT+0x3f0>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d018      	beq.n	800321e <HAL_DMA_Abort_IT+0x3a2>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1f      	ldr	r2, [pc, #124]	; (8003270 <HAL_DMA_Abort_IT+0x3f4>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d013      	beq.n	800321e <HAL_DMA_Abort_IT+0x3a2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a1e      	ldr	r2, [pc, #120]	; (8003274 <HAL_DMA_Abort_IT+0x3f8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00e      	beq.n	800321e <HAL_DMA_Abort_IT+0x3a2>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a1c      	ldr	r2, [pc, #112]	; (8003278 <HAL_DMA_Abort_IT+0x3fc>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d009      	beq.n	800321e <HAL_DMA_Abort_IT+0x3a2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1b      	ldr	r2, [pc, #108]	; (800327c <HAL_DMA_Abort_IT+0x400>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d004      	beq.n	800321e <HAL_DMA_Abort_IT+0x3a2>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a19      	ldr	r2, [pc, #100]	; (8003280 <HAL_DMA_Abort_IT+0x404>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d132      	bne.n	8003284 <HAL_DMA_Abort_IT+0x408>
 800321e:	2301      	movs	r3, #1
 8003220:	e031      	b.n	8003286 <HAL_DMA_Abort_IT+0x40a>
 8003222:	bf00      	nop
 8003224:	40020010 	.word	0x40020010
 8003228:	40020028 	.word	0x40020028
 800322c:	40020040 	.word	0x40020040
 8003230:	40020058 	.word	0x40020058
 8003234:	40020070 	.word	0x40020070
 8003238:	40020088 	.word	0x40020088
 800323c:	400200a0 	.word	0x400200a0
 8003240:	400200b8 	.word	0x400200b8
 8003244:	40020410 	.word	0x40020410
 8003248:	40020428 	.word	0x40020428
 800324c:	40020440 	.word	0x40020440
 8003250:	40020458 	.word	0x40020458
 8003254:	40020470 	.word	0x40020470
 8003258:	40020488 	.word	0x40020488
 800325c:	400204a0 	.word	0x400204a0
 8003260:	400204b8 	.word	0x400204b8
 8003264:	58025408 	.word	0x58025408
 8003268:	5802541c 	.word	0x5802541c
 800326c:	58025430 	.word	0x58025430
 8003270:	58025444 	.word	0x58025444
 8003274:	58025458 	.word	0x58025458
 8003278:	5802546c 	.word	0x5802546c
 800327c:	58025480 	.word	0x58025480
 8003280:	58025494 	.word	0x58025494
 8003284:	2300      	movs	r3, #0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d028      	beq.n	80032dc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003298:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	2201      	movs	r2, #1
 80032aa:	409a      	lsls	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80032b8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00c      	beq.n	80032dc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032d0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80032da:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop

08003308 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	; 0x28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003314:	4b67      	ldr	r3, [pc, #412]	; (80034b4 <HAL_DMA_IRQHandler+0x1ac>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a67      	ldr	r2, [pc, #412]	; (80034b8 <HAL_DMA_IRQHandler+0x1b0>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	0a9b      	lsrs	r3, r3, #10
 8003320:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003326:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a5f      	ldr	r2, [pc, #380]	; (80034bc <HAL_DMA_IRQHandler+0x1b4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d04a      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a5d      	ldr	r2, [pc, #372]	; (80034c0 <HAL_DMA_IRQHandler+0x1b8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d045      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a5c      	ldr	r2, [pc, #368]	; (80034c4 <HAL_DMA_IRQHandler+0x1bc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d040      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a5a      	ldr	r2, [pc, #360]	; (80034c8 <HAL_DMA_IRQHandler+0x1c0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d03b      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a59      	ldr	r2, [pc, #356]	; (80034cc <HAL_DMA_IRQHandler+0x1c4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d036      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a57      	ldr	r2, [pc, #348]	; (80034d0 <HAL_DMA_IRQHandler+0x1c8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d031      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a56      	ldr	r2, [pc, #344]	; (80034d4 <HAL_DMA_IRQHandler+0x1cc>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d02c      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a54      	ldr	r2, [pc, #336]	; (80034d8 <HAL_DMA_IRQHandler+0x1d0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d027      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a53      	ldr	r2, [pc, #332]	; (80034dc <HAL_DMA_IRQHandler+0x1d4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d022      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a51      	ldr	r2, [pc, #324]	; (80034e0 <HAL_DMA_IRQHandler+0x1d8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d01d      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a50      	ldr	r2, [pc, #320]	; (80034e4 <HAL_DMA_IRQHandler+0x1dc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d018      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a4e      	ldr	r2, [pc, #312]	; (80034e8 <HAL_DMA_IRQHandler+0x1e0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d013      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a4d      	ldr	r2, [pc, #308]	; (80034ec <HAL_DMA_IRQHandler+0x1e4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d00e      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a4b      	ldr	r2, [pc, #300]	; (80034f0 <HAL_DMA_IRQHandler+0x1e8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d009      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a4a      	ldr	r2, [pc, #296]	; (80034f4 <HAL_DMA_IRQHandler+0x1ec>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d004      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a48      	ldr	r2, [pc, #288]	; (80034f8 <HAL_DMA_IRQHandler+0x1f0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d101      	bne.n	80033de <HAL_DMA_IRQHandler+0xd6>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <HAL_DMA_IRQHandler+0xd8>
 80033de:	2300      	movs	r3, #0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 842b 	beq.w	8003c3c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ea:	f003 031f 	and.w	r3, r3, #31
 80033ee:	2208      	movs	r2, #8
 80033f0:	409a      	lsls	r2, r3
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 80a2 	beq.w	8003540 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a2e      	ldr	r2, [pc, #184]	; (80034bc <HAL_DMA_IRQHandler+0x1b4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d04a      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a2d      	ldr	r2, [pc, #180]	; (80034c0 <HAL_DMA_IRQHandler+0x1b8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d045      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a2b      	ldr	r2, [pc, #172]	; (80034c4 <HAL_DMA_IRQHandler+0x1bc>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d040      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a2a      	ldr	r2, [pc, #168]	; (80034c8 <HAL_DMA_IRQHandler+0x1c0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d03b      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a28      	ldr	r2, [pc, #160]	; (80034cc <HAL_DMA_IRQHandler+0x1c4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d036      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a27      	ldr	r2, [pc, #156]	; (80034d0 <HAL_DMA_IRQHandler+0x1c8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d031      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a25      	ldr	r2, [pc, #148]	; (80034d4 <HAL_DMA_IRQHandler+0x1cc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d02c      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a24      	ldr	r2, [pc, #144]	; (80034d8 <HAL_DMA_IRQHandler+0x1d0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d027      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a22      	ldr	r2, [pc, #136]	; (80034dc <HAL_DMA_IRQHandler+0x1d4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d022      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a21      	ldr	r2, [pc, #132]	; (80034e0 <HAL_DMA_IRQHandler+0x1d8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d01d      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1f      	ldr	r2, [pc, #124]	; (80034e4 <HAL_DMA_IRQHandler+0x1dc>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d018      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1e      	ldr	r2, [pc, #120]	; (80034e8 <HAL_DMA_IRQHandler+0x1e0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d013      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1c      	ldr	r2, [pc, #112]	; (80034ec <HAL_DMA_IRQHandler+0x1e4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00e      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1b      	ldr	r2, [pc, #108]	; (80034f0 <HAL_DMA_IRQHandler+0x1e8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d009      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a19      	ldr	r2, [pc, #100]	; (80034f4 <HAL_DMA_IRQHandler+0x1ec>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a18      	ldr	r2, [pc, #96]	; (80034f8 <HAL_DMA_IRQHandler+0x1f0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d12f      	bne.n	80034fc <HAL_DMA_IRQHandler+0x1f4>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	bf14      	ite	ne
 80034aa:	2301      	movne	r3, #1
 80034ac:	2300      	moveq	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	e02e      	b.n	8003510 <HAL_DMA_IRQHandler+0x208>
 80034b2:	bf00      	nop
 80034b4:	24000068 	.word	0x24000068
 80034b8:	1b4e81b5 	.word	0x1b4e81b5
 80034bc:	40020010 	.word	0x40020010
 80034c0:	40020028 	.word	0x40020028
 80034c4:	40020040 	.word	0x40020040
 80034c8:	40020058 	.word	0x40020058
 80034cc:	40020070 	.word	0x40020070
 80034d0:	40020088 	.word	0x40020088
 80034d4:	400200a0 	.word	0x400200a0
 80034d8:	400200b8 	.word	0x400200b8
 80034dc:	40020410 	.word	0x40020410
 80034e0:	40020428 	.word	0x40020428
 80034e4:	40020440 	.word	0x40020440
 80034e8:	40020458 	.word	0x40020458
 80034ec:	40020470 	.word	0x40020470
 80034f0:	40020488 	.word	0x40020488
 80034f4:	400204a0 	.word	0x400204a0
 80034f8:	400204b8 	.word	0x400204b8
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	bf14      	ite	ne
 800350a:	2301      	movne	r3, #1
 800350c:	2300      	moveq	r3, #0
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d015      	beq.n	8003540 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0204 	bic.w	r2, r2, #4
 8003522:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	2208      	movs	r2, #8
 800352e:	409a      	lsls	r2, r3
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003538:	f043 0201 	orr.w	r2, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	fa22 f303 	lsr.w	r3, r2, r3
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d06e      	beq.n	8003634 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a69      	ldr	r2, [pc, #420]	; (8003700 <HAL_DMA_IRQHandler+0x3f8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d04a      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a67      	ldr	r2, [pc, #412]	; (8003704 <HAL_DMA_IRQHandler+0x3fc>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d045      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a66      	ldr	r2, [pc, #408]	; (8003708 <HAL_DMA_IRQHandler+0x400>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d040      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a64      	ldr	r2, [pc, #400]	; (800370c <HAL_DMA_IRQHandler+0x404>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d03b      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a63      	ldr	r2, [pc, #396]	; (8003710 <HAL_DMA_IRQHandler+0x408>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d036      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a61      	ldr	r2, [pc, #388]	; (8003714 <HAL_DMA_IRQHandler+0x40c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d031      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a60      	ldr	r2, [pc, #384]	; (8003718 <HAL_DMA_IRQHandler+0x410>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d02c      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a5e      	ldr	r2, [pc, #376]	; (800371c <HAL_DMA_IRQHandler+0x414>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d027      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a5d      	ldr	r2, [pc, #372]	; (8003720 <HAL_DMA_IRQHandler+0x418>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d022      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a5b      	ldr	r2, [pc, #364]	; (8003724 <HAL_DMA_IRQHandler+0x41c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d01d      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a5a      	ldr	r2, [pc, #360]	; (8003728 <HAL_DMA_IRQHandler+0x420>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d018      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a58      	ldr	r2, [pc, #352]	; (800372c <HAL_DMA_IRQHandler+0x424>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d013      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a57      	ldr	r2, [pc, #348]	; (8003730 <HAL_DMA_IRQHandler+0x428>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00e      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a55      	ldr	r2, [pc, #340]	; (8003734 <HAL_DMA_IRQHandler+0x42c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d009      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a54      	ldr	r2, [pc, #336]	; (8003738 <HAL_DMA_IRQHandler+0x430>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d004      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a52      	ldr	r2, [pc, #328]	; (800373c <HAL_DMA_IRQHandler+0x434>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d10a      	bne.n	800360c <HAL_DMA_IRQHandler+0x304>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf14      	ite	ne
 8003604:	2301      	movne	r3, #1
 8003606:	2300      	moveq	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	e003      	b.n	8003614 <HAL_DMA_IRQHandler+0x30c>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2300      	movs	r3, #0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00d      	beq.n	8003634 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	2201      	movs	r2, #1
 8003622:	409a      	lsls	r2, r3
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362c:	f043 0202 	orr.w	r2, r3, #2
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003638:	f003 031f 	and.w	r3, r3, #31
 800363c:	2204      	movs	r2, #4
 800363e:	409a      	lsls	r2, r3
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	4013      	ands	r3, r2
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 808f 	beq.w	8003768 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a2c      	ldr	r2, [pc, #176]	; (8003700 <HAL_DMA_IRQHandler+0x3f8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d04a      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a2a      	ldr	r2, [pc, #168]	; (8003704 <HAL_DMA_IRQHandler+0x3fc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d045      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a29      	ldr	r2, [pc, #164]	; (8003708 <HAL_DMA_IRQHandler+0x400>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d040      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a27      	ldr	r2, [pc, #156]	; (800370c <HAL_DMA_IRQHandler+0x404>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d03b      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a26      	ldr	r2, [pc, #152]	; (8003710 <HAL_DMA_IRQHandler+0x408>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d036      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a24      	ldr	r2, [pc, #144]	; (8003714 <HAL_DMA_IRQHandler+0x40c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d031      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a23      	ldr	r2, [pc, #140]	; (8003718 <HAL_DMA_IRQHandler+0x410>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d02c      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a21      	ldr	r2, [pc, #132]	; (800371c <HAL_DMA_IRQHandler+0x414>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d027      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a20      	ldr	r2, [pc, #128]	; (8003720 <HAL_DMA_IRQHandler+0x418>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d022      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1e      	ldr	r2, [pc, #120]	; (8003724 <HAL_DMA_IRQHandler+0x41c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d01d      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1d      	ldr	r2, [pc, #116]	; (8003728 <HAL_DMA_IRQHandler+0x420>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d018      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1b      	ldr	r2, [pc, #108]	; (800372c <HAL_DMA_IRQHandler+0x424>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1a      	ldr	r2, [pc, #104]	; (8003730 <HAL_DMA_IRQHandler+0x428>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00e      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a18      	ldr	r2, [pc, #96]	; (8003734 <HAL_DMA_IRQHandler+0x42c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d009      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a17      	ldr	r2, [pc, #92]	; (8003738 <HAL_DMA_IRQHandler+0x430>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d004      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a15      	ldr	r2, [pc, #84]	; (800373c <HAL_DMA_IRQHandler+0x434>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d12a      	bne.n	8003740 <HAL_DMA_IRQHandler+0x438>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bf14      	ite	ne
 80036f8:	2301      	movne	r3, #1
 80036fa:	2300      	moveq	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	e023      	b.n	8003748 <HAL_DMA_IRQHandler+0x440>
 8003700:	40020010 	.word	0x40020010
 8003704:	40020028 	.word	0x40020028
 8003708:	40020040 	.word	0x40020040
 800370c:	40020058 	.word	0x40020058
 8003710:	40020070 	.word	0x40020070
 8003714:	40020088 	.word	0x40020088
 8003718:	400200a0 	.word	0x400200a0
 800371c:	400200b8 	.word	0x400200b8
 8003720:	40020410 	.word	0x40020410
 8003724:	40020428 	.word	0x40020428
 8003728:	40020440 	.word	0x40020440
 800372c:	40020458 	.word	0x40020458
 8003730:	40020470 	.word	0x40020470
 8003734:	40020488 	.word	0x40020488
 8003738:	400204a0 	.word	0x400204a0
 800373c:	400204b8 	.word	0x400204b8
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2300      	movs	r3, #0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00d      	beq.n	8003768 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	2204      	movs	r2, #4
 8003756:	409a      	lsls	r2, r3
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003760:	f043 0204 	orr.w	r2, r3, #4
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	2210      	movs	r2, #16
 8003772:	409a      	lsls	r2, r3
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80a6 	beq.w	80038ca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a85      	ldr	r2, [pc, #532]	; (8003998 <HAL_DMA_IRQHandler+0x690>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d04a      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a83      	ldr	r2, [pc, #524]	; (800399c <HAL_DMA_IRQHandler+0x694>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d045      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a82      	ldr	r2, [pc, #520]	; (80039a0 <HAL_DMA_IRQHandler+0x698>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d040      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a80      	ldr	r2, [pc, #512]	; (80039a4 <HAL_DMA_IRQHandler+0x69c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d03b      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a7f      	ldr	r2, [pc, #508]	; (80039a8 <HAL_DMA_IRQHandler+0x6a0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d036      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a7d      	ldr	r2, [pc, #500]	; (80039ac <HAL_DMA_IRQHandler+0x6a4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d031      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a7c      	ldr	r2, [pc, #496]	; (80039b0 <HAL_DMA_IRQHandler+0x6a8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d02c      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a7a      	ldr	r2, [pc, #488]	; (80039b4 <HAL_DMA_IRQHandler+0x6ac>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d027      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a79      	ldr	r2, [pc, #484]	; (80039b8 <HAL_DMA_IRQHandler+0x6b0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d022      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a77      	ldr	r2, [pc, #476]	; (80039bc <HAL_DMA_IRQHandler+0x6b4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d01d      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a76      	ldr	r2, [pc, #472]	; (80039c0 <HAL_DMA_IRQHandler+0x6b8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d018      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a74      	ldr	r2, [pc, #464]	; (80039c4 <HAL_DMA_IRQHandler+0x6bc>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d013      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a73      	ldr	r2, [pc, #460]	; (80039c8 <HAL_DMA_IRQHandler+0x6c0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00e      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a71      	ldr	r2, [pc, #452]	; (80039cc <HAL_DMA_IRQHandler+0x6c4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d009      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a70      	ldr	r2, [pc, #448]	; (80039d0 <HAL_DMA_IRQHandler+0x6c8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d004      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a6e      	ldr	r2, [pc, #440]	; (80039d4 <HAL_DMA_IRQHandler+0x6cc>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d10a      	bne.n	8003834 <HAL_DMA_IRQHandler+0x52c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf14      	ite	ne
 800382c:	2301      	movne	r3, #1
 800382e:	2300      	moveq	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	e009      	b.n	8003848 <HAL_DMA_IRQHandler+0x540>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	bf14      	ite	ne
 8003842:	2301      	movne	r3, #1
 8003844:	2300      	moveq	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d03e      	beq.n	80038ca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003850:	f003 031f 	and.w	r3, r3, #31
 8003854:	2210      	movs	r2, #16
 8003856:	409a      	lsls	r2, r3
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d018      	beq.n	800389c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d108      	bne.n	800388a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	2b00      	cmp	r3, #0
 800387e:	d024      	beq.n	80038ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
 8003888:	e01f      	b.n	80038ca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388e:	2b00      	cmp	r3, #0
 8003890:	d01b      	beq.n	80038ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	4798      	blx	r3
 800389a:	e016      	b.n	80038ca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d107      	bne.n	80038ba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0208 	bic.w	r2, r2, #8
 80038b8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ce:	f003 031f 	and.w	r3, r3, #31
 80038d2:	2220      	movs	r2, #32
 80038d4:	409a      	lsls	r2, r3
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	4013      	ands	r3, r2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 8110 	beq.w	8003b00 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a2c      	ldr	r2, [pc, #176]	; (8003998 <HAL_DMA_IRQHandler+0x690>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d04a      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a2b      	ldr	r2, [pc, #172]	; (800399c <HAL_DMA_IRQHandler+0x694>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d045      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a29      	ldr	r2, [pc, #164]	; (80039a0 <HAL_DMA_IRQHandler+0x698>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d040      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a28      	ldr	r2, [pc, #160]	; (80039a4 <HAL_DMA_IRQHandler+0x69c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d03b      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a26      	ldr	r2, [pc, #152]	; (80039a8 <HAL_DMA_IRQHandler+0x6a0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d036      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a25      	ldr	r2, [pc, #148]	; (80039ac <HAL_DMA_IRQHandler+0x6a4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d031      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a23      	ldr	r2, [pc, #140]	; (80039b0 <HAL_DMA_IRQHandler+0x6a8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d02c      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a22      	ldr	r2, [pc, #136]	; (80039b4 <HAL_DMA_IRQHandler+0x6ac>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d027      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a20      	ldr	r2, [pc, #128]	; (80039b8 <HAL_DMA_IRQHandler+0x6b0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d022      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1f      	ldr	r2, [pc, #124]	; (80039bc <HAL_DMA_IRQHandler+0x6b4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d01d      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1d      	ldr	r2, [pc, #116]	; (80039c0 <HAL_DMA_IRQHandler+0x6b8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d018      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1c      	ldr	r2, [pc, #112]	; (80039c4 <HAL_DMA_IRQHandler+0x6bc>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d013      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a1a      	ldr	r2, [pc, #104]	; (80039c8 <HAL_DMA_IRQHandler+0x6c0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00e      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a19      	ldr	r2, [pc, #100]	; (80039cc <HAL_DMA_IRQHandler+0x6c4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d009      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a17      	ldr	r2, [pc, #92]	; (80039d0 <HAL_DMA_IRQHandler+0x6c8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d004      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a16      	ldr	r2, [pc, #88]	; (80039d4 <HAL_DMA_IRQHandler+0x6cc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d12b      	bne.n	80039d8 <HAL_DMA_IRQHandler+0x6d0>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	2b00      	cmp	r3, #0
 800398c:	bf14      	ite	ne
 800398e:	2301      	movne	r3, #1
 8003990:	2300      	moveq	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	e02a      	b.n	80039ec <HAL_DMA_IRQHandler+0x6e4>
 8003996:	bf00      	nop
 8003998:	40020010 	.word	0x40020010
 800399c:	40020028 	.word	0x40020028
 80039a0:	40020040 	.word	0x40020040
 80039a4:	40020058 	.word	0x40020058
 80039a8:	40020070 	.word	0x40020070
 80039ac:	40020088 	.word	0x40020088
 80039b0:	400200a0 	.word	0x400200a0
 80039b4:	400200b8 	.word	0x400200b8
 80039b8:	40020410 	.word	0x40020410
 80039bc:	40020428 	.word	0x40020428
 80039c0:	40020440 	.word	0x40020440
 80039c4:	40020458 	.word	0x40020458
 80039c8:	40020470 	.word	0x40020470
 80039cc:	40020488 	.word	0x40020488
 80039d0:	400204a0 	.word	0x400204a0
 80039d4:	400204b8 	.word	0x400204b8
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	bf14      	ite	ne
 80039e6:	2301      	movne	r3, #1
 80039e8:	2300      	moveq	r3, #0
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8087 	beq.w	8003b00 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	2220      	movs	r2, #32
 80039fc:	409a      	lsls	r2, r3
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d139      	bne.n	8003a82 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0216 	bic.w	r2, r2, #22
 8003a1c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695a      	ldr	r2, [r3, #20]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a2c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d103      	bne.n	8003a3e <HAL_DMA_IRQHandler+0x736>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d007      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0208 	bic.w	r2, r2, #8
 8003a4c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	223f      	movs	r2, #63	; 0x3f
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 834a 	beq.w	800410c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	4798      	blx	r3
          }
          return;
 8003a80:	e344      	b.n	800410c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d018      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d108      	bne.n	8003ab0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d02c      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	4798      	blx	r3
 8003aae:	e027      	b.n	8003b00 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d023      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	4798      	blx	r3
 8003ac0:	e01e      	b.n	8003b00 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10f      	bne.n	8003af0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0210 	bic.w	r2, r2, #16
 8003ade:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 8306 	beq.w	8004116 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 8088 	beq.w	8003c28 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2204      	movs	r2, #4
 8003b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a7a      	ldr	r2, [pc, #488]	; (8003d10 <HAL_DMA_IRQHandler+0xa08>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d04a      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a79      	ldr	r2, [pc, #484]	; (8003d14 <HAL_DMA_IRQHandler+0xa0c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d045      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a77      	ldr	r2, [pc, #476]	; (8003d18 <HAL_DMA_IRQHandler+0xa10>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d040      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a76      	ldr	r2, [pc, #472]	; (8003d1c <HAL_DMA_IRQHandler+0xa14>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d03b      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a74      	ldr	r2, [pc, #464]	; (8003d20 <HAL_DMA_IRQHandler+0xa18>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d036      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a73      	ldr	r2, [pc, #460]	; (8003d24 <HAL_DMA_IRQHandler+0xa1c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d031      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a71      	ldr	r2, [pc, #452]	; (8003d28 <HAL_DMA_IRQHandler+0xa20>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d02c      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a70      	ldr	r2, [pc, #448]	; (8003d2c <HAL_DMA_IRQHandler+0xa24>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d027      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a6e      	ldr	r2, [pc, #440]	; (8003d30 <HAL_DMA_IRQHandler+0xa28>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d022      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a6d      	ldr	r2, [pc, #436]	; (8003d34 <HAL_DMA_IRQHandler+0xa2c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d01d      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a6b      	ldr	r2, [pc, #428]	; (8003d38 <HAL_DMA_IRQHandler+0xa30>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d018      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a6a      	ldr	r2, [pc, #424]	; (8003d3c <HAL_DMA_IRQHandler+0xa34>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d013      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a68      	ldr	r2, [pc, #416]	; (8003d40 <HAL_DMA_IRQHandler+0xa38>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00e      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a67      	ldr	r2, [pc, #412]	; (8003d44 <HAL_DMA_IRQHandler+0xa3c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d009      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a65      	ldr	r2, [pc, #404]	; (8003d48 <HAL_DMA_IRQHandler+0xa40>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d004      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a64      	ldr	r2, [pc, #400]	; (8003d4c <HAL_DMA_IRQHandler+0xa44>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d108      	bne.n	8003bd2 <HAL_DMA_IRQHandler+0x8ca>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0201 	bic.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	e007      	b.n	8003be2 <HAL_DMA_IRQHandler+0x8da>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0201 	bic.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	3301      	adds	r3, #1
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d307      	bcc.n	8003bfe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f2      	bne.n	8003be2 <HAL_DMA_IRQHandler+0x8da>
 8003bfc:	e000      	b.n	8003c00 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003bfe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d004      	beq.n	8003c18 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2203      	movs	r2, #3
 8003c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003c16:	e003      	b.n	8003c20 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8272 	beq.w	8004116 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	4798      	blx	r3
 8003c3a:	e26c      	b.n	8004116 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a43      	ldr	r2, [pc, #268]	; (8003d50 <HAL_DMA_IRQHandler+0xa48>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d022      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x984>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a42      	ldr	r2, [pc, #264]	; (8003d54 <HAL_DMA_IRQHandler+0xa4c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d01d      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x984>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a40      	ldr	r2, [pc, #256]	; (8003d58 <HAL_DMA_IRQHandler+0xa50>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d018      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x984>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a3f      	ldr	r2, [pc, #252]	; (8003d5c <HAL_DMA_IRQHandler+0xa54>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d013      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x984>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a3d      	ldr	r2, [pc, #244]	; (8003d60 <HAL_DMA_IRQHandler+0xa58>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00e      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x984>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a3c      	ldr	r2, [pc, #240]	; (8003d64 <HAL_DMA_IRQHandler+0xa5c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d009      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x984>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a3a      	ldr	r2, [pc, #232]	; (8003d68 <HAL_DMA_IRQHandler+0xa60>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d004      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x984>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a39      	ldr	r2, [pc, #228]	; (8003d6c <HAL_DMA_IRQHandler+0xa64>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d101      	bne.n	8003c90 <HAL_DMA_IRQHandler+0x988>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <HAL_DMA_IRQHandler+0x98a>
 8003c90:	2300      	movs	r3, #0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 823f 	beq.w	8004116 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca4:	f003 031f 	and.w	r3, r3, #31
 8003ca8:	2204      	movs	r2, #4
 8003caa:	409a      	lsls	r2, r3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80cd 	beq.w	8003e50 <HAL_DMA_IRQHandler+0xb48>
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80c7 	beq.w	8003e50 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc6:	f003 031f 	and.w	r3, r3, #31
 8003cca:	2204      	movs	r2, #4
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d049      	beq.n	8003d70 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8210 	beq.w	8004110 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cf8:	e20a      	b.n	8004110 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 8206 	beq.w	8004110 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d0c:	e200      	b.n	8004110 <HAL_DMA_IRQHandler+0xe08>
 8003d0e:	bf00      	nop
 8003d10:	40020010 	.word	0x40020010
 8003d14:	40020028 	.word	0x40020028
 8003d18:	40020040 	.word	0x40020040
 8003d1c:	40020058 	.word	0x40020058
 8003d20:	40020070 	.word	0x40020070
 8003d24:	40020088 	.word	0x40020088
 8003d28:	400200a0 	.word	0x400200a0
 8003d2c:	400200b8 	.word	0x400200b8
 8003d30:	40020410 	.word	0x40020410
 8003d34:	40020428 	.word	0x40020428
 8003d38:	40020440 	.word	0x40020440
 8003d3c:	40020458 	.word	0x40020458
 8003d40:	40020470 	.word	0x40020470
 8003d44:	40020488 	.word	0x40020488
 8003d48:	400204a0 	.word	0x400204a0
 8003d4c:	400204b8 	.word	0x400204b8
 8003d50:	58025408 	.word	0x58025408
 8003d54:	5802541c 	.word	0x5802541c
 8003d58:	58025430 	.word	0x58025430
 8003d5c:	58025444 	.word	0x58025444
 8003d60:	58025458 	.word	0x58025458
 8003d64:	5802546c 	.word	0x5802546c
 8003d68:	58025480 	.word	0x58025480
 8003d6c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d160      	bne.n	8003e3c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a7f      	ldr	r2, [pc, #508]	; (8003f7c <HAL_DMA_IRQHandler+0xc74>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d04a      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a7d      	ldr	r2, [pc, #500]	; (8003f80 <HAL_DMA_IRQHandler+0xc78>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d045      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a7c      	ldr	r2, [pc, #496]	; (8003f84 <HAL_DMA_IRQHandler+0xc7c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d040      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a7a      	ldr	r2, [pc, #488]	; (8003f88 <HAL_DMA_IRQHandler+0xc80>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d03b      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a79      	ldr	r2, [pc, #484]	; (8003f8c <HAL_DMA_IRQHandler+0xc84>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d036      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a77      	ldr	r2, [pc, #476]	; (8003f90 <HAL_DMA_IRQHandler+0xc88>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d031      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a76      	ldr	r2, [pc, #472]	; (8003f94 <HAL_DMA_IRQHandler+0xc8c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d02c      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a74      	ldr	r2, [pc, #464]	; (8003f98 <HAL_DMA_IRQHandler+0xc90>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d027      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a73      	ldr	r2, [pc, #460]	; (8003f9c <HAL_DMA_IRQHandler+0xc94>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d022      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a71      	ldr	r2, [pc, #452]	; (8003fa0 <HAL_DMA_IRQHandler+0xc98>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01d      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a70      	ldr	r2, [pc, #448]	; (8003fa4 <HAL_DMA_IRQHandler+0xc9c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d018      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a6e      	ldr	r2, [pc, #440]	; (8003fa8 <HAL_DMA_IRQHandler+0xca0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a6d      	ldr	r2, [pc, #436]	; (8003fac <HAL_DMA_IRQHandler+0xca4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00e      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a6b      	ldr	r2, [pc, #428]	; (8003fb0 <HAL_DMA_IRQHandler+0xca8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d009      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a6a      	ldr	r2, [pc, #424]	; (8003fb4 <HAL_DMA_IRQHandler+0xcac>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d004      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a68      	ldr	r2, [pc, #416]	; (8003fb8 <HAL_DMA_IRQHandler+0xcb0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d108      	bne.n	8003e2c <HAL_DMA_IRQHandler+0xb24>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0208 	bic.w	r2, r2, #8
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	e007      	b.n	8003e3c <HAL_DMA_IRQHandler+0xb34>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0204 	bic.w	r2, r2, #4
 8003e3a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 8165 	beq.w	8004110 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e4e:	e15f      	b.n	8004110 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	2202      	movs	r2, #2
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 80c5 	beq.w	8003ff0 <HAL_DMA_IRQHandler+0xce8>
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80bf 	beq.w	8003ff0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e76:	f003 031f 	and.w	r3, r3, #31
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	409a      	lsls	r2, r3
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d018      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d109      	bne.n	8003eaa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 813a 	beq.w	8004114 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ea8:	e134      	b.n	8004114 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 8130 	beq.w	8004114 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ebc:	e12a      	b.n	8004114 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f040 8089 	bne.w	8003fdc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a2b      	ldr	r2, [pc, #172]	; (8003f7c <HAL_DMA_IRQHandler+0xc74>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d04a      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a29      	ldr	r2, [pc, #164]	; (8003f80 <HAL_DMA_IRQHandler+0xc78>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d045      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a28      	ldr	r2, [pc, #160]	; (8003f84 <HAL_DMA_IRQHandler+0xc7c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d040      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a26      	ldr	r2, [pc, #152]	; (8003f88 <HAL_DMA_IRQHandler+0xc80>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d03b      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a25      	ldr	r2, [pc, #148]	; (8003f8c <HAL_DMA_IRQHandler+0xc84>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d036      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a23      	ldr	r2, [pc, #140]	; (8003f90 <HAL_DMA_IRQHandler+0xc88>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d031      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a22      	ldr	r2, [pc, #136]	; (8003f94 <HAL_DMA_IRQHandler+0xc8c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d02c      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a20      	ldr	r2, [pc, #128]	; (8003f98 <HAL_DMA_IRQHandler+0xc90>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d027      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1f      	ldr	r2, [pc, #124]	; (8003f9c <HAL_DMA_IRQHandler+0xc94>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d022      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a1d      	ldr	r2, [pc, #116]	; (8003fa0 <HAL_DMA_IRQHandler+0xc98>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d01d      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1c      	ldr	r2, [pc, #112]	; (8003fa4 <HAL_DMA_IRQHandler+0xc9c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d018      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a1a      	ldr	r2, [pc, #104]	; (8003fa8 <HAL_DMA_IRQHandler+0xca0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d013      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a19      	ldr	r2, [pc, #100]	; (8003fac <HAL_DMA_IRQHandler+0xca4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00e      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a17      	ldr	r2, [pc, #92]	; (8003fb0 <HAL_DMA_IRQHandler+0xca8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d009      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a16      	ldr	r2, [pc, #88]	; (8003fb4 <HAL_DMA_IRQHandler+0xcac>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d004      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a14      	ldr	r2, [pc, #80]	; (8003fb8 <HAL_DMA_IRQHandler+0xcb0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d128      	bne.n	8003fbc <HAL_DMA_IRQHandler+0xcb4>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0214 	bic.w	r2, r2, #20
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	e027      	b.n	8003fcc <HAL_DMA_IRQHandler+0xcc4>
 8003f7c:	40020010 	.word	0x40020010
 8003f80:	40020028 	.word	0x40020028
 8003f84:	40020040 	.word	0x40020040
 8003f88:	40020058 	.word	0x40020058
 8003f8c:	40020070 	.word	0x40020070
 8003f90:	40020088 	.word	0x40020088
 8003f94:	400200a0 	.word	0x400200a0
 8003f98:	400200b8 	.word	0x400200b8
 8003f9c:	40020410 	.word	0x40020410
 8003fa0:	40020428 	.word	0x40020428
 8003fa4:	40020440 	.word	0x40020440
 8003fa8:	40020458 	.word	0x40020458
 8003fac:	40020470 	.word	0x40020470
 8003fb0:	40020488 	.word	0x40020488
 8003fb4:	400204a0 	.word	0x400204a0
 8003fb8:	400204b8 	.word	0x400204b8
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 020a 	bic.w	r2, r2, #10
 8003fca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 8097 	beq.w	8004114 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fee:	e091      	b.n	8004114 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff4:	f003 031f 	and.w	r3, r3, #31
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	4013      	ands	r3, r2
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 8088 	beq.w	8004116 <HAL_DMA_IRQHandler+0xe0e>
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8082 	beq.w	8004116 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a41      	ldr	r2, [pc, #260]	; (800411c <HAL_DMA_IRQHandler+0xe14>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d04a      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a3f      	ldr	r2, [pc, #252]	; (8004120 <HAL_DMA_IRQHandler+0xe18>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d045      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a3e      	ldr	r2, [pc, #248]	; (8004124 <HAL_DMA_IRQHandler+0xe1c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d040      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a3c      	ldr	r2, [pc, #240]	; (8004128 <HAL_DMA_IRQHandler+0xe20>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d03b      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a3b      	ldr	r2, [pc, #236]	; (800412c <HAL_DMA_IRQHandler+0xe24>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d036      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a39      	ldr	r2, [pc, #228]	; (8004130 <HAL_DMA_IRQHandler+0xe28>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d031      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a38      	ldr	r2, [pc, #224]	; (8004134 <HAL_DMA_IRQHandler+0xe2c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d02c      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a36      	ldr	r2, [pc, #216]	; (8004138 <HAL_DMA_IRQHandler+0xe30>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d027      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a35      	ldr	r2, [pc, #212]	; (800413c <HAL_DMA_IRQHandler+0xe34>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d022      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a33      	ldr	r2, [pc, #204]	; (8004140 <HAL_DMA_IRQHandler+0xe38>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d01d      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a32      	ldr	r2, [pc, #200]	; (8004144 <HAL_DMA_IRQHandler+0xe3c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d018      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a30      	ldr	r2, [pc, #192]	; (8004148 <HAL_DMA_IRQHandler+0xe40>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a2f      	ldr	r2, [pc, #188]	; (800414c <HAL_DMA_IRQHandler+0xe44>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00e      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a2d      	ldr	r2, [pc, #180]	; (8004150 <HAL_DMA_IRQHandler+0xe48>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d009      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a2c      	ldr	r2, [pc, #176]	; (8004154 <HAL_DMA_IRQHandler+0xe4c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d004      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a2a      	ldr	r2, [pc, #168]	; (8004158 <HAL_DMA_IRQHandler+0xe50>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d108      	bne.n	80040c4 <HAL_DMA_IRQHandler+0xdbc>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 021c 	bic.w	r2, r2, #28
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	e007      	b.n	80040d4 <HAL_DMA_IRQHandler+0xdcc>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 020e 	bic.w	r2, r2, #14
 80040d2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	2201      	movs	r2, #1
 80040de:	409a      	lsls	r2, r3
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	4798      	blx	r3
 800410a:	e004      	b.n	8004116 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800410c:	bf00      	nop
 800410e:	e002      	b.n	8004116 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004110:	bf00      	nop
 8004112:	e000      	b.n	8004116 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004114:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004116:	3728      	adds	r7, #40	; 0x28
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40020010 	.word	0x40020010
 8004120:	40020028 	.word	0x40020028
 8004124:	40020040 	.word	0x40020040
 8004128:	40020058 	.word	0x40020058
 800412c:	40020070 	.word	0x40020070
 8004130:	40020088 	.word	0x40020088
 8004134:	400200a0 	.word	0x400200a0
 8004138:	400200b8 	.word	0x400200b8
 800413c:	40020410 	.word	0x40020410
 8004140:	40020428 	.word	0x40020428
 8004144:	40020440 	.word	0x40020440
 8004148:	40020458 	.word	0x40020458
 800414c:	40020470 	.word	0x40020470
 8004150:	40020488 	.word	0x40020488
 8004154:	400204a0 	.word	0x400204a0
 8004158:	400204b8 	.word	0x400204b8

0800415c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a42      	ldr	r2, [pc, #264]	; (8004274 <DMA_CalcBaseAndBitshift+0x118>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d04a      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a41      	ldr	r2, [pc, #260]	; (8004278 <DMA_CalcBaseAndBitshift+0x11c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d045      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a3f      	ldr	r2, [pc, #252]	; (800427c <DMA_CalcBaseAndBitshift+0x120>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d040      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a3e      	ldr	r2, [pc, #248]	; (8004280 <DMA_CalcBaseAndBitshift+0x124>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d03b      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a3c      	ldr	r2, [pc, #240]	; (8004284 <DMA_CalcBaseAndBitshift+0x128>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d036      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a3b      	ldr	r2, [pc, #236]	; (8004288 <DMA_CalcBaseAndBitshift+0x12c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d031      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a39      	ldr	r2, [pc, #228]	; (800428c <DMA_CalcBaseAndBitshift+0x130>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d02c      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a38      	ldr	r2, [pc, #224]	; (8004290 <DMA_CalcBaseAndBitshift+0x134>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d027      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a36      	ldr	r2, [pc, #216]	; (8004294 <DMA_CalcBaseAndBitshift+0x138>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d022      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a35      	ldr	r2, [pc, #212]	; (8004298 <DMA_CalcBaseAndBitshift+0x13c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d01d      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a33      	ldr	r2, [pc, #204]	; (800429c <DMA_CalcBaseAndBitshift+0x140>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d018      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a32      	ldr	r2, [pc, #200]	; (80042a0 <DMA_CalcBaseAndBitshift+0x144>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d013      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a30      	ldr	r2, [pc, #192]	; (80042a4 <DMA_CalcBaseAndBitshift+0x148>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00e      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a2f      	ldr	r2, [pc, #188]	; (80042a8 <DMA_CalcBaseAndBitshift+0x14c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d009      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a2d      	ldr	r2, [pc, #180]	; (80042ac <DMA_CalcBaseAndBitshift+0x150>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d004      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a2c      	ldr	r2, [pc, #176]	; (80042b0 <DMA_CalcBaseAndBitshift+0x154>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d101      	bne.n	8004208 <DMA_CalcBaseAndBitshift+0xac>
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <DMA_CalcBaseAndBitshift+0xae>
 8004208:	2300      	movs	r3, #0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d024      	beq.n	8004258 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	b2db      	uxtb	r3, r3
 8004214:	3b10      	subs	r3, #16
 8004216:	4a27      	ldr	r2, [pc, #156]	; (80042b4 <DMA_CalcBaseAndBitshift+0x158>)
 8004218:	fba2 2303 	umull	r2, r3, r2, r3
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	4a24      	ldr	r2, [pc, #144]	; (80042b8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004228:	5cd3      	ldrb	r3, [r2, r3]
 800422a:	461a      	mov	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b03      	cmp	r3, #3
 8004234:	d908      	bls.n	8004248 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	4b1f      	ldr	r3, [pc, #124]	; (80042bc <DMA_CalcBaseAndBitshift+0x160>)
 800423e:	4013      	ands	r3, r2
 8004240:	1d1a      	adds	r2, r3, #4
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	659a      	str	r2, [r3, #88]	; 0x58
 8004246:	e00d      	b.n	8004264 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <DMA_CalcBaseAndBitshift+0x160>)
 8004250:	4013      	ands	r3, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6593      	str	r3, [r2, #88]	; 0x58
 8004256:	e005      	b.n	8004264 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004268:	4618      	mov	r0, r3
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	40020010 	.word	0x40020010
 8004278:	40020028 	.word	0x40020028
 800427c:	40020040 	.word	0x40020040
 8004280:	40020058 	.word	0x40020058
 8004284:	40020070 	.word	0x40020070
 8004288:	40020088 	.word	0x40020088
 800428c:	400200a0 	.word	0x400200a0
 8004290:	400200b8 	.word	0x400200b8
 8004294:	40020410 	.word	0x40020410
 8004298:	40020428 	.word	0x40020428
 800429c:	40020440 	.word	0x40020440
 80042a0:	40020458 	.word	0x40020458
 80042a4:	40020470 	.word	0x40020470
 80042a8:	40020488 	.word	0x40020488
 80042ac:	400204a0 	.word	0x400204a0
 80042b0:	400204b8 	.word	0x400204b8
 80042b4:	aaaaaaab 	.word	0xaaaaaaab
 80042b8:	08015718 	.word	0x08015718
 80042bc:	fffffc00 	.word	0xfffffc00

080042c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d120      	bne.n	8004316 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d8:	2b03      	cmp	r3, #3
 80042da:	d858      	bhi.n	800438e <DMA_CheckFifoParam+0xce>
 80042dc:	a201      	add	r2, pc, #4	; (adr r2, 80042e4 <DMA_CheckFifoParam+0x24>)
 80042de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e2:	bf00      	nop
 80042e4:	080042f5 	.word	0x080042f5
 80042e8:	08004307 	.word	0x08004307
 80042ec:	080042f5 	.word	0x080042f5
 80042f0:	0800438f 	.word	0x0800438f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d048      	beq.n	8004392 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004304:	e045      	b.n	8004392 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800430e:	d142      	bne.n	8004396 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004314:	e03f      	b.n	8004396 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800431e:	d123      	bne.n	8004368 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004324:	2b03      	cmp	r3, #3
 8004326:	d838      	bhi.n	800439a <DMA_CheckFifoParam+0xda>
 8004328:	a201      	add	r2, pc, #4	; (adr r2, 8004330 <DMA_CheckFifoParam+0x70>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004341 	.word	0x08004341
 8004334:	08004347 	.word	0x08004347
 8004338:	08004341 	.word	0x08004341
 800433c:	08004359 	.word	0x08004359
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
        break;
 8004344:	e030      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d025      	beq.n	800439e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004356:	e022      	b.n	800439e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004360:	d11f      	bne.n	80043a2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004366:	e01c      	b.n	80043a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436c:	2b02      	cmp	r3, #2
 800436e:	d902      	bls.n	8004376 <DMA_CheckFifoParam+0xb6>
 8004370:	2b03      	cmp	r3, #3
 8004372:	d003      	beq.n	800437c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004374:	e018      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	73fb      	strb	r3, [r7, #15]
        break;
 800437a:	e015      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00e      	beq.n	80043a6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
    break;
 800438c:	e00b      	b.n	80043a6 <DMA_CheckFifoParam+0xe6>
        break;
 800438e:	bf00      	nop
 8004390:	e00a      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
        break;
 8004392:	bf00      	nop
 8004394:	e008      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
        break;
 8004396:	bf00      	nop
 8004398:	e006      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
        break;
 800439a:	bf00      	nop
 800439c:	e004      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
        break;
 800439e:	bf00      	nop
 80043a0:	e002      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
        break;
 80043a2:	bf00      	nop
 80043a4:	e000      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
    break;
 80043a6:	bf00      	nop
    }
  }

  return status;
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop

080043b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a38      	ldr	r2, [pc, #224]	; (80044ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d022      	beq.n	8004416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a36      	ldr	r2, [pc, #216]	; (80044b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d01d      	beq.n	8004416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a35      	ldr	r2, [pc, #212]	; (80044b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d018      	beq.n	8004416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a33      	ldr	r2, [pc, #204]	; (80044b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d013      	beq.n	8004416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a32      	ldr	r2, [pc, #200]	; (80044bc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00e      	beq.n	8004416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a30      	ldr	r2, [pc, #192]	; (80044c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d009      	beq.n	8004416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a2f      	ldr	r2, [pc, #188]	; (80044c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d004      	beq.n	8004416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a2d      	ldr	r2, [pc, #180]	; (80044c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d101      	bne.n	800441a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800441a:	2300      	movs	r3, #0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01a      	beq.n	8004456 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	3b08      	subs	r3, #8
 8004428:	4a28      	ldr	r2, [pc, #160]	; (80044cc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	091b      	lsrs	r3, r3, #4
 8004430:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4b26      	ldr	r3, [pc, #152]	; (80044d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	461a      	mov	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a24      	ldr	r2, [pc, #144]	; (80044d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004444:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f003 031f 	and.w	r3, r3, #31
 800444c:	2201      	movs	r2, #1
 800444e:	409a      	lsls	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004454:	e024      	b.n	80044a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	b2db      	uxtb	r3, r3
 800445c:	3b10      	subs	r3, #16
 800445e:	4a1e      	ldr	r2, [pc, #120]	; (80044d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004460:	fba2 2303 	umull	r2, r3, r2, r3
 8004464:	091b      	lsrs	r3, r3, #4
 8004466:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4a1c      	ldr	r2, [pc, #112]	; (80044dc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d806      	bhi.n	800447e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4a1b      	ldr	r2, [pc, #108]	; (80044e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d902      	bls.n	800447e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3308      	adds	r3, #8
 800447c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4b18      	ldr	r3, [pc, #96]	; (80044e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	461a      	mov	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a16      	ldr	r2, [pc, #88]	; (80044e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004490:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	2201      	movs	r2, #1
 800449a:	409a      	lsls	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	669a      	str	r2, [r3, #104]	; 0x68
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	58025408 	.word	0x58025408
 80044b0:	5802541c 	.word	0x5802541c
 80044b4:	58025430 	.word	0x58025430
 80044b8:	58025444 	.word	0x58025444
 80044bc:	58025458 	.word	0x58025458
 80044c0:	5802546c 	.word	0x5802546c
 80044c4:	58025480 	.word	0x58025480
 80044c8:	58025494 	.word	0x58025494
 80044cc:	cccccccd 	.word	0xcccccccd
 80044d0:	16009600 	.word	0x16009600
 80044d4:	58025880 	.word	0x58025880
 80044d8:	aaaaaaab 	.word	0xaaaaaaab
 80044dc:	400204b8 	.word	0x400204b8
 80044e0:	4002040f 	.word	0x4002040f
 80044e4:	10008200 	.word	0x10008200
 80044e8:	40020880 	.word	0x40020880

080044ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d04a      	beq.n	8004598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b08      	cmp	r3, #8
 8004506:	d847      	bhi.n	8004598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a25      	ldr	r2, [pc, #148]	; (80045a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d022      	beq.n	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a24      	ldr	r2, [pc, #144]	; (80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d01d      	beq.n	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a22      	ldr	r2, [pc, #136]	; (80045ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d018      	beq.n	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a21      	ldr	r2, [pc, #132]	; (80045b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d013      	beq.n	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1f      	ldr	r2, [pc, #124]	; (80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00e      	beq.n	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1e      	ldr	r2, [pc, #120]	; (80045b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d009      	beq.n	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1c      	ldr	r2, [pc, #112]	; (80045bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d004      	beq.n	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1b      	ldr	r2, [pc, #108]	; (80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d101      	bne.n	800455c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004558:	2301      	movs	r3, #1
 800455a:	e000      	b.n	800455e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800455c:	2300      	movs	r3, #0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4b17      	ldr	r3, [pc, #92]	; (80045c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	461a      	mov	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a15      	ldr	r2, [pc, #84]	; (80045c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004574:	671a      	str	r2, [r3, #112]	; 0x70
 8004576:	e009      	b.n	800458c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4b14      	ldr	r3, [pc, #80]	; (80045cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800457c:	4413      	add	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	461a      	mov	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a11      	ldr	r2, [pc, #68]	; (80045d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800458a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3b01      	subs	r3, #1
 8004590:	2201      	movs	r2, #1
 8004592:	409a      	lsls	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004598:	bf00      	nop
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	58025408 	.word	0x58025408
 80045a8:	5802541c 	.word	0x5802541c
 80045ac:	58025430 	.word	0x58025430
 80045b0:	58025444 	.word	0x58025444
 80045b4:	58025458 	.word	0x58025458
 80045b8:	5802546c 	.word	0x5802546c
 80045bc:	58025480 	.word	0x58025480
 80045c0:	58025494 	.word	0x58025494
 80045c4:	1600963f 	.word	0x1600963f
 80045c8:	58025940 	.word	0x58025940
 80045cc:	1000823f 	.word	0x1000823f
 80045d0:	40020940 	.word	0x40020940

080045d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b089      	sub	sp, #36	; 0x24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045de:	2300      	movs	r3, #0
 80045e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80045e2:	4b86      	ldr	r3, [pc, #536]	; (80047fc <HAL_GPIO_Init+0x228>)
 80045e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045e6:	e18c      	b.n	8004902 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	2101      	movs	r1, #1
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	fa01 f303 	lsl.w	r3, r1, r3
 80045f4:	4013      	ands	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 817e 	beq.w	80048fc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	2b01      	cmp	r3, #1
 800460a:	d005      	beq.n	8004618 <HAL_GPIO_Init+0x44>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d130      	bne.n	800467a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	2203      	movs	r2, #3
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4013      	ands	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4313      	orrs	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800464e:	2201      	movs	r2, #1
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	43db      	mvns	r3, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	4013      	ands	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	091b      	lsrs	r3, r3, #4
 8004664:	f003 0201 	and.w	r2, r3, #1
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4313      	orrs	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	2b03      	cmp	r3, #3
 8004684:	d017      	beq.n	80046b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	2203      	movs	r2, #3
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	43db      	mvns	r3, r3
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4013      	ands	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d123      	bne.n	800470a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	08da      	lsrs	r2, r3, #3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3208      	adds	r2, #8
 80046ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	220f      	movs	r2, #15
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	43db      	mvns	r3, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4013      	ands	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	08da      	lsrs	r2, r3, #3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3208      	adds	r2, #8
 8004704:	69b9      	ldr	r1, [r7, #24]
 8004706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	2203      	movs	r2, #3
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43db      	mvns	r3, r3
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	4013      	ands	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f003 0203 	and.w	r2, r3, #3
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	4313      	orrs	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 80d8 	beq.w	80048fc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800474c:	4b2c      	ldr	r3, [pc, #176]	; (8004800 <HAL_GPIO_Init+0x22c>)
 800474e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004752:	4a2b      	ldr	r2, [pc, #172]	; (8004800 <HAL_GPIO_Init+0x22c>)
 8004754:	f043 0302 	orr.w	r3, r3, #2
 8004758:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800475c:	4b28      	ldr	r3, [pc, #160]	; (8004800 <HAL_GPIO_Init+0x22c>)
 800475e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800476a:	4a26      	ldr	r2, [pc, #152]	; (8004804 <HAL_GPIO_Init+0x230>)
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	089b      	lsrs	r3, r3, #2
 8004770:	3302      	adds	r3, #2
 8004772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	220f      	movs	r2, #15
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	43db      	mvns	r3, r3
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	4013      	ands	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a1d      	ldr	r2, [pc, #116]	; (8004808 <HAL_GPIO_Init+0x234>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d04a      	beq.n	800482c <HAL_GPIO_Init+0x258>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a1c      	ldr	r2, [pc, #112]	; (800480c <HAL_GPIO_Init+0x238>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d02b      	beq.n	80047f6 <HAL_GPIO_Init+0x222>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a1b      	ldr	r2, [pc, #108]	; (8004810 <HAL_GPIO_Init+0x23c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d025      	beq.n	80047f2 <HAL_GPIO_Init+0x21e>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a1a      	ldr	r2, [pc, #104]	; (8004814 <HAL_GPIO_Init+0x240>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d01f      	beq.n	80047ee <HAL_GPIO_Init+0x21a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a19      	ldr	r2, [pc, #100]	; (8004818 <HAL_GPIO_Init+0x244>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d019      	beq.n	80047ea <HAL_GPIO_Init+0x216>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a18      	ldr	r2, [pc, #96]	; (800481c <HAL_GPIO_Init+0x248>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d013      	beq.n	80047e6 <HAL_GPIO_Init+0x212>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a17      	ldr	r2, [pc, #92]	; (8004820 <HAL_GPIO_Init+0x24c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d00d      	beq.n	80047e2 <HAL_GPIO_Init+0x20e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a16      	ldr	r2, [pc, #88]	; (8004824 <HAL_GPIO_Init+0x250>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d007      	beq.n	80047de <HAL_GPIO_Init+0x20a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a15      	ldr	r2, [pc, #84]	; (8004828 <HAL_GPIO_Init+0x254>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d101      	bne.n	80047da <HAL_GPIO_Init+0x206>
 80047d6:	2309      	movs	r3, #9
 80047d8:	e029      	b.n	800482e <HAL_GPIO_Init+0x25a>
 80047da:	230a      	movs	r3, #10
 80047dc:	e027      	b.n	800482e <HAL_GPIO_Init+0x25a>
 80047de:	2307      	movs	r3, #7
 80047e0:	e025      	b.n	800482e <HAL_GPIO_Init+0x25a>
 80047e2:	2306      	movs	r3, #6
 80047e4:	e023      	b.n	800482e <HAL_GPIO_Init+0x25a>
 80047e6:	2305      	movs	r3, #5
 80047e8:	e021      	b.n	800482e <HAL_GPIO_Init+0x25a>
 80047ea:	2304      	movs	r3, #4
 80047ec:	e01f      	b.n	800482e <HAL_GPIO_Init+0x25a>
 80047ee:	2303      	movs	r3, #3
 80047f0:	e01d      	b.n	800482e <HAL_GPIO_Init+0x25a>
 80047f2:	2302      	movs	r3, #2
 80047f4:	e01b      	b.n	800482e <HAL_GPIO_Init+0x25a>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e019      	b.n	800482e <HAL_GPIO_Init+0x25a>
 80047fa:	bf00      	nop
 80047fc:	58000080 	.word	0x58000080
 8004800:	58024400 	.word	0x58024400
 8004804:	58000400 	.word	0x58000400
 8004808:	58020000 	.word	0x58020000
 800480c:	58020400 	.word	0x58020400
 8004810:	58020800 	.word	0x58020800
 8004814:	58020c00 	.word	0x58020c00
 8004818:	58021000 	.word	0x58021000
 800481c:	58021400 	.word	0x58021400
 8004820:	58021800 	.word	0x58021800
 8004824:	58021c00 	.word	0x58021c00
 8004828:	58022400 	.word	0x58022400
 800482c:	2300      	movs	r3, #0
 800482e:	69fa      	ldr	r2, [r7, #28]
 8004830:	f002 0203 	and.w	r2, r2, #3
 8004834:	0092      	lsls	r2, r2, #2
 8004836:	4093      	lsls	r3, r2
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	4313      	orrs	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800483e:	4938      	ldr	r1, [pc, #224]	; (8004920 <HAL_GPIO_Init+0x34c>)
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	089b      	lsrs	r3, r3, #2
 8004844:	3302      	adds	r3, #2
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800484c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	43db      	mvns	r3, r3
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4013      	ands	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800487a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	43db      	mvns	r3, r3
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	4013      	ands	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80048a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	43db      	mvns	r3, r3
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	4013      	ands	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	43db      	mvns	r3, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4013      	ands	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	3301      	adds	r3, #1
 8004900:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	fa22 f303 	lsr.w	r3, r2, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	f47f ae6b 	bne.w	80045e8 <HAL_GPIO_Init+0x14>
  }
}
 8004912:	bf00      	nop
 8004914:	bf00      	nop
 8004916:	3724      	adds	r7, #36	; 0x24
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	58000400 	.word	0x58000400

08004924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	807b      	strh	r3, [r7, #2]
 8004930:	4613      	mov	r3, r2
 8004932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004934:	787b      	ldrb	r3, [r7, #1]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800493a:	887a      	ldrh	r2, [r7, #2]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004940:	e003      	b.n	800494a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004942:	887b      	ldrh	r3, [r7, #2]
 8004944:	041a      	lsls	r2, r3, #16
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	619a      	str	r2, [r3, #24]
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
	...

08004958 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004960:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <HAL_PWREx_ConfigSupply+0x70>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b04      	cmp	r3, #4
 800496a:	d00a      	beq.n	8004982 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800496c:	4b16      	ldr	r3, [pc, #88]	; (80049c8 <HAL_PWREx_ConfigSupply+0x70>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	429a      	cmp	r2, r3
 8004978:	d001      	beq.n	800497e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e01f      	b.n	80049be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	e01d      	b.n	80049be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004982:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <HAL_PWREx_ConfigSupply+0x70>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f023 0207 	bic.w	r2, r3, #7
 800498a:	490f      	ldr	r1, [pc, #60]	; (80049c8 <HAL_PWREx_ConfigSupply+0x70>)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4313      	orrs	r3, r2
 8004990:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004992:	f7fd fa93 	bl	8001ebc <HAL_GetTick>
 8004996:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004998:	e009      	b.n	80049ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800499a:	f7fd fa8f 	bl	8001ebc <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049a8:	d901      	bls.n	80049ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e007      	b.n	80049be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049ae:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <HAL_PWREx_ConfigSupply+0x70>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ba:	d1ee      	bne.n	800499a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	58024800 	.word	0x58024800

080049cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08c      	sub	sp, #48	; 0x30
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e39d      	b.n	800511a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 8087 	beq.w	8004afa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ec:	4b88      	ldr	r3, [pc, #544]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049f6:	4b86      	ldr	r3, [pc, #536]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80049fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fe:	2b10      	cmp	r3, #16
 8004a00:	d007      	beq.n	8004a12 <HAL_RCC_OscConfig+0x46>
 8004a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a04:	2b18      	cmp	r3, #24
 8004a06:	d110      	bne.n	8004a2a <HAL_RCC_OscConfig+0x5e>
 8004a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d10b      	bne.n	8004a2a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a12:	4b7f      	ldr	r3, [pc, #508]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d06c      	beq.n	8004af8 <HAL_RCC_OscConfig+0x12c>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d168      	bne.n	8004af8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e377      	b.n	800511a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a32:	d106      	bne.n	8004a42 <HAL_RCC_OscConfig+0x76>
 8004a34:	4b76      	ldr	r3, [pc, #472]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a75      	ldr	r2, [pc, #468]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	e02e      	b.n	8004aa0 <HAL_RCC_OscConfig+0xd4>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10c      	bne.n	8004a64 <HAL_RCC_OscConfig+0x98>
 8004a4a:	4b71      	ldr	r3, [pc, #452]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a70      	ldr	r2, [pc, #448]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	4b6e      	ldr	r3, [pc, #440]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a6d      	ldr	r2, [pc, #436]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004a5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	e01d      	b.n	8004aa0 <HAL_RCC_OscConfig+0xd4>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a6c:	d10c      	bne.n	8004a88 <HAL_RCC_OscConfig+0xbc>
 8004a6e:	4b68      	ldr	r3, [pc, #416]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a67      	ldr	r2, [pc, #412]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	4b65      	ldr	r3, [pc, #404]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a64      	ldr	r2, [pc, #400]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	e00b      	b.n	8004aa0 <HAL_RCC_OscConfig+0xd4>
 8004a88:	4b61      	ldr	r3, [pc, #388]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a60      	ldr	r2, [pc, #384]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	4b5e      	ldr	r3, [pc, #376]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a5d      	ldr	r2, [pc, #372]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d013      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa8:	f7fd fa08 	bl	8001ebc <HAL_GetTick>
 8004aac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ab0:	f7fd fa04 	bl	8001ebc <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b64      	cmp	r3, #100	; 0x64
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e32b      	b.n	800511a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ac2:	4b53      	ldr	r3, [pc, #332]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCC_OscConfig+0xe4>
 8004ace:	e014      	b.n	8004afa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad0:	f7fd f9f4 	bl	8001ebc <HAL_GetTick>
 8004ad4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ad8:	f7fd f9f0 	bl	8001ebc <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b64      	cmp	r3, #100	; 0x64
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e317      	b.n	800511a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004aea:	4b49      	ldr	r3, [pc, #292]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x10c>
 8004af6:	e000      	b.n	8004afa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 808c 	beq.w	8004c20 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b08:	4b41      	ldr	r3, [pc, #260]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b10:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b12:	4b3f      	ldr	r3, [pc, #252]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <HAL_RCC_OscConfig+0x162>
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	2b18      	cmp	r3, #24
 8004b22:	d137      	bne.n	8004b94 <HAL_RCC_OscConfig+0x1c8>
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d132      	bne.n	8004b94 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b2e:	4b38      	ldr	r3, [pc, #224]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d005      	beq.n	8004b46 <HAL_RCC_OscConfig+0x17a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e2e9      	b.n	800511a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b46:	4b32      	ldr	r3, [pc, #200]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f023 0219 	bic.w	r2, r3, #25
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	492f      	ldr	r1, [pc, #188]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b58:	f7fd f9b0 	bl	8001ebc <HAL_GetTick>
 8004b5c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b60:	f7fd f9ac 	bl	8001ebc <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e2d3      	b.n	800511a <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b72:	4b27      	ldr	r3, [pc, #156]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0f0      	beq.n	8004b60 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b7e:	4b24      	ldr	r3, [pc, #144]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	061b      	lsls	r3, r3, #24
 8004b8c:	4920      	ldr	r1, [pc, #128]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b92:	e045      	b.n	8004c20 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d026      	beq.n	8004bea <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b9c:	4b1c      	ldr	r3, [pc, #112]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f023 0219 	bic.w	r2, r3, #25
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4919      	ldr	r1, [pc, #100]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bae:	f7fd f985 	bl	8001ebc <HAL_GetTick>
 8004bb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bb6:	f7fd f981 	bl	8001ebc <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e2a8      	b.n	800511a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bc8:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0f0      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd4:	4b0e      	ldr	r3, [pc, #56]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	061b      	lsls	r3, r3, #24
 8004be2:	490b      	ldr	r1, [pc, #44]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	604b      	str	r3, [r1, #4]
 8004be8:	e01a      	b.n	8004c20 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bea:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a08      	ldr	r2, [pc, #32]	; (8004c10 <HAL_RCC_OscConfig+0x244>)
 8004bf0:	f023 0301 	bic.w	r3, r3, #1
 8004bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf6:	f7fd f961 	bl	8001ebc <HAL_GetTick>
 8004bfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bfc:	e00a      	b.n	8004c14 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bfe:	f7fd f95d 	bl	8001ebc <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d903      	bls.n	8004c14 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e284      	b.n	800511a <HAL_RCC_OscConfig+0x74e>
 8004c10:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c14:	4b96      	ldr	r3, [pc, #600]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1ee      	bne.n	8004bfe <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0310 	and.w	r3, r3, #16
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d06a      	beq.n	8004d02 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c2c:	4b90      	ldr	r3, [pc, #576]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c34:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c36:	4b8e      	ldr	r3, [pc, #568]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	2b08      	cmp	r3, #8
 8004c40:	d007      	beq.n	8004c52 <HAL_RCC_OscConfig+0x286>
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	2b18      	cmp	r3, #24
 8004c46:	d11b      	bne.n	8004c80 <HAL_RCC_OscConfig+0x2b4>
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d116      	bne.n	8004c80 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c52:	4b87      	ldr	r3, [pc, #540]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d005      	beq.n	8004c6a <HAL_RCC_OscConfig+0x29e>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	2b80      	cmp	r3, #128	; 0x80
 8004c64:	d001      	beq.n	8004c6a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e257      	b.n	800511a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c6a:	4b81      	ldr	r3, [pc, #516]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	061b      	lsls	r3, r3, #24
 8004c78:	497d      	ldr	r1, [pc, #500]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c7e:	e040      	b.n	8004d02 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d023      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c88:	4b79      	ldr	r3, [pc, #484]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a78      	ldr	r2, [pc, #480]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c94:	f7fd f912 	bl	8001ebc <HAL_GetTick>
 8004c98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004c9c:	f7fd f90e 	bl	8001ebc <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e235      	b.n	800511a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004cae:	4b70      	ldr	r3, [pc, #448]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0f0      	beq.n	8004c9c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cba:	4b6d      	ldr	r3, [pc, #436]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	061b      	lsls	r3, r3, #24
 8004cc8:	4969      	ldr	r1, [pc, #420]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60cb      	str	r3, [r1, #12]
 8004cce:	e018      	b.n	8004d02 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004cd0:	4b67      	ldr	r3, [pc, #412]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a66      	ldr	r2, [pc, #408]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cdc:	f7fd f8ee 	bl	8001ebc <HAL_GetTick>
 8004ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004ce4:	f7fd f8ea 	bl	8001ebc <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e211      	b.n	800511a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004cf6:	4b5e      	ldr	r3, [pc, #376]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f0      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0308 	and.w	r3, r3, #8
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d036      	beq.n	8004d7c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d019      	beq.n	8004d4a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d16:	4b56      	ldr	r3, [pc, #344]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d1a:	4a55      	ldr	r2, [pc, #340]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004d1c:	f043 0301 	orr.w	r3, r3, #1
 8004d20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d22:	f7fd f8cb 	bl	8001ebc <HAL_GetTick>
 8004d26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d2a:	f7fd f8c7 	bl	8001ebc <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e1ee      	b.n	800511a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d3c:	4b4c      	ldr	r3, [pc, #304]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCC_OscConfig+0x35e>
 8004d48:	e018      	b.n	8004d7c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d4a:	4b49      	ldr	r3, [pc, #292]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d4e:	4a48      	ldr	r2, [pc, #288]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004d50:	f023 0301 	bic.w	r3, r3, #1
 8004d54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d56:	f7fd f8b1 	bl	8001ebc <HAL_GetTick>
 8004d5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d5e:	f7fd f8ad 	bl	8001ebc <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e1d4      	b.n	800511a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d70:	4b3f      	ldr	r3, [pc, #252]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1f0      	bne.n	8004d5e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0320 	and.w	r3, r3, #32
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d036      	beq.n	8004df6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d019      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d90:	4b37      	ldr	r3, [pc, #220]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a36      	ldr	r2, [pc, #216]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004d96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d9c:	f7fd f88e 	bl	8001ebc <HAL_GetTick>
 8004da0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004da4:	f7fd f88a 	bl	8001ebc <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e1b1      	b.n	800511a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004db6:	4b2e      	ldr	r3, [pc, #184]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0x3d8>
 8004dc2:	e018      	b.n	8004df6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dc4:	4b2a      	ldr	r3, [pc, #168]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a29      	ldr	r2, [pc, #164]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004dca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004dd0:	f7fd f874 	bl	8001ebc <HAL_GetTick>
 8004dd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004dd8:	f7fd f870 	bl	8001ebc <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e197      	b.n	800511a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004dea:	4b21      	ldr	r3, [pc, #132]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1f0      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 8086 	beq.w	8004f10 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e04:	4b1b      	ldr	r3, [pc, #108]	; (8004e74 <HAL_RCC_OscConfig+0x4a8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a1a      	ldr	r2, [pc, #104]	; (8004e74 <HAL_RCC_OscConfig+0x4a8>)
 8004e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e10:	f7fd f854 	bl	8001ebc <HAL_GetTick>
 8004e14:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e18:	f7fd f850 	bl	8001ebc <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b64      	cmp	r3, #100	; 0x64
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e177      	b.n	800511a <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e2a:	4b12      	ldr	r3, [pc, #72]	; (8004e74 <HAL_RCC_OscConfig+0x4a8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0f0      	beq.n	8004e18 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d106      	bne.n	8004e4c <HAL_RCC_OscConfig+0x480>
 8004e3e:	4b0c      	ldr	r3, [pc, #48]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e42:	4a0b      	ldr	r2, [pc, #44]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004e44:	f043 0301 	orr.w	r3, r3, #1
 8004e48:	6713      	str	r3, [r2, #112]	; 0x70
 8004e4a:	e032      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e6>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d111      	bne.n	8004e78 <HAL_RCC_OscConfig+0x4ac>
 8004e54:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e58:	4a05      	ldr	r2, [pc, #20]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004e5a:	f023 0301 	bic.w	r3, r3, #1
 8004e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e60:	4b03      	ldr	r3, [pc, #12]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e64:	4a02      	ldr	r2, [pc, #8]	; (8004e70 <HAL_RCC_OscConfig+0x4a4>)
 8004e66:	f023 0304 	bic.w	r3, r3, #4
 8004e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e6c:	e021      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e6>
 8004e6e:	bf00      	nop
 8004e70:	58024400 	.word	0x58024400
 8004e74:	58024800 	.word	0x58024800
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2b05      	cmp	r3, #5
 8004e7e:	d10c      	bne.n	8004e9a <HAL_RCC_OscConfig+0x4ce>
 8004e80:	4b83      	ldr	r3, [pc, #524]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e84:	4a82      	ldr	r2, [pc, #520]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004e86:	f043 0304 	orr.w	r3, r3, #4
 8004e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e8c:	4b80      	ldr	r3, [pc, #512]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e90:	4a7f      	ldr	r2, [pc, #508]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	6713      	str	r3, [r2, #112]	; 0x70
 8004e98:	e00b      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e6>
 8004e9a:	4b7d      	ldr	r3, [pc, #500]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9e:	4a7c      	ldr	r2, [pc, #496]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea6:	4b7a      	ldr	r3, [pc, #488]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eaa:	4a79      	ldr	r2, [pc, #484]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004eac:	f023 0304 	bic.w	r3, r3, #4
 8004eb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d015      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eba:	f7fc ffff 	bl	8001ebc <HAL_GetTick>
 8004ebe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ec0:	e00a      	b.n	8004ed8 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ec2:	f7fc fffb 	bl	8001ebc <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e120      	b.n	800511a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ed8:	4b6d      	ldr	r3, [pc, #436]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0ee      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x4f6>
 8004ee4:	e014      	b.n	8004f10 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee6:	f7fc ffe9 	bl	8001ebc <HAL_GetTick>
 8004eea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004eec:	e00a      	b.n	8004f04 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eee:	f7fc ffe5 	bl	8001ebc <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e10a      	b.n	800511a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f04:	4b62      	ldr	r3, [pc, #392]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1ee      	bne.n	8004eee <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 80ff 	beq.w	8005118 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004f1a:	4b5d      	ldr	r3, [pc, #372]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f22:	2b18      	cmp	r3, #24
 8004f24:	f000 80ba 	beq.w	800509c <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	f040 8095 	bne.w	800505c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f32:	4b57      	ldr	r3, [pc, #348]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a56      	ldr	r2, [pc, #344]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004f38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3e:	f7fc ffbd 	bl	8001ebc <HAL_GetTick>
 8004f42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f46:	f7fc ffb9 	bl	8001ebc <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e0e0      	b.n	800511a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f58:	4b4d      	ldr	r3, [pc, #308]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1f0      	bne.n	8004f46 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f64:	4b4a      	ldr	r3, [pc, #296]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004f66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f68:	4b4a      	ldr	r3, [pc, #296]	; (8005094 <HAL_RCC_OscConfig+0x6c8>)
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f74:	0112      	lsls	r2, r2, #4
 8004f76:	430a      	orrs	r2, r1
 8004f78:	4945      	ldr	r1, [pc, #276]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	628b      	str	r3, [r1, #40]	; 0x28
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	3b01      	subs	r3, #1
 8004f84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	025b      	lsls	r3, r3, #9
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	041b      	lsls	r3, r3, #16
 8004f9c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	061b      	lsls	r3, r3, #24
 8004faa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004fae:	4938      	ldr	r1, [pc, #224]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004fb4:	4b36      	ldr	r3, [pc, #216]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	4a35      	ldr	r2, [pc, #212]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004fba:	f023 0301 	bic.w	r3, r3, #1
 8004fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004fc0:	4b33      	ldr	r3, [pc, #204]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fc4:	4b34      	ldr	r3, [pc, #208]	; (8005098 <HAL_RCC_OscConfig+0x6cc>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004fcc:	00d2      	lsls	r2, r2, #3
 8004fce:	4930      	ldr	r1, [pc, #192]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004fd4:	4b2e      	ldr	r3, [pc, #184]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	f023 020c 	bic.w	r2, r3, #12
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	492b      	ldr	r1, [pc, #172]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004fe6:	4b2a      	ldr	r3, [pc, #168]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fea:	f023 0202 	bic.w	r2, r3, #2
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff2:	4927      	ldr	r1, [pc, #156]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ff8:	4b25      	ldr	r3, [pc, #148]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	4a24      	ldr	r2, [pc, #144]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8004ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005002:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005004:	4b22      	ldr	r3, [pc, #136]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	4a21      	ldr	r2, [pc, #132]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 800500a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800500e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005010:	4b1f      	ldr	r3, [pc, #124]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	4a1e      	ldr	r2, [pc, #120]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8005016:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800501a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800501c:	4b1c      	ldr	r3, [pc, #112]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	4a1b      	ldr	r2, [pc, #108]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8005022:	f043 0301 	orr.w	r3, r3, #1
 8005026:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005028:	4b19      	ldr	r3, [pc, #100]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a18      	ldr	r2, [pc, #96]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 800502e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fc ff42 	bl	8001ebc <HAL_GetTick>
 8005038:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800503c:	f7fc ff3e 	bl	8001ebc <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e065      	b.n	800511a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800504e:	4b10      	ldr	r3, [pc, #64]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCC_OscConfig+0x670>
 800505a:	e05d      	b.n	8005118 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800505c:	4b0c      	ldr	r3, [pc, #48]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a0b      	ldr	r2, [pc, #44]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8005062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005068:	f7fc ff28 	bl	8001ebc <HAL_GetTick>
 800506c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005070:	f7fc ff24 	bl	8001ebc <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e04b      	b.n	800511a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005082:	4b03      	ldr	r3, [pc, #12]	; (8005090 <HAL_RCC_OscConfig+0x6c4>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0x6a4>
 800508e:	e043      	b.n	8005118 <HAL_RCC_OscConfig+0x74c>
 8005090:	58024400 	.word	0x58024400
 8005094:	fffffc0c 	.word	0xfffffc0c
 8005098:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800509c:	4b21      	ldr	r3, [pc, #132]	; (8005124 <HAL_RCC_OscConfig+0x758>)
 800509e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80050a2:	4b20      	ldr	r3, [pc, #128]	; (8005124 <HAL_RCC_OscConfig+0x758>)
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d031      	beq.n	8005114 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f003 0203 	and.w	r2, r3, #3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d12a      	bne.n	8005114 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	091b      	lsrs	r3, r3, #4
 80050c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d122      	bne.n	8005114 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050da:	429a      	cmp	r2, r3
 80050dc:	d11a      	bne.n	8005114 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	0a5b      	lsrs	r3, r3, #9
 80050e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ea:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d111      	bne.n	8005114 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	0c1b      	lsrs	r3, r3, #16
 80050f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050fe:	429a      	cmp	r2, r3
 8005100:	d108      	bne.n	8005114 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	0e1b      	lsrs	r3, r3, #24
 8005106:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005110:	429a      	cmp	r2, r3
 8005112:	d001      	beq.n	8005118 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3730      	adds	r7, #48	; 0x30
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	58024400 	.word	0x58024400

08005128 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e19c      	b.n	8005476 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800513c:	4b8a      	ldr	r3, [pc, #552]	; (8005368 <HAL_RCC_ClockConfig+0x240>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 030f 	and.w	r3, r3, #15
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	429a      	cmp	r2, r3
 8005148:	d910      	bls.n	800516c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514a:	4b87      	ldr	r3, [pc, #540]	; (8005368 <HAL_RCC_ClockConfig+0x240>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f023 020f 	bic.w	r2, r3, #15
 8005152:	4985      	ldr	r1, [pc, #532]	; (8005368 <HAL_RCC_ClockConfig+0x240>)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	4313      	orrs	r3, r2
 8005158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800515a:	4b83      	ldr	r3, [pc, #524]	; (8005368 <HAL_RCC_ClockConfig+0x240>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	429a      	cmp	r2, r3
 8005166:	d001      	beq.n	800516c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e184      	b.n	8005476 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b00      	cmp	r3, #0
 8005176:	d010      	beq.n	800519a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691a      	ldr	r2, [r3, #16]
 800517c:	4b7b      	ldr	r3, [pc, #492]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005184:	429a      	cmp	r2, r3
 8005186:	d908      	bls.n	800519a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005188:	4b78      	ldr	r3, [pc, #480]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	4975      	ldr	r1, [pc, #468]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 8005196:	4313      	orrs	r3, r2
 8005198:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d010      	beq.n	80051c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695a      	ldr	r2, [r3, #20]
 80051aa:	4b70      	ldr	r3, [pc, #448]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d908      	bls.n	80051c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051b6:	4b6d      	ldr	r3, [pc, #436]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	496a      	ldr	r1, [pc, #424]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0310 	and.w	r3, r3, #16
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d010      	beq.n	80051f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699a      	ldr	r2, [r3, #24]
 80051d8:	4b64      	ldr	r3, [pc, #400]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d908      	bls.n	80051f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051e4:	4b61      	ldr	r3, [pc, #388]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	495e      	ldr	r1, [pc, #376]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0320 	and.w	r3, r3, #32
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d010      	beq.n	8005224 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69da      	ldr	r2, [r3, #28]
 8005206:	4b59      	ldr	r3, [pc, #356]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800520e:	429a      	cmp	r2, r3
 8005210:	d908      	bls.n	8005224 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005212:	4b56      	ldr	r3, [pc, #344]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	4953      	ldr	r1, [pc, #332]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 8005220:	4313      	orrs	r3, r2
 8005222:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d010      	beq.n	8005252 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68da      	ldr	r2, [r3, #12]
 8005234:	4b4d      	ldr	r3, [pc, #308]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	f003 030f 	and.w	r3, r3, #15
 800523c:	429a      	cmp	r2, r3
 800523e:	d908      	bls.n	8005252 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005240:	4b4a      	ldr	r3, [pc, #296]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	f023 020f 	bic.w	r2, r3, #15
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	4947      	ldr	r1, [pc, #284]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 800524e:	4313      	orrs	r3, r2
 8005250:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d055      	beq.n	800530a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800525e:	4b43      	ldr	r3, [pc, #268]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	4940      	ldr	r1, [pc, #256]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 800526c:	4313      	orrs	r3, r2
 800526e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	2b02      	cmp	r3, #2
 8005276:	d107      	bne.n	8005288 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005278:	4b3c      	ldr	r3, [pc, #240]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d121      	bne.n	80052c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e0f6      	b.n	8005476 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2b03      	cmp	r3, #3
 800528e:	d107      	bne.n	80052a0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005290:	4b36      	ldr	r3, [pc, #216]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d115      	bne.n	80052c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e0ea      	b.n	8005476 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d107      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052a8:	4b30      	ldr	r3, [pc, #192]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d109      	bne.n	80052c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0de      	b.n	8005476 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052b8:	4b2c      	ldr	r3, [pc, #176]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e0d6      	b.n	8005476 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052c8:	4b28      	ldr	r3, [pc, #160]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	f023 0207 	bic.w	r2, r3, #7
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	4925      	ldr	r1, [pc, #148]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052da:	f7fc fdef 	bl	8001ebc <HAL_GetTick>
 80052de:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e0:	e00a      	b.n	80052f8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052e2:	f7fc fdeb 	bl	8001ebc <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e0be      	b.n	8005476 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052f8:	4b1c      	ldr	r3, [pc, #112]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	00db      	lsls	r3, r3, #3
 8005306:	429a      	cmp	r2, r3
 8005308:	d1eb      	bne.n	80052e2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d010      	beq.n	8005338 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68da      	ldr	r2, [r3, #12]
 800531a:	4b14      	ldr	r3, [pc, #80]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	429a      	cmp	r2, r3
 8005324:	d208      	bcs.n	8005338 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005326:	4b11      	ldr	r3, [pc, #68]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	f023 020f 	bic.w	r2, r3, #15
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	490e      	ldr	r1, [pc, #56]	; (800536c <HAL_RCC_ClockConfig+0x244>)
 8005334:	4313      	orrs	r3, r2
 8005336:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005338:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <HAL_RCC_ClockConfig+0x240>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 030f 	and.w	r3, r3, #15
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	429a      	cmp	r2, r3
 8005344:	d214      	bcs.n	8005370 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005346:	4b08      	ldr	r3, [pc, #32]	; (8005368 <HAL_RCC_ClockConfig+0x240>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f023 020f 	bic.w	r2, r3, #15
 800534e:	4906      	ldr	r1, [pc, #24]	; (8005368 <HAL_RCC_ClockConfig+0x240>)
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	4313      	orrs	r3, r2
 8005354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005356:	4b04      	ldr	r3, [pc, #16]	; (8005368 <HAL_RCC_ClockConfig+0x240>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	429a      	cmp	r2, r3
 8005362:	d005      	beq.n	8005370 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e086      	b.n	8005476 <HAL_RCC_ClockConfig+0x34e>
 8005368:	52002000 	.word	0x52002000
 800536c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b00      	cmp	r3, #0
 800537a:	d010      	beq.n	800539e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691a      	ldr	r2, [r3, #16]
 8005380:	4b3f      	ldr	r3, [pc, #252]	; (8005480 <HAL_RCC_ClockConfig+0x358>)
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005388:	429a      	cmp	r2, r3
 800538a:	d208      	bcs.n	800539e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800538c:	4b3c      	ldr	r3, [pc, #240]	; (8005480 <HAL_RCC_ClockConfig+0x358>)
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	4939      	ldr	r1, [pc, #228]	; (8005480 <HAL_RCC_ClockConfig+0x358>)
 800539a:	4313      	orrs	r3, r2
 800539c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d010      	beq.n	80053cc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695a      	ldr	r2, [r3, #20]
 80053ae:	4b34      	ldr	r3, [pc, #208]	; (8005480 <HAL_RCC_ClockConfig+0x358>)
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d208      	bcs.n	80053cc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053ba:	4b31      	ldr	r3, [pc, #196]	; (8005480 <HAL_RCC_ClockConfig+0x358>)
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	492e      	ldr	r1, [pc, #184]	; (8005480 <HAL_RCC_ClockConfig+0x358>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0310 	and.w	r3, r3, #16
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d010      	beq.n	80053fa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	699a      	ldr	r2, [r3, #24]
 80053dc:	4b28      	ldr	r3, [pc, #160]	; (8005480 <HAL_RCC_ClockConfig+0x358>)
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d208      	bcs.n	80053fa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053e8:	4b25      	ldr	r3, [pc, #148]	; (8005480 <HAL_RCC_ClockConfig+0x358>)
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	4922      	ldr	r1, [pc, #136]	; (8005480 <HAL_RCC_ClockConfig+0x358>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0320 	and.w	r3, r3, #32
 8005402:	2b00      	cmp	r3, #0
 8005404:	d010      	beq.n	8005428 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69da      	ldr	r2, [r3, #28]
 800540a:	4b1d      	ldr	r3, [pc, #116]	; (8005480 <HAL_RCC_ClockConfig+0x358>)
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005412:	429a      	cmp	r2, r3
 8005414:	d208      	bcs.n	8005428 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005416:	4b1a      	ldr	r3, [pc, #104]	; (8005480 <HAL_RCC_ClockConfig+0x358>)
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	4917      	ldr	r1, [pc, #92]	; (8005480 <HAL_RCC_ClockConfig+0x358>)
 8005424:	4313      	orrs	r3, r2
 8005426:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005428:	f000 f834 	bl	8005494 <HAL_RCC_GetSysClockFreq>
 800542c:	4602      	mov	r2, r0
 800542e:	4b14      	ldr	r3, [pc, #80]	; (8005480 <HAL_RCC_ClockConfig+0x358>)
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	0a1b      	lsrs	r3, r3, #8
 8005434:	f003 030f 	and.w	r3, r3, #15
 8005438:	4912      	ldr	r1, [pc, #72]	; (8005484 <HAL_RCC_ClockConfig+0x35c>)
 800543a:	5ccb      	ldrb	r3, [r1, r3]
 800543c:	f003 031f 	and.w	r3, r3, #31
 8005440:	fa22 f303 	lsr.w	r3, r2, r3
 8005444:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005446:	4b0e      	ldr	r3, [pc, #56]	; (8005480 <HAL_RCC_ClockConfig+0x358>)
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	4a0d      	ldr	r2, [pc, #52]	; (8005484 <HAL_RCC_ClockConfig+0x35c>)
 8005450:	5cd3      	ldrb	r3, [r2, r3]
 8005452:	f003 031f 	and.w	r3, r3, #31
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
 800545c:	4a0a      	ldr	r2, [pc, #40]	; (8005488 <HAL_RCC_ClockConfig+0x360>)
 800545e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005460:	4a0a      	ldr	r2, [pc, #40]	; (800548c <HAL_RCC_ClockConfig+0x364>)
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005466:	4b0a      	ldr	r3, [pc, #40]	; (8005490 <HAL_RCC_ClockConfig+0x368>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f7fc fa98 	bl	80019a0 <HAL_InitTick>
 8005470:	4603      	mov	r3, r0
 8005472:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005474:	7bfb      	ldrb	r3, [r7, #15]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	58024400 	.word	0x58024400
 8005484:	08015708 	.word	0x08015708
 8005488:	2400006c 	.word	0x2400006c
 800548c:	24000068 	.word	0x24000068
 8005490:	24000070 	.word	0x24000070

08005494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005494:	b480      	push	{r7}
 8005496:	b089      	sub	sp, #36	; 0x24
 8005498:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800549a:	4bb3      	ldr	r3, [pc, #716]	; (8005768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054a2:	2b18      	cmp	r3, #24
 80054a4:	f200 8155 	bhi.w	8005752 <HAL_RCC_GetSysClockFreq+0x2be>
 80054a8:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80054aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ae:	bf00      	nop
 80054b0:	08005515 	.word	0x08005515
 80054b4:	08005753 	.word	0x08005753
 80054b8:	08005753 	.word	0x08005753
 80054bc:	08005753 	.word	0x08005753
 80054c0:	08005753 	.word	0x08005753
 80054c4:	08005753 	.word	0x08005753
 80054c8:	08005753 	.word	0x08005753
 80054cc:	08005753 	.word	0x08005753
 80054d0:	0800553b 	.word	0x0800553b
 80054d4:	08005753 	.word	0x08005753
 80054d8:	08005753 	.word	0x08005753
 80054dc:	08005753 	.word	0x08005753
 80054e0:	08005753 	.word	0x08005753
 80054e4:	08005753 	.word	0x08005753
 80054e8:	08005753 	.word	0x08005753
 80054ec:	08005753 	.word	0x08005753
 80054f0:	08005541 	.word	0x08005541
 80054f4:	08005753 	.word	0x08005753
 80054f8:	08005753 	.word	0x08005753
 80054fc:	08005753 	.word	0x08005753
 8005500:	08005753 	.word	0x08005753
 8005504:	08005753 	.word	0x08005753
 8005508:	08005753 	.word	0x08005753
 800550c:	08005753 	.word	0x08005753
 8005510:	08005547 	.word	0x08005547
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005514:	4b94      	ldr	r3, [pc, #592]	; (8005768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0320 	and.w	r3, r3, #32
 800551c:	2b00      	cmp	r3, #0
 800551e:	d009      	beq.n	8005534 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005520:	4b91      	ldr	r3, [pc, #580]	; (8005768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	08db      	lsrs	r3, r3, #3
 8005526:	f003 0303 	and.w	r3, r3, #3
 800552a:	4a90      	ldr	r2, [pc, #576]	; (800576c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800552c:	fa22 f303 	lsr.w	r3, r2, r3
 8005530:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005532:	e111      	b.n	8005758 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005534:	4b8d      	ldr	r3, [pc, #564]	; (800576c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005536:	61bb      	str	r3, [r7, #24]
    break;
 8005538:	e10e      	b.n	8005758 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800553a:	4b8d      	ldr	r3, [pc, #564]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800553c:	61bb      	str	r3, [r7, #24]
    break;
 800553e:	e10b      	b.n	8005758 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005540:	4b8c      	ldr	r3, [pc, #560]	; (8005774 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005542:	61bb      	str	r3, [r7, #24]
    break;
 8005544:	e108      	b.n	8005758 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005546:	4b88      	ldr	r3, [pc, #544]	; (8005768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005550:	4b85      	ldr	r3, [pc, #532]	; (8005768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005554:	091b      	lsrs	r3, r3, #4
 8005556:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800555a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800555c:	4b82      	ldr	r3, [pc, #520]	; (8005768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005566:	4b80      	ldr	r3, [pc, #512]	; (8005768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556a:	08db      	lsrs	r3, r3, #3
 800556c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	fb02 f303 	mul.w	r3, r2, r3
 8005576:	ee07 3a90 	vmov	s15, r3
 800557a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800557e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 80e1 	beq.w	800574c <HAL_RCC_GetSysClockFreq+0x2b8>
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b02      	cmp	r3, #2
 800558e:	f000 8083 	beq.w	8005698 <HAL_RCC_GetSysClockFreq+0x204>
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2b02      	cmp	r3, #2
 8005596:	f200 80a1 	bhi.w	80056dc <HAL_RCC_GetSysClockFreq+0x248>
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <HAL_RCC_GetSysClockFreq+0x114>
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d056      	beq.n	8005654 <HAL_RCC_GetSysClockFreq+0x1c0>
 80055a6:	e099      	b.n	80056dc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055a8:	4b6f      	ldr	r3, [pc, #444]	; (8005768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0320 	and.w	r3, r3, #32
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d02d      	beq.n	8005610 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055b4:	4b6c      	ldr	r3, [pc, #432]	; (8005768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	08db      	lsrs	r3, r3, #3
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	4a6b      	ldr	r2, [pc, #428]	; (800576c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055c0:	fa22 f303 	lsr.w	r3, r2, r3
 80055c4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	ee07 3a90 	vmov	s15, r3
 80055cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055de:	4b62      	ldr	r3, [pc, #392]	; (8005768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e6:	ee07 3a90 	vmov	s15, r3
 80055ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80055f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005778 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800560e:	e087      	b.n	8005720 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	ee07 3a90 	vmov	s15, r3
 8005616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800577c <HAL_RCC_GetSysClockFreq+0x2e8>
 800561e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005622:	4b51      	ldr	r3, [pc, #324]	; (8005768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005632:	ed97 6a02 	vldr	s12, [r7, #8]
 8005636:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005778 <HAL_RCC_GetSysClockFreq+0x2e4>
 800563a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800563e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800564a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800564e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005652:	e065      	b.n	8005720 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	ee07 3a90 	vmov	s15, r3
 800565a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800565e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005780 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005666:	4b40      	ldr	r3, [pc, #256]	; (8005768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800566e:	ee07 3a90 	vmov	s15, r3
 8005672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005676:	ed97 6a02 	vldr	s12, [r7, #8]
 800567a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005778 <HAL_RCC_GetSysClockFreq+0x2e4>
 800567e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800568a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800568e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005696:	e043      	b.n	8005720 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	ee07 3a90 	vmov	s15, r3
 800569e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005784 <HAL_RCC_GetSysClockFreq+0x2f0>
 80056a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056aa:	4b2f      	ldr	r3, [pc, #188]	; (8005768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b2:	ee07 3a90 	vmov	s15, r3
 80056b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80056be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005778 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056da:	e021      	b.n	8005720 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005780 <HAL_RCC_GetSysClockFreq+0x2ec>
 80056ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ee:	4b1e      	ldr	r3, [pc, #120]	; (8005768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005702:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005778 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800570a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800570e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800571a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800571e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005720:	4b11      	ldr	r3, [pc, #68]	; (8005768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005724:	0a5b      	lsrs	r3, r3, #9
 8005726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800572a:	3301      	adds	r3, #1
 800572c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	ee07 3a90 	vmov	s15, r3
 8005734:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005738:	edd7 6a07 	vldr	s13, [r7, #28]
 800573c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005744:	ee17 3a90 	vmov	r3, s15
 8005748:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800574a:	e005      	b.n	8005758 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	61bb      	str	r3, [r7, #24]
    break;
 8005750:	e002      	b.n	8005758 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005752:	4b07      	ldr	r3, [pc, #28]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005754:	61bb      	str	r3, [r7, #24]
    break;
 8005756:	bf00      	nop
  }

  return sysclockfreq;
 8005758:	69bb      	ldr	r3, [r7, #24]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3724      	adds	r7, #36	; 0x24
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	58024400 	.word	0x58024400
 800576c:	03d09000 	.word	0x03d09000
 8005770:	003d0900 	.word	0x003d0900
 8005774:	007a1200 	.word	0x007a1200
 8005778:	46000000 	.word	0x46000000
 800577c:	4c742400 	.word	0x4c742400
 8005780:	4a742400 	.word	0x4a742400
 8005784:	4af42400 	.word	0x4af42400

08005788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800578e:	f7ff fe81 	bl	8005494 <HAL_RCC_GetSysClockFreq>
 8005792:	4602      	mov	r2, r0
 8005794:	4b10      	ldr	r3, [pc, #64]	; (80057d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	0a1b      	lsrs	r3, r3, #8
 800579a:	f003 030f 	and.w	r3, r3, #15
 800579e:	490f      	ldr	r1, [pc, #60]	; (80057dc <HAL_RCC_GetHCLKFreq+0x54>)
 80057a0:	5ccb      	ldrb	r3, [r1, r3]
 80057a2:	f003 031f 	and.w	r3, r3, #31
 80057a6:	fa22 f303 	lsr.w	r3, r2, r3
 80057aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057ac:	4b0a      	ldr	r3, [pc, #40]	; (80057d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	f003 030f 	and.w	r3, r3, #15
 80057b4:	4a09      	ldr	r2, [pc, #36]	; (80057dc <HAL_RCC_GetHCLKFreq+0x54>)
 80057b6:	5cd3      	ldrb	r3, [r2, r3]
 80057b8:	f003 031f 	and.w	r3, r3, #31
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	fa22 f303 	lsr.w	r3, r2, r3
 80057c2:	4a07      	ldr	r2, [pc, #28]	; (80057e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80057c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057c6:	4a07      	ldr	r2, [pc, #28]	; (80057e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80057cc:	4b04      	ldr	r3, [pc, #16]	; (80057e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80057ce:	681b      	ldr	r3, [r3, #0]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	58024400 	.word	0x58024400
 80057dc:	08015708 	.word	0x08015708
 80057e0:	2400006c 	.word	0x2400006c
 80057e4:	24000068 	.word	0x24000068

080057e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80057ec:	f7ff ffcc 	bl	8005788 <HAL_RCC_GetHCLKFreq>
 80057f0:	4602      	mov	r2, r0
 80057f2:	4b06      	ldr	r3, [pc, #24]	; (800580c <HAL_RCC_GetPCLK1Freq+0x24>)
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	091b      	lsrs	r3, r3, #4
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	4904      	ldr	r1, [pc, #16]	; (8005810 <HAL_RCC_GetPCLK1Freq+0x28>)
 80057fe:	5ccb      	ldrb	r3, [r1, r3]
 8005800:	f003 031f 	and.w	r3, r3, #31
 8005804:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005808:	4618      	mov	r0, r3
 800580a:	bd80      	pop	{r7, pc}
 800580c:	58024400 	.word	0x58024400
 8005810:	08015708 	.word	0x08015708

08005814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005818:	f7ff ffb6 	bl	8005788 <HAL_RCC_GetHCLKFreq>
 800581c:	4602      	mov	r2, r0
 800581e:	4b06      	ldr	r3, [pc, #24]	; (8005838 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	0a1b      	lsrs	r3, r3, #8
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	4904      	ldr	r1, [pc, #16]	; (800583c <HAL_RCC_GetPCLK2Freq+0x28>)
 800582a:	5ccb      	ldrb	r3, [r1, r3]
 800582c:	f003 031f 	and.w	r3, r3, #31
 8005830:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005834:	4618      	mov	r0, r3
 8005836:	bd80      	pop	{r7, pc}
 8005838:	58024400 	.word	0x58024400
 800583c:	08015708 	.word	0x08015708

08005840 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	223f      	movs	r2, #63	; 0x3f
 800584e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005850:	4b1a      	ldr	r3, [pc, #104]	; (80058bc <HAL_RCC_GetClockConfig+0x7c>)
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	f003 0207 	and.w	r2, r3, #7
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800585c:	4b17      	ldr	r3, [pc, #92]	; (80058bc <HAL_RCC_GetClockConfig+0x7c>)
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005868:	4b14      	ldr	r3, [pc, #80]	; (80058bc <HAL_RCC_GetClockConfig+0x7c>)
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	f003 020f 	and.w	r2, r3, #15
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005874:	4b11      	ldr	r3, [pc, #68]	; (80058bc <HAL_RCC_GetClockConfig+0x7c>)
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005880:	4b0e      	ldr	r3, [pc, #56]	; (80058bc <HAL_RCC_GetClockConfig+0x7c>)
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800588c:	4b0b      	ldr	r3, [pc, #44]	; (80058bc <HAL_RCC_GetClockConfig+0x7c>)
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005898:	4b08      	ldr	r3, [pc, #32]	; (80058bc <HAL_RCC_GetClockConfig+0x7c>)
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80058a4:	4b06      	ldr	r3, [pc, #24]	; (80058c0 <HAL_RCC_GetClockConfig+0x80>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 020f 	and.w	r2, r3, #15
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	601a      	str	r2, [r3, #0]
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	58024400 	.word	0x58024400
 80058c0:	52002000 	.word	0x52002000

080058c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058cc:	2300      	movs	r3, #0
 80058ce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058d0:	2300      	movs	r3, #0
 80058d2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d03f      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058e8:	d02a      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80058ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058ee:	d824      	bhi.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80058f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058f4:	d018      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058fa:	d81e      	bhi.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005900:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005904:	d007      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005906:	e018      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005908:	4ba4      	ldr	r3, [pc, #656]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800590a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590c:	4aa3      	ldr	r2, [pc, #652]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800590e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005912:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005914:	e015      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	3304      	adds	r3, #4
 800591a:	2102      	movs	r1, #2
 800591c:	4618      	mov	r0, r3
 800591e:	f001 f989 	bl	8006c34 <RCCEx_PLL2_Config>
 8005922:	4603      	mov	r3, r0
 8005924:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005926:	e00c      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3324      	adds	r3, #36	; 0x24
 800592c:	2102      	movs	r1, #2
 800592e:	4618      	mov	r0, r3
 8005930:	f001 fa32 	bl	8006d98 <RCCEx_PLL3_Config>
 8005934:	4603      	mov	r3, r0
 8005936:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005938:	e003      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	75fb      	strb	r3, [r7, #23]
      break;
 800593e:	e000      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005940:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005942:	7dfb      	ldrb	r3, [r7, #23]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d109      	bne.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005948:	4b94      	ldr	r3, [pc, #592]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800594a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005954:	4991      	ldr	r1, [pc, #580]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005956:	4313      	orrs	r3, r2
 8005958:	650b      	str	r3, [r1, #80]	; 0x50
 800595a:	e001      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800595c:	7dfb      	ldrb	r3, [r7, #23]
 800595e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005968:	2b00      	cmp	r3, #0
 800596a:	d03d      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005970:	2b04      	cmp	r3, #4
 8005972:	d826      	bhi.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005974:	a201      	add	r2, pc, #4	; (adr r2, 800597c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597a:	bf00      	nop
 800597c:	08005991 	.word	0x08005991
 8005980:	0800599f 	.word	0x0800599f
 8005984:	080059b1 	.word	0x080059b1
 8005988:	080059c9 	.word	0x080059c9
 800598c:	080059c9 	.word	0x080059c9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005990:	4b82      	ldr	r3, [pc, #520]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	4a81      	ldr	r2, [pc, #516]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800599a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800599c:	e015      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	3304      	adds	r3, #4
 80059a2:	2100      	movs	r1, #0
 80059a4:	4618      	mov	r0, r3
 80059a6:	f001 f945 	bl	8006c34 <RCCEx_PLL2_Config>
 80059aa:	4603      	mov	r3, r0
 80059ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059ae:	e00c      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3324      	adds	r3, #36	; 0x24
 80059b4:	2100      	movs	r1, #0
 80059b6:	4618      	mov	r0, r3
 80059b8:	f001 f9ee 	bl	8006d98 <RCCEx_PLL3_Config>
 80059bc:	4603      	mov	r3, r0
 80059be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059c0:	e003      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	75fb      	strb	r3, [r7, #23]
      break;
 80059c6:	e000      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80059c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059ca:	7dfb      	ldrb	r3, [r7, #23]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d109      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059d0:	4b72      	ldr	r3, [pc, #456]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80059d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d4:	f023 0207 	bic.w	r2, r3, #7
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059dc:	496f      	ldr	r1, [pc, #444]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	650b      	str	r3, [r1, #80]	; 0x50
 80059e2:	e001      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e4:	7dfb      	ldrb	r3, [r7, #23]
 80059e6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d051      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80059fa:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80059fe:	d036      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005a00:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005a04:	d830      	bhi.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005a06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a0a:	d032      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005a0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a10:	d82a      	bhi.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005a12:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a16:	d02e      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005a18:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a1c:	d824      	bhi.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005a1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a22:	d018      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005a24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a28:	d81e      	bhi.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8005a2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a32:	d007      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005a34:	e018      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a36:	4b59      	ldr	r3, [pc, #356]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3a:	4a58      	ldr	r2, [pc, #352]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a42:	e019      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3304      	adds	r3, #4
 8005a48:	2100      	movs	r1, #0
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f001 f8f2 	bl	8006c34 <RCCEx_PLL2_Config>
 8005a50:	4603      	mov	r3, r0
 8005a52:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005a54:	e010      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	3324      	adds	r3, #36	; 0x24
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f001 f99b 	bl	8006d98 <RCCEx_PLL3_Config>
 8005a62:	4603      	mov	r3, r0
 8005a64:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a66:	e007      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a6c:	e004      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005a6e:	bf00      	nop
 8005a70:	e002      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005a72:	bf00      	nop
 8005a74:	e000      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005a76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a78:	7dfb      	ldrb	r3, [r7, #23]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10a      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005a7e:	4b47      	ldr	r3, [pc, #284]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a82:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a8c:	4943      	ldr	r1, [pc, #268]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	658b      	str	r3, [r1, #88]	; 0x58
 8005a92:	e001      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a94:	7dfb      	ldrb	r3, [r7, #23]
 8005a96:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d051      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005aaa:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005aae:	d036      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005ab0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005ab4:	d830      	bhi.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005ab6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005aba:	d032      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005abc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ac0:	d82a      	bhi.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005ac2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ac6:	d02e      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8005ac8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005acc:	d824      	bhi.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005ace:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ad2:	d018      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005ad4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ad8:	d81e      	bhi.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005ade:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ae2:	d007      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005ae4:	e018      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ae6:	4b2d      	ldr	r3, [pc, #180]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	4a2c      	ldr	r2, [pc, #176]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005af0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005af2:	e019      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3304      	adds	r3, #4
 8005af8:	2100      	movs	r1, #0
 8005afa:	4618      	mov	r0, r3
 8005afc:	f001 f89a 	bl	8006c34 <RCCEx_PLL2_Config>
 8005b00:	4603      	mov	r3, r0
 8005b02:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005b04:	e010      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3324      	adds	r3, #36	; 0x24
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f001 f943 	bl	8006d98 <RCCEx_PLL3_Config>
 8005b12:	4603      	mov	r3, r0
 8005b14:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b16:	e007      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b1c:	e004      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005b1e:	bf00      	nop
 8005b20:	e002      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005b22:	bf00      	nop
 8005b24:	e000      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005b26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b28:	7dfb      	ldrb	r3, [r7, #23]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10a      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005b2e:	4b1b      	ldr	r3, [pc, #108]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b32:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b3c:	4917      	ldr	r1, [pc, #92]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	658b      	str	r3, [r1, #88]	; 0x58
 8005b42:	e001      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b44:	7dfb      	ldrb	r3, [r7, #23]
 8005b46:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d035      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b58:	2b30      	cmp	r3, #48	; 0x30
 8005b5a:	d01c      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005b5c:	2b30      	cmp	r3, #48	; 0x30
 8005b5e:	d817      	bhi.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	d00c      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005b64:	2b20      	cmp	r3, #32
 8005b66:	d813      	bhi.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d019      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8005b6c:	2b10      	cmp	r3, #16
 8005b6e:	d10f      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b70:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	4a09      	ldr	r2, [pc, #36]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005b7c:	e011      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	3304      	adds	r3, #4
 8005b82:	2102      	movs	r1, #2
 8005b84:	4618      	mov	r0, r3
 8005b86:	f001 f855 	bl	8006c34 <RCCEx_PLL2_Config>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	75fb      	strb	r3, [r7, #23]
      break;
 8005b94:	e005      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8005b96:	bf00      	nop
 8005b98:	e003      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005b9a:	bf00      	nop
 8005b9c:	58024400 	.word	0x58024400
      break;
 8005ba0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ba2:	7dfb      	ldrb	r3, [r7, #23]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d109      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005ba8:	4ba3      	ldr	r3, [pc, #652]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bb4:	49a0      	ldr	r1, [pc, #640]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005bba:	e001      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bbc:	7dfb      	ldrb	r3, [r7, #23]
 8005bbe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d047      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bd4:	d030      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005bd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bda:	d82a      	bhi.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005bdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005be0:	d02c      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8005be2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005be6:	d824      	bhi.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bec:	d018      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bf2:	d81e      	bhi.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfc:	d007      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005bfe:	e018      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c00:	4b8d      	ldr	r3, [pc, #564]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	4a8c      	ldr	r2, [pc, #560]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c0c:	e017      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	3304      	adds	r3, #4
 8005c12:	2100      	movs	r1, #0
 8005c14:	4618      	mov	r0, r3
 8005c16:	f001 f80d 	bl	8006c34 <RCCEx_PLL2_Config>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c1e:	e00e      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3324      	adds	r3, #36	; 0x24
 8005c24:	2100      	movs	r1, #0
 8005c26:	4618      	mov	r0, r3
 8005c28:	f001 f8b6 	bl	8006d98 <RCCEx_PLL3_Config>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c30:	e005      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	75fb      	strb	r3, [r7, #23]
      break;
 8005c36:	e002      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005c38:	bf00      	nop
 8005c3a:	e000      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005c3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d109      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c44:	4b7c      	ldr	r3, [pc, #496]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c48:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c50:	4979      	ldr	r1, [pc, #484]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	650b      	str	r3, [r1, #80]	; 0x50
 8005c56:	e001      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c58:	7dfb      	ldrb	r3, [r7, #23]
 8005c5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d049      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c70:	d02e      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005c72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c76:	d828      	bhi.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005c78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c7c:	d02a      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005c7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c82:	d822      	bhi.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005c84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c88:	d026      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005c8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c8e:	d81c      	bhi.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005c90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c94:	d010      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005c96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c9a:	d816      	bhi.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d01d      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca4:	d111      	bne.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	3304      	adds	r3, #4
 8005caa:	2101      	movs	r1, #1
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 ffc1 	bl	8006c34 <RCCEx_PLL2_Config>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005cb6:	e012      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3324      	adds	r3, #36	; 0x24
 8005cbc:	2101      	movs	r1, #1
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f001 f86a 	bl	8006d98 <RCCEx_PLL3_Config>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005cc8:	e009      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8005cce:	e006      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005cd0:	bf00      	nop
 8005cd2:	e004      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005cd4:	bf00      	nop
 8005cd6:	e002      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005cd8:	bf00      	nop
 8005cda:	e000      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005cdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cde:	7dfb      	ldrb	r3, [r7, #23]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d109      	bne.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ce4:	4b54      	ldr	r3, [pc, #336]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf0:	4951      	ldr	r1, [pc, #324]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	650b      	str	r3, [r1, #80]	; 0x50
 8005cf6:	e001      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf8:	7dfb      	ldrb	r3, [r7, #23]
 8005cfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d04b      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d12:	d02e      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d18:	d828      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d1e:	d02a      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d24:	d822      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005d26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d2a:	d026      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005d2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d30:	d81c      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005d32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d36:	d010      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8005d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d3c:	d816      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01d      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005d42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d46:	d111      	bne.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 ff70 	bl	8006c34 <RCCEx_PLL2_Config>
 8005d54:	4603      	mov	r3, r0
 8005d56:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005d58:	e012      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	3324      	adds	r3, #36	; 0x24
 8005d5e:	2101      	movs	r1, #1
 8005d60:	4618      	mov	r0, r3
 8005d62:	f001 f819 	bl	8006d98 <RCCEx_PLL3_Config>
 8005d66:	4603      	mov	r3, r0
 8005d68:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005d6a:	e009      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d70:	e006      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005d72:	bf00      	nop
 8005d74:	e004      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005d76:	bf00      	nop
 8005d78:	e002      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005d7a:	bf00      	nop
 8005d7c:	e000      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005d7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d80:	7dfb      	ldrb	r3, [r7, #23]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10a      	bne.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005d86:	4b2c      	ldr	r3, [pc, #176]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d94:	4928      	ldr	r1, [pc, #160]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	658b      	str	r3, [r1, #88]	; 0x58
 8005d9a:	e001      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d9c:	7dfb      	ldrb	r3, [r7, #23]
 8005d9e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d02f      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005db4:	d00e      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8005db6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dba:	d814      	bhi.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d015      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005dc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dc4:	d10f      	bne.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dc6:	4b1c      	ldr	r3, [pc, #112]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dca:	4a1b      	ldr	r2, [pc, #108]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005dd2:	e00c      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	2101      	movs	r1, #1
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 ff2a 	bl	8006c34 <RCCEx_PLL2_Config>
 8005de0:	4603      	mov	r3, r0
 8005de2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005de4:	e003      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	75fb      	strb	r3, [r7, #23]
      break;
 8005dea:	e000      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8005dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dee:	7dfb      	ldrb	r3, [r7, #23]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d109      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005df4:	4b10      	ldr	r3, [pc, #64]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e00:	490d      	ldr	r1, [pc, #52]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	650b      	str	r3, [r1, #80]	; 0x50
 8005e06:	e001      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e08:	7dfb      	ldrb	r3, [r7, #23]
 8005e0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d034      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e1c:	2b03      	cmp	r3, #3
 8005e1e:	d81d      	bhi.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005e20:	a201      	add	r2, pc, #4	; (adr r2, 8005e28 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e26:	bf00      	nop
 8005e28:	08005e63 	.word	0x08005e63
 8005e2c:	08005e3d 	.word	0x08005e3d
 8005e30:	08005e4b 	.word	0x08005e4b
 8005e34:	08005e63 	.word	0x08005e63
 8005e38:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e3c:	4bb1      	ldr	r3, [pc, #708]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e40:	4ab0      	ldr	r2, [pc, #704]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005e48:	e00c      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	2102      	movs	r1, #2
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 feef 	bl	8006c34 <RCCEx_PLL2_Config>
 8005e56:	4603      	mov	r3, r0
 8005e58:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005e5a:	e003      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e60:	e000      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8005e62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d109      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005e6a:	4ba6      	ldr	r3, [pc, #664]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e6e:	f023 0203 	bic.w	r2, r3, #3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e76:	49a3      	ldr	r1, [pc, #652]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005e7c:	e001      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e7e:	7dfb      	ldrb	r3, [r7, #23]
 8005e80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 8086 	beq.w	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e90:	4b9d      	ldr	r3, [pc, #628]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a9c      	ldr	r2, [pc, #624]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e9c:	f7fc f80e 	bl	8001ebc <HAL_GetTick>
 8005ea0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ea2:	e009      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ea4:	f7fc f80a 	bl	8001ebc <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	2b64      	cmp	r3, #100	; 0x64
 8005eb0:	d902      	bls.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	75fb      	strb	r3, [r7, #23]
        break;
 8005eb6:	e005      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eb8:	4b93      	ldr	r3, [pc, #588]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0ef      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8005ec4:	7dfb      	ldrb	r3, [r7, #23]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d166      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005eca:	4b8e      	ldr	r3, [pc, #568]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005ecc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ed4:	4053      	eors	r3, r2
 8005ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d013      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ede:	4b89      	ldr	r3, [pc, #548]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ee8:	4b86      	ldr	r3, [pc, #536]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eec:	4a85      	ldr	r2, [pc, #532]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ef2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ef4:	4b83      	ldr	r3, [pc, #524]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef8:	4a82      	ldr	r2, [pc, #520]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005efe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005f00:	4a80      	ldr	r2, [pc, #512]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f10:	d115      	bne.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f12:	f7fb ffd3 	bl	8001ebc <HAL_GetTick>
 8005f16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f18:	e00b      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f1a:	f7fb ffcf 	bl	8001ebc <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d902      	bls.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	75fb      	strb	r3, [r7, #23]
            break;
 8005f30:	e005      	b.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f32:	4b74      	ldr	r3, [pc, #464]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0ed      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8005f3e:	7dfb      	ldrb	r3, [r7, #23]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d126      	bne.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f52:	d10d      	bne.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8005f54:	4b6b      	ldr	r3, [pc, #428]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f62:	0919      	lsrs	r1, r3, #4
 8005f64:	4b69      	ldr	r3, [pc, #420]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f66:	400b      	ands	r3, r1
 8005f68:	4966      	ldr	r1, [pc, #408]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	610b      	str	r3, [r1, #16]
 8005f6e:	e005      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8005f70:	4b64      	ldr	r3, [pc, #400]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	4a63      	ldr	r2, [pc, #396]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f76:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005f7a:	6113      	str	r3, [r2, #16]
 8005f7c:	4b61      	ldr	r3, [pc, #388]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f8a:	495e      	ldr	r1, [pc, #376]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	670b      	str	r3, [r1, #112]	; 0x70
 8005f90:	e004      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f92:	7dfb      	ldrb	r3, [r7, #23]
 8005f94:	75bb      	strb	r3, [r7, #22]
 8005f96:	e001      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f98:	7dfb      	ldrb	r3, [r7, #23]
 8005f9a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d07e      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fac:	2b28      	cmp	r3, #40	; 0x28
 8005fae:	d867      	bhi.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8005fb0:	a201      	add	r2, pc, #4	; (adr r2, 8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8005fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb6:	bf00      	nop
 8005fb8:	08006087 	.word	0x08006087
 8005fbc:	08006081 	.word	0x08006081
 8005fc0:	08006081 	.word	0x08006081
 8005fc4:	08006081 	.word	0x08006081
 8005fc8:	08006081 	.word	0x08006081
 8005fcc:	08006081 	.word	0x08006081
 8005fd0:	08006081 	.word	0x08006081
 8005fd4:	08006081 	.word	0x08006081
 8005fd8:	0800605d 	.word	0x0800605d
 8005fdc:	08006081 	.word	0x08006081
 8005fe0:	08006081 	.word	0x08006081
 8005fe4:	08006081 	.word	0x08006081
 8005fe8:	08006081 	.word	0x08006081
 8005fec:	08006081 	.word	0x08006081
 8005ff0:	08006081 	.word	0x08006081
 8005ff4:	08006081 	.word	0x08006081
 8005ff8:	0800606f 	.word	0x0800606f
 8005ffc:	08006081 	.word	0x08006081
 8006000:	08006081 	.word	0x08006081
 8006004:	08006081 	.word	0x08006081
 8006008:	08006081 	.word	0x08006081
 800600c:	08006081 	.word	0x08006081
 8006010:	08006081 	.word	0x08006081
 8006014:	08006081 	.word	0x08006081
 8006018:	08006087 	.word	0x08006087
 800601c:	08006081 	.word	0x08006081
 8006020:	08006081 	.word	0x08006081
 8006024:	08006081 	.word	0x08006081
 8006028:	08006081 	.word	0x08006081
 800602c:	08006081 	.word	0x08006081
 8006030:	08006081 	.word	0x08006081
 8006034:	08006081 	.word	0x08006081
 8006038:	08006087 	.word	0x08006087
 800603c:	08006081 	.word	0x08006081
 8006040:	08006081 	.word	0x08006081
 8006044:	08006081 	.word	0x08006081
 8006048:	08006081 	.word	0x08006081
 800604c:	08006081 	.word	0x08006081
 8006050:	08006081 	.word	0x08006081
 8006054:	08006081 	.word	0x08006081
 8006058:	08006087 	.word	0x08006087
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3304      	adds	r3, #4
 8006060:	2101      	movs	r1, #1
 8006062:	4618      	mov	r0, r3
 8006064:	f000 fde6 	bl	8006c34 <RCCEx_PLL2_Config>
 8006068:	4603      	mov	r3, r0
 800606a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800606c:	e00c      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	3324      	adds	r3, #36	; 0x24
 8006072:	2101      	movs	r1, #1
 8006074:	4618      	mov	r0, r3
 8006076:	f000 fe8f 	bl	8006d98 <RCCEx_PLL3_Config>
 800607a:	4603      	mov	r3, r0
 800607c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800607e:	e003      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	75fb      	strb	r3, [r7, #23]
      break;
 8006084:	e000      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8006086:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006088:	7dfb      	ldrb	r3, [r7, #23]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d109      	bne.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800608e:	4b1d      	ldr	r3, [pc, #116]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006092:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800609a:	491a      	ldr	r1, [pc, #104]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800609c:	4313      	orrs	r3, r2
 800609e:	654b      	str	r3, [r1, #84]	; 0x54
 80060a0:	e001      	b.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a2:	7dfb      	ldrb	r3, [r7, #23]
 80060a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d03e      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b6:	2b05      	cmp	r3, #5
 80060b8:	d820      	bhi.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x838>
 80060ba:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	08006111 	.word	0x08006111
 80060c4:	080060d9 	.word	0x080060d9
 80060c8:	080060eb 	.word	0x080060eb
 80060cc:	08006111 	.word	0x08006111
 80060d0:	08006111 	.word	0x08006111
 80060d4:	08006111 	.word	0x08006111
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3304      	adds	r3, #4
 80060dc:	2101      	movs	r1, #1
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fda8 	bl	8006c34 <RCCEx_PLL2_Config>
 80060e4:	4603      	mov	r3, r0
 80060e6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80060e8:	e013      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	3324      	adds	r3, #36	; 0x24
 80060ee:	2101      	movs	r1, #1
 80060f0:	4618      	mov	r0, r3
 80060f2:	f000 fe51 	bl	8006d98 <RCCEx_PLL3_Config>
 80060f6:	4603      	mov	r3, r0
 80060f8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80060fa:	e00a      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006100:	e007      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8006102:	bf00      	nop
 8006104:	58024400 	.word	0x58024400
 8006108:	58024800 	.word	0x58024800
 800610c:	00ffffcf 	.word	0x00ffffcf
      break;
 8006110:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006112:	7dfb      	ldrb	r3, [r7, #23]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d109      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006118:	4b9f      	ldr	r3, [pc, #636]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800611a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611c:	f023 0207 	bic.w	r2, r3, #7
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006124:	499c      	ldr	r1, [pc, #624]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006126:	4313      	orrs	r3, r2
 8006128:	654b      	str	r3, [r1, #84]	; 0x54
 800612a:	e001      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612c:	7dfb      	ldrb	r3, [r7, #23]
 800612e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0304 	and.w	r3, r3, #4
 8006138:	2b00      	cmp	r3, #0
 800613a:	d039      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006142:	2b05      	cmp	r3, #5
 8006144:	d820      	bhi.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8006146:	a201      	add	r2, pc, #4	; (adr r2, 800614c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8006148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614c:	0800618f 	.word	0x0800618f
 8006150:	08006165 	.word	0x08006165
 8006154:	08006177 	.word	0x08006177
 8006158:	0800618f 	.word	0x0800618f
 800615c:	0800618f 	.word	0x0800618f
 8006160:	0800618f 	.word	0x0800618f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3304      	adds	r3, #4
 8006168:	2101      	movs	r1, #1
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fd62 	bl	8006c34 <RCCEx_PLL2_Config>
 8006170:	4603      	mov	r3, r0
 8006172:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006174:	e00c      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	3324      	adds	r3, #36	; 0x24
 800617a:	2101      	movs	r1, #1
 800617c:	4618      	mov	r0, r3
 800617e:	f000 fe0b 	bl	8006d98 <RCCEx_PLL3_Config>
 8006182:	4603      	mov	r3, r0
 8006184:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006186:	e003      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	75fb      	strb	r3, [r7, #23]
      break;
 800618c:	e000      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800618e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006190:	7dfb      	ldrb	r3, [r7, #23]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10a      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006196:	4b80      	ldr	r3, [pc, #512]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800619a:	f023 0207 	bic.w	r2, r3, #7
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061a4:	497c      	ldr	r1, [pc, #496]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	658b      	str	r3, [r1, #88]	; 0x58
 80061aa:	e001      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ac:	7dfb      	ldrb	r3, [r7, #23]
 80061ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0320 	and.w	r3, r3, #32
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d04b      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061c6:	d02e      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x962>
 80061c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061cc:	d828      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80061ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d2:	d02a      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x966>
 80061d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d8:	d822      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80061da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061de:	d026      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80061e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061e4:	d81c      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80061e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061ea:	d010      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80061ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061f0:	d816      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d01d      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80061f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061fa:	d111      	bne.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3304      	adds	r3, #4
 8006200:	2100      	movs	r1, #0
 8006202:	4618      	mov	r0, r3
 8006204:	f000 fd16 	bl	8006c34 <RCCEx_PLL2_Config>
 8006208:	4603      	mov	r3, r0
 800620a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800620c:	e012      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	3324      	adds	r3, #36	; 0x24
 8006212:	2102      	movs	r1, #2
 8006214:	4618      	mov	r0, r3
 8006216:	f000 fdbf 	bl	8006d98 <RCCEx_PLL3_Config>
 800621a:	4603      	mov	r3, r0
 800621c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800621e:	e009      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	75fb      	strb	r3, [r7, #23]
      break;
 8006224:	e006      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006226:	bf00      	nop
 8006228:	e004      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800622a:	bf00      	nop
 800622c:	e002      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800622e:	bf00      	nop
 8006230:	e000      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006232:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006234:	7dfb      	ldrb	r3, [r7, #23]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10a      	bne.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800623a:	4b57      	ldr	r3, [pc, #348]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800623c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006248:	4953      	ldr	r1, [pc, #332]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800624a:	4313      	orrs	r3, r2
 800624c:	654b      	str	r3, [r1, #84]	; 0x54
 800624e:	e001      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006250:	7dfb      	ldrb	r3, [r7, #23]
 8006252:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625c:	2b00      	cmp	r3, #0
 800625e:	d04b      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006266:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800626a:	d02e      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800626c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006270:	d828      	bhi.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006276:	d02a      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8006278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800627c:	d822      	bhi.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800627e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006282:	d026      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006284:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006288:	d81c      	bhi.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800628a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800628e:	d010      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8006290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006294:	d816      	bhi.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006296:	2b00      	cmp	r3, #0
 8006298:	d01d      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800629a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800629e:	d111      	bne.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3304      	adds	r3, #4
 80062a4:	2100      	movs	r1, #0
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 fcc4 	bl	8006c34 <RCCEx_PLL2_Config>
 80062ac:	4603      	mov	r3, r0
 80062ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80062b0:	e012      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	3324      	adds	r3, #36	; 0x24
 80062b6:	2102      	movs	r1, #2
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 fd6d 	bl	8006d98 <RCCEx_PLL3_Config>
 80062be:	4603      	mov	r3, r0
 80062c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80062c2:	e009      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	75fb      	strb	r3, [r7, #23]
      break;
 80062c8:	e006      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80062ca:	bf00      	nop
 80062cc:	e004      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80062ce:	bf00      	nop
 80062d0:	e002      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80062d2:	bf00      	nop
 80062d4:	e000      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80062d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062d8:	7dfb      	ldrb	r3, [r7, #23]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10a      	bne.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062de:	4b2e      	ldr	r3, [pc, #184]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80062e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062ec:	492a      	ldr	r1, [pc, #168]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	658b      	str	r3, [r1, #88]	; 0x58
 80062f2:	e001      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f4:	7dfb      	ldrb	r3, [r7, #23]
 80062f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006300:	2b00      	cmp	r3, #0
 8006302:	d04d      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800630a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800630e:	d02e      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8006310:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006314:	d828      	bhi.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800631a:	d02a      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800631c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006320:	d822      	bhi.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006322:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006326:	d026      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006328:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800632c:	d81c      	bhi.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800632e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006332:	d010      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8006334:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006338:	d816      	bhi.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800633a:	2b00      	cmp	r3, #0
 800633c:	d01d      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800633e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006342:	d111      	bne.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3304      	adds	r3, #4
 8006348:	2100      	movs	r1, #0
 800634a:	4618      	mov	r0, r3
 800634c:	f000 fc72 	bl	8006c34 <RCCEx_PLL2_Config>
 8006350:	4603      	mov	r3, r0
 8006352:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006354:	e012      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3324      	adds	r3, #36	; 0x24
 800635a:	2102      	movs	r1, #2
 800635c:	4618      	mov	r0, r3
 800635e:	f000 fd1b 	bl	8006d98 <RCCEx_PLL3_Config>
 8006362:	4603      	mov	r3, r0
 8006364:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006366:	e009      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	75fb      	strb	r3, [r7, #23]
      break;
 800636c:	e006      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800636e:	bf00      	nop
 8006370:	e004      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006372:	bf00      	nop
 8006374:	e002      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006376:	bf00      	nop
 8006378:	e000      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800637a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800637c:	7dfb      	ldrb	r3, [r7, #23]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10c      	bne.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006382:	4b05      	ldr	r3, [pc, #20]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006386:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006390:	4901      	ldr	r1, [pc, #4]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006392:	4313      	orrs	r3, r2
 8006394:	658b      	str	r3, [r1, #88]	; 0x58
 8006396:	e003      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006398:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800639c:	7dfb      	ldrb	r3, [r7, #23]
 800639e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0308 	and.w	r3, r3, #8
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d018      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b4:	d10a      	bne.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	3324      	adds	r3, #36	; 0x24
 80063ba:	2102      	movs	r1, #2
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 fceb 	bl	8006d98 <RCCEx_PLL3_Config>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80063cc:	4b8a      	ldr	r3, [pc, #552]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80063ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063d8:	4987      	ldr	r1, [pc, #540]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0310 	and.w	r3, r3, #16
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d01a      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063f4:	d10a      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3324      	adds	r3, #36	; 0x24
 80063fa:	2102      	movs	r1, #2
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fccb 	bl	8006d98 <RCCEx_PLL3_Config>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800640c:	4b7a      	ldr	r3, [pc, #488]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800640e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006410:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800641a:	4977      	ldr	r1, [pc, #476]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800641c:	4313      	orrs	r3, r2
 800641e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d034      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006432:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006436:	d01d      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006438:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800643c:	d817      	bhi.n	800646e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006446:	d009      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006448:	e011      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	3304      	adds	r3, #4
 800644e:	2100      	movs	r1, #0
 8006450:	4618      	mov	r0, r3
 8006452:	f000 fbef 	bl	8006c34 <RCCEx_PLL2_Config>
 8006456:	4603      	mov	r3, r0
 8006458:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800645a:	e00c      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3324      	adds	r3, #36	; 0x24
 8006460:	2102      	movs	r1, #2
 8006462:	4618      	mov	r0, r3
 8006464:	f000 fc98 	bl	8006d98 <RCCEx_PLL3_Config>
 8006468:	4603      	mov	r3, r0
 800646a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800646c:	e003      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	75fb      	strb	r3, [r7, #23]
      break;
 8006472:	e000      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8006474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006476:	7dfb      	ldrb	r3, [r7, #23]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10a      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800647c:	4b5e      	ldr	r3, [pc, #376]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800647e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006480:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800648a:	495b      	ldr	r1, [pc, #364]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800648c:	4313      	orrs	r3, r2
 800648e:	658b      	str	r3, [r1, #88]	; 0x58
 8006490:	e001      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006492:	7dfb      	ldrb	r3, [r7, #23]
 8006494:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d033      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064ac:	d01c      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80064ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064b2:	d816      	bhi.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80064b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064b8:	d003      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80064ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064be:	d007      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80064c0:	e00f      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064c2:	4b4d      	ldr	r3, [pc, #308]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80064c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c6:	4a4c      	ldr	r2, [pc, #304]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80064c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80064ce:	e00c      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3324      	adds	r3, #36	; 0x24
 80064d4:	2101      	movs	r1, #1
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fc5e 	bl	8006d98 <RCCEx_PLL3_Config>
 80064dc:	4603      	mov	r3, r0
 80064de:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80064e0:	e003      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	75fb      	strb	r3, [r7, #23]
      break;
 80064e6:	e000      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80064e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10a      	bne.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064f0:	4b41      	ldr	r3, [pc, #260]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80064f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064fe:	493e      	ldr	r1, [pc, #248]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006500:	4313      	orrs	r3, r2
 8006502:	654b      	str	r3, [r1, #84]	; 0x54
 8006504:	e001      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006506:	7dfb      	ldrb	r3, [r7, #23]
 8006508:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d029      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800651e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006522:	d007      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006524:	e00f      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006526:	4b34      	ldr	r3, [pc, #208]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652a:	4a33      	ldr	r2, [pc, #204]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800652c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006530:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006532:	e00b      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3304      	adds	r3, #4
 8006538:	2102      	movs	r1, #2
 800653a:	4618      	mov	r0, r3
 800653c:	f000 fb7a 	bl	8006c34 <RCCEx_PLL2_Config>
 8006540:	4603      	mov	r3, r0
 8006542:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006544:	e002      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	75fb      	strb	r3, [r7, #23]
      break;
 800654a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800654c:	7dfb      	ldrb	r3, [r7, #23]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d109      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006552:	4b29      	ldr	r3, [pc, #164]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006556:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800655e:	4926      	ldr	r1, [pc, #152]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006560:	4313      	orrs	r3, r2
 8006562:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006564:	e001      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006566:	7dfb      	ldrb	r3, [r7, #23]
 8006568:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00a      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	3324      	adds	r3, #36	; 0x24
 800657a:	2102      	movs	r1, #2
 800657c:	4618      	mov	r0, r3
 800657e:	f000 fc0b 	bl	8006d98 <RCCEx_PLL3_Config>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d033      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800659c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065a0:	d017      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80065a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065a6:	d811      	bhi.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80065a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ac:	d013      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 80065ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065b2:	d80b      	bhi.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d010      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xd16>
 80065b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065bc:	d106      	bne.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065be:	4b0e      	ldr	r3, [pc, #56]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80065c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c2:	4a0d      	ldr	r2, [pc, #52]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80065c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80065ca:	e007      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	75fb      	strb	r3, [r7, #23]
      break;
 80065d0:	e004      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80065d2:	bf00      	nop
 80065d4:	e002      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80065d6:	bf00      	nop
 80065d8:	e000      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80065da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065dc:	7dfb      	ldrb	r3, [r7, #23]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10c      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065e2:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80065e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065ee:	4902      	ldr	r1, [pc, #8]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	654b      	str	r3, [r1, #84]	; 0x54
 80065f4:	e004      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80065f6:	bf00      	nop
 80065f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fc:	7dfb      	ldrb	r3, [r7, #23]
 80065fe:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d008      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800660c:	4b29      	ldr	r3, [pc, #164]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800660e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006610:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006618:	4926      	ldr	r1, [pc, #152]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800661a:	4313      	orrs	r3, r2
 800661c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d008      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800662a:	4b22      	ldr	r3, [pc, #136]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800662c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800662e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006636:	491f      	ldr	r1, [pc, #124]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006638:	4313      	orrs	r3, r2
 800663a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00d      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006648:	4b1a      	ldr	r3, [pc, #104]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	4a19      	ldr	r2, [pc, #100]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800664e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006652:	6113      	str	r3, [r2, #16]
 8006654:	4b17      	ldr	r3, [pc, #92]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006656:	691a      	ldr	r2, [r3, #16]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800665e:	4915      	ldr	r1, [pc, #84]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006660:	4313      	orrs	r3, r2
 8006662:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	da08      	bge.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800666c:	4b11      	ldr	r3, [pc, #68]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800666e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006670:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006678:	490e      	ldr	r1, [pc, #56]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800667a:	4313      	orrs	r3, r2
 800667c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d009      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800668a:	4b0a      	ldr	r3, [pc, #40]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800668c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006698:	4906      	ldr	r1, [pc, #24]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800669a:	4313      	orrs	r3, r2
 800669c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800669e:	7dbb      	ldrb	r3, [r7, #22]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	e000      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	58024400 	.word	0x58024400

080066b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80066bc:	f7ff f864 	bl	8005788 <HAL_RCC_GetHCLKFreq>
 80066c0:	4602      	mov	r2, r0
 80066c2:	4b06      	ldr	r3, [pc, #24]	; (80066dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	091b      	lsrs	r3, r3, #4
 80066c8:	f003 0307 	and.w	r3, r3, #7
 80066cc:	4904      	ldr	r1, [pc, #16]	; (80066e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80066ce:	5ccb      	ldrb	r3, [r1, r3]
 80066d0:	f003 031f 	and.w	r3, r3, #31
 80066d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80066d8:	4618      	mov	r0, r3
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	58024400 	.word	0x58024400
 80066e0:	08015708 	.word	0x08015708

080066e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b089      	sub	sp, #36	; 0x24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066ec:	4ba1      	ldr	r3, [pc, #644]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f0:	f003 0303 	and.w	r3, r3, #3
 80066f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80066f6:	4b9f      	ldr	r3, [pc, #636]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fa:	0b1b      	lsrs	r3, r3, #12
 80066fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006700:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006702:	4b9c      	ldr	r3, [pc, #624]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006706:	091b      	lsrs	r3, r3, #4
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800670e:	4b99      	ldr	r3, [pc, #612]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006712:	08db      	lsrs	r3, r3, #3
 8006714:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	fb02 f303 	mul.w	r3, r2, r3
 800671e:	ee07 3a90 	vmov	s15, r3
 8006722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006726:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 8111 	beq.w	8006954 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	2b02      	cmp	r3, #2
 8006736:	f000 8083 	beq.w	8006840 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	2b02      	cmp	r3, #2
 800673e:	f200 80a1 	bhi.w	8006884 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d056      	beq.n	80067fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800674e:	e099      	b.n	8006884 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006750:	4b88      	ldr	r3, [pc, #544]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0320 	and.w	r3, r3, #32
 8006758:	2b00      	cmp	r3, #0
 800675a:	d02d      	beq.n	80067b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800675c:	4b85      	ldr	r3, [pc, #532]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	08db      	lsrs	r3, r3, #3
 8006762:	f003 0303 	and.w	r3, r3, #3
 8006766:	4a84      	ldr	r2, [pc, #528]	; (8006978 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006768:	fa22 f303 	lsr.w	r3, r2, r3
 800676c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	ee07 3a90 	vmov	s15, r3
 8006774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	ee07 3a90 	vmov	s15, r3
 800677e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006786:	4b7b      	ldr	r3, [pc, #492]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800678e:	ee07 3a90 	vmov	s15, r3
 8006792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006796:	ed97 6a03 	vldr	s12, [r7, #12]
 800679a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800697c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800679e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80067b6:	e087      	b.n	80068c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	ee07 3a90 	vmov	s15, r3
 80067be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006980 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80067c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ca:	4b6a      	ldr	r3, [pc, #424]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d2:	ee07 3a90 	vmov	s15, r3
 80067d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067da:	ed97 6a03 	vldr	s12, [r7, #12]
 80067de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800697c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067fa:	e065      	b.n	80068c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	ee07 3a90 	vmov	s15, r3
 8006802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006806:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006984 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800680a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800680e:	4b59      	ldr	r3, [pc, #356]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006816:	ee07 3a90 	vmov	s15, r3
 800681a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800681e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006822:	eddf 5a56 	vldr	s11, [pc, #344]	; 800697c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800682a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800682e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800683a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800683e:	e043      	b.n	80068c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	ee07 3a90 	vmov	s15, r3
 8006846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800684a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006988 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800684e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006852:	4b48      	ldr	r3, [pc, #288]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800685a:	ee07 3a90 	vmov	s15, r3
 800685e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006862:	ed97 6a03 	vldr	s12, [r7, #12]
 8006866:	eddf 5a45 	vldr	s11, [pc, #276]	; 800697c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800686a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800686e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800687a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800687e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006882:	e021      	b.n	80068c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	ee07 3a90 	vmov	s15, r3
 800688a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800688e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006984 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006896:	4b37      	ldr	r3, [pc, #220]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800689e:	ee07 3a90 	vmov	s15, r3
 80068a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80068aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800697c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80068c8:	4b2a      	ldr	r3, [pc, #168]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068cc:	0a5b      	lsrs	r3, r3, #9
 80068ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068d2:	ee07 3a90 	vmov	s15, r3
 80068d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80068e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068ee:	ee17 2a90 	vmov	r2, s15
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80068f6:	4b1f      	ldr	r3, [pc, #124]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fa:	0c1b      	lsrs	r3, r3, #16
 80068fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006900:	ee07 3a90 	vmov	s15, r3
 8006904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006908:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800690c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006910:	edd7 6a07 	vldr	s13, [r7, #28]
 8006914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800691c:	ee17 2a90 	vmov	r2, s15
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006924:	4b13      	ldr	r3, [pc, #76]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006928:	0e1b      	lsrs	r3, r3, #24
 800692a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800692e:	ee07 3a90 	vmov	s15, r3
 8006932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006936:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800693a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800693e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006942:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800694a:	ee17 2a90 	vmov	r2, s15
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006952:	e008      	b.n	8006966 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	609a      	str	r2, [r3, #8]
}
 8006966:	bf00      	nop
 8006968:	3724      	adds	r7, #36	; 0x24
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	58024400 	.word	0x58024400
 8006978:	03d09000 	.word	0x03d09000
 800697c:	46000000 	.word	0x46000000
 8006980:	4c742400 	.word	0x4c742400
 8006984:	4a742400 	.word	0x4a742400
 8006988:	4af42400 	.word	0x4af42400

0800698c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800698c:	b480      	push	{r7}
 800698e:	b089      	sub	sp, #36	; 0x24
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006994:	4ba1      	ldr	r3, [pc, #644]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006998:	f003 0303 	and.w	r3, r3, #3
 800699c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800699e:	4b9f      	ldr	r3, [pc, #636]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a2:	0d1b      	lsrs	r3, r3, #20
 80069a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80069aa:	4b9c      	ldr	r3, [pc, #624]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ae:	0a1b      	lsrs	r3, r3, #8
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80069b6:	4b99      	ldr	r3, [pc, #612]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ba:	08db      	lsrs	r3, r3, #3
 80069bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	fb02 f303 	mul.w	r3, r2, r3
 80069c6:	ee07 3a90 	vmov	s15, r3
 80069ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 8111 	beq.w	8006bfc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	2b02      	cmp	r3, #2
 80069de:	f000 8083 	beq.w	8006ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	f200 80a1 	bhi.w	8006b2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d056      	beq.n	8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80069f6:	e099      	b.n	8006b2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069f8:	4b88      	ldr	r3, [pc, #544]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0320 	and.w	r3, r3, #32
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d02d      	beq.n	8006a60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a04:	4b85      	ldr	r3, [pc, #532]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	08db      	lsrs	r3, r3, #3
 8006a0a:	f003 0303 	and.w	r3, r3, #3
 8006a0e:	4a84      	ldr	r2, [pc, #528]	; (8006c20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006a10:	fa22 f303 	lsr.w	r3, r2, r3
 8006a14:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	ee07 3a90 	vmov	s15, r3
 8006a1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	ee07 3a90 	vmov	s15, r3
 8006a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a2e:	4b7b      	ldr	r3, [pc, #492]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a36:	ee07 3a90 	vmov	s15, r3
 8006a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a42:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a5a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006a5e:	e087      	b.n	8006b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	ee07 3a90 	vmov	s15, r3
 8006a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006c28 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a72:	4b6a      	ldr	r3, [pc, #424]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a7a:	ee07 3a90 	vmov	s15, r3
 8006a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a86:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006aa2:	e065      	b.n	8006b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	ee07 3a90 	vmov	s15, r3
 8006aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006c2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ab6:	4b59      	ldr	r3, [pc, #356]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006abe:	ee07 3a90 	vmov	s15, r3
 8006ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ae2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ae6:	e043      	b.n	8006b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	ee07 3a90 	vmov	s15, r3
 8006aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006afa:	4b48      	ldr	r3, [pc, #288]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b2a:	e021      	b.n	8006b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006c2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b3e:	4b37      	ldr	r3, [pc, #220]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b46:	ee07 3a90 	vmov	s15, r3
 8006b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b52:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006b70:	4b2a      	ldr	r3, [pc, #168]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b74:	0a5b      	lsrs	r3, r3, #9
 8006b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b96:	ee17 2a90 	vmov	r2, s15
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006b9e:	4b1f      	ldr	r3, [pc, #124]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba2:	0c1b      	lsrs	r3, r3, #16
 8006ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ba8:	ee07 3a90 	vmov	s15, r3
 8006bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bc4:	ee17 2a90 	vmov	r2, s15
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006bcc:	4b13      	ldr	r3, [pc, #76]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd0:	0e1b      	lsrs	r3, r3, #24
 8006bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006be2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006be6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bf2:	ee17 2a90 	vmov	r2, s15
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006bfa:	e008      	b.n	8006c0e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	609a      	str	r2, [r3, #8]
}
 8006c0e:	bf00      	nop
 8006c10:	3724      	adds	r7, #36	; 0x24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	58024400 	.word	0x58024400
 8006c20:	03d09000 	.word	0x03d09000
 8006c24:	46000000 	.word	0x46000000
 8006c28:	4c742400 	.word	0x4c742400
 8006c2c:	4a742400 	.word	0x4a742400
 8006c30:	4af42400 	.word	0x4af42400

08006c34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c42:	4b53      	ldr	r3, [pc, #332]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c46:	f003 0303 	and.w	r3, r3, #3
 8006c4a:	2b03      	cmp	r3, #3
 8006c4c:	d101      	bne.n	8006c52 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e099      	b.n	8006d86 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006c52:	4b4f      	ldr	r3, [pc, #316]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a4e      	ldr	r2, [pc, #312]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006c58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c5e:	f7fb f92d 	bl	8001ebc <HAL_GetTick>
 8006c62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c64:	e008      	b.n	8006c78 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006c66:	f7fb f929 	bl	8001ebc <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d901      	bls.n	8006c78 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e086      	b.n	8006d86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c78:	4b45      	ldr	r3, [pc, #276]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1f0      	bne.n	8006c66 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006c84:	4b42      	ldr	r3, [pc, #264]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	031b      	lsls	r3, r3, #12
 8006c92:	493f      	ldr	r1, [pc, #252]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	628b      	str	r3, [r1, #40]	; 0x28
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	025b      	lsls	r3, r3, #9
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	431a      	orrs	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	041b      	lsls	r3, r3, #16
 8006cb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	061b      	lsls	r3, r3, #24
 8006cc4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006cc8:	4931      	ldr	r1, [pc, #196]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006cce:	4b30      	ldr	r3, [pc, #192]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	492d      	ldr	r1, [pc, #180]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006ce0:	4b2b      	ldr	r3, [pc, #172]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	f023 0220 	bic.w	r2, r3, #32
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	4928      	ldr	r1, [pc, #160]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006cf2:	4b27      	ldr	r3, [pc, #156]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf6:	4a26      	ldr	r2, [pc, #152]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006cf8:	f023 0310 	bic.w	r3, r3, #16
 8006cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006cfe:	4b24      	ldr	r3, [pc, #144]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d02:	4b24      	ldr	r3, [pc, #144]	; (8006d94 <RCCEx_PLL2_Config+0x160>)
 8006d04:	4013      	ands	r3, r2
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	69d2      	ldr	r2, [r2, #28]
 8006d0a:	00d2      	lsls	r2, r2, #3
 8006d0c:	4920      	ldr	r1, [pc, #128]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006d12:	4b1f      	ldr	r3, [pc, #124]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d16:	4a1e      	ldr	r2, [pc, #120]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d18:	f043 0310 	orr.w	r3, r3, #16
 8006d1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d106      	bne.n	8006d32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006d24:	4b1a      	ldr	r3, [pc, #104]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	4a19      	ldr	r2, [pc, #100]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d30:	e00f      	b.n	8006d52 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d106      	bne.n	8006d46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006d38:	4b15      	ldr	r3, [pc, #84]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3c:	4a14      	ldr	r2, [pc, #80]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d44:	e005      	b.n	8006d52 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006d46:	4b12      	ldr	r3, [pc, #72]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4a:	4a11      	ldr	r2, [pc, #68]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006d52:	4b0f      	ldr	r3, [pc, #60]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a0e      	ldr	r2, [pc, #56]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d5e:	f7fb f8ad 	bl	8001ebc <HAL_GetTick>
 8006d62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d64:	e008      	b.n	8006d78 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006d66:	f7fb f8a9 	bl	8001ebc <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d901      	bls.n	8006d78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e006      	b.n	8006d86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d78:	4b05      	ldr	r3, [pc, #20]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d0f0      	beq.n	8006d66 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	58024400 	.word	0x58024400
 8006d94:	ffff0007 	.word	0xffff0007

08006d98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006da6:	4b53      	ldr	r3, [pc, #332]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006daa:	f003 0303 	and.w	r3, r3, #3
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d101      	bne.n	8006db6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e099      	b.n	8006eea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006db6:	4b4f      	ldr	r3, [pc, #316]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a4e      	ldr	r2, [pc, #312]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dc2:	f7fb f87b 	bl	8001ebc <HAL_GetTick>
 8006dc6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006dc8:	e008      	b.n	8006ddc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006dca:	f7fb f877 	bl	8001ebc <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d901      	bls.n	8006ddc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e086      	b.n	8006eea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ddc:	4b45      	ldr	r3, [pc, #276]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1f0      	bne.n	8006dca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006de8:	4b42      	ldr	r3, [pc, #264]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	051b      	lsls	r3, r3, #20
 8006df6:	493f      	ldr	r1, [pc, #252]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	628b      	str	r3, [r1, #40]	; 0x28
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	025b      	lsls	r3, r3, #9
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	431a      	orrs	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	041b      	lsls	r3, r3, #16
 8006e1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	3b01      	subs	r3, #1
 8006e26:	061b      	lsls	r3, r3, #24
 8006e28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e2c:	4931      	ldr	r1, [pc, #196]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006e32:	4b30      	ldr	r3, [pc, #192]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	492d      	ldr	r1, [pc, #180]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006e44:	4b2b      	ldr	r3, [pc, #172]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	4928      	ldr	r1, [pc, #160]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006e56:	4b27      	ldr	r3, [pc, #156]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5a:	4a26      	ldr	r2, [pc, #152]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006e62:	4b24      	ldr	r3, [pc, #144]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e66:	4b24      	ldr	r3, [pc, #144]	; (8006ef8 <RCCEx_PLL3_Config+0x160>)
 8006e68:	4013      	ands	r3, r2
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	69d2      	ldr	r2, [r2, #28]
 8006e6e:	00d2      	lsls	r2, r2, #3
 8006e70:	4920      	ldr	r1, [pc, #128]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006e76:	4b1f      	ldr	r3, [pc, #124]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7a:	4a1e      	ldr	r2, [pc, #120]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d106      	bne.n	8006e96 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006e88:	4b1a      	ldr	r3, [pc, #104]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	4a19      	ldr	r2, [pc, #100]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e94:	e00f      	b.n	8006eb6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d106      	bne.n	8006eaa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006e9c:	4b15      	ldr	r3, [pc, #84]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea0:	4a14      	ldr	r2, [pc, #80]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006ea2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006ea6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ea8:	e005      	b.n	8006eb6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006eaa:	4b12      	ldr	r3, [pc, #72]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eae:	4a11      	ldr	r2, [pc, #68]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006eb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006eb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006eb6:	4b0f      	ldr	r3, [pc, #60]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a0e      	ldr	r2, [pc, #56]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ec2:	f7fa fffb 	bl	8001ebc <HAL_GetTick>
 8006ec6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ec8:	e008      	b.n	8006edc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006eca:	f7fa fff7 	bl	8001ebc <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d901      	bls.n	8006edc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e006      	b.n	8006eea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006edc:	4b05      	ldr	r3, [pc, #20]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d0f0      	beq.n	8006eca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	58024400 	.word	0x58024400
 8006ef8:	ffff0007 	.word	0xffff0007

08006efc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e0f1      	b.n	80070f2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a78      	ldr	r2, [pc, #480]	; (80070fc <HAL_SPI_Init+0x200>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d00f      	beq.n	8006f3e <HAL_SPI_Init+0x42>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a77      	ldr	r2, [pc, #476]	; (8007100 <HAL_SPI_Init+0x204>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d00a      	beq.n	8006f3e <HAL_SPI_Init+0x42>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a75      	ldr	r2, [pc, #468]	; (8007104 <HAL_SPI_Init+0x208>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d005      	beq.n	8006f3e <HAL_SPI_Init+0x42>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	2b0f      	cmp	r3, #15
 8006f38:	d901      	bls.n	8006f3e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e0d9      	b.n	80070f2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 ffc4 	bl	8007ecc <SPI_GetPacketSize>
 8006f44:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a6c      	ldr	r2, [pc, #432]	; (80070fc <HAL_SPI_Init+0x200>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d00c      	beq.n	8006f6a <HAL_SPI_Init+0x6e>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a6a      	ldr	r2, [pc, #424]	; (8007100 <HAL_SPI_Init+0x204>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d007      	beq.n	8006f6a <HAL_SPI_Init+0x6e>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a69      	ldr	r2, [pc, #420]	; (8007104 <HAL_SPI_Init+0x208>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d002      	beq.n	8006f6a <HAL_SPI_Init+0x6e>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b08      	cmp	r3, #8
 8006f68:	d811      	bhi.n	8006f8e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006f6e:	4a63      	ldr	r2, [pc, #396]	; (80070fc <HAL_SPI_Init+0x200>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d009      	beq.n	8006f88 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a61      	ldr	r2, [pc, #388]	; (8007100 <HAL_SPI_Init+0x204>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d004      	beq.n	8006f88 <HAL_SPI_Init+0x8c>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a60      	ldr	r2, [pc, #384]	; (8007104 <HAL_SPI_Init+0x208>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d104      	bne.n	8006f92 <HAL_SPI_Init+0x96>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b10      	cmp	r3, #16
 8006f8c:	d901      	bls.n	8006f92 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e0af      	b.n	80070f2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d106      	bne.n	8006fac <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7fa fb84 	bl	80016b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f022 0201 	bic.w	r2, r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006fce:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fd8:	d119      	bne.n	800700e <HAL_SPI_Init+0x112>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fe2:	d103      	bne.n	8006fec <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d008      	beq.n	8006ffe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10c      	bne.n	800700e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006ff8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ffc:	d107      	bne.n	800700e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800700c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	69da      	ldr	r2, [r3, #28]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007016:	431a      	orrs	r2, r3
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	431a      	orrs	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007020:	ea42 0103 	orr.w	r1, r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	68da      	ldr	r2, [r3, #12]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	431a      	orrs	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703e:	431a      	orrs	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	431a      	orrs	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	431a      	orrs	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	431a      	orrs	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	431a      	orrs	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	431a      	orrs	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007062:	431a      	orrs	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	431a      	orrs	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800706e:	ea42 0103 	orr.w	r1, r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d113      	bne.n	80070ae <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007098:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070ac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0201 	bic.w	r2, r2, #1
 80070bc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	430a      	orrs	r2, r1
 80070de:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	40013000 	.word	0x40013000
 8007100:	40003800 	.word	0x40003800
 8007104:	40003c00 	.word	0x40003c00

08007108 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b08a      	sub	sp, #40	; 0x28
 800710c:	af02      	add	r7, sp, #8
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	603b      	str	r3, [r7, #0]
 8007114:	4613      	mov	r3, r2
 8007116:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3320      	adds	r3, #32
 800711e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800712a:	2b01      	cmp	r3, #1
 800712c:	d101      	bne.n	8007132 <HAL_SPI_Transmit+0x2a>
 800712e:	2302      	movs	r3, #2
 8007130:	e1d7      	b.n	80074e2 <HAL_SPI_Transmit+0x3da>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800713a:	f7fa febf 	bl	8001ebc <HAL_GetTick>
 800713e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b01      	cmp	r3, #1
 800714a:	d007      	beq.n	800715c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800714c:	2302      	movs	r3, #2
 800714e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007158:	7efb      	ldrb	r3, [r7, #27]
 800715a:	e1c2      	b.n	80074e2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <HAL_SPI_Transmit+0x60>
 8007162:	88fb      	ldrh	r3, [r7, #6]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d107      	bne.n	8007178 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007174:	7efb      	ldrb	r3, [r7, #27]
 8007176:	e1b4      	b.n	80074e2 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2203      	movs	r2, #3
 800717c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	88fa      	ldrh	r2, [r7, #6]
 8007192:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	88fa      	ldrh	r2, [r7, #6]
 800719a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80071c8:	d107      	bne.n	80071da <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	4b96      	ldr	r3, [pc, #600]	; (800743c <HAL_SPI_Transmit+0x334>)
 80071e2:	4013      	ands	r3, r2
 80071e4:	88f9      	ldrh	r1, [r7, #6]
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	6812      	ldr	r2, [r2, #0]
 80071ea:	430b      	orrs	r3, r1
 80071ec:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f042 0201 	orr.w	r2, r2, #1
 80071fc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007206:	d107      	bne.n	8007218 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007216:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	2b0f      	cmp	r3, #15
 800721e:	d947      	bls.n	80072b0 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007220:	e03f      	b.n	80072a2 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b02      	cmp	r3, #2
 800722e:	d114      	bne.n	800725a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6812      	ldr	r2, [r2, #0]
 800723a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007240:	1d1a      	adds	r2, r3, #4
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800724c:	b29b      	uxth	r3, r3
 800724e:	3b01      	subs	r3, #1
 8007250:	b29a      	uxth	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007258:	e023      	b.n	80072a2 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800725a:	f7fa fe2f 	bl	8001ebc <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	429a      	cmp	r2, r3
 8007268:	d803      	bhi.n	8007272 <HAL_SPI_Transmit+0x16a>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007270:	d102      	bne.n	8007278 <HAL_SPI_Transmit+0x170>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d114      	bne.n	80072a2 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f000 fd59 	bl	8007d30 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800728c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e11f      	b.n	80074e2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1b9      	bne.n	8007222 <HAL_SPI_Transmit+0x11a>
 80072ae:	e0f2      	b.n	8007496 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	2b07      	cmp	r3, #7
 80072b6:	f240 80e7 	bls.w	8007488 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80072ba:	e05d      	b.n	8007378 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d132      	bne.n	8007330 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d918      	bls.n	8007308 <HAL_SPI_Transmit+0x200>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d014      	beq.n	8007308 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	6812      	ldr	r2, [r2, #0]
 80072e8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ee:	1d1a      	adds	r2, r3, #4
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	3b02      	subs	r3, #2
 80072fe:	b29a      	uxth	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007306:	e037      	b.n	8007378 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800730c:	881a      	ldrh	r2, [r3, #0]
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007316:	1c9a      	adds	r2, r3, #2
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007322:	b29b      	uxth	r3, r3
 8007324:	3b01      	subs	r3, #1
 8007326:	b29a      	uxth	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800732e:	e023      	b.n	8007378 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007330:	f7fa fdc4 	bl	8001ebc <HAL_GetTick>
 8007334:	4602      	mov	r2, r0
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	429a      	cmp	r2, r3
 800733e:	d803      	bhi.n	8007348 <HAL_SPI_Transmit+0x240>
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007346:	d102      	bne.n	800734e <HAL_SPI_Transmit+0x246>
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d114      	bne.n	8007378 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 fcee 	bl	8007d30 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007362:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e0b4      	b.n	80074e2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800737e:	b29b      	uxth	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	d19b      	bne.n	80072bc <HAL_SPI_Transmit+0x1b4>
 8007384:	e087      	b.n	8007496 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	695b      	ldr	r3, [r3, #20]
 800738c:	f003 0302 	and.w	r3, r3, #2
 8007390:	2b02      	cmp	r3, #2
 8007392:	d155      	bne.n	8007440 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800739a:	b29b      	uxth	r3, r3
 800739c:	2b03      	cmp	r3, #3
 800739e:	d918      	bls.n	80073d2 <HAL_SPI_Transmit+0x2ca>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a4:	2b40      	cmp	r3, #64	; 0x40
 80073a6:	d914      	bls.n	80073d2 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6812      	ldr	r2, [r2, #0]
 80073b2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b8:	1d1a      	adds	r2, r3, #4
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	3b04      	subs	r3, #4
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80073d0:	e05a      	b.n	8007488 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80073d8:	b29b      	uxth	r3, r3
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d917      	bls.n	800740e <HAL_SPI_Transmit+0x306>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d013      	beq.n	800740e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ea:	881a      	ldrh	r2, [r3, #0]
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f4:	1c9a      	adds	r2, r3, #2
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007400:	b29b      	uxth	r3, r3
 8007402:	3b02      	subs	r3, #2
 8007404:	b29a      	uxth	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800740c:	e03c      	b.n	8007488 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3320      	adds	r3, #32
 8007418:	7812      	ldrb	r2, [r2, #0]
 800741a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007420:	1c5a      	adds	r2, r3, #1
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800742c:	b29b      	uxth	r3, r3
 800742e:	3b01      	subs	r3, #1
 8007430:	b29a      	uxth	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007438:	e026      	b.n	8007488 <HAL_SPI_Transmit+0x380>
 800743a:	bf00      	nop
 800743c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007440:	f7fa fd3c 	bl	8001ebc <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	429a      	cmp	r2, r3
 800744e:	d803      	bhi.n	8007458 <HAL_SPI_Transmit+0x350>
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007456:	d102      	bne.n	800745e <HAL_SPI_Transmit+0x356>
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d114      	bne.n	8007488 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f000 fc66 	bl	8007d30 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007472:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e02c      	b.n	80074e2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800748e:	b29b      	uxth	r3, r3
 8007490:	2b00      	cmp	r3, #0
 8007492:	f47f af78 	bne.w	8007386 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2200      	movs	r2, #0
 800749e:	2108      	movs	r1, #8
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 fce5 	bl	8007e70 <SPI_WaitOnFlagUntilTimeout>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d007      	beq.n	80074bc <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074b2:	f043 0220 	orr.w	r2, r3, #32
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 fc37 	bl	8007d30 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e000      	b.n	80074e2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80074e0:	7efb      	ldrb	r3, [r7, #27]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3720      	adds	r7, #32
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop

080074ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08e      	sub	sp, #56	; 0x38
 80074f0:	af02      	add	r7, sp, #8
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3320      	adds	r3, #32
 8007506:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3330      	adds	r3, #48	; 0x30
 800750e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007516:	2b01      	cmp	r3, #1
 8007518:	d101      	bne.n	800751e <HAL_SPI_TransmitReceive+0x32>
 800751a:	2302      	movs	r3, #2
 800751c:	e209      	b.n	8007932 <HAL_SPI_TransmitReceive+0x446>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007526:	f7fa fcc9 	bl	8001ebc <HAL_GetTick>
 800752a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800752c:	887b      	ldrh	r3, [r7, #2]
 800752e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8007530:	887b      	ldrh	r3, [r7, #2]
 8007532:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800753a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007542:	7efb      	ldrb	r3, [r7, #27]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d014      	beq.n	8007572 <HAL_SPI_TransmitReceive+0x86>
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800754e:	d106      	bne.n	800755e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8007554:	2b00      	cmp	r3, #0
 8007556:	d102      	bne.n	800755e <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8007558:	7efb      	ldrb	r3, [r7, #27]
 800755a:	2b04      	cmp	r3, #4
 800755c:	d009      	beq.n	8007572 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800755e:	2302      	movs	r3, #2
 8007560:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800756c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007570:	e1df      	b.n	8007932 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d005      	beq.n	8007584 <HAL_SPI_TransmitReceive+0x98>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <HAL_SPI_TransmitReceive+0x98>
 800757e:	887b      	ldrh	r3, [r7, #2]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d109      	bne.n	8007598 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007592:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007596:	e1cc      	b.n	8007932 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b04      	cmp	r3, #4
 80075a2:	d003      	beq.n	80075ac <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2205      	movs	r2, #5
 80075a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	887a      	ldrh	r2, [r7, #2]
 80075be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	887a      	ldrh	r2, [r7, #2]
 80075c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	887a      	ldrh	r2, [r7, #2]
 80075d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	887a      	ldrh	r2, [r7, #2]
 80075dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	685a      	ldr	r2, [r3, #4]
 80075f2:	4b82      	ldr	r3, [pc, #520]	; (80077fc <HAL_SPI_TransmitReceive+0x310>)
 80075f4:	4013      	ands	r3, r2
 80075f6:	8879      	ldrh	r1, [r7, #2]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	6812      	ldr	r2, [r2, #0]
 80075fc:	430b      	orrs	r3, r1
 80075fe:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0201 	orr.w	r2, r2, #1
 800760e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007618:	d107      	bne.n	800762a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007628:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	2b0f      	cmp	r3, #15
 8007630:	d970      	bls.n	8007714 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007632:	e068      	b.n	8007706 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b02      	cmp	r3, #2
 8007640:	d11a      	bne.n	8007678 <HAL_SPI_TransmitReceive+0x18c>
 8007642:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007644:	2b00      	cmp	r3, #0
 8007646:	d017      	beq.n	8007678 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6812      	ldr	r2, [r2, #0]
 8007652:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007658:	1d1a      	adds	r2, r3, #4
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007664:	b29b      	uxth	r3, r3
 8007666:	3b01      	subs	r3, #1
 8007668:	b29a      	uxth	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007676:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	695a      	ldr	r2, [r3, #20]
 800767e:	f248 0308 	movw	r3, #32776	; 0x8008
 8007682:	4013      	ands	r3, r2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d01a      	beq.n	80076be <HAL_SPI_TransmitReceive+0x1d2>
 8007688:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800768a:	2b00      	cmp	r3, #0
 800768c:	d017      	beq.n	80076be <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007696:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007698:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800769e:	1d1a      	adds	r2, r3, #4
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	3b01      	subs	r3, #1
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80076bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076be:	f7fa fbfd 	bl	8001ebc <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d803      	bhi.n	80076d6 <HAL_SPI_TransmitReceive+0x1ea>
 80076ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d4:	d102      	bne.n	80076dc <HAL_SPI_TransmitReceive+0x1f0>
 80076d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d114      	bne.n	8007706 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 fb27 	bl	8007d30 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e115      	b.n	8007932 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007706:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007708:	2b00      	cmp	r3, #0
 800770a:	d193      	bne.n	8007634 <HAL_SPI_TransmitReceive+0x148>
 800770c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800770e:	2b00      	cmp	r3, #0
 8007710:	d190      	bne.n	8007634 <HAL_SPI_TransmitReceive+0x148>
 8007712:	e0e7      	b.n	80078e4 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	2b07      	cmp	r3, #7
 800771a:	f240 80dd 	bls.w	80078d8 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800771e:	e066      	b.n	80077ee <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	f003 0302 	and.w	r3, r3, #2
 800772a:	2b02      	cmp	r3, #2
 800772c:	d119      	bne.n	8007762 <HAL_SPI_TransmitReceive+0x276>
 800772e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007730:	2b00      	cmp	r3, #0
 8007732:	d016      	beq.n	8007762 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007738:	881a      	ldrh	r2, [r3, #0]
 800773a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007742:	1c9a      	adds	r2, r3, #2
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800774e:	b29b      	uxth	r3, r3
 8007750:	3b01      	subs	r3, #1
 8007752:	b29a      	uxth	r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007760:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	2b01      	cmp	r3, #1
 800776e:	d11a      	bne.n	80077a6 <HAL_SPI_TransmitReceive+0x2ba>
 8007770:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007772:	2b00      	cmp	r3, #0
 8007774:	d017      	beq.n	80077a6 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800777a:	6a3a      	ldr	r2, [r7, #32]
 800777c:	8812      	ldrh	r2, [r2, #0]
 800777e:	b292      	uxth	r2, r2
 8007780:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007786:	1c9a      	adds	r2, r3, #2
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007792:	b29b      	uxth	r3, r3
 8007794:	3b01      	subs	r3, #1
 8007796:	b29a      	uxth	r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80077a4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077a6:	f7fa fb89 	bl	8001ebc <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d803      	bhi.n	80077be <HAL_SPI_TransmitReceive+0x2d2>
 80077b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077bc:	d102      	bne.n	80077c4 <HAL_SPI_TransmitReceive+0x2d8>
 80077be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d114      	bne.n	80077ee <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f000 fab3 	bl	8007d30 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e0a1      	b.n	8007932 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80077ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d195      	bne.n	8007720 <HAL_SPI_TransmitReceive+0x234>
 80077f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d192      	bne.n	8007720 <HAL_SPI_TransmitReceive+0x234>
 80077fa:	e073      	b.n	80078e4 <HAL_SPI_TransmitReceive+0x3f8>
 80077fc:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b02      	cmp	r3, #2
 800780c:	d11b      	bne.n	8007846 <HAL_SPI_TransmitReceive+0x35a>
 800780e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007810:	2b00      	cmp	r3, #0
 8007812:	d018      	beq.n	8007846 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3320      	adds	r3, #32
 800781e:	7812      	ldrb	r2, [r2, #0]
 8007820:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007826:	1c5a      	adds	r2, r3, #1
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007832:	b29b      	uxth	r3, r3
 8007834:	3b01      	subs	r3, #1
 8007836:	b29a      	uxth	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007844:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b01      	cmp	r3, #1
 8007852:	d11d      	bne.n	8007890 <HAL_SPI_TransmitReceive+0x3a4>
 8007854:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007856:	2b00      	cmp	r3, #0
 8007858:	d01a      	beq.n	8007890 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007866:	7812      	ldrb	r2, [r2, #0]
 8007868:	b2d2      	uxtb	r2, r2
 800786a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007870:	1c5a      	adds	r2, r3, #1
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800787c:	b29b      	uxth	r3, r3
 800787e:	3b01      	subs	r3, #1
 8007880:	b29a      	uxth	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800788e:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007890:	f7fa fb14 	bl	8001ebc <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800789c:	429a      	cmp	r2, r3
 800789e:	d803      	bhi.n	80078a8 <HAL_SPI_TransmitReceive+0x3bc>
 80078a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a6:	d102      	bne.n	80078ae <HAL_SPI_TransmitReceive+0x3c2>
 80078a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d114      	bne.n	80078d8 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f000 fa3e 	bl	8007d30 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e02c      	b.n	8007932 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80078d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d190      	bne.n	8007800 <HAL_SPI_TransmitReceive+0x314>
 80078de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d18d      	bne.n	8007800 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80078e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	2200      	movs	r2, #0
 80078ec:	2108      	movs	r1, #8
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 fabe 	bl	8007e70 <SPI_WaitOnFlagUntilTimeout>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d007      	beq.n	800790a <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007900:	f043 0220 	orr.w	r2, r3, #32
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f000 fa10 	bl	8007d30 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e001      	b.n	8007932 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800792e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007932:	4618      	mov	r0, r3
 8007934:	3730      	adds	r7, #48	; 0x30
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop

0800793c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b08a      	sub	sp, #40	; 0x28
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007954:	6a3a      	ldr	r2, [r7, #32]
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	4013      	ands	r3, r2
 800795a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007964:	2300      	movs	r3, #0
 8007966:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800796e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3330      	adds	r3, #48	; 0x30
 8007976:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800797e:	2b00      	cmp	r3, #0
 8007980:	d113      	bne.n	80079aa <HAL_SPI_IRQHandler+0x6e>
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	f003 0320 	and.w	r3, r3, #32
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10e      	bne.n	80079aa <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007992:	2b00      	cmp	r3, #0
 8007994:	d009      	beq.n	80079aa <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	4798      	blx	r3
    handled = 1UL;
 80079a6:	2301      	movs	r3, #1
 80079a8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10f      	bne.n	80079d4 <HAL_SPI_IRQHandler+0x98>
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00a      	beq.n	80079d4 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d105      	bne.n	80079d4 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	4798      	blx	r3
    handled = 1UL;
 80079d0:	2301      	movs	r3, #1
 80079d2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	f003 0320 	and.w	r3, r3, #32
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10f      	bne.n	80079fe <HAL_SPI_IRQHandler+0xc2>
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	f003 0302 	and.w	r3, r3, #2
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00a      	beq.n	80079fe <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d105      	bne.n	80079fe <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	4798      	blx	r3
    handled = 1UL;
 80079fa:	2301      	movs	r3, #1
 80079fc:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f040 815a 	bne.w	8007cba <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	f003 0308 	and.w	r3, r3, #8
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 808b 	beq.w	8007b28 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	699a      	ldr	r2, [r3, #24]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f042 0208 	orr.w	r2, r2, #8
 8007a20:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	699a      	ldr	r2, [r3, #24]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f042 0210 	orr.w	r2, r2, #16
 8007a30:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	699a      	ldr	r2, [r3, #24]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a40:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	691a      	ldr	r2, [r3, #16]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f022 0208 	bic.w	r2, r2, #8
 8007a50:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d13d      	bne.n	8007adc <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007a60:	e036      	b.n	8007ad0 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	2b0f      	cmp	r3, #15
 8007a68:	d90b      	bls.n	8007a82 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007a74:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a7a:	1d1a      	adds	r2, r3, #4
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	665a      	str	r2, [r3, #100]	; 0x64
 8007a80:	e01d      	b.n	8007abe <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	2b07      	cmp	r3, #7
 8007a88:	d90b      	bls.n	8007aa2 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	8812      	ldrh	r2, [r2, #0]
 8007a92:	b292      	uxth	r2, r2
 8007a94:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a9a:	1c9a      	adds	r2, r3, #2
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	665a      	str	r2, [r3, #100]	; 0x64
 8007aa0:	e00d      	b.n	8007abe <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007aae:	7812      	ldrb	r2, [r2, #0]
 8007ab0:	b2d2      	uxtb	r2, r2
 8007ab2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ab8:	1c5a      	adds	r2, r3, #1
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1c2      	bne.n	8007a62 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f927 	bl	8007d30 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d003      	beq.n	8007afc <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f8f7 	bl	8007ce8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007afa:	e0e3      	b.n	8007cc4 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007afc:	7cfb      	ldrb	r3, [r7, #19]
 8007afe:	2b05      	cmp	r3, #5
 8007b00:	d103      	bne.n	8007b0a <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f7f8 fe36 	bl	8000774 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007b08:	e0d9      	b.n	8007cbe <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007b0a:	7cfb      	ldrb	r3, [r7, #19]
 8007b0c:	2b04      	cmp	r3, #4
 8007b0e:	d103      	bne.n	8007b18 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f8df 	bl	8007cd4 <HAL_SPI_RxCpltCallback>
    return;
 8007b16:	e0d2      	b.n	8007cbe <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007b18:	7cfb      	ldrb	r3, [r7, #19]
 8007b1a:	2b03      	cmp	r3, #3
 8007b1c:	f040 80cf 	bne.w	8007cbe <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7f8 fe37 	bl	8000794 <HAL_SPI_TxCpltCallback>
    return;
 8007b26:	e0ca      	b.n	8007cbe <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00d      	beq.n	8007b4e <HAL_SPI_IRQHandler+0x212>
 8007b32:	6a3b      	ldr	r3, [r7, #32]
 8007b34:	f003 0308 	and.w	r3, r3, #8
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d008      	beq.n	8007b4e <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	699a      	ldr	r2, [r3, #24]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b4a:	619a      	str	r2, [r3, #24]

    return;
 8007b4c:	e0ba      	b.n	8007cc4 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 80b5 	beq.w	8007cc4 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00f      	beq.n	8007b84 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b6a:	f043 0204 	orr.w	r2, r3, #4
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	699a      	ldr	r2, [r3, #24]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b82:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00f      	beq.n	8007bae <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b94:	f043 0201 	orr.w	r2, r3, #1
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	699a      	ldr	r2, [r3, #24]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bac:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00f      	beq.n	8007bd8 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bbe:	f043 0208 	orr.w	r2, r3, #8
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	699a      	ldr	r2, [r3, #24]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bd6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	f003 0320 	and.w	r3, r3, #32
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00f      	beq.n	8007c02 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007be8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	699a      	ldr	r2, [r3, #24]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f042 0220 	orr.w	r2, r2, #32
 8007c00:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d05a      	beq.n	8007cc2 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f022 0201 	bic.w	r2, r2, #1
 8007c1a:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6919      	ldr	r1, [r3, #16]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	4b29      	ldr	r3, [pc, #164]	; (8007ccc <HAL_SPI_IRQHandler+0x390>)
 8007c28:	400b      	ands	r3, r1
 8007c2a:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007c32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007c36:	d138      	bne.n	8007caa <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689a      	ldr	r2, [r3, #8]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007c46:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d013      	beq.n	8007c78 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c54:	4a1e      	ldr	r2, [pc, #120]	; (8007cd0 <HAL_SPI_IRQHandler+0x394>)
 8007c56:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7fb f90d 	bl	8002e7c <HAL_DMA_Abort_IT>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d007      	beq.n	8007c78 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d020      	beq.n	8007cc2 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c84:	4a12      	ldr	r2, [pc, #72]	; (8007cd0 <HAL_SPI_IRQHandler+0x394>)
 8007c86:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fb f8f5 	bl	8002e7c <HAL_DMA_Abort_IT>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d014      	beq.n	8007cc2 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007ca8:	e00b      	b.n	8007cc2 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f818 	bl	8007ce8 <HAL_SPI_ErrorCallback>
    return;
 8007cb8:	e003      	b.n	8007cc2 <HAL_SPI_IRQHandler+0x386>
    return;
 8007cba:	bf00      	nop
 8007cbc:	e002      	b.n	8007cc4 <HAL_SPI_IRQHandler+0x388>
    return;
 8007cbe:	bf00      	nop
 8007cc0:	e000      	b.n	8007cc4 <HAL_SPI_IRQHandler+0x388>
    return;
 8007cc2:	bf00      	nop
  }
}
 8007cc4:	3728      	adds	r7, #40	; 0x28
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	fffffc94 	.word	0xfffffc94
 8007cd0:	08007cfd 	.word	0x08007cfd

08007cd4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d08:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f7ff ffe0 	bl	8007ce8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d28:	bf00      	nop
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	699a      	ldr	r2, [r3, #24]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f042 0208 	orr.w	r2, r2, #8
 8007d4e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	699a      	ldr	r2, [r3, #24]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f042 0210 	orr.w	r2, r2, #16
 8007d5e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 0201 	bic.w	r2, r2, #1
 8007d6e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6919      	ldr	r1, [r3, #16]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	4b3c      	ldr	r3, [pc, #240]	; (8007e6c <SPI_CloseTransfer+0x13c>)
 8007d7c:	400b      	ands	r3, r1
 8007d7e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	689a      	ldr	r2, [r3, #8]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007d8e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b04      	cmp	r3, #4
 8007d9a:	d014      	beq.n	8007dc6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f003 0320 	and.w	r3, r3, #32
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00f      	beq.n	8007dc6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	699a      	ldr	r2, [r3, #24]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f042 0220 	orr.w	r2, r2, #32
 8007dc4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d014      	beq.n	8007dfc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00f      	beq.n	8007dfc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007de2:	f043 0204 	orr.w	r2, r3, #4
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	699a      	ldr	r2, [r3, #24]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dfa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00f      	beq.n	8007e26 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e0c:	f043 0201 	orr.w	r2, r3, #1
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	699a      	ldr	r2, [r3, #24]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e24:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00f      	beq.n	8007e50 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e36:	f043 0208 	orr.w	r2, r3, #8
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	699a      	ldr	r2, [r3, #24]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e4e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007e60:	bf00      	nop
 8007e62:	3714      	adds	r7, #20
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	fffffc90 	.word	0xfffffc90

08007e70 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	603b      	str	r3, [r7, #0]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007e80:	e010      	b.n	8007ea4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e82:	f7fa f81b 	bl	8001ebc <HAL_GetTick>
 8007e86:	4602      	mov	r2, r0
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d803      	bhi.n	8007e9a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e98:	d102      	bne.n	8007ea0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e00f      	b.n	8007ec4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	695a      	ldr	r2, [r3, #20]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	4013      	ands	r3, r2
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	bf0c      	ite	eq
 8007eb4:	2301      	moveq	r3, #1
 8007eb6:	2300      	movne	r3, #0
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	461a      	mov	r2, r3
 8007ebc:	79fb      	ldrb	r3, [r7, #7]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d0df      	beq.n	8007e82 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed8:	095b      	lsrs	r3, r3, #5
 8007eda:	3301      	adds	r3, #1
 8007edc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	3307      	adds	r3, #7
 8007eea:	08db      	lsrs	r3, r3, #3
 8007eec:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	fb02 f303 	mul.w	r3, r2, r3
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b082      	sub	sp, #8
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d101      	bne.n	8007f14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e049      	b.n	8007fa8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d106      	bne.n	8007f2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f841 	bl	8007fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2202      	movs	r2, #2
 8007f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	3304      	adds	r3, #4
 8007f3e:	4619      	mov	r1, r3
 8007f40:	4610      	mov	r0, r2
 8007f42:	f000 fa0d 	bl	8008360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007fb8:	bf00      	nop
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d001      	beq.n	8007fdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e05e      	b.n	800809a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2202      	movs	r2, #2
 8007fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68da      	ldr	r2, [r3, #12]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f042 0201 	orr.w	r2, r2, #1
 8007ff2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a2b      	ldr	r2, [pc, #172]	; (80080a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d02c      	beq.n	8008058 <HAL_TIM_Base_Start_IT+0x94>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008006:	d027      	beq.n	8008058 <HAL_TIM_Base_Start_IT+0x94>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a27      	ldr	r2, [pc, #156]	; (80080ac <HAL_TIM_Base_Start_IT+0xe8>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d022      	beq.n	8008058 <HAL_TIM_Base_Start_IT+0x94>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a26      	ldr	r2, [pc, #152]	; (80080b0 <HAL_TIM_Base_Start_IT+0xec>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d01d      	beq.n	8008058 <HAL_TIM_Base_Start_IT+0x94>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a24      	ldr	r2, [pc, #144]	; (80080b4 <HAL_TIM_Base_Start_IT+0xf0>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d018      	beq.n	8008058 <HAL_TIM_Base_Start_IT+0x94>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a23      	ldr	r2, [pc, #140]	; (80080b8 <HAL_TIM_Base_Start_IT+0xf4>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d013      	beq.n	8008058 <HAL_TIM_Base_Start_IT+0x94>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a21      	ldr	r2, [pc, #132]	; (80080bc <HAL_TIM_Base_Start_IT+0xf8>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d00e      	beq.n	8008058 <HAL_TIM_Base_Start_IT+0x94>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a20      	ldr	r2, [pc, #128]	; (80080c0 <HAL_TIM_Base_Start_IT+0xfc>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d009      	beq.n	8008058 <HAL_TIM_Base_Start_IT+0x94>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a1e      	ldr	r2, [pc, #120]	; (80080c4 <HAL_TIM_Base_Start_IT+0x100>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d004      	beq.n	8008058 <HAL_TIM_Base_Start_IT+0x94>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a1d      	ldr	r2, [pc, #116]	; (80080c8 <HAL_TIM_Base_Start_IT+0x104>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d115      	bne.n	8008084 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	689a      	ldr	r2, [r3, #8]
 800805e:	4b1b      	ldr	r3, [pc, #108]	; (80080cc <HAL_TIM_Base_Start_IT+0x108>)
 8008060:	4013      	ands	r3, r2
 8008062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2b06      	cmp	r3, #6
 8008068:	d015      	beq.n	8008096 <HAL_TIM_Base_Start_IT+0xd2>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008070:	d011      	beq.n	8008096 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f042 0201 	orr.w	r2, r2, #1
 8008080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008082:	e008      	b.n	8008096 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f042 0201 	orr.w	r2, r2, #1
 8008092:	601a      	str	r2, [r3, #0]
 8008094:	e000      	b.n	8008098 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008096:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	40010000 	.word	0x40010000
 80080ac:	40000400 	.word	0x40000400
 80080b0:	40000800 	.word	0x40000800
 80080b4:	40000c00 	.word	0x40000c00
 80080b8:	40010400 	.word	0x40010400
 80080bc:	40001800 	.word	0x40001800
 80080c0:	40014000 	.word	0x40014000
 80080c4:	4000e000 	.word	0x4000e000
 80080c8:	4000e400 	.word	0x4000e400
 80080cc:	00010007 	.word	0x00010007

080080d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	f003 0302 	and.w	r3, r3, #2
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d122      	bne.n	800812c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	f003 0302 	and.w	r3, r3, #2
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d11b      	bne.n	800812c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f06f 0202 	mvn.w	r2, #2
 80080fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	f003 0303 	and.w	r3, r3, #3
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f905 	bl	8008322 <HAL_TIM_IC_CaptureCallback>
 8008118:	e005      	b.n	8008126 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f8f7 	bl	800830e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f908 	bl	8008336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	f003 0304 	and.w	r3, r3, #4
 8008136:	2b04      	cmp	r3, #4
 8008138:	d122      	bne.n	8008180 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	f003 0304 	and.w	r3, r3, #4
 8008144:	2b04      	cmp	r3, #4
 8008146:	d11b      	bne.n	8008180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f06f 0204 	mvn.w	r2, #4
 8008150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2202      	movs	r2, #2
 8008156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008162:	2b00      	cmp	r3, #0
 8008164:	d003      	beq.n	800816e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f8db 	bl	8008322 <HAL_TIM_IC_CaptureCallback>
 800816c:	e005      	b.n	800817a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f8cd 	bl	800830e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f8de 	bl	8008336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	f003 0308 	and.w	r3, r3, #8
 800818a:	2b08      	cmp	r3, #8
 800818c:	d122      	bne.n	80081d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	f003 0308 	and.w	r3, r3, #8
 8008198:	2b08      	cmp	r3, #8
 800819a:	d11b      	bne.n	80081d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f06f 0208 	mvn.w	r2, #8
 80081a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2204      	movs	r2, #4
 80081aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	69db      	ldr	r3, [r3, #28]
 80081b2:	f003 0303 	and.w	r3, r3, #3
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f8b1 	bl	8008322 <HAL_TIM_IC_CaptureCallback>
 80081c0:	e005      	b.n	80081ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f8a3 	bl	800830e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 f8b4 	bl	8008336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	f003 0310 	and.w	r3, r3, #16
 80081de:	2b10      	cmp	r3, #16
 80081e0:	d122      	bne.n	8008228 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	f003 0310 	and.w	r3, r3, #16
 80081ec:	2b10      	cmp	r3, #16
 80081ee:	d11b      	bne.n	8008228 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f06f 0210 	mvn.w	r2, #16
 80081f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2208      	movs	r2, #8
 80081fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	69db      	ldr	r3, [r3, #28]
 8008206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800820a:	2b00      	cmp	r3, #0
 800820c:	d003      	beq.n	8008216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f887 	bl	8008322 <HAL_TIM_IC_CaptureCallback>
 8008214:	e005      	b.n	8008222 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f879 	bl	800830e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f88a 	bl	8008336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	2b01      	cmp	r3, #1
 8008234:	d10e      	bne.n	8008254 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	f003 0301 	and.w	r3, r3, #1
 8008240:	2b01      	cmp	r3, #1
 8008242:	d107      	bne.n	8008254 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f06f 0201 	mvn.w	r2, #1
 800824c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f7f9 f9fa 	bl	8001648 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800825e:	2b80      	cmp	r3, #128	; 0x80
 8008260:	d10e      	bne.n	8008280 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800826c:	2b80      	cmp	r3, #128	; 0x80
 800826e:	d107      	bne.n	8008280 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f920 	bl	80084c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800828a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800828e:	d10e      	bne.n	80082ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800829a:	2b80      	cmp	r3, #128	; 0x80
 800829c:	d107      	bne.n	80082ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80082a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f913 	bl	80084d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b8:	2b40      	cmp	r3, #64	; 0x40
 80082ba:	d10e      	bne.n	80082da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c6:	2b40      	cmp	r3, #64	; 0x40
 80082c8:	d107      	bne.n	80082da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f838 	bl	800834a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	f003 0320 	and.w	r3, r3, #32
 80082e4:	2b20      	cmp	r3, #32
 80082e6:	d10e      	bne.n	8008306 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	f003 0320 	and.w	r3, r3, #32
 80082f2:	2b20      	cmp	r3, #32
 80082f4:	d107      	bne.n	8008306 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f06f 0220 	mvn.w	r2, #32
 80082fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f8d3 	bl	80084ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008306:	bf00      	nop
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800830e:	b480      	push	{r7}
 8008310:	b083      	sub	sp, #12
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008316:	bf00      	nop
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr

08008322 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008322:	b480      	push	{r7}
 8008324:	b083      	sub	sp, #12
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800832a:	bf00      	nop
 800832c:	370c      	adds	r7, #12
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr

08008336 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008336:	b480      	push	{r7}
 8008338:	b083      	sub	sp, #12
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800833e:	bf00      	nop
 8008340:	370c      	adds	r7, #12
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800834a:	b480      	push	{r7}
 800834c:	b083      	sub	sp, #12
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008352:	bf00      	nop
 8008354:	370c      	adds	r7, #12
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
	...

08008360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a44      	ldr	r2, [pc, #272]	; (8008484 <TIM_Base_SetConfig+0x124>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d013      	beq.n	80083a0 <TIM_Base_SetConfig+0x40>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800837e:	d00f      	beq.n	80083a0 <TIM_Base_SetConfig+0x40>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a41      	ldr	r2, [pc, #260]	; (8008488 <TIM_Base_SetConfig+0x128>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d00b      	beq.n	80083a0 <TIM_Base_SetConfig+0x40>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a40      	ldr	r2, [pc, #256]	; (800848c <TIM_Base_SetConfig+0x12c>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d007      	beq.n	80083a0 <TIM_Base_SetConfig+0x40>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a3f      	ldr	r2, [pc, #252]	; (8008490 <TIM_Base_SetConfig+0x130>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d003      	beq.n	80083a0 <TIM_Base_SetConfig+0x40>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a3e      	ldr	r2, [pc, #248]	; (8008494 <TIM_Base_SetConfig+0x134>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d108      	bne.n	80083b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a33      	ldr	r2, [pc, #204]	; (8008484 <TIM_Base_SetConfig+0x124>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d027      	beq.n	800840a <TIM_Base_SetConfig+0xaa>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083c0:	d023      	beq.n	800840a <TIM_Base_SetConfig+0xaa>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a30      	ldr	r2, [pc, #192]	; (8008488 <TIM_Base_SetConfig+0x128>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d01f      	beq.n	800840a <TIM_Base_SetConfig+0xaa>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a2f      	ldr	r2, [pc, #188]	; (800848c <TIM_Base_SetConfig+0x12c>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d01b      	beq.n	800840a <TIM_Base_SetConfig+0xaa>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a2e      	ldr	r2, [pc, #184]	; (8008490 <TIM_Base_SetConfig+0x130>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d017      	beq.n	800840a <TIM_Base_SetConfig+0xaa>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a2d      	ldr	r2, [pc, #180]	; (8008494 <TIM_Base_SetConfig+0x134>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d013      	beq.n	800840a <TIM_Base_SetConfig+0xaa>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a2c      	ldr	r2, [pc, #176]	; (8008498 <TIM_Base_SetConfig+0x138>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d00f      	beq.n	800840a <TIM_Base_SetConfig+0xaa>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a2b      	ldr	r2, [pc, #172]	; (800849c <TIM_Base_SetConfig+0x13c>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d00b      	beq.n	800840a <TIM_Base_SetConfig+0xaa>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a2a      	ldr	r2, [pc, #168]	; (80084a0 <TIM_Base_SetConfig+0x140>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d007      	beq.n	800840a <TIM_Base_SetConfig+0xaa>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a29      	ldr	r2, [pc, #164]	; (80084a4 <TIM_Base_SetConfig+0x144>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d003      	beq.n	800840a <TIM_Base_SetConfig+0xaa>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a28      	ldr	r2, [pc, #160]	; (80084a8 <TIM_Base_SetConfig+0x148>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d108      	bne.n	800841c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	4313      	orrs	r3, r2
 800841a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	4313      	orrs	r3, r2
 8008428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	689a      	ldr	r2, [r3, #8]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a10      	ldr	r2, [pc, #64]	; (8008484 <TIM_Base_SetConfig+0x124>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d00f      	beq.n	8008468 <TIM_Base_SetConfig+0x108>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a12      	ldr	r2, [pc, #72]	; (8008494 <TIM_Base_SetConfig+0x134>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d00b      	beq.n	8008468 <TIM_Base_SetConfig+0x108>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a11      	ldr	r2, [pc, #68]	; (8008498 <TIM_Base_SetConfig+0x138>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d007      	beq.n	8008468 <TIM_Base_SetConfig+0x108>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a10      	ldr	r2, [pc, #64]	; (800849c <TIM_Base_SetConfig+0x13c>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d003      	beq.n	8008468 <TIM_Base_SetConfig+0x108>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a0f      	ldr	r2, [pc, #60]	; (80084a0 <TIM_Base_SetConfig+0x140>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d103      	bne.n	8008470 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	691a      	ldr	r2, [r3, #16]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	615a      	str	r2, [r3, #20]
}
 8008476:	bf00      	nop
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	40010000 	.word	0x40010000
 8008488:	40000400 	.word	0x40000400
 800848c:	40000800 	.word	0x40000800
 8008490:	40000c00 	.word	0x40000c00
 8008494:	40010400 	.word	0x40010400
 8008498:	40014000 	.word	0x40014000
 800849c:	40014400 	.word	0x40014400
 80084a0:	40014800 	.word	0x40014800
 80084a4:	4000e000 	.word	0x4000e000
 80084a8:	4000e400 	.word	0x4000e400

080084ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084b4:	bf00      	nop
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d101      	bne.n	80084fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e042      	b.n	8008580 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008500:	2b00      	cmp	r3, #0
 8008502:	d106      	bne.n	8008512 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7f9 f9d9 	bl	80018c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2224      	movs	r2, #36	; 0x24
 8008516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f022 0201 	bic.w	r2, r2, #1
 8008528:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fcd6 	bl	8008edc <UART_SetConfig>
 8008530:	4603      	mov	r3, r0
 8008532:	2b01      	cmp	r3, #1
 8008534:	d101      	bne.n	800853a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e022      	b.n	8008580 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853e:	2b00      	cmp	r3, #0
 8008540:	d002      	beq.n	8008548 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f001 fb36 	bl	8009bb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	685a      	ldr	r2, [r3, #4]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008556:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	689a      	ldr	r2, [r3, #8]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008566:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f042 0201 	orr.w	r2, r2, #1
 8008576:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f001 fbbd 	bl	8009cf8 <UART_CheckIdleState>
 800857e:	4603      	mov	r3, r0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b08a      	sub	sp, #40	; 0x28
 800858c:	af02      	add	r7, sp, #8
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	603b      	str	r3, [r7, #0]
 8008594:	4613      	mov	r3, r2
 8008596:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800859e:	2b20      	cmp	r3, #32
 80085a0:	f040 8083 	bne.w	80086aa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d002      	beq.n	80085b0 <HAL_UART_Transmit+0x28>
 80085aa:	88fb      	ldrh	r3, [r7, #6]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d101      	bne.n	80085b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e07b      	b.n	80086ac <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d101      	bne.n	80085c2 <HAL_UART_Transmit+0x3a>
 80085be:	2302      	movs	r3, #2
 80085c0:	e074      	b.n	80086ac <HAL_UART_Transmit+0x124>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2221      	movs	r2, #33	; 0x21
 80085d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085da:	f7f9 fc6f 	bl	8001ebc <HAL_GetTick>
 80085de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	88fa      	ldrh	r2, [r7, #6]
 80085e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	88fa      	ldrh	r2, [r7, #6]
 80085ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085f8:	d108      	bne.n	800860c <HAL_UART_Transmit+0x84>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d104      	bne.n	800860c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008602:	2300      	movs	r3, #0
 8008604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	61bb      	str	r3, [r7, #24]
 800860a:	e003      	b.n	8008614 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008610:	2300      	movs	r3, #0
 8008612:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800861c:	e02c      	b.n	8008678 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	2200      	movs	r2, #0
 8008626:	2180      	movs	r1, #128	; 0x80
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f001 fbb0 	bl	8009d8e <UART_WaitOnFlagUntilTimeout>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d001      	beq.n	8008638 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008634:	2303      	movs	r3, #3
 8008636:	e039      	b.n	80086ac <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10b      	bne.n	8008656 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	881b      	ldrh	r3, [r3, #0]
 8008642:	461a      	mov	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800864c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	3302      	adds	r3, #2
 8008652:	61bb      	str	r3, [r7, #24]
 8008654:	e007      	b.n	8008666 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	781a      	ldrb	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	3301      	adds	r3, #1
 8008664:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800866c:	b29b      	uxth	r3, r3
 800866e:	3b01      	subs	r3, #1
 8008670:	b29a      	uxth	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800867e:	b29b      	uxth	r3, r3
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1cc      	bne.n	800861e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	2200      	movs	r2, #0
 800868c:	2140      	movs	r1, #64	; 0x40
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f001 fb7d 	bl	8009d8e <UART_WaitOnFlagUntilTimeout>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d001      	beq.n	800869e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e006      	b.n	80086ac <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2220      	movs	r2, #32
 80086a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	e000      	b.n	80086ac <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80086aa:	2302      	movs	r3, #2
  }
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3720      	adds	r7, #32
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b08a      	sub	sp, #40	; 0x28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	4613      	mov	r3, r2
 80086c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086c8:	2b20      	cmp	r3, #32
 80086ca:	d142      	bne.n	8008752 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d002      	beq.n	80086d8 <HAL_UART_Receive_IT+0x24>
 80086d2:	88fb      	ldrh	r3, [r7, #6]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d101      	bne.n	80086dc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	e03b      	b.n	8008754 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d101      	bne.n	80086ea <HAL_UART_Receive_IT+0x36>
 80086e6:	2302      	movs	r3, #2
 80086e8:	e034      	b.n	8008754 <HAL_UART_Receive_IT+0xa0>
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a17      	ldr	r2, [pc, #92]	; (800875c <HAL_UART_Receive_IT+0xa8>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d01f      	beq.n	8008742 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d018      	beq.n	8008742 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	e853 3f00 	ldrex	r3, [r3]
 800871c:	613b      	str	r3, [r7, #16]
   return(result);
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008724:	627b      	str	r3, [r7, #36]	; 0x24
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	461a      	mov	r2, r3
 800872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872e:	623b      	str	r3, [r7, #32]
 8008730:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008732:	69f9      	ldr	r1, [r7, #28]
 8008734:	6a3a      	ldr	r2, [r7, #32]
 8008736:	e841 2300 	strex	r3, r2, [r1]
 800873a:	61bb      	str	r3, [r7, #24]
   return(result);
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1e6      	bne.n	8008710 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008742:	88fb      	ldrh	r3, [r7, #6]
 8008744:	461a      	mov	r2, r3
 8008746:	68b9      	ldr	r1, [r7, #8]
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f001 fbe9 	bl	8009f20 <UART_Start_Receive_IT>
 800874e:	4603      	mov	r3, r0
 8008750:	e000      	b.n	8008754 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008752:	2302      	movs	r3, #2
  }
}
 8008754:	4618      	mov	r0, r3
 8008756:	3728      	adds	r7, #40	; 0x28
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	58000c00 	.word	0x58000c00

08008760 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b0ba      	sub	sp, #232	; 0xe8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	69db      	ldr	r3, [r3, #28]
 800876e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008786:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800878a:	f640 030f 	movw	r3, #2063	; 0x80f
 800878e:	4013      	ands	r3, r2
 8008790:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008798:	2b00      	cmp	r3, #0
 800879a:	d11b      	bne.n	80087d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800879c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087a0:	f003 0320 	and.w	r3, r3, #32
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d015      	beq.n	80087d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80087a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087ac:	f003 0320 	and.w	r3, r3, #32
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d105      	bne.n	80087c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80087b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d009      	beq.n	80087d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 835a 	beq.w	8008e7e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	4798      	blx	r3
      }
      return;
 80087d2:	e354      	b.n	8008e7e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80087d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f000 811f 	beq.w	8008a1c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80087de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80087e2:	4b8b      	ldr	r3, [pc, #556]	; (8008a10 <HAL_UART_IRQHandler+0x2b0>)
 80087e4:	4013      	ands	r3, r2
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d106      	bne.n	80087f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80087ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80087ee:	4b89      	ldr	r3, [pc, #548]	; (8008a14 <HAL_UART_IRQHandler+0x2b4>)
 80087f0:	4013      	ands	r3, r2
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f000 8112 	beq.w	8008a1c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80087f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087fc:	f003 0301 	and.w	r3, r3, #1
 8008800:	2b00      	cmp	r3, #0
 8008802:	d011      	beq.n	8008828 <HAL_UART_IRQHandler+0xc8>
 8008804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00b      	beq.n	8008828 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2201      	movs	r2, #1
 8008816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800881e:	f043 0201 	orr.w	r2, r3, #1
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800882c:	f003 0302 	and.w	r3, r3, #2
 8008830:	2b00      	cmp	r3, #0
 8008832:	d011      	beq.n	8008858 <HAL_UART_IRQHandler+0xf8>
 8008834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008838:	f003 0301 	and.w	r3, r3, #1
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00b      	beq.n	8008858 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2202      	movs	r2, #2
 8008846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800884e:	f043 0204 	orr.w	r2, r3, #4
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800885c:	f003 0304 	and.w	r3, r3, #4
 8008860:	2b00      	cmp	r3, #0
 8008862:	d011      	beq.n	8008888 <HAL_UART_IRQHandler+0x128>
 8008864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00b      	beq.n	8008888 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2204      	movs	r2, #4
 8008876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800887e:	f043 0202 	orr.w	r2, r3, #2
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800888c:	f003 0308 	and.w	r3, r3, #8
 8008890:	2b00      	cmp	r3, #0
 8008892:	d017      	beq.n	80088c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008898:	f003 0320 	and.w	r3, r3, #32
 800889c:	2b00      	cmp	r3, #0
 800889e:	d105      	bne.n	80088ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80088a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80088a4:	4b5a      	ldr	r3, [pc, #360]	; (8008a10 <HAL_UART_IRQHandler+0x2b0>)
 80088a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00b      	beq.n	80088c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2208      	movs	r2, #8
 80088b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088ba:	f043 0208 	orr.w	r2, r3, #8
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80088c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d012      	beq.n	80088f6 <HAL_UART_IRQHandler+0x196>
 80088d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00c      	beq.n	80088f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088ec:	f043 0220 	orr.w	r2, r3, #32
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f000 82c0 	beq.w	8008e82 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008906:	f003 0320 	and.w	r3, r3, #32
 800890a:	2b00      	cmp	r3, #0
 800890c:	d013      	beq.n	8008936 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800890e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008912:	f003 0320 	and.w	r3, r3, #32
 8008916:	2b00      	cmp	r3, #0
 8008918:	d105      	bne.n	8008926 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800891a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800891e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d007      	beq.n	8008936 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800892a:	2b00      	cmp	r3, #0
 800892c:	d003      	beq.n	8008936 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800893c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800894a:	2b40      	cmp	r3, #64	; 0x40
 800894c:	d005      	beq.n	800895a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800894e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008952:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008956:	2b00      	cmp	r3, #0
 8008958:	d04f      	beq.n	80089fa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f001 fc0a 	bl	800a174 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800896a:	2b40      	cmp	r3, #64	; 0x40
 800896c:	d141      	bne.n	80089f2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	3308      	adds	r3, #8
 8008974:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008978:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800897c:	e853 3f00 	ldrex	r3, [r3]
 8008980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008984:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800898c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3308      	adds	r3, #8
 8008996:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800899a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800899e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80089a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80089aa:	e841 2300 	strex	r3, r2, [r1]
 80089ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80089b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1d9      	bne.n	800896e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d013      	beq.n	80089ea <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089c6:	4a14      	ldr	r2, [pc, #80]	; (8008a18 <HAL_UART_IRQHandler+0x2b8>)
 80089c8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fa fa54 	bl	8002e7c <HAL_DMA_Abort_IT>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d017      	beq.n	8008a0a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80089e4:	4610      	mov	r0, r2
 80089e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089e8:	e00f      	b.n	8008a0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fa60 	bl	8008eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089f0:	e00b      	b.n	8008a0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fa5c 	bl	8008eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089f8:	e007      	b.n	8008a0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fa58 	bl	8008eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008a08:	e23b      	b.n	8008e82 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a0a:	bf00      	nop
    return;
 8008a0c:	e239      	b.n	8008e82 <HAL_UART_IRQHandler+0x722>
 8008a0e:	bf00      	nop
 8008a10:	10000001 	.word	0x10000001
 8008a14:	04000120 	.word	0x04000120
 8008a18:	0800a241 	.word	0x0800a241

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	f040 81ce 	bne.w	8008dc2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a2a:	f003 0310 	and.w	r3, r3, #16
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f000 81c7 	beq.w	8008dc2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a38:	f003 0310 	and.w	r3, r3, #16
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f000 81c0 	beq.w	8008dc2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2210      	movs	r2, #16
 8008a48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a54:	2b40      	cmp	r3, #64	; 0x40
 8008a56:	f040 813b 	bne.w	8008cd0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a8b      	ldr	r2, [pc, #556]	; (8008c90 <HAL_UART_IRQHandler+0x530>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d059      	beq.n	8008b1a <HAL_UART_IRQHandler+0x3ba>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a89      	ldr	r2, [pc, #548]	; (8008c94 <HAL_UART_IRQHandler+0x534>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d053      	beq.n	8008b1a <HAL_UART_IRQHandler+0x3ba>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a87      	ldr	r2, [pc, #540]	; (8008c98 <HAL_UART_IRQHandler+0x538>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d04d      	beq.n	8008b1a <HAL_UART_IRQHandler+0x3ba>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a85      	ldr	r2, [pc, #532]	; (8008c9c <HAL_UART_IRQHandler+0x53c>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d047      	beq.n	8008b1a <HAL_UART_IRQHandler+0x3ba>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a83      	ldr	r2, [pc, #524]	; (8008ca0 <HAL_UART_IRQHandler+0x540>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d041      	beq.n	8008b1a <HAL_UART_IRQHandler+0x3ba>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a81      	ldr	r2, [pc, #516]	; (8008ca4 <HAL_UART_IRQHandler+0x544>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d03b      	beq.n	8008b1a <HAL_UART_IRQHandler+0x3ba>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a7f      	ldr	r2, [pc, #508]	; (8008ca8 <HAL_UART_IRQHandler+0x548>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d035      	beq.n	8008b1a <HAL_UART_IRQHandler+0x3ba>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a7d      	ldr	r2, [pc, #500]	; (8008cac <HAL_UART_IRQHandler+0x54c>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d02f      	beq.n	8008b1a <HAL_UART_IRQHandler+0x3ba>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a7b      	ldr	r2, [pc, #492]	; (8008cb0 <HAL_UART_IRQHandler+0x550>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d029      	beq.n	8008b1a <HAL_UART_IRQHandler+0x3ba>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a79      	ldr	r2, [pc, #484]	; (8008cb4 <HAL_UART_IRQHandler+0x554>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d023      	beq.n	8008b1a <HAL_UART_IRQHandler+0x3ba>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a77      	ldr	r2, [pc, #476]	; (8008cb8 <HAL_UART_IRQHandler+0x558>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d01d      	beq.n	8008b1a <HAL_UART_IRQHandler+0x3ba>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a75      	ldr	r2, [pc, #468]	; (8008cbc <HAL_UART_IRQHandler+0x55c>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d017      	beq.n	8008b1a <HAL_UART_IRQHandler+0x3ba>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a73      	ldr	r2, [pc, #460]	; (8008cc0 <HAL_UART_IRQHandler+0x560>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d011      	beq.n	8008b1a <HAL_UART_IRQHandler+0x3ba>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a71      	ldr	r2, [pc, #452]	; (8008cc4 <HAL_UART_IRQHandler+0x564>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d00b      	beq.n	8008b1a <HAL_UART_IRQHandler+0x3ba>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a6f      	ldr	r2, [pc, #444]	; (8008cc8 <HAL_UART_IRQHandler+0x568>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d005      	beq.n	8008b1a <HAL_UART_IRQHandler+0x3ba>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a6d      	ldr	r2, [pc, #436]	; (8008ccc <HAL_UART_IRQHandler+0x56c>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d105      	bne.n	8008b26 <HAL_UART_IRQHandler+0x3c6>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	e004      	b.n	8008b30 <HAL_UART_IRQHandler+0x3d0>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 81a4 	beq.w	8008e86 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	f080 819c 	bcs.w	8008e86 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b5c:	69db      	ldr	r3, [r3, #28]
 8008b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b62:	f000 8086 	beq.w	8008c72 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b72:	e853 3f00 	ldrex	r3, [r3]
 8008b76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008b7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008b94:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b98:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008b9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008ba0:	e841 2300 	strex	r3, r2, [r1]
 8008ba4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008ba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1da      	bne.n	8008b66 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	3308      	adds	r3, #8
 8008bb6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bba:	e853 3f00 	ldrex	r3, [r3]
 8008bbe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008bc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bc2:	f023 0301 	bic.w	r3, r3, #1
 8008bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	3308      	adds	r3, #8
 8008bd0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008bd4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008bd8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bda:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008bdc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008be0:	e841 2300 	strex	r3, r2, [r1]
 8008be4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1e1      	bne.n	8008bb0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3308      	adds	r3, #8
 8008bf2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bf6:	e853 3f00 	ldrex	r3, [r3]
 8008bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	3308      	adds	r3, #8
 8008c0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008c10:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008c12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c14:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c18:	e841 2300 	strex	r3, r2, [r1]
 8008c1c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008c1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1e3      	bne.n	8008bec <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2220      	movs	r2, #32
 8008c28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c3a:	e853 3f00 	ldrex	r3, [r3]
 8008c3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c42:	f023 0310 	bic.w	r3, r3, #16
 8008c46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c54:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c56:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c5c:	e841 2300 	strex	r3, r2, [r1]
 8008c60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1e4      	bne.n	8008c32 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7f9 fde7 	bl	8002840 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	4619      	mov	r1, r3
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f91c 	bl	8008ec4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008c8c:	e0fb      	b.n	8008e86 <HAL_UART_IRQHandler+0x726>
 8008c8e:	bf00      	nop
 8008c90:	40020010 	.word	0x40020010
 8008c94:	40020028 	.word	0x40020028
 8008c98:	40020040 	.word	0x40020040
 8008c9c:	40020058 	.word	0x40020058
 8008ca0:	40020070 	.word	0x40020070
 8008ca4:	40020088 	.word	0x40020088
 8008ca8:	400200a0 	.word	0x400200a0
 8008cac:	400200b8 	.word	0x400200b8
 8008cb0:	40020410 	.word	0x40020410
 8008cb4:	40020428 	.word	0x40020428
 8008cb8:	40020440 	.word	0x40020440
 8008cbc:	40020458 	.word	0x40020458
 8008cc0:	40020470 	.word	0x40020470
 8008cc4:	40020488 	.word	0x40020488
 8008cc8:	400204a0 	.word	0x400204a0
 8008ccc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f000 80cc 	beq.w	8008e8a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8008cf2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f000 80c7 	beq.w	8008e8a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d04:	e853 3f00 	ldrex	r3, [r3]
 8008d08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d1e:	647b      	str	r3, [r7, #68]	; 0x44
 8008d20:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d26:	e841 2300 	strex	r3, r2, [r1]
 8008d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1e4      	bne.n	8008cfc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3308      	adds	r3, #8
 8008d38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3c:	e853 3f00 	ldrex	r3, [r3]
 8008d40:	623b      	str	r3, [r7, #32]
   return(result);
 8008d42:	6a3a      	ldr	r2, [r7, #32]
 8008d44:	4b54      	ldr	r3, [pc, #336]	; (8008e98 <HAL_UART_IRQHandler+0x738>)
 8008d46:	4013      	ands	r3, r2
 8008d48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	3308      	adds	r3, #8
 8008d52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008d56:	633a      	str	r2, [r7, #48]	; 0x30
 8008d58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d5e:	e841 2300 	strex	r3, r2, [r1]
 8008d62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1e3      	bne.n	8008d32 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2220      	movs	r2, #32
 8008d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	e853 3f00 	ldrex	r3, [r3]
 8008d8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f023 0310 	bic.w	r3, r3, #16
 8008d92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008da0:	61fb      	str	r3, [r7, #28]
 8008da2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da4:	69b9      	ldr	r1, [r7, #24]
 8008da6:	69fa      	ldr	r2, [r7, #28]
 8008da8:	e841 2300 	strex	r3, r2, [r1]
 8008dac:	617b      	str	r3, [r7, #20]
   return(result);
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1e4      	bne.n	8008d7e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008db4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f882 	bl	8008ec4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008dc0:	e063      	b.n	8008e8a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00e      	beq.n	8008dec <HAL_UART_IRQHandler+0x68c>
 8008dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d008      	beq.n	8008dec <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008de2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f001 fec9 	bl	800ab7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008dea:	e051      	b.n	8008e90 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d014      	beq.n	8008e22 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d105      	bne.n	8008e10 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d008      	beq.n	8008e22 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d03a      	beq.n	8008e8e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	4798      	blx	r3
    }
    return;
 8008e20:	e035      	b.n	8008e8e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d009      	beq.n	8008e42 <HAL_UART_IRQHandler+0x6e2>
 8008e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d003      	beq.n	8008e42 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f001 fa16 	bl	800a26c <UART_EndTransmit_IT>
    return;
 8008e40:	e026      	b.n	8008e90 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d009      	beq.n	8008e62 <HAL_UART_IRQHandler+0x702>
 8008e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e52:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d003      	beq.n	8008e62 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f001 fea2 	bl	800aba4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008e60:	e016      	b.n	8008e90 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d010      	beq.n	8008e90 <HAL_UART_IRQHandler+0x730>
 8008e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	da0c      	bge.n	8008e90 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f001 fe8a 	bl	800ab90 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008e7c:	e008      	b.n	8008e90 <HAL_UART_IRQHandler+0x730>
      return;
 8008e7e:	bf00      	nop
 8008e80:	e006      	b.n	8008e90 <HAL_UART_IRQHandler+0x730>
    return;
 8008e82:	bf00      	nop
 8008e84:	e004      	b.n	8008e90 <HAL_UART_IRQHandler+0x730>
      return;
 8008e86:	bf00      	nop
 8008e88:	e002      	b.n	8008e90 <HAL_UART_IRQHandler+0x730>
      return;
 8008e8a:	bf00      	nop
 8008e8c:	e000      	b.n	8008e90 <HAL_UART_IRQHandler+0x730>
    return;
 8008e8e:	bf00      	nop
  }
}
 8008e90:	37e8      	adds	r7, #232	; 0xe8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	effffffe 	.word	0xeffffffe

08008e9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008ea4:	bf00      	nop
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008eb8:	bf00      	nop
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ee0:	b092      	sub	sp, #72	; 0x48
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	689a      	ldr	r2, [r3, #8]
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	431a      	orrs	r2, r3
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	431a      	orrs	r2, r3
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	69db      	ldr	r3, [r3, #28]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	4bbe      	ldr	r3, [pc, #760]	; (8009204 <UART_SetConfig+0x328>)
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	6812      	ldr	r2, [r2, #0]
 8008f12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f14:	430b      	orrs	r3, r1
 8008f16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	68da      	ldr	r2, [r3, #12]
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4ab3      	ldr	r2, [pc, #716]	; (8009208 <UART_SetConfig+0x32c>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d004      	beq.n	8008f48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f44:	4313      	orrs	r3, r2
 8008f46:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689a      	ldr	r2, [r3, #8]
 8008f4e:	4baf      	ldr	r3, [pc, #700]	; (800920c <UART_SetConfig+0x330>)
 8008f50:	4013      	ands	r3, r2
 8008f52:	697a      	ldr	r2, [r7, #20]
 8008f54:	6812      	ldr	r2, [r2, #0]
 8008f56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f58:	430b      	orrs	r3, r1
 8008f5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f62:	f023 010f 	bic.w	r1, r3, #15
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4aa6      	ldr	r2, [pc, #664]	; (8009210 <UART_SetConfig+0x334>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d177      	bne.n	800906c <UART_SetConfig+0x190>
 8008f7c:	4ba5      	ldr	r3, [pc, #660]	; (8009214 <UART_SetConfig+0x338>)
 8008f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f84:	2b28      	cmp	r3, #40	; 0x28
 8008f86:	d86d      	bhi.n	8009064 <UART_SetConfig+0x188>
 8008f88:	a201      	add	r2, pc, #4	; (adr r2, 8008f90 <UART_SetConfig+0xb4>)
 8008f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8e:	bf00      	nop
 8008f90:	08009035 	.word	0x08009035
 8008f94:	08009065 	.word	0x08009065
 8008f98:	08009065 	.word	0x08009065
 8008f9c:	08009065 	.word	0x08009065
 8008fa0:	08009065 	.word	0x08009065
 8008fa4:	08009065 	.word	0x08009065
 8008fa8:	08009065 	.word	0x08009065
 8008fac:	08009065 	.word	0x08009065
 8008fb0:	0800903d 	.word	0x0800903d
 8008fb4:	08009065 	.word	0x08009065
 8008fb8:	08009065 	.word	0x08009065
 8008fbc:	08009065 	.word	0x08009065
 8008fc0:	08009065 	.word	0x08009065
 8008fc4:	08009065 	.word	0x08009065
 8008fc8:	08009065 	.word	0x08009065
 8008fcc:	08009065 	.word	0x08009065
 8008fd0:	08009045 	.word	0x08009045
 8008fd4:	08009065 	.word	0x08009065
 8008fd8:	08009065 	.word	0x08009065
 8008fdc:	08009065 	.word	0x08009065
 8008fe0:	08009065 	.word	0x08009065
 8008fe4:	08009065 	.word	0x08009065
 8008fe8:	08009065 	.word	0x08009065
 8008fec:	08009065 	.word	0x08009065
 8008ff0:	0800904d 	.word	0x0800904d
 8008ff4:	08009065 	.word	0x08009065
 8008ff8:	08009065 	.word	0x08009065
 8008ffc:	08009065 	.word	0x08009065
 8009000:	08009065 	.word	0x08009065
 8009004:	08009065 	.word	0x08009065
 8009008:	08009065 	.word	0x08009065
 800900c:	08009065 	.word	0x08009065
 8009010:	08009055 	.word	0x08009055
 8009014:	08009065 	.word	0x08009065
 8009018:	08009065 	.word	0x08009065
 800901c:	08009065 	.word	0x08009065
 8009020:	08009065 	.word	0x08009065
 8009024:	08009065 	.word	0x08009065
 8009028:	08009065 	.word	0x08009065
 800902c:	08009065 	.word	0x08009065
 8009030:	0800905d 	.word	0x0800905d
 8009034:	2301      	movs	r3, #1
 8009036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800903a:	e326      	b.n	800968a <UART_SetConfig+0x7ae>
 800903c:	2304      	movs	r3, #4
 800903e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009042:	e322      	b.n	800968a <UART_SetConfig+0x7ae>
 8009044:	2308      	movs	r3, #8
 8009046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800904a:	e31e      	b.n	800968a <UART_SetConfig+0x7ae>
 800904c:	2310      	movs	r3, #16
 800904e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009052:	e31a      	b.n	800968a <UART_SetConfig+0x7ae>
 8009054:	2320      	movs	r3, #32
 8009056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800905a:	e316      	b.n	800968a <UART_SetConfig+0x7ae>
 800905c:	2340      	movs	r3, #64	; 0x40
 800905e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009062:	e312      	b.n	800968a <UART_SetConfig+0x7ae>
 8009064:	2380      	movs	r3, #128	; 0x80
 8009066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800906a:	e30e      	b.n	800968a <UART_SetConfig+0x7ae>
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a69      	ldr	r2, [pc, #420]	; (8009218 <UART_SetConfig+0x33c>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d130      	bne.n	80090d8 <UART_SetConfig+0x1fc>
 8009076:	4b67      	ldr	r3, [pc, #412]	; (8009214 <UART_SetConfig+0x338>)
 8009078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800907a:	f003 0307 	and.w	r3, r3, #7
 800907e:	2b05      	cmp	r3, #5
 8009080:	d826      	bhi.n	80090d0 <UART_SetConfig+0x1f4>
 8009082:	a201      	add	r2, pc, #4	; (adr r2, 8009088 <UART_SetConfig+0x1ac>)
 8009084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009088:	080090a1 	.word	0x080090a1
 800908c:	080090a9 	.word	0x080090a9
 8009090:	080090b1 	.word	0x080090b1
 8009094:	080090b9 	.word	0x080090b9
 8009098:	080090c1 	.word	0x080090c1
 800909c:	080090c9 	.word	0x080090c9
 80090a0:	2300      	movs	r3, #0
 80090a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090a6:	e2f0      	b.n	800968a <UART_SetConfig+0x7ae>
 80090a8:	2304      	movs	r3, #4
 80090aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ae:	e2ec      	b.n	800968a <UART_SetConfig+0x7ae>
 80090b0:	2308      	movs	r3, #8
 80090b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090b6:	e2e8      	b.n	800968a <UART_SetConfig+0x7ae>
 80090b8:	2310      	movs	r3, #16
 80090ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090be:	e2e4      	b.n	800968a <UART_SetConfig+0x7ae>
 80090c0:	2320      	movs	r3, #32
 80090c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090c6:	e2e0      	b.n	800968a <UART_SetConfig+0x7ae>
 80090c8:	2340      	movs	r3, #64	; 0x40
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ce:	e2dc      	b.n	800968a <UART_SetConfig+0x7ae>
 80090d0:	2380      	movs	r3, #128	; 0x80
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090d6:	e2d8      	b.n	800968a <UART_SetConfig+0x7ae>
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a4f      	ldr	r2, [pc, #316]	; (800921c <UART_SetConfig+0x340>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d130      	bne.n	8009144 <UART_SetConfig+0x268>
 80090e2:	4b4c      	ldr	r3, [pc, #304]	; (8009214 <UART_SetConfig+0x338>)
 80090e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090e6:	f003 0307 	and.w	r3, r3, #7
 80090ea:	2b05      	cmp	r3, #5
 80090ec:	d826      	bhi.n	800913c <UART_SetConfig+0x260>
 80090ee:	a201      	add	r2, pc, #4	; (adr r2, 80090f4 <UART_SetConfig+0x218>)
 80090f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f4:	0800910d 	.word	0x0800910d
 80090f8:	08009115 	.word	0x08009115
 80090fc:	0800911d 	.word	0x0800911d
 8009100:	08009125 	.word	0x08009125
 8009104:	0800912d 	.word	0x0800912d
 8009108:	08009135 	.word	0x08009135
 800910c:	2300      	movs	r3, #0
 800910e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009112:	e2ba      	b.n	800968a <UART_SetConfig+0x7ae>
 8009114:	2304      	movs	r3, #4
 8009116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800911a:	e2b6      	b.n	800968a <UART_SetConfig+0x7ae>
 800911c:	2308      	movs	r3, #8
 800911e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009122:	e2b2      	b.n	800968a <UART_SetConfig+0x7ae>
 8009124:	2310      	movs	r3, #16
 8009126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800912a:	e2ae      	b.n	800968a <UART_SetConfig+0x7ae>
 800912c:	2320      	movs	r3, #32
 800912e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009132:	e2aa      	b.n	800968a <UART_SetConfig+0x7ae>
 8009134:	2340      	movs	r3, #64	; 0x40
 8009136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800913a:	e2a6      	b.n	800968a <UART_SetConfig+0x7ae>
 800913c:	2380      	movs	r3, #128	; 0x80
 800913e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009142:	e2a2      	b.n	800968a <UART_SetConfig+0x7ae>
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a35      	ldr	r2, [pc, #212]	; (8009220 <UART_SetConfig+0x344>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d130      	bne.n	80091b0 <UART_SetConfig+0x2d4>
 800914e:	4b31      	ldr	r3, [pc, #196]	; (8009214 <UART_SetConfig+0x338>)
 8009150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009152:	f003 0307 	and.w	r3, r3, #7
 8009156:	2b05      	cmp	r3, #5
 8009158:	d826      	bhi.n	80091a8 <UART_SetConfig+0x2cc>
 800915a:	a201      	add	r2, pc, #4	; (adr r2, 8009160 <UART_SetConfig+0x284>)
 800915c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009160:	08009179 	.word	0x08009179
 8009164:	08009181 	.word	0x08009181
 8009168:	08009189 	.word	0x08009189
 800916c:	08009191 	.word	0x08009191
 8009170:	08009199 	.word	0x08009199
 8009174:	080091a1 	.word	0x080091a1
 8009178:	2300      	movs	r3, #0
 800917a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800917e:	e284      	b.n	800968a <UART_SetConfig+0x7ae>
 8009180:	2304      	movs	r3, #4
 8009182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009186:	e280      	b.n	800968a <UART_SetConfig+0x7ae>
 8009188:	2308      	movs	r3, #8
 800918a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800918e:	e27c      	b.n	800968a <UART_SetConfig+0x7ae>
 8009190:	2310      	movs	r3, #16
 8009192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009196:	e278      	b.n	800968a <UART_SetConfig+0x7ae>
 8009198:	2320      	movs	r3, #32
 800919a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800919e:	e274      	b.n	800968a <UART_SetConfig+0x7ae>
 80091a0:	2340      	movs	r3, #64	; 0x40
 80091a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091a6:	e270      	b.n	800968a <UART_SetConfig+0x7ae>
 80091a8:	2380      	movs	r3, #128	; 0x80
 80091aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ae:	e26c      	b.n	800968a <UART_SetConfig+0x7ae>
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a1b      	ldr	r2, [pc, #108]	; (8009224 <UART_SetConfig+0x348>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d142      	bne.n	8009240 <UART_SetConfig+0x364>
 80091ba:	4b16      	ldr	r3, [pc, #88]	; (8009214 <UART_SetConfig+0x338>)
 80091bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091be:	f003 0307 	and.w	r3, r3, #7
 80091c2:	2b05      	cmp	r3, #5
 80091c4:	d838      	bhi.n	8009238 <UART_SetConfig+0x35c>
 80091c6:	a201      	add	r2, pc, #4	; (adr r2, 80091cc <UART_SetConfig+0x2f0>)
 80091c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091cc:	080091e5 	.word	0x080091e5
 80091d0:	080091ed 	.word	0x080091ed
 80091d4:	080091f5 	.word	0x080091f5
 80091d8:	080091fd 	.word	0x080091fd
 80091dc:	08009229 	.word	0x08009229
 80091e0:	08009231 	.word	0x08009231
 80091e4:	2300      	movs	r3, #0
 80091e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ea:	e24e      	b.n	800968a <UART_SetConfig+0x7ae>
 80091ec:	2304      	movs	r3, #4
 80091ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091f2:	e24a      	b.n	800968a <UART_SetConfig+0x7ae>
 80091f4:	2308      	movs	r3, #8
 80091f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091fa:	e246      	b.n	800968a <UART_SetConfig+0x7ae>
 80091fc:	2310      	movs	r3, #16
 80091fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009202:	e242      	b.n	800968a <UART_SetConfig+0x7ae>
 8009204:	cfff69f3 	.word	0xcfff69f3
 8009208:	58000c00 	.word	0x58000c00
 800920c:	11fff4ff 	.word	0x11fff4ff
 8009210:	40011000 	.word	0x40011000
 8009214:	58024400 	.word	0x58024400
 8009218:	40004400 	.word	0x40004400
 800921c:	40004800 	.word	0x40004800
 8009220:	40004c00 	.word	0x40004c00
 8009224:	40005000 	.word	0x40005000
 8009228:	2320      	movs	r3, #32
 800922a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800922e:	e22c      	b.n	800968a <UART_SetConfig+0x7ae>
 8009230:	2340      	movs	r3, #64	; 0x40
 8009232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009236:	e228      	b.n	800968a <UART_SetConfig+0x7ae>
 8009238:	2380      	movs	r3, #128	; 0x80
 800923a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800923e:	e224      	b.n	800968a <UART_SetConfig+0x7ae>
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4ab1      	ldr	r2, [pc, #708]	; (800950c <UART_SetConfig+0x630>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d176      	bne.n	8009338 <UART_SetConfig+0x45c>
 800924a:	4bb1      	ldr	r3, [pc, #708]	; (8009510 <UART_SetConfig+0x634>)
 800924c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800924e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009252:	2b28      	cmp	r3, #40	; 0x28
 8009254:	d86c      	bhi.n	8009330 <UART_SetConfig+0x454>
 8009256:	a201      	add	r2, pc, #4	; (adr r2, 800925c <UART_SetConfig+0x380>)
 8009258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925c:	08009301 	.word	0x08009301
 8009260:	08009331 	.word	0x08009331
 8009264:	08009331 	.word	0x08009331
 8009268:	08009331 	.word	0x08009331
 800926c:	08009331 	.word	0x08009331
 8009270:	08009331 	.word	0x08009331
 8009274:	08009331 	.word	0x08009331
 8009278:	08009331 	.word	0x08009331
 800927c:	08009309 	.word	0x08009309
 8009280:	08009331 	.word	0x08009331
 8009284:	08009331 	.word	0x08009331
 8009288:	08009331 	.word	0x08009331
 800928c:	08009331 	.word	0x08009331
 8009290:	08009331 	.word	0x08009331
 8009294:	08009331 	.word	0x08009331
 8009298:	08009331 	.word	0x08009331
 800929c:	08009311 	.word	0x08009311
 80092a0:	08009331 	.word	0x08009331
 80092a4:	08009331 	.word	0x08009331
 80092a8:	08009331 	.word	0x08009331
 80092ac:	08009331 	.word	0x08009331
 80092b0:	08009331 	.word	0x08009331
 80092b4:	08009331 	.word	0x08009331
 80092b8:	08009331 	.word	0x08009331
 80092bc:	08009319 	.word	0x08009319
 80092c0:	08009331 	.word	0x08009331
 80092c4:	08009331 	.word	0x08009331
 80092c8:	08009331 	.word	0x08009331
 80092cc:	08009331 	.word	0x08009331
 80092d0:	08009331 	.word	0x08009331
 80092d4:	08009331 	.word	0x08009331
 80092d8:	08009331 	.word	0x08009331
 80092dc:	08009321 	.word	0x08009321
 80092e0:	08009331 	.word	0x08009331
 80092e4:	08009331 	.word	0x08009331
 80092e8:	08009331 	.word	0x08009331
 80092ec:	08009331 	.word	0x08009331
 80092f0:	08009331 	.word	0x08009331
 80092f4:	08009331 	.word	0x08009331
 80092f8:	08009331 	.word	0x08009331
 80092fc:	08009329 	.word	0x08009329
 8009300:	2301      	movs	r3, #1
 8009302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009306:	e1c0      	b.n	800968a <UART_SetConfig+0x7ae>
 8009308:	2304      	movs	r3, #4
 800930a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800930e:	e1bc      	b.n	800968a <UART_SetConfig+0x7ae>
 8009310:	2308      	movs	r3, #8
 8009312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009316:	e1b8      	b.n	800968a <UART_SetConfig+0x7ae>
 8009318:	2310      	movs	r3, #16
 800931a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800931e:	e1b4      	b.n	800968a <UART_SetConfig+0x7ae>
 8009320:	2320      	movs	r3, #32
 8009322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009326:	e1b0      	b.n	800968a <UART_SetConfig+0x7ae>
 8009328:	2340      	movs	r3, #64	; 0x40
 800932a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800932e:	e1ac      	b.n	800968a <UART_SetConfig+0x7ae>
 8009330:	2380      	movs	r3, #128	; 0x80
 8009332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009336:	e1a8      	b.n	800968a <UART_SetConfig+0x7ae>
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a75      	ldr	r2, [pc, #468]	; (8009514 <UART_SetConfig+0x638>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d130      	bne.n	80093a4 <UART_SetConfig+0x4c8>
 8009342:	4b73      	ldr	r3, [pc, #460]	; (8009510 <UART_SetConfig+0x634>)
 8009344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009346:	f003 0307 	and.w	r3, r3, #7
 800934a:	2b05      	cmp	r3, #5
 800934c:	d826      	bhi.n	800939c <UART_SetConfig+0x4c0>
 800934e:	a201      	add	r2, pc, #4	; (adr r2, 8009354 <UART_SetConfig+0x478>)
 8009350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009354:	0800936d 	.word	0x0800936d
 8009358:	08009375 	.word	0x08009375
 800935c:	0800937d 	.word	0x0800937d
 8009360:	08009385 	.word	0x08009385
 8009364:	0800938d 	.word	0x0800938d
 8009368:	08009395 	.word	0x08009395
 800936c:	2300      	movs	r3, #0
 800936e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009372:	e18a      	b.n	800968a <UART_SetConfig+0x7ae>
 8009374:	2304      	movs	r3, #4
 8009376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800937a:	e186      	b.n	800968a <UART_SetConfig+0x7ae>
 800937c:	2308      	movs	r3, #8
 800937e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009382:	e182      	b.n	800968a <UART_SetConfig+0x7ae>
 8009384:	2310      	movs	r3, #16
 8009386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800938a:	e17e      	b.n	800968a <UART_SetConfig+0x7ae>
 800938c:	2320      	movs	r3, #32
 800938e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009392:	e17a      	b.n	800968a <UART_SetConfig+0x7ae>
 8009394:	2340      	movs	r3, #64	; 0x40
 8009396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800939a:	e176      	b.n	800968a <UART_SetConfig+0x7ae>
 800939c:	2380      	movs	r3, #128	; 0x80
 800939e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093a2:	e172      	b.n	800968a <UART_SetConfig+0x7ae>
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a5b      	ldr	r2, [pc, #364]	; (8009518 <UART_SetConfig+0x63c>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d130      	bne.n	8009410 <UART_SetConfig+0x534>
 80093ae:	4b58      	ldr	r3, [pc, #352]	; (8009510 <UART_SetConfig+0x634>)
 80093b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093b2:	f003 0307 	and.w	r3, r3, #7
 80093b6:	2b05      	cmp	r3, #5
 80093b8:	d826      	bhi.n	8009408 <UART_SetConfig+0x52c>
 80093ba:	a201      	add	r2, pc, #4	; (adr r2, 80093c0 <UART_SetConfig+0x4e4>)
 80093bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c0:	080093d9 	.word	0x080093d9
 80093c4:	080093e1 	.word	0x080093e1
 80093c8:	080093e9 	.word	0x080093e9
 80093cc:	080093f1 	.word	0x080093f1
 80093d0:	080093f9 	.word	0x080093f9
 80093d4:	08009401 	.word	0x08009401
 80093d8:	2300      	movs	r3, #0
 80093da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093de:	e154      	b.n	800968a <UART_SetConfig+0x7ae>
 80093e0:	2304      	movs	r3, #4
 80093e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093e6:	e150      	b.n	800968a <UART_SetConfig+0x7ae>
 80093e8:	2308      	movs	r3, #8
 80093ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093ee:	e14c      	b.n	800968a <UART_SetConfig+0x7ae>
 80093f0:	2310      	movs	r3, #16
 80093f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093f6:	e148      	b.n	800968a <UART_SetConfig+0x7ae>
 80093f8:	2320      	movs	r3, #32
 80093fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093fe:	e144      	b.n	800968a <UART_SetConfig+0x7ae>
 8009400:	2340      	movs	r3, #64	; 0x40
 8009402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009406:	e140      	b.n	800968a <UART_SetConfig+0x7ae>
 8009408:	2380      	movs	r3, #128	; 0x80
 800940a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800940e:	e13c      	b.n	800968a <UART_SetConfig+0x7ae>
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a41      	ldr	r2, [pc, #260]	; (800951c <UART_SetConfig+0x640>)
 8009416:	4293      	cmp	r3, r2
 8009418:	f040 8082 	bne.w	8009520 <UART_SetConfig+0x644>
 800941c:	4b3c      	ldr	r3, [pc, #240]	; (8009510 <UART_SetConfig+0x634>)
 800941e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009420:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009424:	2b28      	cmp	r3, #40	; 0x28
 8009426:	d86d      	bhi.n	8009504 <UART_SetConfig+0x628>
 8009428:	a201      	add	r2, pc, #4	; (adr r2, 8009430 <UART_SetConfig+0x554>)
 800942a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942e:	bf00      	nop
 8009430:	080094d5 	.word	0x080094d5
 8009434:	08009505 	.word	0x08009505
 8009438:	08009505 	.word	0x08009505
 800943c:	08009505 	.word	0x08009505
 8009440:	08009505 	.word	0x08009505
 8009444:	08009505 	.word	0x08009505
 8009448:	08009505 	.word	0x08009505
 800944c:	08009505 	.word	0x08009505
 8009450:	080094dd 	.word	0x080094dd
 8009454:	08009505 	.word	0x08009505
 8009458:	08009505 	.word	0x08009505
 800945c:	08009505 	.word	0x08009505
 8009460:	08009505 	.word	0x08009505
 8009464:	08009505 	.word	0x08009505
 8009468:	08009505 	.word	0x08009505
 800946c:	08009505 	.word	0x08009505
 8009470:	080094e5 	.word	0x080094e5
 8009474:	08009505 	.word	0x08009505
 8009478:	08009505 	.word	0x08009505
 800947c:	08009505 	.word	0x08009505
 8009480:	08009505 	.word	0x08009505
 8009484:	08009505 	.word	0x08009505
 8009488:	08009505 	.word	0x08009505
 800948c:	08009505 	.word	0x08009505
 8009490:	080094ed 	.word	0x080094ed
 8009494:	08009505 	.word	0x08009505
 8009498:	08009505 	.word	0x08009505
 800949c:	08009505 	.word	0x08009505
 80094a0:	08009505 	.word	0x08009505
 80094a4:	08009505 	.word	0x08009505
 80094a8:	08009505 	.word	0x08009505
 80094ac:	08009505 	.word	0x08009505
 80094b0:	080094f5 	.word	0x080094f5
 80094b4:	08009505 	.word	0x08009505
 80094b8:	08009505 	.word	0x08009505
 80094bc:	08009505 	.word	0x08009505
 80094c0:	08009505 	.word	0x08009505
 80094c4:	08009505 	.word	0x08009505
 80094c8:	08009505 	.word	0x08009505
 80094cc:	08009505 	.word	0x08009505
 80094d0:	080094fd 	.word	0x080094fd
 80094d4:	2301      	movs	r3, #1
 80094d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094da:	e0d6      	b.n	800968a <UART_SetConfig+0x7ae>
 80094dc:	2304      	movs	r3, #4
 80094de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094e2:	e0d2      	b.n	800968a <UART_SetConfig+0x7ae>
 80094e4:	2308      	movs	r3, #8
 80094e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ea:	e0ce      	b.n	800968a <UART_SetConfig+0x7ae>
 80094ec:	2310      	movs	r3, #16
 80094ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094f2:	e0ca      	b.n	800968a <UART_SetConfig+0x7ae>
 80094f4:	2320      	movs	r3, #32
 80094f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094fa:	e0c6      	b.n	800968a <UART_SetConfig+0x7ae>
 80094fc:	2340      	movs	r3, #64	; 0x40
 80094fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009502:	e0c2      	b.n	800968a <UART_SetConfig+0x7ae>
 8009504:	2380      	movs	r3, #128	; 0x80
 8009506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800950a:	e0be      	b.n	800968a <UART_SetConfig+0x7ae>
 800950c:	40011400 	.word	0x40011400
 8009510:	58024400 	.word	0x58024400
 8009514:	40007800 	.word	0x40007800
 8009518:	40007c00 	.word	0x40007c00
 800951c:	40011800 	.word	0x40011800
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4aad      	ldr	r2, [pc, #692]	; (80097dc <UART_SetConfig+0x900>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d176      	bne.n	8009618 <UART_SetConfig+0x73c>
 800952a:	4bad      	ldr	r3, [pc, #692]	; (80097e0 <UART_SetConfig+0x904>)
 800952c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800952e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009532:	2b28      	cmp	r3, #40	; 0x28
 8009534:	d86c      	bhi.n	8009610 <UART_SetConfig+0x734>
 8009536:	a201      	add	r2, pc, #4	; (adr r2, 800953c <UART_SetConfig+0x660>)
 8009538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953c:	080095e1 	.word	0x080095e1
 8009540:	08009611 	.word	0x08009611
 8009544:	08009611 	.word	0x08009611
 8009548:	08009611 	.word	0x08009611
 800954c:	08009611 	.word	0x08009611
 8009550:	08009611 	.word	0x08009611
 8009554:	08009611 	.word	0x08009611
 8009558:	08009611 	.word	0x08009611
 800955c:	080095e9 	.word	0x080095e9
 8009560:	08009611 	.word	0x08009611
 8009564:	08009611 	.word	0x08009611
 8009568:	08009611 	.word	0x08009611
 800956c:	08009611 	.word	0x08009611
 8009570:	08009611 	.word	0x08009611
 8009574:	08009611 	.word	0x08009611
 8009578:	08009611 	.word	0x08009611
 800957c:	080095f1 	.word	0x080095f1
 8009580:	08009611 	.word	0x08009611
 8009584:	08009611 	.word	0x08009611
 8009588:	08009611 	.word	0x08009611
 800958c:	08009611 	.word	0x08009611
 8009590:	08009611 	.word	0x08009611
 8009594:	08009611 	.word	0x08009611
 8009598:	08009611 	.word	0x08009611
 800959c:	080095f9 	.word	0x080095f9
 80095a0:	08009611 	.word	0x08009611
 80095a4:	08009611 	.word	0x08009611
 80095a8:	08009611 	.word	0x08009611
 80095ac:	08009611 	.word	0x08009611
 80095b0:	08009611 	.word	0x08009611
 80095b4:	08009611 	.word	0x08009611
 80095b8:	08009611 	.word	0x08009611
 80095bc:	08009601 	.word	0x08009601
 80095c0:	08009611 	.word	0x08009611
 80095c4:	08009611 	.word	0x08009611
 80095c8:	08009611 	.word	0x08009611
 80095cc:	08009611 	.word	0x08009611
 80095d0:	08009611 	.word	0x08009611
 80095d4:	08009611 	.word	0x08009611
 80095d8:	08009611 	.word	0x08009611
 80095dc:	08009609 	.word	0x08009609
 80095e0:	2301      	movs	r3, #1
 80095e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095e6:	e050      	b.n	800968a <UART_SetConfig+0x7ae>
 80095e8:	2304      	movs	r3, #4
 80095ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ee:	e04c      	b.n	800968a <UART_SetConfig+0x7ae>
 80095f0:	2308      	movs	r3, #8
 80095f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095f6:	e048      	b.n	800968a <UART_SetConfig+0x7ae>
 80095f8:	2310      	movs	r3, #16
 80095fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095fe:	e044      	b.n	800968a <UART_SetConfig+0x7ae>
 8009600:	2320      	movs	r3, #32
 8009602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009606:	e040      	b.n	800968a <UART_SetConfig+0x7ae>
 8009608:	2340      	movs	r3, #64	; 0x40
 800960a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800960e:	e03c      	b.n	800968a <UART_SetConfig+0x7ae>
 8009610:	2380      	movs	r3, #128	; 0x80
 8009612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009616:	e038      	b.n	800968a <UART_SetConfig+0x7ae>
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a71      	ldr	r2, [pc, #452]	; (80097e4 <UART_SetConfig+0x908>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d130      	bne.n	8009684 <UART_SetConfig+0x7a8>
 8009622:	4b6f      	ldr	r3, [pc, #444]	; (80097e0 <UART_SetConfig+0x904>)
 8009624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009626:	f003 0307 	and.w	r3, r3, #7
 800962a:	2b05      	cmp	r3, #5
 800962c:	d826      	bhi.n	800967c <UART_SetConfig+0x7a0>
 800962e:	a201      	add	r2, pc, #4	; (adr r2, 8009634 <UART_SetConfig+0x758>)
 8009630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009634:	0800964d 	.word	0x0800964d
 8009638:	08009655 	.word	0x08009655
 800963c:	0800965d 	.word	0x0800965d
 8009640:	08009665 	.word	0x08009665
 8009644:	0800966d 	.word	0x0800966d
 8009648:	08009675 	.word	0x08009675
 800964c:	2302      	movs	r3, #2
 800964e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009652:	e01a      	b.n	800968a <UART_SetConfig+0x7ae>
 8009654:	2304      	movs	r3, #4
 8009656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800965a:	e016      	b.n	800968a <UART_SetConfig+0x7ae>
 800965c:	2308      	movs	r3, #8
 800965e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009662:	e012      	b.n	800968a <UART_SetConfig+0x7ae>
 8009664:	2310      	movs	r3, #16
 8009666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800966a:	e00e      	b.n	800968a <UART_SetConfig+0x7ae>
 800966c:	2320      	movs	r3, #32
 800966e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009672:	e00a      	b.n	800968a <UART_SetConfig+0x7ae>
 8009674:	2340      	movs	r3, #64	; 0x40
 8009676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800967a:	e006      	b.n	800968a <UART_SetConfig+0x7ae>
 800967c:	2380      	movs	r3, #128	; 0x80
 800967e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009682:	e002      	b.n	800968a <UART_SetConfig+0x7ae>
 8009684:	2380      	movs	r3, #128	; 0x80
 8009686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a55      	ldr	r2, [pc, #340]	; (80097e4 <UART_SetConfig+0x908>)
 8009690:	4293      	cmp	r3, r2
 8009692:	f040 80f8 	bne.w	8009886 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009696:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800969a:	2b20      	cmp	r3, #32
 800969c:	dc46      	bgt.n	800972c <UART_SetConfig+0x850>
 800969e:	2b02      	cmp	r3, #2
 80096a0:	db75      	blt.n	800978e <UART_SetConfig+0x8b2>
 80096a2:	3b02      	subs	r3, #2
 80096a4:	2b1e      	cmp	r3, #30
 80096a6:	d872      	bhi.n	800978e <UART_SetConfig+0x8b2>
 80096a8:	a201      	add	r2, pc, #4	; (adr r2, 80096b0 <UART_SetConfig+0x7d4>)
 80096aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ae:	bf00      	nop
 80096b0:	08009733 	.word	0x08009733
 80096b4:	0800978f 	.word	0x0800978f
 80096b8:	0800973b 	.word	0x0800973b
 80096bc:	0800978f 	.word	0x0800978f
 80096c0:	0800978f 	.word	0x0800978f
 80096c4:	0800978f 	.word	0x0800978f
 80096c8:	0800974b 	.word	0x0800974b
 80096cc:	0800978f 	.word	0x0800978f
 80096d0:	0800978f 	.word	0x0800978f
 80096d4:	0800978f 	.word	0x0800978f
 80096d8:	0800978f 	.word	0x0800978f
 80096dc:	0800978f 	.word	0x0800978f
 80096e0:	0800978f 	.word	0x0800978f
 80096e4:	0800978f 	.word	0x0800978f
 80096e8:	0800975b 	.word	0x0800975b
 80096ec:	0800978f 	.word	0x0800978f
 80096f0:	0800978f 	.word	0x0800978f
 80096f4:	0800978f 	.word	0x0800978f
 80096f8:	0800978f 	.word	0x0800978f
 80096fc:	0800978f 	.word	0x0800978f
 8009700:	0800978f 	.word	0x0800978f
 8009704:	0800978f 	.word	0x0800978f
 8009708:	0800978f 	.word	0x0800978f
 800970c:	0800978f 	.word	0x0800978f
 8009710:	0800978f 	.word	0x0800978f
 8009714:	0800978f 	.word	0x0800978f
 8009718:	0800978f 	.word	0x0800978f
 800971c:	0800978f 	.word	0x0800978f
 8009720:	0800978f 	.word	0x0800978f
 8009724:	0800978f 	.word	0x0800978f
 8009728:	08009781 	.word	0x08009781
 800972c:	2b40      	cmp	r3, #64	; 0x40
 800972e:	d02a      	beq.n	8009786 <UART_SetConfig+0x8aa>
 8009730:	e02d      	b.n	800978e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009732:	f7fc ffc1 	bl	80066b8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009736:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009738:	e02f      	b.n	800979a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800973a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800973e:	4618      	mov	r0, r3
 8009740:	f7fc ffd0 	bl	80066e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009748:	e027      	b.n	800979a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800974a:	f107 0318 	add.w	r3, r7, #24
 800974e:	4618      	mov	r0, r3
 8009750:	f7fd f91c 	bl	800698c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009758:	e01f      	b.n	800979a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800975a:	4b21      	ldr	r3, [pc, #132]	; (80097e0 <UART_SetConfig+0x904>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 0320 	and.w	r3, r3, #32
 8009762:	2b00      	cmp	r3, #0
 8009764:	d009      	beq.n	800977a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009766:	4b1e      	ldr	r3, [pc, #120]	; (80097e0 <UART_SetConfig+0x904>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	08db      	lsrs	r3, r3, #3
 800976c:	f003 0303 	and.w	r3, r3, #3
 8009770:	4a1d      	ldr	r2, [pc, #116]	; (80097e8 <UART_SetConfig+0x90c>)
 8009772:	fa22 f303 	lsr.w	r3, r2, r3
 8009776:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009778:	e00f      	b.n	800979a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800977a:	4b1b      	ldr	r3, [pc, #108]	; (80097e8 <UART_SetConfig+0x90c>)
 800977c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800977e:	e00c      	b.n	800979a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009780:	4b1a      	ldr	r3, [pc, #104]	; (80097ec <UART_SetConfig+0x910>)
 8009782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009784:	e009      	b.n	800979a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800978a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800978c:	e005      	b.n	800979a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800978e:	2300      	movs	r3, #0
 8009790:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009798:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800979a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800979c:	2b00      	cmp	r3, #0
 800979e:	f000 81ee 	beq.w	8009b7e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a6:	4a12      	ldr	r2, [pc, #72]	; (80097f0 <UART_SetConfig+0x914>)
 80097a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097ac:	461a      	mov	r2, r3
 80097ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80097b4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	685a      	ldr	r2, [r3, #4]
 80097ba:	4613      	mov	r3, r2
 80097bc:	005b      	lsls	r3, r3, #1
 80097be:	4413      	add	r3, r2
 80097c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d305      	bcc.n	80097d2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d910      	bls.n	80097f4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80097d8:	e1d1      	b.n	8009b7e <UART_SetConfig+0xca2>
 80097da:	bf00      	nop
 80097dc:	40011c00 	.word	0x40011c00
 80097e0:	58024400 	.word	0x58024400
 80097e4:	58000c00 	.word	0x58000c00
 80097e8:	03d09000 	.word	0x03d09000
 80097ec:	003d0900 	.word	0x003d0900
 80097f0:	08015720 	.word	0x08015720
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097f6:	2200      	movs	r2, #0
 80097f8:	60bb      	str	r3, [r7, #8]
 80097fa:	60fa      	str	r2, [r7, #12]
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009800:	4ac0      	ldr	r2, [pc, #768]	; (8009b04 <UART_SetConfig+0xc28>)
 8009802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009806:	b29b      	uxth	r3, r3
 8009808:	2200      	movs	r2, #0
 800980a:	603b      	str	r3, [r7, #0]
 800980c:	607a      	str	r2, [r7, #4]
 800980e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009812:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009816:	f7f6 fdd3 	bl	80003c0 <__aeabi_uldivmod>
 800981a:	4602      	mov	r2, r0
 800981c:	460b      	mov	r3, r1
 800981e:	4610      	mov	r0, r2
 8009820:	4619      	mov	r1, r3
 8009822:	f04f 0200 	mov.w	r2, #0
 8009826:	f04f 0300 	mov.w	r3, #0
 800982a:	020b      	lsls	r3, r1, #8
 800982c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009830:	0202      	lsls	r2, r0, #8
 8009832:	6979      	ldr	r1, [r7, #20]
 8009834:	6849      	ldr	r1, [r1, #4]
 8009836:	0849      	lsrs	r1, r1, #1
 8009838:	2000      	movs	r0, #0
 800983a:	460c      	mov	r4, r1
 800983c:	4605      	mov	r5, r0
 800983e:	eb12 0804 	adds.w	r8, r2, r4
 8009842:	eb43 0905 	adc.w	r9, r3, r5
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	469a      	mov	sl, r3
 800984e:	4693      	mov	fp, r2
 8009850:	4652      	mov	r2, sl
 8009852:	465b      	mov	r3, fp
 8009854:	4640      	mov	r0, r8
 8009856:	4649      	mov	r1, r9
 8009858:	f7f6 fdb2 	bl	80003c0 <__aeabi_uldivmod>
 800985c:	4602      	mov	r2, r0
 800985e:	460b      	mov	r3, r1
 8009860:	4613      	mov	r3, r2
 8009862:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800986a:	d308      	bcc.n	800987e <UART_SetConfig+0x9a2>
 800986c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009872:	d204      	bcs.n	800987e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800987a:	60da      	str	r2, [r3, #12]
 800987c:	e17f      	b.n	8009b7e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009884:	e17b      	b.n	8009b7e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	69db      	ldr	r3, [r3, #28]
 800988a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800988e:	f040 80bd 	bne.w	8009a0c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009892:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009896:	2b20      	cmp	r3, #32
 8009898:	dc48      	bgt.n	800992c <UART_SetConfig+0xa50>
 800989a:	2b00      	cmp	r3, #0
 800989c:	db7b      	blt.n	8009996 <UART_SetConfig+0xaba>
 800989e:	2b20      	cmp	r3, #32
 80098a0:	d879      	bhi.n	8009996 <UART_SetConfig+0xaba>
 80098a2:	a201      	add	r2, pc, #4	; (adr r2, 80098a8 <UART_SetConfig+0x9cc>)
 80098a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a8:	08009933 	.word	0x08009933
 80098ac:	0800993b 	.word	0x0800993b
 80098b0:	08009997 	.word	0x08009997
 80098b4:	08009997 	.word	0x08009997
 80098b8:	08009943 	.word	0x08009943
 80098bc:	08009997 	.word	0x08009997
 80098c0:	08009997 	.word	0x08009997
 80098c4:	08009997 	.word	0x08009997
 80098c8:	08009953 	.word	0x08009953
 80098cc:	08009997 	.word	0x08009997
 80098d0:	08009997 	.word	0x08009997
 80098d4:	08009997 	.word	0x08009997
 80098d8:	08009997 	.word	0x08009997
 80098dc:	08009997 	.word	0x08009997
 80098e0:	08009997 	.word	0x08009997
 80098e4:	08009997 	.word	0x08009997
 80098e8:	08009963 	.word	0x08009963
 80098ec:	08009997 	.word	0x08009997
 80098f0:	08009997 	.word	0x08009997
 80098f4:	08009997 	.word	0x08009997
 80098f8:	08009997 	.word	0x08009997
 80098fc:	08009997 	.word	0x08009997
 8009900:	08009997 	.word	0x08009997
 8009904:	08009997 	.word	0x08009997
 8009908:	08009997 	.word	0x08009997
 800990c:	08009997 	.word	0x08009997
 8009910:	08009997 	.word	0x08009997
 8009914:	08009997 	.word	0x08009997
 8009918:	08009997 	.word	0x08009997
 800991c:	08009997 	.word	0x08009997
 8009920:	08009997 	.word	0x08009997
 8009924:	08009997 	.word	0x08009997
 8009928:	08009989 	.word	0x08009989
 800992c:	2b40      	cmp	r3, #64	; 0x40
 800992e:	d02e      	beq.n	800998e <UART_SetConfig+0xab2>
 8009930:	e031      	b.n	8009996 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009932:	f7fb ff59 	bl	80057e8 <HAL_RCC_GetPCLK1Freq>
 8009936:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009938:	e033      	b.n	80099a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800993a:	f7fb ff6b 	bl	8005814 <HAL_RCC_GetPCLK2Freq>
 800993e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009940:	e02f      	b.n	80099a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009946:	4618      	mov	r0, r3
 8009948:	f7fc fecc 	bl	80066e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800994c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009950:	e027      	b.n	80099a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009952:	f107 0318 	add.w	r3, r7, #24
 8009956:	4618      	mov	r0, r3
 8009958:	f7fd f818 	bl	800698c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009960:	e01f      	b.n	80099a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009962:	4b69      	ldr	r3, [pc, #420]	; (8009b08 <UART_SetConfig+0xc2c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f003 0320 	and.w	r3, r3, #32
 800996a:	2b00      	cmp	r3, #0
 800996c:	d009      	beq.n	8009982 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800996e:	4b66      	ldr	r3, [pc, #408]	; (8009b08 <UART_SetConfig+0xc2c>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	08db      	lsrs	r3, r3, #3
 8009974:	f003 0303 	and.w	r3, r3, #3
 8009978:	4a64      	ldr	r2, [pc, #400]	; (8009b0c <UART_SetConfig+0xc30>)
 800997a:	fa22 f303 	lsr.w	r3, r2, r3
 800997e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009980:	e00f      	b.n	80099a2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009982:	4b62      	ldr	r3, [pc, #392]	; (8009b0c <UART_SetConfig+0xc30>)
 8009984:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009986:	e00c      	b.n	80099a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009988:	4b61      	ldr	r3, [pc, #388]	; (8009b10 <UART_SetConfig+0xc34>)
 800998a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800998c:	e009      	b.n	80099a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800998e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009992:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009994:	e005      	b.n	80099a2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009996:	2300      	movs	r3, #0
 8009998:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80099a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80099a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 80ea 	beq.w	8009b7e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ae:	4a55      	ldr	r2, [pc, #340]	; (8009b04 <UART_SetConfig+0xc28>)
 80099b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099b4:	461a      	mov	r2, r3
 80099b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80099bc:	005a      	lsls	r2, r3, #1
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	085b      	lsrs	r3, r3, #1
 80099c4:	441a      	add	r2, r3
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80099ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d2:	2b0f      	cmp	r3, #15
 80099d4:	d916      	bls.n	8009a04 <UART_SetConfig+0xb28>
 80099d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099dc:	d212      	bcs.n	8009a04 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	f023 030f 	bic.w	r3, r3, #15
 80099e6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ea:	085b      	lsrs	r3, r3, #1
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	f003 0307 	and.w	r3, r3, #7
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80099f6:	4313      	orrs	r3, r2
 80099f8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009a00:	60da      	str	r2, [r3, #12]
 8009a02:	e0bc      	b.n	8009b7e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009a0a:	e0b8      	b.n	8009b7e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a0c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009a10:	2b20      	cmp	r3, #32
 8009a12:	dc4b      	bgt.n	8009aac <UART_SetConfig+0xbd0>
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f2c0 8087 	blt.w	8009b28 <UART_SetConfig+0xc4c>
 8009a1a:	2b20      	cmp	r3, #32
 8009a1c:	f200 8084 	bhi.w	8009b28 <UART_SetConfig+0xc4c>
 8009a20:	a201      	add	r2, pc, #4	; (adr r2, 8009a28 <UART_SetConfig+0xb4c>)
 8009a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a26:	bf00      	nop
 8009a28:	08009ab3 	.word	0x08009ab3
 8009a2c:	08009abb 	.word	0x08009abb
 8009a30:	08009b29 	.word	0x08009b29
 8009a34:	08009b29 	.word	0x08009b29
 8009a38:	08009ac3 	.word	0x08009ac3
 8009a3c:	08009b29 	.word	0x08009b29
 8009a40:	08009b29 	.word	0x08009b29
 8009a44:	08009b29 	.word	0x08009b29
 8009a48:	08009ad3 	.word	0x08009ad3
 8009a4c:	08009b29 	.word	0x08009b29
 8009a50:	08009b29 	.word	0x08009b29
 8009a54:	08009b29 	.word	0x08009b29
 8009a58:	08009b29 	.word	0x08009b29
 8009a5c:	08009b29 	.word	0x08009b29
 8009a60:	08009b29 	.word	0x08009b29
 8009a64:	08009b29 	.word	0x08009b29
 8009a68:	08009ae3 	.word	0x08009ae3
 8009a6c:	08009b29 	.word	0x08009b29
 8009a70:	08009b29 	.word	0x08009b29
 8009a74:	08009b29 	.word	0x08009b29
 8009a78:	08009b29 	.word	0x08009b29
 8009a7c:	08009b29 	.word	0x08009b29
 8009a80:	08009b29 	.word	0x08009b29
 8009a84:	08009b29 	.word	0x08009b29
 8009a88:	08009b29 	.word	0x08009b29
 8009a8c:	08009b29 	.word	0x08009b29
 8009a90:	08009b29 	.word	0x08009b29
 8009a94:	08009b29 	.word	0x08009b29
 8009a98:	08009b29 	.word	0x08009b29
 8009a9c:	08009b29 	.word	0x08009b29
 8009aa0:	08009b29 	.word	0x08009b29
 8009aa4:	08009b29 	.word	0x08009b29
 8009aa8:	08009b1b 	.word	0x08009b1b
 8009aac:	2b40      	cmp	r3, #64	; 0x40
 8009aae:	d037      	beq.n	8009b20 <UART_SetConfig+0xc44>
 8009ab0:	e03a      	b.n	8009b28 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ab2:	f7fb fe99 	bl	80057e8 <HAL_RCC_GetPCLK1Freq>
 8009ab6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009ab8:	e03c      	b.n	8009b34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009aba:	f7fb feab 	bl	8005814 <HAL_RCC_GetPCLK2Freq>
 8009abe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009ac0:	e038      	b.n	8009b34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7fc fe0c 	bl	80066e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ace:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ad0:	e030      	b.n	8009b34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ad2:	f107 0318 	add.w	r3, r7, #24
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7fc ff58 	bl	800698c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009adc:	69fb      	ldr	r3, [r7, #28]
 8009ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ae0:	e028      	b.n	8009b34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ae2:	4b09      	ldr	r3, [pc, #36]	; (8009b08 <UART_SetConfig+0xc2c>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f003 0320 	and.w	r3, r3, #32
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d012      	beq.n	8009b14 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009aee:	4b06      	ldr	r3, [pc, #24]	; (8009b08 <UART_SetConfig+0xc2c>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	08db      	lsrs	r3, r3, #3
 8009af4:	f003 0303 	and.w	r3, r3, #3
 8009af8:	4a04      	ldr	r2, [pc, #16]	; (8009b0c <UART_SetConfig+0xc30>)
 8009afa:	fa22 f303 	lsr.w	r3, r2, r3
 8009afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b00:	e018      	b.n	8009b34 <UART_SetConfig+0xc58>
 8009b02:	bf00      	nop
 8009b04:	08015720 	.word	0x08015720
 8009b08:	58024400 	.word	0x58024400
 8009b0c:	03d09000 	.word	0x03d09000
 8009b10:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009b14:	4b24      	ldr	r3, [pc, #144]	; (8009ba8 <UART_SetConfig+0xccc>)
 8009b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b18:	e00c      	b.n	8009b34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b1a:	4b24      	ldr	r3, [pc, #144]	; (8009bac <UART_SetConfig+0xcd0>)
 8009b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b1e:	e009      	b.n	8009b34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b26:	e005      	b.n	8009b34 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009b32:	bf00      	nop
    }

    if (pclk != 0U)
 8009b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d021      	beq.n	8009b7e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3e:	4a1c      	ldr	r2, [pc, #112]	; (8009bb0 <UART_SetConfig+0xcd4>)
 8009b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b44:	461a      	mov	r2, r3
 8009b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b48:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	085b      	lsrs	r3, r3, #1
 8009b52:	441a      	add	r2, r3
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b5c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b60:	2b0f      	cmp	r3, #15
 8009b62:	d909      	bls.n	8009b78 <UART_SetConfig+0xc9c>
 8009b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b6a:	d205      	bcs.n	8009b78 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	60da      	str	r2, [r3, #12]
 8009b76:	e002      	b.n	8009b7e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	2201      	movs	r2, #1
 8009b82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	2200      	movs	r2, #0
 8009b92:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	2200      	movs	r2, #0
 8009b98:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009b9a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3748      	adds	r7, #72	; 0x48
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ba8:	03d09000 	.word	0x03d09000
 8009bac:	003d0900 	.word	0x003d0900
 8009bb0:	08015720 	.word	0x08015720

08009bb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc0:	f003 0301 	and.w	r3, r3, #1
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d00a      	beq.n	8009bde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	430a      	orrs	r2, r1
 8009bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be2:	f003 0302 	and.w	r3, r3, #2
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00a      	beq.n	8009c00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	430a      	orrs	r2, r1
 8009bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c04:	f003 0304 	and.w	r3, r3, #4
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00a      	beq.n	8009c22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	430a      	orrs	r2, r1
 8009c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c26:	f003 0308 	and.w	r3, r3, #8
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00a      	beq.n	8009c44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	430a      	orrs	r2, r1
 8009c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c48:	f003 0310 	and.w	r3, r3, #16
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00a      	beq.n	8009c66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	430a      	orrs	r2, r1
 8009c64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c6a:	f003 0320 	and.w	r3, r3, #32
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00a      	beq.n	8009c88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	430a      	orrs	r2, r1
 8009c86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d01a      	beq.n	8009cca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	430a      	orrs	r2, r1
 8009ca8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cb2:	d10a      	bne.n	8009cca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	430a      	orrs	r2, r1
 8009cc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00a      	beq.n	8009cec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	430a      	orrs	r2, r1
 8009cea:	605a      	str	r2, [r3, #4]
  }
}
 8009cec:	bf00      	nop
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b086      	sub	sp, #24
 8009cfc:	af02      	add	r7, sp, #8
 8009cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d08:	f7f8 f8d8 	bl	8001ebc <HAL_GetTick>
 8009d0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 0308 	and.w	r3, r3, #8
 8009d18:	2b08      	cmp	r3, #8
 8009d1a:	d10e      	bne.n	8009d3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d20:	9300      	str	r3, [sp, #0]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 f82f 	bl	8009d8e <UART_WaitOnFlagUntilTimeout>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d001      	beq.n	8009d3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d36:	2303      	movs	r3, #3
 8009d38:	e025      	b.n	8009d86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f003 0304 	and.w	r3, r3, #4
 8009d44:	2b04      	cmp	r3, #4
 8009d46:	d10e      	bne.n	8009d66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f819 	bl	8009d8e <UART_WaitOnFlagUntilTimeout>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d62:	2303      	movs	r3, #3
 8009d64:	e00f      	b.n	8009d86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2220      	movs	r2, #32
 8009d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2220      	movs	r2, #32
 8009d72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b09c      	sub	sp, #112	; 0x70
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	60f8      	str	r0, [r7, #12]
 8009d96:	60b9      	str	r1, [r7, #8]
 8009d98:	603b      	str	r3, [r7, #0]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d9e:	e0a9      	b.n	8009ef4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009da0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da6:	f000 80a5 	beq.w	8009ef4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009daa:	f7f8 f887 	bl	8001ebc <HAL_GetTick>
 8009dae:	4602      	mov	r2, r0
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d302      	bcc.n	8009dc0 <UART_WaitOnFlagUntilTimeout+0x32>
 8009dba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d140      	bne.n	8009e42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dc8:	e853 3f00 	ldrex	r3, [r3]
 8009dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009dd4:	667b      	str	r3, [r7, #100]	; 0x64
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	461a      	mov	r2, r3
 8009ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009de0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009de4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009de6:	e841 2300 	strex	r3, r2, [r1]
 8009dea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1e6      	bne.n	8009dc0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	3308      	adds	r3, #8
 8009df8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dfc:	e853 3f00 	ldrex	r3, [r3]
 8009e00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e04:	f023 0301 	bic.w	r3, r3, #1
 8009e08:	663b      	str	r3, [r7, #96]	; 0x60
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	3308      	adds	r3, #8
 8009e10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009e12:	64ba      	str	r2, [r7, #72]	; 0x48
 8009e14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009e18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e1a:	e841 2300 	strex	r3, r2, [r1]
 8009e1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d1e5      	bne.n	8009df2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2220      	movs	r2, #32
 8009e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2220      	movs	r2, #32
 8009e32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	e069      	b.n	8009f16 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f003 0304 	and.w	r3, r3, #4
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d051      	beq.n	8009ef4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	69db      	ldr	r3, [r3, #28]
 8009e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e5e:	d149      	bne.n	8009ef4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e72:	e853 3f00 	ldrex	r3, [r3]
 8009e76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009e7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	461a      	mov	r2, r3
 8009e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e88:	637b      	str	r3, [r7, #52]	; 0x34
 8009e8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e90:	e841 2300 	strex	r3, r2, [r1]
 8009e94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d1e6      	bne.n	8009e6a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	3308      	adds	r3, #8
 8009ea2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	e853 3f00 	ldrex	r3, [r3]
 8009eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	f023 0301 	bic.w	r3, r3, #1
 8009eb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	3308      	adds	r3, #8
 8009eba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ebc:	623a      	str	r2, [r7, #32]
 8009ebe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec0:	69f9      	ldr	r1, [r7, #28]
 8009ec2:	6a3a      	ldr	r2, [r7, #32]
 8009ec4:	e841 2300 	strex	r3, r2, [r1]
 8009ec8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1e5      	bne.n	8009e9c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2220      	movs	r2, #32
 8009ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2220      	movs	r2, #32
 8009edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2220      	movs	r2, #32
 8009ee4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	e010      	b.n	8009f16 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	69da      	ldr	r2, [r3, #28]
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	4013      	ands	r3, r2
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	bf0c      	ite	eq
 8009f04:	2301      	moveq	r3, #1
 8009f06:	2300      	movne	r3, #0
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	79fb      	ldrb	r3, [r7, #7]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	f43f af46 	beq.w	8009da0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3770      	adds	r7, #112	; 0x70
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
	...

08009f20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b0a3      	sub	sp, #140	; 0x8c
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	68ba      	ldr	r2, [r7, #8]
 8009f32:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	88fa      	ldrh	r2, [r7, #6]
 8009f38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	88fa      	ldrh	r2, [r7, #6]
 8009f40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2200      	movs	r2, #0
 8009f48:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f52:	d10e      	bne.n	8009f72 <UART_Start_Receive_IT+0x52>
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d105      	bne.n	8009f68 <UART_Start_Receive_IT+0x48>
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009f62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009f66:	e02d      	b.n	8009fc4 <UART_Start_Receive_IT+0xa4>
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	22ff      	movs	r2, #255	; 0xff
 8009f6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009f70:	e028      	b.n	8009fc4 <UART_Start_Receive_IT+0xa4>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10d      	bne.n	8009f96 <UART_Start_Receive_IT+0x76>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	691b      	ldr	r3, [r3, #16]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d104      	bne.n	8009f8c <UART_Start_Receive_IT+0x6c>
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	22ff      	movs	r2, #255	; 0xff
 8009f86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009f8a:	e01b      	b.n	8009fc4 <UART_Start_Receive_IT+0xa4>
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	227f      	movs	r2, #127	; 0x7f
 8009f90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009f94:	e016      	b.n	8009fc4 <UART_Start_Receive_IT+0xa4>
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f9e:	d10d      	bne.n	8009fbc <UART_Start_Receive_IT+0x9c>
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d104      	bne.n	8009fb2 <UART_Start_Receive_IT+0x92>
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	227f      	movs	r2, #127	; 0x7f
 8009fac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009fb0:	e008      	b.n	8009fc4 <UART_Start_Receive_IT+0xa4>
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	223f      	movs	r2, #63	; 0x3f
 8009fb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009fba:	e003      	b.n	8009fc4 <UART_Start_Receive_IT+0xa4>
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2222      	movs	r2, #34	; 0x22
 8009fd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	3308      	adds	r3, #8
 8009fda:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fde:	e853 3f00 	ldrex	r3, [r3]
 8009fe2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009fe4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fe6:	f043 0301 	orr.w	r3, r3, #1
 8009fea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	3308      	adds	r3, #8
 8009ff4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009ff8:	673a      	str	r2, [r7, #112]	; 0x70
 8009ffa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009ffe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a000:	e841 2300 	strex	r3, r2, [r1]
 800a004:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800a006:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1e3      	bne.n	8009fd4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a014:	d153      	bne.n	800a0be <UART_Start_Receive_IT+0x19e>
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a01c:	88fa      	ldrh	r2, [r7, #6]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d34d      	bcc.n	800a0be <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a02a:	d107      	bne.n	800a03c <UART_Start_Receive_IT+0x11c>
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d103      	bne.n	800a03c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	4a4b      	ldr	r2, [pc, #300]	; (800a164 <UART_Start_Receive_IT+0x244>)
 800a038:	671a      	str	r2, [r3, #112]	; 0x70
 800a03a:	e002      	b.n	800a042 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	4a4a      	ldr	r2, [pc, #296]	; (800a168 <UART_Start_Receive_IT+0x248>)
 800a040:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2200      	movs	r2, #0
 800a046:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d01a      	beq.n	800a088 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a05a:	e853 3f00 	ldrex	r3, [r3]
 800a05e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a066:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	461a      	mov	r2, r3
 800a070:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a074:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a076:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a078:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a07a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a07c:	e841 2300 	strex	r3, r2, [r1]
 800a080:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a084:	2b00      	cmp	r3, #0
 800a086:	d1e4      	bne.n	800a052 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	3308      	adds	r3, #8
 800a08e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a092:	e853 3f00 	ldrex	r3, [r3]
 800a096:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a09e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	3308      	adds	r3, #8
 800a0a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a0a8:	64ba      	str	r2, [r7, #72]	; 0x48
 800a0aa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a0ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0b0:	e841 2300 	strex	r3, r2, [r1]
 800a0b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a0b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d1e5      	bne.n	800a088 <UART_Start_Receive_IT+0x168>
 800a0bc:	e04a      	b.n	800a154 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0c6:	d107      	bne.n	800a0d8 <UART_Start_Receive_IT+0x1b8>
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	691b      	ldr	r3, [r3, #16]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d103      	bne.n	800a0d8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	4a26      	ldr	r2, [pc, #152]	; (800a16c <UART_Start_Receive_IT+0x24c>)
 800a0d4:	671a      	str	r2, [r3, #112]	; 0x70
 800a0d6:	e002      	b.n	800a0de <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	4a25      	ldr	r2, [pc, #148]	; (800a170 <UART_Start_Receive_IT+0x250>)
 800a0dc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d019      	beq.n	800a122 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f6:	e853 3f00 	ldrex	r3, [r3]
 800a0fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a102:	677b      	str	r3, [r7, #116]	; 0x74
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	461a      	mov	r2, r3
 800a10a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a10c:	637b      	str	r3, [r7, #52]	; 0x34
 800a10e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a110:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a114:	e841 2300 	strex	r3, r2, [r1]
 800a118:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d1e6      	bne.n	800a0ee <UART_Start_Receive_IT+0x1ce>
 800a120:	e018      	b.n	800a154 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	e853 3f00 	ldrex	r3, [r3]
 800a12e:	613b      	str	r3, [r7, #16]
   return(result);
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	f043 0320 	orr.w	r3, r3, #32
 800a136:	67bb      	str	r3, [r7, #120]	; 0x78
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	461a      	mov	r2, r3
 800a13e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a140:	623b      	str	r3, [r7, #32]
 800a142:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a144:	69f9      	ldr	r1, [r7, #28]
 800a146:	6a3a      	ldr	r2, [r7, #32]
 800a148:	e841 2300 	strex	r3, r2, [r1]
 800a14c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d1e6      	bne.n	800a122 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	378c      	adds	r7, #140	; 0x8c
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	0800a87d 	.word	0x0800a87d
 800a168:	0800a585 	.word	0x0800a585
 800a16c:	0800a423 	.word	0x0800a423
 800a170:	0800a2c3 	.word	0x0800a2c3

0800a174 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a174:	b480      	push	{r7}
 800a176:	b095      	sub	sp, #84	; 0x54
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a184:	e853 3f00 	ldrex	r3, [r3]
 800a188:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a190:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	461a      	mov	r2, r3
 800a198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a19a:	643b      	str	r3, [r7, #64]	; 0x40
 800a19c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a19e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a1a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1a2:	e841 2300 	strex	r3, r2, [r1]
 800a1a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d1e6      	bne.n	800a17c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	3308      	adds	r3, #8
 800a1b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b6:	6a3b      	ldr	r3, [r7, #32]
 800a1b8:	e853 3f00 	ldrex	r3, [r3]
 800a1bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1be:	69fa      	ldr	r2, [r7, #28]
 800a1c0:	4b1e      	ldr	r3, [pc, #120]	; (800a23c <UART_EndRxTransfer+0xc8>)
 800a1c2:	4013      	ands	r3, r2
 800a1c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	3308      	adds	r3, #8
 800a1cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a1d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1d6:	e841 2300 	strex	r3, r2, [r1]
 800a1da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1e5      	bne.n	800a1ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d118      	bne.n	800a21c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	e853 3f00 	ldrex	r3, [r3]
 800a1f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	f023 0310 	bic.w	r3, r3, #16
 800a1fe:	647b      	str	r3, [r7, #68]	; 0x44
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	461a      	mov	r2, r3
 800a206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a208:	61bb      	str	r3, [r7, #24]
 800a20a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20c:	6979      	ldr	r1, [r7, #20]
 800a20e:	69ba      	ldr	r2, [r7, #24]
 800a210:	e841 2300 	strex	r3, r2, [r1]
 800a214:	613b      	str	r3, [r7, #16]
   return(result);
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1e6      	bne.n	800a1ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2220      	movs	r2, #32
 800a220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a230:	bf00      	nop
 800a232:	3754      	adds	r7, #84	; 0x54
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr
 800a23c:	effffffe 	.word	0xeffffffe

0800a240 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a24c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2200      	movs	r2, #0
 800a252:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2200      	movs	r2, #0
 800a25a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f7fe fe26 	bl	8008eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a264:	bf00      	nop
 800a266:	3710      	adds	r7, #16
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b088      	sub	sp, #32
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	e853 3f00 	ldrex	r3, [r3]
 800a280:	60bb      	str	r3, [r7, #8]
   return(result);
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a288:	61fb      	str	r3, [r7, #28]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	461a      	mov	r2, r3
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	61bb      	str	r3, [r7, #24]
 800a294:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a296:	6979      	ldr	r1, [r7, #20]
 800a298:	69ba      	ldr	r2, [r7, #24]
 800a29a:	e841 2300 	strex	r3, r2, [r1]
 800a29e:	613b      	str	r3, [r7, #16]
   return(result);
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d1e6      	bne.n	800a274 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2220      	movs	r2, #32
 800a2aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f7fe fdf1 	bl	8008e9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2ba:	bf00      	nop
 800a2bc:	3720      	adds	r7, #32
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b096      	sub	sp, #88	; 0x58
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a2d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2da:	2b22      	cmp	r3, #34	; 0x22
 800a2dc:	f040 8095 	bne.w	800a40a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a2ea:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a2ee:	b2d9      	uxtb	r1, r3
 800a2f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a2f4:	b2da      	uxtb	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2fa:	400a      	ands	r2, r1
 800a2fc:	b2d2      	uxtb	r2, r2
 800a2fe:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a304:	1c5a      	adds	r2, r3, #1
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a310:	b29b      	uxth	r3, r3
 800a312:	3b01      	subs	r3, #1
 800a314:	b29a      	uxth	r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a322:	b29b      	uxth	r3, r3
 800a324:	2b00      	cmp	r3, #0
 800a326:	d178      	bne.n	800a41a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a330:	e853 3f00 	ldrex	r3, [r3]
 800a334:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a338:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a33c:	653b      	str	r3, [r7, #80]	; 0x50
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	461a      	mov	r2, r3
 800a344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a346:	647b      	str	r3, [r7, #68]	; 0x44
 800a348:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a34c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a34e:	e841 2300 	strex	r3, r2, [r1]
 800a352:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a356:	2b00      	cmp	r3, #0
 800a358:	d1e6      	bne.n	800a328 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	3308      	adds	r3, #8
 800a360:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a364:	e853 3f00 	ldrex	r3, [r3]
 800a368:	623b      	str	r3, [r7, #32]
   return(result);
 800a36a:	6a3b      	ldr	r3, [r7, #32]
 800a36c:	f023 0301 	bic.w	r3, r3, #1
 800a370:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	3308      	adds	r3, #8
 800a378:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a37a:	633a      	str	r2, [r7, #48]	; 0x30
 800a37c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a382:	e841 2300 	strex	r3, r2, [r1]
 800a386:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d1e5      	bne.n	800a35a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2220      	movs	r2, #32
 800a392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d12e      	bne.n	800a402 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	e853 3f00 	ldrex	r3, [r3]
 800a3b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f023 0310 	bic.w	r3, r3, #16
 800a3be:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3c8:	61fb      	str	r3, [r7, #28]
 800a3ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3cc:	69b9      	ldr	r1, [r7, #24]
 800a3ce:	69fa      	ldr	r2, [r7, #28]
 800a3d0:	e841 2300 	strex	r3, r2, [r1]
 800a3d4:	617b      	str	r3, [r7, #20]
   return(result);
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d1e6      	bne.n	800a3aa <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	69db      	ldr	r3, [r3, #28]
 800a3e2:	f003 0310 	and.w	r3, r3, #16
 800a3e6:	2b10      	cmp	r3, #16
 800a3e8:	d103      	bne.n	800a3f2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	2210      	movs	r2, #16
 800a3f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f7fe fd62 	bl	8008ec4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a400:	e00b      	b.n	800a41a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f7f6 f95e 	bl	80006c4 <HAL_UART_RxCpltCallback>
}
 800a408:	e007      	b.n	800a41a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	699a      	ldr	r2, [r3, #24]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f042 0208 	orr.w	r2, r2, #8
 800a418:	619a      	str	r2, [r3, #24]
}
 800a41a:	bf00      	nop
 800a41c:	3758      	adds	r7, #88	; 0x58
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b096      	sub	sp, #88	; 0x58
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a430:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a43a:	2b22      	cmp	r3, #34	; 0x22
 800a43c:	f040 8095 	bne.w	800a56a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a446:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a44e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a450:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a454:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a458:	4013      	ands	r3, r2
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a45e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a464:	1c9a      	adds	r2, r3, #2
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a470:	b29b      	uxth	r3, r3
 800a472:	3b01      	subs	r3, #1
 800a474:	b29a      	uxth	r2, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a482:	b29b      	uxth	r3, r3
 800a484:	2b00      	cmp	r3, #0
 800a486:	d178      	bne.n	800a57a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a490:	e853 3f00 	ldrex	r3, [r3]
 800a494:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a498:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a49c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4a6:	643b      	str	r3, [r7, #64]	; 0x40
 800a4a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a4ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a4ae:	e841 2300 	strex	r3, r2, [r1]
 800a4b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1e6      	bne.n	800a488 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	3308      	adds	r3, #8
 800a4c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c2:	6a3b      	ldr	r3, [r7, #32]
 800a4c4:	e853 3f00 	ldrex	r3, [r3]
 800a4c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	f023 0301 	bic.w	r3, r3, #1
 800a4d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	3308      	adds	r3, #8
 800a4d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4da:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a4dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4e2:	e841 2300 	strex	r3, r2, [r1]
 800a4e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d1e5      	bne.n	800a4ba <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2220      	movs	r2, #32
 800a4f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a500:	2b01      	cmp	r3, #1
 800a502:	d12e      	bne.n	800a562 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	e853 3f00 	ldrex	r3, [r3]
 800a516:	60bb      	str	r3, [r7, #8]
   return(result);
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	f023 0310 	bic.w	r3, r3, #16
 800a51e:	647b      	str	r3, [r7, #68]	; 0x44
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	461a      	mov	r2, r3
 800a526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a528:	61bb      	str	r3, [r7, #24]
 800a52a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52c:	6979      	ldr	r1, [r7, #20]
 800a52e:	69ba      	ldr	r2, [r7, #24]
 800a530:	e841 2300 	strex	r3, r2, [r1]
 800a534:	613b      	str	r3, [r7, #16]
   return(result);
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1e6      	bne.n	800a50a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	69db      	ldr	r3, [r3, #28]
 800a542:	f003 0310 	and.w	r3, r3, #16
 800a546:	2b10      	cmp	r3, #16
 800a548:	d103      	bne.n	800a552 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2210      	movs	r2, #16
 800a550:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a558:	4619      	mov	r1, r3
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f7fe fcb2 	bl	8008ec4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a560:	e00b      	b.n	800a57a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f7f6 f8ae 	bl	80006c4 <HAL_UART_RxCpltCallback>
}
 800a568:	e007      	b.n	800a57a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	699a      	ldr	r2, [r3, #24]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f042 0208 	orr.w	r2, r2, #8
 800a578:	619a      	str	r2, [r3, #24]
}
 800a57a:	bf00      	nop
 800a57c:	3758      	adds	r7, #88	; 0x58
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
	...

0800a584 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b0a6      	sub	sp, #152	; 0x98
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a592:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	69db      	ldr	r3, [r3, #28]
 800a59c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ba:	2b22      	cmp	r3, #34	; 0x22
 800a5bc:	f040 814d 	bne.w	800a85a <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a5c6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a5ca:	e0f4      	b.n	800a7b6 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a5d6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800a5da:	b2d9      	uxtb	r1, r3
 800a5dc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800a5e0:	b2da      	uxtb	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5e6:	400a      	ands	r2, r1
 800a5e8:	b2d2      	uxtb	r2, r2
 800a5ea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5f0:	1c5a      	adds	r2, r3, #1
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	3b01      	subs	r3, #1
 800a600:	b29a      	uxth	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	69db      	ldr	r3, [r3, #28]
 800a60e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a612:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a616:	f003 0307 	and.w	r3, r3, #7
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d053      	beq.n	800a6c6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a61e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a622:	f003 0301 	and.w	r3, r3, #1
 800a626:	2b00      	cmp	r3, #0
 800a628:	d011      	beq.n	800a64e <UART_RxISR_8BIT_FIFOEN+0xca>
 800a62a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a62e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00b      	beq.n	800a64e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2201      	movs	r2, #1
 800a63c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a644:	f043 0201 	orr.w	r2, r3, #1
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a64e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a652:	f003 0302 	and.w	r3, r3, #2
 800a656:	2b00      	cmp	r3, #0
 800a658:	d011      	beq.n	800a67e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a65a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a65e:	f003 0301 	and.w	r3, r3, #1
 800a662:	2b00      	cmp	r3, #0
 800a664:	d00b      	beq.n	800a67e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2202      	movs	r2, #2
 800a66c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a674:	f043 0204 	orr.w	r2, r3, #4
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a67e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a682:	f003 0304 	and.w	r3, r3, #4
 800a686:	2b00      	cmp	r3, #0
 800a688:	d011      	beq.n	800a6ae <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a68a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a68e:	f003 0301 	and.w	r3, r3, #1
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00b      	beq.n	800a6ae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	2204      	movs	r2, #4
 800a69c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6a4:	f043 0202 	orr.w	r2, r3, #2
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d006      	beq.n	800a6c6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f7fe fbf9 	bl	8008eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d171      	bne.n	800a7b6 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6da:	e853 3f00 	ldrex	r3, [r3]
 800a6de:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a6e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a6e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a6f4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6f6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a6fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a6fc:	e841 2300 	strex	r3, r2, [r1]
 800a700:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a704:	2b00      	cmp	r3, #0
 800a706:	d1e4      	bne.n	800a6d2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	3308      	adds	r3, #8
 800a70e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a712:	e853 3f00 	ldrex	r3, [r3]
 800a716:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a718:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a71a:	4b56      	ldr	r3, [pc, #344]	; (800a874 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800a71c:	4013      	ands	r3, r2
 800a71e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	3308      	adds	r3, #8
 800a726:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a728:	657a      	str	r2, [r7, #84]	; 0x54
 800a72a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a72c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a72e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a730:	e841 2300 	strex	r3, r2, [r1]
 800a734:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d1e5      	bne.n	800a708 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2220      	movs	r2, #32
 800a740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d12e      	bne.n	800a7b0 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a760:	e853 3f00 	ldrex	r3, [r3]
 800a764:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a768:	f023 0310 	bic.w	r3, r3, #16
 800a76c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	461a      	mov	r2, r3
 800a774:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a776:	643b      	str	r3, [r7, #64]	; 0x40
 800a778:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a77c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a77e:	e841 2300 	strex	r3, r2, [r1]
 800a782:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1e6      	bne.n	800a758 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	69db      	ldr	r3, [r3, #28]
 800a790:	f003 0310 	and.w	r3, r3, #16
 800a794:	2b10      	cmp	r3, #16
 800a796:	d103      	bne.n	800a7a0 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2210      	movs	r2, #16
 800a79e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f7fe fb8b 	bl	8008ec4 <HAL_UARTEx_RxEventCallback>
 800a7ae:	e002      	b.n	800a7b6 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f7f5 ff87 	bl	80006c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a7b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d006      	beq.n	800a7cc <UART_RxISR_8BIT_FIFOEN+0x248>
 800a7be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a7c2:	f003 0320 	and.w	r3, r3, #32
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	f47f af00 	bne.w	800a5cc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a7d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a7d6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d045      	beq.n	800a86a <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a7e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d23e      	bcs.n	800a86a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	3308      	adds	r3, #8
 800a7f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f4:	6a3b      	ldr	r3, [r7, #32]
 800a7f6:	e853 3f00 	ldrex	r3, [r3]
 800a7fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a802:	673b      	str	r3, [r7, #112]	; 0x70
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	3308      	adds	r3, #8
 800a80a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a80c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a80e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a810:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a814:	e841 2300 	strex	r3, r2, [r1]
 800a818:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d1e5      	bne.n	800a7ec <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a15      	ldr	r2, [pc, #84]	; (800a878 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800a824:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	e853 3f00 	ldrex	r3, [r3]
 800a832:	60bb      	str	r3, [r7, #8]
   return(result);
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	f043 0320 	orr.w	r3, r3, #32
 800a83a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	461a      	mov	r2, r3
 800a842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a844:	61bb      	str	r3, [r7, #24]
 800a846:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a848:	6979      	ldr	r1, [r7, #20]
 800a84a:	69ba      	ldr	r2, [r7, #24]
 800a84c:	e841 2300 	strex	r3, r2, [r1]
 800a850:	613b      	str	r3, [r7, #16]
   return(result);
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d1e6      	bne.n	800a826 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a858:	e007      	b.n	800a86a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	699a      	ldr	r2, [r3, #24]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f042 0208 	orr.w	r2, r2, #8
 800a868:	619a      	str	r2, [r3, #24]
}
 800a86a:	bf00      	nop
 800a86c:	3798      	adds	r7, #152	; 0x98
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	effffffe 	.word	0xeffffffe
 800a878:	0800a2c3 	.word	0x0800a2c3

0800a87c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b0a8      	sub	sp, #160	; 0xa0
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a88a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	69db      	ldr	r3, [r3, #28]
 800a894:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8b2:	2b22      	cmp	r3, #34	; 0x22
 800a8b4:	f040 8151 	bne.w	800ab5a <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a8be:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a8c2:	e0f8      	b.n	800aab6 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ca:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800a8d6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800a8da:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a8de:	4013      	ands	r3, r2
 800a8e0:	b29a      	uxth	r2, r3
 800a8e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a8e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8ec:	1c9a      	adds	r2, r3, #2
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	b29a      	uxth	r2, r3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	69db      	ldr	r3, [r3, #28]
 800a90a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a90e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a912:	f003 0307 	and.w	r3, r3, #7
 800a916:	2b00      	cmp	r3, #0
 800a918:	d053      	beq.n	800a9c2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a91a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a91e:	f003 0301 	and.w	r3, r3, #1
 800a922:	2b00      	cmp	r3, #0
 800a924:	d011      	beq.n	800a94a <UART_RxISR_16BIT_FIFOEN+0xce>
 800a926:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a92a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d00b      	beq.n	800a94a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2201      	movs	r2, #1
 800a938:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a940:	f043 0201 	orr.w	r2, r3, #1
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a94a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a94e:	f003 0302 	and.w	r3, r3, #2
 800a952:	2b00      	cmp	r3, #0
 800a954:	d011      	beq.n	800a97a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a956:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a95a:	f003 0301 	and.w	r3, r3, #1
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00b      	beq.n	800a97a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2202      	movs	r2, #2
 800a968:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a970:	f043 0204 	orr.w	r2, r3, #4
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a97a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a97e:	f003 0304 	and.w	r3, r3, #4
 800a982:	2b00      	cmp	r3, #0
 800a984:	d011      	beq.n	800a9aa <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a986:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a98a:	f003 0301 	and.w	r3, r3, #1
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00b      	beq.n	800a9aa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2204      	movs	r2, #4
 800a998:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9a0:	f043 0202 	orr.w	r2, r3, #2
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d006      	beq.n	800a9c2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f7fe fa7b 	bl	8008eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d173      	bne.n	800aab6 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9d6:	e853 3f00 	ldrex	r3, [r3]
 800a9da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a9dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a9f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a9f2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a9f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a9f8:	e841 2300 	strex	r3, r2, [r1]
 800a9fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a9fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d1e4      	bne.n	800a9ce <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	3308      	adds	r3, #8
 800aa0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa0e:	e853 3f00 	ldrex	r3, [r3]
 800aa12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aa14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa16:	4b57      	ldr	r3, [pc, #348]	; (800ab74 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800aa18:	4013      	ands	r3, r2
 800aa1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	3308      	adds	r3, #8
 800aa24:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aa28:	65ba      	str	r2, [r7, #88]	; 0x58
 800aa2a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa30:	e841 2300 	strex	r3, r2, [r1]
 800aa34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aa36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d1e3      	bne.n	800aa04 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2220      	movs	r2, #32
 800aa40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d12e      	bne.n	800aab0 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa60:	e853 3f00 	ldrex	r3, [r3]
 800aa64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aa66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa68:	f023 0310 	bic.w	r3, r3, #16
 800aa6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	461a      	mov	r2, r3
 800aa74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa76:	647b      	str	r3, [r7, #68]	; 0x44
 800aa78:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aa7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa7e:	e841 2300 	strex	r3, r2, [r1]
 800aa82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aa84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d1e6      	bne.n	800aa58 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	69db      	ldr	r3, [r3, #28]
 800aa90:	f003 0310 	and.w	r3, r3, #16
 800aa94:	2b10      	cmp	r3, #16
 800aa96:	d103      	bne.n	800aaa0 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2210      	movs	r2, #16
 800aa9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f7fe fa0b 	bl	8008ec4 <HAL_UARTEx_RxEventCallback>
 800aaae:	e002      	b.n	800aab6 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f7f5 fe07 	bl	80006c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aab6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d006      	beq.n	800aacc <UART_RxISR_16BIT_FIFOEN+0x250>
 800aabe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aac2:	f003 0320 	and.w	r3, r3, #32
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f47f aefc 	bne.w	800a8c4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aad2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800aad6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d045      	beq.n	800ab6a <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aae4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d23e      	bcs.n	800ab6a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	3308      	adds	r3, #8
 800aaf2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf6:	e853 3f00 	ldrex	r3, [r3]
 800aafa:	623b      	str	r3, [r7, #32]
   return(result);
 800aafc:	6a3b      	ldr	r3, [r7, #32]
 800aafe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab02:	677b      	str	r3, [r7, #116]	; 0x74
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	3308      	adds	r3, #8
 800ab0a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ab0c:	633a      	str	r2, [r7, #48]	; 0x30
 800ab0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab14:	e841 2300 	strex	r3, r2, [r1]
 800ab18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d1e5      	bne.n	800aaec <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a15      	ldr	r2, [pc, #84]	; (800ab78 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800ab24:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	e853 3f00 	ldrex	r3, [r3]
 800ab32:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f043 0320 	orr.w	r3, r3, #32
 800ab3a:	673b      	str	r3, [r7, #112]	; 0x70
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	461a      	mov	r2, r3
 800ab42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab44:	61fb      	str	r3, [r7, #28]
 800ab46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab48:	69b9      	ldr	r1, [r7, #24]
 800ab4a:	69fa      	ldr	r2, [r7, #28]
 800ab4c:	e841 2300 	strex	r3, r2, [r1]
 800ab50:	617b      	str	r3, [r7, #20]
   return(result);
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d1e6      	bne.n	800ab26 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ab58:	e007      	b.n	800ab6a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	699a      	ldr	r2, [r3, #24]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f042 0208 	orr.w	r2, r2, #8
 800ab68:	619a      	str	r2, [r3, #24]
}
 800ab6a:	bf00      	nop
 800ab6c:	37a0      	adds	r7, #160	; 0xa0
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	effffffe 	.word	0xeffffffe
 800ab78:	0800a423 	.word	0x0800a423

0800ab7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ab84:	bf00      	nop
 800ab86:	370c      	adds	r7, #12
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ab98:	bf00      	nop
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800abac:	bf00      	nop
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d101      	bne.n	800abce <HAL_UARTEx_DisableFifoMode+0x16>
 800abca:	2302      	movs	r3, #2
 800abcc:	e027      	b.n	800ac1e <HAL_UARTEx_DisableFifoMode+0x66>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2201      	movs	r2, #1
 800abd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2224      	movs	r2, #36	; 0x24
 800abda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f022 0201 	bic.w	r2, r2, #1
 800abf4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800abfc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2220      	movs	r2, #32
 800ac10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac1c:	2300      	movs	r3, #0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3714      	adds	r7, #20
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr

0800ac2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b084      	sub	sp, #16
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d101      	bne.n	800ac42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ac3e:	2302      	movs	r3, #2
 800ac40:	e02d      	b.n	800ac9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2201      	movs	r2, #1
 800ac46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2224      	movs	r2, #36	; 0x24
 800ac4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f022 0201 	bic.w	r2, r2, #1
 800ac68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	683a      	ldr	r2, [r7, #0]
 800ac7a:	430a      	orrs	r2, r1
 800ac7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 f850 	bl	800ad24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2220      	movs	r2, #32
 800ac90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac9c:	2300      	movs	r3, #0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3710      	adds	r7, #16
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b084      	sub	sp, #16
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
 800acae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d101      	bne.n	800acbe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800acba:	2302      	movs	r3, #2
 800acbc:	e02d      	b.n	800ad1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2201      	movs	r2, #1
 800acc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2224      	movs	r2, #36	; 0x24
 800acca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f022 0201 	bic.w	r2, r2, #1
 800ace4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	683a      	ldr	r2, [r7, #0]
 800acf6:	430a      	orrs	r2, r1
 800acf8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 f812 	bl	800ad24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2220      	movs	r2, #32
 800ad0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad18:	2300      	movs	r3, #0
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
	...

0800ad24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b085      	sub	sp, #20
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d108      	bne.n	800ad46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ad44:	e031      	b.n	800adaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ad46:	2310      	movs	r3, #16
 800ad48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ad4a:	2310      	movs	r3, #16
 800ad4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	0e5b      	lsrs	r3, r3, #25
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	f003 0307 	and.w	r3, r3, #7
 800ad5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	0f5b      	lsrs	r3, r3, #29
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	f003 0307 	and.w	r3, r3, #7
 800ad6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad6e:	7bbb      	ldrb	r3, [r7, #14]
 800ad70:	7b3a      	ldrb	r2, [r7, #12]
 800ad72:	4911      	ldr	r1, [pc, #68]	; (800adb8 <UARTEx_SetNbDataToProcess+0x94>)
 800ad74:	5c8a      	ldrb	r2, [r1, r2]
 800ad76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ad7a:	7b3a      	ldrb	r2, [r7, #12]
 800ad7c:	490f      	ldr	r1, [pc, #60]	; (800adbc <UARTEx_SetNbDataToProcess+0x98>)
 800ad7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad80:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad84:	b29a      	uxth	r2, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad8c:	7bfb      	ldrb	r3, [r7, #15]
 800ad8e:	7b7a      	ldrb	r2, [r7, #13]
 800ad90:	4909      	ldr	r1, [pc, #36]	; (800adb8 <UARTEx_SetNbDataToProcess+0x94>)
 800ad92:	5c8a      	ldrb	r2, [r1, r2]
 800ad94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ad98:	7b7a      	ldrb	r2, [r7, #13]
 800ad9a:	4908      	ldr	r1, [pc, #32]	; (800adbc <UARTEx_SetNbDataToProcess+0x98>)
 800ad9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad9e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ada2:	b29a      	uxth	r2, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800adaa:	bf00      	nop
 800adac:	3714      	adds	r7, #20
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop
 800adb8:	08015738 	.word	0x08015738
 800adbc:	08015740 	.word	0x08015740

0800adc0 <__NVIC_SetPriority>:
{
 800adc0:	b480      	push	{r7}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	4603      	mov	r3, r0
 800adc8:	6039      	str	r1, [r7, #0]
 800adca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800adcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800add0:	2b00      	cmp	r3, #0
 800add2:	db0a      	blt.n	800adea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	b2da      	uxtb	r2, r3
 800add8:	490c      	ldr	r1, [pc, #48]	; (800ae0c <__NVIC_SetPriority+0x4c>)
 800adda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800adde:	0112      	lsls	r2, r2, #4
 800ade0:	b2d2      	uxtb	r2, r2
 800ade2:	440b      	add	r3, r1
 800ade4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ade8:	e00a      	b.n	800ae00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	b2da      	uxtb	r2, r3
 800adee:	4908      	ldr	r1, [pc, #32]	; (800ae10 <__NVIC_SetPriority+0x50>)
 800adf0:	88fb      	ldrh	r3, [r7, #6]
 800adf2:	f003 030f 	and.w	r3, r3, #15
 800adf6:	3b04      	subs	r3, #4
 800adf8:	0112      	lsls	r2, r2, #4
 800adfa:	b2d2      	uxtb	r2, r2
 800adfc:	440b      	add	r3, r1
 800adfe:	761a      	strb	r2, [r3, #24]
}
 800ae00:	bf00      	nop
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr
 800ae0c:	e000e100 	.word	0xe000e100
 800ae10:	e000ed00 	.word	0xe000ed00

0800ae14 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ae14:	b580      	push	{r7, lr}
 800ae16:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ae18:	4b05      	ldr	r3, [pc, #20]	; (800ae30 <SysTick_Handler+0x1c>)
 800ae1a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ae1c:	f001 fd28 	bl	800c870 <xTaskGetSchedulerState>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d001      	beq.n	800ae2a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ae26:	f002 fb0f 	bl	800d448 <xPortSysTickHandler>
  }
}
 800ae2a:	bf00      	nop
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	e000e010 	.word	0xe000e010

0800ae34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ae34:	b580      	push	{r7, lr}
 800ae36:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ae38:	2100      	movs	r1, #0
 800ae3a:	f06f 0004 	mvn.w	r0, #4
 800ae3e:	f7ff ffbf 	bl	800adc0 <__NVIC_SetPriority>
#endif
}
 800ae42:	bf00      	nop
 800ae44:	bd80      	pop	{r7, pc}
	...

0800ae48 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae4e:	f3ef 8305 	mrs	r3, IPSR
 800ae52:	603b      	str	r3, [r7, #0]
  return(result);
 800ae54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d003      	beq.n	800ae62 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ae5a:	f06f 0305 	mvn.w	r3, #5
 800ae5e:	607b      	str	r3, [r7, #4]
 800ae60:	e00c      	b.n	800ae7c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ae62:	4b0a      	ldr	r3, [pc, #40]	; (800ae8c <osKernelInitialize+0x44>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d105      	bne.n	800ae76 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ae6a:	4b08      	ldr	r3, [pc, #32]	; (800ae8c <osKernelInitialize+0x44>)
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ae70:	2300      	movs	r3, #0
 800ae72:	607b      	str	r3, [r7, #4]
 800ae74:	e002      	b.n	800ae7c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ae76:	f04f 33ff 	mov.w	r3, #4294967295
 800ae7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ae7c:	687b      	ldr	r3, [r7, #4]
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	370c      	adds	r7, #12
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	24004c24 	.word	0x24004c24

0800ae90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae96:	f3ef 8305 	mrs	r3, IPSR
 800ae9a:	603b      	str	r3, [r7, #0]
  return(result);
 800ae9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d003      	beq.n	800aeaa <osKernelStart+0x1a>
    stat = osErrorISR;
 800aea2:	f06f 0305 	mvn.w	r3, #5
 800aea6:	607b      	str	r3, [r7, #4]
 800aea8:	e010      	b.n	800aecc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800aeaa:	4b0b      	ldr	r3, [pc, #44]	; (800aed8 <osKernelStart+0x48>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d109      	bne.n	800aec6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800aeb2:	f7ff ffbf 	bl	800ae34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800aeb6:	4b08      	ldr	r3, [pc, #32]	; (800aed8 <osKernelStart+0x48>)
 800aeb8:	2202      	movs	r2, #2
 800aeba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800aebc:	f001 f87c 	bl	800bfb8 <vTaskStartScheduler>
      stat = osOK;
 800aec0:	2300      	movs	r3, #0
 800aec2:	607b      	str	r3, [r7, #4]
 800aec4:	e002      	b.n	800aecc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800aec6:	f04f 33ff 	mov.w	r3, #4294967295
 800aeca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aecc:	687b      	ldr	r3, [r7, #4]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	24004c24 	.word	0x24004c24

0800aedc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aedc:	b580      	push	{r7, lr}
 800aede:	b08e      	sub	sp, #56	; 0x38
 800aee0:	af04      	add	r7, sp, #16
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aee8:	2300      	movs	r3, #0
 800aeea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aeec:	f3ef 8305 	mrs	r3, IPSR
 800aef0:	617b      	str	r3, [r7, #20]
  return(result);
 800aef2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d17e      	bne.n	800aff6 <osThreadNew+0x11a>
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d07b      	beq.n	800aff6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800aefe:	2380      	movs	r3, #128	; 0x80
 800af00:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800af02:	2318      	movs	r3, #24
 800af04:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800af06:	2300      	movs	r3, #0
 800af08:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800af0a:	f04f 33ff 	mov.w	r3, #4294967295
 800af0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d045      	beq.n	800afa2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d002      	beq.n	800af24 <osThreadNew+0x48>
        name = attr->name;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	699b      	ldr	r3, [r3, #24]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d002      	beq.n	800af32 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	699b      	ldr	r3, [r3, #24]
 800af30:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d008      	beq.n	800af4a <osThreadNew+0x6e>
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	2b38      	cmp	r3, #56	; 0x38
 800af3c:	d805      	bhi.n	800af4a <osThreadNew+0x6e>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	f003 0301 	and.w	r3, r3, #1
 800af46:	2b00      	cmp	r3, #0
 800af48:	d001      	beq.n	800af4e <osThreadNew+0x72>
        return (NULL);
 800af4a:	2300      	movs	r3, #0
 800af4c:	e054      	b.n	800aff8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	695b      	ldr	r3, [r3, #20]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d003      	beq.n	800af5e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	695b      	ldr	r3, [r3, #20]
 800af5a:	089b      	lsrs	r3, r3, #2
 800af5c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00e      	beq.n	800af84 <osThreadNew+0xa8>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	2bbb      	cmp	r3, #187	; 0xbb
 800af6c:	d90a      	bls.n	800af84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800af72:	2b00      	cmp	r3, #0
 800af74:	d006      	beq.n	800af84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	695b      	ldr	r3, [r3, #20]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d002      	beq.n	800af84 <osThreadNew+0xa8>
        mem = 1;
 800af7e:	2301      	movs	r3, #1
 800af80:	61bb      	str	r3, [r7, #24]
 800af82:	e010      	b.n	800afa6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d10c      	bne.n	800afa6 <osThreadNew+0xca>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d108      	bne.n	800afa6 <osThreadNew+0xca>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	691b      	ldr	r3, [r3, #16]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d104      	bne.n	800afa6 <osThreadNew+0xca>
          mem = 0;
 800af9c:	2300      	movs	r3, #0
 800af9e:	61bb      	str	r3, [r7, #24]
 800afa0:	e001      	b.n	800afa6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800afa2:	2300      	movs	r3, #0
 800afa4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d110      	bne.n	800afce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800afb4:	9202      	str	r2, [sp, #8]
 800afb6:	9301      	str	r3, [sp, #4]
 800afb8:	69fb      	ldr	r3, [r7, #28]
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	6a3a      	ldr	r2, [r7, #32]
 800afc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f000 fe0c 	bl	800bbe0 <xTaskCreateStatic>
 800afc8:	4603      	mov	r3, r0
 800afca:	613b      	str	r3, [r7, #16]
 800afcc:	e013      	b.n	800aff6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800afce:	69bb      	ldr	r3, [r7, #24]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d110      	bne.n	800aff6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800afd4:	6a3b      	ldr	r3, [r7, #32]
 800afd6:	b29a      	uxth	r2, r3
 800afd8:	f107 0310 	add.w	r3, r7, #16
 800afdc:	9301      	str	r3, [sp, #4]
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	9300      	str	r3, [sp, #0]
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	f000 fe57 	bl	800bc9a <xTaskCreate>
 800afec:	4603      	mov	r3, r0
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d001      	beq.n	800aff6 <osThreadNew+0x11a>
            hTask = NULL;
 800aff2:	2300      	movs	r3, #0
 800aff4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aff6:	693b      	ldr	r3, [r7, #16]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3728      	adds	r7, #40	; 0x28
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b008:	f3ef 8305 	mrs	r3, IPSR
 800b00c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b00e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b010:	2b00      	cmp	r3, #0
 800b012:	d003      	beq.n	800b01c <osDelay+0x1c>
    stat = osErrorISR;
 800b014:	f06f 0305 	mvn.w	r3, #5
 800b018:	60fb      	str	r3, [r7, #12]
 800b01a:	e007      	b.n	800b02c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b01c:	2300      	movs	r3, #0
 800b01e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d002      	beq.n	800b02c <osDelay+0x2c>
      vTaskDelay(ticks);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 ff92 	bl	800bf50 <vTaskDelay>
    }
  }

  return (stat);
 800b02c:	68fb      	ldr	r3, [r7, #12]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
	...

0800b038 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b038:	b480      	push	{r7}
 800b03a:	b085      	sub	sp, #20
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	4a07      	ldr	r2, [pc, #28]	; (800b064 <vApplicationGetIdleTaskMemory+0x2c>)
 800b048:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	4a06      	ldr	r2, [pc, #24]	; (800b068 <vApplicationGetIdleTaskMemory+0x30>)
 800b04e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2280      	movs	r2, #128	; 0x80
 800b054:	601a      	str	r2, [r3, #0]
}
 800b056:	bf00      	nop
 800b058:	3714      	adds	r7, #20
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	24004c28 	.word	0x24004c28
 800b068:	24004ce4 	.word	0x24004ce4

0800b06c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	4a07      	ldr	r2, [pc, #28]	; (800b098 <vApplicationGetTimerTaskMemory+0x2c>)
 800b07c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	4a06      	ldr	r2, [pc, #24]	; (800b09c <vApplicationGetTimerTaskMemory+0x30>)
 800b082:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b08a:	601a      	str	r2, [r3, #0]
}
 800b08c:	bf00      	nop
 800b08e:	3714      	adds	r7, #20
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr
 800b098:	24004ee4 	.word	0x24004ee4
 800b09c:	24004fa0 	.word	0x24004fa0

0800b0a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f103 0208 	add.w	r2, r3, #8
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b0b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f103 0208 	add.w	r2, r3, #8
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f103 0208 	add.w	r2, r3, #8
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b0d4:	bf00      	nop
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b0ee:	bf00      	nop
 800b0f0:	370c      	adds	r7, #12
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr

0800b0fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b0fa:	b480      	push	{r7}
 800b0fc:	b085      	sub	sp, #20
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
 800b102:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	689a      	ldr	r2, [r3, #8]
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	683a      	ldr	r2, [r7, #0]
 800b11e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	683a      	ldr	r2, [r7, #0]
 800b124:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	1c5a      	adds	r2, r3, #1
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	601a      	str	r2, [r3, #0]
}
 800b136:	bf00      	nop
 800b138:	3714      	adds	r7, #20
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr

0800b142 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b142:	b480      	push	{r7}
 800b144:	b085      	sub	sp, #20
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
 800b14a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b158:	d103      	bne.n	800b162 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	691b      	ldr	r3, [r3, #16]
 800b15e:	60fb      	str	r3, [r7, #12]
 800b160:	e00c      	b.n	800b17c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	3308      	adds	r3, #8
 800b166:	60fb      	str	r3, [r7, #12]
 800b168:	e002      	b.n	800b170 <vListInsert+0x2e>
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	60fb      	str	r3, [r7, #12]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	68ba      	ldr	r2, [r7, #8]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d2f6      	bcs.n	800b16a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	685a      	ldr	r2, [r3, #4]
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	683a      	ldr	r2, [r7, #0]
 800b18a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	68fa      	ldr	r2, [r7, #12]
 800b190:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	683a      	ldr	r2, [r7, #0]
 800b196:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	1c5a      	adds	r2, r3, #1
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	601a      	str	r2, [r3, #0]
}
 800b1a8:	bf00      	nop
 800b1aa:	3714      	adds	r7, #20
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	691b      	ldr	r3, [r3, #16]
 800b1c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	6892      	ldr	r2, [r2, #8]
 800b1ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	689b      	ldr	r3, [r3, #8]
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	6852      	ldr	r2, [r2, #4]
 800b1d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d103      	bne.n	800b1e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	689a      	ldr	r2, [r3, #8]
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	1e5a      	subs	r2, r3, #1
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3714      	adds	r7, #20
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d10a      	bne.n	800b232 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b220:	f383 8811 	msr	BASEPRI, r3
 800b224:	f3bf 8f6f 	isb	sy
 800b228:	f3bf 8f4f 	dsb	sy
 800b22c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b22e:	bf00      	nop
 800b230:	e7fe      	b.n	800b230 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b232:	f002 f877 	bl	800d324 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b23e:	68f9      	ldr	r1, [r7, #12]
 800b240:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b242:	fb01 f303 	mul.w	r3, r1, r3
 800b246:	441a      	add	r2, r3
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2200      	movs	r2, #0
 800b250:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b262:	3b01      	subs	r3, #1
 800b264:	68f9      	ldr	r1, [r7, #12]
 800b266:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b268:	fb01 f303 	mul.w	r3, r1, r3
 800b26c:	441a      	add	r2, r3
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	22ff      	movs	r2, #255	; 0xff
 800b276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	22ff      	movs	r2, #255	; 0xff
 800b27e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d114      	bne.n	800b2b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	691b      	ldr	r3, [r3, #16]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d01a      	beq.n	800b2c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	3310      	adds	r3, #16
 800b294:	4618      	mov	r0, r3
 800b296:	f001 f929 	bl	800c4ec <xTaskRemoveFromEventList>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d012      	beq.n	800b2c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b2a0:	4b0c      	ldr	r3, [pc, #48]	; (800b2d4 <xQueueGenericReset+0xcc>)
 800b2a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2a6:	601a      	str	r2, [r3, #0]
 800b2a8:	f3bf 8f4f 	dsb	sy
 800b2ac:	f3bf 8f6f 	isb	sy
 800b2b0:	e009      	b.n	800b2c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	3310      	adds	r3, #16
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7ff fef2 	bl	800b0a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	3324      	adds	r3, #36	; 0x24
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7ff feed 	bl	800b0a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b2c6:	f002 f85d 	bl	800d384 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b2ca:	2301      	movs	r3, #1
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3710      	adds	r7, #16
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}
 800b2d4:	e000ed04 	.word	0xe000ed04

0800b2d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b08e      	sub	sp, #56	; 0x38
 800b2dc:	af02      	add	r7, sp, #8
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	60b9      	str	r1, [r7, #8]
 800b2e2:	607a      	str	r2, [r7, #4]
 800b2e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d10a      	bne.n	800b302 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f0:	f383 8811 	msr	BASEPRI, r3
 800b2f4:	f3bf 8f6f 	isb	sy
 800b2f8:	f3bf 8f4f 	dsb	sy
 800b2fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b2fe:	bf00      	nop
 800b300:	e7fe      	b.n	800b300 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d10a      	bne.n	800b31e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30c:	f383 8811 	msr	BASEPRI, r3
 800b310:	f3bf 8f6f 	isb	sy
 800b314:	f3bf 8f4f 	dsb	sy
 800b318:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b31a:	bf00      	nop
 800b31c:	e7fe      	b.n	800b31c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d002      	beq.n	800b32a <xQueueGenericCreateStatic+0x52>
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d001      	beq.n	800b32e <xQueueGenericCreateStatic+0x56>
 800b32a:	2301      	movs	r3, #1
 800b32c:	e000      	b.n	800b330 <xQueueGenericCreateStatic+0x58>
 800b32e:	2300      	movs	r3, #0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d10a      	bne.n	800b34a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b338:	f383 8811 	msr	BASEPRI, r3
 800b33c:	f3bf 8f6f 	isb	sy
 800b340:	f3bf 8f4f 	dsb	sy
 800b344:	623b      	str	r3, [r7, #32]
}
 800b346:	bf00      	nop
 800b348:	e7fe      	b.n	800b348 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d102      	bne.n	800b356 <xQueueGenericCreateStatic+0x7e>
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d101      	bne.n	800b35a <xQueueGenericCreateStatic+0x82>
 800b356:	2301      	movs	r3, #1
 800b358:	e000      	b.n	800b35c <xQueueGenericCreateStatic+0x84>
 800b35a:	2300      	movs	r3, #0
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d10a      	bne.n	800b376 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b364:	f383 8811 	msr	BASEPRI, r3
 800b368:	f3bf 8f6f 	isb	sy
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	61fb      	str	r3, [r7, #28]
}
 800b372:	bf00      	nop
 800b374:	e7fe      	b.n	800b374 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b376:	2350      	movs	r3, #80	; 0x50
 800b378:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	2b50      	cmp	r3, #80	; 0x50
 800b37e:	d00a      	beq.n	800b396 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b384:	f383 8811 	msr	BASEPRI, r3
 800b388:	f3bf 8f6f 	isb	sy
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	61bb      	str	r3, [r7, #24]
}
 800b392:	bf00      	nop
 800b394:	e7fe      	b.n	800b394 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b396:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d00d      	beq.n	800b3be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b3aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b0:	9300      	str	r3, [sp, #0]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	68b9      	ldr	r1, [r7, #8]
 800b3b8:	68f8      	ldr	r0, [r7, #12]
 800b3ba:	f000 f805 	bl	800b3c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3730      	adds	r7, #48	; 0x30
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	607a      	str	r2, [r7, #4]
 800b3d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d103      	bne.n	800b3e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	69ba      	ldr	r2, [r7, #24]
 800b3e0:	601a      	str	r2, [r3, #0]
 800b3e2:	e002      	b.n	800b3ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b3ea:	69bb      	ldr	r3, [r7, #24]
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	68ba      	ldr	r2, [r7, #8]
 800b3f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b3f6:	2101      	movs	r1, #1
 800b3f8:	69b8      	ldr	r0, [r7, #24]
 800b3fa:	f7ff ff05 	bl	800b208 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	78fa      	ldrb	r2, [r7, #3]
 800b402:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b406:	bf00      	nop
 800b408:	3710      	adds	r7, #16
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
	...

0800b410 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b08e      	sub	sp, #56	; 0x38
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
 800b41c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b41e:	2300      	movs	r3, #0
 800b420:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d10a      	bne.n	800b442 <xQueueGenericSend+0x32>
	__asm volatile
 800b42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b430:	f383 8811 	msr	BASEPRI, r3
 800b434:	f3bf 8f6f 	isb	sy
 800b438:	f3bf 8f4f 	dsb	sy
 800b43c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b43e:	bf00      	nop
 800b440:	e7fe      	b.n	800b440 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d103      	bne.n	800b450 <xQueueGenericSend+0x40>
 800b448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d101      	bne.n	800b454 <xQueueGenericSend+0x44>
 800b450:	2301      	movs	r3, #1
 800b452:	e000      	b.n	800b456 <xQueueGenericSend+0x46>
 800b454:	2300      	movs	r3, #0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d10a      	bne.n	800b470 <xQueueGenericSend+0x60>
	__asm volatile
 800b45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45e:	f383 8811 	msr	BASEPRI, r3
 800b462:	f3bf 8f6f 	isb	sy
 800b466:	f3bf 8f4f 	dsb	sy
 800b46a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b46c:	bf00      	nop
 800b46e:	e7fe      	b.n	800b46e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	2b02      	cmp	r3, #2
 800b474:	d103      	bne.n	800b47e <xQueueGenericSend+0x6e>
 800b476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d101      	bne.n	800b482 <xQueueGenericSend+0x72>
 800b47e:	2301      	movs	r3, #1
 800b480:	e000      	b.n	800b484 <xQueueGenericSend+0x74>
 800b482:	2300      	movs	r3, #0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d10a      	bne.n	800b49e <xQueueGenericSend+0x8e>
	__asm volatile
 800b488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48c:	f383 8811 	msr	BASEPRI, r3
 800b490:	f3bf 8f6f 	isb	sy
 800b494:	f3bf 8f4f 	dsb	sy
 800b498:	623b      	str	r3, [r7, #32]
}
 800b49a:	bf00      	nop
 800b49c:	e7fe      	b.n	800b49c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b49e:	f001 f9e7 	bl	800c870 <xTaskGetSchedulerState>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d102      	bne.n	800b4ae <xQueueGenericSend+0x9e>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d101      	bne.n	800b4b2 <xQueueGenericSend+0xa2>
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e000      	b.n	800b4b4 <xQueueGenericSend+0xa4>
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d10a      	bne.n	800b4ce <xQueueGenericSend+0xbe>
	__asm volatile
 800b4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4bc:	f383 8811 	msr	BASEPRI, r3
 800b4c0:	f3bf 8f6f 	isb	sy
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	61fb      	str	r3, [r7, #28]
}
 800b4ca:	bf00      	nop
 800b4cc:	e7fe      	b.n	800b4cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b4ce:	f001 ff29 	bl	800d324 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d302      	bcc.n	800b4e4 <xQueueGenericSend+0xd4>
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	d129      	bne.n	800b538 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b4e4:	683a      	ldr	r2, [r7, #0]
 800b4e6:	68b9      	ldr	r1, [r7, #8]
 800b4e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4ea:	f000 fa0b 	bl	800b904 <prvCopyDataToQueue>
 800b4ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d010      	beq.n	800b51a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fa:	3324      	adds	r3, #36	; 0x24
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f000 fff5 	bl	800c4ec <xTaskRemoveFromEventList>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d013      	beq.n	800b530 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b508:	4b3f      	ldr	r3, [pc, #252]	; (800b608 <xQueueGenericSend+0x1f8>)
 800b50a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b50e:	601a      	str	r2, [r3, #0]
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	f3bf 8f6f 	isb	sy
 800b518:	e00a      	b.n	800b530 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d007      	beq.n	800b530 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b520:	4b39      	ldr	r3, [pc, #228]	; (800b608 <xQueueGenericSend+0x1f8>)
 800b522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b526:	601a      	str	r2, [r3, #0]
 800b528:	f3bf 8f4f 	dsb	sy
 800b52c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b530:	f001 ff28 	bl	800d384 <vPortExitCritical>
				return pdPASS;
 800b534:	2301      	movs	r3, #1
 800b536:	e063      	b.n	800b600 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d103      	bne.n	800b546 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b53e:	f001 ff21 	bl	800d384 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b542:	2300      	movs	r3, #0
 800b544:	e05c      	b.n	800b600 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d106      	bne.n	800b55a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b54c:	f107 0314 	add.w	r3, r7, #20
 800b550:	4618      	mov	r0, r3
 800b552:	f001 f82f 	bl	800c5b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b556:	2301      	movs	r3, #1
 800b558:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b55a:	f001 ff13 	bl	800d384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b55e:	f000 fd9b 	bl	800c098 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b562:	f001 fedf 	bl	800d324 <vPortEnterCritical>
 800b566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b568:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b56c:	b25b      	sxtb	r3, r3
 800b56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b572:	d103      	bne.n	800b57c <xQueueGenericSend+0x16c>
 800b574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b576:	2200      	movs	r2, #0
 800b578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b582:	b25b      	sxtb	r3, r3
 800b584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b588:	d103      	bne.n	800b592 <xQueueGenericSend+0x182>
 800b58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58c:	2200      	movs	r2, #0
 800b58e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b592:	f001 fef7 	bl	800d384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b596:	1d3a      	adds	r2, r7, #4
 800b598:	f107 0314 	add.w	r3, r7, #20
 800b59c:	4611      	mov	r1, r2
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f001 f81e 	bl	800c5e0 <xTaskCheckForTimeOut>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d124      	bne.n	800b5f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b5aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5ac:	f000 faa2 	bl	800baf4 <prvIsQueueFull>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d018      	beq.n	800b5e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b8:	3310      	adds	r3, #16
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	4611      	mov	r1, r2
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f000 ff44 	bl	800c44c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b5c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5c6:	f000 fa2d 	bl	800ba24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b5ca:	f000 fd73 	bl	800c0b4 <xTaskResumeAll>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	f47f af7c 	bne.w	800b4ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b5d6:	4b0c      	ldr	r3, [pc, #48]	; (800b608 <xQueueGenericSend+0x1f8>)
 800b5d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5dc:	601a      	str	r2, [r3, #0]
 800b5de:	f3bf 8f4f 	dsb	sy
 800b5e2:	f3bf 8f6f 	isb	sy
 800b5e6:	e772      	b.n	800b4ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b5e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5ea:	f000 fa1b 	bl	800ba24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5ee:	f000 fd61 	bl	800c0b4 <xTaskResumeAll>
 800b5f2:	e76c      	b.n	800b4ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b5f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5f6:	f000 fa15 	bl	800ba24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b5fa:	f000 fd5b 	bl	800c0b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b5fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b600:	4618      	mov	r0, r3
 800b602:	3738      	adds	r7, #56	; 0x38
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}
 800b608:	e000ed04 	.word	0xe000ed04

0800b60c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b090      	sub	sp, #64	; 0x40
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	607a      	str	r2, [r7, #4]
 800b618:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b620:	2b00      	cmp	r3, #0
 800b622:	d10a      	bne.n	800b63a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b628:	f383 8811 	msr	BASEPRI, r3
 800b62c:	f3bf 8f6f 	isb	sy
 800b630:	f3bf 8f4f 	dsb	sy
 800b634:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b636:	bf00      	nop
 800b638:	e7fe      	b.n	800b638 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d103      	bne.n	800b648 <xQueueGenericSendFromISR+0x3c>
 800b640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b644:	2b00      	cmp	r3, #0
 800b646:	d101      	bne.n	800b64c <xQueueGenericSendFromISR+0x40>
 800b648:	2301      	movs	r3, #1
 800b64a:	e000      	b.n	800b64e <xQueueGenericSendFromISR+0x42>
 800b64c:	2300      	movs	r3, #0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d10a      	bne.n	800b668 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b656:	f383 8811 	msr	BASEPRI, r3
 800b65a:	f3bf 8f6f 	isb	sy
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b664:	bf00      	nop
 800b666:	e7fe      	b.n	800b666 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	2b02      	cmp	r3, #2
 800b66c:	d103      	bne.n	800b676 <xQueueGenericSendFromISR+0x6a>
 800b66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b672:	2b01      	cmp	r3, #1
 800b674:	d101      	bne.n	800b67a <xQueueGenericSendFromISR+0x6e>
 800b676:	2301      	movs	r3, #1
 800b678:	e000      	b.n	800b67c <xQueueGenericSendFromISR+0x70>
 800b67a:	2300      	movs	r3, #0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d10a      	bne.n	800b696 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b684:	f383 8811 	msr	BASEPRI, r3
 800b688:	f3bf 8f6f 	isb	sy
 800b68c:	f3bf 8f4f 	dsb	sy
 800b690:	623b      	str	r3, [r7, #32]
}
 800b692:	bf00      	nop
 800b694:	e7fe      	b.n	800b694 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b696:	f001 ff27 	bl	800d4e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b69a:	f3ef 8211 	mrs	r2, BASEPRI
 800b69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a2:	f383 8811 	msr	BASEPRI, r3
 800b6a6:	f3bf 8f6f 	isb	sy
 800b6aa:	f3bf 8f4f 	dsb	sy
 800b6ae:	61fa      	str	r2, [r7, #28]
 800b6b0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b6b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b6b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d302      	bcc.n	800b6c8 <xQueueGenericSendFromISR+0xbc>
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	d12f      	bne.n	800b728 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b6d8:	683a      	ldr	r2, [r7, #0]
 800b6da:	68b9      	ldr	r1, [r7, #8]
 800b6dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b6de:	f000 f911 	bl	800b904 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b6e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ea:	d112      	bne.n	800b712 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d016      	beq.n	800b722 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f6:	3324      	adds	r3, #36	; 0x24
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f000 fef7 	bl	800c4ec <xTaskRemoveFromEventList>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d00e      	beq.n	800b722 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00b      	beq.n	800b722 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2201      	movs	r2, #1
 800b70e:	601a      	str	r2, [r3, #0]
 800b710:	e007      	b.n	800b722 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b712:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b716:	3301      	adds	r3, #1
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	b25a      	sxtb	r2, r3
 800b71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b71e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b722:	2301      	movs	r3, #1
 800b724:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b726:	e001      	b.n	800b72c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b728:	2300      	movs	r3, #0
 800b72a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b72c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b72e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b736:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3740      	adds	r7, #64	; 0x40
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
	...

0800b744 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b08c      	sub	sp, #48	; 0x30
 800b748:	af00      	add	r7, sp, #0
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b750:	2300      	movs	r3, #0
 800b752:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d10a      	bne.n	800b774 <xQueueReceive+0x30>
	__asm volatile
 800b75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b762:	f383 8811 	msr	BASEPRI, r3
 800b766:	f3bf 8f6f 	isb	sy
 800b76a:	f3bf 8f4f 	dsb	sy
 800b76e:	623b      	str	r3, [r7, #32]
}
 800b770:	bf00      	nop
 800b772:	e7fe      	b.n	800b772 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d103      	bne.n	800b782 <xQueueReceive+0x3e>
 800b77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d101      	bne.n	800b786 <xQueueReceive+0x42>
 800b782:	2301      	movs	r3, #1
 800b784:	e000      	b.n	800b788 <xQueueReceive+0x44>
 800b786:	2300      	movs	r3, #0
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d10a      	bne.n	800b7a2 <xQueueReceive+0x5e>
	__asm volatile
 800b78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b790:	f383 8811 	msr	BASEPRI, r3
 800b794:	f3bf 8f6f 	isb	sy
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	61fb      	str	r3, [r7, #28]
}
 800b79e:	bf00      	nop
 800b7a0:	e7fe      	b.n	800b7a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7a2:	f001 f865 	bl	800c870 <xTaskGetSchedulerState>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d102      	bne.n	800b7b2 <xQueueReceive+0x6e>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d101      	bne.n	800b7b6 <xQueueReceive+0x72>
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e000      	b.n	800b7b8 <xQueueReceive+0x74>
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d10a      	bne.n	800b7d2 <xQueueReceive+0x8e>
	__asm volatile
 800b7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c0:	f383 8811 	msr	BASEPRI, r3
 800b7c4:	f3bf 8f6f 	isb	sy
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	61bb      	str	r3, [r7, #24]
}
 800b7ce:	bf00      	nop
 800b7d0:	e7fe      	b.n	800b7d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7d2:	f001 fda7 	bl	800d324 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d01f      	beq.n	800b822 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b7e2:	68b9      	ldr	r1, [r7, #8]
 800b7e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7e6:	f000 f8f7 	bl	800b9d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ec:	1e5a      	subs	r2, r3, #1
 800b7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f4:	691b      	ldr	r3, [r3, #16]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d00f      	beq.n	800b81a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fc:	3310      	adds	r3, #16
 800b7fe:	4618      	mov	r0, r3
 800b800:	f000 fe74 	bl	800c4ec <xTaskRemoveFromEventList>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d007      	beq.n	800b81a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b80a:	4b3d      	ldr	r3, [pc, #244]	; (800b900 <xQueueReceive+0x1bc>)
 800b80c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b810:	601a      	str	r2, [r3, #0]
 800b812:	f3bf 8f4f 	dsb	sy
 800b816:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b81a:	f001 fdb3 	bl	800d384 <vPortExitCritical>
				return pdPASS;
 800b81e:	2301      	movs	r3, #1
 800b820:	e069      	b.n	800b8f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d103      	bne.n	800b830 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b828:	f001 fdac 	bl	800d384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b82c:	2300      	movs	r3, #0
 800b82e:	e062      	b.n	800b8f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b832:	2b00      	cmp	r3, #0
 800b834:	d106      	bne.n	800b844 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b836:	f107 0310 	add.w	r3, r7, #16
 800b83a:	4618      	mov	r0, r3
 800b83c:	f000 feba 	bl	800c5b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b840:	2301      	movs	r3, #1
 800b842:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b844:	f001 fd9e 	bl	800d384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b848:	f000 fc26 	bl	800c098 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b84c:	f001 fd6a 	bl	800d324 <vPortEnterCritical>
 800b850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b852:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b856:	b25b      	sxtb	r3, r3
 800b858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b85c:	d103      	bne.n	800b866 <xQueueReceive+0x122>
 800b85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b860:	2200      	movs	r2, #0
 800b862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b868:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b86c:	b25b      	sxtb	r3, r3
 800b86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b872:	d103      	bne.n	800b87c <xQueueReceive+0x138>
 800b874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b876:	2200      	movs	r2, #0
 800b878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b87c:	f001 fd82 	bl	800d384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b880:	1d3a      	adds	r2, r7, #4
 800b882:	f107 0310 	add.w	r3, r7, #16
 800b886:	4611      	mov	r1, r2
 800b888:	4618      	mov	r0, r3
 800b88a:	f000 fea9 	bl	800c5e0 <xTaskCheckForTimeOut>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d123      	bne.n	800b8dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b896:	f000 f917 	bl	800bac8 <prvIsQueueEmpty>
 800b89a:	4603      	mov	r3, r0
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d017      	beq.n	800b8d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a2:	3324      	adds	r3, #36	; 0x24
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	4611      	mov	r1, r2
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f000 fdcf 	bl	800c44c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b8ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8b0:	f000 f8b8 	bl	800ba24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b8b4:	f000 fbfe 	bl	800c0b4 <xTaskResumeAll>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d189      	bne.n	800b7d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b8be:	4b10      	ldr	r3, [pc, #64]	; (800b900 <xQueueReceive+0x1bc>)
 800b8c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8c4:	601a      	str	r2, [r3, #0]
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	f3bf 8f6f 	isb	sy
 800b8ce:	e780      	b.n	800b7d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b8d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8d2:	f000 f8a7 	bl	800ba24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b8d6:	f000 fbed 	bl	800c0b4 <xTaskResumeAll>
 800b8da:	e77a      	b.n	800b7d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b8dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8de:	f000 f8a1 	bl	800ba24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b8e2:	f000 fbe7 	bl	800c0b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b8e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8e8:	f000 f8ee 	bl	800bac8 <prvIsQueueEmpty>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f43f af6f 	beq.w	800b7d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b8f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3730      	adds	r7, #48	; 0x30
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	e000ed04 	.word	0xe000ed04

0800b904 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b086      	sub	sp, #24
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b910:	2300      	movs	r3, #0
 800b912:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b918:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d10d      	bne.n	800b93e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d14d      	bne.n	800b9c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	4618      	mov	r0, r3
 800b930:	f000 ffbc 	bl	800c8ac <xTaskPriorityDisinherit>
 800b934:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2200      	movs	r2, #0
 800b93a:	609a      	str	r2, [r3, #8]
 800b93c:	e043      	b.n	800b9c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d119      	bne.n	800b978 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6858      	ldr	r0, [r3, #4]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b94c:	461a      	mov	r2, r3
 800b94e:	68b9      	ldr	r1, [r7, #8]
 800b950:	f006 fd17 	bl	8012382 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	685a      	ldr	r2, [r3, #4]
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b95c:	441a      	add	r2, r3
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	685a      	ldr	r2, [r3, #4]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	689b      	ldr	r3, [r3, #8]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d32b      	bcc.n	800b9c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	605a      	str	r2, [r3, #4]
 800b976:	e026      	b.n	800b9c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	68d8      	ldr	r0, [r3, #12]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b980:	461a      	mov	r2, r3
 800b982:	68b9      	ldr	r1, [r7, #8]
 800b984:	f006 fcfd 	bl	8012382 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	68da      	ldr	r2, [r3, #12]
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b990:	425b      	negs	r3, r3
 800b992:	441a      	add	r2, r3
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	68da      	ldr	r2, [r3, #12]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d207      	bcs.n	800b9b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	689a      	ldr	r2, [r3, #8]
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ac:	425b      	negs	r3, r3
 800b9ae:	441a      	add	r2, r3
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2b02      	cmp	r3, #2
 800b9b8:	d105      	bne.n	800b9c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d002      	beq.n	800b9c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	3b01      	subs	r3, #1
 800b9c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	1c5a      	adds	r2, r3, #1
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b9ce:	697b      	ldr	r3, [r7, #20]
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3718      	adds	r7, #24
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b082      	sub	sp, #8
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d018      	beq.n	800ba1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	68da      	ldr	r2, [r3, #12]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f2:	441a      	add	r2, r3
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	68da      	ldr	r2, [r3, #12]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d303      	bcc.n	800ba0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681a      	ldr	r2, [r3, #0]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	68d9      	ldr	r1, [r3, #12]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba14:	461a      	mov	r2, r3
 800ba16:	6838      	ldr	r0, [r7, #0]
 800ba18:	f006 fcb3 	bl	8012382 <memcpy>
	}
}
 800ba1c:	bf00      	nop
 800ba1e:	3708      	adds	r7, #8
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ba2c:	f001 fc7a 	bl	800d324 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba38:	e011      	b.n	800ba5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d012      	beq.n	800ba68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	3324      	adds	r3, #36	; 0x24
 800ba46:	4618      	mov	r0, r3
 800ba48:	f000 fd50 	bl	800c4ec <xTaskRemoveFromEventList>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d001      	beq.n	800ba56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ba52:	f000 fe27 	bl	800c6a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ba56:	7bfb      	ldrb	r3, [r7, #15]
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	dce9      	bgt.n	800ba3a <prvUnlockQueue+0x16>
 800ba66:	e000      	b.n	800ba6a <prvUnlockQueue+0x46>
					break;
 800ba68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	22ff      	movs	r2, #255	; 0xff
 800ba6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ba72:	f001 fc87 	bl	800d384 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ba76:	f001 fc55 	bl	800d324 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba82:	e011      	b.n	800baa8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	691b      	ldr	r3, [r3, #16]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d012      	beq.n	800bab2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	3310      	adds	r3, #16
 800ba90:	4618      	mov	r0, r3
 800ba92:	f000 fd2b 	bl	800c4ec <xTaskRemoveFromEventList>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d001      	beq.n	800baa0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ba9c:	f000 fe02 	bl	800c6a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800baa0:	7bbb      	ldrb	r3, [r7, #14]
 800baa2:	3b01      	subs	r3, #1
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800baa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800baac:	2b00      	cmp	r3, #0
 800baae:	dce9      	bgt.n	800ba84 <prvUnlockQueue+0x60>
 800bab0:	e000      	b.n	800bab4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bab2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	22ff      	movs	r2, #255	; 0xff
 800bab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800babc:	f001 fc62 	bl	800d384 <vPortExitCritical>
}
 800bac0:	bf00      	nop
 800bac2:	3710      	adds	r7, #16
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bad0:	f001 fc28 	bl	800d324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d102      	bne.n	800bae2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800badc:	2301      	movs	r3, #1
 800bade:	60fb      	str	r3, [r7, #12]
 800bae0:	e001      	b.n	800bae6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bae2:	2300      	movs	r3, #0
 800bae4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bae6:	f001 fc4d 	bl	800d384 <vPortExitCritical>

	return xReturn;
 800baea:	68fb      	ldr	r3, [r7, #12]
}
 800baec:	4618      	mov	r0, r3
 800baee:	3710      	adds	r7, #16
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bafc:	f001 fc12 	bl	800d324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d102      	bne.n	800bb12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	60fb      	str	r3, [r7, #12]
 800bb10:	e001      	b.n	800bb16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bb12:	2300      	movs	r3, #0
 800bb14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb16:	f001 fc35 	bl	800d384 <vPortExitCritical>

	return xReturn;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3710      	adds	r7, #16
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bb24:	b480      	push	{r7}
 800bb26:	b085      	sub	sp, #20
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb2e:	2300      	movs	r3, #0
 800bb30:	60fb      	str	r3, [r7, #12]
 800bb32:	e014      	b.n	800bb5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bb34:	4a0f      	ldr	r2, [pc, #60]	; (800bb74 <vQueueAddToRegistry+0x50>)
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d10b      	bne.n	800bb58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bb40:	490c      	ldr	r1, [pc, #48]	; (800bb74 <vQueueAddToRegistry+0x50>)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	683a      	ldr	r2, [r7, #0]
 800bb46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bb4a:	4a0a      	ldr	r2, [pc, #40]	; (800bb74 <vQueueAddToRegistry+0x50>)
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	00db      	lsls	r3, r3, #3
 800bb50:	4413      	add	r3, r2
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bb56:	e006      	b.n	800bb66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	3301      	adds	r3, #1
 800bb5c:	60fb      	str	r3, [r7, #12]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2b07      	cmp	r3, #7
 800bb62:	d9e7      	bls.n	800bb34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bb64:	bf00      	nop
 800bb66:	bf00      	nop
 800bb68:	3714      	adds	r7, #20
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop
 800bb74:	240053a0 	.word	0x240053a0

0800bb78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b086      	sub	sp, #24
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bb88:	f001 fbcc 	bl	800d324 <vPortEnterCritical>
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb92:	b25b      	sxtb	r3, r3
 800bb94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb98:	d103      	bne.n	800bba2 <vQueueWaitForMessageRestricted+0x2a>
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bba8:	b25b      	sxtb	r3, r3
 800bbaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbae:	d103      	bne.n	800bbb8 <vQueueWaitForMessageRestricted+0x40>
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbb8:	f001 fbe4 	bl	800d384 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d106      	bne.n	800bbd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	3324      	adds	r3, #36	; 0x24
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	68b9      	ldr	r1, [r7, #8]
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f000 fc61 	bl	800c494 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bbd2:	6978      	ldr	r0, [r7, #20]
 800bbd4:	f7ff ff26 	bl	800ba24 <prvUnlockQueue>
	}
 800bbd8:	bf00      	nop
 800bbda:	3718      	adds	r7, #24
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b08e      	sub	sp, #56	; 0x38
 800bbe4:	af04      	add	r7, sp, #16
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	60b9      	str	r1, [r7, #8]
 800bbea:	607a      	str	r2, [r7, #4]
 800bbec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bbee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d10a      	bne.n	800bc0a <xTaskCreateStatic+0x2a>
	__asm volatile
 800bbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf8:	f383 8811 	msr	BASEPRI, r3
 800bbfc:	f3bf 8f6f 	isb	sy
 800bc00:	f3bf 8f4f 	dsb	sy
 800bc04:	623b      	str	r3, [r7, #32]
}
 800bc06:	bf00      	nop
 800bc08:	e7fe      	b.n	800bc08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d10a      	bne.n	800bc26 <xTaskCreateStatic+0x46>
	__asm volatile
 800bc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc14:	f383 8811 	msr	BASEPRI, r3
 800bc18:	f3bf 8f6f 	isb	sy
 800bc1c:	f3bf 8f4f 	dsb	sy
 800bc20:	61fb      	str	r3, [r7, #28]
}
 800bc22:	bf00      	nop
 800bc24:	e7fe      	b.n	800bc24 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bc26:	23bc      	movs	r3, #188	; 0xbc
 800bc28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	2bbc      	cmp	r3, #188	; 0xbc
 800bc2e:	d00a      	beq.n	800bc46 <xTaskCreateStatic+0x66>
	__asm volatile
 800bc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc34:	f383 8811 	msr	BASEPRI, r3
 800bc38:	f3bf 8f6f 	isb	sy
 800bc3c:	f3bf 8f4f 	dsb	sy
 800bc40:	61bb      	str	r3, [r7, #24]
}
 800bc42:	bf00      	nop
 800bc44:	e7fe      	b.n	800bc44 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bc46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d01e      	beq.n	800bc8c <xTaskCreateStatic+0xac>
 800bc4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d01b      	beq.n	800bc8c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc60:	2202      	movs	r2, #2
 800bc62:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bc66:	2300      	movs	r3, #0
 800bc68:	9303      	str	r3, [sp, #12]
 800bc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6c:	9302      	str	r3, [sp, #8]
 800bc6e:	f107 0314 	add.w	r3, r7, #20
 800bc72:	9301      	str	r3, [sp, #4]
 800bc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc76:	9300      	str	r3, [sp, #0]
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	68b9      	ldr	r1, [r7, #8]
 800bc7e:	68f8      	ldr	r0, [r7, #12]
 800bc80:	f000 f850 	bl	800bd24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc86:	f000 f8f3 	bl	800be70 <prvAddNewTaskToReadyList>
 800bc8a:	e001      	b.n	800bc90 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bc90:	697b      	ldr	r3, [r7, #20]
	}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3728      	adds	r7, #40	; 0x28
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}

0800bc9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bc9a:	b580      	push	{r7, lr}
 800bc9c:	b08c      	sub	sp, #48	; 0x30
 800bc9e:	af04      	add	r7, sp, #16
 800bca0:	60f8      	str	r0, [r7, #12]
 800bca2:	60b9      	str	r1, [r7, #8]
 800bca4:	603b      	str	r3, [r7, #0]
 800bca6:	4613      	mov	r3, r2
 800bca8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bcaa:	88fb      	ldrh	r3, [r7, #6]
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f001 fc5a 	bl	800d568 <pvPortMalloc>
 800bcb4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d00e      	beq.n	800bcda <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bcbc:	20bc      	movs	r0, #188	; 0xbc
 800bcbe:	f001 fc53 	bl	800d568 <pvPortMalloc>
 800bcc2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bcc4:	69fb      	ldr	r3, [r7, #28]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d003      	beq.n	800bcd2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	697a      	ldr	r2, [r7, #20]
 800bcce:	631a      	str	r2, [r3, #48]	; 0x30
 800bcd0:	e005      	b.n	800bcde <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bcd2:	6978      	ldr	r0, [r7, #20]
 800bcd4:	f001 fd14 	bl	800d700 <vPortFree>
 800bcd8:	e001      	b.n	800bcde <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bcde:	69fb      	ldr	r3, [r7, #28]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d017      	beq.n	800bd14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	2200      	movs	r2, #0
 800bce8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bcec:	88fa      	ldrh	r2, [r7, #6]
 800bcee:	2300      	movs	r3, #0
 800bcf0:	9303      	str	r3, [sp, #12]
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	9302      	str	r3, [sp, #8]
 800bcf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf8:	9301      	str	r3, [sp, #4]
 800bcfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfc:	9300      	str	r3, [sp, #0]
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	68b9      	ldr	r1, [r7, #8]
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f000 f80e 	bl	800bd24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd08:	69f8      	ldr	r0, [r7, #28]
 800bd0a:	f000 f8b1 	bl	800be70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	61bb      	str	r3, [r7, #24]
 800bd12:	e002      	b.n	800bd1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bd14:	f04f 33ff 	mov.w	r3, #4294967295
 800bd18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bd1a:	69bb      	ldr	r3, [r7, #24]
	}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3720      	adds	r7, #32
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b088      	sub	sp, #32
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]
 800bd30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	009b      	lsls	r3, r3, #2
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	21a5      	movs	r1, #165	; 0xa5
 800bd3e:	f006 fb2e 	bl	801239e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd46:	6879      	ldr	r1, [r7, #4]
 800bd48:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bd4c:	440b      	add	r3, r1
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	4413      	add	r3, r2
 800bd52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	f023 0307 	bic.w	r3, r3, #7
 800bd5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bd5c:	69bb      	ldr	r3, [r7, #24]
 800bd5e:	f003 0307 	and.w	r3, r3, #7
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00a      	beq.n	800bd7c <prvInitialiseNewTask+0x58>
	__asm volatile
 800bd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6a:	f383 8811 	msr	BASEPRI, r3
 800bd6e:	f3bf 8f6f 	isb	sy
 800bd72:	f3bf 8f4f 	dsb	sy
 800bd76:	617b      	str	r3, [r7, #20]
}
 800bd78:	bf00      	nop
 800bd7a:	e7fe      	b.n	800bd7a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d01f      	beq.n	800bdc2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd82:	2300      	movs	r3, #0
 800bd84:	61fb      	str	r3, [r7, #28]
 800bd86:	e012      	b.n	800bdae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bd88:	68ba      	ldr	r2, [r7, #8]
 800bd8a:	69fb      	ldr	r3, [r7, #28]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	7819      	ldrb	r1, [r3, #0]
 800bd90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd92:	69fb      	ldr	r3, [r7, #28]
 800bd94:	4413      	add	r3, r2
 800bd96:	3334      	adds	r3, #52	; 0x34
 800bd98:	460a      	mov	r2, r1
 800bd9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bd9c:	68ba      	ldr	r2, [r7, #8]
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	4413      	add	r3, r2
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d006      	beq.n	800bdb6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	61fb      	str	r3, [r7, #28]
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	2b0f      	cmp	r3, #15
 800bdb2:	d9e9      	bls.n	800bd88 <prvInitialiseNewTask+0x64>
 800bdb4:	e000      	b.n	800bdb8 <prvInitialiseNewTask+0x94>
			{
				break;
 800bdb6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bdc0:	e003      	b.n	800bdca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bdca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdcc:	2b37      	cmp	r3, #55	; 0x37
 800bdce:	d901      	bls.n	800bdd4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bdd0:	2337      	movs	r3, #55	; 0x37
 800bdd2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdd8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdde:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde2:	2200      	movs	r2, #0
 800bde4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde8:	3304      	adds	r3, #4
 800bdea:	4618      	mov	r0, r3
 800bdec:	f7ff f978 	bl	800b0e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf2:	3318      	adds	r3, #24
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7ff f973 	bl	800b0e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdfe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800be0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800be10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be12:	2200      	movs	r2, #0
 800be14:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1a:	2200      	movs	r2, #0
 800be1c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800be20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be22:	3354      	adds	r3, #84	; 0x54
 800be24:	2260      	movs	r2, #96	; 0x60
 800be26:	2100      	movs	r1, #0
 800be28:	4618      	mov	r0, r3
 800be2a:	f006 fab8 	bl	801239e <memset>
 800be2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be30:	4a0c      	ldr	r2, [pc, #48]	; (800be64 <prvInitialiseNewTask+0x140>)
 800be32:	659a      	str	r2, [r3, #88]	; 0x58
 800be34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be36:	4a0c      	ldr	r2, [pc, #48]	; (800be68 <prvInitialiseNewTask+0x144>)
 800be38:	65da      	str	r2, [r3, #92]	; 0x5c
 800be3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3c:	4a0b      	ldr	r2, [pc, #44]	; (800be6c <prvInitialiseNewTask+0x148>)
 800be3e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800be40:	683a      	ldr	r2, [r7, #0]
 800be42:	68f9      	ldr	r1, [r7, #12]
 800be44:	69b8      	ldr	r0, [r7, #24]
 800be46:	f001 f941 	bl	800d0cc <pxPortInitialiseStack>
 800be4a:	4602      	mov	r2, r0
 800be4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800be50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be52:	2b00      	cmp	r3, #0
 800be54:	d002      	beq.n	800be5c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800be56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be5c:	bf00      	nop
 800be5e:	3720      	adds	r7, #32
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}
 800be64:	08015768 	.word	0x08015768
 800be68:	08015788 	.word	0x08015788
 800be6c:	08015748 	.word	0x08015748

0800be70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800be78:	f001 fa54 	bl	800d324 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800be7c:	4b2d      	ldr	r3, [pc, #180]	; (800bf34 <prvAddNewTaskToReadyList+0xc4>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	3301      	adds	r3, #1
 800be82:	4a2c      	ldr	r2, [pc, #176]	; (800bf34 <prvAddNewTaskToReadyList+0xc4>)
 800be84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800be86:	4b2c      	ldr	r3, [pc, #176]	; (800bf38 <prvAddNewTaskToReadyList+0xc8>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d109      	bne.n	800bea2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800be8e:	4a2a      	ldr	r2, [pc, #168]	; (800bf38 <prvAddNewTaskToReadyList+0xc8>)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800be94:	4b27      	ldr	r3, [pc, #156]	; (800bf34 <prvAddNewTaskToReadyList+0xc4>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d110      	bne.n	800bebe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800be9c:	f000 fc26 	bl	800c6ec <prvInitialiseTaskLists>
 800bea0:	e00d      	b.n	800bebe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bea2:	4b26      	ldr	r3, [pc, #152]	; (800bf3c <prvAddNewTaskToReadyList+0xcc>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d109      	bne.n	800bebe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800beaa:	4b23      	ldr	r3, [pc, #140]	; (800bf38 <prvAddNewTaskToReadyList+0xc8>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d802      	bhi.n	800bebe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800beb8:	4a1f      	ldr	r2, [pc, #124]	; (800bf38 <prvAddNewTaskToReadyList+0xc8>)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bebe:	4b20      	ldr	r3, [pc, #128]	; (800bf40 <prvAddNewTaskToReadyList+0xd0>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	3301      	adds	r3, #1
 800bec4:	4a1e      	ldr	r2, [pc, #120]	; (800bf40 <prvAddNewTaskToReadyList+0xd0>)
 800bec6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bec8:	4b1d      	ldr	r3, [pc, #116]	; (800bf40 <prvAddNewTaskToReadyList+0xd0>)
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bed4:	4b1b      	ldr	r3, [pc, #108]	; (800bf44 <prvAddNewTaskToReadyList+0xd4>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d903      	bls.n	800bee4 <prvAddNewTaskToReadyList+0x74>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee0:	4a18      	ldr	r2, [pc, #96]	; (800bf44 <prvAddNewTaskToReadyList+0xd4>)
 800bee2:	6013      	str	r3, [r2, #0]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bee8:	4613      	mov	r3, r2
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	4413      	add	r3, r2
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	4a15      	ldr	r2, [pc, #84]	; (800bf48 <prvAddNewTaskToReadyList+0xd8>)
 800bef2:	441a      	add	r2, r3
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	3304      	adds	r3, #4
 800bef8:	4619      	mov	r1, r3
 800befa:	4610      	mov	r0, r2
 800befc:	f7ff f8fd 	bl	800b0fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bf00:	f001 fa40 	bl	800d384 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bf04:	4b0d      	ldr	r3, [pc, #52]	; (800bf3c <prvAddNewTaskToReadyList+0xcc>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00e      	beq.n	800bf2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bf0c:	4b0a      	ldr	r3, [pc, #40]	; (800bf38 <prvAddNewTaskToReadyList+0xc8>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d207      	bcs.n	800bf2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bf1a:	4b0c      	ldr	r3, [pc, #48]	; (800bf4c <prvAddNewTaskToReadyList+0xdc>)
 800bf1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf20:	601a      	str	r2, [r3, #0]
 800bf22:	f3bf 8f4f 	dsb	sy
 800bf26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf2a:	bf00      	nop
 800bf2c:	3708      	adds	r7, #8
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	240058b4 	.word	0x240058b4
 800bf38:	240053e0 	.word	0x240053e0
 800bf3c:	240058c0 	.word	0x240058c0
 800bf40:	240058d0 	.word	0x240058d0
 800bf44:	240058bc 	.word	0x240058bc
 800bf48:	240053e4 	.word	0x240053e4
 800bf4c:	e000ed04 	.word	0xe000ed04

0800bf50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d017      	beq.n	800bf92 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bf62:	4b13      	ldr	r3, [pc, #76]	; (800bfb0 <vTaskDelay+0x60>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d00a      	beq.n	800bf80 <vTaskDelay+0x30>
	__asm volatile
 800bf6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6e:	f383 8811 	msr	BASEPRI, r3
 800bf72:	f3bf 8f6f 	isb	sy
 800bf76:	f3bf 8f4f 	dsb	sy
 800bf7a:	60bb      	str	r3, [r7, #8]
}
 800bf7c:	bf00      	nop
 800bf7e:	e7fe      	b.n	800bf7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bf80:	f000 f88a 	bl	800c098 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bf84:	2100      	movs	r1, #0
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 fcfe 	bl	800c988 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bf8c:	f000 f892 	bl	800c0b4 <xTaskResumeAll>
 800bf90:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d107      	bne.n	800bfa8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bf98:	4b06      	ldr	r3, [pc, #24]	; (800bfb4 <vTaskDelay+0x64>)
 800bf9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf9e:	601a      	str	r2, [r3, #0]
 800bfa0:	f3bf 8f4f 	dsb	sy
 800bfa4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bfa8:	bf00      	nop
 800bfaa:	3710      	adds	r7, #16
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	240058dc 	.word	0x240058dc
 800bfb4:	e000ed04 	.word	0xe000ed04

0800bfb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b08a      	sub	sp, #40	; 0x28
 800bfbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bfc6:	463a      	mov	r2, r7
 800bfc8:	1d39      	adds	r1, r7, #4
 800bfca:	f107 0308 	add.w	r3, r7, #8
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7ff f832 	bl	800b038 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bfd4:	6839      	ldr	r1, [r7, #0]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	68ba      	ldr	r2, [r7, #8]
 800bfda:	9202      	str	r2, [sp, #8]
 800bfdc:	9301      	str	r3, [sp, #4]
 800bfde:	2300      	movs	r3, #0
 800bfe0:	9300      	str	r3, [sp, #0]
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	460a      	mov	r2, r1
 800bfe6:	4924      	ldr	r1, [pc, #144]	; (800c078 <vTaskStartScheduler+0xc0>)
 800bfe8:	4824      	ldr	r0, [pc, #144]	; (800c07c <vTaskStartScheduler+0xc4>)
 800bfea:	f7ff fdf9 	bl	800bbe0 <xTaskCreateStatic>
 800bfee:	4603      	mov	r3, r0
 800bff0:	4a23      	ldr	r2, [pc, #140]	; (800c080 <vTaskStartScheduler+0xc8>)
 800bff2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bff4:	4b22      	ldr	r3, [pc, #136]	; (800c080 <vTaskStartScheduler+0xc8>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d002      	beq.n	800c002 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bffc:	2301      	movs	r3, #1
 800bffe:	617b      	str	r3, [r7, #20]
 800c000:	e001      	b.n	800c006 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c002:	2300      	movs	r3, #0
 800c004:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d102      	bne.n	800c012 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c00c:	f000 fd10 	bl	800ca30 <xTimerCreateTimerTask>
 800c010:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	2b01      	cmp	r3, #1
 800c016:	d11b      	bne.n	800c050 <vTaskStartScheduler+0x98>
	__asm volatile
 800c018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01c:	f383 8811 	msr	BASEPRI, r3
 800c020:	f3bf 8f6f 	isb	sy
 800c024:	f3bf 8f4f 	dsb	sy
 800c028:	613b      	str	r3, [r7, #16]
}
 800c02a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c02c:	4b15      	ldr	r3, [pc, #84]	; (800c084 <vTaskStartScheduler+0xcc>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	3354      	adds	r3, #84	; 0x54
 800c032:	4a15      	ldr	r2, [pc, #84]	; (800c088 <vTaskStartScheduler+0xd0>)
 800c034:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c036:	4b15      	ldr	r3, [pc, #84]	; (800c08c <vTaskStartScheduler+0xd4>)
 800c038:	f04f 32ff 	mov.w	r2, #4294967295
 800c03c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c03e:	4b14      	ldr	r3, [pc, #80]	; (800c090 <vTaskStartScheduler+0xd8>)
 800c040:	2201      	movs	r2, #1
 800c042:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c044:	4b13      	ldr	r3, [pc, #76]	; (800c094 <vTaskStartScheduler+0xdc>)
 800c046:	2200      	movs	r2, #0
 800c048:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c04a:	f001 f8c9 	bl	800d1e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c04e:	e00e      	b.n	800c06e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c056:	d10a      	bne.n	800c06e <vTaskStartScheduler+0xb6>
	__asm volatile
 800c058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05c:	f383 8811 	msr	BASEPRI, r3
 800c060:	f3bf 8f6f 	isb	sy
 800c064:	f3bf 8f4f 	dsb	sy
 800c068:	60fb      	str	r3, [r7, #12]
}
 800c06a:	bf00      	nop
 800c06c:	e7fe      	b.n	800c06c <vTaskStartScheduler+0xb4>
}
 800c06e:	bf00      	nop
 800c070:	3718      	adds	r7, #24
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	080150d0 	.word	0x080150d0
 800c07c:	0800c6bd 	.word	0x0800c6bd
 800c080:	240058d8 	.word	0x240058d8
 800c084:	240053e0 	.word	0x240053e0
 800c088:	24000118 	.word	0x24000118
 800c08c:	240058d4 	.word	0x240058d4
 800c090:	240058c0 	.word	0x240058c0
 800c094:	240058b8 	.word	0x240058b8

0800c098 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c098:	b480      	push	{r7}
 800c09a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c09c:	4b04      	ldr	r3, [pc, #16]	; (800c0b0 <vTaskSuspendAll+0x18>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	4a03      	ldr	r2, [pc, #12]	; (800c0b0 <vTaskSuspendAll+0x18>)
 800c0a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c0a6:	bf00      	nop
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr
 800c0b0:	240058dc 	.word	0x240058dc

0800c0b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c0c2:	4b42      	ldr	r3, [pc, #264]	; (800c1cc <xTaskResumeAll+0x118>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d10a      	bne.n	800c0e0 <xTaskResumeAll+0x2c>
	__asm volatile
 800c0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ce:	f383 8811 	msr	BASEPRI, r3
 800c0d2:	f3bf 8f6f 	isb	sy
 800c0d6:	f3bf 8f4f 	dsb	sy
 800c0da:	603b      	str	r3, [r7, #0]
}
 800c0dc:	bf00      	nop
 800c0de:	e7fe      	b.n	800c0de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c0e0:	f001 f920 	bl	800d324 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c0e4:	4b39      	ldr	r3, [pc, #228]	; (800c1cc <xTaskResumeAll+0x118>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	3b01      	subs	r3, #1
 800c0ea:	4a38      	ldr	r2, [pc, #224]	; (800c1cc <xTaskResumeAll+0x118>)
 800c0ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0ee:	4b37      	ldr	r3, [pc, #220]	; (800c1cc <xTaskResumeAll+0x118>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d162      	bne.n	800c1bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c0f6:	4b36      	ldr	r3, [pc, #216]	; (800c1d0 <xTaskResumeAll+0x11c>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d05e      	beq.n	800c1bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c0fe:	e02f      	b.n	800c160 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c100:	4b34      	ldr	r3, [pc, #208]	; (800c1d4 <xTaskResumeAll+0x120>)
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	3318      	adds	r3, #24
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7ff f851 	bl	800b1b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	3304      	adds	r3, #4
 800c116:	4618      	mov	r0, r3
 800c118:	f7ff f84c 	bl	800b1b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c120:	4b2d      	ldr	r3, [pc, #180]	; (800c1d8 <xTaskResumeAll+0x124>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	429a      	cmp	r2, r3
 800c126:	d903      	bls.n	800c130 <xTaskResumeAll+0x7c>
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c12c:	4a2a      	ldr	r2, [pc, #168]	; (800c1d8 <xTaskResumeAll+0x124>)
 800c12e:	6013      	str	r3, [r2, #0]
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c134:	4613      	mov	r3, r2
 800c136:	009b      	lsls	r3, r3, #2
 800c138:	4413      	add	r3, r2
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	4a27      	ldr	r2, [pc, #156]	; (800c1dc <xTaskResumeAll+0x128>)
 800c13e:	441a      	add	r2, r3
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	3304      	adds	r3, #4
 800c144:	4619      	mov	r1, r3
 800c146:	4610      	mov	r0, r2
 800c148:	f7fe ffd7 	bl	800b0fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c150:	4b23      	ldr	r3, [pc, #140]	; (800c1e0 <xTaskResumeAll+0x12c>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c156:	429a      	cmp	r2, r3
 800c158:	d302      	bcc.n	800c160 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c15a:	4b22      	ldr	r3, [pc, #136]	; (800c1e4 <xTaskResumeAll+0x130>)
 800c15c:	2201      	movs	r2, #1
 800c15e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c160:	4b1c      	ldr	r3, [pc, #112]	; (800c1d4 <xTaskResumeAll+0x120>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1cb      	bne.n	800c100 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d001      	beq.n	800c172 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c16e:	f000 fb5f 	bl	800c830 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c172:	4b1d      	ldr	r3, [pc, #116]	; (800c1e8 <xTaskResumeAll+0x134>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d010      	beq.n	800c1a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c17e:	f000 f847 	bl	800c210 <xTaskIncrementTick>
 800c182:	4603      	mov	r3, r0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d002      	beq.n	800c18e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c188:	4b16      	ldr	r3, [pc, #88]	; (800c1e4 <xTaskResumeAll+0x130>)
 800c18a:	2201      	movs	r2, #1
 800c18c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	3b01      	subs	r3, #1
 800c192:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d1f1      	bne.n	800c17e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c19a:	4b13      	ldr	r3, [pc, #76]	; (800c1e8 <xTaskResumeAll+0x134>)
 800c19c:	2200      	movs	r2, #0
 800c19e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c1a0:	4b10      	ldr	r3, [pc, #64]	; (800c1e4 <xTaskResumeAll+0x130>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d009      	beq.n	800c1bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c1ac:	4b0f      	ldr	r3, [pc, #60]	; (800c1ec <xTaskResumeAll+0x138>)
 800c1ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1b2:	601a      	str	r2, [r3, #0]
 800c1b4:	f3bf 8f4f 	dsb	sy
 800c1b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c1bc:	f001 f8e2 	bl	800d384 <vPortExitCritical>

	return xAlreadyYielded;
 800c1c0:	68bb      	ldr	r3, [r7, #8]
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3710      	adds	r7, #16
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	bf00      	nop
 800c1cc:	240058dc 	.word	0x240058dc
 800c1d0:	240058b4 	.word	0x240058b4
 800c1d4:	24005874 	.word	0x24005874
 800c1d8:	240058bc 	.word	0x240058bc
 800c1dc:	240053e4 	.word	0x240053e4
 800c1e0:	240053e0 	.word	0x240053e0
 800c1e4:	240058c8 	.word	0x240058c8
 800c1e8:	240058c4 	.word	0x240058c4
 800c1ec:	e000ed04 	.word	0xe000ed04

0800c1f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b083      	sub	sp, #12
 800c1f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c1f6:	4b05      	ldr	r3, [pc, #20]	; (800c20c <xTaskGetTickCount+0x1c>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c1fc:	687b      	ldr	r3, [r7, #4]
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	370c      	adds	r7, #12
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop
 800c20c:	240058b8 	.word	0x240058b8

0800c210 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b086      	sub	sp, #24
 800c214:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c216:	2300      	movs	r3, #0
 800c218:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c21a:	4b4f      	ldr	r3, [pc, #316]	; (800c358 <xTaskIncrementTick+0x148>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	f040 808f 	bne.w	800c342 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c224:	4b4d      	ldr	r3, [pc, #308]	; (800c35c <xTaskIncrementTick+0x14c>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	3301      	adds	r3, #1
 800c22a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c22c:	4a4b      	ldr	r2, [pc, #300]	; (800c35c <xTaskIncrementTick+0x14c>)
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d120      	bne.n	800c27a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c238:	4b49      	ldr	r3, [pc, #292]	; (800c360 <xTaskIncrementTick+0x150>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d00a      	beq.n	800c258 <xTaskIncrementTick+0x48>
	__asm volatile
 800c242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c246:	f383 8811 	msr	BASEPRI, r3
 800c24a:	f3bf 8f6f 	isb	sy
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	603b      	str	r3, [r7, #0]
}
 800c254:	bf00      	nop
 800c256:	e7fe      	b.n	800c256 <xTaskIncrementTick+0x46>
 800c258:	4b41      	ldr	r3, [pc, #260]	; (800c360 <xTaskIncrementTick+0x150>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	60fb      	str	r3, [r7, #12]
 800c25e:	4b41      	ldr	r3, [pc, #260]	; (800c364 <xTaskIncrementTick+0x154>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4a3f      	ldr	r2, [pc, #252]	; (800c360 <xTaskIncrementTick+0x150>)
 800c264:	6013      	str	r3, [r2, #0]
 800c266:	4a3f      	ldr	r2, [pc, #252]	; (800c364 <xTaskIncrementTick+0x154>)
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	6013      	str	r3, [r2, #0]
 800c26c:	4b3e      	ldr	r3, [pc, #248]	; (800c368 <xTaskIncrementTick+0x158>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	3301      	adds	r3, #1
 800c272:	4a3d      	ldr	r2, [pc, #244]	; (800c368 <xTaskIncrementTick+0x158>)
 800c274:	6013      	str	r3, [r2, #0]
 800c276:	f000 fadb 	bl	800c830 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c27a:	4b3c      	ldr	r3, [pc, #240]	; (800c36c <xTaskIncrementTick+0x15c>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	693a      	ldr	r2, [r7, #16]
 800c280:	429a      	cmp	r2, r3
 800c282:	d349      	bcc.n	800c318 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c284:	4b36      	ldr	r3, [pc, #216]	; (800c360 <xTaskIncrementTick+0x150>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d104      	bne.n	800c298 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c28e:	4b37      	ldr	r3, [pc, #220]	; (800c36c <xTaskIncrementTick+0x15c>)
 800c290:	f04f 32ff 	mov.w	r2, #4294967295
 800c294:	601a      	str	r2, [r3, #0]
					break;
 800c296:	e03f      	b.n	800c318 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c298:	4b31      	ldr	r3, [pc, #196]	; (800c360 <xTaskIncrementTick+0x150>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	68db      	ldr	r3, [r3, #12]
 800c2a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c2a8:	693a      	ldr	r2, [r7, #16]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d203      	bcs.n	800c2b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c2b0:	4a2e      	ldr	r2, [pc, #184]	; (800c36c <xTaskIncrementTick+0x15c>)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c2b6:	e02f      	b.n	800c318 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	3304      	adds	r3, #4
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7fe ff79 	bl	800b1b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d004      	beq.n	800c2d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	3318      	adds	r3, #24
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7fe ff70 	bl	800b1b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2d8:	4b25      	ldr	r3, [pc, #148]	; (800c370 <xTaskIncrementTick+0x160>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d903      	bls.n	800c2e8 <xTaskIncrementTick+0xd8>
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e4:	4a22      	ldr	r2, [pc, #136]	; (800c370 <xTaskIncrementTick+0x160>)
 800c2e6:	6013      	str	r3, [r2, #0]
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ec:	4613      	mov	r3, r2
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	4413      	add	r3, r2
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	4a1f      	ldr	r2, [pc, #124]	; (800c374 <xTaskIncrementTick+0x164>)
 800c2f6:	441a      	add	r2, r3
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	3304      	adds	r3, #4
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	4610      	mov	r0, r2
 800c300:	f7fe fefb 	bl	800b0fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c308:	4b1b      	ldr	r3, [pc, #108]	; (800c378 <xTaskIncrementTick+0x168>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c30e:	429a      	cmp	r2, r3
 800c310:	d3b8      	bcc.n	800c284 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c312:	2301      	movs	r3, #1
 800c314:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c316:	e7b5      	b.n	800c284 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c318:	4b17      	ldr	r3, [pc, #92]	; (800c378 <xTaskIncrementTick+0x168>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c31e:	4915      	ldr	r1, [pc, #84]	; (800c374 <xTaskIncrementTick+0x164>)
 800c320:	4613      	mov	r3, r2
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	4413      	add	r3, r2
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	440b      	add	r3, r1
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d901      	bls.n	800c334 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c330:	2301      	movs	r3, #1
 800c332:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c334:	4b11      	ldr	r3, [pc, #68]	; (800c37c <xTaskIncrementTick+0x16c>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d007      	beq.n	800c34c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c33c:	2301      	movs	r3, #1
 800c33e:	617b      	str	r3, [r7, #20]
 800c340:	e004      	b.n	800c34c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c342:	4b0f      	ldr	r3, [pc, #60]	; (800c380 <xTaskIncrementTick+0x170>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	3301      	adds	r3, #1
 800c348:	4a0d      	ldr	r2, [pc, #52]	; (800c380 <xTaskIncrementTick+0x170>)
 800c34a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c34c:	697b      	ldr	r3, [r7, #20]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3718      	adds	r7, #24
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	240058dc 	.word	0x240058dc
 800c35c:	240058b8 	.word	0x240058b8
 800c360:	2400586c 	.word	0x2400586c
 800c364:	24005870 	.word	0x24005870
 800c368:	240058cc 	.word	0x240058cc
 800c36c:	240058d4 	.word	0x240058d4
 800c370:	240058bc 	.word	0x240058bc
 800c374:	240053e4 	.word	0x240053e4
 800c378:	240053e0 	.word	0x240053e0
 800c37c:	240058c8 	.word	0x240058c8
 800c380:	240058c4 	.word	0x240058c4

0800c384 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c384:	b480      	push	{r7}
 800c386:	b085      	sub	sp, #20
 800c388:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c38a:	4b2a      	ldr	r3, [pc, #168]	; (800c434 <vTaskSwitchContext+0xb0>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d003      	beq.n	800c39a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c392:	4b29      	ldr	r3, [pc, #164]	; (800c438 <vTaskSwitchContext+0xb4>)
 800c394:	2201      	movs	r2, #1
 800c396:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c398:	e046      	b.n	800c428 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c39a:	4b27      	ldr	r3, [pc, #156]	; (800c438 <vTaskSwitchContext+0xb4>)
 800c39c:	2200      	movs	r2, #0
 800c39e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3a0:	4b26      	ldr	r3, [pc, #152]	; (800c43c <vTaskSwitchContext+0xb8>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	60fb      	str	r3, [r7, #12]
 800c3a6:	e010      	b.n	800c3ca <vTaskSwitchContext+0x46>
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d10a      	bne.n	800c3c4 <vTaskSwitchContext+0x40>
	__asm volatile
 800c3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b2:	f383 8811 	msr	BASEPRI, r3
 800c3b6:	f3bf 8f6f 	isb	sy
 800c3ba:	f3bf 8f4f 	dsb	sy
 800c3be:	607b      	str	r3, [r7, #4]
}
 800c3c0:	bf00      	nop
 800c3c2:	e7fe      	b.n	800c3c2 <vTaskSwitchContext+0x3e>
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	3b01      	subs	r3, #1
 800c3c8:	60fb      	str	r3, [r7, #12]
 800c3ca:	491d      	ldr	r1, [pc, #116]	; (800c440 <vTaskSwitchContext+0xbc>)
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	4613      	mov	r3, r2
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	4413      	add	r3, r2
 800c3d4:	009b      	lsls	r3, r3, #2
 800c3d6:	440b      	add	r3, r1
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d0e4      	beq.n	800c3a8 <vTaskSwitchContext+0x24>
 800c3de:	68fa      	ldr	r2, [r7, #12]
 800c3e0:	4613      	mov	r3, r2
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	4413      	add	r3, r2
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	4a15      	ldr	r2, [pc, #84]	; (800c440 <vTaskSwitchContext+0xbc>)
 800c3ea:	4413      	add	r3, r2
 800c3ec:	60bb      	str	r3, [r7, #8]
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	685a      	ldr	r2, [r3, #4]
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	605a      	str	r2, [r3, #4]
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	685a      	ldr	r2, [r3, #4]
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	3308      	adds	r3, #8
 800c400:	429a      	cmp	r2, r3
 800c402:	d104      	bne.n	800c40e <vTaskSwitchContext+0x8a>
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	685a      	ldr	r2, [r3, #4]
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	605a      	str	r2, [r3, #4]
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	68db      	ldr	r3, [r3, #12]
 800c414:	4a0b      	ldr	r2, [pc, #44]	; (800c444 <vTaskSwitchContext+0xc0>)
 800c416:	6013      	str	r3, [r2, #0]
 800c418:	4a08      	ldr	r2, [pc, #32]	; (800c43c <vTaskSwitchContext+0xb8>)
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c41e:	4b09      	ldr	r3, [pc, #36]	; (800c444 <vTaskSwitchContext+0xc0>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	3354      	adds	r3, #84	; 0x54
 800c424:	4a08      	ldr	r2, [pc, #32]	; (800c448 <vTaskSwitchContext+0xc4>)
 800c426:	6013      	str	r3, [r2, #0]
}
 800c428:	bf00      	nop
 800c42a:	3714      	adds	r7, #20
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr
 800c434:	240058dc 	.word	0x240058dc
 800c438:	240058c8 	.word	0x240058c8
 800c43c:	240058bc 	.word	0x240058bc
 800c440:	240053e4 	.word	0x240053e4
 800c444:	240053e0 	.word	0x240053e0
 800c448:	24000118 	.word	0x24000118

0800c44c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d10a      	bne.n	800c472 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c460:	f383 8811 	msr	BASEPRI, r3
 800c464:	f3bf 8f6f 	isb	sy
 800c468:	f3bf 8f4f 	dsb	sy
 800c46c:	60fb      	str	r3, [r7, #12]
}
 800c46e:	bf00      	nop
 800c470:	e7fe      	b.n	800c470 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c472:	4b07      	ldr	r3, [pc, #28]	; (800c490 <vTaskPlaceOnEventList+0x44>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	3318      	adds	r3, #24
 800c478:	4619      	mov	r1, r3
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f7fe fe61 	bl	800b142 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c480:	2101      	movs	r1, #1
 800c482:	6838      	ldr	r0, [r7, #0]
 800c484:	f000 fa80 	bl	800c988 <prvAddCurrentTaskToDelayedList>
}
 800c488:	bf00      	nop
 800c48a:	3710      	adds	r7, #16
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	240053e0 	.word	0x240053e0

0800c494 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c494:	b580      	push	{r7, lr}
 800c496:	b086      	sub	sp, #24
 800c498:	af00      	add	r7, sp, #0
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	60b9      	str	r1, [r7, #8]
 800c49e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d10a      	bne.n	800c4bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4aa:	f383 8811 	msr	BASEPRI, r3
 800c4ae:	f3bf 8f6f 	isb	sy
 800c4b2:	f3bf 8f4f 	dsb	sy
 800c4b6:	617b      	str	r3, [r7, #20]
}
 800c4b8:	bf00      	nop
 800c4ba:	e7fe      	b.n	800c4ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c4bc:	4b0a      	ldr	r3, [pc, #40]	; (800c4e8 <vTaskPlaceOnEventListRestricted+0x54>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	3318      	adds	r3, #24
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	68f8      	ldr	r0, [r7, #12]
 800c4c6:	f7fe fe18 	bl	800b0fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d002      	beq.n	800c4d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c4d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c4d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c4d6:	6879      	ldr	r1, [r7, #4]
 800c4d8:	68b8      	ldr	r0, [r7, #8]
 800c4da:	f000 fa55 	bl	800c988 <prvAddCurrentTaskToDelayedList>
	}
 800c4de:	bf00      	nop
 800c4e0:	3718      	adds	r7, #24
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	240053e0 	.word	0x240053e0

0800c4ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b086      	sub	sp, #24
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	68db      	ldr	r3, [r3, #12]
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d10a      	bne.n	800c518 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c506:	f383 8811 	msr	BASEPRI, r3
 800c50a:	f3bf 8f6f 	isb	sy
 800c50e:	f3bf 8f4f 	dsb	sy
 800c512:	60fb      	str	r3, [r7, #12]
}
 800c514:	bf00      	nop
 800c516:	e7fe      	b.n	800c516 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	3318      	adds	r3, #24
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7fe fe49 	bl	800b1b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c522:	4b1e      	ldr	r3, [pc, #120]	; (800c59c <xTaskRemoveFromEventList+0xb0>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d11d      	bne.n	800c566 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	3304      	adds	r3, #4
 800c52e:	4618      	mov	r0, r3
 800c530:	f7fe fe40 	bl	800b1b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c538:	4b19      	ldr	r3, [pc, #100]	; (800c5a0 <xTaskRemoveFromEventList+0xb4>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d903      	bls.n	800c548 <xTaskRemoveFromEventList+0x5c>
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c544:	4a16      	ldr	r2, [pc, #88]	; (800c5a0 <xTaskRemoveFromEventList+0xb4>)
 800c546:	6013      	str	r3, [r2, #0]
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c54c:	4613      	mov	r3, r2
 800c54e:	009b      	lsls	r3, r3, #2
 800c550:	4413      	add	r3, r2
 800c552:	009b      	lsls	r3, r3, #2
 800c554:	4a13      	ldr	r2, [pc, #76]	; (800c5a4 <xTaskRemoveFromEventList+0xb8>)
 800c556:	441a      	add	r2, r3
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	3304      	adds	r3, #4
 800c55c:	4619      	mov	r1, r3
 800c55e:	4610      	mov	r0, r2
 800c560:	f7fe fdcb 	bl	800b0fa <vListInsertEnd>
 800c564:	e005      	b.n	800c572 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	3318      	adds	r3, #24
 800c56a:	4619      	mov	r1, r3
 800c56c:	480e      	ldr	r0, [pc, #56]	; (800c5a8 <xTaskRemoveFromEventList+0xbc>)
 800c56e:	f7fe fdc4 	bl	800b0fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c576:	4b0d      	ldr	r3, [pc, #52]	; (800c5ac <xTaskRemoveFromEventList+0xc0>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d905      	bls.n	800c58c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c580:	2301      	movs	r3, #1
 800c582:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c584:	4b0a      	ldr	r3, [pc, #40]	; (800c5b0 <xTaskRemoveFromEventList+0xc4>)
 800c586:	2201      	movs	r2, #1
 800c588:	601a      	str	r2, [r3, #0]
 800c58a:	e001      	b.n	800c590 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c58c:	2300      	movs	r3, #0
 800c58e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c590:	697b      	ldr	r3, [r7, #20]
}
 800c592:	4618      	mov	r0, r3
 800c594:	3718      	adds	r7, #24
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	240058dc 	.word	0x240058dc
 800c5a0:	240058bc 	.word	0x240058bc
 800c5a4:	240053e4 	.word	0x240053e4
 800c5a8:	24005874 	.word	0x24005874
 800c5ac:	240053e0 	.word	0x240053e0
 800c5b0:	240058c8 	.word	0x240058c8

0800c5b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c5bc:	4b06      	ldr	r3, [pc, #24]	; (800c5d8 <vTaskInternalSetTimeOutState+0x24>)
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c5c4:	4b05      	ldr	r3, [pc, #20]	; (800c5dc <vTaskInternalSetTimeOutState+0x28>)
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	605a      	str	r2, [r3, #4]
}
 800c5cc:	bf00      	nop
 800c5ce:	370c      	adds	r7, #12
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr
 800c5d8:	240058cc 	.word	0x240058cc
 800c5dc:	240058b8 	.word	0x240058b8

0800c5e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b088      	sub	sp, #32
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d10a      	bne.n	800c606 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f4:	f383 8811 	msr	BASEPRI, r3
 800c5f8:	f3bf 8f6f 	isb	sy
 800c5fc:	f3bf 8f4f 	dsb	sy
 800c600:	613b      	str	r3, [r7, #16]
}
 800c602:	bf00      	nop
 800c604:	e7fe      	b.n	800c604 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d10a      	bne.n	800c622 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c610:	f383 8811 	msr	BASEPRI, r3
 800c614:	f3bf 8f6f 	isb	sy
 800c618:	f3bf 8f4f 	dsb	sy
 800c61c:	60fb      	str	r3, [r7, #12]
}
 800c61e:	bf00      	nop
 800c620:	e7fe      	b.n	800c620 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c622:	f000 fe7f 	bl	800d324 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c626:	4b1d      	ldr	r3, [pc, #116]	; (800c69c <xTaskCheckForTimeOut+0xbc>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	69ba      	ldr	r2, [r7, #24]
 800c632:	1ad3      	subs	r3, r2, r3
 800c634:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c63e:	d102      	bne.n	800c646 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c640:	2300      	movs	r3, #0
 800c642:	61fb      	str	r3, [r7, #28]
 800c644:	e023      	b.n	800c68e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681a      	ldr	r2, [r3, #0]
 800c64a:	4b15      	ldr	r3, [pc, #84]	; (800c6a0 <xTaskCheckForTimeOut+0xc0>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d007      	beq.n	800c662 <xTaskCheckForTimeOut+0x82>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	69ba      	ldr	r2, [r7, #24]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d302      	bcc.n	800c662 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c65c:	2301      	movs	r3, #1
 800c65e:	61fb      	str	r3, [r7, #28]
 800c660:	e015      	b.n	800c68e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	697a      	ldr	r2, [r7, #20]
 800c668:	429a      	cmp	r2, r3
 800c66a:	d20b      	bcs.n	800c684 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	1ad2      	subs	r2, r2, r3
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f7ff ff9b 	bl	800c5b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c67e:	2300      	movs	r3, #0
 800c680:	61fb      	str	r3, [r7, #28]
 800c682:	e004      	b.n	800c68e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	2200      	movs	r2, #0
 800c688:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c68a:	2301      	movs	r3, #1
 800c68c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c68e:	f000 fe79 	bl	800d384 <vPortExitCritical>

	return xReturn;
 800c692:	69fb      	ldr	r3, [r7, #28]
}
 800c694:	4618      	mov	r0, r3
 800c696:	3720      	adds	r7, #32
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	240058b8 	.word	0x240058b8
 800c6a0:	240058cc 	.word	0x240058cc

0800c6a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c6a8:	4b03      	ldr	r3, [pc, #12]	; (800c6b8 <vTaskMissedYield+0x14>)
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	601a      	str	r2, [r3, #0]
}
 800c6ae:	bf00      	nop
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr
 800c6b8:	240058c8 	.word	0x240058c8

0800c6bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c6c4:	f000 f852 	bl	800c76c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c6c8:	4b06      	ldr	r3, [pc, #24]	; (800c6e4 <prvIdleTask+0x28>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	d9f9      	bls.n	800c6c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c6d0:	4b05      	ldr	r3, [pc, #20]	; (800c6e8 <prvIdleTask+0x2c>)
 800c6d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6d6:	601a      	str	r2, [r3, #0]
 800c6d8:	f3bf 8f4f 	dsb	sy
 800c6dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c6e0:	e7f0      	b.n	800c6c4 <prvIdleTask+0x8>
 800c6e2:	bf00      	nop
 800c6e4:	240053e4 	.word	0x240053e4
 800c6e8:	e000ed04 	.word	0xe000ed04

0800c6ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	607b      	str	r3, [r7, #4]
 800c6f6:	e00c      	b.n	800c712 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	4613      	mov	r3, r2
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	4413      	add	r3, r2
 800c700:	009b      	lsls	r3, r3, #2
 800c702:	4a12      	ldr	r2, [pc, #72]	; (800c74c <prvInitialiseTaskLists+0x60>)
 800c704:	4413      	add	r3, r2
 800c706:	4618      	mov	r0, r3
 800c708:	f7fe fcca 	bl	800b0a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	3301      	adds	r3, #1
 800c710:	607b      	str	r3, [r7, #4]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2b37      	cmp	r3, #55	; 0x37
 800c716:	d9ef      	bls.n	800c6f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c718:	480d      	ldr	r0, [pc, #52]	; (800c750 <prvInitialiseTaskLists+0x64>)
 800c71a:	f7fe fcc1 	bl	800b0a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c71e:	480d      	ldr	r0, [pc, #52]	; (800c754 <prvInitialiseTaskLists+0x68>)
 800c720:	f7fe fcbe 	bl	800b0a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c724:	480c      	ldr	r0, [pc, #48]	; (800c758 <prvInitialiseTaskLists+0x6c>)
 800c726:	f7fe fcbb 	bl	800b0a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c72a:	480c      	ldr	r0, [pc, #48]	; (800c75c <prvInitialiseTaskLists+0x70>)
 800c72c:	f7fe fcb8 	bl	800b0a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c730:	480b      	ldr	r0, [pc, #44]	; (800c760 <prvInitialiseTaskLists+0x74>)
 800c732:	f7fe fcb5 	bl	800b0a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c736:	4b0b      	ldr	r3, [pc, #44]	; (800c764 <prvInitialiseTaskLists+0x78>)
 800c738:	4a05      	ldr	r2, [pc, #20]	; (800c750 <prvInitialiseTaskLists+0x64>)
 800c73a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c73c:	4b0a      	ldr	r3, [pc, #40]	; (800c768 <prvInitialiseTaskLists+0x7c>)
 800c73e:	4a05      	ldr	r2, [pc, #20]	; (800c754 <prvInitialiseTaskLists+0x68>)
 800c740:	601a      	str	r2, [r3, #0]
}
 800c742:	bf00      	nop
 800c744:	3708      	adds	r7, #8
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	240053e4 	.word	0x240053e4
 800c750:	24005844 	.word	0x24005844
 800c754:	24005858 	.word	0x24005858
 800c758:	24005874 	.word	0x24005874
 800c75c:	24005888 	.word	0x24005888
 800c760:	240058a0 	.word	0x240058a0
 800c764:	2400586c 	.word	0x2400586c
 800c768:	24005870 	.word	0x24005870

0800c76c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c772:	e019      	b.n	800c7a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c774:	f000 fdd6 	bl	800d324 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c778:	4b10      	ldr	r3, [pc, #64]	; (800c7bc <prvCheckTasksWaitingTermination+0x50>)
 800c77a:	68db      	ldr	r3, [r3, #12]
 800c77c:	68db      	ldr	r3, [r3, #12]
 800c77e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	3304      	adds	r3, #4
 800c784:	4618      	mov	r0, r3
 800c786:	f7fe fd15 	bl	800b1b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c78a:	4b0d      	ldr	r3, [pc, #52]	; (800c7c0 <prvCheckTasksWaitingTermination+0x54>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	3b01      	subs	r3, #1
 800c790:	4a0b      	ldr	r2, [pc, #44]	; (800c7c0 <prvCheckTasksWaitingTermination+0x54>)
 800c792:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c794:	4b0b      	ldr	r3, [pc, #44]	; (800c7c4 <prvCheckTasksWaitingTermination+0x58>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	3b01      	subs	r3, #1
 800c79a:	4a0a      	ldr	r2, [pc, #40]	; (800c7c4 <prvCheckTasksWaitingTermination+0x58>)
 800c79c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c79e:	f000 fdf1 	bl	800d384 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 f810 	bl	800c7c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c7a8:	4b06      	ldr	r3, [pc, #24]	; (800c7c4 <prvCheckTasksWaitingTermination+0x58>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d1e1      	bne.n	800c774 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c7b0:	bf00      	nop
 800c7b2:	bf00      	nop
 800c7b4:	3708      	adds	r7, #8
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	24005888 	.word	0x24005888
 800c7c0:	240058b4 	.word	0x240058b4
 800c7c4:	2400589c 	.word	0x2400589c

0800c7c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	3354      	adds	r3, #84	; 0x54
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f006 fb73 	bl	8012ec0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d108      	bne.n	800c7f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f000 ff89 	bl	800d700 <vPortFree>
				vPortFree( pxTCB );
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 ff86 	bl	800d700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c7f4:	e018      	b.n	800c828 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d103      	bne.n	800c808 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 ff7d 	bl	800d700 <vPortFree>
	}
 800c806:	e00f      	b.n	800c828 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c80e:	2b02      	cmp	r3, #2
 800c810:	d00a      	beq.n	800c828 <prvDeleteTCB+0x60>
	__asm volatile
 800c812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c816:	f383 8811 	msr	BASEPRI, r3
 800c81a:	f3bf 8f6f 	isb	sy
 800c81e:	f3bf 8f4f 	dsb	sy
 800c822:	60fb      	str	r3, [r7, #12]
}
 800c824:	bf00      	nop
 800c826:	e7fe      	b.n	800c826 <prvDeleteTCB+0x5e>
	}
 800c828:	bf00      	nop
 800c82a:	3710      	adds	r7, #16
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c836:	4b0c      	ldr	r3, [pc, #48]	; (800c868 <prvResetNextTaskUnblockTime+0x38>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d104      	bne.n	800c84a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c840:	4b0a      	ldr	r3, [pc, #40]	; (800c86c <prvResetNextTaskUnblockTime+0x3c>)
 800c842:	f04f 32ff 	mov.w	r2, #4294967295
 800c846:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c848:	e008      	b.n	800c85c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c84a:	4b07      	ldr	r3, [pc, #28]	; (800c868 <prvResetNextTaskUnblockTime+0x38>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	68db      	ldr	r3, [r3, #12]
 800c850:	68db      	ldr	r3, [r3, #12]
 800c852:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	4a04      	ldr	r2, [pc, #16]	; (800c86c <prvResetNextTaskUnblockTime+0x3c>)
 800c85a:	6013      	str	r3, [r2, #0]
}
 800c85c:	bf00      	nop
 800c85e:	370c      	adds	r7, #12
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr
 800c868:	2400586c 	.word	0x2400586c
 800c86c:	240058d4 	.word	0x240058d4

0800c870 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c870:	b480      	push	{r7}
 800c872:	b083      	sub	sp, #12
 800c874:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c876:	4b0b      	ldr	r3, [pc, #44]	; (800c8a4 <xTaskGetSchedulerState+0x34>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d102      	bne.n	800c884 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c87e:	2301      	movs	r3, #1
 800c880:	607b      	str	r3, [r7, #4]
 800c882:	e008      	b.n	800c896 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c884:	4b08      	ldr	r3, [pc, #32]	; (800c8a8 <xTaskGetSchedulerState+0x38>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d102      	bne.n	800c892 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c88c:	2302      	movs	r3, #2
 800c88e:	607b      	str	r3, [r7, #4]
 800c890:	e001      	b.n	800c896 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c892:	2300      	movs	r3, #0
 800c894:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c896:	687b      	ldr	r3, [r7, #4]
	}
 800c898:	4618      	mov	r0, r3
 800c89a:	370c      	adds	r7, #12
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr
 800c8a4:	240058c0 	.word	0x240058c0
 800c8a8:	240058dc 	.word	0x240058dc

0800c8ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b086      	sub	sp, #24
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d056      	beq.n	800c970 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c8c2:	4b2e      	ldr	r3, [pc, #184]	; (800c97c <xTaskPriorityDisinherit+0xd0>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	693a      	ldr	r2, [r7, #16]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d00a      	beq.n	800c8e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d0:	f383 8811 	msr	BASEPRI, r3
 800c8d4:	f3bf 8f6f 	isb	sy
 800c8d8:	f3bf 8f4f 	dsb	sy
 800c8dc:	60fb      	str	r3, [r7, #12]
}
 800c8de:	bf00      	nop
 800c8e0:	e7fe      	b.n	800c8e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d10a      	bne.n	800c900 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ee:	f383 8811 	msr	BASEPRI, r3
 800c8f2:	f3bf 8f6f 	isb	sy
 800c8f6:	f3bf 8f4f 	dsb	sy
 800c8fa:	60bb      	str	r3, [r7, #8]
}
 800c8fc:	bf00      	nop
 800c8fe:	e7fe      	b.n	800c8fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c904:	1e5a      	subs	r2, r3, #1
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c912:	429a      	cmp	r2, r3
 800c914:	d02c      	beq.n	800c970 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d128      	bne.n	800c970 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	3304      	adds	r3, #4
 800c922:	4618      	mov	r0, r3
 800c924:	f7fe fc46 	bl	800b1b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c934:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c940:	4b0f      	ldr	r3, [pc, #60]	; (800c980 <xTaskPriorityDisinherit+0xd4>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	429a      	cmp	r2, r3
 800c946:	d903      	bls.n	800c950 <xTaskPriorityDisinherit+0xa4>
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c94c:	4a0c      	ldr	r2, [pc, #48]	; (800c980 <xTaskPriorityDisinherit+0xd4>)
 800c94e:	6013      	str	r3, [r2, #0]
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c954:	4613      	mov	r3, r2
 800c956:	009b      	lsls	r3, r3, #2
 800c958:	4413      	add	r3, r2
 800c95a:	009b      	lsls	r3, r3, #2
 800c95c:	4a09      	ldr	r2, [pc, #36]	; (800c984 <xTaskPriorityDisinherit+0xd8>)
 800c95e:	441a      	add	r2, r3
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	3304      	adds	r3, #4
 800c964:	4619      	mov	r1, r3
 800c966:	4610      	mov	r0, r2
 800c968:	f7fe fbc7 	bl	800b0fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c96c:	2301      	movs	r3, #1
 800c96e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c970:	697b      	ldr	r3, [r7, #20]
	}
 800c972:	4618      	mov	r0, r3
 800c974:	3718      	adds	r7, #24
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	240053e0 	.word	0x240053e0
 800c980:	240058bc 	.word	0x240058bc
 800c984:	240053e4 	.word	0x240053e4

0800c988 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c992:	4b21      	ldr	r3, [pc, #132]	; (800ca18 <prvAddCurrentTaskToDelayedList+0x90>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c998:	4b20      	ldr	r3, [pc, #128]	; (800ca1c <prvAddCurrentTaskToDelayedList+0x94>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	3304      	adds	r3, #4
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7fe fc08 	bl	800b1b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9aa:	d10a      	bne.n	800c9c2 <prvAddCurrentTaskToDelayedList+0x3a>
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d007      	beq.n	800c9c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9b2:	4b1a      	ldr	r3, [pc, #104]	; (800ca1c <prvAddCurrentTaskToDelayedList+0x94>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	3304      	adds	r3, #4
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	4819      	ldr	r0, [pc, #100]	; (800ca20 <prvAddCurrentTaskToDelayedList+0x98>)
 800c9bc:	f7fe fb9d 	bl	800b0fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c9c0:	e026      	b.n	800ca10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c9c2:	68fa      	ldr	r2, [r7, #12]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	4413      	add	r3, r2
 800c9c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c9ca:	4b14      	ldr	r3, [pc, #80]	; (800ca1c <prvAddCurrentTaskToDelayedList+0x94>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	68ba      	ldr	r2, [r7, #8]
 800c9d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c9d2:	68ba      	ldr	r2, [r7, #8]
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d209      	bcs.n	800c9ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9da:	4b12      	ldr	r3, [pc, #72]	; (800ca24 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	4b0f      	ldr	r3, [pc, #60]	; (800ca1c <prvAddCurrentTaskToDelayedList+0x94>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	3304      	adds	r3, #4
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	4610      	mov	r0, r2
 800c9e8:	f7fe fbab 	bl	800b142 <vListInsert>
}
 800c9ec:	e010      	b.n	800ca10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9ee:	4b0e      	ldr	r3, [pc, #56]	; (800ca28 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c9f0:	681a      	ldr	r2, [r3, #0]
 800c9f2:	4b0a      	ldr	r3, [pc, #40]	; (800ca1c <prvAddCurrentTaskToDelayedList+0x94>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	3304      	adds	r3, #4
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	4610      	mov	r0, r2
 800c9fc:	f7fe fba1 	bl	800b142 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ca00:	4b0a      	ldr	r3, [pc, #40]	; (800ca2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	68ba      	ldr	r2, [r7, #8]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d202      	bcs.n	800ca10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ca0a:	4a08      	ldr	r2, [pc, #32]	; (800ca2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	6013      	str	r3, [r2, #0]
}
 800ca10:	bf00      	nop
 800ca12:	3710      	adds	r7, #16
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	240058b8 	.word	0x240058b8
 800ca1c:	240053e0 	.word	0x240053e0
 800ca20:	240058a0 	.word	0x240058a0
 800ca24:	24005870 	.word	0x24005870
 800ca28:	2400586c 	.word	0x2400586c
 800ca2c:	240058d4 	.word	0x240058d4

0800ca30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b08a      	sub	sp, #40	; 0x28
 800ca34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ca36:	2300      	movs	r3, #0
 800ca38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ca3a:	f000 fb07 	bl	800d04c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ca3e:	4b1c      	ldr	r3, [pc, #112]	; (800cab0 <xTimerCreateTimerTask+0x80>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d021      	beq.n	800ca8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ca46:	2300      	movs	r3, #0
 800ca48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ca4e:	1d3a      	adds	r2, r7, #4
 800ca50:	f107 0108 	add.w	r1, r7, #8
 800ca54:	f107 030c 	add.w	r3, r7, #12
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7fe fb07 	bl	800b06c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ca5e:	6879      	ldr	r1, [r7, #4]
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	68fa      	ldr	r2, [r7, #12]
 800ca64:	9202      	str	r2, [sp, #8]
 800ca66:	9301      	str	r3, [sp, #4]
 800ca68:	2302      	movs	r3, #2
 800ca6a:	9300      	str	r3, [sp, #0]
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	460a      	mov	r2, r1
 800ca70:	4910      	ldr	r1, [pc, #64]	; (800cab4 <xTimerCreateTimerTask+0x84>)
 800ca72:	4811      	ldr	r0, [pc, #68]	; (800cab8 <xTimerCreateTimerTask+0x88>)
 800ca74:	f7ff f8b4 	bl	800bbe0 <xTaskCreateStatic>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	4a10      	ldr	r2, [pc, #64]	; (800cabc <xTimerCreateTimerTask+0x8c>)
 800ca7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ca7e:	4b0f      	ldr	r3, [pc, #60]	; (800cabc <xTimerCreateTimerTask+0x8c>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d001      	beq.n	800ca8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ca86:	2301      	movs	r3, #1
 800ca88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d10a      	bne.n	800caa6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ca90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca94:	f383 8811 	msr	BASEPRI, r3
 800ca98:	f3bf 8f6f 	isb	sy
 800ca9c:	f3bf 8f4f 	dsb	sy
 800caa0:	613b      	str	r3, [r7, #16]
}
 800caa2:	bf00      	nop
 800caa4:	e7fe      	b.n	800caa4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800caa6:	697b      	ldr	r3, [r7, #20]
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3718      	adds	r7, #24
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	24005910 	.word	0x24005910
 800cab4:	080150d8 	.word	0x080150d8
 800cab8:	0800cbf5 	.word	0x0800cbf5
 800cabc:	24005914 	.word	0x24005914

0800cac0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b08a      	sub	sp, #40	; 0x28
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	60b9      	str	r1, [r7, #8]
 800caca:	607a      	str	r2, [r7, #4]
 800cacc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cace:	2300      	movs	r3, #0
 800cad0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d10a      	bne.n	800caee <xTimerGenericCommand+0x2e>
	__asm volatile
 800cad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cadc:	f383 8811 	msr	BASEPRI, r3
 800cae0:	f3bf 8f6f 	isb	sy
 800cae4:	f3bf 8f4f 	dsb	sy
 800cae8:	623b      	str	r3, [r7, #32]
}
 800caea:	bf00      	nop
 800caec:	e7fe      	b.n	800caec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800caee:	4b1a      	ldr	r3, [pc, #104]	; (800cb58 <xTimerGenericCommand+0x98>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d02a      	beq.n	800cb4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	2b05      	cmp	r3, #5
 800cb06:	dc18      	bgt.n	800cb3a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cb08:	f7ff feb2 	bl	800c870 <xTaskGetSchedulerState>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	2b02      	cmp	r3, #2
 800cb10:	d109      	bne.n	800cb26 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cb12:	4b11      	ldr	r3, [pc, #68]	; (800cb58 <xTimerGenericCommand+0x98>)
 800cb14:	6818      	ldr	r0, [r3, #0]
 800cb16:	f107 0110 	add.w	r1, r7, #16
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb1e:	f7fe fc77 	bl	800b410 <xQueueGenericSend>
 800cb22:	6278      	str	r0, [r7, #36]	; 0x24
 800cb24:	e012      	b.n	800cb4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cb26:	4b0c      	ldr	r3, [pc, #48]	; (800cb58 <xTimerGenericCommand+0x98>)
 800cb28:	6818      	ldr	r0, [r3, #0]
 800cb2a:	f107 0110 	add.w	r1, r7, #16
 800cb2e:	2300      	movs	r3, #0
 800cb30:	2200      	movs	r2, #0
 800cb32:	f7fe fc6d 	bl	800b410 <xQueueGenericSend>
 800cb36:	6278      	str	r0, [r7, #36]	; 0x24
 800cb38:	e008      	b.n	800cb4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cb3a:	4b07      	ldr	r3, [pc, #28]	; (800cb58 <xTimerGenericCommand+0x98>)
 800cb3c:	6818      	ldr	r0, [r3, #0]
 800cb3e:	f107 0110 	add.w	r1, r7, #16
 800cb42:	2300      	movs	r3, #0
 800cb44:	683a      	ldr	r2, [r7, #0]
 800cb46:	f7fe fd61 	bl	800b60c <xQueueGenericSendFromISR>
 800cb4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3728      	adds	r7, #40	; 0x28
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	24005910 	.word	0x24005910

0800cb5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b088      	sub	sp, #32
 800cb60:	af02      	add	r7, sp, #8
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb66:	4b22      	ldr	r3, [pc, #136]	; (800cbf0 <prvProcessExpiredTimer+0x94>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	68db      	ldr	r3, [r3, #12]
 800cb6c:	68db      	ldr	r3, [r3, #12]
 800cb6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	3304      	adds	r3, #4
 800cb74:	4618      	mov	r0, r3
 800cb76:	f7fe fb1d 	bl	800b1b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb80:	f003 0304 	and.w	r3, r3, #4
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d022      	beq.n	800cbce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	699a      	ldr	r2, [r3, #24]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	18d1      	adds	r1, r2, r3
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	683a      	ldr	r2, [r7, #0]
 800cb94:	6978      	ldr	r0, [r7, #20]
 800cb96:	f000 f8d1 	bl	800cd3c <prvInsertTimerInActiveList>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d01f      	beq.n	800cbe0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cba0:	2300      	movs	r3, #0
 800cba2:	9300      	str	r3, [sp, #0]
 800cba4:	2300      	movs	r3, #0
 800cba6:	687a      	ldr	r2, [r7, #4]
 800cba8:	2100      	movs	r1, #0
 800cbaa:	6978      	ldr	r0, [r7, #20]
 800cbac:	f7ff ff88 	bl	800cac0 <xTimerGenericCommand>
 800cbb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d113      	bne.n	800cbe0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbbc:	f383 8811 	msr	BASEPRI, r3
 800cbc0:	f3bf 8f6f 	isb	sy
 800cbc4:	f3bf 8f4f 	dsb	sy
 800cbc8:	60fb      	str	r3, [r7, #12]
}
 800cbca:	bf00      	nop
 800cbcc:	e7fe      	b.n	800cbcc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbd4:	f023 0301 	bic.w	r3, r3, #1
 800cbd8:	b2da      	uxtb	r2, r3
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	6a1b      	ldr	r3, [r3, #32]
 800cbe4:	6978      	ldr	r0, [r7, #20]
 800cbe6:	4798      	blx	r3
}
 800cbe8:	bf00      	nop
 800cbea:	3718      	adds	r7, #24
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	24005908 	.word	0x24005908

0800cbf4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cbfc:	f107 0308 	add.w	r3, r7, #8
 800cc00:	4618      	mov	r0, r3
 800cc02:	f000 f857 	bl	800ccb4 <prvGetNextExpireTime>
 800cc06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	68f8      	ldr	r0, [r7, #12]
 800cc0e:	f000 f803 	bl	800cc18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cc12:	f000 f8d5 	bl	800cdc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cc16:	e7f1      	b.n	800cbfc <prvTimerTask+0x8>

0800cc18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cc22:	f7ff fa39 	bl	800c098 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cc26:	f107 0308 	add.w	r3, r7, #8
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f000 f866 	bl	800ccfc <prvSampleTimeNow>
 800cc30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d130      	bne.n	800cc9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d10a      	bne.n	800cc54 <prvProcessTimerOrBlockTask+0x3c>
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d806      	bhi.n	800cc54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cc46:	f7ff fa35 	bl	800c0b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cc4a:	68f9      	ldr	r1, [r7, #12]
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f7ff ff85 	bl	800cb5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cc52:	e024      	b.n	800cc9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d008      	beq.n	800cc6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cc5a:	4b13      	ldr	r3, [pc, #76]	; (800cca8 <prvProcessTimerOrBlockTask+0x90>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d101      	bne.n	800cc68 <prvProcessTimerOrBlockTask+0x50>
 800cc64:	2301      	movs	r3, #1
 800cc66:	e000      	b.n	800cc6a <prvProcessTimerOrBlockTask+0x52>
 800cc68:	2300      	movs	r3, #0
 800cc6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cc6c:	4b0f      	ldr	r3, [pc, #60]	; (800ccac <prvProcessTimerOrBlockTask+0x94>)
 800cc6e:	6818      	ldr	r0, [r3, #0]
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	1ad3      	subs	r3, r2, r3
 800cc76:	683a      	ldr	r2, [r7, #0]
 800cc78:	4619      	mov	r1, r3
 800cc7a:	f7fe ff7d 	bl	800bb78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cc7e:	f7ff fa19 	bl	800c0b4 <xTaskResumeAll>
 800cc82:	4603      	mov	r3, r0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d10a      	bne.n	800cc9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cc88:	4b09      	ldr	r3, [pc, #36]	; (800ccb0 <prvProcessTimerOrBlockTask+0x98>)
 800cc8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc8e:	601a      	str	r2, [r3, #0]
 800cc90:	f3bf 8f4f 	dsb	sy
 800cc94:	f3bf 8f6f 	isb	sy
}
 800cc98:	e001      	b.n	800cc9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cc9a:	f7ff fa0b 	bl	800c0b4 <xTaskResumeAll>
}
 800cc9e:	bf00      	nop
 800cca0:	3710      	adds	r7, #16
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	2400590c 	.word	0x2400590c
 800ccac:	24005910 	.word	0x24005910
 800ccb0:	e000ed04 	.word	0xe000ed04

0800ccb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b085      	sub	sp, #20
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ccbc:	4b0e      	ldr	r3, [pc, #56]	; (800ccf8 <prvGetNextExpireTime+0x44>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d101      	bne.n	800ccca <prvGetNextExpireTime+0x16>
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	e000      	b.n	800cccc <prvGetNextExpireTime+0x18>
 800ccca:	2200      	movs	r2, #0
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d105      	bne.n	800cce4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ccd8:	4b07      	ldr	r3, [pc, #28]	; (800ccf8 <prvGetNextExpireTime+0x44>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	68db      	ldr	r3, [r3, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	60fb      	str	r3, [r7, #12]
 800cce2:	e001      	b.n	800cce8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cce4:	2300      	movs	r3, #0
 800cce6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cce8:	68fb      	ldr	r3, [r7, #12]
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3714      	adds	r7, #20
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr
 800ccf6:	bf00      	nop
 800ccf8:	24005908 	.word	0x24005908

0800ccfc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cd04:	f7ff fa74 	bl	800c1f0 <xTaskGetTickCount>
 800cd08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cd0a:	4b0b      	ldr	r3, [pc, #44]	; (800cd38 <prvSampleTimeNow+0x3c>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	68fa      	ldr	r2, [r7, #12]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d205      	bcs.n	800cd20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cd14:	f000 f936 	bl	800cf84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	601a      	str	r2, [r3, #0]
 800cd1e:	e002      	b.n	800cd26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2200      	movs	r2, #0
 800cd24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cd26:	4a04      	ldr	r2, [pc, #16]	; (800cd38 <prvSampleTimeNow+0x3c>)
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3710      	adds	r7, #16
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	24005918 	.word	0x24005918

0800cd3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b086      	sub	sp, #24
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
 800cd48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	68ba      	ldr	r2, [r7, #8]
 800cd52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	68fa      	ldr	r2, [r7, #12]
 800cd58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cd5a:	68ba      	ldr	r2, [r7, #8]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d812      	bhi.n	800cd88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	1ad2      	subs	r2, r2, r3
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	699b      	ldr	r3, [r3, #24]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d302      	bcc.n	800cd76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cd70:	2301      	movs	r3, #1
 800cd72:	617b      	str	r3, [r7, #20]
 800cd74:	e01b      	b.n	800cdae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cd76:	4b10      	ldr	r3, [pc, #64]	; (800cdb8 <prvInsertTimerInActiveList+0x7c>)
 800cd78:	681a      	ldr	r2, [r3, #0]
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	3304      	adds	r3, #4
 800cd7e:	4619      	mov	r1, r3
 800cd80:	4610      	mov	r0, r2
 800cd82:	f7fe f9de 	bl	800b142 <vListInsert>
 800cd86:	e012      	b.n	800cdae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cd88:	687a      	ldr	r2, [r7, #4]
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d206      	bcs.n	800cd9e <prvInsertTimerInActiveList+0x62>
 800cd90:	68ba      	ldr	r2, [r7, #8]
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d302      	bcc.n	800cd9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cd98:	2301      	movs	r3, #1
 800cd9a:	617b      	str	r3, [r7, #20]
 800cd9c:	e007      	b.n	800cdae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd9e:	4b07      	ldr	r3, [pc, #28]	; (800cdbc <prvInsertTimerInActiveList+0x80>)
 800cda0:	681a      	ldr	r2, [r3, #0]
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	3304      	adds	r3, #4
 800cda6:	4619      	mov	r1, r3
 800cda8:	4610      	mov	r0, r2
 800cdaa:	f7fe f9ca 	bl	800b142 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cdae:	697b      	ldr	r3, [r7, #20]
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3718      	adds	r7, #24
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	2400590c 	.word	0x2400590c
 800cdbc:	24005908 	.word	0x24005908

0800cdc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b08e      	sub	sp, #56	; 0x38
 800cdc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cdc6:	e0ca      	b.n	800cf5e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	da18      	bge.n	800ce00 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cdce:	1d3b      	adds	r3, r7, #4
 800cdd0:	3304      	adds	r3, #4
 800cdd2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cdd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d10a      	bne.n	800cdf0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdde:	f383 8811 	msr	BASEPRI, r3
 800cde2:	f3bf 8f6f 	isb	sy
 800cde6:	f3bf 8f4f 	dsb	sy
 800cdea:	61fb      	str	r3, [r7, #28]
}
 800cdec:	bf00      	nop
 800cdee:	e7fe      	b.n	800cdee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cdf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdf6:	6850      	ldr	r0, [r2, #4]
 800cdf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdfa:	6892      	ldr	r2, [r2, #8]
 800cdfc:	4611      	mov	r1, r2
 800cdfe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	f2c0 80aa 	blt.w	800cf5c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ce0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0e:	695b      	ldr	r3, [r3, #20]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d004      	beq.n	800ce1e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce16:	3304      	adds	r3, #4
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fe f9cb 	bl	800b1b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ce1e:	463b      	mov	r3, r7
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7ff ff6b 	bl	800ccfc <prvSampleTimeNow>
 800ce26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2b09      	cmp	r3, #9
 800ce2c:	f200 8097 	bhi.w	800cf5e <prvProcessReceivedCommands+0x19e>
 800ce30:	a201      	add	r2, pc, #4	; (adr r2, 800ce38 <prvProcessReceivedCommands+0x78>)
 800ce32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce36:	bf00      	nop
 800ce38:	0800ce61 	.word	0x0800ce61
 800ce3c:	0800ce61 	.word	0x0800ce61
 800ce40:	0800ce61 	.word	0x0800ce61
 800ce44:	0800ced5 	.word	0x0800ced5
 800ce48:	0800cee9 	.word	0x0800cee9
 800ce4c:	0800cf33 	.word	0x0800cf33
 800ce50:	0800ce61 	.word	0x0800ce61
 800ce54:	0800ce61 	.word	0x0800ce61
 800ce58:	0800ced5 	.word	0x0800ced5
 800ce5c:	0800cee9 	.word	0x0800cee9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce66:	f043 0301 	orr.w	r3, r3, #1
 800ce6a:	b2da      	uxtb	r2, r3
 800ce6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ce72:	68ba      	ldr	r2, [r7, #8]
 800ce74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce76:	699b      	ldr	r3, [r3, #24]
 800ce78:	18d1      	adds	r1, r2, r3
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce80:	f7ff ff5c 	bl	800cd3c <prvInsertTimerInActiveList>
 800ce84:	4603      	mov	r3, r0
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d069      	beq.n	800cf5e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8c:	6a1b      	ldr	r3, [r3, #32]
 800ce8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce98:	f003 0304 	and.w	r3, r3, #4
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d05e      	beq.n	800cf5e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cea0:	68ba      	ldr	r2, [r7, #8]
 800cea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea4:	699b      	ldr	r3, [r3, #24]
 800cea6:	441a      	add	r2, r3
 800cea8:	2300      	movs	r3, #0
 800ceaa:	9300      	str	r3, [sp, #0]
 800ceac:	2300      	movs	r3, #0
 800ceae:	2100      	movs	r1, #0
 800ceb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ceb2:	f7ff fe05 	bl	800cac0 <xTimerGenericCommand>
 800ceb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ceb8:	6a3b      	ldr	r3, [r7, #32]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d14f      	bne.n	800cf5e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec2:	f383 8811 	msr	BASEPRI, r3
 800cec6:	f3bf 8f6f 	isb	sy
 800ceca:	f3bf 8f4f 	dsb	sy
 800cece:	61bb      	str	r3, [r7, #24]
}
 800ced0:	bf00      	nop
 800ced2:	e7fe      	b.n	800ced2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ced4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ceda:	f023 0301 	bic.w	r3, r3, #1
 800cede:	b2da      	uxtb	r2, r3
 800cee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cee6:	e03a      	b.n	800cf5e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ceee:	f043 0301 	orr.w	r3, r3, #1
 800cef2:	b2da      	uxtb	r2, r3
 800cef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cefa:	68ba      	ldr	r2, [r7, #8]
 800cefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cefe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cf00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf02:	699b      	ldr	r3, [r3, #24]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d10a      	bne.n	800cf1e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cf08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0c:	f383 8811 	msr	BASEPRI, r3
 800cf10:	f3bf 8f6f 	isb	sy
 800cf14:	f3bf 8f4f 	dsb	sy
 800cf18:	617b      	str	r3, [r7, #20]
}
 800cf1a:	bf00      	nop
 800cf1c:	e7fe      	b.n	800cf1c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cf1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf20:	699a      	ldr	r2, [r3, #24]
 800cf22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf24:	18d1      	adds	r1, r2, r3
 800cf26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf2c:	f7ff ff06 	bl	800cd3c <prvInsertTimerInActiveList>
					break;
 800cf30:	e015      	b.n	800cf5e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cf32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf38:	f003 0302 	and.w	r3, r3, #2
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d103      	bne.n	800cf48 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cf40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf42:	f000 fbdd 	bl	800d700 <vPortFree>
 800cf46:	e00a      	b.n	800cf5e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf4e:	f023 0301 	bic.w	r3, r3, #1
 800cf52:	b2da      	uxtb	r2, r3
 800cf54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cf5a:	e000      	b.n	800cf5e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cf5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf5e:	4b08      	ldr	r3, [pc, #32]	; (800cf80 <prvProcessReceivedCommands+0x1c0>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	1d39      	adds	r1, r7, #4
 800cf64:	2200      	movs	r2, #0
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7fe fbec 	bl	800b744 <xQueueReceive>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	f47f af2a 	bne.w	800cdc8 <prvProcessReceivedCommands+0x8>
	}
}
 800cf74:	bf00      	nop
 800cf76:	bf00      	nop
 800cf78:	3730      	adds	r7, #48	; 0x30
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	24005910 	.word	0x24005910

0800cf84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b088      	sub	sp, #32
 800cf88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf8a:	e048      	b.n	800d01e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf8c:	4b2d      	ldr	r3, [pc, #180]	; (800d044 <prvSwitchTimerLists+0xc0>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	68db      	ldr	r3, [r3, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf96:	4b2b      	ldr	r3, [pc, #172]	; (800d044 <prvSwitchTimerLists+0xc0>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	68db      	ldr	r3, [r3, #12]
 800cf9c:	68db      	ldr	r3, [r3, #12]
 800cf9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	3304      	adds	r3, #4
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7fe f905 	bl	800b1b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	6a1b      	ldr	r3, [r3, #32]
 800cfae:	68f8      	ldr	r0, [r7, #12]
 800cfb0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfb8:	f003 0304 	and.w	r3, r3, #4
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d02e      	beq.n	800d01e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	699b      	ldr	r3, [r3, #24]
 800cfc4:	693a      	ldr	r2, [r7, #16]
 800cfc6:	4413      	add	r3, r2
 800cfc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cfca:	68ba      	ldr	r2, [r7, #8]
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d90e      	bls.n	800cff0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	68ba      	ldr	r2, [r7, #8]
 800cfd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	68fa      	ldr	r2, [r7, #12]
 800cfdc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cfde:	4b19      	ldr	r3, [pc, #100]	; (800d044 <prvSwitchTimerLists+0xc0>)
 800cfe0:	681a      	ldr	r2, [r3, #0]
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	3304      	adds	r3, #4
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	4610      	mov	r0, r2
 800cfea:	f7fe f8aa 	bl	800b142 <vListInsert>
 800cfee:	e016      	b.n	800d01e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cff0:	2300      	movs	r3, #0
 800cff2:	9300      	str	r3, [sp, #0]
 800cff4:	2300      	movs	r3, #0
 800cff6:	693a      	ldr	r2, [r7, #16]
 800cff8:	2100      	movs	r1, #0
 800cffa:	68f8      	ldr	r0, [r7, #12]
 800cffc:	f7ff fd60 	bl	800cac0 <xTimerGenericCommand>
 800d000:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d10a      	bne.n	800d01e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d00c:	f383 8811 	msr	BASEPRI, r3
 800d010:	f3bf 8f6f 	isb	sy
 800d014:	f3bf 8f4f 	dsb	sy
 800d018:	603b      	str	r3, [r7, #0]
}
 800d01a:	bf00      	nop
 800d01c:	e7fe      	b.n	800d01c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d01e:	4b09      	ldr	r3, [pc, #36]	; (800d044 <prvSwitchTimerLists+0xc0>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d1b1      	bne.n	800cf8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d028:	4b06      	ldr	r3, [pc, #24]	; (800d044 <prvSwitchTimerLists+0xc0>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d02e:	4b06      	ldr	r3, [pc, #24]	; (800d048 <prvSwitchTimerLists+0xc4>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4a04      	ldr	r2, [pc, #16]	; (800d044 <prvSwitchTimerLists+0xc0>)
 800d034:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d036:	4a04      	ldr	r2, [pc, #16]	; (800d048 <prvSwitchTimerLists+0xc4>)
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	6013      	str	r3, [r2, #0]
}
 800d03c:	bf00      	nop
 800d03e:	3718      	adds	r7, #24
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}
 800d044:	24005908 	.word	0x24005908
 800d048:	2400590c 	.word	0x2400590c

0800d04c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b082      	sub	sp, #8
 800d050:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d052:	f000 f967 	bl	800d324 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d056:	4b15      	ldr	r3, [pc, #84]	; (800d0ac <prvCheckForValidListAndQueue+0x60>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d120      	bne.n	800d0a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d05e:	4814      	ldr	r0, [pc, #80]	; (800d0b0 <prvCheckForValidListAndQueue+0x64>)
 800d060:	f7fe f81e 	bl	800b0a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d064:	4813      	ldr	r0, [pc, #76]	; (800d0b4 <prvCheckForValidListAndQueue+0x68>)
 800d066:	f7fe f81b 	bl	800b0a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d06a:	4b13      	ldr	r3, [pc, #76]	; (800d0b8 <prvCheckForValidListAndQueue+0x6c>)
 800d06c:	4a10      	ldr	r2, [pc, #64]	; (800d0b0 <prvCheckForValidListAndQueue+0x64>)
 800d06e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d070:	4b12      	ldr	r3, [pc, #72]	; (800d0bc <prvCheckForValidListAndQueue+0x70>)
 800d072:	4a10      	ldr	r2, [pc, #64]	; (800d0b4 <prvCheckForValidListAndQueue+0x68>)
 800d074:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d076:	2300      	movs	r3, #0
 800d078:	9300      	str	r3, [sp, #0]
 800d07a:	4b11      	ldr	r3, [pc, #68]	; (800d0c0 <prvCheckForValidListAndQueue+0x74>)
 800d07c:	4a11      	ldr	r2, [pc, #68]	; (800d0c4 <prvCheckForValidListAndQueue+0x78>)
 800d07e:	2110      	movs	r1, #16
 800d080:	200a      	movs	r0, #10
 800d082:	f7fe f929 	bl	800b2d8 <xQueueGenericCreateStatic>
 800d086:	4603      	mov	r3, r0
 800d088:	4a08      	ldr	r2, [pc, #32]	; (800d0ac <prvCheckForValidListAndQueue+0x60>)
 800d08a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d08c:	4b07      	ldr	r3, [pc, #28]	; (800d0ac <prvCheckForValidListAndQueue+0x60>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d005      	beq.n	800d0a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d094:	4b05      	ldr	r3, [pc, #20]	; (800d0ac <prvCheckForValidListAndQueue+0x60>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	490b      	ldr	r1, [pc, #44]	; (800d0c8 <prvCheckForValidListAndQueue+0x7c>)
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7fe fd42 	bl	800bb24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d0a0:	f000 f970 	bl	800d384 <vPortExitCritical>
}
 800d0a4:	bf00      	nop
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	bf00      	nop
 800d0ac:	24005910 	.word	0x24005910
 800d0b0:	240058e0 	.word	0x240058e0
 800d0b4:	240058f4 	.word	0x240058f4
 800d0b8:	24005908 	.word	0x24005908
 800d0bc:	2400590c 	.word	0x2400590c
 800d0c0:	240059bc 	.word	0x240059bc
 800d0c4:	2400591c 	.word	0x2400591c
 800d0c8:	080150e0 	.word	0x080150e0

0800d0cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b085      	sub	sp, #20
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	60f8      	str	r0, [r7, #12]
 800d0d4:	60b9      	str	r1, [r7, #8]
 800d0d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	3b04      	subs	r3, #4
 800d0dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d0e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	3b04      	subs	r3, #4
 800d0ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	f023 0201 	bic.w	r2, r3, #1
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	3b04      	subs	r3, #4
 800d0fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d0fc:	4a0c      	ldr	r2, [pc, #48]	; (800d130 <pxPortInitialiseStack+0x64>)
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	3b14      	subs	r3, #20
 800d106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d108:	687a      	ldr	r2, [r7, #4]
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	3b04      	subs	r3, #4
 800d112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f06f 0202 	mvn.w	r2, #2
 800d11a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	3b20      	subs	r3, #32
 800d120:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d122:	68fb      	ldr	r3, [r7, #12]
}
 800d124:	4618      	mov	r0, r3
 800d126:	3714      	adds	r7, #20
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr
 800d130:	0800d135 	.word	0x0800d135

0800d134 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d134:	b480      	push	{r7}
 800d136:	b085      	sub	sp, #20
 800d138:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d13a:	2300      	movs	r3, #0
 800d13c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d13e:	4b12      	ldr	r3, [pc, #72]	; (800d188 <prvTaskExitError+0x54>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d146:	d00a      	beq.n	800d15e <prvTaskExitError+0x2a>
	__asm volatile
 800d148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d14c:	f383 8811 	msr	BASEPRI, r3
 800d150:	f3bf 8f6f 	isb	sy
 800d154:	f3bf 8f4f 	dsb	sy
 800d158:	60fb      	str	r3, [r7, #12]
}
 800d15a:	bf00      	nop
 800d15c:	e7fe      	b.n	800d15c <prvTaskExitError+0x28>
	__asm volatile
 800d15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d162:	f383 8811 	msr	BASEPRI, r3
 800d166:	f3bf 8f6f 	isb	sy
 800d16a:	f3bf 8f4f 	dsb	sy
 800d16e:	60bb      	str	r3, [r7, #8]
}
 800d170:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d172:	bf00      	nop
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d0fc      	beq.n	800d174 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d17a:	bf00      	nop
 800d17c:	bf00      	nop
 800d17e:	3714      	adds	r7, #20
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr
 800d188:	24000078 	.word	0x24000078
 800d18c:	00000000 	.word	0x00000000

0800d190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d190:	4b07      	ldr	r3, [pc, #28]	; (800d1b0 <pxCurrentTCBConst2>)
 800d192:	6819      	ldr	r1, [r3, #0]
 800d194:	6808      	ldr	r0, [r1, #0]
 800d196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d19a:	f380 8809 	msr	PSP, r0
 800d19e:	f3bf 8f6f 	isb	sy
 800d1a2:	f04f 0000 	mov.w	r0, #0
 800d1a6:	f380 8811 	msr	BASEPRI, r0
 800d1aa:	4770      	bx	lr
 800d1ac:	f3af 8000 	nop.w

0800d1b0 <pxCurrentTCBConst2>:
 800d1b0:	240053e0 	.word	0x240053e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d1b4:	bf00      	nop
 800d1b6:	bf00      	nop

0800d1b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d1b8:	4808      	ldr	r0, [pc, #32]	; (800d1dc <prvPortStartFirstTask+0x24>)
 800d1ba:	6800      	ldr	r0, [r0, #0]
 800d1bc:	6800      	ldr	r0, [r0, #0]
 800d1be:	f380 8808 	msr	MSP, r0
 800d1c2:	f04f 0000 	mov.w	r0, #0
 800d1c6:	f380 8814 	msr	CONTROL, r0
 800d1ca:	b662      	cpsie	i
 800d1cc:	b661      	cpsie	f
 800d1ce:	f3bf 8f4f 	dsb	sy
 800d1d2:	f3bf 8f6f 	isb	sy
 800d1d6:	df00      	svc	0
 800d1d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d1da:	bf00      	nop
 800d1dc:	e000ed08 	.word	0xe000ed08

0800d1e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b086      	sub	sp, #24
 800d1e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d1e6:	4b46      	ldr	r3, [pc, #280]	; (800d300 <xPortStartScheduler+0x120>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	4a46      	ldr	r2, [pc, #280]	; (800d304 <xPortStartScheduler+0x124>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d10a      	bne.n	800d206 <xPortStartScheduler+0x26>
	__asm volatile
 800d1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f4:	f383 8811 	msr	BASEPRI, r3
 800d1f8:	f3bf 8f6f 	isb	sy
 800d1fc:	f3bf 8f4f 	dsb	sy
 800d200:	613b      	str	r3, [r7, #16]
}
 800d202:	bf00      	nop
 800d204:	e7fe      	b.n	800d204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d206:	4b3e      	ldr	r3, [pc, #248]	; (800d300 <xPortStartScheduler+0x120>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	4a3f      	ldr	r2, [pc, #252]	; (800d308 <xPortStartScheduler+0x128>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d10a      	bne.n	800d226 <xPortStartScheduler+0x46>
	__asm volatile
 800d210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d214:	f383 8811 	msr	BASEPRI, r3
 800d218:	f3bf 8f6f 	isb	sy
 800d21c:	f3bf 8f4f 	dsb	sy
 800d220:	60fb      	str	r3, [r7, #12]
}
 800d222:	bf00      	nop
 800d224:	e7fe      	b.n	800d224 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d226:	4b39      	ldr	r3, [pc, #228]	; (800d30c <xPortStartScheduler+0x12c>)
 800d228:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	b2db      	uxtb	r3, r3
 800d230:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	22ff      	movs	r2, #255	; 0xff
 800d236:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	b2db      	uxtb	r3, r3
 800d23e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d240:	78fb      	ldrb	r3, [r7, #3]
 800d242:	b2db      	uxtb	r3, r3
 800d244:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d248:	b2da      	uxtb	r2, r3
 800d24a:	4b31      	ldr	r3, [pc, #196]	; (800d310 <xPortStartScheduler+0x130>)
 800d24c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d24e:	4b31      	ldr	r3, [pc, #196]	; (800d314 <xPortStartScheduler+0x134>)
 800d250:	2207      	movs	r2, #7
 800d252:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d254:	e009      	b.n	800d26a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d256:	4b2f      	ldr	r3, [pc, #188]	; (800d314 <xPortStartScheduler+0x134>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	3b01      	subs	r3, #1
 800d25c:	4a2d      	ldr	r2, [pc, #180]	; (800d314 <xPortStartScheduler+0x134>)
 800d25e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d260:	78fb      	ldrb	r3, [r7, #3]
 800d262:	b2db      	uxtb	r3, r3
 800d264:	005b      	lsls	r3, r3, #1
 800d266:	b2db      	uxtb	r3, r3
 800d268:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d26a:	78fb      	ldrb	r3, [r7, #3]
 800d26c:	b2db      	uxtb	r3, r3
 800d26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d272:	2b80      	cmp	r3, #128	; 0x80
 800d274:	d0ef      	beq.n	800d256 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d276:	4b27      	ldr	r3, [pc, #156]	; (800d314 <xPortStartScheduler+0x134>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f1c3 0307 	rsb	r3, r3, #7
 800d27e:	2b04      	cmp	r3, #4
 800d280:	d00a      	beq.n	800d298 <xPortStartScheduler+0xb8>
	__asm volatile
 800d282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d286:	f383 8811 	msr	BASEPRI, r3
 800d28a:	f3bf 8f6f 	isb	sy
 800d28e:	f3bf 8f4f 	dsb	sy
 800d292:	60bb      	str	r3, [r7, #8]
}
 800d294:	bf00      	nop
 800d296:	e7fe      	b.n	800d296 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d298:	4b1e      	ldr	r3, [pc, #120]	; (800d314 <xPortStartScheduler+0x134>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	021b      	lsls	r3, r3, #8
 800d29e:	4a1d      	ldr	r2, [pc, #116]	; (800d314 <xPortStartScheduler+0x134>)
 800d2a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d2a2:	4b1c      	ldr	r3, [pc, #112]	; (800d314 <xPortStartScheduler+0x134>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d2aa:	4a1a      	ldr	r2, [pc, #104]	; (800d314 <xPortStartScheduler+0x134>)
 800d2ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	b2da      	uxtb	r2, r3
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d2b6:	4b18      	ldr	r3, [pc, #96]	; (800d318 <xPortStartScheduler+0x138>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4a17      	ldr	r2, [pc, #92]	; (800d318 <xPortStartScheduler+0x138>)
 800d2bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d2c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d2c2:	4b15      	ldr	r3, [pc, #84]	; (800d318 <xPortStartScheduler+0x138>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4a14      	ldr	r2, [pc, #80]	; (800d318 <xPortStartScheduler+0x138>)
 800d2c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d2cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d2ce:	f000 f8dd 	bl	800d48c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d2d2:	4b12      	ldr	r3, [pc, #72]	; (800d31c <xPortStartScheduler+0x13c>)
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d2d8:	f000 f8fc 	bl	800d4d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d2dc:	4b10      	ldr	r3, [pc, #64]	; (800d320 <xPortStartScheduler+0x140>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a0f      	ldr	r2, [pc, #60]	; (800d320 <xPortStartScheduler+0x140>)
 800d2e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d2e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d2e8:	f7ff ff66 	bl	800d1b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d2ec:	f7ff f84a 	bl	800c384 <vTaskSwitchContext>
	prvTaskExitError();
 800d2f0:	f7ff ff20 	bl	800d134 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d2f4:	2300      	movs	r3, #0
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3718      	adds	r7, #24
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	e000ed00 	.word	0xe000ed00
 800d304:	410fc271 	.word	0x410fc271
 800d308:	410fc270 	.word	0x410fc270
 800d30c:	e000e400 	.word	0xe000e400
 800d310:	24005a0c 	.word	0x24005a0c
 800d314:	24005a10 	.word	0x24005a10
 800d318:	e000ed20 	.word	0xe000ed20
 800d31c:	24000078 	.word	0x24000078
 800d320:	e000ef34 	.word	0xe000ef34

0800d324 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d324:	b480      	push	{r7}
 800d326:	b083      	sub	sp, #12
 800d328:	af00      	add	r7, sp, #0
	__asm volatile
 800d32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d32e:	f383 8811 	msr	BASEPRI, r3
 800d332:	f3bf 8f6f 	isb	sy
 800d336:	f3bf 8f4f 	dsb	sy
 800d33a:	607b      	str	r3, [r7, #4]
}
 800d33c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d33e:	4b0f      	ldr	r3, [pc, #60]	; (800d37c <vPortEnterCritical+0x58>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	3301      	adds	r3, #1
 800d344:	4a0d      	ldr	r2, [pc, #52]	; (800d37c <vPortEnterCritical+0x58>)
 800d346:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d348:	4b0c      	ldr	r3, [pc, #48]	; (800d37c <vPortEnterCritical+0x58>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	d10f      	bne.n	800d370 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d350:	4b0b      	ldr	r3, [pc, #44]	; (800d380 <vPortEnterCritical+0x5c>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	b2db      	uxtb	r3, r3
 800d356:	2b00      	cmp	r3, #0
 800d358:	d00a      	beq.n	800d370 <vPortEnterCritical+0x4c>
	__asm volatile
 800d35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35e:	f383 8811 	msr	BASEPRI, r3
 800d362:	f3bf 8f6f 	isb	sy
 800d366:	f3bf 8f4f 	dsb	sy
 800d36a:	603b      	str	r3, [r7, #0]
}
 800d36c:	bf00      	nop
 800d36e:	e7fe      	b.n	800d36e <vPortEnterCritical+0x4a>
	}
}
 800d370:	bf00      	nop
 800d372:	370c      	adds	r7, #12
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr
 800d37c:	24000078 	.word	0x24000078
 800d380:	e000ed04 	.word	0xe000ed04

0800d384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d384:	b480      	push	{r7}
 800d386:	b083      	sub	sp, #12
 800d388:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d38a:	4b12      	ldr	r3, [pc, #72]	; (800d3d4 <vPortExitCritical+0x50>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d10a      	bne.n	800d3a8 <vPortExitCritical+0x24>
	__asm volatile
 800d392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d396:	f383 8811 	msr	BASEPRI, r3
 800d39a:	f3bf 8f6f 	isb	sy
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	607b      	str	r3, [r7, #4]
}
 800d3a4:	bf00      	nop
 800d3a6:	e7fe      	b.n	800d3a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d3a8:	4b0a      	ldr	r3, [pc, #40]	; (800d3d4 <vPortExitCritical+0x50>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	3b01      	subs	r3, #1
 800d3ae:	4a09      	ldr	r2, [pc, #36]	; (800d3d4 <vPortExitCritical+0x50>)
 800d3b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d3b2:	4b08      	ldr	r3, [pc, #32]	; (800d3d4 <vPortExitCritical+0x50>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d105      	bne.n	800d3c6 <vPortExitCritical+0x42>
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	f383 8811 	msr	BASEPRI, r3
}
 800d3c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d3c6:	bf00      	nop
 800d3c8:	370c      	adds	r7, #12
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d0:	4770      	bx	lr
 800d3d2:	bf00      	nop
 800d3d4:	24000078 	.word	0x24000078
	...

0800d3e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d3e0:	f3ef 8009 	mrs	r0, PSP
 800d3e4:	f3bf 8f6f 	isb	sy
 800d3e8:	4b15      	ldr	r3, [pc, #84]	; (800d440 <pxCurrentTCBConst>)
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	f01e 0f10 	tst.w	lr, #16
 800d3f0:	bf08      	it	eq
 800d3f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d3f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3fa:	6010      	str	r0, [r2, #0]
 800d3fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d400:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d404:	f380 8811 	msr	BASEPRI, r0
 800d408:	f3bf 8f4f 	dsb	sy
 800d40c:	f3bf 8f6f 	isb	sy
 800d410:	f7fe ffb8 	bl	800c384 <vTaskSwitchContext>
 800d414:	f04f 0000 	mov.w	r0, #0
 800d418:	f380 8811 	msr	BASEPRI, r0
 800d41c:	bc09      	pop	{r0, r3}
 800d41e:	6819      	ldr	r1, [r3, #0]
 800d420:	6808      	ldr	r0, [r1, #0]
 800d422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d426:	f01e 0f10 	tst.w	lr, #16
 800d42a:	bf08      	it	eq
 800d42c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d430:	f380 8809 	msr	PSP, r0
 800d434:	f3bf 8f6f 	isb	sy
 800d438:	4770      	bx	lr
 800d43a:	bf00      	nop
 800d43c:	f3af 8000 	nop.w

0800d440 <pxCurrentTCBConst>:
 800d440:	240053e0 	.word	0x240053e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d444:	bf00      	nop
 800d446:	bf00      	nop

0800d448 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
	__asm volatile
 800d44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d452:	f383 8811 	msr	BASEPRI, r3
 800d456:	f3bf 8f6f 	isb	sy
 800d45a:	f3bf 8f4f 	dsb	sy
 800d45e:	607b      	str	r3, [r7, #4]
}
 800d460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d462:	f7fe fed5 	bl	800c210 <xTaskIncrementTick>
 800d466:	4603      	mov	r3, r0
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d003      	beq.n	800d474 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d46c:	4b06      	ldr	r3, [pc, #24]	; (800d488 <xPortSysTickHandler+0x40>)
 800d46e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d472:	601a      	str	r2, [r3, #0]
 800d474:	2300      	movs	r3, #0
 800d476:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	f383 8811 	msr	BASEPRI, r3
}
 800d47e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d480:	bf00      	nop
 800d482:	3708      	adds	r7, #8
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}
 800d488:	e000ed04 	.word	0xe000ed04

0800d48c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d48c:	b480      	push	{r7}
 800d48e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d490:	4b0b      	ldr	r3, [pc, #44]	; (800d4c0 <vPortSetupTimerInterrupt+0x34>)
 800d492:	2200      	movs	r2, #0
 800d494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d496:	4b0b      	ldr	r3, [pc, #44]	; (800d4c4 <vPortSetupTimerInterrupt+0x38>)
 800d498:	2200      	movs	r2, #0
 800d49a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d49c:	4b0a      	ldr	r3, [pc, #40]	; (800d4c8 <vPortSetupTimerInterrupt+0x3c>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4a0a      	ldr	r2, [pc, #40]	; (800d4cc <vPortSetupTimerInterrupt+0x40>)
 800d4a2:	fba2 2303 	umull	r2, r3, r2, r3
 800d4a6:	099b      	lsrs	r3, r3, #6
 800d4a8:	4a09      	ldr	r2, [pc, #36]	; (800d4d0 <vPortSetupTimerInterrupt+0x44>)
 800d4aa:	3b01      	subs	r3, #1
 800d4ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d4ae:	4b04      	ldr	r3, [pc, #16]	; (800d4c0 <vPortSetupTimerInterrupt+0x34>)
 800d4b0:	2207      	movs	r2, #7
 800d4b2:	601a      	str	r2, [r3, #0]
}
 800d4b4:	bf00      	nop
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4bc:	4770      	bx	lr
 800d4be:	bf00      	nop
 800d4c0:	e000e010 	.word	0xe000e010
 800d4c4:	e000e018 	.word	0xe000e018
 800d4c8:	24000068 	.word	0x24000068
 800d4cc:	10624dd3 	.word	0x10624dd3
 800d4d0:	e000e014 	.word	0xe000e014

0800d4d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d4d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d4e4 <vPortEnableVFP+0x10>
 800d4d8:	6801      	ldr	r1, [r0, #0]
 800d4da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d4de:	6001      	str	r1, [r0, #0]
 800d4e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d4e2:	bf00      	nop
 800d4e4:	e000ed88 	.word	0xe000ed88

0800d4e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b085      	sub	sp, #20
 800d4ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d4ee:	f3ef 8305 	mrs	r3, IPSR
 800d4f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2b0f      	cmp	r3, #15
 800d4f8:	d914      	bls.n	800d524 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d4fa:	4a17      	ldr	r2, [pc, #92]	; (800d558 <vPortValidateInterruptPriority+0x70>)
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	4413      	add	r3, r2
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d504:	4b15      	ldr	r3, [pc, #84]	; (800d55c <vPortValidateInterruptPriority+0x74>)
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	7afa      	ldrb	r2, [r7, #11]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d20a      	bcs.n	800d524 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d512:	f383 8811 	msr	BASEPRI, r3
 800d516:	f3bf 8f6f 	isb	sy
 800d51a:	f3bf 8f4f 	dsb	sy
 800d51e:	607b      	str	r3, [r7, #4]
}
 800d520:	bf00      	nop
 800d522:	e7fe      	b.n	800d522 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d524:	4b0e      	ldr	r3, [pc, #56]	; (800d560 <vPortValidateInterruptPriority+0x78>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d52c:	4b0d      	ldr	r3, [pc, #52]	; (800d564 <vPortValidateInterruptPriority+0x7c>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	429a      	cmp	r2, r3
 800d532:	d90a      	bls.n	800d54a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d538:	f383 8811 	msr	BASEPRI, r3
 800d53c:	f3bf 8f6f 	isb	sy
 800d540:	f3bf 8f4f 	dsb	sy
 800d544:	603b      	str	r3, [r7, #0]
}
 800d546:	bf00      	nop
 800d548:	e7fe      	b.n	800d548 <vPortValidateInterruptPriority+0x60>
	}
 800d54a:	bf00      	nop
 800d54c:	3714      	adds	r7, #20
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr
 800d556:	bf00      	nop
 800d558:	e000e3f0 	.word	0xe000e3f0
 800d55c:	24005a0c 	.word	0x24005a0c
 800d560:	e000ed0c 	.word	0xe000ed0c
 800d564:	24005a10 	.word	0x24005a10

0800d568 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b08a      	sub	sp, #40	; 0x28
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d570:	2300      	movs	r3, #0
 800d572:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d574:	f7fe fd90 	bl	800c098 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d578:	4b5b      	ldr	r3, [pc, #364]	; (800d6e8 <pvPortMalloc+0x180>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d101      	bne.n	800d584 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d580:	f000 f920 	bl	800d7c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d584:	4b59      	ldr	r3, [pc, #356]	; (800d6ec <pvPortMalloc+0x184>)
 800d586:	681a      	ldr	r2, [r3, #0]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	4013      	ands	r3, r2
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	f040 8093 	bne.w	800d6b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d01d      	beq.n	800d5d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d598:	2208      	movs	r2, #8
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	4413      	add	r3, r2
 800d59e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f003 0307 	and.w	r3, r3, #7
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d014      	beq.n	800d5d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f023 0307 	bic.w	r3, r3, #7
 800d5b0:	3308      	adds	r3, #8
 800d5b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f003 0307 	and.w	r3, r3, #7
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d00a      	beq.n	800d5d4 <pvPortMalloc+0x6c>
	__asm volatile
 800d5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c2:	f383 8811 	msr	BASEPRI, r3
 800d5c6:	f3bf 8f6f 	isb	sy
 800d5ca:	f3bf 8f4f 	dsb	sy
 800d5ce:	617b      	str	r3, [r7, #20]
}
 800d5d0:	bf00      	nop
 800d5d2:	e7fe      	b.n	800d5d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d06e      	beq.n	800d6b8 <pvPortMalloc+0x150>
 800d5da:	4b45      	ldr	r3, [pc, #276]	; (800d6f0 <pvPortMalloc+0x188>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d869      	bhi.n	800d6b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d5e4:	4b43      	ldr	r3, [pc, #268]	; (800d6f4 <pvPortMalloc+0x18c>)
 800d5e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d5e8:	4b42      	ldr	r3, [pc, #264]	; (800d6f4 <pvPortMalloc+0x18c>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d5ee:	e004      	b.n	800d5fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fc:	685b      	ldr	r3, [r3, #4]
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	429a      	cmp	r2, r3
 800d602:	d903      	bls.n	800d60c <pvPortMalloc+0xa4>
 800d604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d1f1      	bne.n	800d5f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d60c:	4b36      	ldr	r3, [pc, #216]	; (800d6e8 <pvPortMalloc+0x180>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d612:	429a      	cmp	r2, r3
 800d614:	d050      	beq.n	800d6b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d616:	6a3b      	ldr	r3, [r7, #32]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	2208      	movs	r2, #8
 800d61c:	4413      	add	r3, r2
 800d61e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d622:	681a      	ldr	r2, [r3, #0]
 800d624:	6a3b      	ldr	r3, [r7, #32]
 800d626:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62a:	685a      	ldr	r2, [r3, #4]
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	1ad2      	subs	r2, r2, r3
 800d630:	2308      	movs	r3, #8
 800d632:	005b      	lsls	r3, r3, #1
 800d634:	429a      	cmp	r2, r3
 800d636:	d91f      	bls.n	800d678 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	4413      	add	r3, r2
 800d63e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d640:	69bb      	ldr	r3, [r7, #24]
 800d642:	f003 0307 	and.w	r3, r3, #7
 800d646:	2b00      	cmp	r3, #0
 800d648:	d00a      	beq.n	800d660 <pvPortMalloc+0xf8>
	__asm volatile
 800d64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64e:	f383 8811 	msr	BASEPRI, r3
 800d652:	f3bf 8f6f 	isb	sy
 800d656:	f3bf 8f4f 	dsb	sy
 800d65a:	613b      	str	r3, [r7, #16]
}
 800d65c:	bf00      	nop
 800d65e:	e7fe      	b.n	800d65e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d662:	685a      	ldr	r2, [r3, #4]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	1ad2      	subs	r2, r2, r3
 800d668:	69bb      	ldr	r3, [r7, #24]
 800d66a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66e:	687a      	ldr	r2, [r7, #4]
 800d670:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d672:	69b8      	ldr	r0, [r7, #24]
 800d674:	f000 f908 	bl	800d888 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d678:	4b1d      	ldr	r3, [pc, #116]	; (800d6f0 <pvPortMalloc+0x188>)
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67e:	685b      	ldr	r3, [r3, #4]
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	4a1b      	ldr	r2, [pc, #108]	; (800d6f0 <pvPortMalloc+0x188>)
 800d684:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d686:	4b1a      	ldr	r3, [pc, #104]	; (800d6f0 <pvPortMalloc+0x188>)
 800d688:	681a      	ldr	r2, [r3, #0]
 800d68a:	4b1b      	ldr	r3, [pc, #108]	; (800d6f8 <pvPortMalloc+0x190>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d203      	bcs.n	800d69a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d692:	4b17      	ldr	r3, [pc, #92]	; (800d6f0 <pvPortMalloc+0x188>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	4a18      	ldr	r2, [pc, #96]	; (800d6f8 <pvPortMalloc+0x190>)
 800d698:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69c:	685a      	ldr	r2, [r3, #4]
 800d69e:	4b13      	ldr	r3, [pc, #76]	; (800d6ec <pvPortMalloc+0x184>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	431a      	orrs	r2, r3
 800d6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d6ae:	4b13      	ldr	r3, [pc, #76]	; (800d6fc <pvPortMalloc+0x194>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	4a11      	ldr	r2, [pc, #68]	; (800d6fc <pvPortMalloc+0x194>)
 800d6b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d6b8:	f7fe fcfc 	bl	800c0b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6bc:	69fb      	ldr	r3, [r7, #28]
 800d6be:	f003 0307 	and.w	r3, r3, #7
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d00a      	beq.n	800d6dc <pvPortMalloc+0x174>
	__asm volatile
 800d6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ca:	f383 8811 	msr	BASEPRI, r3
 800d6ce:	f3bf 8f6f 	isb	sy
 800d6d2:	f3bf 8f4f 	dsb	sy
 800d6d6:	60fb      	str	r3, [r7, #12]
}
 800d6d8:	bf00      	nop
 800d6da:	e7fe      	b.n	800d6da <pvPortMalloc+0x172>
	return pvReturn;
 800d6dc:	69fb      	ldr	r3, [r7, #28]
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3728      	adds	r7, #40	; 0x28
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
 800d6e6:	bf00      	nop
 800d6e8:	2400d21c 	.word	0x2400d21c
 800d6ec:	2400d230 	.word	0x2400d230
 800d6f0:	2400d220 	.word	0x2400d220
 800d6f4:	2400d214 	.word	0x2400d214
 800d6f8:	2400d224 	.word	0x2400d224
 800d6fc:	2400d228 	.word	0x2400d228

0800d700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b086      	sub	sp, #24
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d04d      	beq.n	800d7ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d712:	2308      	movs	r3, #8
 800d714:	425b      	negs	r3, r3
 800d716:	697a      	ldr	r2, [r7, #20]
 800d718:	4413      	add	r3, r2
 800d71a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	685a      	ldr	r2, [r3, #4]
 800d724:	4b24      	ldr	r3, [pc, #144]	; (800d7b8 <vPortFree+0xb8>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	4013      	ands	r3, r2
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d10a      	bne.n	800d744 <vPortFree+0x44>
	__asm volatile
 800d72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d732:	f383 8811 	msr	BASEPRI, r3
 800d736:	f3bf 8f6f 	isb	sy
 800d73a:	f3bf 8f4f 	dsb	sy
 800d73e:	60fb      	str	r3, [r7, #12]
}
 800d740:	bf00      	nop
 800d742:	e7fe      	b.n	800d742 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d00a      	beq.n	800d762 <vPortFree+0x62>
	__asm volatile
 800d74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d750:	f383 8811 	msr	BASEPRI, r3
 800d754:	f3bf 8f6f 	isb	sy
 800d758:	f3bf 8f4f 	dsb	sy
 800d75c:	60bb      	str	r3, [r7, #8]
}
 800d75e:	bf00      	nop
 800d760:	e7fe      	b.n	800d760 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	685a      	ldr	r2, [r3, #4]
 800d766:	4b14      	ldr	r3, [pc, #80]	; (800d7b8 <vPortFree+0xb8>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	4013      	ands	r3, r2
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d01e      	beq.n	800d7ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d11a      	bne.n	800d7ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	685a      	ldr	r2, [r3, #4]
 800d77c:	4b0e      	ldr	r3, [pc, #56]	; (800d7b8 <vPortFree+0xb8>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	43db      	mvns	r3, r3
 800d782:	401a      	ands	r2, r3
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d788:	f7fe fc86 	bl	800c098 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	685a      	ldr	r2, [r3, #4]
 800d790:	4b0a      	ldr	r3, [pc, #40]	; (800d7bc <vPortFree+0xbc>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4413      	add	r3, r2
 800d796:	4a09      	ldr	r2, [pc, #36]	; (800d7bc <vPortFree+0xbc>)
 800d798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d79a:	6938      	ldr	r0, [r7, #16]
 800d79c:	f000 f874 	bl	800d888 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d7a0:	4b07      	ldr	r3, [pc, #28]	; (800d7c0 <vPortFree+0xc0>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	3301      	adds	r3, #1
 800d7a6:	4a06      	ldr	r2, [pc, #24]	; (800d7c0 <vPortFree+0xc0>)
 800d7a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d7aa:	f7fe fc83 	bl	800c0b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d7ae:	bf00      	nop
 800d7b0:	3718      	adds	r7, #24
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	2400d230 	.word	0x2400d230
 800d7bc:	2400d220 	.word	0x2400d220
 800d7c0:	2400d22c 	.word	0x2400d22c

0800d7c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b085      	sub	sp, #20
 800d7c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d7ca:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800d7ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d7d0:	4b27      	ldr	r3, [pc, #156]	; (800d870 <prvHeapInit+0xac>)
 800d7d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f003 0307 	and.w	r3, r3, #7
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d00c      	beq.n	800d7f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	3307      	adds	r3, #7
 800d7e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f023 0307 	bic.w	r3, r3, #7
 800d7ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d7ec:	68ba      	ldr	r2, [r7, #8]
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	1ad3      	subs	r3, r2, r3
 800d7f2:	4a1f      	ldr	r2, [pc, #124]	; (800d870 <prvHeapInit+0xac>)
 800d7f4:	4413      	add	r3, r2
 800d7f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d7fc:	4a1d      	ldr	r2, [pc, #116]	; (800d874 <prvHeapInit+0xb0>)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d802:	4b1c      	ldr	r3, [pc, #112]	; (800d874 <prvHeapInit+0xb0>)
 800d804:	2200      	movs	r2, #0
 800d806:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	68ba      	ldr	r2, [r7, #8]
 800d80c:	4413      	add	r3, r2
 800d80e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d810:	2208      	movs	r2, #8
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	1a9b      	subs	r3, r3, r2
 800d816:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	f023 0307 	bic.w	r3, r3, #7
 800d81e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	4a15      	ldr	r2, [pc, #84]	; (800d878 <prvHeapInit+0xb4>)
 800d824:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d826:	4b14      	ldr	r3, [pc, #80]	; (800d878 <prvHeapInit+0xb4>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	2200      	movs	r2, #0
 800d82c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d82e:	4b12      	ldr	r3, [pc, #72]	; (800d878 <prvHeapInit+0xb4>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	2200      	movs	r2, #0
 800d834:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	68fa      	ldr	r2, [r7, #12]
 800d83e:	1ad2      	subs	r2, r2, r3
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d844:	4b0c      	ldr	r3, [pc, #48]	; (800d878 <prvHeapInit+0xb4>)
 800d846:	681a      	ldr	r2, [r3, #0]
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	4a0a      	ldr	r2, [pc, #40]	; (800d87c <prvHeapInit+0xb8>)
 800d852:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	685b      	ldr	r3, [r3, #4]
 800d858:	4a09      	ldr	r2, [pc, #36]	; (800d880 <prvHeapInit+0xbc>)
 800d85a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d85c:	4b09      	ldr	r3, [pc, #36]	; (800d884 <prvHeapInit+0xc0>)
 800d85e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d862:	601a      	str	r2, [r3, #0]
}
 800d864:	bf00      	nop
 800d866:	3714      	adds	r7, #20
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr
 800d870:	24005a14 	.word	0x24005a14
 800d874:	2400d214 	.word	0x2400d214
 800d878:	2400d21c 	.word	0x2400d21c
 800d87c:	2400d224 	.word	0x2400d224
 800d880:	2400d220 	.word	0x2400d220
 800d884:	2400d230 	.word	0x2400d230

0800d888 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d888:	b480      	push	{r7}
 800d88a:	b085      	sub	sp, #20
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d890:	4b28      	ldr	r3, [pc, #160]	; (800d934 <prvInsertBlockIntoFreeList+0xac>)
 800d892:	60fb      	str	r3, [r7, #12]
 800d894:	e002      	b.n	800d89c <prvInsertBlockIntoFreeList+0x14>
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	60fb      	str	r3, [r7, #12]
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	687a      	ldr	r2, [r7, #4]
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d8f7      	bhi.n	800d896 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	68ba      	ldr	r2, [r7, #8]
 800d8b0:	4413      	add	r3, r2
 800d8b2:	687a      	ldr	r2, [r7, #4]
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d108      	bne.n	800d8ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	685a      	ldr	r2, [r3, #4]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	441a      	add	r2, r3
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	685b      	ldr	r3, [r3, #4]
 800d8d2:	68ba      	ldr	r2, [r7, #8]
 800d8d4:	441a      	add	r2, r3
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	429a      	cmp	r2, r3
 800d8dc:	d118      	bne.n	800d910 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	681a      	ldr	r2, [r3, #0]
 800d8e2:	4b15      	ldr	r3, [pc, #84]	; (800d938 <prvInsertBlockIntoFreeList+0xb0>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d00d      	beq.n	800d906 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	685a      	ldr	r2, [r3, #4]
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	685b      	ldr	r3, [r3, #4]
 800d8f4:	441a      	add	r2, r3
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	681a      	ldr	r2, [r3, #0]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	601a      	str	r2, [r3, #0]
 800d904:	e008      	b.n	800d918 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d906:	4b0c      	ldr	r3, [pc, #48]	; (800d938 <prvInsertBlockIntoFreeList+0xb0>)
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	601a      	str	r2, [r3, #0]
 800d90e:	e003      	b.n	800d918 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d918:	68fa      	ldr	r2, [r7, #12]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d002      	beq.n	800d926 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	687a      	ldr	r2, [r7, #4]
 800d924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d926:	bf00      	nop
 800d928:	3714      	adds	r7, #20
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr
 800d932:	bf00      	nop
 800d934:	2400d214 	.word	0x2400d214
 800d938:	2400d21c 	.word	0x2400d21c

0800d93c <calc_func>:
	, list_data *info, list_head **memblock, list_data **datablock
	, list_head *memblock_end, list_data *datablock_end);
typedef ee_s32(*list_cmp)(list_data *a, list_data *b, core_results *res);
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res);

ee_s16 calc_func(ee_s16 *pdata, core_results *res) {
 800d93c:	b590      	push	{r4, r7, lr}
 800d93e:	b089      	sub	sp, #36	; 0x24
 800d940:	af02      	add	r7, sp, #8
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	6039      	str	r1, [r7, #0]
	ee_s16 data=*pdata;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	881b      	ldrh	r3, [r3, #0]
 800d94a:	827b      	strh	r3, [r7, #18]
	ee_s16 retval;
	ee_u8 optype=(data>>7) & 1; /* bit 7 indicates if the function result has been cached */
 800d94c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d950:	11db      	asrs	r3, r3, #7
 800d952:	b21b      	sxth	r3, r3
 800d954:	b2db      	uxtb	r3, r3
 800d956:	f003 0301 	and.w	r3, r3, #1
 800d95a:	747b      	strb	r3, [r7, #17]
	if (optype) /* if cached, use cache */
 800d95c:	7c7b      	ldrb	r3, [r7, #17]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d004      	beq.n	800d96c <calc_func+0x30>
		return (data & 0x007f);
 800d962:	8a7b      	ldrh	r3, [r7, #18]
 800d964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d968:	b21b      	sxth	r3, r3
 800d96a:	e072      	b.n	800da52 <calc_func+0x116>
	else { /* otherwise calculate and cache the result */
		ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
 800d96c:	8a7b      	ldrh	r3, [r7, #18]
 800d96e:	f003 0307 	and.w	r3, r3, #7
 800d972:	81fb      	strh	r3, [r7, #14]
		ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
 800d974:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d978:	10db      	asrs	r3, r3, #3
 800d97a:	b21b      	sxth	r3, r3
 800d97c:	f003 030f 	and.w	r3, r3, #15
 800d980:	82bb      	strh	r3, [r7, #20]
		dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
 800d982:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800d986:	011b      	lsls	r3, r3, #4
 800d988:	b21a      	sxth	r2, r3
 800d98a:	8abb      	ldrh	r3, [r7, #20]
 800d98c:	4313      	orrs	r3, r2
 800d98e:	82bb      	strh	r3, [r7, #20]
		switch (flag) {
 800d990:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d002      	beq.n	800d99e <calc_func+0x62>
 800d998:	2b01      	cmp	r3, #1
 800d99a:	d023      	beq.n	800d9e4 <calc_func+0xa8>
 800d99c:	e036      	b.n	800da0c <calc_func+0xd0>
			case 0:
				if (dtype<0x22) /* set min period for bit corruption */
 800d99e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800d9a2:	2b21      	cmp	r3, #33	; 0x21
 800d9a4:	dc01      	bgt.n	800d9aa <calc_func+0x6e>
					dtype=0x22;
 800d9a6:	2322      	movs	r3, #34	; 0x22
 800d9a8:	82bb      	strh	r3, [r7, #20]
				retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	6998      	ldr	r0, [r3, #24]
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	6959      	ldr	r1, [r3, #20]
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800d9c2:	9301      	str	r3, [sp, #4]
 800d9c4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800d9c8:	9300      	str	r3, [sp, #0]
 800d9ca:	4623      	mov	r3, r4
 800d9cc:	f001 fd54 	bl	800f478 <core_bench_state>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	82fb      	strh	r3, [r7, #22]
				if (res->crcstate==0)
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d11a      	bne.n	800da12 <calc_func+0xd6>
					res->crcstate=retval;
 800d9dc:	8afa      	ldrh	r2, [r7, #22]
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	87da      	strh	r2, [r3, #62]	; 0x3e
				break;
 800d9e2:	e016      	b.n	800da12 <calc_func+0xd6>
			case 1:
				retval=core_bench_matrix(&(res->mat),dtype,res->crc);
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800d9ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	f001 f9a6 	bl	800ed44 <core_bench_matrix>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	82fb      	strh	r3, [r7, #22]
				if (res->crcmatrix==0)
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800da00:	2b00      	cmp	r3, #0
 800da02:	d108      	bne.n	800da16 <calc_func+0xda>
					res->crcmatrix=retval;
 800da04:	8afa      	ldrh	r2, [r7, #22]
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	879a      	strh	r2, [r3, #60]	; 0x3c
				break;
 800da0a:	e004      	b.n	800da16 <calc_func+0xda>
			default:
				retval=data;
 800da0c:	8a7b      	ldrh	r3, [r7, #18]
 800da0e:	82fb      	strh	r3, [r7, #22]
				break;
 800da10:	e002      	b.n	800da18 <calc_func+0xdc>
				break;
 800da12:	bf00      	nop
 800da14:	e000      	b.n	800da18 <calc_func+0xdc>
				break;
 800da16:	bf00      	nop
		}
		res->crc=crcu16(retval,res->crc);
 800da18:	8afa      	ldrh	r2, [r7, #22]
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800da1e:	4619      	mov	r1, r3
 800da20:	4610      	mov	r0, r2
 800da22:	f002 f849 	bl	800fab8 <crcu16>
 800da26:	4603      	mov	r3, r0
 800da28:	461a      	mov	r2, r3
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	871a      	strh	r2, [r3, #56]	; 0x38
		retval &= 0x007f; 
 800da2e:	8afb      	ldrh	r3, [r7, #22]
 800da30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da34:	82fb      	strh	r3, [r7, #22]
		*pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
 800da36:	8a7b      	ldrh	r3, [r7, #18]
 800da38:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800da3c:	b21b      	sxth	r3, r3
 800da3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da42:	b21a      	sxth	r2, r3
 800da44:	8afb      	ldrh	r3, [r7, #22]
 800da46:	4313      	orrs	r3, r2
 800da48:	b21a      	sxth	r2, r3
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	801a      	strh	r2, [r3, #0]
		return retval;
 800da4e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
	}
}
 800da52:	4618      	mov	r0, r3
 800da54:	371c      	adds	r7, #28
 800da56:	46bd      	mov	sp, r7
 800da58:	bd90      	pop	{r4, r7, pc}

0800da5a <cmp_complex>:
/* Function: cmp_complex
	Compare the data item in a list cell.

	Can be used by mergesort.
*/
ee_s32 cmp_complex(list_data *a, list_data *b, core_results *res) {
 800da5a:	b580      	push	{r7, lr}
 800da5c:	b086      	sub	sp, #24
 800da5e:	af00      	add	r7, sp, #0
 800da60:	60f8      	str	r0, [r7, #12]
 800da62:	60b9      	str	r1, [r7, #8]
 800da64:	607a      	str	r2, [r7, #4]
	ee_s16 val1=calc_func(&(a->data16),res);
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	6879      	ldr	r1, [r7, #4]
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7ff ff66 	bl	800d93c <calc_func>
 800da70:	4603      	mov	r3, r0
 800da72:	82fb      	strh	r3, [r7, #22]
	ee_s16 val2=calc_func(&(b->data16),res);
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	6879      	ldr	r1, [r7, #4]
 800da78:	4618      	mov	r0, r3
 800da7a:	f7ff ff5f 	bl	800d93c <calc_func>
 800da7e:	4603      	mov	r3, r0
 800da80:	82bb      	strh	r3, [r7, #20]
	return val1 - val2;
 800da82:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800da86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800da8a:	1ad3      	subs	r3, r2, r3
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3718      	adds	r7, #24
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}

0800da94 <cmp_idx>:
/* Function: cmp_idx
	Compare the idx item in a list cell, and regen the data.

	Can be used by mergesort.
*/
ee_s32 cmp_idx(list_data *a, list_data *b, core_results *res) {
 800da94:	b480      	push	{r7}
 800da96:	b085      	sub	sp, #20
 800da98:	af00      	add	r7, sp, #0
 800da9a:	60f8      	str	r0, [r7, #12]
 800da9c:	60b9      	str	r1, [r7, #8]
 800da9e:	607a      	str	r2, [r7, #4]
	if (res==NULL) {
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d121      	bne.n	800daea <cmp_idx+0x56>
		a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800daac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dab0:	b21a      	sxth	r2, r3
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dab8:	b29b      	uxth	r3, r3
 800daba:	0a1b      	lsrs	r3, r3, #8
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	b21b      	sxth	r3, r3
 800dac0:	4313      	orrs	r3, r2
 800dac2:	b21a      	sxth	r2, r3
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	801a      	strh	r2, [r3, #0]
		b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dace:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dad2:	b21a      	sxth	r2, r3
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dada:	b29b      	uxth	r3, r3
 800dadc:	0a1b      	lsrs	r3, r3, #8
 800dade:	b29b      	uxth	r3, r3
 800dae0:	b21b      	sxth	r3, r3
 800dae2:	4313      	orrs	r3, r2
 800dae4:	b21a      	sxth	r2, r3
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	801a      	strh	r2, [r3, #0]
	}
	return a->idx - b->idx;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800daf0:	461a      	mov	r2, r3
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800daf8:	1ad3      	subs	r3, r2, r3
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3714      	adds	r7, #20
 800dafe:	46bd      	mov	sp, r7
 800db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db04:	4770      	bx	lr

0800db06 <copy_info>:

void copy_info(list_data *to,list_data *from) {
 800db06:	b480      	push	{r7}
 800db08:	b083      	sub	sp, #12
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]
 800db0e:	6039      	str	r1, [r7, #0]
	to->data16=from->data16;
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	f9b3 2000 	ldrsh.w	r2, [r3]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	801a      	strh	r2, [r3, #0]
	to->idx=from->idx;
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	805a      	strh	r2, [r3, #2]
}
 800db24:	bf00      	nop
 800db26:	370c      	adds	r7, #12
 800db28:	46bd      	mov	sp, r7
 800db2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2e:	4770      	bx	lr

0800db30 <core_bench_list>:
	- List sort
	- Operate on data from list (crc)
	- Single remove/reinsert
	* At the end of this function, the list is back to original state
*/
ee_u16 core_bench_list(core_results *res, ee_s16 finder_idx) {
 800db30:	b580      	push	{r7, lr}
 800db32:	b08a      	sub	sp, #40	; 0x28
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	460b      	mov	r3, r1
 800db3a:	807b      	strh	r3, [r7, #2]
	ee_u16 retval=0;
 800db3c:	2300      	movs	r3, #0
 800db3e:	84fb      	strh	r3, [r7, #38]	; 0x26
	ee_u16 found=0,missed=0;
 800db40:	2300      	movs	r3, #0
 800db42:	84bb      	strh	r3, [r7, #36]	; 0x24
 800db44:	2300      	movs	r3, #0
 800db46:	847b      	strh	r3, [r7, #34]	; 0x22
	list_head *list=res->list;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db4c:	61fb      	str	r3, [r7, #28]
	ee_s16 find_num=res->seed3;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	889b      	ldrh	r3, [r3, #4]
 800db52:	82bb      	strh	r3, [r7, #20]
	list_head *this_find;
	list_head *finder, *remover;
	list_data info;
	ee_s16 i;

	info.idx=finder_idx;
 800db54:	887b      	ldrh	r3, [r7, #2]
 800db56:	817b      	strh	r3, [r7, #10]
	/* find <find_num> values in the list, and change the list each time (reverse and cache if value found) */
	for (i=0; i<find_num; i++) {
 800db58:	2300      	movs	r3, #0
 800db5a:	82fb      	strh	r3, [r7, #22]
 800db5c:	e05f      	b.n	800dc1e <core_bench_list+0xee>
		info.data16= (i & 0xff) ;
 800db5e:	8afb      	ldrh	r3, [r7, #22]
 800db60:	b2db      	uxtb	r3, r3
 800db62:	b21b      	sxth	r3, r3
 800db64:	813b      	strh	r3, [r7, #8]
		this_find=core_list_find(list,&info);
 800db66:	f107 0308 	add.w	r3, r7, #8
 800db6a:	4619      	mov	r1, r3
 800db6c:	69f8      	ldr	r0, [r7, #28]
 800db6e:	f000 f9f3 	bl	800df58 <core_list_find>
 800db72:	60f8      	str	r0, [r7, #12]
		list=core_list_reverse(list);
 800db74:	69f8      	ldr	r0, [r7, #28]
 800db76:	f000 fa23 	bl	800dfc0 <core_list_reverse>
 800db7a:	61f8      	str	r0, [r7, #28]
		if (this_find==NULL) {
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d111      	bne.n	800dba6 <core_bench_list+0x76>
			missed++;
 800db82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db84:	3301      	adds	r3, #1
 800db86:	847b      	strh	r3, [r7, #34]	; 0x22
			retval+=(list->next->info->data16 >> 8) & 1;
 800db88:	69fb      	ldr	r3, [r7, #28]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	685b      	ldr	r3, [r3, #4]
 800db8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db92:	121b      	asrs	r3, r3, #8
 800db94:	b21b      	sxth	r3, r3
 800db96:	b29b      	uxth	r3, r3
 800db98:	f003 0301 	and.w	r3, r3, #1
 800db9c:	b29a      	uxth	r2, r3
 800db9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dba0:	4413      	add	r3, r2
 800dba2:	84fb      	strh	r3, [r7, #38]	; 0x26
 800dba4:	e02a      	b.n	800dbfc <core_bench_list+0xcc>
		}
		else {
			found++;
 800dba6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dba8:	3301      	adds	r3, #1
 800dbaa:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (this_find->info->data16 & 0x1) /* use found value */
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbb4:	b29b      	uxth	r3, r3
 800dbb6:	f003 0301 	and.w	r3, r3, #1
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d00c      	beq.n	800dbd8 <core_bench_list+0xa8>
				retval+=(this_find->info->data16 >> 9) & 1;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	685b      	ldr	r3, [r3, #4]
 800dbc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbc6:	125b      	asrs	r3, r3, #9
 800dbc8:	b21b      	sxth	r3, r3
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	f003 0301 	and.w	r3, r3, #1
 800dbd0:	b29a      	uxth	r2, r3
 800dbd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dbd4:	4413      	add	r3, r2
 800dbd6:	84fb      	strh	r3, [r7, #38]	; 0x26
			/* and cache next item at the head of the list (if any) */
			if (this_find->next != NULL) {
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d00d      	beq.n	800dbfc <core_bench_list+0xcc>
				finder = this_find->next;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	61bb      	str	r3, [r7, #24]
				this_find->next = finder->next;
 800dbe6:	69bb      	ldr	r3, [r7, #24]
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	601a      	str	r2, [r3, #0]
				finder->next=list->next;
 800dbee:	69fb      	ldr	r3, [r7, #28]
 800dbf0:	681a      	ldr	r2, [r3, #0]
 800dbf2:	69bb      	ldr	r3, [r7, #24]
 800dbf4:	601a      	str	r2, [r3, #0]
				list->next=finder;
 800dbf6:	69fb      	ldr	r3, [r7, #28]
 800dbf8:	69ba      	ldr	r2, [r7, #24]
 800dbfa:	601a      	str	r2, [r3, #0]
			}
		}
		if (info.idx>=0)
 800dbfc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	db06      	blt.n	800dc12 <core_bench_list+0xe2>
			info.idx++;
 800dc04:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dc08:	b29b      	uxth	r3, r3
 800dc0a:	3301      	adds	r3, #1
 800dc0c:	b29b      	uxth	r3, r3
 800dc0e:	b21b      	sxth	r3, r3
 800dc10:	817b      	strh	r3, [r7, #10]
	for (i=0; i<find_num; i++) {
 800dc12:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	3301      	adds	r3, #1
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	82fb      	strh	r3, [r7, #22]
 800dc1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dc22:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	db99      	blt.n	800db5e <core_bench_list+0x2e>
#if CORE_DEBUG
	ee_printf("List find %d: [%d,%d,%d]\n",i,retval,missed,found);
#endif
	}
	retval+=found*4-missed;
 800dc2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc2c:	009b      	lsls	r3, r3, #2
 800dc2e:	b29a      	uxth	r2, r3
 800dc30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc32:	1ad3      	subs	r3, r2, r3
 800dc34:	b29a      	uxth	r2, r3
 800dc36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dc38:	4413      	add	r3, r2
 800dc3a:	84fb      	strh	r3, [r7, #38]	; 0x26
	/* sort the list by data content and remove one item*/
	if (finder_idx>0)
 800dc3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	dd05      	ble.n	800dc50 <core_bench_list+0x120>
		list=core_list_mergesort(list,cmp_complex,res);
 800dc44:	687a      	ldr	r2, [r7, #4]
 800dc46:	4928      	ldr	r1, [pc, #160]	; (800dce8 <core_bench_list+0x1b8>)
 800dc48:	69f8      	ldr	r0, [r7, #28]
 800dc4a:	f000 f9d4 	bl	800dff6 <core_list_mergesort>
 800dc4e:	61f8      	str	r0, [r7, #28]
	remover=core_list_remove(list->next);
 800dc50:	69fb      	ldr	r3, [r7, #28]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	4618      	mov	r0, r3
 800dc56:	f000 f942 	bl	800dede <core_list_remove>
 800dc5a:	6138      	str	r0, [r7, #16]
	/* CRC data content of list from location of index N forward, and then undo remove */
	finder=core_list_find(list,&info);
 800dc5c:	f107 0308 	add.w	r3, r7, #8
 800dc60:	4619      	mov	r1, r3
 800dc62:	69f8      	ldr	r0, [r7, #28]
 800dc64:	f000 f978 	bl	800df58 <core_list_find>
 800dc68:	61b8      	str	r0, [r7, #24]
	if (!finder)
 800dc6a:	69bb      	ldr	r3, [r7, #24]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d111      	bne.n	800dc94 <core_bench_list+0x164>
		finder=list->next;
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	61bb      	str	r3, [r7, #24]
	while (finder) {
 800dc76:	e00d      	b.n	800dc94 <core_bench_list+0x164>
		retval=crc16(list->info->data16,retval);
 800dc78:	69fb      	ldr	r3, [r7, #28]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dc82:	4611      	mov	r1, r2
 800dc84:	4618      	mov	r0, r3
 800dc86:	f001 ff56 	bl	800fb36 <crc16>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	84fb      	strh	r3, [r7, #38]	; 0x26
		finder=finder->next;
 800dc8e:	69bb      	ldr	r3, [r7, #24]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	61bb      	str	r3, [r7, #24]
	while (finder) {
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d1ee      	bne.n	800dc78 <core_bench_list+0x148>
	}
#if CORE_DEBUG
	ee_printf("List sort 1: %04x\n",retval);
#endif
	remover=core_list_undo_remove(remover,list->next);
 800dc9a:	69fb      	ldr	r3, [r7, #28]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	4619      	mov	r1, r3
 800dca0:	6938      	ldr	r0, [r7, #16]
 800dca2:	f000 f93c 	bl	800df1e <core_list_undo_remove>
 800dca6:	6138      	str	r0, [r7, #16]
	/* sort the list by index, in effect returning the list to original state */
	list=core_list_mergesort(list,cmp_idx,NULL);
 800dca8:	2200      	movs	r2, #0
 800dcaa:	4910      	ldr	r1, [pc, #64]	; (800dcec <core_bench_list+0x1bc>)
 800dcac:	69f8      	ldr	r0, [r7, #28]
 800dcae:	f000 f9a2 	bl	800dff6 <core_list_mergesort>
 800dcb2:	61f8      	str	r0, [r7, #28]
	/* CRC data content of list */
	finder=list->next;
 800dcb4:	69fb      	ldr	r3, [r7, #28]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	61bb      	str	r3, [r7, #24]
	while (finder) {
 800dcba:	e00d      	b.n	800dcd8 <core_bench_list+0x1a8>
		retval=crc16(list->info->data16,retval);
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dcc4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dcc6:	4611      	mov	r1, r2
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f001 ff34 	bl	800fb36 <crc16>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	84fb      	strh	r3, [r7, #38]	; 0x26
		finder=finder->next;
 800dcd2:	69bb      	ldr	r3, [r7, #24]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	61bb      	str	r3, [r7, #24]
	while (finder) {
 800dcd8:	69bb      	ldr	r3, [r7, #24]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d1ee      	bne.n	800dcbc <core_bench_list+0x18c>
	}
#if CORE_DEBUG
	ee_printf("List sort 2: %04x\n",retval);
#endif
	return retval;
 800dcde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3728      	adds	r7, #40	; 0x28
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	0800da5b 	.word	0x0800da5b
 800dcec:	0800da95 	.word	0x0800da95

0800dcf0 <core_list_init>:

	Returns:
	Pointer to the head of the list.

*/
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b092      	sub	sp, #72	; 0x48
 800dcf4:	af02      	add	r7, sp, #8
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	60b9      	str	r1, [r7, #8]
 800dcfa:	4613      	mov	r3, r2
 800dcfc:	80fb      	strh	r3, [r7, #6]
	/* calculated pointers for the list */
	ee_u32 per_item=16+sizeof(struct list_data_s);
 800dcfe:	2314      	movs	r3, #20
 800dd00:	637b      	str	r3, [r7, #52]	; 0x34
	ee_u32 size=(blksize/per_item)-2; /* to accomodate systems with 64b pointers, and make sure same code is executed, set max list elements */
 800dd02:	68fa      	ldr	r2, [r7, #12]
 800dd04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd06:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd0a:	3b02      	subs	r3, #2
 800dd0c:	633b      	str	r3, [r7, #48]	; 0x30
	list_head *memblock_end=memblock+size;
 800dd0e:	68ba      	ldr	r2, [r7, #8]
 800dd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd12:	00db      	lsls	r3, r3, #3
 800dd14:	4413      	add	r3, r2
 800dd16:	62fb      	str	r3, [r7, #44]	; 0x2c
	list_data *datablock=(list_data *)(memblock_end);
 800dd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd1a:	61bb      	str	r3, [r7, #24]
	list_data *datablock_end=datablock+size;
 800dd1c:	69ba      	ldr	r2, [r7, #24]
 800dd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd20:	009b      	lsls	r3, r3, #2
 800dd22:	4413      	add	r3, r2
 800dd24:	62bb      	str	r3, [r7, #40]	; 0x28
	/* some useful variables */
	ee_u32 i;
	list_head *finder,*list=memblock;
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	627b      	str	r3, [r7, #36]	; 0x24
	list_data info;

	/* create a fake items for the list head and tail */
	list->next=NULL;
 800dd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	601a      	str	r2, [r3, #0]
	list->info=datablock;
 800dd30:	69ba      	ldr	r2, [r7, #24]
 800dd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd34:	605a      	str	r2, [r3, #4]
	list->info->idx=0x0000;
 800dd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	805a      	strh	r2, [r3, #2]
	list->info->data16=(ee_s16)0x8080;
 800dd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	f248 0280 	movw	r2, #32896	; 0x8080
 800dd46:	801a      	strh	r2, [r3, #0]
	memblock++;
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	3308      	adds	r3, #8
 800dd4c:	60bb      	str	r3, [r7, #8]
	datablock++;
 800dd4e:	69bb      	ldr	r3, [r7, #24]
 800dd50:	3304      	adds	r3, #4
 800dd52:	61bb      	str	r3, [r7, #24]
	info.idx=0x7fff;
 800dd54:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800dd58:	82fb      	strh	r3, [r7, #22]
	info.data16=(ee_s16)0xffff;
 800dd5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dd5e:	82bb      	strh	r3, [r7, #20]
	core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
 800dd60:	f107 0018 	add.w	r0, r7, #24
 800dd64:	f107 0208 	add.w	r2, r7, #8
 800dd68:	f107 0114 	add.w	r1, r7, #20
 800dd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6e:	9301      	str	r3, [sp, #4]
 800dd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd72:	9300      	str	r3, [sp, #0]
 800dd74:	4603      	mov	r3, r0
 800dd76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd78:	f000 f876 	bl	800de68 <core_list_insert_new>
	
	/* then insert size items */
	for (i=0; i<size; i++) {
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd80:	e02a      	b.n	800ddd8 <core_list_init+0xe8>
		ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
 800dd82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd84:	b29a      	uxth	r2, r3
 800dd86:	88fb      	ldrh	r3, [r7, #6]
 800dd88:	4053      	eors	r3, r2
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	f003 030f 	and.w	r3, r3, #15
 800dd90:	843b      	strh	r3, [r7, #32]
		ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
 800dd92:	8c3b      	ldrh	r3, [r7, #32]
 800dd94:	00db      	lsls	r3, r3, #3
 800dd96:	b29a      	uxth	r2, r3
 800dd98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	f003 0307 	and.w	r3, r3, #7
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	4313      	orrs	r3, r2
 800dda4:	83fb      	strh	r3, [r7, #30]
		info.data16=(dat<<8) | dat;		/* fill the data with actual data and upper bits with rebuild value */
 800dda6:	8bfb      	ldrh	r3, [r7, #30]
 800dda8:	021b      	lsls	r3, r3, #8
 800ddaa:	b21a      	sxth	r2, r3
 800ddac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ddb0:	4313      	orrs	r3, r2
 800ddb2:	b21b      	sxth	r3, r3
 800ddb4:	82bb      	strh	r3, [r7, #20]
		core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
 800ddb6:	f107 0018 	add.w	r0, r7, #24
 800ddba:	f107 0208 	add.w	r2, r7, #8
 800ddbe:	f107 0114 	add.w	r1, r7, #20
 800ddc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc4:	9301      	str	r3, [sp, #4]
 800ddc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc8:	9300      	str	r3, [sp, #0]
 800ddca:	4603      	mov	r3, r0
 800ddcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ddce:	f000 f84b 	bl	800de68 <core_list_insert_new>
	for (i=0; i<size; i++) {
 800ddd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddd4:	3301      	adds	r3, #1
 800ddd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ddd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ddda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d3d0      	bcc.n	800dd82 <core_list_init+0x92>
	}
	/* and now index the list so we know initial seed order of the list */
	finder=list->next;
 800dde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	63bb      	str	r3, [r7, #56]	; 0x38
	i=1;
 800dde6:	2301      	movs	r3, #1
 800dde8:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (finder->next!=NULL) {
 800ddea:	e02a      	b.n	800de42 <core_list_init+0x152>
		if (i<size/5) /* first 20% of the list in order */
 800ddec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddee:	4a1c      	ldr	r2, [pc, #112]	; (800de60 <core_list_init+0x170>)
 800ddf0:	fba2 2303 	umull	r2, r3, r2, r3
 800ddf4:	089b      	lsrs	r3, r3, #2
 800ddf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d207      	bcs.n	800de0c <core_list_init+0x11c>
			finder->info->idx=i++;
 800ddfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddfe:	1c5a      	adds	r2, r3, #1
 800de00:	63fa      	str	r2, [r7, #60]	; 0x3c
 800de02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de04:	6852      	ldr	r2, [r2, #4]
 800de06:	b21b      	sxth	r3, r3
 800de08:	8053      	strh	r3, [r2, #2]
 800de0a:	e017      	b.n	800de3c <core_list_init+0x14c>
		else { 
			ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
 800de0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de0e:	1c5a      	adds	r2, r3, #1
 800de10:	63fa      	str	r2, [r7, #60]	; 0x3c
 800de12:	b29a      	uxth	r2, r3
 800de14:	88fb      	ldrh	r3, [r7, #6]
 800de16:	4053      	eors	r3, r2
 800de18:	847b      	strh	r3, [r7, #34]	; 0x22
			finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
 800de1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de1c:	b29b      	uxth	r3, r3
 800de1e:	021b      	lsls	r3, r3, #8
 800de20:	b29b      	uxth	r3, r3
 800de22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800de26:	b29a      	uxth	r2, r3
 800de28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de2a:	4313      	orrs	r3, r2
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	b21a      	sxth	r2, r3
 800de30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	f3c2 020d 	ubfx	r2, r2, #0, #14
 800de38:	b212      	sxth	r2, r2
 800de3a:	805a      	strh	r2, [r3, #2]
		}
		finder=finder->next;
 800de3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	63bb      	str	r3, [r7, #56]	; 0x38
	while (finder->next!=NULL) {
 800de42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d1d0      	bne.n	800ddec <core_list_init+0xfc>
	}
	list = core_list_mergesort(list,cmp_idx,NULL);
 800de4a:	2200      	movs	r2, #0
 800de4c:	4905      	ldr	r1, [pc, #20]	; (800de64 <core_list_init+0x174>)
 800de4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de50:	f000 f8d1 	bl	800dff6 <core_list_mergesort>
 800de54:	6278      	str	r0, [r7, #36]	; 0x24
		ee_printf("[%04x,%04x]",finder->info->idx,(ee_u16)finder->info->data16);
		finder=finder->next;
	}
	ee_printf("\n");
#endif
	return list;
 800de56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3740      	adds	r7, #64	; 0x40
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	cccccccd 	.word	0xcccccccd
 800de64:	0800da95 	.word	0x0800da95

0800de68 <core_list_insert_new>:

	Returns:
	Pointer to new item.
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
	, list_head *memblock_end, list_data *datablock_end) {
 800de68:	b580      	push	{r7, lr}
 800de6a:	b086      	sub	sp, #24
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	60f8      	str	r0, [r7, #12]
 800de70:	60b9      	str	r1, [r7, #8]
 800de72:	607a      	str	r2, [r7, #4]
 800de74:	603b      	str	r3, [r7, #0]
	list_head *newitem;
	
	if ((*memblock+1) >= memblock_end)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	3308      	adds	r3, #8
 800de7c:	6a3a      	ldr	r2, [r7, #32]
 800de7e:	429a      	cmp	r2, r3
 800de80:	d801      	bhi.n	800de86 <core_list_insert_new+0x1e>
		return NULL;
 800de82:	2300      	movs	r3, #0
 800de84:	e027      	b.n	800ded6 <core_list_insert_new+0x6e>
	if ((*datablock+1) >= datablock_end)
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	3304      	adds	r3, #4
 800de8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de8e:	429a      	cmp	r2, r3
 800de90:	d801      	bhi.n	800de96 <core_list_insert_new+0x2e>
		return NULL;
 800de92:	2300      	movs	r3, #0
 800de94:	e01f      	b.n	800ded6 <core_list_insert_new+0x6e>
		
	newitem=*memblock;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	617b      	str	r3, [r7, #20]
	(*memblock)++;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f103 0208 	add.w	r2, r3, #8
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	601a      	str	r2, [r3, #0]
	newitem->next=insert_point->next;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	601a      	str	r2, [r3, #0]
	insert_point->next=newitem;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	697a      	ldr	r2, [r7, #20]
 800deb4:	601a      	str	r2, [r3, #0]
	
	newitem->info=*datablock;
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	681a      	ldr	r2, [r3, #0]
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	605a      	str	r2, [r3, #4]
	(*datablock)++;
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	1d1a      	adds	r2, r3, #4
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	601a      	str	r2, [r3, #0]
	copy_info(newitem->info,info);
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	685b      	ldr	r3, [r3, #4]
 800decc:	68b9      	ldr	r1, [r7, #8]
 800dece:	4618      	mov	r0, r3
 800ded0:	f7ff fe19 	bl	800db06 <copy_info>
	
	return newitem;
 800ded4:	697b      	ldr	r3, [r7, #20]
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3718      	adds	r7, #24
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}

0800dede <core_list_remove>:
	since there is always a fake item at the end of the list, no need to check for NULL.

	Returns:
	Removed item.
*/
list_head *core_list_remove(list_head *item) {
 800dede:	b480      	push	{r7}
 800dee0:	b085      	sub	sp, #20
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	6078      	str	r0, [r7, #4]
	list_data *tmp;
	list_head *ret=item->next;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	60fb      	str	r3, [r7, #12]
	/* swap data pointers */
	tmp=item->info;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	60bb      	str	r3, [r7, #8]
	item->info=ret->info;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	685a      	ldr	r2, [r3, #4]
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	605a      	str	r2, [r3, #4]
	ret->info=tmp;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	68ba      	ldr	r2, [r7, #8]
 800defe:	605a      	str	r2, [r3, #4]
	/* and eliminate item */
	item->next=item->next->next;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	681a      	ldr	r2, [r3, #0]
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	601a      	str	r2, [r3, #0]
	ret->next=NULL;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2200      	movs	r2, #0
 800df0e:	601a      	str	r2, [r3, #0]
	return ret;
 800df10:	68fb      	ldr	r3, [r7, #12]
}
 800df12:	4618      	mov	r0, r3
 800df14:	3714      	adds	r7, #20
 800df16:	46bd      	mov	sp, r7
 800df18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1c:	4770      	bx	lr

0800df1e <core_list_undo_remove>:

	Returns:
	The item that was linked back to the list.
	
*/
list_head *core_list_undo_remove(list_head *item_removed, list_head *item_modified) {
 800df1e:	b480      	push	{r7}
 800df20:	b085      	sub	sp, #20
 800df22:	af00      	add	r7, sp, #0
 800df24:	6078      	str	r0, [r7, #4]
 800df26:	6039      	str	r1, [r7, #0]
	list_data *tmp;
	/* swap data pointers */
	tmp=item_removed->info;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	60fb      	str	r3, [r7, #12]
	item_removed->info=item_modified->info;
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	685a      	ldr	r2, [r3, #4]
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	605a      	str	r2, [r3, #4]
	item_modified->info=tmp;
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	68fa      	ldr	r2, [r7, #12]
 800df3a:	605a      	str	r2, [r3, #4]
	/* and insert item */
	item_removed->next=item_modified->next;
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	601a      	str	r2, [r3, #0]
	item_modified->next=item_removed;
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	687a      	ldr	r2, [r7, #4]
 800df48:	601a      	str	r2, [r3, #0]
	return item_removed;
 800df4a:	687b      	ldr	r3, [r7, #4]
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3714      	adds	r7, #20
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr

0800df58 <core_list_find>:
	info - idx or data to find

	Returns:
	Found item, or NULL if not found.
*/
list_head *core_list_find(list_head *list,list_data *info) {
 800df58:	b480      	push	{r7}
 800df5a:	b083      	sub	sp, #12
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	6039      	str	r1, [r7, #0]
	if (info->idx>=0) {
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	db14      	blt.n	800df96 <core_list_find+0x3e>
		while (list && (list->info->idx != info->idx))
 800df6c:	e002      	b.n	800df74 <core_list_find+0x1c>
			list=list->next;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	607b      	str	r3, [r7, #4]
		while (list && (list->info->idx != info->idx))
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d008      	beq.n	800df8c <core_list_find+0x34>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d1f0      	bne.n	800df6e <core_list_find+0x16>
		return list;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	e011      	b.n	800dfb4 <core_list_find+0x5c>
	} else {
		while (list && ((list->info->data16 & 0xff) != info->data16))
			list=list->next;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	607b      	str	r3, [r7, #4]
		while (list && ((list->info->data16 & 0xff) != info->data16))
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d00a      	beq.n	800dfb2 <core_list_find+0x5a>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	685b      	ldr	r3, [r3, #4]
 800dfa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dfa4:	b29b      	uxth	r3, r3
 800dfa6:	b2db      	uxtb	r3, r3
 800dfa8:	683a      	ldr	r2, [r7, #0]
 800dfaa:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	d1ee      	bne.n	800df90 <core_list_find+0x38>
		return list;
 800dfb2:	687b      	ldr	r3, [r7, #4]
	}
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	370c      	adds	r7, #12
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr

0800dfc0 <core_list_reverse>:

	Returns:
	Found item, or NULL if not found.
*/

list_head *core_list_reverse(list_head *list) {
 800dfc0:	b480      	push	{r7}
 800dfc2:	b085      	sub	sp, #20
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
	list_head *next=NULL, *tmp;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	60fb      	str	r3, [r7, #12]
	while (list) {
 800dfcc:	e009      	b.n	800dfe2 <core_list_reverse+0x22>
		tmp=list->next;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	60bb      	str	r3, [r7, #8]
		list->next=next;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	68fa      	ldr	r2, [r7, #12]
 800dfd8:	601a      	str	r2, [r3, #0]
		next=list;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	60fb      	str	r3, [r7, #12]
		list=tmp;
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	607b      	str	r3, [r7, #4]
	while (list) {
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d1f2      	bne.n	800dfce <core_list_reverse+0xe>
	}
	return next;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3714      	adds	r7, #20
 800dfee:	46bd      	mov	sp, r7
 800dff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff4:	4770      	bx	lr

0800dff6 <core_list_mergesort>:
	Note: 
	We have a special header for the list that will always be first,
	but the algorithm could theoretically modify where the list starts.

 */
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res) {
 800dff6:	b580      	push	{r7, lr}
 800dff8:	b08e      	sub	sp, #56	; 0x38
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	60f8      	str	r0, [r7, #12]
 800dffe:	60b9      	str	r1, [r7, #8]
 800e000:	607a      	str	r2, [r7, #4]
    list_head *p, *q, *e, *tail;
    ee_s32 insize, nmerges, psize, qsize, i;

    insize = 1;
 800e002:	2301      	movs	r3, #1
 800e004:	627b      	str	r3, [r7, #36]	; 0x24

    while (1) {
        p = list;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	637b      	str	r3, [r7, #52]	; 0x34
        list = NULL;
 800e00a:	2300      	movs	r3, #0
 800e00c:	60fb      	str	r3, [r7, #12]
        tail = NULL;
 800e00e:	2300      	movs	r3, #0
 800e010:	62bb      	str	r3, [r7, #40]	; 0x28

        nmerges = 0;  /* count number of merges we do in this pass */
 800e012:	2300      	movs	r3, #0
 800e014:	623b      	str	r3, [r7, #32]

        while (p) {
 800e016:	e06a      	b.n	800e0ee <core_list_mergesort+0xf8>
            nmerges++;  /* there exists a merge to be done */
 800e018:	6a3b      	ldr	r3, [r7, #32]
 800e01a:	3301      	adds	r3, #1
 800e01c:	623b      	str	r3, [r7, #32]
            /* step `insize' places along from p */
            q = p;
 800e01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e020:	633b      	str	r3, [r7, #48]	; 0x30
            psize = 0;
 800e022:	2300      	movs	r3, #0
 800e024:	61fb      	str	r3, [r7, #28]
            for (i = 0; i < insize; i++) {
 800e026:	2300      	movs	r3, #0
 800e028:	617b      	str	r3, [r7, #20]
 800e02a:	e00b      	b.n	800e044 <core_list_mergesort+0x4e>
                psize++;
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	3301      	adds	r3, #1
 800e030:	61fb      	str	r3, [r7, #28]
			    q = q->next;
 800e032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	633b      	str	r3, [r7, #48]	; 0x30
                if (!q) break;
 800e038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d007      	beq.n	800e04e <core_list_mergesort+0x58>
            for (i = 0; i < insize; i++) {
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	3301      	adds	r3, #1
 800e042:	617b      	str	r3, [r7, #20]
 800e044:	697a      	ldr	r2, [r7, #20]
 800e046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e048:	429a      	cmp	r2, r3
 800e04a:	dbef      	blt.n	800e02c <core_list_mergesort+0x36>
 800e04c:	e000      	b.n	800e050 <core_list_mergesort+0x5a>
                if (!q) break;
 800e04e:	bf00      	nop
            }

            /* if q hasn't fallen off end, we have two lists to merge */
            qsize = insize;
 800e050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e052:	61bb      	str	r3, [r7, #24]

            /* now we have two lists; merge them */
            while (psize > 0 || (qsize > 0 && q)) {
 800e054:	e040      	b.n	800e0d8 <core_list_mergesort+0xe2>

				/* decide whether next element of merge comes from p or q */
				if (psize == 0) {
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d108      	bne.n	800e06e <core_list_mergesort+0x78>
				    /* p is empty; e must come from q. */
				    e = q; q = q->next; qsize--;
 800e05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e05e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	633b      	str	r3, [r7, #48]	; 0x30
 800e066:	69bb      	ldr	r3, [r7, #24]
 800e068:	3b01      	subs	r3, #1
 800e06a:	61bb      	str	r3, [r7, #24]
 800e06c:	e029      	b.n	800e0c2 <core_list_mergesort+0xcc>
				} else if (qsize == 0 || !q) {
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d002      	beq.n	800e07a <core_list_mergesort+0x84>
 800e074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e076:	2b00      	cmp	r3, #0
 800e078:	d108      	bne.n	800e08c <core_list_mergesort+0x96>
				    /* q is empty; e must come from p. */
				    e = p; p = p->next; psize--;
 800e07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e07c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e07e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	637b      	str	r3, [r7, #52]	; 0x34
 800e084:	69fb      	ldr	r3, [r7, #28]
 800e086:	3b01      	subs	r3, #1
 800e088:	61fb      	str	r3, [r7, #28]
 800e08a:	e01a      	b.n	800e0c2 <core_list_mergesort+0xcc>
				} else if (cmp(p->info,q->info,res) <= 0) {
 800e08c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e08e:	6858      	ldr	r0, [r3, #4]
 800e090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e092:	6859      	ldr	r1, [r3, #4]
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	687a      	ldr	r2, [r7, #4]
 800e098:	4798      	blx	r3
 800e09a:	4603      	mov	r3, r0
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	dc08      	bgt.n	800e0b2 <core_list_mergesort+0xbc>
				    /* First element of p is lower (or same); e must come from p. */
				    e = p; p = p->next; psize--;
 800e0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	637b      	str	r3, [r7, #52]	; 0x34
 800e0aa:	69fb      	ldr	r3, [r7, #28]
 800e0ac:	3b01      	subs	r3, #1
 800e0ae:	61fb      	str	r3, [r7, #28]
 800e0b0:	e007      	b.n	800e0c2 <core_list_mergesort+0xcc>
				} else {
				    /* First element of q is lower; e must come from q. */
				    e = q; q = q->next; qsize--;
 800e0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	633b      	str	r3, [r7, #48]	; 0x30
 800e0bc:	69bb      	ldr	r3, [r7, #24]
 800e0be:	3b01      	subs	r3, #1
 800e0c0:	61bb      	str	r3, [r7, #24]
				}

		        /* add the next element to the merged list */
				if (tail) {
 800e0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d003      	beq.n	800e0d0 <core_list_mergesort+0xda>
				    tail->next = e;
 800e0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0cc:	601a      	str	r2, [r3, #0]
 800e0ce:	e001      	b.n	800e0d4 <core_list_mergesort+0xde>
				} else {
				    list = e;
 800e0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d2:	60fb      	str	r3, [r7, #12]
				}
				tail = e;
 800e0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d6:	62bb      	str	r3, [r7, #40]	; 0x28
            while (psize > 0 || (qsize > 0 && q)) {
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	dcbb      	bgt.n	800e056 <core_list_mergesort+0x60>
 800e0de:	69bb      	ldr	r3, [r7, #24]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	dd02      	ble.n	800e0ea <core_list_mergesort+0xf4>
 800e0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d1b5      	bne.n	800e056 <core_list_mergesort+0x60>
	        }

			/* now p has stepped `insize' places along, and q has too */
			p = q;
 800e0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ec:	637b      	str	r3, [r7, #52]	; 0x34
        while (p) {
 800e0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d191      	bne.n	800e018 <core_list_mergesort+0x22>
        }
		
	    tail->next = NULL;
 800e0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	601a      	str	r2, [r3, #0]

        /* If we have done only one merge, we're finished. */
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
 800e0fa:	6a3b      	ldr	r3, [r7, #32]
 800e0fc:	2b01      	cmp	r3, #1
 800e0fe:	dc01      	bgt.n	800e104 <core_list_mergesort+0x10e>
            return list;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	e003      	b.n	800e10c <core_list_mergesort+0x116>

        /* Otherwise repeat, merging lists twice the size */
        insize *= 2;
 800e104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e106:	005b      	lsls	r3, r3, #1
 800e108:	627b      	str	r3, [r7, #36]	; 0x24
        p = list;
 800e10a:	e77c      	b.n	800e006 <core_list_mergesort+0x10>
    }
#if COMPILER_REQUIRES_SORT_RETURN
	return list;
#endif
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3738      	adds	r7, #56	; 0x38
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}

0800e114 <iterate>:
	NULL.
*/
static ee_u16 list_known_crc[]   =      {(ee_u16)0xd4b0,(ee_u16)0x3340,(ee_u16)0x6a79,(ee_u16)0xe714,(ee_u16)0xe3c1};
static ee_u16 matrix_known_crc[] =      {(ee_u16)0xbe52,(ee_u16)0x1199,(ee_u16)0x5608,(ee_u16)0x1fd7,(ee_u16)0x0747};
static ee_u16 state_known_crc[]  =      {(ee_u16)0x5e47,(ee_u16)0x39bf,(ee_u16)0xe5a4,(ee_u16)0x8e3a,(ee_u16)0x8d84};
void *iterate(void *pres) {
 800e114:	b580      	push	{r7, lr}
 800e116:	b086      	sub	sp, #24
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
	ee_u32 i;
	ee_u16 crc;
	core_results *res=(core_results *)pres;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	613b      	str	r3, [r7, #16]
	ee_u32 iterations=res->iterations;
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	69db      	ldr	r3, [r3, #28]
 800e124:	60fb      	str	r3, [r7, #12]
	res->crc=0;
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	2200      	movs	r2, #0
 800e12a:	871a      	strh	r2, [r3, #56]	; 0x38
	res->crclist=0;
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	2200      	movs	r2, #0
 800e130:	875a      	strh	r2, [r3, #58]	; 0x3a
	res->crcmatrix=0;
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	2200      	movs	r2, #0
 800e136:	879a      	strh	r2, [r3, #60]	; 0x3c
	res->crcstate=0;
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	2200      	movs	r2, #0
 800e13c:	87da      	strh	r2, [r3, #62]	; 0x3e

	for (i=0; i<iterations; i++) {
 800e13e:	2300      	movs	r3, #0
 800e140:	617b      	str	r3, [r7, #20]
 800e142:	e02c      	b.n	800e19e <iterate+0x8a>
		crc=core_bench_list(res,1);
 800e144:	2101      	movs	r1, #1
 800e146:	6938      	ldr	r0, [r7, #16]
 800e148:	f7ff fcf2 	bl	800db30 <core_bench_list>
 800e14c:	4603      	mov	r3, r0
 800e14e:	817b      	strh	r3, [r7, #10]
		res->crc=crcu16(crc,res->crc);
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800e154:	897b      	ldrh	r3, [r7, #10]
 800e156:	4611      	mov	r1, r2
 800e158:	4618      	mov	r0, r3
 800e15a:	f001 fcad 	bl	800fab8 <crcu16>
 800e15e:	4603      	mov	r3, r0
 800e160:	461a      	mov	r2, r3
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	871a      	strh	r2, [r3, #56]	; 0x38
		crc=core_bench_list(res,-1);
 800e166:	f04f 31ff 	mov.w	r1, #4294967295
 800e16a:	6938      	ldr	r0, [r7, #16]
 800e16c:	f7ff fce0 	bl	800db30 <core_bench_list>
 800e170:	4603      	mov	r3, r0
 800e172:	817b      	strh	r3, [r7, #10]
		res->crc=crcu16(crc,res->crc);
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800e178:	897b      	ldrh	r3, [r7, #10]
 800e17a:	4611      	mov	r1, r2
 800e17c:	4618      	mov	r0, r3
 800e17e:	f001 fc9b 	bl	800fab8 <crcu16>
 800e182:	4603      	mov	r3, r0
 800e184:	461a      	mov	r2, r3
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	871a      	strh	r2, [r3, #56]	; 0x38
		if (i==0) res->crclist=res->crc;
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d103      	bne.n	800e198 <iterate+0x84>
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	875a      	strh	r2, [r3, #58]	; 0x3a
	for (i=0; i<iterations; i++) {
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	3301      	adds	r3, #1
 800e19c:	617b      	str	r3, [r7, #20]
 800e19e:	697a      	ldr	r2, [r7, #20]
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d3ce      	bcc.n	800e144 <iterate+0x30>
	}
	return NULL;
 800e1a6:	2300      	movs	r3, #0
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3718      	adds	r7, #24
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}

0800e1b0 <coremark_main>:
	4 - Iterations  : Special, if set to 0, iterations will be automatically determined such that the benchmark will run between 10 to 100 secs

*/

#if MAIN_HAS_NOARGC
MAIN_RETURN_TYPE coremark_main(void) {
 800e1b0:	b5b0      	push	{r4, r5, r7, lr}
 800e1b2:	ed2d 8b02 	vpush	{d8}
 800e1b6:	f5ad 6d05 	sub.w	sp, sp, #2128	; 0x850
 800e1ba:	af04      	add	r7, sp, #16
	int argc=0;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	char *argv[1];
#else
MAIN_RETURN_TYPE coremark_main(int argc, char *argv[]) {
#endif
	ee_u16 i,j=0,num_algorithms=0;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	f8a7 383c 	strh.w	r3, [r7, #2108]	; 0x83c
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	f8a7 383a 	strh.w	r3, [r7, #2106]	; 0x83a
	ee_s16 known_id=-1,total_errors=0;
 800e1ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e1d2:	f8a7 3838 	strh.w	r3, [r7, #2104]	; 0x838
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	f8a7 3836 	strh.w	r3, [r7, #2102]	; 0x836
	ee_u16 seedcrc=0;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	f8a7 3822 	strh.w	r3, [r7, #2082]	; 0x822
	core_results results[MULTITHREAD];
#if (MEM_METHOD==MEM_STACK)
	ee_u8 stack_memblock[TOTAL_DATA_SIZE*MULTITHREAD];
#endif
	/* first call any initializations needed */
	portable_init(&(results[0].port), &argc, argv);
 800e1e2:	f607 0214 	addw	r2, r7, #2068	; 0x814
 800e1e6:	f607 0118 	addw	r1, r7, #2072	; 0x818
 800e1ea:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800e1ee:	3342      	adds	r3, #66	; 0x42
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f001 f925 	bl	800f440 <portable_init>
	/* First some checks to make sure benchmark will run ok */
	if (sizeof(struct list_head_s)>128) {
		ee_printf("list_head structure too big for comparable data!\n");
		return MAIN_RETURN_VAL;
	}
	results[0].seed1=get_seed(1);
 800e1f6:	2001      	movs	r0, #1
 800e1f8:	f001 fbd6 	bl	800f9a8 <get_seed_32>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	b21b      	sxth	r3, r3
 800e200:	f8a7 37d0 	strh.w	r3, [r7, #2000]	; 0x7d0
	results[0].seed2=get_seed(2);
 800e204:	2002      	movs	r0, #2
 800e206:	f001 fbcf 	bl	800f9a8 <get_seed_32>
 800e20a:	4603      	mov	r3, r0
 800e20c:	b21b      	sxth	r3, r3
 800e20e:	f8a7 37d2 	strh.w	r3, [r7, #2002]	; 0x7d2
	results[0].seed3=get_seed(3);
 800e212:	2003      	movs	r0, #3
 800e214:	f001 fbc8 	bl	800f9a8 <get_seed_32>
 800e218:	4603      	mov	r3, r0
 800e21a:	b21b      	sxth	r3, r3
 800e21c:	f8a7 37d4 	strh.w	r3, [r7, #2004]	; 0x7d4
	results[0].iterations=get_seed_32(4);
 800e220:	2004      	movs	r0, #4
 800e222:	f001 fbc1 	bl	800f9a8 <get_seed_32>
 800e226:	4603      	mov	r3, r0
 800e228:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
#if CORE_DEBUG
	results[0].iterations=1;
#endif
	results[0].execs=get_seed_32(5);
 800e22c:	2005      	movs	r0, #5
 800e22e:	f001 fbbb 	bl	800f9a8 <get_seed_32>
 800e232:	4603      	mov	r3, r0
 800e234:	f8c7 37f0 	str.w	r3, [r7, #2032]	; 0x7f0
	if (results[0].execs==0) { /* if not supplied, execute all algorithms */
 800e238:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d102      	bne.n	800e246 <coremark_main+0x96>
		results[0].execs=ALL_ALGORITHMS_MASK;
 800e240:	2307      	movs	r3, #7
 800e242:	f8c7 37f0 	str.w	r3, [r7, #2032]	; 0x7f0
	}
		/* put in some default values based on one seed only for easy testing */
	if ((results[0].seed1==0) && (results[0].seed2==0) && (results[0].seed3==0)) { /* validation run */
 800e246:	f9b7 37d0 	ldrsh.w	r3, [r7, #2000]	; 0x7d0
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d110      	bne.n	800e270 <coremark_main+0xc0>
 800e24e:	f9b7 37d2 	ldrsh.w	r3, [r7, #2002]	; 0x7d2
 800e252:	2b00      	cmp	r3, #0
 800e254:	d10c      	bne.n	800e270 <coremark_main+0xc0>
 800e256:	f9b7 37d4 	ldrsh.w	r3, [r7, #2004]	; 0x7d4
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d108      	bne.n	800e270 <coremark_main+0xc0>
		results[0].seed1=0;
 800e25e:	2300      	movs	r3, #0
 800e260:	f8a7 37d0 	strh.w	r3, [r7, #2000]	; 0x7d0
		results[0].seed2=0;
 800e264:	2300      	movs	r3, #0
 800e266:	f8a7 37d2 	strh.w	r3, [r7, #2002]	; 0x7d2
		results[0].seed3=0x66;
 800e26a:	2366      	movs	r3, #102	; 0x66
 800e26c:	f8a7 37d4 	strh.w	r3, [r7, #2004]	; 0x7d4
	}
	if ((results[0].seed1==1) && (results[0].seed2==0) && (results[0].seed3==0)) { /* perfromance run */
 800e270:	f9b7 37d0 	ldrsh.w	r3, [r7, #2000]	; 0x7d0
 800e274:	2b01      	cmp	r3, #1
 800e276:	d112      	bne.n	800e29e <coremark_main+0xee>
 800e278:	f9b7 37d2 	ldrsh.w	r3, [r7, #2002]	; 0x7d2
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d10e      	bne.n	800e29e <coremark_main+0xee>
 800e280:	f9b7 37d4 	ldrsh.w	r3, [r7, #2004]	; 0x7d4
 800e284:	2b00      	cmp	r3, #0
 800e286:	d10a      	bne.n	800e29e <coremark_main+0xee>
		results[0].seed1=0x3415;
 800e288:	f243 4315 	movw	r3, #13333	; 0x3415
 800e28c:	f8a7 37d0 	strh.w	r3, [r7, #2000]	; 0x7d0
		results[0].seed2=0x3415;
 800e290:	f243 4315 	movw	r3, #13333	; 0x3415
 800e294:	f8a7 37d2 	strh.w	r3, [r7, #2002]	; 0x7d2
		results[0].seed3=0x66;
 800e298:	2366      	movs	r3, #102	; 0x66
 800e29a:	f8a7 37d4 	strh.w	r3, [r7, #2004]	; 0x7d4
		results[i].seed3=results[0].seed3;
		results[i].err=0;
		results[i].execs=results[0].execs;
	}
#elif (MEM_METHOD==MEM_STACK)
	for (i=0 ; i<MULTITHREAD; i++) {
 800e29e:	2300      	movs	r3, #0
 800e2a0:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800e2a4:	e068      	b.n	800e378 <coremark_main+0x1c8>
		results[i].memblock[0]=stack_memblock+i*TOTAL_DATA_SIZE;
 800e2a6:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800e2aa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e2ae:	fb02 f303 	mul.w	r3, r2, r3
 800e2b2:	4619      	mov	r1, r3
 800e2b4:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e2b8:	463b      	mov	r3, r7
 800e2ba:	4419      	add	r1, r3
 800e2bc:	4613      	mov	r3, r2
 800e2be:	011b      	lsls	r3, r3, #4
 800e2c0:	4413      	add	r3, r2
 800e2c2:	009b      	lsls	r3, r3, #2
 800e2c4:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e2c8:	443b      	add	r3, r7
 800e2ca:	3b68      	subs	r3, #104	; 0x68
 800e2cc:	6019      	str	r1, [r3, #0]
		results[i].size=TOTAL_DATA_SIZE;
 800e2ce:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e2d2:	4613      	mov	r3, r2
 800e2d4:	011b      	lsls	r3, r3, #4
 800e2d6:	4413      	add	r3, r2
 800e2d8:	009b      	lsls	r3, r3, #2
 800e2da:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e2de:	443b      	add	r3, r7
 800e2e0:	3b58      	subs	r3, #88	; 0x58
 800e2e2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e2e6:	601a      	str	r2, [r3, #0]
		results[i].seed1=results[0].seed1;
 800e2e8:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e2ec:	f9b7 17d0 	ldrsh.w	r1, [r7, #2000]	; 0x7d0
 800e2f0:	4613      	mov	r3, r2
 800e2f2:	011b      	lsls	r3, r3, #4
 800e2f4:	4413      	add	r3, r2
 800e2f6:	009b      	lsls	r3, r3, #2
 800e2f8:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e2fc:	443b      	add	r3, r7
 800e2fe:	3b70      	subs	r3, #112	; 0x70
 800e300:	460a      	mov	r2, r1
 800e302:	801a      	strh	r2, [r3, #0]
		results[i].seed2=results[0].seed2;
 800e304:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e308:	f9b7 17d2 	ldrsh.w	r1, [r7, #2002]	; 0x7d2
 800e30c:	4613      	mov	r3, r2
 800e30e:	011b      	lsls	r3, r3, #4
 800e310:	4413      	add	r3, r2
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e318:	443b      	add	r3, r7
 800e31a:	3b6e      	subs	r3, #110	; 0x6e
 800e31c:	460a      	mov	r2, r1
 800e31e:	801a      	strh	r2, [r3, #0]
		results[i].seed3=results[0].seed3;
 800e320:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e324:	f9b7 17d4 	ldrsh.w	r1, [r7, #2004]	; 0x7d4
 800e328:	4613      	mov	r3, r2
 800e32a:	011b      	lsls	r3, r3, #4
 800e32c:	4413      	add	r3, r2
 800e32e:	009b      	lsls	r3, r3, #2
 800e330:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e334:	443b      	add	r3, r7
 800e336:	3b6c      	subs	r3, #108	; 0x6c
 800e338:	460a      	mov	r2, r1
 800e33a:	801a      	strh	r2, [r3, #0]
		results[i].err=0;
 800e33c:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e340:	4613      	mov	r3, r2
 800e342:	011b      	lsls	r3, r3, #4
 800e344:	4413      	add	r3, r2
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e34c:	443b      	add	r3, r7
 800e34e:	3b30      	subs	r3, #48	; 0x30
 800e350:	2200      	movs	r2, #0
 800e352:	801a      	strh	r2, [r3, #0]
		results[i].execs=results[0].execs;
 800e354:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e358:	f8d7 17f0 	ldr.w	r1, [r7, #2032]	; 0x7f0
 800e35c:	4613      	mov	r3, r2
 800e35e:	011b      	lsls	r3, r3, #4
 800e360:	4413      	add	r3, r2
 800e362:	009b      	lsls	r3, r3, #2
 800e364:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e368:	443b      	add	r3, r7
 800e36a:	3b50      	subs	r3, #80	; 0x50
 800e36c:	6019      	str	r1, [r3, #0]
	for (i=0 ; i<MULTITHREAD; i++) {
 800e36e:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800e372:	3301      	adds	r3, #1
 800e374:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800e378:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d092      	beq.n	800e2a6 <coremark_main+0xf6>
#else
#error "Please define a way to initialize a memory block."
#endif
	/* Data init */ 
	/* Find out how space much we have based on number of algorithms */
	for (i=0; i<NUM_ALGORITHMS; i++) {
 800e380:	2300      	movs	r3, #0
 800e382:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800e386:	e014      	b.n	800e3b2 <coremark_main+0x202>
		if ((1<<(ee_u32)i) & results[0].execs)
 800e388:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800e38c:	2201      	movs	r2, #1
 800e38e:	fa02 f303 	lsl.w	r3, r2, r3
 800e392:	461a      	mov	r2, r3
 800e394:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 800e398:	4013      	ands	r3, r2
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d004      	beq.n	800e3a8 <coremark_main+0x1f8>
			num_algorithms++;
 800e39e:	f8b7 383a 	ldrh.w	r3, [r7, #2106]	; 0x83a
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	f8a7 383a 	strh.w	r3, [r7, #2106]	; 0x83a
	for (i=0; i<NUM_ALGORITHMS; i++) {
 800e3a8:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800e3b2:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800e3b6:	2b02      	cmp	r3, #2
 800e3b8:	d9e6      	bls.n	800e388 <coremark_main+0x1d8>
	}
	for (i=0 ; i<MULTITHREAD; i++) 
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800e3c0:	e01e      	b.n	800e400 <coremark_main+0x250>
		results[i].size=results[i].size/num_algorithms;
 800e3c2:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e3c6:	4613      	mov	r3, r2
 800e3c8:	011b      	lsls	r3, r3, #4
 800e3ca:	4413      	add	r3, r2
 800e3cc:	009b      	lsls	r3, r3, #2
 800e3ce:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e3d2:	443b      	add	r3, r7
 800e3d4:	3b58      	subs	r3, #88	; 0x58
 800e3d6:	6819      	ldr	r1, [r3, #0]
 800e3d8:	f8b7 383a 	ldrh.w	r3, [r7, #2106]	; 0x83a
 800e3dc:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e3e0:	fbb1 f1f3 	udiv	r1, r1, r3
 800e3e4:	4613      	mov	r3, r2
 800e3e6:	011b      	lsls	r3, r3, #4
 800e3e8:	4413      	add	r3, r2
 800e3ea:	009b      	lsls	r3, r3, #2
 800e3ec:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e3f0:	443b      	add	r3, r7
 800e3f2:	3b58      	subs	r3, #88	; 0x58
 800e3f4:	6019      	str	r1, [r3, #0]
	for (i=0 ; i<MULTITHREAD; i++) 
 800e3f6:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800e400:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800e404:	2b00      	cmp	r3, #0
 800e406:	d0dc      	beq.n	800e3c2 <coremark_main+0x212>
	/* Assign pointers */
	for (i=0; i<NUM_ALGORITHMS; i++) {
 800e408:	2300      	movs	r3, #0
 800e40a:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800e40e:	e043      	b.n	800e498 <coremark_main+0x2e8>
		ee_u32 ctx;
		if ((1<<(ee_u32)i) & results[0].execs) {
 800e410:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800e414:	2201      	movs	r2, #1
 800e416:	fa02 f303 	lsl.w	r3, r2, r3
 800e41a:	461a      	mov	r2, r3
 800e41c:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 800e420:	4013      	ands	r3, r2
 800e422:	2b00      	cmp	r3, #0
 800e424:	d033      	beq.n	800e48e <coremark_main+0x2de>
			for (ctx=0 ; ctx<MULTITHREAD; ctx++)
 800e426:	2300      	movs	r3, #0
 800e428:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830
 800e42c:	e026      	b.n	800e47c <coremark_main+0x2cc>
				results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
 800e42e:	f8d7 2830 	ldr.w	r2, [r7, #2096]	; 0x830
 800e432:	4613      	mov	r3, r2
 800e434:	011b      	lsls	r3, r3, #4
 800e436:	4413      	add	r3, r2
 800e438:	009b      	lsls	r3, r3, #2
 800e43a:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e43e:	443b      	add	r3, r7
 800e440:	3b68      	subs	r3, #104	; 0x68
 800e442:	681a      	ldr	r2, [r3, #0]
 800e444:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 800e448:	f8b7 183c 	ldrh.w	r1, [r7, #2108]	; 0x83c
 800e44c:	fb01 f303 	mul.w	r3, r1, r3
 800e450:	f8b7 183e 	ldrh.w	r1, [r7, #2110]	; 0x83e
 800e454:	1c48      	adds	r0, r1, #1
 800e456:	18d1      	adds	r1, r2, r3
 800e458:	f8d7 2830 	ldr.w	r2, [r7, #2096]	; 0x830
 800e45c:	4613      	mov	r3, r2
 800e45e:	011b      	lsls	r3, r3, #4
 800e460:	4413      	add	r3, r2
 800e462:	4403      	add	r3, r0
 800e464:	3302      	adds	r3, #2
 800e466:	009b      	lsls	r3, r3, #2
 800e468:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e46c:	443b      	add	r3, r7
 800e46e:	f843 1c70 	str.w	r1, [r3, #-112]
			for (ctx=0 ; ctx<MULTITHREAD; ctx++)
 800e472:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 800e476:	3301      	adds	r3, #1
 800e478:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830
 800e47c:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 800e480:	2b00      	cmp	r3, #0
 800e482:	d0d4      	beq.n	800e42e <coremark_main+0x27e>
			j++;
 800e484:	f8b7 383c 	ldrh.w	r3, [r7, #2108]	; 0x83c
 800e488:	3301      	adds	r3, #1
 800e48a:	f8a7 383c 	strh.w	r3, [r7, #2108]	; 0x83c
	for (i=0; i<NUM_ALGORITHMS; i++) {
 800e48e:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800e492:	3301      	adds	r3, #1
 800e494:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800e498:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800e49c:	2b02      	cmp	r3, #2
 800e49e:	d9b7      	bls.n	800e410 <coremark_main+0x260>
		}
	}
	/* call inits */
	for (i=0 ; i<MULTITHREAD; i++) {
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800e4a6:	e0ac      	b.n	800e602 <coremark_main+0x452>
		if (results[i].execs & ID_LIST) {
 800e4a8:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e4ac:	4613      	mov	r3, r2
 800e4ae:	011b      	lsls	r3, r3, #4
 800e4b0:	4413      	add	r3, r2
 800e4b2:	009b      	lsls	r3, r3, #2
 800e4b4:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e4b8:	443b      	add	r3, r7
 800e4ba:	3b50      	subs	r3, #80	; 0x50
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	f003 0301 	and.w	r3, r3, #1
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d027      	beq.n	800e516 <coremark_main+0x366>
			results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
 800e4c6:	f8d7 07e8 	ldr.w	r0, [r7, #2024]	; 0x7e8
 800e4ca:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e4ce:	4613      	mov	r3, r2
 800e4d0:	011b      	lsls	r3, r3, #4
 800e4d2:	4413      	add	r3, r2
 800e4d4:	009b      	lsls	r3, r3, #2
 800e4d6:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e4da:	443b      	add	r3, r7
 800e4dc:	3b64      	subs	r3, #100	; 0x64
 800e4de:	6819      	ldr	r1, [r3, #0]
 800e4e0:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e4e4:	4613      	mov	r3, r2
 800e4e6:	011b      	lsls	r3, r3, #4
 800e4e8:	4413      	add	r3, r2
 800e4ea:	009b      	lsls	r3, r3, #2
 800e4ec:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e4f0:	443b      	add	r3, r7
 800e4f2:	3b70      	subs	r3, #112	; 0x70
 800e4f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4f8:	f8b7 483e 	ldrh.w	r4, [r7, #2110]	; 0x83e
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	f7ff fbf7 	bl	800dcf0 <core_list_init>
 800e502:	4602      	mov	r2, r0
 800e504:	4623      	mov	r3, r4
 800e506:	011b      	lsls	r3, r3, #4
 800e508:	4423      	add	r3, r4
 800e50a:	009b      	lsls	r3, r3, #2
 800e50c:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e510:	443b      	add	r3, r7
 800e512:	3b4c      	subs	r3, #76	; 0x4c
 800e514:	601a      	str	r2, [r3, #0]
		}
		if (results[i].execs & ID_MATRIX) {
 800e516:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e51a:	4613      	mov	r3, r2
 800e51c:	011b      	lsls	r3, r3, #4
 800e51e:	4413      	add	r3, r2
 800e520:	009b      	lsls	r3, r3, #2
 800e522:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e526:	443b      	add	r3, r7
 800e528:	3b50      	subs	r3, #80	; 0x50
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	f003 0302 	and.w	r3, r3, #2
 800e530:	2b00      	cmp	r3, #0
 800e532:	d036      	beq.n	800e5a2 <coremark_main+0x3f2>
			core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
 800e534:	f8d7 07e8 	ldr.w	r0, [r7, #2024]	; 0x7e8
 800e538:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e53c:	4613      	mov	r3, r2
 800e53e:	011b      	lsls	r3, r3, #4
 800e540:	4413      	add	r3, r2
 800e542:	009b      	lsls	r3, r3, #2
 800e544:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e548:	443b      	add	r3, r7
 800e54a:	3b60      	subs	r3, #96	; 0x60
 800e54c:	681c      	ldr	r4, [r3, #0]
 800e54e:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e552:	4613      	mov	r3, r2
 800e554:	011b      	lsls	r3, r3, #4
 800e556:	4413      	add	r3, r2
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e55e:	443b      	add	r3, r7
 800e560:	3b70      	subs	r3, #112	; 0x70
 800e562:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e566:	4619      	mov	r1, r3
 800e568:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e56c:	4613      	mov	r3, r2
 800e56e:	011b      	lsls	r3, r3, #4
 800e570:	4413      	add	r3, r2
 800e572:	009b      	lsls	r3, r3, #2
 800e574:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e578:	443b      	add	r3, r7
 800e57a:	3b6e      	subs	r3, #110	; 0x6e
 800e57c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e580:	041b      	lsls	r3, r3, #16
 800e582:	ea41 0503 	orr.w	r5, r1, r3
 800e586:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e58a:	f507 61fa 	add.w	r1, r7, #2000	; 0x7d0
 800e58e:	4613      	mov	r3, r2
 800e590:	011b      	lsls	r3, r3, #4
 800e592:	4413      	add	r3, r2
 800e594:	009b      	lsls	r3, r3, #2
 800e596:	3328      	adds	r3, #40	; 0x28
 800e598:	440b      	add	r3, r1
 800e59a:	462a      	mov	r2, r5
 800e59c:	4621      	mov	r1, r4
 800e59e:	f000 fc7c 	bl	800ee9a <core_init_matrix>
		}
		if (results[i].execs & ID_STATE) {
 800e5a2:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e5a6:	4613      	mov	r3, r2
 800e5a8:	011b      	lsls	r3, r3, #4
 800e5aa:	4413      	add	r3, r2
 800e5ac:	009b      	lsls	r3, r3, #2
 800e5ae:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e5b2:	443b      	add	r3, r7
 800e5b4:	3b50      	subs	r3, #80	; 0x50
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	f003 0304 	and.w	r3, r3, #4
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d01b      	beq.n	800e5f8 <coremark_main+0x448>
			core_init_state(results[0].size,results[i].seed1,results[i].memblock[3]);
 800e5c0:	f8d7 07e8 	ldr.w	r0, [r7, #2024]	; 0x7e8
 800e5c4:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e5c8:	4613      	mov	r3, r2
 800e5ca:	011b      	lsls	r3, r3, #4
 800e5cc:	4413      	add	r3, r2
 800e5ce:	009b      	lsls	r3, r3, #2
 800e5d0:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e5d4:	443b      	add	r3, r7
 800e5d6:	3b70      	subs	r3, #112	; 0x70
 800e5d8:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e5dc:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e5e0:	4613      	mov	r3, r2
 800e5e2:	011b      	lsls	r3, r3, #4
 800e5e4:	4413      	add	r3, r2
 800e5e6:	009b      	lsls	r3, r3, #2
 800e5e8:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e5ec:	443b      	add	r3, r7
 800e5ee:	3b5c      	subs	r3, #92	; 0x5c
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	461a      	mov	r2, r3
 800e5f4:	f001 f806 	bl	800f604 <core_init_state>
	for (i=0 ; i<MULTITHREAD; i++) {
 800e5f8:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800e5fc:	3301      	adds	r3, #1
 800e5fe:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800e602:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800e606:	2b00      	cmp	r3, #0
 800e608:	f43f af4e 	beq.w	800e4a8 <coremark_main+0x2f8>
		}
	}
	
	/* automatically determine number of iterations if not set */
	if (results[0].iterations==0) { 
 800e60c:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 800e610:	2b00      	cmp	r3, #0
 800e612:	d14e      	bne.n	800e6b2 <coremark_main+0x502>
		secs_ret secs_passed=0;
 800e614:	f04f 0200 	mov.w	r2, #0
 800e618:	f04f 0300 	mov.w	r3, #0
 800e61c:	f607 0128 	addw	r1, r7, #2088	; 0x828
 800e620:	e9c1 2300 	strd	r2, r3, [r1]
		ee_u32 divisor;
		results[0].iterations=1;
 800e624:	2301      	movs	r3, #1
 800e626:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
		while (secs_passed < (secs_ret)1) {
 800e62a:	e01a      	b.n	800e662 <coremark_main+0x4b2>
			results[0].iterations*=10;
 800e62c:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 800e630:	4613      	mov	r3, r2
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	4413      	add	r3, r2
 800e636:	005b      	lsls	r3, r3, #1
 800e638:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
			start_time();
 800e63c:	f000 feac 	bl	800f398 <start_time>
			iterate(&results[0]);
 800e640:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800e644:	4618      	mov	r0, r3
 800e646:	f7ff fd65 	bl	800e114 <iterate>
			stop_time();
 800e64a:	f000 feb5 	bl	800f3b8 <stop_time>
			secs_passed=time_in_secs(get_time());
 800e64e:	f000 fec3 	bl	800f3d8 <get_time>
 800e652:	4603      	mov	r3, r0
 800e654:	4618      	mov	r0, r3
 800e656:	f000 fed3 	bl	800f400 <time_in_secs>
 800e65a:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800e65e:	ed83 0b00 	vstr	d0, [r3]
		while (secs_passed < (secs_ret)1) {
 800e662:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800e666:	ed93 7b00 	vldr	d7, [r3]
 800e66a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e66e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e676:	d4d9      	bmi.n	800e62c <coremark_main+0x47c>
		}
		/* now we know it executes for at least 1 sec, set actual run time at about 10 secs */
		divisor=(ee_u32)secs_passed;
 800e678:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800e67c:	ed93 7b00 	vldr	d7, [r3]
 800e680:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800e684:	ee17 3a90 	vmov	r3, s15
 800e688:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
		if (divisor==0) /* some machines cast float to int as 0 since this conversion is not defined by ANSI, but we know at least one second passed */
 800e68c:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 800e690:	2b00      	cmp	r3, #0
 800e692:	d102      	bne.n	800e69a <coremark_main+0x4ea>
			divisor=1;
 800e694:	2301      	movs	r3, #1
 800e696:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
		results[0].iterations*=1+10/divisor;
 800e69a:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 800e69e:	210a      	movs	r1, #10
 800e6a0:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 800e6a4:	fbb1 f2f2 	udiv	r2, r1, r2
 800e6a8:	3201      	adds	r2, #1
 800e6aa:	fb02 f303 	mul.w	r3, r2, r3
 800e6ae:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
	}
	/* perform actual benchmark */
	start_time();
 800e6b2:	f000 fe71 	bl	800f398 <start_time>
	}
	for (i=0 ; i<default_num_contexts; i++) {
		core_stop_parallel(&results[i]);
	}
#else
	iterate(&results[0]);
 800e6b6:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7ff fd2a 	bl	800e114 <iterate>
#endif
	stop_time();
 800e6c0:	f000 fe7a 	bl	800f3b8 <stop_time>
	total_time=get_time();
 800e6c4:	f000 fe88 	bl	800f3d8 <get_time>
 800e6c8:	f8c7 081c 	str.w	r0, [r7, #2076]	; 0x81c
	/* get a function of the input to report */
	seedcrc=crc16(results[0].seed1,seedcrc);
 800e6cc:	f9b7 37d0 	ldrsh.w	r3, [r7, #2000]	; 0x7d0
 800e6d0:	f8b7 2822 	ldrh.w	r2, [r7, #2082]	; 0x822
 800e6d4:	4611      	mov	r1, r2
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f001 fa2d 	bl	800fb36 <crc16>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	f8a7 3822 	strh.w	r3, [r7, #2082]	; 0x822
	seedcrc=crc16(results[0].seed2,seedcrc);
 800e6e2:	f9b7 37d2 	ldrsh.w	r3, [r7, #2002]	; 0x7d2
 800e6e6:	f8b7 2822 	ldrh.w	r2, [r7, #2082]	; 0x822
 800e6ea:	4611      	mov	r1, r2
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f001 fa22 	bl	800fb36 <crc16>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	f8a7 3822 	strh.w	r3, [r7, #2082]	; 0x822
	seedcrc=crc16(results[0].seed3,seedcrc);
 800e6f8:	f9b7 37d4 	ldrsh.w	r3, [r7, #2004]	; 0x7d4
 800e6fc:	f8b7 2822 	ldrh.w	r2, [r7, #2082]	; 0x822
 800e700:	4611      	mov	r1, r2
 800e702:	4618      	mov	r0, r3
 800e704:	f001 fa17 	bl	800fb36 <crc16>
 800e708:	4603      	mov	r3, r0
 800e70a:	f8a7 3822 	strh.w	r3, [r7, #2082]	; 0x822
	seedcrc=crc16(results[0].size,seedcrc);
 800e70e:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 800e712:	b21b      	sxth	r3, r3
 800e714:	f8b7 2822 	ldrh.w	r2, [r7, #2082]	; 0x822
 800e718:	4611      	mov	r1, r2
 800e71a:	4618      	mov	r0, r3
 800e71c:	f001 fa0b 	bl	800fb36 <crc16>
 800e720:	4603      	mov	r3, r0
 800e722:	f8a7 3822 	strh.w	r3, [r7, #2082]	; 0x822
	
	switch (seedcrc) { /* test known output for common seeds */
 800e726:	f8b7 3822 	ldrh.w	r3, [r7, #2082]	; 0x822
 800e72a:	f64e 12f5 	movw	r2, #59893	; 0xe9f5
 800e72e:	4293      	cmp	r3, r2
 800e730:	d031      	beq.n	800e796 <coremark_main+0x5e6>
 800e732:	f64e 12f5 	movw	r2, #59893	; 0xe9f5
 800e736:	4293      	cmp	r3, r2
 800e738:	dc3b      	bgt.n	800e7b2 <coremark_main+0x602>
 800e73a:	f648 2202 	movw	r2, #35330	; 0x8a02
 800e73e:	4293      	cmp	r3, r2
 800e740:	d014      	beq.n	800e76c <coremark_main+0x5bc>
 800e742:	f648 2202 	movw	r2, #35330	; 0x8a02
 800e746:	4293      	cmp	r3, r2
 800e748:	dc33      	bgt.n	800e7b2 <coremark_main+0x602>
 800e74a:	f647 3205 	movw	r2, #31493	; 0x7b05
 800e74e:	4293      	cmp	r3, r2
 800e750:	d013      	beq.n	800e77a <coremark_main+0x5ca>
 800e752:	f647 3205 	movw	r2, #31493	; 0x7b05
 800e756:	4293      	cmp	r3, r2
 800e758:	dc2b      	bgt.n	800e7b2 <coremark_main+0x602>
 800e75a:	f641 02f2 	movw	r2, #6386	; 0x18f2
 800e75e:	4293      	cmp	r3, r2
 800e760:	d020      	beq.n	800e7a4 <coremark_main+0x5f4>
 800e762:	f644 62af 	movw	r2, #20143	; 0x4eaf
 800e766:	4293      	cmp	r3, r2
 800e768:	d00e      	beq.n	800e788 <coremark_main+0x5d8>
 800e76a:	e022      	b.n	800e7b2 <coremark_main+0x602>
		case 0x8a02: /* seed1=0, seed2=0, seed3=0x66, size 2000 per algorithm */
			known_id=0;
 800e76c:	2300      	movs	r3, #0
 800e76e:	f8a7 3838 	strh.w	r3, [r7, #2104]	; 0x838
			ee_printf("6k performance run parameters for coremark.\n");
 800e772:	4817      	ldr	r0, [pc, #92]	; (800e7d0 <coremark_main+0x620>)
 800e774:	f004 fb8e 	bl	8012e94 <puts>
			break;
 800e778:	e020      	b.n	800e7bc <coremark_main+0x60c>
		case 0x7b05: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 2000 per algorithm */
			known_id=1;
 800e77a:	2301      	movs	r3, #1
 800e77c:	f8a7 3838 	strh.w	r3, [r7, #2104]	; 0x838
			ee_printf("6k validation run parameters for coremark.\n");
 800e780:	4814      	ldr	r0, [pc, #80]	; (800e7d4 <coremark_main+0x624>)
 800e782:	f004 fb87 	bl	8012e94 <puts>
			break;
 800e786:	e019      	b.n	800e7bc <coremark_main+0x60c>
		case 0x4eaf: /* seed1=0x8, seed2=0x8, seed3=0x8, size 400 per algorithm */
			known_id=2;
 800e788:	2302      	movs	r3, #2
 800e78a:	f8a7 3838 	strh.w	r3, [r7, #2104]	; 0x838
			ee_printf("Profile generation run parameters for coremark.\n");
 800e78e:	4812      	ldr	r0, [pc, #72]	; (800e7d8 <coremark_main+0x628>)
 800e790:	f004 fb80 	bl	8012e94 <puts>
			break;
 800e794:	e012      	b.n	800e7bc <coremark_main+0x60c>
		case 0xe9f5: /* seed1=0, seed2=0, seed3=0x66, size 666 per algorithm */
			known_id=3;
 800e796:	2303      	movs	r3, #3
 800e798:	f8a7 3838 	strh.w	r3, [r7, #2104]	; 0x838
			ee_printf("2K performance run parameters for coremark.\n");
 800e79c:	480f      	ldr	r0, [pc, #60]	; (800e7dc <coremark_main+0x62c>)
 800e79e:	f004 fb79 	bl	8012e94 <puts>
			break;
 800e7a2:	e00b      	b.n	800e7bc <coremark_main+0x60c>
		case 0x18f2: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 666 per algorithm */
			known_id=4;
 800e7a4:	2304      	movs	r3, #4
 800e7a6:	f8a7 3838 	strh.w	r3, [r7, #2104]	; 0x838
			ee_printf("2K validation run parameters for coremark.\n");
 800e7aa:	480d      	ldr	r0, [pc, #52]	; (800e7e0 <coremark_main+0x630>)
 800e7ac:	f004 fb72 	bl	8012e94 <puts>
			break;
 800e7b0:	e004      	b.n	800e7bc <coremark_main+0x60c>
		default:
			total_errors=-1;
 800e7b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e7b6:	f8a7 3836 	strh.w	r3, [r7, #2102]	; 0x836
			break;
 800e7ba:	bf00      	nop
	}
	if (known_id>=0) {
 800e7bc:	f9b7 3838 	ldrsh.w	r3, [r7, #2104]	; 0x838
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	f2c0 8130 	blt.w	800ea26 <coremark_main+0x876>
		for (i=0 ; i<default_num_contexts; i++) {
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800e7cc:	e124      	b.n	800ea18 <coremark_main+0x868>
 800e7ce:	bf00      	nop
 800e7d0:	08015100 	.word	0x08015100
 800e7d4:	0801512c 	.word	0x0801512c
 800e7d8:	08015158 	.word	0x08015158
 800e7dc:	08015188 	.word	0x08015188
 800e7e0:	080151b4 	.word	0x080151b4
			results[i].err=0;
 800e7e4:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e7e8:	4613      	mov	r3, r2
 800e7ea:	011b      	lsls	r3, r3, #4
 800e7ec:	4413      	add	r3, r2
 800e7ee:	009b      	lsls	r3, r3, #2
 800e7f0:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e7f4:	443b      	add	r3, r7
 800e7f6:	3b30      	subs	r3, #48	; 0x30
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	801a      	strh	r2, [r3, #0]
			if ((results[i].execs & ID_LIST) && 
 800e7fc:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e800:	4613      	mov	r3, r2
 800e802:	011b      	lsls	r3, r3, #4
 800e804:	4413      	add	r3, r2
 800e806:	009b      	lsls	r3, r3, #2
 800e808:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e80c:	443b      	add	r3, r7
 800e80e:	3b50      	subs	r3, #80	; 0x50
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f003 0301 	and.w	r3, r3, #1
 800e816:	2b00      	cmp	r3, #0
 800e818:	d042      	beq.n	800e8a0 <coremark_main+0x6f0>
				(results[i].crclist!=list_known_crc[known_id])) {
 800e81a:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e81e:	4613      	mov	r3, r2
 800e820:	011b      	lsls	r3, r3, #4
 800e822:	4413      	add	r3, r2
 800e824:	009b      	lsls	r3, r3, #2
 800e826:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e82a:	443b      	add	r3, r7
 800e82c:	3b36      	subs	r3, #54	; 0x36
 800e82e:	881a      	ldrh	r2, [r3, #0]
 800e830:	f9b7 3838 	ldrsh.w	r3, [r7, #2104]	; 0x838
 800e834:	49ce      	ldr	r1, [pc, #824]	; (800eb70 <coremark_main+0x9c0>)
 800e836:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
			if ((results[i].execs & ID_LIST) && 
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d030      	beq.n	800e8a0 <coremark_main+0x6f0>
				ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",i,results[i].crclist,list_known_crc[known_id]);
 800e83e:	f8b7 183e 	ldrh.w	r1, [r7, #2110]	; 0x83e
 800e842:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e846:	4613      	mov	r3, r2
 800e848:	011b      	lsls	r3, r3, #4
 800e84a:	4413      	add	r3, r2
 800e84c:	009b      	lsls	r3, r3, #2
 800e84e:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e852:	443b      	add	r3, r7
 800e854:	3b36      	subs	r3, #54	; 0x36
 800e856:	881b      	ldrh	r3, [r3, #0]
 800e858:	4618      	mov	r0, r3
 800e85a:	f9b7 3838 	ldrsh.w	r3, [r7, #2104]	; 0x838
 800e85e:	4ac4      	ldr	r2, [pc, #784]	; (800eb70 <coremark_main+0x9c0>)
 800e860:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e864:	4602      	mov	r2, r0
 800e866:	48c3      	ldr	r0, [pc, #780]	; (800eb74 <coremark_main+0x9c4>)
 800e868:	f004 fa78 	bl	8012d5c <iprintf>
				results[i].err++;
 800e86c:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e870:	4613      	mov	r3, r2
 800e872:	011b      	lsls	r3, r3, #4
 800e874:	4413      	add	r3, r2
 800e876:	009b      	lsls	r3, r3, #2
 800e878:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e87c:	443b      	add	r3, r7
 800e87e:	3b30      	subs	r3, #48	; 0x30
 800e880:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e884:	b29b      	uxth	r3, r3
 800e886:	3301      	adds	r3, #1
 800e888:	b29b      	uxth	r3, r3
 800e88a:	b219      	sxth	r1, r3
 800e88c:	4613      	mov	r3, r2
 800e88e:	011b      	lsls	r3, r3, #4
 800e890:	4413      	add	r3, r2
 800e892:	009b      	lsls	r3, r3, #2
 800e894:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e898:	443b      	add	r3, r7
 800e89a:	3b30      	subs	r3, #48	; 0x30
 800e89c:	460a      	mov	r2, r1
 800e89e:	801a      	strh	r2, [r3, #0]
			}
			if ((results[i].execs & ID_MATRIX) &&
 800e8a0:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e8a4:	4613      	mov	r3, r2
 800e8a6:	011b      	lsls	r3, r3, #4
 800e8a8:	4413      	add	r3, r2
 800e8aa:	009b      	lsls	r3, r3, #2
 800e8ac:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e8b0:	443b      	add	r3, r7
 800e8b2:	3b50      	subs	r3, #80	; 0x50
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	f003 0302 	and.w	r3, r3, #2
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d042      	beq.n	800e944 <coremark_main+0x794>
				(results[i].crcmatrix!=matrix_known_crc[known_id])) {
 800e8be:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e8c2:	4613      	mov	r3, r2
 800e8c4:	011b      	lsls	r3, r3, #4
 800e8c6:	4413      	add	r3, r2
 800e8c8:	009b      	lsls	r3, r3, #2
 800e8ca:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e8ce:	443b      	add	r3, r7
 800e8d0:	3b34      	subs	r3, #52	; 0x34
 800e8d2:	881a      	ldrh	r2, [r3, #0]
 800e8d4:	f9b7 3838 	ldrsh.w	r3, [r7, #2104]	; 0x838
 800e8d8:	49a7      	ldr	r1, [pc, #668]	; (800eb78 <coremark_main+0x9c8>)
 800e8da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
			if ((results[i].execs & ID_MATRIX) &&
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d030      	beq.n	800e944 <coremark_main+0x794>
				ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",i,results[i].crcmatrix,matrix_known_crc[known_id]);
 800e8e2:	f8b7 183e 	ldrh.w	r1, [r7, #2110]	; 0x83e
 800e8e6:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e8ea:	4613      	mov	r3, r2
 800e8ec:	011b      	lsls	r3, r3, #4
 800e8ee:	4413      	add	r3, r2
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e8f6:	443b      	add	r3, r7
 800e8f8:	3b34      	subs	r3, #52	; 0x34
 800e8fa:	881b      	ldrh	r3, [r3, #0]
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f9b7 3838 	ldrsh.w	r3, [r7, #2104]	; 0x838
 800e902:	4a9d      	ldr	r2, [pc, #628]	; (800eb78 <coremark_main+0x9c8>)
 800e904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e908:	4602      	mov	r2, r0
 800e90a:	489c      	ldr	r0, [pc, #624]	; (800eb7c <coremark_main+0x9cc>)
 800e90c:	f004 fa26 	bl	8012d5c <iprintf>
				results[i].err++;
 800e910:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e914:	4613      	mov	r3, r2
 800e916:	011b      	lsls	r3, r3, #4
 800e918:	4413      	add	r3, r2
 800e91a:	009b      	lsls	r3, r3, #2
 800e91c:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e920:	443b      	add	r3, r7
 800e922:	3b30      	subs	r3, #48	; 0x30
 800e924:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e928:	b29b      	uxth	r3, r3
 800e92a:	3301      	adds	r3, #1
 800e92c:	b29b      	uxth	r3, r3
 800e92e:	b219      	sxth	r1, r3
 800e930:	4613      	mov	r3, r2
 800e932:	011b      	lsls	r3, r3, #4
 800e934:	4413      	add	r3, r2
 800e936:	009b      	lsls	r3, r3, #2
 800e938:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e93c:	443b      	add	r3, r7
 800e93e:	3b30      	subs	r3, #48	; 0x30
 800e940:	460a      	mov	r2, r1
 800e942:	801a      	strh	r2, [r3, #0]
			}
			if ((results[i].execs & ID_STATE) &&
 800e944:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e948:	4613      	mov	r3, r2
 800e94a:	011b      	lsls	r3, r3, #4
 800e94c:	4413      	add	r3, r2
 800e94e:	009b      	lsls	r3, r3, #2
 800e950:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e954:	443b      	add	r3, r7
 800e956:	3b50      	subs	r3, #80	; 0x50
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	f003 0304 	and.w	r3, r3, #4
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d042      	beq.n	800e9e8 <coremark_main+0x838>
				(results[i].crcstate!=state_known_crc[known_id])) {
 800e962:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e966:	4613      	mov	r3, r2
 800e968:	011b      	lsls	r3, r3, #4
 800e96a:	4413      	add	r3, r2
 800e96c:	009b      	lsls	r3, r3, #2
 800e96e:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e972:	443b      	add	r3, r7
 800e974:	3b32      	subs	r3, #50	; 0x32
 800e976:	881a      	ldrh	r2, [r3, #0]
 800e978:	f9b7 3838 	ldrsh.w	r3, [r7, #2104]	; 0x838
 800e97c:	4980      	ldr	r1, [pc, #512]	; (800eb80 <coremark_main+0x9d0>)
 800e97e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
			if ((results[i].execs & ID_STATE) &&
 800e982:	429a      	cmp	r2, r3
 800e984:	d030      	beq.n	800e9e8 <coremark_main+0x838>
				ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",i,results[i].crcstate,state_known_crc[known_id]);
 800e986:	f8b7 183e 	ldrh.w	r1, [r7, #2110]	; 0x83e
 800e98a:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e98e:	4613      	mov	r3, r2
 800e990:	011b      	lsls	r3, r3, #4
 800e992:	4413      	add	r3, r2
 800e994:	009b      	lsls	r3, r3, #2
 800e996:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e99a:	443b      	add	r3, r7
 800e99c:	3b32      	subs	r3, #50	; 0x32
 800e99e:	881b      	ldrh	r3, [r3, #0]
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f9b7 3838 	ldrsh.w	r3, [r7, #2104]	; 0x838
 800e9a6:	4a76      	ldr	r2, [pc, #472]	; (800eb80 <coremark_main+0x9d0>)
 800e9a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e9ac:	4602      	mov	r2, r0
 800e9ae:	4875      	ldr	r0, [pc, #468]	; (800eb84 <coremark_main+0x9d4>)
 800e9b0:	f004 f9d4 	bl	8012d5c <iprintf>
				results[i].err++;
 800e9b4:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e9b8:	4613      	mov	r3, r2
 800e9ba:	011b      	lsls	r3, r3, #4
 800e9bc:	4413      	add	r3, r2
 800e9be:	009b      	lsls	r3, r3, #2
 800e9c0:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e9c4:	443b      	add	r3, r7
 800e9c6:	3b30      	subs	r3, #48	; 0x30
 800e9c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e9cc:	b29b      	uxth	r3, r3
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	b29b      	uxth	r3, r3
 800e9d2:	b219      	sxth	r1, r3
 800e9d4:	4613      	mov	r3, r2
 800e9d6:	011b      	lsls	r3, r3, #4
 800e9d8:	4413      	add	r3, r2
 800e9da:	009b      	lsls	r3, r3, #2
 800e9dc:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e9e0:	443b      	add	r3, r7
 800e9e2:	3b30      	subs	r3, #48	; 0x30
 800e9e4:	460a      	mov	r2, r1
 800e9e6:	801a      	strh	r2, [r3, #0]
			}
			total_errors+=results[i].err;
 800e9e8:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800e9ec:	4613      	mov	r3, r2
 800e9ee:	011b      	lsls	r3, r3, #4
 800e9f0:	4413      	add	r3, r2
 800e9f2:	009b      	lsls	r3, r3, #2
 800e9f4:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800e9f8:	443b      	add	r3, r7
 800e9fa:	3b30      	subs	r3, #48	; 0x30
 800e9fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea00:	b29a      	uxth	r2, r3
 800ea02:	f8b7 3836 	ldrh.w	r3, [r7, #2102]	; 0x836
 800ea06:	4413      	add	r3, r2
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	f8a7 3836 	strh.w	r3, [r7, #2102]	; 0x836
		for (i=0 ; i<default_num_contexts; i++) {
 800ea0e:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800ea12:	3301      	adds	r3, #1
 800ea14:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800ea18:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800ea1c:	4b5a      	ldr	r3, [pc, #360]	; (800eb88 <coremark_main+0x9d8>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	429a      	cmp	r2, r3
 800ea22:	f4ff aedf 	bcc.w	800e7e4 <coremark_main+0x634>
		}
	}
	total_errors+=check_data_types();
 800ea26:	f001 f899 	bl	800fb5c <check_data_types>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	b29a      	uxth	r2, r3
 800ea2e:	f8b7 3836 	ldrh.w	r3, [r7, #2102]	; 0x836
 800ea32:	4413      	add	r3, r2
 800ea34:	b29b      	uxth	r3, r3
 800ea36:	f8a7 3836 	strh.w	r3, [r7, #2102]	; 0x836
	/* and report results */
	ee_printf("CoreMark Size    : %u\n",(ee_u32)results[0].size);
 800ea3a:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 800ea3e:	4619      	mov	r1, r3
 800ea40:	4852      	ldr	r0, [pc, #328]	; (800eb8c <coremark_main+0x9dc>)
 800ea42:	f004 f98b 	bl	8012d5c <iprintf>
	ee_printf("Total ticks      : %u\n",(ee_u32)total_time);
 800ea46:	f8d7 181c 	ldr.w	r1, [r7, #2076]	; 0x81c
 800ea4a:	4851      	ldr	r0, [pc, #324]	; (800eb90 <coremark_main+0x9e0>)
 800ea4c:	f004 f986 	bl	8012d5c <iprintf>
#if HAS_FLOAT
	ee_printf("Total time (secs): %f\n",time_in_secs(total_time));
 800ea50:	f8d7 081c 	ldr.w	r0, [r7, #2076]	; 0x81c
 800ea54:	f000 fcd4 	bl	800f400 <time_in_secs>
 800ea58:	ec53 2b10 	vmov	r2, r3, d0
 800ea5c:	484d      	ldr	r0, [pc, #308]	; (800eb94 <coremark_main+0x9e4>)
 800ea5e:	f004 f97d 	bl	8012d5c <iprintf>
	if (time_in_secs(total_time) > 0)
 800ea62:	f8d7 081c 	ldr.w	r0, [r7, #2076]	; 0x81c
 800ea66:	f000 fccb 	bl	800f400 <time_in_secs>
 800ea6a:	eeb0 7b40 	vmov.f64	d7, d0
 800ea6e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ea72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea76:	dd16      	ble.n	800eaa6 <coremark_main+0x8f6>
		ee_printf("Iterations/Sec   : %f\n",default_num_contexts*results[0].iterations/time_in_secs(total_time));
 800ea78:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 800ea7c:	4a42      	ldr	r2, [pc, #264]	; (800eb88 <coremark_main+0x9d8>)
 800ea7e:	6812      	ldr	r2, [r2, #0]
 800ea80:	fb02 f303 	mul.w	r3, r2, r3
 800ea84:	ee07 3a90 	vmov	s15, r3
 800ea88:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800ea8c:	f8d7 081c 	ldr.w	r0, [r7, #2076]	; 0x81c
 800ea90:	f000 fcb6 	bl	800f400 <time_in_secs>
 800ea94:	eeb0 7b40 	vmov.f64	d7, d0
 800ea98:	ee88 6b07 	vdiv.f64	d6, d8, d7
 800ea9c:	ec53 2b16 	vmov	r2, r3, d6
 800eaa0:	483d      	ldr	r0, [pc, #244]	; (800eb98 <coremark_main+0x9e8>)
 800eaa2:	f004 f95b 	bl	8012d5c <iprintf>
#else 
	ee_printf("Total time (secs): %d\n",time_in_secs(total_time));
	if (time_in_secs(total_time) > 0)
		ee_printf("Iterations/Sec   : %d\n",default_num_contexts*results[0].iterations/time_in_secs(total_time));
#endif
	if (time_in_secs(total_time) < 10) {
 800eaa6:	f8d7 081c 	ldr.w	r0, [r7, #2076]	; 0x81c
 800eaaa:	f000 fca9 	bl	800f400 <time_in_secs>
 800eaae:	eeb0 7b40 	vmov.f64	d7, d0
 800eab2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800eab6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800eaba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eabe:	d509      	bpl.n	800ead4 <coremark_main+0x924>
		ee_printf("ERROR! Must execute for at least 10 secs for a valid result!\n");
 800eac0:	4836      	ldr	r0, [pc, #216]	; (800eb9c <coremark_main+0x9ec>)
 800eac2:	f004 f9e7 	bl	8012e94 <puts>
		total_errors++;
 800eac6:	f9b7 3836 	ldrsh.w	r3, [r7, #2102]	; 0x836
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	3301      	adds	r3, #1
 800eace:	b29b      	uxth	r3, r3
 800ead0:	f8a7 3836 	strh.w	r3, [r7, #2102]	; 0x836
	}

	ee_printf("Iterations       : %u\n",(ee_u32)default_num_contexts*results[0].iterations);
 800ead4:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 800ead8:	4a2b      	ldr	r2, [pc, #172]	; (800eb88 <coremark_main+0x9d8>)
 800eada:	6812      	ldr	r2, [r2, #0]
 800eadc:	fb02 f303 	mul.w	r3, r2, r3
 800eae0:	4619      	mov	r1, r3
 800eae2:	482f      	ldr	r0, [pc, #188]	; (800eba0 <coremark_main+0x9f0>)
 800eae4:	f004 f93a 	bl	8012d5c <iprintf>
#if defined(__GNUC__) && defined (__ARMCC_VERSION)
	ee_printf("Compiler version : Keil ver%d\n",__ARMCC_VERSION);
#elif defined(__CC_ARM)
	ee_printf("Compiler version : Keil ver%d\n",__ARMCC_VERSION);
#elif defined(__GNUC__)
	ee_printf("Compiler version : GCC ver%d.%d.%d\n",__GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__);
 800eae8:	2301      	movs	r3, #1
 800eaea:	2203      	movs	r2, #3
 800eaec:	210a      	movs	r1, #10
 800eaee:	482d      	ldr	r0, [pc, #180]	; (800eba4 <coremark_main+0x9f4>)
 800eaf0:	f004 f934 	bl	8012d5c <iprintf>
#elif defined(__ICCARM__)
	//ee_printf("Compiler version : IAR %d\n",__VER__);
	ee_printf("Compiler version : IAR ver%d\n",__IAR_SYSTEMS_ICC__);
#endif
	ee_printf("Compiler flags   : %s\n",COMPILER_FLAGS);
 800eaf4:	492c      	ldr	r1, [pc, #176]	; (800eba8 <coremark_main+0x9f8>)
 800eaf6:	482d      	ldr	r0, [pc, #180]	; (800ebac <coremark_main+0x9fc>)
 800eaf8:	f004 f930 	bl	8012d5c <iprintf>
#if (MULTITHREAD>1)
	ee_printf("Parallel %s : %d\n",PARALLEL_METHOD,default_num_contexts);
#endif
	ee_printf("Memory location  : %s\n",MEM_LOCATION);
 800eafc:	492c      	ldr	r1, [pc, #176]	; (800ebb0 <coremark_main+0xa00>)
 800eafe:	482d      	ldr	r0, [pc, #180]	; (800ebb4 <coremark_main+0xa04>)
 800eb00:	f004 f92c 	bl	8012d5c <iprintf>
	/* output for verification */
	ee_printf("seedcrc          : 0x%04x\n",seedcrc);
 800eb04:	f8b7 3822 	ldrh.w	r3, [r7, #2082]	; 0x822
 800eb08:	4619      	mov	r1, r3
 800eb0a:	482b      	ldr	r0, [pc, #172]	; (800ebb8 <coremark_main+0xa08>)
 800eb0c:	f004 f926 	bl	8012d5c <iprintf>
	if (results[0].execs & ID_LIST)
 800eb10:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 800eb14:	f003 0301 	and.w	r3, r3, #1
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d01f      	beq.n	800eb5c <coremark_main+0x9ac>
		for (i=0 ; i<default_num_contexts; i++) 
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800eb22:	e015      	b.n	800eb50 <coremark_main+0x9a0>
			ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
 800eb24:	f8b7 183e 	ldrh.w	r1, [r7, #2110]	; 0x83e
 800eb28:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800eb2c:	4613      	mov	r3, r2
 800eb2e:	011b      	lsls	r3, r3, #4
 800eb30:	4413      	add	r3, r2
 800eb32:	009b      	lsls	r3, r3, #2
 800eb34:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800eb38:	443b      	add	r3, r7
 800eb3a:	3b36      	subs	r3, #54	; 0x36
 800eb3c:	881b      	ldrh	r3, [r3, #0]
 800eb3e:	461a      	mov	r2, r3
 800eb40:	481e      	ldr	r0, [pc, #120]	; (800ebbc <coremark_main+0xa0c>)
 800eb42:	f004 f90b 	bl	8012d5c <iprintf>
		for (i=0 ; i<default_num_contexts; i++) 
 800eb46:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800eb50:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800eb54:	4b0c      	ldr	r3, [pc, #48]	; (800eb88 <coremark_main+0x9d8>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d3e3      	bcc.n	800eb24 <coremark_main+0x974>
	if (results[0].execs & ID_MATRIX) 
 800eb5c:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 800eb60:	f003 0302 	and.w	r3, r3, #2
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d047      	beq.n	800ebf8 <coremark_main+0xa48>
		for (i=0 ; i<default_num_contexts; i++) 
 800eb68:	2300      	movs	r3, #0
 800eb6a:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800eb6e:	e03d      	b.n	800ebec <coremark_main+0xa3c>
 800eb70:	2400007c 	.word	0x2400007c
 800eb74:	080151e0 	.word	0x080151e0
 800eb78:	24000088 	.word	0x24000088
 800eb7c:	08015210 	.word	0x08015210
 800eb80:	24000094 	.word	0x24000094
 800eb84:	08015244 	.word	0x08015244
 800eb88:	240000a8 	.word	0x240000a8
 800eb8c:	08015274 	.word	0x08015274
 800eb90:	0801528c 	.word	0x0801528c
 800eb94:	080152a4 	.word	0x080152a4
 800eb98:	080152bc 	.word	0x080152bc
 800eb9c:	080152d4 	.word	0x080152d4
 800eba0:	08015314 	.word	0x08015314
 800eba4:	0801532c 	.word	0x0801532c
 800eba8:	08015350 	.word	0x08015350
 800ebac:	08015354 	.word	0x08015354
 800ebb0:	0801536c 	.word	0x0801536c
 800ebb4:	08015374 	.word	0x08015374
 800ebb8:	0801538c 	.word	0x0801538c
 800ebbc:	080153a8 	.word	0x080153a8
			ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
 800ebc0:	f8b7 183e 	ldrh.w	r1, [r7, #2110]	; 0x83e
 800ebc4:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800ebc8:	4613      	mov	r3, r2
 800ebca:	011b      	lsls	r3, r3, #4
 800ebcc:	4413      	add	r3, r2
 800ebce:	009b      	lsls	r3, r3, #2
 800ebd0:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800ebd4:	443b      	add	r3, r7
 800ebd6:	3b34      	subs	r3, #52	; 0x34
 800ebd8:	881b      	ldrh	r3, [r3, #0]
 800ebda:	461a      	mov	r2, r3
 800ebdc:	484f      	ldr	r0, [pc, #316]	; (800ed1c <coremark_main+0xb6c>)
 800ebde:	f004 f8bd 	bl	8012d5c <iprintf>
		for (i=0 ; i<default_num_contexts; i++) 
 800ebe2:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800ebe6:	3301      	adds	r3, #1
 800ebe8:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800ebec:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800ebf0:	4b4b      	ldr	r3, [pc, #300]	; (800ed20 <coremark_main+0xb70>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d3e3      	bcc.n	800ebc0 <coremark_main+0xa10>
	if (results[0].execs & ID_STATE)
 800ebf8:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 800ebfc:	f003 0304 	and.w	r3, r3, #4
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d01f      	beq.n	800ec44 <coremark_main+0xa94>
		for (i=0 ; i<default_num_contexts; i++) 
 800ec04:	2300      	movs	r3, #0
 800ec06:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800ec0a:	e015      	b.n	800ec38 <coremark_main+0xa88>
			ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
 800ec0c:	f8b7 183e 	ldrh.w	r1, [r7, #2110]	; 0x83e
 800ec10:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800ec14:	4613      	mov	r3, r2
 800ec16:	011b      	lsls	r3, r3, #4
 800ec18:	4413      	add	r3, r2
 800ec1a:	009b      	lsls	r3, r3, #2
 800ec1c:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800ec20:	443b      	add	r3, r7
 800ec22:	3b32      	subs	r3, #50	; 0x32
 800ec24:	881b      	ldrh	r3, [r3, #0]
 800ec26:	461a      	mov	r2, r3
 800ec28:	483e      	ldr	r0, [pc, #248]	; (800ed24 <coremark_main+0xb74>)
 800ec2a:	f004 f897 	bl	8012d5c <iprintf>
		for (i=0 ; i<default_num_contexts; i++) 
 800ec2e:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800ec32:	3301      	adds	r3, #1
 800ec34:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800ec38:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800ec3c:	4b38      	ldr	r3, [pc, #224]	; (800ed20 <coremark_main+0xb70>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d3e3      	bcc.n	800ec0c <coremark_main+0xa5c>
	for (i=0 ; i<default_num_contexts; i++) 
 800ec44:	2300      	movs	r3, #0
 800ec46:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800ec4a:	e015      	b.n	800ec78 <coremark_main+0xac8>
		ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
 800ec4c:	f8b7 183e 	ldrh.w	r1, [r7, #2110]	; 0x83e
 800ec50:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800ec54:	4613      	mov	r3, r2
 800ec56:	011b      	lsls	r3, r3, #4
 800ec58:	4413      	add	r3, r2
 800ec5a:	009b      	lsls	r3, r3, #2
 800ec5c:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 800ec60:	443b      	add	r3, r7
 800ec62:	3b38      	subs	r3, #56	; 0x38
 800ec64:	881b      	ldrh	r3, [r3, #0]
 800ec66:	461a      	mov	r2, r3
 800ec68:	482f      	ldr	r0, [pc, #188]	; (800ed28 <coremark_main+0xb78>)
 800ec6a:	f004 f877 	bl	8012d5c <iprintf>
	for (i=0 ; i<default_num_contexts; i++) 
 800ec6e:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 800ec72:	3301      	adds	r3, #1
 800ec74:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
 800ec78:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 800ec7c:	4b28      	ldr	r3, [pc, #160]	; (800ed20 <coremark_main+0xb70>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d3e3      	bcc.n	800ec4c <coremark_main+0xa9c>
	if (total_errors==0) {
 800ec84:	f9b7 3836 	ldrsh.w	r3, [r7, #2102]	; 0x836
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d12a      	bne.n	800ece2 <coremark_main+0xb32>
		ee_printf("Correct operation validated. See readme.txt for run and reporting rules.\n");
 800ec8c:	4827      	ldr	r0, [pc, #156]	; (800ed2c <coremark_main+0xb7c>)
 800ec8e:	f004 f901 	bl	8012e94 <puts>
#if HAS_FLOAT
		if (known_id==3) {
 800ec92:	f9b7 3838 	ldrsh.w	r3, [r7, #2104]	; 0x838
 800ec96:	2b03      	cmp	r3, #3
 800ec98:	d123      	bne.n	800ece2 <coremark_main+0xb32>
#if defined(__GNUC__) && defined (__ARMCC_VERSION)
			ee_printf("CoreMark 1.0 : %f / Keil ver%d",default_num_contexts*results[0].iterations/time_in_secs(total_time), __ARMCC_VERSION);
#elif defined(__CC_ARM)
			ee_printf("CoreMark 1.0 : %f / Keil ver%d",default_num_contexts*results[0].iterations/time_in_secs(total_time), __ARMCC_VERSION);
#elif defined(__GNUC__)
			ee_printf("CoreMark 1.0 : %f / GCC ver%d.%d.%d",default_num_contexts*results[0].iterations/time_in_secs(total_time), __GNUC__,__GNUC_MINOR__,  __GNUC_PATCHLEVEL__);
 800ec9a:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 800ec9e:	4a20      	ldr	r2, [pc, #128]	; (800ed20 <coremark_main+0xb70>)
 800eca0:	6812      	ldr	r2, [r2, #0]
 800eca2:	fb02 f303 	mul.w	r3, r2, r3
 800eca6:	ee07 3a90 	vmov	s15, r3
 800ecaa:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800ecae:	f8d7 081c 	ldr.w	r0, [r7, #2076]	; 0x81c
 800ecb2:	f000 fba5 	bl	800f400 <time_in_secs>
 800ecb6:	eeb0 7b40 	vmov.f64	d7, d0
 800ecba:	ee88 6b07 	vdiv.f64	d6, d8, d7
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	9302      	str	r3, [sp, #8]
 800ecc2:	2303      	movs	r3, #3
 800ecc4:	9301      	str	r3, [sp, #4]
 800ecc6:	230a      	movs	r3, #10
 800ecc8:	9300      	str	r3, [sp, #0]
 800ecca:	ec53 2b16 	vmov	r2, r3, d6
 800ecce:	4818      	ldr	r0, [pc, #96]	; (800ed30 <coremark_main+0xb80>)
 800ecd0:	f004 f844 	bl	8012d5c <iprintf>
#elif defined(__ICCARM__)
			ee_printf("CoreMark 1.0 : %f / IAR ver%d",default_num_contexts*results[0].iterations/time_in_secs(total_time), __IAR_SYSTEMS_ICC__);
#endif

#if defined(MEM_LOCATION) && !defined(MEM_LOCATION_UNSPEC)
			ee_printf(" / %s",MEM_LOCATION);
 800ecd4:	4917      	ldr	r1, [pc, #92]	; (800ed34 <coremark_main+0xb84>)
 800ecd6:	4818      	ldr	r0, [pc, #96]	; (800ed38 <coremark_main+0xb88>)
 800ecd8:	f004 f840 	bl	8012d5c <iprintf>
#endif

#if (MULTITHREAD>1)
			ee_printf(" / %d:%s",default_num_contexts,PARALLEL_METHOD);
#endif
			ee_printf("\n");
 800ecdc:	200a      	movs	r0, #10
 800ecde:	f004 f855 	bl	8012d8c <putchar>
		}
#endif
	}
	if (total_errors>0)
 800ece2:	f9b7 3836 	ldrsh.w	r3, [r7, #2102]	; 0x836
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	dd02      	ble.n	800ecf0 <coremark_main+0xb40>
		ee_printf("Errors detected\n");
 800ecea:	4814      	ldr	r0, [pc, #80]	; (800ed3c <coremark_main+0xb8c>)
 800ecec:	f004 f8d2 	bl	8012e94 <puts>
	if (total_errors<0)
 800ecf0:	f9b7 3836 	ldrsh.w	r3, [r7, #2102]	; 0x836
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	da02      	bge.n	800ecfe <coremark_main+0xb4e>
		ee_printf("Cannot validate operation for these seed values, please compare with results on a known platform.\n");
 800ecf8:	4811      	ldr	r0, [pc, #68]	; (800ed40 <coremark_main+0xb90>)
 800ecfa:	f004 f8cb 	bl	8012e94 <puts>
#if (MEM_METHOD==MEM_MALLOC)
	for (i=0 ; i<MULTITHREAD; i++) 
		portable_free(results[i].memblock[0]);
#endif
	/* And last call any target specific code for finalizing */
	portable_fini(&(results[0].port));
 800ecfe:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800ed02:	3342      	adds	r3, #66	; 0x42
 800ed04:	4618      	mov	r0, r3
 800ed06:	f000 fbaa 	bl	800f45e <portable_fini>

	return MAIN_RETURN_VAL;	
 800ed0a:	2300      	movs	r3, #0
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f507 6704 	add.w	r7, r7, #2112	; 0x840
 800ed12:	46bd      	mov	sp, r7
 800ed14:	ecbd 8b02 	vpop	{d8}
 800ed18:	bdb0      	pop	{r4, r5, r7, pc}
 800ed1a:	bf00      	nop
 800ed1c:	080153c4 	.word	0x080153c4
 800ed20:	240000a8 	.word	0x240000a8
 800ed24:	080153e0 	.word	0x080153e0
 800ed28:	080153fc 	.word	0x080153fc
 800ed2c:	08015418 	.word	0x08015418
 800ed30:	08015464 	.word	0x08015464
 800ed34:	0801536c 	.word	0x0801536c
 800ed38:	08015488 	.word	0x08015488
 800ed3c:	08015490 	.word	0x08015490
 800ed40:	080154a0 	.word	0x080154a0

0800ed44 <core_bench_matrix>:
	Benchmark function

	Iterate <matrix_test> N times, 
	changing the matrix values slightly by a constant amount each time.
*/
ee_u16 core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc) {
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b08a      	sub	sp, #40	; 0x28
 800ed48:	af02      	add	r7, sp, #8
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	460b      	mov	r3, r1
 800ed4e:	807b      	strh	r3, [r7, #2]
 800ed50:	4613      	mov	r3, r2
 800ed52:	803b      	strh	r3, [r7, #0]
	ee_u32 N=p->N;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	61fb      	str	r3, [r7, #28]
	MATRES *C=p->C;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	68db      	ldr	r3, [r3, #12]
 800ed5e:	61bb      	str	r3, [r7, #24]
	MATDAT *A=p->A;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	685b      	ldr	r3, [r3, #4]
 800ed64:	617b      	str	r3, [r7, #20]
	MATDAT *B=p->B;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	689b      	ldr	r3, [r3, #8]
 800ed6a:	613b      	str	r3, [r7, #16]
	MATDAT val=(MATDAT)seed;
 800ed6c:	887b      	ldrh	r3, [r7, #2]
 800ed6e:	81fb      	strh	r3, [r7, #14]

	crc=crc16(matrix_test(N,C,A,B,val),crc);
 800ed70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ed74:	9300      	str	r3, [sp, #0]
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	697a      	ldr	r2, [r7, #20]
 800ed7a:	69b9      	ldr	r1, [r7, #24]
 800ed7c:	69f8      	ldr	r0, [r7, #28]
 800ed7e:	f000 f80e 	bl	800ed9e <matrix_test>
 800ed82:	4603      	mov	r3, r0
 800ed84:	461a      	mov	r2, r3
 800ed86:	883b      	ldrh	r3, [r7, #0]
 800ed88:	4619      	mov	r1, r3
 800ed8a:	4610      	mov	r0, r2
 800ed8c:	f000 fed3 	bl	800fb36 <crc16>
 800ed90:	4603      	mov	r3, r0
 800ed92:	803b      	strh	r3, [r7, #0]

	return crc;
 800ed94:	883b      	ldrh	r3, [r7, #0]
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3720      	adds	r7, #32
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}

0800ed9e <matrix_test>:
	4 - Multiply a matrix by a matrix.
	5 - Add a constant value to all elements of a matrix.

	After the last step, matrix A is back to original contents.
*/
ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
 800ed9e:	b580      	push	{r7, lr}
 800eda0:	b086      	sub	sp, #24
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	60f8      	str	r0, [r7, #12]
 800eda6:	60b9      	str	r1, [r7, #8]
 800eda8:	607a      	str	r2, [r7, #4]
 800edaa:	603b      	str	r3, [r7, #0]
	ee_u16 crc=0;
 800edac:	2300      	movs	r3, #0
 800edae:	82fb      	strh	r3, [r7, #22]
	MATDAT clipval=matrix_big(val);
 800edb0:	8c3b      	ldrh	r3, [r7, #32]
 800edb2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800edb6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800edba:	82bb      	strh	r3, [r7, #20]

	matrix_add_const(N,A,val); /* make sure data changes  */
 800edbc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800edc0:	461a      	mov	r2, r3
 800edc2:	6879      	ldr	r1, [r7, #4]
 800edc4:	68f8      	ldr	r0, [r7, #12]
 800edc6:	f000 f98d 	bl	800f0e4 <matrix_add_const>
#if CORE_DEBUG
	printmat(A,N,"matrix_add_const");
#endif
	matrix_mul_const(N,C,A,val);
 800edca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800edce:	687a      	ldr	r2, [r7, #4]
 800edd0:	68b9      	ldr	r1, [r7, #8]
 800edd2:	68f8      	ldr	r0, [r7, #12]
 800edd4:	f000 f94a 	bl	800f06c <matrix_mul_const>
	crc=crc16(matrix_sum(N,C,clipval),crc);
 800edd8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800eddc:	461a      	mov	r2, r3
 800edde:	68b9      	ldr	r1, [r7, #8]
 800ede0:	68f8      	ldr	r0, [r7, #12]
 800ede2:	f000 f8ef 	bl	800efc4 <matrix_sum>
 800ede6:	4603      	mov	r3, r0
 800ede8:	461a      	mov	r2, r3
 800edea:	8afb      	ldrh	r3, [r7, #22]
 800edec:	4619      	mov	r1, r3
 800edee:	4610      	mov	r0, r2
 800edf0:	f000 fea1 	bl	800fb36 <crc16>
 800edf4:	4603      	mov	r3, r0
 800edf6:	82fb      	strh	r3, [r7, #22]
#if CORE_DEBUG
	printmatC(C,N,"matrix_mul_const");
#endif
	matrix_mul_vect(N,C,A,B);
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	687a      	ldr	r2, [r7, #4]
 800edfc:	68b9      	ldr	r1, [r7, #8]
 800edfe:	68f8      	ldr	r0, [r7, #12]
 800ee00:	f000 f9ac 	bl	800f15c <matrix_mul_vect>
	crc=crc16(matrix_sum(N,C,clipval),crc);
 800ee04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ee08:	461a      	mov	r2, r3
 800ee0a:	68b9      	ldr	r1, [r7, #8]
 800ee0c:	68f8      	ldr	r0, [r7, #12]
 800ee0e:	f000 f8d9 	bl	800efc4 <matrix_sum>
 800ee12:	4603      	mov	r3, r0
 800ee14:	461a      	mov	r2, r3
 800ee16:	8afb      	ldrh	r3, [r7, #22]
 800ee18:	4619      	mov	r1, r3
 800ee1a:	4610      	mov	r0, r2
 800ee1c:	f000 fe8b 	bl	800fb36 <crc16>
 800ee20:	4603      	mov	r3, r0
 800ee22:	82fb      	strh	r3, [r7, #22]
#if CORE_DEBUG
	printmatC(C,N,"matrix_mul_vect");
#endif
	matrix_mul_matrix(N,C,A,B);
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	687a      	ldr	r2, [r7, #4]
 800ee28:	68b9      	ldr	r1, [r7, #8]
 800ee2a:	68f8      	ldr	r0, [r7, #12]
 800ee2c:	f000 f9dd 	bl	800f1ea <matrix_mul_matrix>
	crc=crc16(matrix_sum(N,C,clipval),crc);
 800ee30:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ee34:	461a      	mov	r2, r3
 800ee36:	68b9      	ldr	r1, [r7, #8]
 800ee38:	68f8      	ldr	r0, [r7, #12]
 800ee3a:	f000 f8c3 	bl	800efc4 <matrix_sum>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	461a      	mov	r2, r3
 800ee42:	8afb      	ldrh	r3, [r7, #22]
 800ee44:	4619      	mov	r1, r3
 800ee46:	4610      	mov	r0, r2
 800ee48:	f000 fe75 	bl	800fb36 <crc16>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	82fb      	strh	r3, [r7, #22]
#if CORE_DEBUG
	printmatC(C,N,"matrix_mul_matrix");
#endif
	matrix_mul_matrix_bitextract(N,C,A,B);
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	687a      	ldr	r2, [r7, #4]
 800ee54:	68b9      	ldr	r1, [r7, #8]
 800ee56:	68f8      	ldr	r0, [r7, #12]
 800ee58:	f000 fa2c 	bl	800f2b4 <matrix_mul_matrix_bitextract>
	crc=crc16(matrix_sum(N,C,clipval),crc);
 800ee5c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ee60:	461a      	mov	r2, r3
 800ee62:	68b9      	ldr	r1, [r7, #8]
 800ee64:	68f8      	ldr	r0, [r7, #12]
 800ee66:	f000 f8ad 	bl	800efc4 <matrix_sum>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	8afb      	ldrh	r3, [r7, #22]
 800ee70:	4619      	mov	r1, r3
 800ee72:	4610      	mov	r0, r2
 800ee74:	f000 fe5f 	bl	800fb36 <crc16>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	82fb      	strh	r3, [r7, #22]
#if CORE_DEBUG
	printmatC(C,N,"matrix_mul_matrix_bitextract");
#endif
	
	matrix_add_const(N,A,-val); /* return matrix to initial value */
 800ee7c:	8c3b      	ldrh	r3, [r7, #32]
 800ee7e:	425b      	negs	r3, r3
 800ee80:	b29b      	uxth	r3, r3
 800ee82:	b21b      	sxth	r3, r3
 800ee84:	461a      	mov	r2, r3
 800ee86:	6879      	ldr	r1, [r7, #4]
 800ee88:	68f8      	ldr	r0, [r7, #12]
 800ee8a:	f000 f92b 	bl	800f0e4 <matrix_add_const>
	return crc;
 800ee8e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3718      	adds	r7, #24
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}

0800ee9a <core_init_matrix>:
	Matrix dimensions.
	
	Note:
	The seed parameter MUST be supplied from a source that cannot be determined at compile time
*/
ee_u32 core_init_matrix(ee_u32 blksize, void *memblk, ee_s32 seed, mat_params *p) {
 800ee9a:	b480      	push	{r7}
 800ee9c:	b08d      	sub	sp, #52	; 0x34
 800ee9e:	af00      	add	r7, sp, #0
 800eea0:	60f8      	str	r0, [r7, #12]
 800eea2:	60b9      	str	r1, [r7, #8]
 800eea4:	607a      	str	r2, [r7, #4]
 800eea6:	603b      	str	r3, [r7, #0]
	ee_u32 N=0;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	623b      	str	r3, [r7, #32]
	MATDAT *A;
	MATDAT *B;
	ee_s32 order=1;
 800eeac:	2301      	movs	r3, #1
 800eeae:	62fb      	str	r3, [r7, #44]	; 0x2c
	MATDAT val;
	ee_u32 i=0,j=0;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	62bb      	str	r3, [r7, #40]	; 0x28
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	627b      	str	r3, [r7, #36]	; 0x24
	if (seed==0)
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d10a      	bne.n	800eed4 <core_init_matrix+0x3a>
		seed=1;
 800eebe:	2301      	movs	r3, #1
 800eec0:	607b      	str	r3, [r7, #4]
	while (j<blksize) {
 800eec2:	e007      	b.n	800eed4 <core_init_matrix+0x3a>
		i++;
 800eec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec6:	3301      	adds	r3, #1
 800eec8:	62bb      	str	r3, [r7, #40]	; 0x28
		j=i*i*2*4;		
 800eeca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eecc:	fb03 f303 	mul.w	r3, r3, r3
 800eed0:	00db      	lsls	r3, r3, #3
 800eed2:	627b      	str	r3, [r7, #36]	; 0x24
	while (j<blksize) {
 800eed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d3f3      	bcc.n	800eec4 <core_init_matrix+0x2a>
	}
	N=i-1;
 800eedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eede:	3b01      	subs	r3, #1
 800eee0:	623b      	str	r3, [r7, #32]
	A=(MATDAT *)align_mem(memblk);
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	3b01      	subs	r3, #1
 800eee6:	f023 0303 	bic.w	r3, r3, #3
 800eeea:	3304      	adds	r3, #4
 800eeec:	61fb      	str	r3, [r7, #28]
	B=A+N*N;
 800eeee:	6a3b      	ldr	r3, [r7, #32]
 800eef0:	fb03 f303 	mul.w	r3, r3, r3
 800eef4:	005b      	lsls	r3, r3, #1
 800eef6:	69fa      	ldr	r2, [r7, #28]
 800eef8:	4413      	add	r3, r2
 800eefa:	61bb      	str	r3, [r7, #24]

	for (i=0; i<N; i++) {
 800eefc:	2300      	movs	r3, #0
 800eefe:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef00:	e03f      	b.n	800ef82 <core_init_matrix+0xe8>
		for (j=0; j<N; j++) {
 800ef02:	2300      	movs	r3, #0
 800ef04:	627b      	str	r3, [r7, #36]	; 0x24
 800ef06:	e035      	b.n	800ef74 <core_init_matrix+0xda>
			seed = ( ( order * seed ) % 65536 );
 800ef08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef0a:	687a      	ldr	r2, [r7, #4]
 800ef0c:	fb02 f303 	mul.w	r3, r2, r3
 800ef10:	425a      	negs	r2, r3
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	b292      	uxth	r2, r2
 800ef16:	bf58      	it	pl
 800ef18:	4253      	negpl	r3, r2
 800ef1a:	607b      	str	r3, [r7, #4]
			val = (seed + order);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	b29a      	uxth	r2, r3
 800ef20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef22:	b29b      	uxth	r3, r3
 800ef24:	4413      	add	r3, r2
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	82fb      	strh	r3, [r7, #22]
			val=matrix_clip(val,0);
			B[i*N+j] = val;
 800ef2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef2c:	6a3a      	ldr	r2, [r7, #32]
 800ef2e:	fb03 f202 	mul.w	r2, r3, r2
 800ef32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef34:	4413      	add	r3, r2
 800ef36:	005b      	lsls	r3, r3, #1
 800ef38:	69ba      	ldr	r2, [r7, #24]
 800ef3a:	4413      	add	r3, r2
 800ef3c:	8afa      	ldrh	r2, [r7, #22]
 800ef3e:	801a      	strh	r2, [r3, #0]
			val =  (val + order);
 800ef40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef42:	b29a      	uxth	r2, r3
 800ef44:	8afb      	ldrh	r3, [r7, #22]
 800ef46:	4413      	add	r3, r2
 800ef48:	b29b      	uxth	r3, r3
 800ef4a:	82fb      	strh	r3, [r7, #22]
			val=matrix_clip(val,1);
 800ef4c:	8afb      	ldrh	r3, [r7, #22]
 800ef4e:	b2db      	uxtb	r3, r3
 800ef50:	82fb      	strh	r3, [r7, #22]
			A[i*N+j] = val;
 800ef52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef54:	6a3a      	ldr	r2, [r7, #32]
 800ef56:	fb03 f202 	mul.w	r2, r3, r2
 800ef5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef5c:	4413      	add	r3, r2
 800ef5e:	005b      	lsls	r3, r3, #1
 800ef60:	69fa      	ldr	r2, [r7, #28]
 800ef62:	4413      	add	r3, r2
 800ef64:	8afa      	ldrh	r2, [r7, #22]
 800ef66:	801a      	strh	r2, [r3, #0]
			order++;
 800ef68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6a:	3301      	adds	r3, #1
 800ef6c:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (j=0; j<N; j++) {
 800ef6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef70:	3301      	adds	r3, #1
 800ef72:	627b      	str	r3, [r7, #36]	; 0x24
 800ef74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef76:	6a3b      	ldr	r3, [r7, #32]
 800ef78:	429a      	cmp	r2, r3
 800ef7a:	d3c5      	bcc.n	800ef08 <core_init_matrix+0x6e>
	for (i=0; i<N; i++) {
 800ef7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef7e:	3301      	adds	r3, #1
 800ef80:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef84:	6a3b      	ldr	r3, [r7, #32]
 800ef86:	429a      	cmp	r2, r3
 800ef88:	d3bb      	bcc.n	800ef02 <core_init_matrix+0x68>
		}
	}

	p->A=A;
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	69fa      	ldr	r2, [r7, #28]
 800ef8e:	605a      	str	r2, [r3, #4]
	p->B=B;
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	69ba      	ldr	r2, [r7, #24]
 800ef94:	609a      	str	r2, [r3, #8]
	p->C=(MATRES *)align_mem(B+N*N);
 800ef96:	6a3b      	ldr	r3, [r7, #32]
 800ef98:	fb03 f303 	mul.w	r3, r3, r3
 800ef9c:	005b      	lsls	r3, r3, #1
 800ef9e:	69ba      	ldr	r2, [r7, #24]
 800efa0:	4413      	add	r3, r2
 800efa2:	3b01      	subs	r3, #1
 800efa4:	f023 0303 	bic.w	r3, r3, #3
 800efa8:	3304      	adds	r3, #4
 800efaa:	461a      	mov	r2, r3
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	60da      	str	r2, [r3, #12]
	p->N=N;
 800efb0:	6a3a      	ldr	r2, [r7, #32]
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	601a      	str	r2, [r3, #0]
#if CORE_DEBUG
	printmat(A,N,"A");
	printmat(B,N,"B");
#endif
	return N;
 800efb6:	6a3b      	ldr	r3, [r7, #32]
}
 800efb8:	4618      	mov	r0, r3
 800efba:	3734      	adds	r7, #52	; 0x34
 800efbc:	46bd      	mov	sp, r7
 800efbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc2:	4770      	bx	lr

0800efc4 <matrix_sum>:
	As long as this value is under the parameter clipval, 
	add 1 to the result if the element is bigger then the previous.
	
	Otherwise, reset the accumulator and add 10 to the result.
*/
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
 800efc4:	b480      	push	{r7}
 800efc6:	b08b      	sub	sp, #44	; 0x2c
 800efc8:	af00      	add	r7, sp, #0
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	60b9      	str	r1, [r7, #8]
 800efce:	4613      	mov	r3, r2
 800efd0:	80fb      	strh	r3, [r7, #6]
	MATRES tmp=0,prev=0,cur=0;
 800efd2:	2300      	movs	r3, #0
 800efd4:	627b      	str	r3, [r7, #36]	; 0x24
 800efd6:	2300      	movs	r3, #0
 800efd8:	623b      	str	r3, [r7, #32]
 800efda:	2300      	movs	r3, #0
 800efdc:	613b      	str	r3, [r7, #16]
	ee_s16 ret=0;
 800efde:	2300      	movs	r3, #0
 800efe0:	83fb      	strh	r3, [r7, #30]
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 800efe2:	2300      	movs	r3, #0
 800efe4:	61bb      	str	r3, [r7, #24]
 800efe6:	e035      	b.n	800f054 <matrix_sum+0x90>
		for (j=0; j<N; j++) {
 800efe8:	2300      	movs	r3, #0
 800efea:	617b      	str	r3, [r7, #20]
 800efec:	e02b      	b.n	800f046 <matrix_sum+0x82>
			cur=C[i*N+j];
 800efee:	69bb      	ldr	r3, [r7, #24]
 800eff0:	68fa      	ldr	r2, [r7, #12]
 800eff2:	fb03 f202 	mul.w	r2, r3, r2
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	4413      	add	r3, r2
 800effa:	009b      	lsls	r3, r3, #2
 800effc:	68ba      	ldr	r2, [r7, #8]
 800effe:	4413      	add	r3, r2
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	613b      	str	r3, [r7, #16]
			tmp+=cur;
 800f004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	4413      	add	r3, r2
 800f00a:	627b      	str	r3, [r7, #36]	; 0x24
			if (tmp>clipval) {
 800f00c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f012:	429a      	cmp	r2, r3
 800f014:	dd06      	ble.n	800f024 <matrix_sum+0x60>
				ret+=10;
 800f016:	8bfb      	ldrh	r3, [r7, #30]
 800f018:	330a      	adds	r3, #10
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	83fb      	strh	r3, [r7, #30]
				tmp=0;
 800f01e:	2300      	movs	r3, #0
 800f020:	627b      	str	r3, [r7, #36]	; 0x24
 800f022:	e00b      	b.n	800f03c <matrix_sum+0x78>
			} else {
				ret += (cur>prev) ? 1 : 0;
 800f024:	693a      	ldr	r2, [r7, #16]
 800f026:	6a3b      	ldr	r3, [r7, #32]
 800f028:	429a      	cmp	r2, r3
 800f02a:	bfcc      	ite	gt
 800f02c:	2301      	movgt	r3, #1
 800f02e:	2300      	movle	r3, #0
 800f030:	b2db      	uxtb	r3, r3
 800f032:	b29a      	uxth	r2, r3
 800f034:	8bfb      	ldrh	r3, [r7, #30]
 800f036:	4413      	add	r3, r2
 800f038:	b29b      	uxth	r3, r3
 800f03a:	83fb      	strh	r3, [r7, #30]
			}
			prev=cur;
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	623b      	str	r3, [r7, #32]
		for (j=0; j<N; j++) {
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	3301      	adds	r3, #1
 800f044:	617b      	str	r3, [r7, #20]
 800f046:	697a      	ldr	r2, [r7, #20]
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d3cf      	bcc.n	800efee <matrix_sum+0x2a>
	for (i=0; i<N; i++) {
 800f04e:	69bb      	ldr	r3, [r7, #24]
 800f050:	3301      	adds	r3, #1
 800f052:	61bb      	str	r3, [r7, #24]
 800f054:	69ba      	ldr	r2, [r7, #24]
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	429a      	cmp	r2, r3
 800f05a:	d3c5      	bcc.n	800efe8 <matrix_sum+0x24>
		}
	}
	return ret;
 800f05c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800f060:	4618      	mov	r0, r3
 800f062:	372c      	adds	r7, #44	; 0x2c
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr

0800f06c <matrix_mul_const>:

/* Function: matrix_mul_const
	Multiply a matrix by a constant.
	This could be used as a scaler for instance.
*/
void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val) {
 800f06c:	b480      	push	{r7}
 800f06e:	b087      	sub	sp, #28
 800f070:	af00      	add	r7, sp, #0
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	60b9      	str	r1, [r7, #8]
 800f076:	607a      	str	r2, [r7, #4]
 800f078:	807b      	strh	r3, [r7, #2]
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 800f07a:	2300      	movs	r3, #0
 800f07c:	617b      	str	r3, [r7, #20]
 800f07e:	e026      	b.n	800f0ce <matrix_mul_const+0x62>
		for (j=0; j<N; j++) {
 800f080:	2300      	movs	r3, #0
 800f082:	613b      	str	r3, [r7, #16]
 800f084:	e01c      	b.n	800f0c0 <matrix_mul_const+0x54>
			C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	68fa      	ldr	r2, [r7, #12]
 800f08a:	fb03 f202 	mul.w	r2, r3, r2
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	4413      	add	r3, r2
 800f092:	005b      	lsls	r3, r3, #1
 800f094:	687a      	ldr	r2, [r7, #4]
 800f096:	4413      	add	r3, r2
 800f098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f09c:	4618      	mov	r0, r3
 800f09e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	68f9      	ldr	r1, [r7, #12]
 800f0a6:	fb03 f101 	mul.w	r1, r3, r1
 800f0aa:	693b      	ldr	r3, [r7, #16]
 800f0ac:	440b      	add	r3, r1
 800f0ae:	009b      	lsls	r3, r3, #2
 800f0b0:	68b9      	ldr	r1, [r7, #8]
 800f0b2:	440b      	add	r3, r1
 800f0b4:	fb00 f202 	mul.w	r2, r0, r2
 800f0b8:	601a      	str	r2, [r3, #0]
		for (j=0; j<N; j++) {
 800f0ba:	693b      	ldr	r3, [r7, #16]
 800f0bc:	3301      	adds	r3, #1
 800f0be:	613b      	str	r3, [r7, #16]
 800f0c0:	693a      	ldr	r2, [r7, #16]
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d3de      	bcc.n	800f086 <matrix_mul_const+0x1a>
	for (i=0; i<N; i++) {
 800f0c8:	697b      	ldr	r3, [r7, #20]
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	617b      	str	r3, [r7, #20]
 800f0ce:	697a      	ldr	r2, [r7, #20]
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d3d4      	bcc.n	800f080 <matrix_mul_const+0x14>
		}
	}
}
 800f0d6:	bf00      	nop
 800f0d8:	bf00      	nop
 800f0da:	371c      	adds	r7, #28
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e2:	4770      	bx	lr

0800f0e4 <matrix_add_const>:

/* Function: matrix_add_const
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
 800f0e4:	b480      	push	{r7}
 800f0e6:	b087      	sub	sp, #28
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	60f8      	str	r0, [r7, #12]
 800f0ec:	60b9      	str	r1, [r7, #8]
 800f0ee:	4613      	mov	r3, r2
 800f0f0:	80fb      	strh	r3, [r7, #6]
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	617b      	str	r3, [r7, #20]
 800f0f6:	e026      	b.n	800f146 <matrix_add_const+0x62>
		for (j=0; j<N; j++) {
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	613b      	str	r3, [r7, #16]
 800f0fc:	e01c      	b.n	800f138 <matrix_add_const+0x54>
			A[i*N+j] += val;
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	68fa      	ldr	r2, [r7, #12]
 800f102:	fb03 f202 	mul.w	r2, r3, r2
 800f106:	693b      	ldr	r3, [r7, #16]
 800f108:	4413      	add	r3, r2
 800f10a:	005b      	lsls	r3, r3, #1
 800f10c:	68ba      	ldr	r2, [r7, #8]
 800f10e:	4413      	add	r3, r2
 800f110:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f114:	b29a      	uxth	r2, r3
 800f116:	88fb      	ldrh	r3, [r7, #6]
 800f118:	4413      	add	r3, r2
 800f11a:	b299      	uxth	r1, r3
 800f11c:	697b      	ldr	r3, [r7, #20]
 800f11e:	68fa      	ldr	r2, [r7, #12]
 800f120:	fb03 f202 	mul.w	r2, r3, r2
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	4413      	add	r3, r2
 800f128:	005b      	lsls	r3, r3, #1
 800f12a:	68ba      	ldr	r2, [r7, #8]
 800f12c:	4413      	add	r3, r2
 800f12e:	b20a      	sxth	r2, r1
 800f130:	801a      	strh	r2, [r3, #0]
		for (j=0; j<N; j++) {
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	3301      	adds	r3, #1
 800f136:	613b      	str	r3, [r7, #16]
 800f138:	693a      	ldr	r2, [r7, #16]
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	429a      	cmp	r2, r3
 800f13e:	d3de      	bcc.n	800f0fe <matrix_add_const+0x1a>
	for (i=0; i<N; i++) {
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	3301      	adds	r3, #1
 800f144:	617b      	str	r3, [r7, #20]
 800f146:	697a      	ldr	r2, [r7, #20]
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d3d4      	bcc.n	800f0f8 <matrix_add_const+0x14>
		}
	}
}
 800f14e:	bf00      	nop
 800f150:	bf00      	nop
 800f152:	371c      	adds	r7, #28
 800f154:	46bd      	mov	sp, r7
 800f156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15a:	4770      	bx	lr

0800f15c <matrix_mul_vect>:

/* Function: matrix_mul_vect
	Multiply a matrix by a vector.
	This is common in many simple filters (e.g. fir where a vector of coefficients is applied to the matrix.)
*/
void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
 800f15c:	b480      	push	{r7}
 800f15e:	b087      	sub	sp, #28
 800f160:	af00      	add	r7, sp, #0
 800f162:	60f8      	str	r0, [r7, #12]
 800f164:	60b9      	str	r1, [r7, #8]
 800f166:	607a      	str	r2, [r7, #4]
 800f168:	603b      	str	r3, [r7, #0]
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 800f16a:	2300      	movs	r3, #0
 800f16c:	617b      	str	r3, [r7, #20]
 800f16e:	e031      	b.n	800f1d4 <matrix_mul_vect+0x78>
		C[i]=0;
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	009b      	lsls	r3, r3, #2
 800f174:	68ba      	ldr	r2, [r7, #8]
 800f176:	4413      	add	r3, r2
 800f178:	2200      	movs	r2, #0
 800f17a:	601a      	str	r2, [r3, #0]
		for (j=0; j<N; j++) {
 800f17c:	2300      	movs	r3, #0
 800f17e:	613b      	str	r3, [r7, #16]
 800f180:	e021      	b.n	800f1c6 <matrix_mul_vect+0x6a>
			C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	009b      	lsls	r3, r3, #2
 800f186:	68ba      	ldr	r2, [r7, #8]
 800f188:	4413      	add	r3, r2
 800f18a:	6819      	ldr	r1, [r3, #0]
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	68fa      	ldr	r2, [r7, #12]
 800f190:	fb03 f202 	mul.w	r2, r3, r2
 800f194:	693b      	ldr	r3, [r7, #16]
 800f196:	4413      	add	r3, r2
 800f198:	005b      	lsls	r3, r3, #1
 800f19a:	687a      	ldr	r2, [r7, #4]
 800f19c:	4413      	add	r3, r2
 800f19e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	005b      	lsls	r3, r3, #1
 800f1a8:	683a      	ldr	r2, [r7, #0]
 800f1aa:	4413      	add	r3, r2
 800f1ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1b0:	fb03 f200 	mul.w	r2, r3, r0
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	009b      	lsls	r3, r3, #2
 800f1b8:	68b8      	ldr	r0, [r7, #8]
 800f1ba:	4403      	add	r3, r0
 800f1bc:	440a      	add	r2, r1
 800f1be:	601a      	str	r2, [r3, #0]
		for (j=0; j<N; j++) {
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	3301      	adds	r3, #1
 800f1c4:	613b      	str	r3, [r7, #16]
 800f1c6:	693a      	ldr	r2, [r7, #16]
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	d3d9      	bcc.n	800f182 <matrix_mul_vect+0x26>
	for (i=0; i<N; i++) {
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	3301      	adds	r3, #1
 800f1d2:	617b      	str	r3, [r7, #20]
 800f1d4:	697a      	ldr	r2, [r7, #20]
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	d3c9      	bcc.n	800f170 <matrix_mul_vect+0x14>
		}
	}
}
 800f1dc:	bf00      	nop
 800f1de:	bf00      	nop
 800f1e0:	371c      	adds	r7, #28
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e8:	4770      	bx	lr

0800f1ea <matrix_mul_matrix>:

/* Function: matrix_mul_matrix
	Multiply a matrix by a matrix.
	Basic code is used in many algorithms, mostly with minor changes such as scaling.
*/
void matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
 800f1ea:	b480      	push	{r7}
 800f1ec:	b089      	sub	sp, #36	; 0x24
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	60f8      	str	r0, [r7, #12]
 800f1f2:	60b9      	str	r1, [r7, #8]
 800f1f4:	607a      	str	r2, [r7, #4]
 800f1f6:	603b      	str	r3, [r7, #0]
	ee_u32 i,j,k;
	for (i=0; i<N; i++) {
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	61fb      	str	r3, [r7, #28]
 800f1fc:	e04f      	b.n	800f29e <matrix_mul_matrix+0xb4>
		for (j=0; j<N; j++) {
 800f1fe:	2300      	movs	r3, #0
 800f200:	61bb      	str	r3, [r7, #24]
 800f202:	e045      	b.n	800f290 <matrix_mul_matrix+0xa6>
			C[i*N+j]=0;
 800f204:	69fb      	ldr	r3, [r7, #28]
 800f206:	68fa      	ldr	r2, [r7, #12]
 800f208:	fb03 f202 	mul.w	r2, r3, r2
 800f20c:	69bb      	ldr	r3, [r7, #24]
 800f20e:	4413      	add	r3, r2
 800f210:	009b      	lsls	r3, r3, #2
 800f212:	68ba      	ldr	r2, [r7, #8]
 800f214:	4413      	add	r3, r2
 800f216:	2200      	movs	r2, #0
 800f218:	601a      	str	r2, [r3, #0]
			for(k=0;k<N;k++)
 800f21a:	2300      	movs	r3, #0
 800f21c:	617b      	str	r3, [r7, #20]
 800f21e:	e030      	b.n	800f282 <matrix_mul_matrix+0x98>
			{
				C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
 800f220:	69fb      	ldr	r3, [r7, #28]
 800f222:	68fa      	ldr	r2, [r7, #12]
 800f224:	fb03 f202 	mul.w	r2, r3, r2
 800f228:	69bb      	ldr	r3, [r7, #24]
 800f22a:	4413      	add	r3, r2
 800f22c:	009b      	lsls	r3, r3, #2
 800f22e:	68ba      	ldr	r2, [r7, #8]
 800f230:	4413      	add	r3, r2
 800f232:	6819      	ldr	r1, [r3, #0]
 800f234:	69fb      	ldr	r3, [r7, #28]
 800f236:	68fa      	ldr	r2, [r7, #12]
 800f238:	fb03 f202 	mul.w	r2, r3, r2
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	4413      	add	r3, r2
 800f240:	005b      	lsls	r3, r3, #1
 800f242:	687a      	ldr	r2, [r7, #4]
 800f244:	4413      	add	r3, r2
 800f246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f24a:	4618      	mov	r0, r3
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	68fa      	ldr	r2, [r7, #12]
 800f250:	fb03 f202 	mul.w	r2, r3, r2
 800f254:	69bb      	ldr	r3, [r7, #24]
 800f256:	4413      	add	r3, r2
 800f258:	005b      	lsls	r3, r3, #1
 800f25a:	683a      	ldr	r2, [r7, #0]
 800f25c:	4413      	add	r3, r2
 800f25e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f262:	fb03 f200 	mul.w	r2, r3, r0
 800f266:	69fb      	ldr	r3, [r7, #28]
 800f268:	68f8      	ldr	r0, [r7, #12]
 800f26a:	fb03 f000 	mul.w	r0, r3, r0
 800f26e:	69bb      	ldr	r3, [r7, #24]
 800f270:	4403      	add	r3, r0
 800f272:	009b      	lsls	r3, r3, #2
 800f274:	68b8      	ldr	r0, [r7, #8]
 800f276:	4403      	add	r3, r0
 800f278:	440a      	add	r2, r1
 800f27a:	601a      	str	r2, [r3, #0]
			for(k=0;k<N;k++)
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	3301      	adds	r3, #1
 800f280:	617b      	str	r3, [r7, #20]
 800f282:	697a      	ldr	r2, [r7, #20]
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	429a      	cmp	r2, r3
 800f288:	d3ca      	bcc.n	800f220 <matrix_mul_matrix+0x36>
		for (j=0; j<N; j++) {
 800f28a:	69bb      	ldr	r3, [r7, #24]
 800f28c:	3301      	adds	r3, #1
 800f28e:	61bb      	str	r3, [r7, #24]
 800f290:	69ba      	ldr	r2, [r7, #24]
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	429a      	cmp	r2, r3
 800f296:	d3b5      	bcc.n	800f204 <matrix_mul_matrix+0x1a>
	for (i=0; i<N; i++) {
 800f298:	69fb      	ldr	r3, [r7, #28]
 800f29a:	3301      	adds	r3, #1
 800f29c:	61fb      	str	r3, [r7, #28]
 800f29e:	69fa      	ldr	r2, [r7, #28]
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d3ab      	bcc.n	800f1fe <matrix_mul_matrix+0x14>
			}
		}
	}
}
 800f2a6:	bf00      	nop
 800f2a8:	bf00      	nop
 800f2aa:	3724      	adds	r7, #36	; 0x24
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b2:	4770      	bx	lr

0800f2b4 <matrix_mul_matrix_bitextract>:

/* Function: matrix_mul_matrix_bitextract
	Multiply a matrix by a matrix, and extract some bits from the result.
	Basic code is used in many algorithms, mostly with minor changes such as scaling.
*/
void matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
 800f2b4:	b480      	push	{r7}
 800f2b6:	b089      	sub	sp, #36	; 0x24
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	60f8      	str	r0, [r7, #12]
 800f2bc:	60b9      	str	r1, [r7, #8]
 800f2be:	607a      	str	r2, [r7, #4]
 800f2c0:	603b      	str	r3, [r7, #0]
	ee_u32 i,j,k;
	for (i=0; i<N; i++) {
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	61fb      	str	r3, [r7, #28]
 800f2c6:	e05c      	b.n	800f382 <matrix_mul_matrix_bitextract+0xce>
		for (j=0; j<N; j++) {
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	61bb      	str	r3, [r7, #24]
 800f2cc:	e052      	b.n	800f374 <matrix_mul_matrix_bitextract+0xc0>
			C[i*N+j]=0;
 800f2ce:	69fb      	ldr	r3, [r7, #28]
 800f2d0:	68fa      	ldr	r2, [r7, #12]
 800f2d2:	fb03 f202 	mul.w	r2, r3, r2
 800f2d6:	69bb      	ldr	r3, [r7, #24]
 800f2d8:	4413      	add	r3, r2
 800f2da:	009b      	lsls	r3, r3, #2
 800f2dc:	68ba      	ldr	r2, [r7, #8]
 800f2de:	4413      	add	r3, r2
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	601a      	str	r2, [r3, #0]
			for(k=0;k<N;k++)
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	617b      	str	r3, [r7, #20]
 800f2e8:	e03d      	b.n	800f366 <matrix_mul_matrix_bitextract+0xb2>
			{
				MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
 800f2ea:	69fb      	ldr	r3, [r7, #28]
 800f2ec:	68fa      	ldr	r2, [r7, #12]
 800f2ee:	fb03 f202 	mul.w	r2, r3, r2
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	4413      	add	r3, r2
 800f2f6:	005b      	lsls	r3, r3, #1
 800f2f8:	687a      	ldr	r2, [r7, #4]
 800f2fa:	4413      	add	r3, r2
 800f2fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f300:	4619      	mov	r1, r3
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	68fa      	ldr	r2, [r7, #12]
 800f306:	fb03 f202 	mul.w	r2, r3, r2
 800f30a:	69bb      	ldr	r3, [r7, #24]
 800f30c:	4413      	add	r3, r2
 800f30e:	005b      	lsls	r3, r3, #1
 800f310:	683a      	ldr	r2, [r7, #0]
 800f312:	4413      	add	r3, r2
 800f314:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f318:	fb01 f303 	mul.w	r3, r1, r3
 800f31c:	613b      	str	r3, [r7, #16]
				C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
 800f31e:	69fb      	ldr	r3, [r7, #28]
 800f320:	68fa      	ldr	r2, [r7, #12]
 800f322:	fb03 f202 	mul.w	r2, r3, r2
 800f326:	69bb      	ldr	r3, [r7, #24]
 800f328:	4413      	add	r3, r2
 800f32a:	009b      	lsls	r3, r3, #2
 800f32c:	68ba      	ldr	r2, [r7, #8]
 800f32e:	4413      	add	r3, r2
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	4619      	mov	r1, r3
 800f334:	693b      	ldr	r3, [r7, #16]
 800f336:	109b      	asrs	r3, r3, #2
 800f338:	f003 030f 	and.w	r3, r3, #15
 800f33c:	693a      	ldr	r2, [r7, #16]
 800f33e:	1152      	asrs	r2, r2, #5
 800f340:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f344:	fb02 f303 	mul.w	r3, r2, r3
 800f348:	4419      	add	r1, r3
 800f34a:	69fb      	ldr	r3, [r7, #28]
 800f34c:	68fa      	ldr	r2, [r7, #12]
 800f34e:	fb03 f202 	mul.w	r2, r3, r2
 800f352:	69bb      	ldr	r3, [r7, #24]
 800f354:	4413      	add	r3, r2
 800f356:	009b      	lsls	r3, r3, #2
 800f358:	68ba      	ldr	r2, [r7, #8]
 800f35a:	4413      	add	r3, r2
 800f35c:	460a      	mov	r2, r1
 800f35e:	601a      	str	r2, [r3, #0]
			for(k=0;k<N;k++)
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	3301      	adds	r3, #1
 800f364:	617b      	str	r3, [r7, #20]
 800f366:	697a      	ldr	r2, [r7, #20]
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	429a      	cmp	r2, r3
 800f36c:	d3bd      	bcc.n	800f2ea <matrix_mul_matrix_bitextract+0x36>
		for (j=0; j<N; j++) {
 800f36e:	69bb      	ldr	r3, [r7, #24]
 800f370:	3301      	adds	r3, #1
 800f372:	61bb      	str	r3, [r7, #24]
 800f374:	69ba      	ldr	r2, [r7, #24]
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	429a      	cmp	r2, r3
 800f37a:	d3a8      	bcc.n	800f2ce <matrix_mul_matrix_bitextract+0x1a>
	for (i=0; i<N; i++) {
 800f37c:	69fb      	ldr	r3, [r7, #28]
 800f37e:	3301      	adds	r3, #1
 800f380:	61fb      	str	r3, [r7, #28]
 800f382:	69fa      	ldr	r2, [r7, #28]
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	429a      	cmp	r2, r3
 800f388:	d39e      	bcc.n	800f2c8 <matrix_mul_matrix_bitextract+0x14>
			}
		}
	}
}
 800f38a:	bf00      	nop
 800f38c:	bf00      	nop
 800f38e:	3724      	adds	r7, #36	; 0x24
 800f390:	46bd      	mov	sp, r7
 800f392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f396:	4770      	bx	lr

0800f398 <start_time>:
	This function will be called right before starting the timed portion of the benchmark.

	Implementation may be capturing a system timer (as implemented in the example code) 
	or zeroing some system parameters - e.g. setting the cpu clocks cycles to 0.
*/
void start_time(void) {
 800f398:	b480      	push	{r7}
 800f39a:	af00      	add	r7, sp, #0
	GETMYTIME(&start_time_val );      
	start_time_val = uwTick;
 800f39c:	4b04      	ldr	r3, [pc, #16]	; (800f3b0 <start_time+0x18>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	4a04      	ldr	r2, [pc, #16]	; (800f3b4 <start_time+0x1c>)
 800f3a2:	6013      	str	r3, [r2, #0]
}
 800f3a4:	bf00      	nop
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ac:	4770      	bx	lr
 800f3ae:	bf00      	nop
 800f3b0:	24004c20 	.word	0x24004c20
 800f3b4:	2400d240 	.word	0x2400d240

0800f3b8 <stop_time>:
	This function will be called right after ending the timed portion of the benchmark.

	Implementation may be capturing a system timer (as implemented in the example code) 
	or other system parameters - e.g. reading the current value of cpu cycles counter.
*/
void stop_time(void) {
 800f3b8:	b480      	push	{r7}
 800f3ba:	af00      	add	r7, sp, #0
	GETMYTIME(&stop_time_val );      
	stop_time_val = uwTick;
 800f3bc:	4b04      	ldr	r3, [pc, #16]	; (800f3d0 <stop_time+0x18>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	4a04      	ldr	r2, [pc, #16]	; (800f3d4 <stop_time+0x1c>)
 800f3c2:	6013      	str	r3, [r2, #0]
}
 800f3c4:	bf00      	nop
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3cc:	4770      	bx	lr
 800f3ce:	bf00      	nop
 800f3d0:	24004c20 	.word	0x24004c20
 800f3d4:	2400d244 	.word	0x2400d244

0800f3d8 <get_time>:
	as long as it can be converted to seconds by <time_in_secs>.
	This methodology is taken to accomodate any hardware or simulated platform.
	The sample implementation returns millisecs by default, 
	and the resolution is controlled by <TIMER_RES_DIVIDER>
*/
CORE_TICKS get_time(void) {
 800f3d8:	b480      	push	{r7}
 800f3da:	b083      	sub	sp, #12
 800f3dc:	af00      	add	r7, sp, #0
	CORE_TICKS elapsed=(CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
 800f3de:	4b06      	ldr	r3, [pc, #24]	; (800f3f8 <get_time+0x20>)
 800f3e0:	681a      	ldr	r2, [r3, #0]
 800f3e2:	4b06      	ldr	r3, [pc, #24]	; (800f3fc <get_time+0x24>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	1ad3      	subs	r3, r2, r3
 800f3e8:	607b      	str	r3, [r7, #4]
	return elapsed;
 800f3ea:	687b      	ldr	r3, [r7, #4]
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	370c      	adds	r7, #12
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f6:	4770      	bx	lr
 800f3f8:	2400d244 	.word	0x2400d244
 800f3fc:	2400d240 	.word	0x2400d240

0800f400 <time_in_secs>:
	Convert the value returned by get_time to seconds.

	The <secs_ret> type is used to accomodate systems with no support for floating point.
	Default implementation implemented by the EE_TICKS_PER_SEC macro above.
*/
secs_ret time_in_secs(CORE_TICKS ticks) {
 800f400:	b480      	push	{r7}
 800f402:	b085      	sub	sp, #20
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
	secs_ret retval=((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	ee07 3a90 	vmov	s15, r3
 800f40e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800f412:	ed9f 5b09 	vldr	d5, [pc, #36]	; 800f438 <time_in_secs+0x38>
 800f416:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f41a:	ed87 7b02 	vstr	d7, [r7, #8]
	return retval;
 800f41e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f422:	ec43 2b17 	vmov	d7, r2, r3
}
 800f426:	eeb0 0b47 	vmov.f64	d0, d7
 800f42a:	3714      	adds	r7, #20
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr
 800f434:	f3af 8000 	nop.w
 800f438:	00000000 	.word	0x00000000
 800f43c:	408f4000 	.word	0x408f4000

0800f440 <portable_init>:
/* Function : portable_init
	Target specific initialization code 
	Test for some common mistakes.
*/
void portable_init(core_portable *p, int *argc, char *argv[])
{
 800f440:	b480      	push	{r7}
 800f442:	b085      	sub	sp, #20
 800f444:	af00      	add	r7, sp, #0
 800f446:	60f8      	str	r0, [r7, #12]
 800f448:	60b9      	str	r1, [r7, #8]
 800f44a:	607a      	str	r2, [r7, #4]
		ee_printf("ERROR! Please define ee_ptr_int to a type that holds a pointer!\n");
	}
	if (sizeof(ee_u32) != 4) {
		ee_printf("ERROR! Please define ee_u32 to a 32b unsigned type!\n");
	}
	p->portable_id=1;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	2201      	movs	r2, #1
 800f450:	701a      	strb	r2, [r3, #0]
}
 800f452:	bf00      	nop
 800f454:	3714      	adds	r7, #20
 800f456:	46bd      	mov	sp, r7
 800f458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45c:	4770      	bx	lr

0800f45e <portable_fini>:
/* Function : portable_fini
	Target specific final code 
*/
void portable_fini(core_portable *p)
{
 800f45e:	b480      	push	{r7}
 800f460:	b083      	sub	sp, #12
 800f462:	af00      	add	r7, sp, #0
 800f464:	6078      	str	r0, [r7, #4]
	p->portable_id=0;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2200      	movs	r2, #0
 800f46a:	701a      	strb	r2, [r3, #0]
}
 800f46c:	bf00      	nop
 800f46e:	370c      	adds	r7, #12
 800f470:	46bd      	mov	sp, r7
 800f472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f476:	4770      	bx	lr

0800f478 <core_bench_state>:

	Go over the input twice, once direct, and once after introducing some corruption. 
*/
ee_u16 core_bench_state(ee_u32 blksize, ee_u8 *memblock, 
		ee_s16 seed1, ee_s16 seed2, ee_s16 step, ee_u16 crc) 
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b098      	sub	sp, #96	; 0x60
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	60f8      	str	r0, [r7, #12]
 800f480:	60b9      	str	r1, [r7, #8]
 800f482:	4611      	mov	r1, r2
 800f484:	461a      	mov	r2, r3
 800f486:	460b      	mov	r3, r1
 800f488:	80fb      	strh	r3, [r7, #6]
 800f48a:	4613      	mov	r3, r2
 800f48c:	80bb      	strh	r3, [r7, #4]
	ee_u32 final_counts[NUM_CORE_STATES];
	ee_u32 track_counts[NUM_CORE_STATES];
	ee_u8 *p=memblock;
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	617b      	str	r3, [r7, #20]


#if CORE_DEBUG
	ee_printf("State Bench: %d,%d,%d,%04x\n",seed1,seed2,step,crc);
#endif
	for (i=0; i<NUM_CORE_STATES; i++) {
 800f492:	2300      	movs	r3, #0
 800f494:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f496:	e015      	b.n	800f4c4 <core_bench_state+0x4c>
		final_counts[i]=track_counts[i]=0;
 800f498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f49a:	009b      	lsls	r3, r3, #2
 800f49c:	3360      	adds	r3, #96	; 0x60
 800f49e:	443b      	add	r3, r7
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	f843 2c48 	str.w	r2, [r3, #-72]
 800f4a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4a8:	009b      	lsls	r3, r3, #2
 800f4aa:	3360      	adds	r3, #96	; 0x60
 800f4ac:	443b      	add	r3, r7
 800f4ae:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800f4b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4b4:	009b      	lsls	r3, r3, #2
 800f4b6:	3360      	adds	r3, #96	; 0x60
 800f4b8:	443b      	add	r3, r7
 800f4ba:	f843 2c28 	str.w	r2, [r3, #-40]
	for (i=0; i<NUM_CORE_STATES; i++) {
 800f4be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4c0:	3301      	adds	r3, #1
 800f4c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f4c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4c6:	2b07      	cmp	r3, #7
 800f4c8:	d9e6      	bls.n	800f498 <core_bench_state+0x20>
	}
	/* run the state machine over the input */
	while (*p!=0) {
 800f4ca:	e017      	b.n	800f4fc <core_bench_state+0x84>
		enum CORE_STATE fstate=core_state_transition(&p,track_counts);
 800f4cc:	f107 0218 	add.w	r2, r7, #24
 800f4d0:	f107 0314 	add.w	r3, r7, #20
 800f4d4:	4611      	mov	r1, r2
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f000 f964 	bl	800f7a4 <core_state_transition>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		final_counts[fstate]++;
 800f4e2:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 800f4e6:	0093      	lsls	r3, r2, #2
 800f4e8:	3360      	adds	r3, #96	; 0x60
 800f4ea:	443b      	add	r3, r7
 800f4ec:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800f4f0:	1c59      	adds	r1, r3, #1
 800f4f2:	0093      	lsls	r3, r2, #2
 800f4f4:	3360      	adds	r3, #96	; 0x60
 800f4f6:	443b      	add	r3, r7
 800f4f8:	f843 1c28 	str.w	r1, [r3, #-40]
	while (*p!=0) {
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d1e3      	bne.n	800f4cc <core_bench_state+0x54>
	}
	ee_printf("\n");
#else
	}
#endif
	p=memblock;
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	617b      	str	r3, [r7, #20]
	while (p < (memblock+blksize)) { /* insert some corruption */
 800f508:	e010      	b.n	800f52c <core_bench_state+0xb4>
		if (*p!=',')
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	781b      	ldrb	r3, [r3, #0]
 800f50e:	2b2c      	cmp	r3, #44	; 0x2c
 800f510:	d007      	beq.n	800f522 <core_bench_state+0xaa>
			*p^=(ee_u8)seed1;
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	7819      	ldrb	r1, [r3, #0]
 800f516:	88fb      	ldrh	r3, [r7, #6]
 800f518:	b2da      	uxtb	r2, r3
 800f51a:	697b      	ldr	r3, [r7, #20]
 800f51c:	404a      	eors	r2, r1
 800f51e:	b2d2      	uxtb	r2, r2
 800f520:	701a      	strb	r2, [r3, #0]
		p+=step;
 800f522:	697a      	ldr	r2, [r7, #20]
 800f524:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800f528:	4413      	add	r3, r2
 800f52a:	617b      	str	r3, [r7, #20]
	while (p < (memblock+blksize)) { /* insert some corruption */
 800f52c:	68ba      	ldr	r2, [r7, #8]
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	441a      	add	r2, r3
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	429a      	cmp	r2, r3
 800f536:	d8e8      	bhi.n	800f50a <core_bench_state+0x92>
	}
	p=memblock;
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	617b      	str	r3, [r7, #20]
	/* run the state machine over the input again */
	while (*p!=0) {
 800f53c:	e017      	b.n	800f56e <core_bench_state+0xf6>
		enum CORE_STATE fstate=core_state_transition(&p,track_counts);
 800f53e:	f107 0218 	add.w	r2, r7, #24
 800f542:	f107 0314 	add.w	r3, r7, #20
 800f546:	4611      	mov	r1, r2
 800f548:	4618      	mov	r0, r3
 800f54a:	f000 f92b 	bl	800f7a4 <core_state_transition>
 800f54e:	4603      	mov	r3, r0
 800f550:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		final_counts[fstate]++;
 800f554:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800f558:	0093      	lsls	r3, r2, #2
 800f55a:	3360      	adds	r3, #96	; 0x60
 800f55c:	443b      	add	r3, r7
 800f55e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800f562:	1c59      	adds	r1, r3, #1
 800f564:	0093      	lsls	r3, r2, #2
 800f566:	3360      	adds	r3, #96	; 0x60
 800f568:	443b      	add	r3, r7
 800f56a:	f843 1c28 	str.w	r1, [r3, #-40]
	while (*p!=0) {
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	781b      	ldrb	r3, [r3, #0]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d1e3      	bne.n	800f53e <core_bench_state+0xc6>
	}
	ee_printf("\n");
#else
	}
#endif
	p=memblock;
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	617b      	str	r3, [r7, #20]
	while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
 800f57a:	e010      	b.n	800f59e <core_bench_state+0x126>
		if (*p!=',')
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	781b      	ldrb	r3, [r3, #0]
 800f580:	2b2c      	cmp	r3, #44	; 0x2c
 800f582:	d007      	beq.n	800f594 <core_bench_state+0x11c>
			*p^=(ee_u8)seed2;
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	7819      	ldrb	r1, [r3, #0]
 800f588:	88bb      	ldrh	r3, [r7, #4]
 800f58a:	b2da      	uxtb	r2, r3
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	404a      	eors	r2, r1
 800f590:	b2d2      	uxtb	r2, r2
 800f592:	701a      	strb	r2, [r3, #0]
		p+=step;
 800f594:	697a      	ldr	r2, [r7, #20]
 800f596:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800f59a:	4413      	add	r3, r2
 800f59c:	617b      	str	r3, [r7, #20]
	while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
 800f59e:	68ba      	ldr	r2, [r7, #8]
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	441a      	add	r2, r3
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d8e8      	bhi.n	800f57c <core_bench_state+0x104>
	}
	/* end timing */
	for (i=0; i<NUM_CORE_STATES; i++) {
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f5ae:	e020      	b.n	800f5f2 <core_bench_state+0x17a>
		crc=crcu32(final_counts[i],crc);
 800f5b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5b2:	009b      	lsls	r3, r3, #2
 800f5b4:	3360      	adds	r3, #96	; 0x60
 800f5b6:	443b      	add	r3, r7
 800f5b8:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800f5bc:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800f5c0:	4611      	mov	r1, r2
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f000 fa99 	bl	800fafa <crcu32>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
		crc=crcu32(track_counts[i],crc);
 800f5ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5d0:	009b      	lsls	r3, r3, #2
 800f5d2:	3360      	adds	r3, #96	; 0x60
 800f5d4:	443b      	add	r3, r7
 800f5d6:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800f5da:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800f5de:	4611      	mov	r1, r2
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f000 fa8a 	bl	800fafa <crcu32>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	for (i=0; i<NUM_CORE_STATES; i++) {
 800f5ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5ee:	3301      	adds	r3, #1
 800f5f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f5f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5f4:	2b07      	cmp	r3, #7
 800f5f6:	d9db      	bls.n	800f5b0 <core_bench_state+0x138>
	}
	return crc;
 800f5f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3760      	adds	r7, #96	; 0x60
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}

0800f604 <core_init_state>:
	Actual patterns chosen depend on the seed parameter.
	
	Note:
	The seed parameter MUST be supplied from a source that cannot be determined at compile time
*/
void core_init_state(ee_u32 size, ee_s16 seed, ee_u8 *p) {
 800f604:	b480      	push	{r7}
 800f606:	b089      	sub	sp, #36	; 0x24
 800f608:	af00      	add	r7, sp, #0
 800f60a:	60f8      	str	r0, [r7, #12]
 800f60c:	460b      	mov	r3, r1
 800f60e:	607a      	str	r2, [r7, #4]
 800f610:	817b      	strh	r3, [r7, #10]
	ee_u32 total=0,next=0,i;
 800f612:	2300      	movs	r3, #0
 800f614:	61fb      	str	r3, [r7, #28]
 800f616:	2300      	movs	r3, #0
 800f618:	61bb      	str	r3, [r7, #24]
	ee_u8 *buf=0;
 800f61a:	2300      	movs	r3, #0
 800f61c:	613b      	str	r3, [r7, #16]
#if CORE_DEBUG
	ee_u8 *start=p;
	ee_printf("State: %d,%d\n",size,seed);
#endif
	size--;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	3b01      	subs	r3, #1
 800f622:	60fb      	str	r3, [r7, #12]
	next=0;
 800f624:	2300      	movs	r3, #0
 800f626:	61bb      	str	r3, [r7, #24]
	while ((total+next+1)<size) {
 800f628:	e079      	b.n	800f71e <core_init_state+0x11a>
		if (next>0) {
 800f62a:	69bb      	ldr	r3, [r7, #24]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d01f      	beq.n	800f670 <core_init_state+0x6c>
			for(i=0;i<next;i++)
 800f630:	2300      	movs	r3, #0
 800f632:	617b      	str	r3, [r7, #20]
 800f634:	e00c      	b.n	800f650 <core_init_state+0x4c>
				*(p+total+i)=buf[i];
 800f636:	693a      	ldr	r2, [r7, #16]
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	441a      	add	r2, r3
 800f63c:	69f9      	ldr	r1, [r7, #28]
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	440b      	add	r3, r1
 800f642:	6879      	ldr	r1, [r7, #4]
 800f644:	440b      	add	r3, r1
 800f646:	7812      	ldrb	r2, [r2, #0]
 800f648:	701a      	strb	r2, [r3, #0]
			for(i=0;i<next;i++)
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	3301      	adds	r3, #1
 800f64e:	617b      	str	r3, [r7, #20]
 800f650:	697a      	ldr	r2, [r7, #20]
 800f652:	69bb      	ldr	r3, [r7, #24]
 800f654:	429a      	cmp	r2, r3
 800f656:	d3ee      	bcc.n	800f636 <core_init_state+0x32>
			*(p+total+i)=',';
 800f658:	69fa      	ldr	r2, [r7, #28]
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	4413      	add	r3, r2
 800f65e:	687a      	ldr	r2, [r7, #4]
 800f660:	4413      	add	r3, r2
 800f662:	222c      	movs	r2, #44	; 0x2c
 800f664:	701a      	strb	r2, [r3, #0]
			total+=next+1;
 800f666:	69ba      	ldr	r2, [r7, #24]
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	4413      	add	r3, r2
 800f66c:	3301      	adds	r3, #1
 800f66e:	61fb      	str	r3, [r7, #28]
		}
		seed++;
 800f670:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f674:	b29b      	uxth	r3, r3
 800f676:	3301      	adds	r3, #1
 800f678:	b29b      	uxth	r3, r3
 800f67a:	817b      	strh	r3, [r7, #10]
		switch (seed & 0x7) {
 800f67c:	897b      	ldrh	r3, [r7, #10]
 800f67e:	f003 0307 	and.w	r3, r3, #7
 800f682:	2b07      	cmp	r3, #7
 800f684:	d84a      	bhi.n	800f71c <core_init_state+0x118>
 800f686:	a201      	add	r2, pc, #4	; (adr r2, 800f68c <core_init_state+0x88>)
 800f688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f68c:	0800f6ad 	.word	0x0800f6ad
 800f690:	0800f6ad 	.word	0x0800f6ad
 800f694:	0800f6ad 	.word	0x0800f6ad
 800f698:	0800f6c9 	.word	0x0800f6c9
 800f69c:	0800f6c9 	.word	0x0800f6c9
 800f6a0:	0800f6e5 	.word	0x0800f6e5
 800f6a4:	0800f6e5 	.word	0x0800f6e5
 800f6a8:	0800f701 	.word	0x0800f701
			case 0: /* int */
			case 1: /* int */
			case 2: /* int */
				buf=intpat[(seed>>3) & 0x3];
 800f6ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f6b0:	10db      	asrs	r3, r3, #3
 800f6b2:	b21b      	sxth	r3, r3
 800f6b4:	b29b      	uxth	r3, r3
 800f6b6:	f003 0303 	and.w	r3, r3, #3
 800f6ba:	4a28      	ldr	r2, [pc, #160]	; (800f75c <core_init_state+0x158>)
 800f6bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6c0:	613b      	str	r3, [r7, #16]
				next=4;
 800f6c2:	2304      	movs	r3, #4
 800f6c4:	61bb      	str	r3, [r7, #24]
			break;
 800f6c6:	e02a      	b.n	800f71e <core_init_state+0x11a>
			case 3: /* float */
			case 4: /* float */
				buf=floatpat[(seed>>3) & 0x3];
 800f6c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f6cc:	10db      	asrs	r3, r3, #3
 800f6ce:	b21b      	sxth	r3, r3
 800f6d0:	b29b      	uxth	r3, r3
 800f6d2:	f003 0303 	and.w	r3, r3, #3
 800f6d6:	4a22      	ldr	r2, [pc, #136]	; (800f760 <core_init_state+0x15c>)
 800f6d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6dc:	613b      	str	r3, [r7, #16]
				next=8;
 800f6de:	2308      	movs	r3, #8
 800f6e0:	61bb      	str	r3, [r7, #24]
			break;
 800f6e2:	e01c      	b.n	800f71e <core_init_state+0x11a>
			case 5: /* scientific */
			case 6: /* scientific */
				buf=scipat[(seed>>3) & 0x3];
 800f6e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f6e8:	10db      	asrs	r3, r3, #3
 800f6ea:	b21b      	sxth	r3, r3
 800f6ec:	b29b      	uxth	r3, r3
 800f6ee:	f003 0303 	and.w	r3, r3, #3
 800f6f2:	4a1c      	ldr	r2, [pc, #112]	; (800f764 <core_init_state+0x160>)
 800f6f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6f8:	613b      	str	r3, [r7, #16]
				next=8;
 800f6fa:	2308      	movs	r3, #8
 800f6fc:	61bb      	str	r3, [r7, #24]
			break;
 800f6fe:	e00e      	b.n	800f71e <core_init_state+0x11a>
			case 7: /* invalid */
				buf=errpat[(seed>>3) & 0x3];
 800f700:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f704:	10db      	asrs	r3, r3, #3
 800f706:	b21b      	sxth	r3, r3
 800f708:	b29b      	uxth	r3, r3
 800f70a:	f003 0303 	and.w	r3, r3, #3
 800f70e:	4a16      	ldr	r2, [pc, #88]	; (800f768 <core_init_state+0x164>)
 800f710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f714:	613b      	str	r3, [r7, #16]
				next=8;
 800f716:	2308      	movs	r3, #8
 800f718:	61bb      	str	r3, [r7, #24]
			break;
 800f71a:	e000      	b.n	800f71e <core_init_state+0x11a>
			default: /* Never happen, just to make some compilers happy */
			break;
 800f71c:	bf00      	nop
	while ((total+next+1)<size) {
 800f71e:	69fa      	ldr	r2, [r7, #28]
 800f720:	69bb      	ldr	r3, [r7, #24]
 800f722:	4413      	add	r3, r2
 800f724:	3301      	adds	r3, #1
 800f726:	68fa      	ldr	r2, [r7, #12]
 800f728:	429a      	cmp	r2, r3
 800f72a:	f63f af7e 	bhi.w	800f62a <core_init_state+0x26>
		}
	}
	size++;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	3301      	adds	r3, #1
 800f732:	60fb      	str	r3, [r7, #12]
	while (total<size) { /* fill the rest with 0 */
 800f734:	e007      	b.n	800f746 <core_init_state+0x142>
		*(p+total)=0;
 800f736:	687a      	ldr	r2, [r7, #4]
 800f738:	69fb      	ldr	r3, [r7, #28]
 800f73a:	4413      	add	r3, r2
 800f73c:	2200      	movs	r2, #0
 800f73e:	701a      	strb	r2, [r3, #0]
		total++;
 800f740:	69fb      	ldr	r3, [r7, #28]
 800f742:	3301      	adds	r3, #1
 800f744:	61fb      	str	r3, [r7, #28]
	while (total<size) { /* fill the rest with 0 */
 800f746:	69fa      	ldr	r2, [r7, #28]
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d3f3      	bcc.n	800f736 <core_init_state+0x132>
	}
#if CORE_DEBUG
	ee_printf("State Input: %s\n",start);
#endif
}
 800f74e:	bf00      	nop
 800f750:	bf00      	nop
 800f752:	3724      	adds	r7, #36	; 0x24
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr
 800f75c:	240000ac 	.word	0x240000ac
 800f760:	240000bc 	.word	0x240000bc
 800f764:	240000cc 	.word	0x240000cc
 800f768:	240000dc 	.word	0x240000dc

0800f76c <ee_isdigit>:

static ee_u8 ee_isdigit(ee_u8 c) {
 800f76c:	b480      	push	{r7}
 800f76e:	b085      	sub	sp, #20
 800f770:	af00      	add	r7, sp, #0
 800f772:	4603      	mov	r3, r0
 800f774:	71fb      	strb	r3, [r7, #7]
	ee_u8 retval;
	retval = ((c>='0') & (c<='9')) ? 1 : 0;
 800f776:	79fb      	ldrb	r3, [r7, #7]
 800f778:	2b2f      	cmp	r3, #47	; 0x2f
 800f77a:	bf8c      	ite	hi
 800f77c:	2301      	movhi	r3, #1
 800f77e:	2300      	movls	r3, #0
 800f780:	b2da      	uxtb	r2, r3
 800f782:	79fb      	ldrb	r3, [r7, #7]
 800f784:	2b39      	cmp	r3, #57	; 0x39
 800f786:	bf94      	ite	ls
 800f788:	2301      	movls	r3, #1
 800f78a:	2300      	movhi	r3, #0
 800f78c:	b2db      	uxtb	r3, r3
 800f78e:	4013      	ands	r3, r2
 800f790:	b2db      	uxtb	r3, r3
 800f792:	73fb      	strb	r3, [r7, #15]
	return retval;
 800f794:	7bfb      	ldrb	r3, [r7, #15]
}
 800f796:	4618      	mov	r0, r3
 800f798:	3714      	adds	r7, #20
 800f79a:	46bd      	mov	sp, r7
 800f79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a0:	4770      	bx	lr
	...

0800f7a4 <core_state_transition>:
	2 - a valid number has been detected.
	
	The input pointer is updated to point to the end of the token, and the end state is returned (either specific format determined or invalid).
*/

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	6039      	str	r1, [r7, #0]
	ee_u8 *str=*instr;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	60fb      	str	r3, [r7, #12]
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	72fb      	strb	r3, [r7, #11]
	for( ; *str && state != CORE_INVALID; str++ ) {
 800f7b8:	e0e5      	b.n	800f986 <core_state_transition+0x1e2>
		NEXT_SYMBOL = *str;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	72bb      	strb	r3, [r7, #10]
		if (NEXT_SYMBOL==',') /* end of this input */ {
 800f7c0:	7abb      	ldrb	r3, [r7, #10]
 800f7c2:	2b2c      	cmp	r3, #44	; 0x2c
 800f7c4:	d103      	bne.n	800f7ce <core_state_transition+0x2a>
			str++;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	3301      	adds	r3, #1
 800f7ca:	60fb      	str	r3, [r7, #12]
			break;
 800f7cc:	e0e3      	b.n	800f996 <core_state_transition+0x1f2>
		}
		switch(state) {
 800f7ce:	7afb      	ldrb	r3, [r7, #11]
 800f7d0:	2b07      	cmp	r3, #7
 800f7d2:	f200 80ce 	bhi.w	800f972 <core_state_transition+0x1ce>
 800f7d6:	a201      	add	r2, pc, #4	; (adr r2, 800f7dc <core_state_transition+0x38>)
 800f7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7dc:	0800f7fd 	.word	0x0800f7fd
 800f7e0:	0800f973 	.word	0x0800f973
 800f7e4:	0800f849 	.word	0x0800f849
 800f7e8:	0800f8fb 	.word	0x0800f8fb
 800f7ec:	0800f88d 	.word	0x0800f88d
 800f7f0:	0800f8c1 	.word	0x0800f8c1
 800f7f4:	0800f927 	.word	0x0800f927
 800f7f8:	0800f955 	.word	0x0800f955
		case CORE_START:
			if(ee_isdigit(NEXT_SYMBOL)) {
 800f7fc:	7abb      	ldrb	r3, [r7, #10]
 800f7fe:	4618      	mov	r0, r3
 800f800:	f7ff ffb4 	bl	800f76c <ee_isdigit>
 800f804:	4603      	mov	r3, r0
 800f806:	2b00      	cmp	r3, #0
 800f808:	d002      	beq.n	800f810 <core_state_transition+0x6c>
				state = CORE_INT;
 800f80a:	2304      	movs	r3, #4
 800f80c:	72fb      	strb	r3, [r7, #11]
 800f80e:	e015      	b.n	800f83c <core_state_transition+0x98>
			}
			else if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
 800f810:	7abb      	ldrb	r3, [r7, #10]
 800f812:	2b2b      	cmp	r3, #43	; 0x2b
 800f814:	d002      	beq.n	800f81c <core_state_transition+0x78>
 800f816:	7abb      	ldrb	r3, [r7, #10]
 800f818:	2b2d      	cmp	r3, #45	; 0x2d
 800f81a:	d102      	bne.n	800f822 <core_state_transition+0x7e>
				state = CORE_S1;
 800f81c:	2302      	movs	r3, #2
 800f81e:	72fb      	strb	r3, [r7, #11]
 800f820:	e00c      	b.n	800f83c <core_state_transition+0x98>
			}
			else if( NEXT_SYMBOL == '.' ) {
 800f822:	7abb      	ldrb	r3, [r7, #10]
 800f824:	2b2e      	cmp	r3, #46	; 0x2e
 800f826:	d102      	bne.n	800f82e <core_state_transition+0x8a>
				state = CORE_FLOAT;
 800f828:	2305      	movs	r3, #5
 800f82a:	72fb      	strb	r3, [r7, #11]
 800f82c:	e006      	b.n	800f83c <core_state_transition+0x98>
			}
			else {
				state = CORE_INVALID;
 800f82e:	2301      	movs	r3, #1
 800f830:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_INVALID]++;
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	3304      	adds	r3, #4
 800f836:	681a      	ldr	r2, [r3, #0]
 800f838:	3201      	adds	r2, #1
 800f83a:	601a      	str	r2, [r3, #0]
			}
			transition_count[CORE_START]++;
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	1c5a      	adds	r2, r3, #1
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	601a      	str	r2, [r3, #0]
			break;
 800f846:	e09b      	b.n	800f980 <core_state_transition+0x1dc>
		case CORE_S1:
			if(ee_isdigit(NEXT_SYMBOL)) {
 800f848:	7abb      	ldrb	r3, [r7, #10]
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7ff ff8e 	bl	800f76c <ee_isdigit>
 800f850:	4603      	mov	r3, r0
 800f852:	2b00      	cmp	r3, #0
 800f854:	d007      	beq.n	800f866 <core_state_transition+0xc2>
				state = CORE_INT;
 800f856:	2304      	movs	r3, #4
 800f858:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_S1]++;
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	3308      	adds	r3, #8
 800f85e:	681a      	ldr	r2, [r3, #0]
 800f860:	3201      	adds	r2, #1
 800f862:	601a      	str	r2, [r3, #0]
			}
			else {
				state = CORE_INVALID;
				transition_count[CORE_S1]++;
			}
			break;
 800f864:	e08c      	b.n	800f980 <core_state_transition+0x1dc>
			else if( NEXT_SYMBOL == '.' ) {
 800f866:	7abb      	ldrb	r3, [r7, #10]
 800f868:	2b2e      	cmp	r3, #46	; 0x2e
 800f86a:	d107      	bne.n	800f87c <core_state_transition+0xd8>
				state = CORE_FLOAT;
 800f86c:	2305      	movs	r3, #5
 800f86e:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_S1]++;
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	3308      	adds	r3, #8
 800f874:	681a      	ldr	r2, [r3, #0]
 800f876:	3201      	adds	r2, #1
 800f878:	601a      	str	r2, [r3, #0]
			break;
 800f87a:	e081      	b.n	800f980 <core_state_transition+0x1dc>
				state = CORE_INVALID;
 800f87c:	2301      	movs	r3, #1
 800f87e:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_S1]++;
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	3308      	adds	r3, #8
 800f884:	681a      	ldr	r2, [r3, #0]
 800f886:	3201      	adds	r2, #1
 800f888:	601a      	str	r2, [r3, #0]
			break;
 800f88a:	e079      	b.n	800f980 <core_state_transition+0x1dc>
		case CORE_INT:
			if( NEXT_SYMBOL == '.' ) {
 800f88c:	7abb      	ldrb	r3, [r7, #10]
 800f88e:	2b2e      	cmp	r3, #46	; 0x2e
 800f890:	d107      	bne.n	800f8a2 <core_state_transition+0xfe>
				state = CORE_FLOAT;
 800f892:	2305      	movs	r3, #5
 800f894:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_INT]++;
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	3310      	adds	r3, #16
 800f89a:	681a      	ldr	r2, [r3, #0]
 800f89c:	3201      	adds	r2, #1
 800f89e:	601a      	str	r2, [r3, #0]
			}
			else if(!ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_INVALID;
				transition_count[CORE_INT]++;
			}
			break;
 800f8a0:	e069      	b.n	800f976 <core_state_transition+0x1d2>
			else if(!ee_isdigit(NEXT_SYMBOL)) {
 800f8a2:	7abb      	ldrb	r3, [r7, #10]
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f7ff ff61 	bl	800f76c <ee_isdigit>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d162      	bne.n	800f976 <core_state_transition+0x1d2>
				state = CORE_INVALID;
 800f8b0:	2301      	movs	r3, #1
 800f8b2:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_INT]++;
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	3310      	adds	r3, #16
 800f8b8:	681a      	ldr	r2, [r3, #0]
 800f8ba:	3201      	adds	r2, #1
 800f8bc:	601a      	str	r2, [r3, #0]
			break;
 800f8be:	e05a      	b.n	800f976 <core_state_transition+0x1d2>
		case CORE_FLOAT:
			if( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' ) {
 800f8c0:	7abb      	ldrb	r3, [r7, #10]
 800f8c2:	2b45      	cmp	r3, #69	; 0x45
 800f8c4:	d002      	beq.n	800f8cc <core_state_transition+0x128>
 800f8c6:	7abb      	ldrb	r3, [r7, #10]
 800f8c8:	2b65      	cmp	r3, #101	; 0x65
 800f8ca:	d107      	bne.n	800f8dc <core_state_transition+0x138>
				state = CORE_S2;
 800f8cc:	2303      	movs	r3, #3
 800f8ce:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_FLOAT]++;
 800f8d0:	683b      	ldr	r3, [r7, #0]
 800f8d2:	3314      	adds	r3, #20
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	3201      	adds	r2, #1
 800f8d8:	601a      	str	r2, [r3, #0]
			}
			else if(!ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_INVALID;
				transition_count[CORE_FLOAT]++;
			}
			break;
 800f8da:	e04e      	b.n	800f97a <core_state_transition+0x1d6>
			else if(!ee_isdigit(NEXT_SYMBOL)) {
 800f8dc:	7abb      	ldrb	r3, [r7, #10]
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f7ff ff44 	bl	800f76c <ee_isdigit>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d147      	bne.n	800f97a <core_state_transition+0x1d6>
				state = CORE_INVALID;
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_FLOAT]++;
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	3314      	adds	r3, #20
 800f8f2:	681a      	ldr	r2, [r3, #0]
 800f8f4:	3201      	adds	r2, #1
 800f8f6:	601a      	str	r2, [r3, #0]
			break;
 800f8f8:	e03f      	b.n	800f97a <core_state_transition+0x1d6>
		case CORE_S2:
			if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
 800f8fa:	7abb      	ldrb	r3, [r7, #10]
 800f8fc:	2b2b      	cmp	r3, #43	; 0x2b
 800f8fe:	d002      	beq.n	800f906 <core_state_transition+0x162>
 800f900:	7abb      	ldrb	r3, [r7, #10]
 800f902:	2b2d      	cmp	r3, #45	; 0x2d
 800f904:	d107      	bne.n	800f916 <core_state_transition+0x172>
				state = CORE_EXPONENT;
 800f906:	2306      	movs	r3, #6
 800f908:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_S2]++;
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	330c      	adds	r3, #12
 800f90e:	681a      	ldr	r2, [r3, #0]
 800f910:	3201      	adds	r2, #1
 800f912:	601a      	str	r2, [r3, #0]
			}
			else {
				state = CORE_INVALID;
				transition_count[CORE_S2]++;
			}
			break;
 800f914:	e034      	b.n	800f980 <core_state_transition+0x1dc>
				state = CORE_INVALID;
 800f916:	2301      	movs	r3, #1
 800f918:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_S2]++;
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	330c      	adds	r3, #12
 800f91e:	681a      	ldr	r2, [r3, #0]
 800f920:	3201      	adds	r2, #1
 800f922:	601a      	str	r2, [r3, #0]
			break;
 800f924:	e02c      	b.n	800f980 <core_state_transition+0x1dc>
		case CORE_EXPONENT:
			if(ee_isdigit(NEXT_SYMBOL)) {
 800f926:	7abb      	ldrb	r3, [r7, #10]
 800f928:	4618      	mov	r0, r3
 800f92a:	f7ff ff1f 	bl	800f76c <ee_isdigit>
 800f92e:	4603      	mov	r3, r0
 800f930:	2b00      	cmp	r3, #0
 800f932:	d007      	beq.n	800f944 <core_state_transition+0x1a0>
				state = CORE_SCIENTIFIC;
 800f934:	2307      	movs	r3, #7
 800f936:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_EXPONENT]++;
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	3318      	adds	r3, #24
 800f93c:	681a      	ldr	r2, [r3, #0]
 800f93e:	3201      	adds	r2, #1
 800f940:	601a      	str	r2, [r3, #0]
			}
			else {
				state = CORE_INVALID;
				transition_count[CORE_EXPONENT]++;
			}
			break;
 800f942:	e01d      	b.n	800f980 <core_state_transition+0x1dc>
				state = CORE_INVALID;
 800f944:	2301      	movs	r3, #1
 800f946:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_EXPONENT]++;
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	3318      	adds	r3, #24
 800f94c:	681a      	ldr	r2, [r3, #0]
 800f94e:	3201      	adds	r2, #1
 800f950:	601a      	str	r2, [r3, #0]
			break;
 800f952:	e015      	b.n	800f980 <core_state_transition+0x1dc>
		case CORE_SCIENTIFIC:
			if(!ee_isdigit(NEXT_SYMBOL)) {
 800f954:	7abb      	ldrb	r3, [r7, #10]
 800f956:	4618      	mov	r0, r3
 800f958:	f7ff ff08 	bl	800f76c <ee_isdigit>
 800f95c:	4603      	mov	r3, r0
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d10d      	bne.n	800f97e <core_state_transition+0x1da>
				state = CORE_INVALID;
 800f962:	2301      	movs	r3, #1
 800f964:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_INVALID]++;
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	3304      	adds	r3, #4
 800f96a:	681a      	ldr	r2, [r3, #0]
 800f96c:	3201      	adds	r2, #1
 800f96e:	601a      	str	r2, [r3, #0]
			}
			break;
 800f970:	e005      	b.n	800f97e <core_state_transition+0x1da>
		default:
			break;
 800f972:	bf00      	nop
 800f974:	e004      	b.n	800f980 <core_state_transition+0x1dc>
			break;
 800f976:	bf00      	nop
 800f978:	e002      	b.n	800f980 <core_state_transition+0x1dc>
			break;
 800f97a:	bf00      	nop
 800f97c:	e000      	b.n	800f980 <core_state_transition+0x1dc>
			break;
 800f97e:	bf00      	nop
	for( ; *str && state != CORE_INVALID; str++ ) {
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	3301      	adds	r3, #1
 800f984:	60fb      	str	r3, [r7, #12]
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	781b      	ldrb	r3, [r3, #0]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d003      	beq.n	800f996 <core_state_transition+0x1f2>
 800f98e:	7afb      	ldrb	r3, [r7, #11]
 800f990:	2b01      	cmp	r3, #1
 800f992:	f47f af12 	bne.w	800f7ba <core_state_transition+0x16>
		}
	}
	*instr=str;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	68fa      	ldr	r2, [r7, #12]
 800f99a:	601a      	str	r2, [r3, #0]
	return state;
 800f99c:	7afb      	ldrb	r3, [r7, #11]
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3710      	adds	r7, #16
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}
 800f9a6:	bf00      	nop

0800f9a8 <get_seed_32>:
	extern volatile ee_s32 seed1_volatile;
	extern volatile ee_s32 seed2_volatile;
	extern volatile ee_s32 seed3_volatile;
	extern volatile ee_s32 seed4_volatile;
	extern volatile ee_s32 seed5_volatile;
	ee_s32 get_seed_32(int i) {
 800f9a8:	b480      	push	{r7}
 800f9aa:	b085      	sub	sp, #20
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
		ee_s32 retval;
		switch (i) {
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	3b01      	subs	r3, #1
 800f9b4:	2b04      	cmp	r3, #4
 800f9b6:	d821      	bhi.n	800f9fc <get_seed_32+0x54>
 800f9b8:	a201      	add	r2, pc, #4	; (adr r2, 800f9c0 <get_seed_32+0x18>)
 800f9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9be:	bf00      	nop
 800f9c0:	0800f9d5 	.word	0x0800f9d5
 800f9c4:	0800f9dd 	.word	0x0800f9dd
 800f9c8:	0800f9e5 	.word	0x0800f9e5
 800f9cc:	0800f9ed 	.word	0x0800f9ed
 800f9d0:	0800f9f5 	.word	0x0800f9f5
			case 1:
				retval=seed1_volatile;
 800f9d4:	4b0e      	ldr	r3, [pc, #56]	; (800fa10 <get_seed_32+0x68>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	60fb      	str	r3, [r7, #12]
				break;
 800f9da:	e012      	b.n	800fa02 <get_seed_32+0x5a>
			case 2:
				retval=seed2_volatile;
 800f9dc:	4b0d      	ldr	r3, [pc, #52]	; (800fa14 <get_seed_32+0x6c>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	60fb      	str	r3, [r7, #12]
				break;
 800f9e2:	e00e      	b.n	800fa02 <get_seed_32+0x5a>
			case 3:
				retval=seed3_volatile;
 800f9e4:	4b0c      	ldr	r3, [pc, #48]	; (800fa18 <get_seed_32+0x70>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	60fb      	str	r3, [r7, #12]
				break;
 800f9ea:	e00a      	b.n	800fa02 <get_seed_32+0x5a>
			case 4:
				retval=seed4_volatile;
 800f9ec:	4b0b      	ldr	r3, [pc, #44]	; (800fa1c <get_seed_32+0x74>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	60fb      	str	r3, [r7, #12]
				break;
 800f9f2:	e006      	b.n	800fa02 <get_seed_32+0x5a>
			case 5:
				retval=seed5_volatile;
 800f9f4:	4b0a      	ldr	r3, [pc, #40]	; (800fa20 <get_seed_32+0x78>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	60fb      	str	r3, [r7, #12]
				break;
 800f9fa:	e002      	b.n	800fa02 <get_seed_32+0x5a>
			default:
				retval=0;
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	60fb      	str	r3, [r7, #12]
				break;
 800fa00:	bf00      	nop
		}
		return retval;
 800fa02:	68fb      	ldr	r3, [r7, #12]
	}
 800fa04:	4618      	mov	r0, r3
 800fa06:	3714      	adds	r7, #20
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0e:	4770      	bx	lr
 800fa10:	2400d234 	.word	0x2400d234
 800fa14:	2400d238 	.word	0x2400d238
 800fa18:	240000a0 	.word	0x240000a0
 800fa1c:	240000a4 	.word	0x240000a4
 800fa20:	2400d23c 	.word	0x2400d23c

0800fa24 <crcu8>:
/* Function: crc*
	Service functions to calculate 16b CRC code.

*/
ee_u16 crcu8(ee_u8 data, ee_u16 crc )
{
 800fa24:	b480      	push	{r7}
 800fa26:	b085      	sub	sp, #20
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	460a      	mov	r2, r1
 800fa2e:	71fb      	strb	r3, [r7, #7]
 800fa30:	4613      	mov	r3, r2
 800fa32:	80bb      	strh	r3, [r7, #4]
	ee_u8 i=0,x16=0,carry=0;
 800fa34:	2300      	movs	r3, #0
 800fa36:	73fb      	strb	r3, [r7, #15]
 800fa38:	2300      	movs	r3, #0
 800fa3a:	737b      	strb	r3, [r7, #13]
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	73bb      	strb	r3, [r7, #14]

	for (i = 0; i < 8; i++)
 800fa40:	2300      	movs	r3, #0
 800fa42:	73fb      	strb	r3, [r7, #15]
 800fa44:	e02e      	b.n	800faa4 <crcu8+0x80>
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 800fa46:	88bb      	ldrh	r3, [r7, #4]
 800fa48:	b25a      	sxtb	r2, r3
 800fa4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fa4e:	4053      	eors	r3, r2
 800fa50:	b25b      	sxtb	r3, r3
 800fa52:	b2db      	uxtb	r3, r3
 800fa54:	f003 0301 	and.w	r3, r3, #1
 800fa58:	737b      	strb	r3, [r7, #13]
		data >>= 1;
 800fa5a:	79fb      	ldrb	r3, [r7, #7]
 800fa5c:	085b      	lsrs	r3, r3, #1
 800fa5e:	71fb      	strb	r3, [r7, #7]

		if (x16 == 1)
 800fa60:	7b7b      	ldrb	r3, [r7, #13]
 800fa62:	2b01      	cmp	r3, #1
 800fa64:	d108      	bne.n	800fa78 <crcu8+0x54>
		{
		   crc ^= 0x4002;
 800fa66:	88bb      	ldrh	r3, [r7, #4]
 800fa68:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800fa6c:	f083 0302 	eor.w	r3, r3, #2
 800fa70:	80bb      	strh	r3, [r7, #4]
		   carry = 1;
 800fa72:	2301      	movs	r3, #1
 800fa74:	73bb      	strb	r3, [r7, #14]
 800fa76:	e001      	b.n	800fa7c <crcu8+0x58>
		}
		else 
			carry = 0;
 800fa78:	2300      	movs	r3, #0
 800fa7a:	73bb      	strb	r3, [r7, #14]
		crc >>= 1;
 800fa7c:	88bb      	ldrh	r3, [r7, #4]
 800fa7e:	085b      	lsrs	r3, r3, #1
 800fa80:	80bb      	strh	r3, [r7, #4]
		if (carry)
 800fa82:	7bbb      	ldrb	r3, [r7, #14]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d006      	beq.n	800fa96 <crcu8+0x72>
		   crc |= 0x8000;
 800fa88:	88bb      	ldrh	r3, [r7, #4]
 800fa8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fa8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fa92:	80bb      	strh	r3, [r7, #4]
 800fa94:	e003      	b.n	800fa9e <crcu8+0x7a>
		else
		   crc &= 0x7fff;
 800fa96:	88bb      	ldrh	r3, [r7, #4]
 800fa98:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800fa9c:	80bb      	strh	r3, [r7, #4]
	for (i = 0; i < 8; i++)
 800fa9e:	7bfb      	ldrb	r3, [r7, #15]
 800faa0:	3301      	adds	r3, #1
 800faa2:	73fb      	strb	r3, [r7, #15]
 800faa4:	7bfb      	ldrb	r3, [r7, #15]
 800faa6:	2b07      	cmp	r3, #7
 800faa8:	d9cd      	bls.n	800fa46 <crcu8+0x22>
    }
	return crc;
 800faaa:	88bb      	ldrh	r3, [r7, #4]
} 
 800faac:	4618      	mov	r0, r3
 800faae:	3714      	adds	r7, #20
 800fab0:	46bd      	mov	sp, r7
 800fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab6:	4770      	bx	lr

0800fab8 <crcu16>:
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
 800fab8:	b580      	push	{r7, lr}
 800faba:	b082      	sub	sp, #8
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	4603      	mov	r3, r0
 800fac0:	460a      	mov	r2, r1
 800fac2:	80fb      	strh	r3, [r7, #6]
 800fac4:	4613      	mov	r3, r2
 800fac6:	80bb      	strh	r3, [r7, #4]
	crc=crcu8( (ee_u8) (newval)				,crc);
 800fac8:	88fb      	ldrh	r3, [r7, #6]
 800faca:	b2db      	uxtb	r3, r3
 800facc:	88ba      	ldrh	r2, [r7, #4]
 800face:	4611      	mov	r1, r2
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7ff ffa7 	bl	800fa24 <crcu8>
 800fad6:	4603      	mov	r3, r0
 800fad8:	80bb      	strh	r3, [r7, #4]
	crc=crcu8( (ee_u8) ((newval)>>8)	,crc);
 800fada:	88fb      	ldrh	r3, [r7, #6]
 800fadc:	0a1b      	lsrs	r3, r3, #8
 800fade:	b29b      	uxth	r3, r3
 800fae0:	b2db      	uxtb	r3, r3
 800fae2:	88ba      	ldrh	r2, [r7, #4]
 800fae4:	4611      	mov	r1, r2
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7ff ff9c 	bl	800fa24 <crcu8>
 800faec:	4603      	mov	r3, r0
 800faee:	80bb      	strh	r3, [r7, #4]
	return crc;
 800faf0:	88bb      	ldrh	r3, [r7, #4]
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3708      	adds	r7, #8
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}

0800fafa <crcu32>:
ee_u16 crcu32(ee_u32 newval, ee_u16 crc) {
 800fafa:	b580      	push	{r7, lr}
 800fafc:	b082      	sub	sp, #8
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	6078      	str	r0, [r7, #4]
 800fb02:	460b      	mov	r3, r1
 800fb04:	807b      	strh	r3, [r7, #2]
	crc=crc16((ee_s16) newval		,crc);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	b21b      	sxth	r3, r3
 800fb0a:	887a      	ldrh	r2, [r7, #2]
 800fb0c:	4611      	mov	r1, r2
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f000 f811 	bl	800fb36 <crc16>
 800fb14:	4603      	mov	r3, r0
 800fb16:	807b      	strh	r3, [r7, #2]
	crc=crc16((ee_s16) (newval>>16)	,crc);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	0c1b      	lsrs	r3, r3, #16
 800fb1c:	b21b      	sxth	r3, r3
 800fb1e:	887a      	ldrh	r2, [r7, #2]
 800fb20:	4611      	mov	r1, r2
 800fb22:	4618      	mov	r0, r3
 800fb24:	f000 f807 	bl	800fb36 <crc16>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	807b      	strh	r3, [r7, #2]
	return crc;
 800fb2c:	887b      	ldrh	r3, [r7, #2]
}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	3708      	adds	r7, #8
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}

0800fb36 <crc16>:
ee_u16 crc16(ee_s16 newval, ee_u16 crc) {
 800fb36:	b580      	push	{r7, lr}
 800fb38:	b082      	sub	sp, #8
 800fb3a:	af00      	add	r7, sp, #0
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	460a      	mov	r2, r1
 800fb40:	80fb      	strh	r3, [r7, #6]
 800fb42:	4613      	mov	r3, r2
 800fb44:	80bb      	strh	r3, [r7, #4]
	return crcu16((ee_u16)newval, crc);
 800fb46:	88fb      	ldrh	r3, [r7, #6]
 800fb48:	88ba      	ldrh	r2, [r7, #4]
 800fb4a:	4611      	mov	r1, r2
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f7ff ffb3 	bl	800fab8 <crcu16>
 800fb52:	4603      	mov	r3, r0
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3708      	adds	r7, #8
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}

0800fb5c <check_data_types>:

ee_u8 check_data_types() {
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b082      	sub	sp, #8
 800fb60:	af00      	add	r7, sp, #0
	ee_u8 retval=0;
 800fb62:	2300      	movs	r3, #0
 800fb64:	71fb      	strb	r3, [r7, #7]
	}
	if (sizeof(ee_ptr_int) != sizeof(int *)) {
		ee_printf("ERROR: ee_ptr_int is not a datatype that holds an int pointer!\n");
		retval++;
	}
	if (retval>0) {
 800fb66:	79fb      	ldrb	r3, [r7, #7]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d002      	beq.n	800fb72 <check_data_types+0x16>
		ee_printf("ERROR: Please modify the datatypes in core_portme.h!\n");
 800fb6c:	4803      	ldr	r0, [pc, #12]	; (800fb7c <check_data_types+0x20>)
 800fb6e:	f003 f991 	bl	8012e94 <puts>
	}
	return retval;
 800fb72:	79fb      	ldrb	r3, [r7, #7]
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	3708      	adds	r7, #8
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}
 800fb7c:	080155b4 	.word	0x080155b4

0800fb80 <tcps_status>:
    return 1;
}


int8_t tcps_status(uint8_t sn, uint16_t port, uint8_t TCP_mode)
{
 800fb80:	b590      	push	{r4, r7, lr}
 800fb82:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 800fb86:	b085      	sub	sp, #20
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	4604      	mov	r4, r0
 800fb8c:	4608      	mov	r0, r1
 800fb8e:	4611      	mov	r1, r2
 800fb90:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800fb94:	f6a3 7369 	subw	r3, r3, #3945	; 0xf69
 800fb98:	4622      	mov	r2, r4
 800fb9a:	701a      	strb	r2, [r3, #0]
 800fb9c:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800fba0:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 800fba4:	4602      	mov	r2, r0
 800fba6:	801a      	strh	r2, [r3, #0]
 800fba8:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800fbac:	f6a3 736a 	subw	r3, r3, #3946	; 0xf6a
 800fbb0:	460a      	mov	r2, r1
 800fbb2:	701a      	strb	r2, [r3, #0]
    int32_t ret;
    datasize_t sentsize=0;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	f641 726e 	movw	r2, #8046	; 0x1f6e
 800fbba:	443a      	add	r2, r7
 800fbbc:	8013      	strh	r3, [r2, #0]
    int8_t status,inter;
    uint8_t tmp = 0;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	f641 726d 	movw	r2, #8045	; 0x1f6d
 800fbc4:	443a      	add	r2, r7
 800fbc6:	7013      	strb	r3, [r2, #0]
    datasize_t received_size;
    uint8_t arg_tmp8;
    uint8_t* mode_msg;
    uint32_t pre_time = 0, now_time = 0;
 800fbc8:	2300      	movs	r3, #0
 800fbca:	f641 7264 	movw	r2, #8036	; 0x1f64
 800fbce:	443a      	add	r2, r7
 800fbd0:	6013      	str	r3, [r2, #0]
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800fbd8:	6013      	str	r3, [r2, #0]

    uint8_t* msg_v4 = "IPv4 mode";
 800fbda:	4bae      	ldr	r3, [pc, #696]	; (800fe94 <tcps_status+0x314>)
 800fbdc:	f641 725c 	movw	r2, #8028	; 0x1f5c
 800fbe0:	443a      	add	r2, r7
 800fbe2:	6013      	str	r3, [r2, #0]
    uint8_t* msg_v6 = "IPv6 mode";
 800fbe4:	4bac      	ldr	r3, [pc, #688]	; (800fe98 <tcps_status+0x318>)
 800fbe6:	f641 7258 	movw	r2, #8024	; 0x1f58
 800fbea:	443a      	add	r2, r7
 800fbec:	6013      	str	r3, [r2, #0]
    uint8_t* msg_dual = "Dual IP mode";
 800fbee:	4bab      	ldr	r3, [pc, #684]	; (800fe9c <tcps_status+0x31c>)
 800fbf0:	f641 7254 	movw	r2, #8020	; 0x1f54
 800fbf4:	443a      	add	r2, r7
 800fbf6:	6013      	str	r3, [r2, #0]

    uint8_t buf[8000];

    if(TCP_mode == AS_IPV4)
 800fbf8:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800fbfc:	f6a3 736a 	subw	r3, r3, #3946	; 0xf6a
 800fc00:	781b      	ldrb	r3, [r3, #0]
 800fc02:	2b02      	cmp	r3, #2
 800fc04:	d108      	bne.n	800fc18 <tcps_status+0x98>
    {
       mode_msg = msg_v4;
 800fc06:	f641 735c 	movw	r3, #8028	; 0x1f5c
 800fc0a:	443b      	add	r3, r7
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	f641 7268 	movw	r2, #8040	; 0x1f68
 800fc12:	443a      	add	r2, r7
 800fc14:	6013      	str	r3, [r2, #0]
 800fc16:	e017      	b.n	800fc48 <tcps_status+0xc8>
    }else if(TCP_mode == AS_IPV6)
 800fc18:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800fc1c:	f6a3 736a 	subw	r3, r3, #3946	; 0xf6a
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	2b17      	cmp	r3, #23
 800fc24:	d108      	bne.n	800fc38 <tcps_status+0xb8>
    {
       mode_msg = msg_v6;
 800fc26:	f641 7358 	movw	r3, #8024	; 0x1f58
 800fc2a:	443b      	add	r3, r7
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	f641 7268 	movw	r2, #8040	; 0x1f68
 800fc32:	443a      	add	r2, r7
 800fc34:	6013      	str	r3, [r2, #0]
 800fc36:	e007      	b.n	800fc48 <tcps_status+0xc8>
    }else
    {
       mode_msg = msg_dual;
 800fc38:	f641 7354 	movw	r3, #8020	; 0x1f54
 800fc3c:	443b      	add	r3, r7
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	f641 7268 	movw	r2, #8040	; 0x1f68
 800fc44:	443a      	add	r2, r7
 800fc46:	6013      	str	r3, [r2, #0]
    }
    #ifdef _LOOPBACK_DEBUG_
        uint8_t dst_ip[16], ext_status;
        uint16_t dst_port;
    #endif
        getsockopt(sn, SO_STATUS, &status);
 800fc48:	f641 724f 	movw	r2, #8015	; 0x1f4f
 800fc4c:	443a      	add	r2, r7
 800fc4e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800fc52:	f6a3 7369 	subw	r3, r3, #3945	; 0xf69
 800fc56:	781b      	ldrb	r3, [r3, #0]
 800fc58:	210a      	movs	r1, #10
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f001 f906 	bl	8010e6c <getsockopt>
        switch(status)
 800fc60:	f641 734f 	movw	r3, #8015	; 0x1f4f
 800fc64:	443b      	add	r3, r7
 800fc66:	f993 3000 	ldrsb.w	r3, [r3]
 800fc6a:	2b1c      	cmp	r3, #28
 800fc6c:	f200 820d 	bhi.w	801008a <tcps_status+0x50a>
 800fc70:	a201      	add	r2, pc, #4	; (adr r2, 800fc78 <tcps_status+0xf8>)
 800fc72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc76:	bf00      	nop
 800fc78:	0800ffd9 	.word	0x0800ffd9
 800fc7c:	0801008b 	.word	0x0801008b
 800fc80:	0801008b 	.word	0x0801008b
 800fc84:	0801008b 	.word	0x0801008b
 800fc88:	0801008b 	.word	0x0801008b
 800fc8c:	0801008b 	.word	0x0801008b
 800fc90:	0801008b 	.word	0x0801008b
 800fc94:	0801008b 	.word	0x0801008b
 800fc98:	0801008b 	.word	0x0801008b
 800fc9c:	0801008b 	.word	0x0801008b
 800fca0:	0801008b 	.word	0x0801008b
 800fca4:	0801008b 	.word	0x0801008b
 800fca8:	0801008b 	.word	0x0801008b
 800fcac:	0801008b 	.word	0x0801008b
 800fcb0:	0801008b 	.word	0x0801008b
 800fcb4:	0801008b 	.word	0x0801008b
 800fcb8:	0801008b 	.word	0x0801008b
 800fcbc:	0801008b 	.word	0x0801008b
 800fcc0:	0801008b 	.word	0x0801008b
 800fcc4:	0800ff83 	.word	0x0800ff83
 800fcc8:	0801008b 	.word	0x0801008b
 800fccc:	0801008b 	.word	0x0801008b
 800fcd0:	0801008b 	.word	0x0801008b
 800fcd4:	0800fced 	.word	0x0800fced
 800fcd8:	0801008b 	.word	0x0801008b
 800fcdc:	0801008b 	.word	0x0801008b
 800fce0:	0801008b 	.word	0x0801008b
 800fce4:	0801008b 	.word	0x0801008b
 800fce8:	0800fde7 	.word	0x0800fde7
        {
        case SOCK_ESTABLISHED :
            ctlsocket(sn,CS_GET_INTERRUPT,&inter);
 800fcec:	f641 724e 	movw	r2, #8014	; 0x1f4e
 800fcf0:	443a      	add	r2, r7
 800fcf2:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800fcf6:	f6a3 7369 	subw	r3, r3, #3945	; 0xf69
 800fcfa:	781b      	ldrb	r3, [r3, #0]
 800fcfc:	2105      	movs	r1, #5
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f000 ffc4 	bl	8010c8c <ctlsocket>
            if(inter & Sn_IR_CON)
 800fd04:	f641 734e 	movw	r3, #8014	; 0x1f4e
 800fd08:	443b      	add	r3, r7
 800fd0a:	f993 3000 	ldrsb.w	r3, [r3]
 800fd0e:	b2db      	uxtb	r3, r3
 800fd10:	f003 0301 	and.w	r3, r3, #1
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d010      	beq.n	800fd3a <tcps_status+0x1ba>
                            sn, dst_ip[0], dst_ip[1], dst_ip[2], dst_ip[3]);
                }
                getsockopt(sn,SO_DESTPORT,&dst_port);
                printf("Peer Port : %d\r\n", dst_port);
            #endif
                arg_tmp8 = Sn_IR_CON;
 800fd18:	2301      	movs	r3, #1
 800fd1a:	f641 724b 	movw	r2, #8011	; 0x1f4b
 800fd1e:	443a      	add	r2, r7
 800fd20:	7013      	strb	r3, [r2, #0]
                ctlsocket(sn,CS_CLR_INTERRUPT,&arg_tmp8);
 800fd22:	f641 724b 	movw	r2, #8011	; 0x1f4b
 800fd26:	443a      	add	r2, r7
 800fd28:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800fd2c:	f6a3 7369 	subw	r3, r3, #3945	; 0xf69
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	2104      	movs	r1, #4
 800fd34:	4618      	mov	r0, r3
 800fd36:	f000 ffa9 	bl	8010c8c <ctlsocket>
            }
            #if 1
            getsockopt(sn,SO_RECVBUF,&received_size);
 800fd3a:	f641 724c 	movw	r2, #8012	; 0x1f4c
 800fd3e:	443a      	add	r2, r7
 800fd40:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800fd44:	f6a3 7369 	subw	r3, r3, #3945	; 0xf69
 800fd48:	781b      	ldrb	r3, [r3, #0]
 800fd4a:	2109      	movs	r1, #9
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f001 f88d 	bl	8010e6c <getsockopt>

            if(received_size > 0){
 800fd52:	f641 734c 	movw	r3, #8012	; 0x1f4c
 800fd56:	443b      	add	r3, r7
 800fd58:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	f340 8196 	ble.w	801008e <tcps_status+0x50e>
                #if TIME_CHECK
                pre_time = get_time();
                #endif
                if(received_size > DATA_BUF_SIZE) received_size = DATA_BUF_SIZE;
 800fd62:	f641 734c 	movw	r3, #8012	; 0x1f4c
 800fd66:	443b      	add	r3, r7
 800fd68:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd6c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800fd70:	dd05      	ble.n	800fd7e <tcps_status+0x1fe>
 800fd72:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800fd76:	f641 724c 	movw	r2, #8012	; 0x1f4c
 800fd7a:	443a      	add	r2, r7
 800fd7c:	8013      	strh	r3, [r2, #0]
                ret = recv(sn, buf, received_size);
 800fd7e:	f641 734c 	movw	r3, #8012	; 0x1f4c
 800fd82:	443b      	add	r3, r7
 800fd84:	f9b3 1000 	ldrsh.w	r1, [r3]
 800fd88:	4b45      	ldr	r3, [pc, #276]	; (800fea0 <tcps_status+0x320>)
 800fd8a:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800fd8e:	f103 0310 	add.w	r3, r3, #16
 800fd92:	443b      	add	r3, r7
 800fd94:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800fd98:	f6a2 7269 	subw	r2, r2, #3945	; 0xf69
 800fd9c:	7810      	ldrb	r0, [r2, #0]
 800fd9e:	460a      	mov	r2, r1
 800fda0:	4619      	mov	r1, r3
 800fda2:	f000 fef3 	bl	8010b8c <recv>
 800fda6:	4603      	mov	r3, r0
 800fda8:	f641 7250 	movw	r2, #8016	; 0x1f50
 800fdac:	443a      	add	r2, r7
 800fdae:	6013      	str	r3, [r2, #0]

                if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 800fdb0:	f641 7350 	movw	r3, #8016	; 0x1f50
 800fdb4:	443b      	add	r3, r7
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	dc05      	bgt.n	800fdc8 <tcps_status+0x248>
 800fdbc:	f641 7350 	movw	r3, #8016	; 0x1f50
 800fdc0:	443b      	add	r3, r7
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	b25b      	sxtb	r3, r3
 800fdc6:	e168      	b.n	801009a <tcps_status+0x51a>
                received_size = (uint16_t) ret;
 800fdc8:	f641 7350 	movw	r3, #8016	; 0x1f50
 800fdcc:	443b      	add	r3, r7
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	b21b      	sxth	r3, r3
 800fdd2:	f641 724c 	movw	r2, #8012	; 0x1f4c
 800fdd6:	443a      	add	r2, r7
 800fdd8:	8013      	strh	r3, [r2, #0]
                sentsize = 0;
 800fdda:	2300      	movs	r3, #0
 800fddc:	f641 726e 	movw	r2, #8046	; 0x1f6e
 800fde0:	443a      	add	r2, r7
 800fde2:	8013      	strh	r3, [r2, #0]
                printf("R/S : %8d\r\n", now_time - pre_time);
                #endif
                #endif
            }
            #endif
            break;
 800fde4:	e153      	b.n	801008e <tcps_status+0x50e>
        case SOCK_CLOSE_WAIT :
            #ifdef _LOOPBACK_DEBUG_
                printf("%d:CloseWait\r\n",sn);
            #endif
            getsockopt(sn, SO_RECVBUF, &received_size);
 800fde6:	f641 724c 	movw	r2, #8012	; 0x1f4c
 800fdea:	443a      	add	r2, r7
 800fdec:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800fdf0:	f6a3 7369 	subw	r3, r3, #3945	; 0xf69
 800fdf4:	781b      	ldrb	r3, [r3, #0]
 800fdf6:	2109      	movs	r1, #9
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f001 f837 	bl	8010e6c <getsockopt>
            if(received_size > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 800fdfe:	f641 734c 	movw	r3, #8012	; 0x1f4c
 800fe02:	443b      	add	r3, r7
 800fe04:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	f340 80a0 	ble.w	800ff4e <tcps_status+0x3ce>
            {
                if(received_size > DATA_BUF_SIZE) received_size = DATA_BUF_SIZE;
 800fe0e:	f641 734c 	movw	r3, #8012	; 0x1f4c
 800fe12:	443b      	add	r3, r7
 800fe14:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe18:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800fe1c:	dd05      	ble.n	800fe2a <tcps_status+0x2aa>
 800fe1e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800fe22:	f641 724c 	movw	r2, #8012	; 0x1f4c
 800fe26:	443a      	add	r2, r7
 800fe28:	8013      	strh	r3, [r2, #0]
                ret = recv(sn, buf, received_size);
 800fe2a:	f641 734c 	movw	r3, #8012	; 0x1f4c
 800fe2e:	443b      	add	r3, r7
 800fe30:	f9b3 1000 	ldrsh.w	r1, [r3]
 800fe34:	4b1a      	ldr	r3, [pc, #104]	; (800fea0 <tcps_status+0x320>)
 800fe36:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800fe3a:	f103 0310 	add.w	r3, r3, #16
 800fe3e:	443b      	add	r3, r7
 800fe40:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800fe44:	f6a2 7269 	subw	r2, r2, #3945	; 0xf69
 800fe48:	7810      	ldrb	r0, [r2, #0]
 800fe4a:	460a      	mov	r2, r1
 800fe4c:	4619      	mov	r1, r3
 800fe4e:	f000 fe9d 	bl	8010b8c <recv>
 800fe52:	4603      	mov	r3, r0
 800fe54:	f641 7250 	movw	r2, #8016	; 0x1f50
 800fe58:	443a      	add	r2, r7
 800fe5a:	6013      	str	r3, [r2, #0]

                if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 800fe5c:	f641 7350 	movw	r3, #8016	; 0x1f50
 800fe60:	443b      	add	r3, r7
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	dc05      	bgt.n	800fe74 <tcps_status+0x2f4>
 800fe68:	f641 7350 	movw	r3, #8016	; 0x1f50
 800fe6c:	443b      	add	r3, r7
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	b25b      	sxtb	r3, r3
 800fe72:	e112      	b.n	801009a <tcps_status+0x51a>
                received_size = (uint16_t) ret;
 800fe74:	f641 7350 	movw	r3, #8016	; 0x1f50
 800fe78:	443b      	add	r3, r7
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	b21b      	sxth	r3, r3
 800fe7e:	f641 724c 	movw	r2, #8012	; 0x1f4c
 800fe82:	443a      	add	r2, r7
 800fe84:	8013      	strh	r3, [r2, #0]
                sentsize = 0;
 800fe86:	2300      	movs	r3, #0
 800fe88:	f641 726e 	movw	r2, #8046	; 0x1f6e
 800fe8c:	443a      	add	r2, r7
 800fe8e:	8013      	strh	r3, [r2, #0]

                while(received_size != sentsize)
 800fe90:	e051      	b.n	800ff36 <tcps_status+0x3b6>
 800fe92:	bf00      	nop
 800fe94:	080155ec 	.word	0x080155ec
 800fe98:	080155f8 	.word	0x080155f8
 800fe9c:	08015604 	.word	0x08015604
 800fea0:	ffffe098 	.word	0xffffe098
                {
                    ret = send(sn, buf+sentsize, received_size-sentsize);
 800fea4:	f641 736e 	movw	r3, #8046	; 0x1f6e
 800fea8:	443b      	add	r3, r7
 800feaa:	f9b3 2000 	ldrsh.w	r2, [r3]
 800feae:	4b7e      	ldr	r3, [pc, #504]	; (80100a8 <tcps_status+0x528>)
 800feb0:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800feb4:	f103 0310 	add.w	r3, r3, #16
 800feb8:	443b      	add	r3, r7
 800feba:	1899      	adds	r1, r3, r2
 800febc:	f641 734c 	movw	r3, #8012	; 0x1f4c
 800fec0:	443b      	add	r3, r7
 800fec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fec6:	b29a      	uxth	r2, r3
 800fec8:	f641 736e 	movw	r3, #8046	; 0x1f6e
 800fecc:	443b      	add	r3, r7
 800fece:	881b      	ldrh	r3, [r3, #0]
 800fed0:	1ad3      	subs	r3, r2, r3
 800fed2:	b29b      	uxth	r3, r3
 800fed4:	b21a      	sxth	r2, r3
 800fed6:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800feda:	f6a3 7369 	subw	r3, r3, #3945	; 0xf69
 800fede:	781b      	ldrb	r3, [r3, #0]
 800fee0:	4618      	mov	r0, r3
 800fee2:	f000 fd71 	bl	80109c8 <send>
 800fee6:	4603      	mov	r3, r0
 800fee8:	f641 7250 	movw	r2, #8016	; 0x1f50
 800feec:	443a      	add	r2, r7
 800feee:	6013      	str	r3, [r2, #0]
                    if(ret < 0)
 800fef0:	f641 7350 	movw	r3, #8016	; 0x1f50
 800fef4:	443b      	add	r3, r7
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	da0d      	bge.n	800ff18 <tcps_status+0x398>
                    {
                        close(sn);
 800fefc:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800ff00:	f6a3 7369 	subw	r3, r3, #3945	; 0xf69
 800ff04:	781b      	ldrb	r3, [r3, #0]
 800ff06:	4618      	mov	r0, r3
 800ff08:	f000 fc34 	bl	8010774 <close>
                        return ret;
 800ff0c:	f641 7350 	movw	r3, #8016	; 0x1f50
 800ff10:	443b      	add	r3, r7
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	b25b      	sxtb	r3, r3
 800ff16:	e0c0      	b.n	801009a <tcps_status+0x51a>
                    }
                    sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 800ff18:	f641 7350 	movw	r3, #8016	; 0x1f50
 800ff1c:	443b      	add	r3, r7
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	b29a      	uxth	r2, r3
 800ff22:	f641 736e 	movw	r3, #8046	; 0x1f6e
 800ff26:	443b      	add	r3, r7
 800ff28:	881b      	ldrh	r3, [r3, #0]
 800ff2a:	4413      	add	r3, r2
 800ff2c:	b29b      	uxth	r3, r3
 800ff2e:	f641 726e 	movw	r2, #8046	; 0x1f6e
 800ff32:	443a      	add	r2, r7
 800ff34:	8013      	strh	r3, [r2, #0]
                while(received_size != sentsize)
 800ff36:	f641 734c 	movw	r3, #8012	; 0x1f4c
 800ff3a:	443b      	add	r3, r7
 800ff3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff40:	f641 726e 	movw	r2, #8046	; 0x1f6e
 800ff44:	443a      	add	r2, r7
 800ff46:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d1aa      	bne.n	800fea4 <tcps_status+0x324>
                }
            }

            if((ret = disconnect(sn)) != SOCK_OK) return ret;
 800ff4e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800ff52:	f6a3 7369 	subw	r3, r3, #3945	; 0xf69
 800ff56:	781b      	ldrb	r3, [r3, #0]
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f000 fcc3 	bl	80108e4 <disconnect>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	f641 7250 	movw	r2, #8016	; 0x1f50
 800ff64:	443a      	add	r2, r7
 800ff66:	6013      	str	r3, [r2, #0]
 800ff68:	f641 7350 	movw	r3, #8016	; 0x1f50
 800ff6c:	443b      	add	r3, r7
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	2b01      	cmp	r3, #1
 800ff72:	f000 808e 	beq.w	8010092 <tcps_status+0x512>
 800ff76:	f641 7350 	movw	r3, #8016	; 0x1f50
 800ff7a:	443b      	add	r3, r7
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	b25b      	sxtb	r3, r3
 800ff80:	e08b      	b.n	801009a <tcps_status+0x51a>
                #ifdef _LOOPBACK_DEBUG_
                    printf("%d:Socket Closed\r\n", sn);
                #endif
            break;
        case SOCK_INIT :
            if( (ret = listen(sn)) != SOCK_OK) return ret;
 800ff82:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800ff86:	f6a3 7369 	subw	r3, r3, #3945	; 0xf69
 800ff8a:	781b      	ldrb	r3, [r3, #0]
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f000 fc5f 	bl	8010850 <listen>
 800ff92:	4603      	mov	r3, r0
 800ff94:	f641 7250 	movw	r2, #8016	; 0x1f50
 800ff98:	443a      	add	r2, r7
 800ff9a:	6013      	str	r3, [r2, #0]
 800ff9c:	f641 7350 	movw	r3, #8016	; 0x1f50
 800ffa0:	443b      	add	r3, r7
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	2b01      	cmp	r3, #1
 800ffa6:	d005      	beq.n	800ffb4 <tcps_status+0x434>
 800ffa8:	f641 7350 	movw	r3, #8016	; 0x1f50
 800ffac:	443b      	add	r3, r7
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	b25b      	sxtb	r3, r3
 800ffb2:	e072      	b.n	801009a <tcps_status+0x51a>
                #ifdef _LOOPBACK_DEBUG_
                    printf("%d:Listen, TCP server loopback, port [%d] as %s\r\n", sn, port, mode_msg);
                #endif
                    printf("%d:Listen, TCP server loopback, port [%d] as %s\r\n", sn, port, mode_msg);
 800ffb4:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800ffb8:	f6a3 7369 	subw	r3, r3, #3945	; 0xf69
 800ffbc:	7819      	ldrb	r1, [r3, #0]
 800ffbe:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800ffc2:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 800ffc6:	881a      	ldrh	r2, [r3, #0]
 800ffc8:	f641 7368 	movw	r3, #8040	; 0x1f68
 800ffcc:	443b      	add	r3, r7
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	4836      	ldr	r0, [pc, #216]	; (80100ac <tcps_status+0x52c>)
 800ffd2:	f002 fec3 	bl	8012d5c <iprintf>
            break;
 800ffd6:	e05f      	b.n	8010098 <tcps_status+0x518>
        case SOCK_CLOSED:
            #ifdef _LOOPBACK_DEBUG_
                printf("%d:TCP server loopback start\r\n",sn);
            #endif
                switch(TCP_mode)
 800ffd8:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800ffdc:	f6a3 736a 	subw	r3, r3, #3946	; 0xf6a
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	2b17      	cmp	r3, #23
 800ffe4:	d01a      	beq.n	801001c <tcps_status+0x49c>
 800ffe6:	2b17      	cmp	r3, #23
 800ffe8:	dc40      	bgt.n	801006c <tcps_status+0x4ec>
 800ffea:	2b02      	cmp	r3, #2
 800ffec:	d002      	beq.n	800fff4 <tcps_status+0x474>
 800ffee:	2b0b      	cmp	r3, #11
 800fff0:	d028      	beq.n	8010044 <tcps_status+0x4c4>
                    break;
                case AS_IPDUAL:
                    tmp = socket(sn, Sn_MR_TCPD, port, SOCK_IO_NONBLOCK);
                    break;
                default:
                    break;
 800fff2:	e03b      	b.n	801006c <tcps_status+0x4ec>
                    tmp = socket(sn, Sn_MR_TCP4, port, SOCK_IO_NONBLOCK);
 800fff4:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800fff8:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 800fffc:	881a      	ldrh	r2, [r3, #0]
 800fffe:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8010002:	f6a3 7369 	subw	r3, r3, #3945	; 0xf69
 8010006:	7818      	ldrb	r0, [r3, #0]
 8010008:	2301      	movs	r3, #1
 801000a:	2101      	movs	r1, #1
 801000c:	f000 f9c2 	bl	8010394 <socket>
 8010010:	4603      	mov	r3, r0
 8010012:	f641 726d 	movw	r2, #8045	; 0x1f6d
 8010016:	443a      	add	r2, r7
 8010018:	7013      	strb	r3, [r2, #0]
                    break;
 801001a:	e028      	b.n	801006e <tcps_status+0x4ee>
                    tmp = socket(sn, Sn_MR_TCP6, port, SOCK_IO_NONBLOCK);
 801001c:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8010020:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8010024:	881a      	ldrh	r2, [r3, #0]
 8010026:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 801002a:	f6a3 7369 	subw	r3, r3, #3945	; 0xf69
 801002e:	7818      	ldrb	r0, [r3, #0]
 8010030:	2301      	movs	r3, #1
 8010032:	2109      	movs	r1, #9
 8010034:	f000 f9ae 	bl	8010394 <socket>
 8010038:	4603      	mov	r3, r0
 801003a:	f641 726d 	movw	r2, #8045	; 0x1f6d
 801003e:	443a      	add	r2, r7
 8010040:	7013      	strb	r3, [r2, #0]
                    break;
 8010042:	e014      	b.n	801006e <tcps_status+0x4ee>
                    tmp = socket(sn, Sn_MR_TCPD, port, SOCK_IO_NONBLOCK);
 8010044:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8010048:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 801004c:	881a      	ldrh	r2, [r3, #0]
 801004e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8010052:	f6a3 7369 	subw	r3, r3, #3945	; 0xf69
 8010056:	7818      	ldrb	r0, [r3, #0]
 8010058:	2301      	movs	r3, #1
 801005a:	210d      	movs	r1, #13
 801005c:	f000 f99a 	bl	8010394 <socket>
 8010060:	4603      	mov	r3, r0
 8010062:	f641 726d 	movw	r2, #8045	; 0x1f6d
 8010066:	443a      	add	r2, r7
 8010068:	7013      	strb	r3, [r2, #0]
                    break;
 801006a:	e000      	b.n	801006e <tcps_status+0x4ee>
                    break;
 801006c:	bf00      	nop
                }
                if(tmp != sn)    /* reinitialize the socket */
 801006e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8010072:	f6a3 7369 	subw	r3, r3, #3945	; 0xf69
 8010076:	f641 726d 	movw	r2, #8045	; 0x1f6d
 801007a:	443a      	add	r2, r7
 801007c:	7812      	ldrb	r2, [r2, #0]
 801007e:	781b      	ldrb	r3, [r3, #0]
 8010080:	429a      	cmp	r2, r3
 8010082:	d008      	beq.n	8010096 <tcps_status+0x516>
                {
                    #ifdef _LOOPBACK_DEBUG_
                        printf("%d : Fail to create socket.\r\n",sn);
                    #endif
                    return SOCKERR_SOCKNUM;
 8010084:	f04f 33ff 	mov.w	r3, #4294967295
 8010088:	e007      	b.n	801009a <tcps_status+0x51a>
                printf("%d:Socket opened[%d]\r\n",sn, getSn_SR(sn));
                //sock_state[sn] = 1;
            #endif
            break;
        default:
            break;
 801008a:	bf00      	nop
 801008c:	e004      	b.n	8010098 <tcps_status+0x518>
            break;
 801008e:	bf00      	nop
 8010090:	e002      	b.n	8010098 <tcps_status+0x518>
            break;
 8010092:	bf00      	nop
 8010094:	e000      	b.n	8010098 <tcps_status+0x518>
            break;
 8010096:	bf00      	nop
        }
    return 1;
 8010098:	2301      	movs	r3, #1
}
 801009a:	4618      	mov	r0, r3
 801009c:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 80100a0:	3714      	adds	r7, #20
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd90      	pop	{r4, r7, pc}
 80100a6:	bf00      	nop
 80100a8:	ffffe098 	.word	0xffffe098
 80100ac:	08015614 	.word	0x08015614

080100b0 <WIZCHIP_WRITE>:

#define _W6100_SPI_OP_          _WIZCHIP_SPI_VDM_OP_

//////////////////////////////////////////////////
void WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b082      	sub	sp, #8
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
 80100b8:	460b      	mov	r3, r1
 80100ba:	70fb      	strb	r3, [r7, #3]
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
   WIZCHIP_CRITICAL_EXIT();
#else
   dma_write_data(AddrSel, &wb, 1);
 80100bc:	1cfb      	adds	r3, r7, #3
 80100be:	2201      	movs	r2, #1
 80100c0:	4619      	mov	r1, r3
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f7f0 fb76 	bl	80007b4 <dma_write_data>
#endif
}
 80100c8:	bf00      	nop
 80100ca:	3708      	adds	r7, #8
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}

080100d0 <WIZCHIP_READ>:

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b084      	sub	sp, #16
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
   WIZCHIP_CRITICAL_EXIT();
#else
   dma_read_data(AddrSel, &ret, 1);
 80100d8:	f107 030f 	add.w	r3, r7, #15
 80100dc:	2201      	movs	r2, #1
 80100de:	4619      	mov	r1, r3
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f7f0 fb9d 	bl	8000820 <dma_read_data>
#endif
   return ret;
 80100e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3710      	adds	r7, #16
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <WIZCHIP_WRITE_BUF>:

void WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, datasize_t len)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b084      	sub	sp, #16
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	60f8      	str	r0, [r7, #12]
 80100f8:	60b9      	str	r1, [r7, #8]
 80100fa:	4613      	mov	r3, r2
 80100fc:	80fb      	strh	r3, [r7, #6]
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
   WIZCHIP_CRITICAL_EXIT();
#else
   dma_write_data(AddrSel, pBuf, len);
 80100fe:	88fb      	ldrh	r3, [r7, #6]
 8010100:	461a      	mov	r2, r3
 8010102:	68b9      	ldr	r1, [r7, #8]
 8010104:	68f8      	ldr	r0, [r7, #12]
 8010106:	f7f0 fb55 	bl	80007b4 <dma_write_data>
#endif
}
 801010a:	bf00      	nop
 801010c:	3710      	adds	r7, #16
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}

08010112 <WIZCHIP_READ_BUF>:

void WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, datasize_t len)
{
 8010112:	b580      	push	{r7, lr}
 8010114:	b084      	sub	sp, #16
 8010116:	af00      	add	r7, sp, #0
 8010118:	60f8      	str	r0, [r7, #12]
 801011a:	60b9      	str	r1, [r7, #8]
 801011c:	4613      	mov	r3, r2
 801011e:	80fb      	strh	r3, [r7, #6]
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!!"
#endif
   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
   WIZCHIP_CRITICAL_EXIT();
#else
   dma_read_data(AddrSel, pBuf, len);
 8010120:	88fb      	ldrh	r3, [r7, #6]
 8010122:	461a      	mov	r2, r3
 8010124:	68b9      	ldr	r1, [r7, #8]
 8010126:	68f8      	ldr	r0, [r7, #12]
 8010128:	f7f0 fb7a 	bl	8000820 <dma_read_data>
#endif
}
 801012c:	bf00      	nop
 801012e:	3710      	adds	r7, #16
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}

08010134 <getSn_TX_FSR>:

datasize_t getSn_TX_FSR(uint8_t sn)
{
 8010134:	b590      	push	{r4, r7, lr}
 8010136:	b085      	sub	sp, #20
 8010138:	af00      	add	r7, sp, #0
 801013a:	4603      	mov	r3, r0
 801013c:	71fb      	strb	r3, [r7, #7]
   datasize_t prev_val=-1,val=0;
 801013e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010142:	81bb      	strh	r3, [r7, #12]
 8010144:	2300      	movs	r3, #0
 8010146:	81fb      	strh	r3, [r7, #14]
   do
   {
      prev_val = val;
 8010148:	89fb      	ldrh	r3, [r7, #14]
 801014a:	81bb      	strh	r3, [r7, #12]
      val = WIZCHIP_READ(_Sn_TX_FSR_(sn));
 801014c:	79fb      	ldrb	r3, [r7, #7]
 801014e:	009b      	lsls	r3, r3, #2
 8010150:	3301      	adds	r3, #1
 8010152:	00db      	lsls	r3, r3, #3
 8010154:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8010158:	4618      	mov	r0, r3
 801015a:	f7ff ffb9 	bl	80100d0 <WIZCHIP_READ>
 801015e:	4603      	mov	r3, r0
 8010160:	81fb      	strh	r3, [r7, #14]
      val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(_Sn_TX_FSR_(sn),1));
 8010162:	89fb      	ldrh	r3, [r7, #14]
 8010164:	021b      	lsls	r3, r3, #8
 8010166:	b29c      	uxth	r4, r3
 8010168:	79fb      	ldrb	r3, [r7, #7]
 801016a:	009b      	lsls	r3, r3, #2
 801016c:	3301      	adds	r3, #1
 801016e:	00da      	lsls	r2, r3, #3
 8010170:	4b0a      	ldr	r3, [pc, #40]	; (801019c <getSn_TX_FSR+0x68>)
 8010172:	4413      	add	r3, r2
 8010174:	4618      	mov	r0, r3
 8010176:	f7ff ffab 	bl	80100d0 <WIZCHIP_READ>
 801017a:	4603      	mov	r3, r0
 801017c:	b29b      	uxth	r3, r3
 801017e:	4423      	add	r3, r4
 8010180:	b29b      	uxth	r3, r3
 8010182:	81fb      	strh	r3, [r7, #14]
   }while (val != prev_val);
 8010184:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010188:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801018c:	429a      	cmp	r2, r3
 801018e:	d1db      	bne.n	8010148 <getSn_TX_FSR+0x14>
   return val;
 8010190:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8010194:	4618      	mov	r0, r3
 8010196:	3714      	adds	r7, #20
 8010198:	46bd      	mov	sp, r7
 801019a:	bd90      	pop	{r4, r7, pc}
 801019c:	00020500 	.word	0x00020500

080101a0 <getSn_RX_RSR>:

datasize_t getSn_RX_RSR(uint8_t sn)
{
 80101a0:	b590      	push	{r4, r7, lr}
 80101a2:	b085      	sub	sp, #20
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	4603      	mov	r3, r0
 80101a8:	71fb      	strb	r3, [r7, #7]
   datasize_t prev_val=-1,val=0;
 80101aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80101ae:	81bb      	strh	r3, [r7, #12]
 80101b0:	2300      	movs	r3, #0
 80101b2:	81fb      	strh	r3, [r7, #14]
   do
   {
      prev_val = val;
 80101b4:	89fb      	ldrh	r3, [r7, #14]
 80101b6:	81bb      	strh	r3, [r7, #12]
      val = WIZCHIP_READ(_Sn_RX_RSR_(sn));
 80101b8:	79fb      	ldrb	r3, [r7, #7]
 80101ba:	009b      	lsls	r3, r3, #2
 80101bc:	3301      	adds	r3, #1
 80101be:	00db      	lsls	r3, r3, #3
 80101c0:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
 80101c4:	4618      	mov	r0, r3
 80101c6:	f7ff ff83 	bl	80100d0 <WIZCHIP_READ>
 80101ca:	4603      	mov	r3, r0
 80101cc:	81fb      	strh	r3, [r7, #14]
      val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(_Sn_RX_RSR_(sn),1));
 80101ce:	89fb      	ldrh	r3, [r7, #14]
 80101d0:	021b      	lsls	r3, r3, #8
 80101d2:	b29c      	uxth	r4, r3
 80101d4:	79fb      	ldrb	r3, [r7, #7]
 80101d6:	009b      	lsls	r3, r3, #2
 80101d8:	3301      	adds	r3, #1
 80101da:	00da      	lsls	r2, r3, #3
 80101dc:	4b0a      	ldr	r3, [pc, #40]	; (8010208 <getSn_RX_RSR+0x68>)
 80101de:	4413      	add	r3, r2
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7ff ff75 	bl	80100d0 <WIZCHIP_READ>
 80101e6:	4603      	mov	r3, r0
 80101e8:	b29b      	uxth	r3, r3
 80101ea:	4423      	add	r3, r4
 80101ec:	b29b      	uxth	r3, r3
 80101ee:	81fb      	strh	r3, [r7, #14]
   }while (val != prev_val);
 80101f0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80101f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d1db      	bne.n	80101b4 <getSn_RX_RSR+0x14>
   return val;
 80101fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8010200:	4618      	mov	r0, r3
 8010202:	3714      	adds	r7, #20
 8010204:	46bd      	mov	sp, r7
 8010206:	bd90      	pop	{r4, r7, pc}
 8010208:	00022500 	.word	0x00022500

0801020c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, datasize_t len)
{
 801020c:	b590      	push	{r4, r7, lr}
 801020e:	b085      	sub	sp, #20
 8010210:	af00      	add	r7, sp, #0
 8010212:	4603      	mov	r3, r0
 8010214:	6039      	str	r1, [r7, #0]
 8010216:	71fb      	strb	r3, [r7, #7]
 8010218:	4613      	mov	r3, r2
 801021a:	80bb      	strh	r3, [r7, #4]
   datasize_t ptr = 0;
 801021c:	2300      	movs	r3, #0
 801021e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8010220:	2300      	movs	r3, #0
 8010222:	60bb      	str	r3, [r7, #8]
   ptr = getSn_TX_WR(sn);
 8010224:	79fb      	ldrb	r3, [r7, #7]
 8010226:	009b      	lsls	r3, r3, #2
 8010228:	3301      	adds	r3, #1
 801022a:	00db      	lsls	r3, r3, #3
 801022c:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8010230:	4618      	mov	r0, r3
 8010232:	f7ff ff4d 	bl	80100d0 <WIZCHIP_READ>
 8010236:	4603      	mov	r3, r0
 8010238:	b29b      	uxth	r3, r3
 801023a:	021b      	lsls	r3, r3, #8
 801023c:	b29c      	uxth	r4, r3
 801023e:	79fb      	ldrb	r3, [r7, #7]
 8010240:	009b      	lsls	r3, r3, #2
 8010242:	3301      	adds	r3, #1
 8010244:	00da      	lsls	r2, r3, #3
 8010246:	4b20      	ldr	r3, [pc, #128]	; (80102c8 <wiz_send_data+0xbc>)
 8010248:	4413      	add	r3, r2
 801024a:	4618      	mov	r0, r3
 801024c:	f7ff ff40 	bl	80100d0 <WIZCHIP_READ>
 8010250:	4603      	mov	r3, r0
 8010252:	b29b      	uxth	r3, r3
 8010254:	4423      	add	r3, r4
 8010256:	b29b      	uxth	r3, r3
 8010258:	81fb      	strh	r3, [r7, #14]
   addrsel = ((uint32_t)ptr << 8) + WIZCHIP_TXBUF_BLOCK(sn);
 801025a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801025e:	021b      	lsls	r3, r3, #8
 8010260:	79fa      	ldrb	r2, [r7, #7]
 8010262:	0092      	lsls	r2, r2, #2
 8010264:	3202      	adds	r2, #2
 8010266:	00d2      	lsls	r2, r2, #3
 8010268:	4413      	add	r3, r2
 801026a:	60bb      	str	r3, [r7, #8]
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 801026c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010270:	461a      	mov	r2, r3
 8010272:	6839      	ldr	r1, [r7, #0]
 8010274:	68b8      	ldr	r0, [r7, #8]
 8010276:	f7ff ff3b 	bl	80100f0 <WIZCHIP_WRITE_BUF>
   ptr += len;
 801027a:	89fa      	ldrh	r2, [r7, #14]
 801027c:	88bb      	ldrh	r3, [r7, #4]
 801027e:	4413      	add	r3, r2
 8010280:	b29b      	uxth	r3, r3
 8010282:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8010284:	79fb      	ldrb	r3, [r7, #7]
 8010286:	009b      	lsls	r3, r3, #2
 8010288:	3301      	adds	r3, #1
 801028a:	00db      	lsls	r3, r3, #3
 801028c:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8010290:	461a      	mov	r2, r3
 8010292:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010296:	121b      	asrs	r3, r3, #8
 8010298:	b21b      	sxth	r3, r3
 801029a:	b2db      	uxtb	r3, r3
 801029c:	4619      	mov	r1, r3
 801029e:	4610      	mov	r0, r2
 80102a0:	f7ff ff06 	bl	80100b0 <WIZCHIP_WRITE>
 80102a4:	79fb      	ldrb	r3, [r7, #7]
 80102a6:	009b      	lsls	r3, r3, #2
 80102a8:	3301      	adds	r3, #1
 80102aa:	00da      	lsls	r2, r3, #3
 80102ac:	4b06      	ldr	r3, [pc, #24]	; (80102c8 <wiz_send_data+0xbc>)
 80102ae:	4413      	add	r3, r2
 80102b0:	461a      	mov	r2, r3
 80102b2:	89fb      	ldrh	r3, [r7, #14]
 80102b4:	b2db      	uxtb	r3, r3
 80102b6:	4619      	mov	r1, r3
 80102b8:	4610      	mov	r0, r2
 80102ba:	f7ff fef9 	bl	80100b0 <WIZCHIP_WRITE>
}
 80102be:	bf00      	nop
 80102c0:	3714      	adds	r7, #20
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd90      	pop	{r4, r7, pc}
 80102c6:	bf00      	nop
 80102c8:	00020d00 	.word	0x00020d00

080102cc <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, datasize_t len)
{
 80102cc:	b590      	push	{r4, r7, lr}
 80102ce:	b085      	sub	sp, #20
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	4603      	mov	r3, r0
 80102d4:	6039      	str	r1, [r7, #0]
 80102d6:	71fb      	strb	r3, [r7, #7]
 80102d8:	4613      	mov	r3, r2
 80102da:	80bb      	strh	r3, [r7, #4]
   datasize_t ptr = 0;
 80102dc:	2300      	movs	r3, #0
 80102de:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80102e0:	2300      	movs	r3, #0
 80102e2:	60bb      	str	r3, [r7, #8]
   if(len == 0) return;
 80102e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d04d      	beq.n	8010388 <wiz_recv_data+0xbc>
   ptr = getSn_RX_RD(sn);
 80102ec:	79fb      	ldrb	r3, [r7, #7]
 80102ee:	009b      	lsls	r3, r3, #2
 80102f0:	3301      	adds	r3, #1
 80102f2:	00db      	lsls	r3, r3, #3
 80102f4:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 80102f8:	4618      	mov	r0, r3
 80102fa:	f7ff fee9 	bl	80100d0 <WIZCHIP_READ>
 80102fe:	4603      	mov	r3, r0
 8010300:	b29b      	uxth	r3, r3
 8010302:	021b      	lsls	r3, r3, #8
 8010304:	b29c      	uxth	r4, r3
 8010306:	79fb      	ldrb	r3, [r7, #7]
 8010308:	009b      	lsls	r3, r3, #2
 801030a:	3301      	adds	r3, #1
 801030c:	00da      	lsls	r2, r3, #3
 801030e:	4b20      	ldr	r3, [pc, #128]	; (8010390 <wiz_recv_data+0xc4>)
 8010310:	4413      	add	r3, r2
 8010312:	4618      	mov	r0, r3
 8010314:	f7ff fedc 	bl	80100d0 <WIZCHIP_READ>
 8010318:	4603      	mov	r3, r0
 801031a:	b29b      	uxth	r3, r3
 801031c:	4423      	add	r3, r4
 801031e:	b29b      	uxth	r3, r3
 8010320:	81fb      	strh	r3, [r7, #14]
   addrsel = ((uint32_t)ptr << 8) + WIZCHIP_RXBUF_BLOCK(sn);
 8010322:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010326:	021b      	lsls	r3, r3, #8
 8010328:	79fa      	ldrb	r2, [r7, #7]
 801032a:	0092      	lsls	r2, r2, #2
 801032c:	3203      	adds	r2, #3
 801032e:	00d2      	lsls	r2, r2, #3
 8010330:	4413      	add	r3, r2
 8010332:	60bb      	str	r3, [r7, #8]
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8010334:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010338:	461a      	mov	r2, r3
 801033a:	6839      	ldr	r1, [r7, #0]
 801033c:	68b8      	ldr	r0, [r7, #8]
 801033e:	f7ff fee8 	bl	8010112 <WIZCHIP_READ_BUF>
   ptr += len;
 8010342:	89fa      	ldrh	r2, [r7, #14]
 8010344:	88bb      	ldrh	r3, [r7, #4]
 8010346:	4413      	add	r3, r2
 8010348:	b29b      	uxth	r3, r3
 801034a:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 801034c:	79fb      	ldrb	r3, [r7, #7]
 801034e:	009b      	lsls	r3, r3, #2
 8010350:	3301      	adds	r3, #1
 8010352:	00db      	lsls	r3, r3, #3
 8010354:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 8010358:	461a      	mov	r2, r3
 801035a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801035e:	121b      	asrs	r3, r3, #8
 8010360:	b21b      	sxth	r3, r3
 8010362:	b2db      	uxtb	r3, r3
 8010364:	4619      	mov	r1, r3
 8010366:	4610      	mov	r0, r2
 8010368:	f7ff fea2 	bl	80100b0 <WIZCHIP_WRITE>
 801036c:	79fb      	ldrb	r3, [r7, #7]
 801036e:	009b      	lsls	r3, r3, #2
 8010370:	3301      	adds	r3, #1
 8010372:	00da      	lsls	r2, r3, #3
 8010374:	4b06      	ldr	r3, [pc, #24]	; (8010390 <wiz_recv_data+0xc4>)
 8010376:	4413      	add	r3, r2
 8010378:	461a      	mov	r2, r3
 801037a:	89fb      	ldrh	r3, [r7, #14]
 801037c:	b2db      	uxtb	r3, r3
 801037e:	4619      	mov	r1, r3
 8010380:	4610      	mov	r0, r2
 8010382:	f7ff fe95 	bl	80100b0 <WIZCHIP_WRITE>
 8010386:	e000      	b.n	801038a <wiz_recv_data+0xbe>
   if(len == 0) return;
 8010388:	bf00      	nop
}
 801038a:	3714      	adds	r7, #20
 801038c:	46bd      	mov	sp, r7
 801038e:	bd90      	pop	{r4, r7, pc}
 8010390:	00022900 	.word	0x00022900

08010394 <socket>:
   }while(0);



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{ 
 8010394:	b590      	push	{r4, r7, lr}
 8010396:	b08d      	sub	sp, #52	; 0x34
 8010398:	af00      	add	r7, sp, #0
 801039a:	4604      	mov	r4, r0
 801039c:	4608      	mov	r0, r1
 801039e:	4611      	mov	r1, r2
 80103a0:	461a      	mov	r2, r3
 80103a2:	4623      	mov	r3, r4
 80103a4:	71fb      	strb	r3, [r7, #7]
 80103a6:	4603      	mov	r3, r0
 80103a8:	71bb      	strb	r3, [r7, #6]
 80103aa:	460b      	mov	r3, r1
 80103ac:	80bb      	strh	r3, [r7, #4]
 80103ae:	4613      	mov	r3, r2
 80103b0:	70fb      	strb	r3, [r7, #3]
   uint8_t taddr[16];
   uint16_t local_port=0;
 80103b2:	2300      	movs	r3, #0
 80103b4:	83fb      	strh	r3, [r7, #30]
   CHECK_SOCKNUM(); 
 80103b6:	79fb      	ldrb	r3, [r7, #7]
 80103b8:	2b07      	cmp	r3, #7
 80103ba:	d902      	bls.n	80103c2 <socket+0x2e>
 80103bc:	f04f 33ff 	mov.w	r3, #4294967295
 80103c0:	e1c8      	b.n	8010754 <socket+0x3c0>
   switch (protocol & 0x0F)
 80103c2:	79bb      	ldrb	r3, [r7, #6]
 80103c4:	f003 030f 	and.w	r3, r3, #15
 80103c8:	3b01      	subs	r3, #1
 80103ca:	2b0d      	cmp	r3, #13
 80103cc:	f200 80b8 	bhi.w	8010540 <socket+0x1ac>
 80103d0:	a201      	add	r2, pc, #4	; (adr r2, 80103d8 <socket+0x44>)
 80103d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103d6:	bf00      	nop
 80103d8:	08010411 	.word	0x08010411
 80103dc:	08010547 	.word	0x08010547
 80103e0:	08010547 	.word	0x08010547
 80103e4:	08010541 	.word	0x08010541
 80103e8:	08010541 	.word	0x08010541
 80103ec:	08010541 	.word	0x08010541
 80103f0:	08010547 	.word	0x08010547
 80103f4:	08010541 	.word	0x08010541
 80103f8:	0801045d 	.word	0x0801045d
 80103fc:	08010547 	.word	0x08010547
 8010400:	08010547 	.word	0x08010547
 8010404:	08010541 	.word	0x08010541
 8010408:	080104a9 	.word	0x080104a9
 801040c:	08010547 	.word	0x08010547
   {
      case Sn_MR_TCP4 :
         getSIPR(taddr);
 8010410:	f107 030c 	add.w	r3, r7, #12
 8010414:	2204      	movs	r2, #4
 8010416:	4619      	mov	r1, r3
 8010418:	4873      	ldr	r0, [pc, #460]	; (80105e8 <socket+0x254>)
 801041a:	f7ff fe7a 	bl	8010112 <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 4);
 801041e:	2300      	movs	r3, #0
 8010420:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010422:	2300      	movs	r3, #0
 8010424:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8010428:	e00e      	b.n	8010448 <socket+0xb4>
 801042a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801042e:	3330      	adds	r3, #48	; 0x30
 8010430:	443b      	add	r3, r7
 8010432:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8010436:	b29a      	uxth	r2, r3
 8010438:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801043a:	4413      	add	r3, r2
 801043c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801043e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010442:	3301      	adds	r3, #1
 8010444:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8010448:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801044c:	2b03      	cmp	r3, #3
 801044e:	d9ec      	bls.n	801042a <socket+0x96>
 8010450:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010452:	2b00      	cmp	r3, #0
 8010454:	d179      	bne.n	801054a <socket+0x1b6>
 8010456:	f06f 030b 	mvn.w	r3, #11
 801045a:	e17b      	b.n	8010754 <socket+0x3c0>
         break;
      case Sn_MR_TCP6 :
         getLLAR(taddr);
 801045c:	f107 030c 	add.w	r3, r7, #12
 8010460:	2210      	movs	r2, #16
 8010462:	4619      	mov	r1, r3
 8010464:	4861      	ldr	r0, [pc, #388]	; (80105ec <socket+0x258>)
 8010466:	f7ff fe54 	bl	8010112 <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 16);
 801046a:	2300      	movs	r3, #0
 801046c:	857b      	strh	r3, [r7, #42]	; 0x2a
 801046e:	2300      	movs	r3, #0
 8010470:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8010474:	e00e      	b.n	8010494 <socket+0x100>
 8010476:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801047a:	3330      	adds	r3, #48	; 0x30
 801047c:	443b      	add	r3, r7
 801047e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8010482:	b29a      	uxth	r2, r3
 8010484:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010486:	4413      	add	r3, r2
 8010488:	857b      	strh	r3, [r7, #42]	; 0x2a
 801048a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801048e:	3301      	adds	r3, #1
 8010490:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8010494:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8010498:	2b0f      	cmp	r3, #15
 801049a:	d9ec      	bls.n	8010476 <socket+0xe2>
 801049c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d155      	bne.n	801054e <socket+0x1ba>
 80104a2:	f06f 030b 	mvn.w	r3, #11
 80104a6:	e155      	b.n	8010754 <socket+0x3c0>
         //getGUAR(taddr);
         //CHECK_IPZERO(taddr, 16);
         break;
      case Sn_MR_TCPD :  
         getSIPR(taddr);
 80104a8:	f107 030c 	add.w	r3, r7, #12
 80104ac:	2204      	movs	r2, #4
 80104ae:	4619      	mov	r1, r3
 80104b0:	484d      	ldr	r0, [pc, #308]	; (80105e8 <socket+0x254>)
 80104b2:	f7ff fe2e 	bl	8010112 <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 4);
 80104b6:	2300      	movs	r3, #0
 80104b8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80104ba:	2300      	movs	r3, #0
 80104bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80104c0:	e00e      	b.n	80104e0 <socket+0x14c>
 80104c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80104c6:	3330      	adds	r3, #48	; 0x30
 80104c8:	443b      	add	r3, r7
 80104ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80104ce:	b29a      	uxth	r2, r3
 80104d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80104d2:	4413      	add	r3, r2
 80104d4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80104d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80104da:	3301      	adds	r3, #1
 80104dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80104e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80104e4:	2b03      	cmp	r3, #3
 80104e6:	d9ec      	bls.n	80104c2 <socket+0x12e>
 80104e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d102      	bne.n	80104f4 <socket+0x160>
 80104ee:	f06f 030b 	mvn.w	r3, #11
 80104f2:	e12f      	b.n	8010754 <socket+0x3c0>
         getLLAR(taddr);
 80104f4:	f107 030c 	add.w	r3, r7, #12
 80104f8:	2210      	movs	r2, #16
 80104fa:	4619      	mov	r1, r3
 80104fc:	483b      	ldr	r0, [pc, #236]	; (80105ec <socket+0x258>)
 80104fe:	f7ff fe08 	bl	8010112 <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 16);
 8010502:	2300      	movs	r3, #0
 8010504:	847b      	strh	r3, [r7, #34]	; 0x22
 8010506:	2300      	movs	r3, #0
 8010508:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 801050c:	e00e      	b.n	801052c <socket+0x198>
 801050e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010512:	3330      	adds	r3, #48	; 0x30
 8010514:	443b      	add	r3, r7
 8010516:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 801051a:	b29a      	uxth	r2, r3
 801051c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801051e:	4413      	add	r3, r2
 8010520:	847b      	strh	r3, [r7, #34]	; 0x22
 8010522:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010526:	3301      	adds	r3, #1
 8010528:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 801052c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010530:	2b0f      	cmp	r3, #15
 8010532:	d9ec      	bls.n	801050e <socket+0x17a>
 8010534:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010536:	2b00      	cmp	r3, #0
 8010538:	d10b      	bne.n	8010552 <socket+0x1be>
 801053a:	f06f 030b 	mvn.w	r3, #11
 801053e:	e109      	b.n	8010754 <socket+0x3c0>
      case Sn_MR_MACRAW :
      case Sn_MR_IPRAW4 :
      case Sn_MR_IPRAW6 :
         break; 
      default :
        return SOCKERR_SOCKMODE;
 8010540:	f06f 0304 	mvn.w	r3, #4
 8010544:	e106      	b.n	8010754 <socket+0x3c0>
         break; 
 8010546:	bf00      	nop
 8010548:	e004      	b.n	8010554 <socket+0x1c0>
         break;
 801054a:	bf00      	nop
 801054c:	e002      	b.n	8010554 <socket+0x1c0>
         break;
 801054e:	bf00      	nop
 8010550:	e000      	b.n	8010554 <socket+0x1c0>
         break;
 8010552:	bf00      	nop
   } 

   if((flag & 0x04)) return SOCKERR_SOCKFLAG;
 8010554:	78fb      	ldrb	r3, [r7, #3]
 8010556:	f003 0304 	and.w	r3, r3, #4
 801055a:	2b00      	cmp	r3, #0
 801055c:	d002      	beq.n	8010564 <socket+0x1d0>
 801055e:	f06f 0305 	mvn.w	r3, #5
 8010562:	e0f7      	b.n	8010754 <socket+0x3c0>
   if(flag != 0)
 8010564:	78fb      	ldrb	r3, [r7, #3]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d036      	beq.n	80105d8 <socket+0x244>
   {
      switch(protocol)
 801056a:	79bb      	ldrb	r3, [r7, #6]
 801056c:	3b01      	subs	r3, #1
 801056e:	2b0c      	cmp	r3, #12
 8010570:	d834      	bhi.n	80105dc <socket+0x248>
 8010572:	a201      	add	r2, pc, #4	; (adr r2, 8010578 <socket+0x1e4>)
 8010574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010578:	080105bd 	.word	0x080105bd
 801057c:	080105dd 	.word	0x080105dd
 8010580:	080105cd 	.word	0x080105cd
 8010584:	080105dd 	.word	0x080105dd
 8010588:	080105dd 	.word	0x080105dd
 801058c:	080105dd 	.word	0x080105dd
 8010590:	080105ad 	.word	0x080105ad
 8010594:	080105dd 	.word	0x080105dd
 8010598:	080105bd 	.word	0x080105bd
 801059c:	080105dd 	.word	0x080105dd
 80105a0:	080105cd 	.word	0x080105cd
 80105a4:	080105dd 	.word	0x080105dd
 80105a8:	080105bd 	.word	0x080105bd
      {
         case Sn_MR_MACRAW:
            if((flag & (SF_DHA_MANUAL | SF_FORCE_ARP)) != 0)
 80105ac:	78fb      	ldrb	r3, [r7, #3]
 80105ae:	f003 0303 	and.w	r3, r3, #3
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d014      	beq.n	80105e0 <socket+0x24c>
            	return SOCKERR_SOCKFLAG;
 80105b6:	f06f 0305 	mvn.w	r3, #5
 80105ba:	e0cb      	b.n	8010754 <socket+0x3c0>
            break;
         case Sn_MR_TCP4:
         case Sn_MR_TCP6:
         case Sn_MR_TCPD:     
            if((flag & (SF_MULTI_ENABLE | SF_UNI_BLOCK)) !=0)
 80105bc:	78fb      	ldrb	r3, [r7, #3]
 80105be:	f003 0390 	and.w	r3, r3, #144	; 0x90
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d00e      	beq.n	80105e4 <socket+0x250>
            	return SOCKERR_SOCKFLAG;
 80105c6:	f06f 0305 	mvn.w	r3, #5
 80105ca:	e0c3      	b.n	8010754 <socket+0x3c0>
            break;
         case Sn_MR_IPRAW4:
         case Sn_MR_IPRAW6:
            if(flag !=0)
 80105cc:	78fb      	ldrb	r3, [r7, #3]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d00e      	beq.n	80105f0 <socket+0x25c>
            	return SOCKERR_SOCKFLAG;
 80105d2:	f06f 0305 	mvn.w	r3, #5
 80105d6:	e0bd      	b.n	8010754 <socket+0x3c0>
            break;
         default:
            break;
      }
   }
 80105d8:	bf00      	nop
 80105da:	e00a      	b.n	80105f2 <socket+0x25e>
            break;
 80105dc:	bf00      	nop
 80105de:	e008      	b.n	80105f2 <socket+0x25e>
            break;
 80105e0:	bf00      	nop
 80105e2:	e006      	b.n	80105f2 <socket+0x25e>
            break;
 80105e4:	bf00      	nop
 80105e6:	e004      	b.n	80105f2 <socket+0x25e>
 80105e8:	00413800 	.word	0x00413800
 80105ec:	00414000 	.word	0x00414000
            break;
 80105f0:	bf00      	nop
   close(sn);
 80105f2:	79fb      	ldrb	r3, [r7, #7]
 80105f4:	4618      	mov	r0, r3
 80105f6:	f000 f8bd 	bl	8010774 <close>
   setSn_MR(sn,(protocol | (flag & 0xF0)));
 80105fa:	79fb      	ldrb	r3, [r7, #7]
 80105fc:	009b      	lsls	r3, r3, #2
 80105fe:	3301      	adds	r3, #1
 8010600:	00db      	lsls	r3, r3, #3
 8010602:	4618      	mov	r0, r3
 8010604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010608:	f023 030f 	bic.w	r3, r3, #15
 801060c:	b25a      	sxtb	r2, r3
 801060e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010612:	4313      	orrs	r3, r2
 8010614:	b25b      	sxtb	r3, r3
 8010616:	b2db      	uxtb	r3, r3
 8010618:	4619      	mov	r1, r3
 801061a:	f7ff fd49 	bl	80100b0 <WIZCHIP_WRITE>
   setSn_MR2(sn, flag & 0x03);  
 801061e:	79fb      	ldrb	r3, [r7, #7]
 8010620:	009b      	lsls	r3, r3, #2
 8010622:	3301      	adds	r3, #1
 8010624:	00db      	lsls	r3, r3, #3
 8010626:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 801062a:	461a      	mov	r2, r3
 801062c:	78fb      	ldrb	r3, [r7, #3]
 801062e:	f003 0303 	and.w	r3, r3, #3
 8010632:	b2db      	uxtb	r3, r3
 8010634:	4619      	mov	r1, r3
 8010636:	4610      	mov	r0, r2
 8010638:	f7ff fd3a 	bl	80100b0 <WIZCHIP_WRITE>
   if(!port)
 801063c:	88bb      	ldrh	r3, [r7, #4]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d110      	bne.n	8010664 <socket+0x2d0>
   {
      port = sock_any_port++;
 8010642:	4b46      	ldr	r3, [pc, #280]	; (801075c <socket+0x3c8>)
 8010644:	881b      	ldrh	r3, [r3, #0]
 8010646:	1c5a      	adds	r2, r3, #1
 8010648:	b291      	uxth	r1, r2
 801064a:	4a44      	ldr	r2, [pc, #272]	; (801075c <socket+0x3c8>)
 801064c:	8011      	strh	r1, [r2, #0]
 801064e:	80bb      	strh	r3, [r7, #4]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8010650:	4b42      	ldr	r3, [pc, #264]	; (801075c <socket+0x3c8>)
 8010652:	881b      	ldrh	r3, [r3, #0]
 8010654:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8010658:	4293      	cmp	r3, r2
 801065a:	d103      	bne.n	8010664 <socket+0x2d0>
 801065c:	4b3f      	ldr	r3, [pc, #252]	; (801075c <socket+0x3c8>)
 801065e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010662:	801a      	strh	r2, [r3, #0]
   }
   setSn_PORTR(sn,port);
 8010664:	79fb      	ldrb	r3, [r7, #7]
 8010666:	009b      	lsls	r3, r3, #2
 8010668:	3301      	adds	r3, #1
 801066a:	00db      	lsls	r3, r3, #3
 801066c:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8010670:	461a      	mov	r2, r3
 8010672:	88bb      	ldrh	r3, [r7, #4]
 8010674:	0a1b      	lsrs	r3, r3, #8
 8010676:	b29b      	uxth	r3, r3
 8010678:	b2db      	uxtb	r3, r3
 801067a:	4619      	mov	r1, r3
 801067c:	4610      	mov	r0, r2
 801067e:	f7ff fd17 	bl	80100b0 <WIZCHIP_WRITE>
 8010682:	79fb      	ldrb	r3, [r7, #7]
 8010684:	009b      	lsls	r3, r3, #2
 8010686:	3301      	adds	r3, #1
 8010688:	00da      	lsls	r2, r3, #3
 801068a:	4b35      	ldr	r3, [pc, #212]	; (8010760 <socket+0x3cc>)
 801068c:	4413      	add	r3, r2
 801068e:	461a      	mov	r2, r3
 8010690:	88bb      	ldrh	r3, [r7, #4]
 8010692:	b2db      	uxtb	r3, r3
 8010694:	4619      	mov	r1, r3
 8010696:	4610      	mov	r0, r2
 8010698:	f7ff fd0a 	bl	80100b0 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 801069c:	79fb      	ldrb	r3, [r7, #7]
 801069e:	009b      	lsls	r3, r3, #2
 80106a0:	3301      	adds	r3, #1
 80106a2:	00db      	lsls	r3, r3, #3
 80106a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106a8:	2101      	movs	r1, #1
 80106aa:	4618      	mov	r0, r3
 80106ac:	f7ff fd00 	bl	80100b0 <WIZCHIP_WRITE>

   while(getSn_CR(sn));
 80106b0:	bf00      	nop
 80106b2:	79fb      	ldrb	r3, [r7, #7]
 80106b4:	009b      	lsls	r3, r3, #2
 80106b6:	3301      	adds	r3, #1
 80106b8:	00db      	lsls	r3, r3, #3
 80106ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106be:	4618      	mov	r0, r3
 80106c0:	f7ff fd06 	bl	80100d0 <WIZCHIP_READ>
 80106c4:	4603      	mov	r3, r0
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d1f3      	bne.n	80106b2 <socket+0x31e>

   sock_io_mode &= ~(1 <<sn);
 80106ca:	79fb      	ldrb	r3, [r7, #7]
 80106cc:	2201      	movs	r2, #1
 80106ce:	fa02 f303 	lsl.w	r3, r2, r3
 80106d2:	b21b      	sxth	r3, r3
 80106d4:	43db      	mvns	r3, r3
 80106d6:	b21a      	sxth	r2, r3
 80106d8:	4b22      	ldr	r3, [pc, #136]	; (8010764 <socket+0x3d0>)
 80106da:	881b      	ldrh	r3, [r3, #0]
 80106dc:	b21b      	sxth	r3, r3
 80106de:	4013      	ands	r3, r2
 80106e0:	b21b      	sxth	r3, r3
 80106e2:	b29a      	uxth	r2, r3
 80106e4:	4b1f      	ldr	r3, [pc, #124]	; (8010764 <socket+0x3d0>)
 80106e6:	801a      	strh	r2, [r3, #0]
   sock_io_mode |= ((flag & (SF_IO_NONBLOCK>>3)) << sn);
 80106e8:	78fb      	ldrb	r3, [r7, #3]
 80106ea:	f003 0201 	and.w	r2, r3, #1
 80106ee:	79fb      	ldrb	r3, [r7, #7]
 80106f0:	fa02 f303 	lsl.w	r3, r2, r3
 80106f4:	b21a      	sxth	r2, r3
 80106f6:	4b1b      	ldr	r3, [pc, #108]	; (8010764 <socket+0x3d0>)
 80106f8:	881b      	ldrh	r3, [r3, #0]
 80106fa:	b21b      	sxth	r3, r3
 80106fc:	4313      	orrs	r3, r2
 80106fe:	b21b      	sxth	r3, r3
 8010700:	b29a      	uxth	r2, r3
 8010702:	4b18      	ldr	r3, [pc, #96]	; (8010764 <socket+0x3d0>)
 8010704:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8010706:	79fb      	ldrb	r3, [r7, #7]
 8010708:	2201      	movs	r2, #1
 801070a:	fa02 f303 	lsl.w	r3, r2, r3
 801070e:	b21b      	sxth	r3, r3
 8010710:	43db      	mvns	r3, r3
 8010712:	b21a      	sxth	r2, r3
 8010714:	4b14      	ldr	r3, [pc, #80]	; (8010768 <socket+0x3d4>)
 8010716:	881b      	ldrh	r3, [r3, #0]
 8010718:	b21b      	sxth	r3, r3
 801071a:	4013      	ands	r3, r2
 801071c:	b21b      	sxth	r3, r3
 801071e:	b29a      	uxth	r2, r3
 8010720:	4b11      	ldr	r3, [pc, #68]	; (8010768 <socket+0x3d4>)
 8010722:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8010724:	79fb      	ldrb	r3, [r7, #7]
 8010726:	4a11      	ldr	r2, [pc, #68]	; (801076c <socket+0x3d8>)
 8010728:	2100      	movs	r1, #0
 801072a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 801072e:	79fb      	ldrb	r3, [r7, #7]
 8010730:	4a0f      	ldr	r2, [pc, #60]	; (8010770 <socket+0x3dc>)
 8010732:	2100      	movs	r1, #0
 8010734:	54d1      	strb	r1, [r2, r3]

   while(getSn_SR(sn) == SOCK_CLOSED) ;
 8010736:	bf00      	nop
 8010738:	79fb      	ldrb	r3, [r7, #7]
 801073a:	009b      	lsls	r3, r3, #2
 801073c:	3301      	adds	r3, #1
 801073e:	00db      	lsls	r3, r3, #3
 8010740:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010744:	4618      	mov	r0, r3
 8010746:	f7ff fcc3 	bl	80100d0 <WIZCHIP_READ>
 801074a:	4603      	mov	r3, r0
 801074c:	2b00      	cmp	r3, #0
 801074e:	d0f3      	beq.n	8010738 <socket+0x3a4>
//   printf("[%d]%d\r\n", sn, getSn_PORTR(sn));
   return sn;
 8010750:	f997 3007 	ldrsb.w	r3, [r7, #7]
}  
 8010754:	4618      	mov	r0, r3
 8010756:	3734      	adds	r7, #52	; 0x34
 8010758:	46bd      	mov	sp, r7
 801075a:	bd90      	pop	{r4, r7, pc}
 801075c:	240000ec 	.word	0x240000ec
 8010760:	00011500 	.word	0x00011500
 8010764:	2400d248 	.word	0x2400d248
 8010768:	2400d24a 	.word	0x2400d24a
 801076c:	2400d24c 	.word	0x2400d24c
 8010770:	2400d25c 	.word	0x2400d25c

08010774 <close>:


int8_t close(uint8_t sn)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b082      	sub	sp, #8
 8010778:	af00      	add	r7, sp, #0
 801077a:	4603      	mov	r3, r0
 801077c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 801077e:	79fb      	ldrb	r3, [r7, #7]
 8010780:	2b07      	cmp	r3, #7
 8010782:	d902      	bls.n	801078a <close+0x16>
 8010784:	f04f 33ff 	mov.w	r3, #4294967295
 8010788:	e055      	b.n	8010836 <close+0xc2>
   setSn_CR(sn,Sn_CR_CLOSE);
 801078a:	79fb      	ldrb	r3, [r7, #7]
 801078c:	009b      	lsls	r3, r3, #2
 801078e:	3301      	adds	r3, #1
 8010790:	00db      	lsls	r3, r3, #3
 8010792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010796:	2110      	movs	r1, #16
 8010798:	4618      	mov	r0, r3
 801079a:	f7ff fc89 	bl	80100b0 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 801079e:	bf00      	nop
 80107a0:	79fb      	ldrb	r3, [r7, #7]
 80107a2:	009b      	lsls	r3, r3, #2
 80107a4:	3301      	adds	r3, #1
 80107a6:	00db      	lsls	r3, r3, #3
 80107a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107ac:	4618      	mov	r0, r3
 80107ae:	f7ff fc8f 	bl	80100d0 <WIZCHIP_READ>
 80107b2:	4603      	mov	r3, r0
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d1f3      	bne.n	80107a0 <close+0x2c>
   /* clear all interrupt of SOCKETn. */
   setSn_IRCLR(sn, 0xFF);
 80107b8:	79fb      	ldrb	r3, [r7, #7]
 80107ba:	009b      	lsls	r3, r3, #2
 80107bc:	3301      	adds	r3, #1
 80107be:	00db      	lsls	r3, r3, #3
 80107c0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80107c4:	21ff      	movs	r1, #255	; 0xff
 80107c6:	4618      	mov	r0, r3
 80107c8:	f7ff fc72 	bl	80100b0 <WIZCHIP_WRITE>
   /* Release the sock_io_mode of SOCKETn. */
   sock_io_mode &= ~(1<<sn); 
 80107cc:	79fb      	ldrb	r3, [r7, #7]
 80107ce:	2201      	movs	r2, #1
 80107d0:	fa02 f303 	lsl.w	r3, r2, r3
 80107d4:	b21b      	sxth	r3, r3
 80107d6:	43db      	mvns	r3, r3
 80107d8:	b21a      	sxth	r2, r3
 80107da:	4b19      	ldr	r3, [pc, #100]	; (8010840 <close+0xcc>)
 80107dc:	881b      	ldrh	r3, [r3, #0]
 80107de:	b21b      	sxth	r3, r3
 80107e0:	4013      	ands	r3, r2
 80107e2:	b21b      	sxth	r3, r3
 80107e4:	b29a      	uxth	r2, r3
 80107e6:	4b16      	ldr	r3, [pc, #88]	; (8010840 <close+0xcc>)
 80107e8:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80107ea:	79fb      	ldrb	r3, [r7, #7]
 80107ec:	4a15      	ldr	r2, [pc, #84]	; (8010844 <close+0xd0>)
 80107ee:	2100      	movs	r1, #0
 80107f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_is_sending &= ~(1<<sn);
 80107f4:	79fb      	ldrb	r3, [r7, #7]
 80107f6:	2201      	movs	r2, #1
 80107f8:	fa02 f303 	lsl.w	r3, r2, r3
 80107fc:	b21b      	sxth	r3, r3
 80107fe:	43db      	mvns	r3, r3
 8010800:	b21a      	sxth	r2, r3
 8010802:	4b11      	ldr	r3, [pc, #68]	; (8010848 <close+0xd4>)
 8010804:	881b      	ldrh	r3, [r3, #0]
 8010806:	b21b      	sxth	r3, r3
 8010808:	4013      	ands	r3, r2
 801080a:	b21b      	sxth	r3, r3
 801080c:	b29a      	uxth	r2, r3
 801080e:	4b0e      	ldr	r3, [pc, #56]	; (8010848 <close+0xd4>)
 8010810:	801a      	strh	r2, [r3, #0]
   sock_pack_info[sn] = PACK_NONE;
 8010812:	79fb      	ldrb	r3, [r7, #7]
 8010814:	4a0d      	ldr	r2, [pc, #52]	; (801084c <close+0xd8>)
 8010816:	2100      	movs	r1, #0
 8010818:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) != SOCK_CLOSED);
 801081a:	bf00      	nop
 801081c:	79fb      	ldrb	r3, [r7, #7]
 801081e:	009b      	lsls	r3, r3, #2
 8010820:	3301      	adds	r3, #1
 8010822:	00db      	lsls	r3, r3, #3
 8010824:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010828:	4618      	mov	r0, r3
 801082a:	f7ff fc51 	bl	80100d0 <WIZCHIP_READ>
 801082e:	4603      	mov	r3, r0
 8010830:	2b00      	cmp	r3, #0
 8010832:	d1f3      	bne.n	801081c <close+0xa8>
   return SOCK_OK;
 8010834:	2301      	movs	r3, #1
}
 8010836:	4618      	mov	r0, r3
 8010838:	3708      	adds	r7, #8
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}
 801083e:	bf00      	nop
 8010840:	2400d248 	.word	0x2400d248
 8010844:	2400d24c 	.word	0x2400d24c
 8010848:	2400d24a 	.word	0x2400d24a
 801084c:	2400d25c 	.word	0x2400d25c

08010850 <listen>:


int8_t listen(uint8_t sn)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b082      	sub	sp, #8
 8010854:	af00      	add	r7, sp, #0
 8010856:	4603      	mov	r3, r0
 8010858:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 801085a:	79fb      	ldrb	r3, [r7, #7]
 801085c:	2b07      	cmp	r3, #7
 801085e:	d902      	bls.n	8010866 <listen+0x16>
 8010860:	f04f 33ff 	mov.w	r3, #4294967295
 8010864:	e03a      	b.n	80108dc <listen+0x8c>
   CHECK_SOCKINIT();
 8010866:	79fb      	ldrb	r3, [r7, #7]
 8010868:	009b      	lsls	r3, r3, #2
 801086a:	3301      	adds	r3, #1
 801086c:	00db      	lsls	r3, r3, #3
 801086e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010872:	4618      	mov	r0, r3
 8010874:	f7ff fc2c 	bl	80100d0 <WIZCHIP_READ>
 8010878:	4603      	mov	r3, r0
 801087a:	2b13      	cmp	r3, #19
 801087c:	d002      	beq.n	8010884 <listen+0x34>
 801087e:	f06f 0302 	mvn.w	r3, #2
 8010882:	e02b      	b.n	80108dc <listen+0x8c>
   setSn_CR(sn,Sn_CR_LISTEN);
 8010884:	79fb      	ldrb	r3, [r7, #7]
 8010886:	009b      	lsls	r3, r3, #2
 8010888:	3301      	adds	r3, #1
 801088a:	00db      	lsls	r3, r3, #3
 801088c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010890:	2102      	movs	r1, #2
 8010892:	4618      	mov	r0, r3
 8010894:	f7ff fc0c 	bl	80100b0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8010898:	bf00      	nop
 801089a:	79fb      	ldrb	r3, [r7, #7]
 801089c:	009b      	lsls	r3, r3, #2
 801089e:	3301      	adds	r3, #1
 80108a0:	00db      	lsls	r3, r3, #3
 80108a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7ff fc12 	bl	80100d0 <WIZCHIP_READ>
 80108ac:	4603      	mov	r3, r0
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d1f3      	bne.n	801089a <listen+0x4a>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80108b2:	e006      	b.n	80108c2 <listen+0x72>
   {
      close(sn);
 80108b4:	79fb      	ldrb	r3, [r7, #7]
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7ff ff5c 	bl	8010774 <close>
      return SOCKERR_SOCKCLOSED;
 80108bc:	f06f 0303 	mvn.w	r3, #3
 80108c0:	e00c      	b.n	80108dc <listen+0x8c>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80108c2:	79fb      	ldrb	r3, [r7, #7]
 80108c4:	009b      	lsls	r3, r3, #2
 80108c6:	3301      	adds	r3, #1
 80108c8:	00db      	lsls	r3, r3, #3
 80108ca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80108ce:	4618      	mov	r0, r3
 80108d0:	f7ff fbfe 	bl	80100d0 <WIZCHIP_READ>
 80108d4:	4603      	mov	r3, r0
 80108d6:	2b14      	cmp	r3, #20
 80108d8:	d1ec      	bne.n	80108b4 <listen+0x64>
   }
   return SOCK_OK;
 80108da:	2301      	movs	r3, #1
}
 80108dc:	4618      	mov	r0, r3
 80108de:	3708      	adds	r7, #8
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}

080108e4 <disconnect>:
   } 
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b082      	sub	sp, #8
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	4603      	mov	r3, r0
 80108ec:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80108ee:	79fb      	ldrb	r3, [r7, #7]
 80108f0:	2b07      	cmp	r3, #7
 80108f2:	d902      	bls.n	80108fa <disconnect+0x16>
 80108f4:	f04f 33ff 	mov.w	r3, #4294967295
 80108f8:	e05f      	b.n	80109ba <disconnect+0xd6>
   CHECK_TCPMODE();
 80108fa:	79fb      	ldrb	r3, [r7, #7]
 80108fc:	009b      	lsls	r3, r3, #2
 80108fe:	3301      	adds	r3, #1
 8010900:	00db      	lsls	r3, r3, #3
 8010902:	4618      	mov	r0, r3
 8010904:	f7ff fbe4 	bl	80100d0 <WIZCHIP_READ>
 8010908:	4603      	mov	r3, r0
 801090a:	f003 0303 	and.w	r3, r3, #3
 801090e:	2b01      	cmp	r3, #1
 8010910:	d002      	beq.n	8010918 <disconnect+0x34>
 8010912:	f06f 0304 	mvn.w	r3, #4
 8010916:	e050      	b.n	80109ba <disconnect+0xd6>
   if(getSn_SR(sn) != SOCK_CLOSED)
 8010918:	79fb      	ldrb	r3, [r7, #7]
 801091a:	009b      	lsls	r3, r3, #2
 801091c:	3301      	adds	r3, #1
 801091e:	00db      	lsls	r3, r3, #3
 8010920:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010924:	4618      	mov	r0, r3
 8010926:	f7ff fbd3 	bl	80100d0 <WIZCHIP_READ>
 801092a:	4603      	mov	r3, r0
 801092c:	2b00      	cmp	r3, #0
 801092e:	d043      	beq.n	80109b8 <disconnect+0xd4>
   {
      setSn_CR(sn,Sn_CR_DISCON);
 8010930:	79fb      	ldrb	r3, [r7, #7]
 8010932:	009b      	lsls	r3, r3, #2
 8010934:	3301      	adds	r3, #1
 8010936:	00db      	lsls	r3, r3, #3
 8010938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801093c:	2108      	movs	r1, #8
 801093e:	4618      	mov	r0, r3
 8010940:	f7ff fbb6 	bl	80100b0 <WIZCHIP_WRITE>
      /* wait to process the command... */
      while(getSn_CR(sn));
 8010944:	bf00      	nop
 8010946:	79fb      	ldrb	r3, [r7, #7]
 8010948:	009b      	lsls	r3, r3, #2
 801094a:	3301      	adds	r3, #1
 801094c:	00db      	lsls	r3, r3, #3
 801094e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010952:	4618      	mov	r0, r3
 8010954:	f7ff fbbc 	bl	80100d0 <WIZCHIP_READ>
 8010958:	4603      	mov	r3, r0
 801095a:	2b00      	cmp	r3, #0
 801095c:	d1f3      	bne.n	8010946 <disconnect+0x62>
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 801095e:	4b19      	ldr	r3, [pc, #100]	; (80109c4 <disconnect+0xe0>)
 8010960:	881b      	ldrh	r3, [r3, #0]
 8010962:	461a      	mov	r2, r3
 8010964:	79fb      	ldrb	r3, [r7, #7]
 8010966:	fa42 f303 	asr.w	r3, r2, r3
 801096a:	f003 0301 	and.w	r3, r3, #1
 801096e:	2b00      	cmp	r3, #0
 8010970:	d016      	beq.n	80109a0 <disconnect+0xbc>
 8010972:	2300      	movs	r3, #0
 8010974:	e021      	b.n	80109ba <disconnect+0xd6>
      while(getSn_SR(sn) != SOCK_CLOSED)
      {
         if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8010976:	79fb      	ldrb	r3, [r7, #7]
 8010978:	009b      	lsls	r3, r3, #2
 801097a:	3301      	adds	r3, #1
 801097c:	00db      	lsls	r3, r3, #3
 801097e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010982:	4618      	mov	r0, r3
 8010984:	f7ff fba4 	bl	80100d0 <WIZCHIP_READ>
 8010988:	4603      	mov	r3, r0
 801098a:	f003 0308 	and.w	r3, r3, #8
 801098e:	2b00      	cmp	r3, #0
 8010990:	d006      	beq.n	80109a0 <disconnect+0xbc>
         {
            close(sn);
 8010992:	79fb      	ldrb	r3, [r7, #7]
 8010994:	4618      	mov	r0, r3
 8010996:	f7ff feed 	bl	8010774 <close>
            return SOCKERR_TIMEOUT;
 801099a:	f06f 030c 	mvn.w	r3, #12
 801099e:	e00c      	b.n	80109ba <disconnect+0xd6>
      while(getSn_SR(sn) != SOCK_CLOSED)
 80109a0:	79fb      	ldrb	r3, [r7, #7]
 80109a2:	009b      	lsls	r3, r3, #2
 80109a4:	3301      	adds	r3, #1
 80109a6:	00db      	lsls	r3, r3, #3
 80109a8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7ff fb8f 	bl	80100d0 <WIZCHIP_READ>
 80109b2:	4603      	mov	r3, r0
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d1de      	bne.n	8010976 <disconnect+0x92>
         }
      }
   }
   return SOCK_OK;
 80109b8:	2301      	movs	r3, #1
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	3708      	adds	r7, #8
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd80      	pop	{r7, pc}
 80109c2:	bf00      	nop
 80109c4:	2400d248 	.word	0x2400d248

080109c8 <send>:


datasize_t send(uint8_t sn, uint8_t * buf, datasize_t len)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b084      	sub	sp, #16
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	4603      	mov	r3, r0
 80109d0:	6039      	str	r1, [r7, #0]
 80109d2:	71fb      	strb	r3, [r7, #7]
 80109d4:	4613      	mov	r3, r2
 80109d6:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80109d8:	2300      	movs	r3, #0
 80109da:	73fb      	strb	r3, [r7, #15]
   datasize_t freesize=0;
 80109dc:	2300      	movs	r3, #0
 80109de:	81bb      	strh	r3, [r7, #12]
    */
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE(Sn_MR_TCP4);
   /************/

   freesize = getSn_TxMAX(sn);
 80109e0:	79fb      	ldrb	r3, [r7, #7]
 80109e2:	009b      	lsls	r3, r3, #2
 80109e4:	3301      	adds	r3, #1
 80109e6:	00db      	lsls	r3, r3, #3
 80109e8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80109ec:	4618      	mov	r0, r3
 80109ee:	f7ff fb6f 	bl	80100d0 <WIZCHIP_READ>
 80109f2:	4603      	mov	r3, r0
 80109f4:	029b      	lsls	r3, r3, #10
 80109f6:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80109f8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80109fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	dd01      	ble.n	8010a08 <send+0x40>
 8010a04:	89bb      	ldrh	r3, [r7, #12]
 8010a06:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = (datasize_t)getSn_TX_FSR(sn);
 8010a08:	79fb      	ldrb	r3, [r7, #7]
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f7ff fb92 	bl	8010134 <getSn_TX_FSR>
 8010a10:	4603      	mov	r3, r0
 8010a12:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8010a14:	79fb      	ldrb	r3, [r7, #7]
 8010a16:	009b      	lsls	r3, r3, #2
 8010a18:	3301      	adds	r3, #1
 8010a1a:	00db      	lsls	r3, r3, #3
 8010a1c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7ff fb55 	bl	80100d0 <WIZCHIP_READ>
 8010a26:	4603      	mov	r3, r0
 8010a28:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8010a2a:	7bfb      	ldrb	r3, [r7, #15]
 8010a2c:	2b17      	cmp	r3, #23
 8010a2e:	d00c      	beq.n	8010a4a <send+0x82>
 8010a30:	7bfb      	ldrb	r3, [r7, #15]
 8010a32:	2b1c      	cmp	r3, #28
 8010a34:	d009      	beq.n	8010a4a <send+0x82>
      {
         if(tmp == SOCK_CLOSED) close(sn);
 8010a36:	7bfb      	ldrb	r3, [r7, #15]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d103      	bne.n	8010a44 <send+0x7c>
 8010a3c:	79fb      	ldrb	r3, [r7, #7]
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7ff fe98 	bl	8010774 <close>
         return SOCKERR_SOCKSTATUS;
 8010a44:	f06f 0306 	mvn.w	r3, #6
 8010a48:	e097      	b.n	8010b7a <send+0x1b2>
      }
      if(len <= freesize) break;
 8010a4a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8010a4e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010a52:	429a      	cmp	r2, r3
 8010a54:	dd0b      	ble.n	8010a6e <send+0xa6>
      if( sock_io_mode & (1<<sn) ) return SOCK_BUSY;  
 8010a56:	4b4b      	ldr	r3, [pc, #300]	; (8010b84 <send+0x1bc>)
 8010a58:	881b      	ldrh	r3, [r3, #0]
 8010a5a:	461a      	mov	r2, r3
 8010a5c:	79fb      	ldrb	r3, [r7, #7]
 8010a5e:	fa42 f303 	asr.w	r3, r2, r3
 8010a62:	f003 0301 	and.w	r3, r3, #1
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d0ce      	beq.n	8010a08 <send+0x40>
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	e085      	b.n	8010b7a <send+0x1b2>
      if(len <= freesize) break;
 8010a6e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8010a70:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8010a74:	79fb      	ldrb	r3, [r7, #7]
 8010a76:	6839      	ldr	r1, [r7, #0]
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f7ff fbc7 	bl	801020c <wiz_send_data>
   if(sock_is_sending & (1<<sn))
 8010a7e:	4b42      	ldr	r3, [pc, #264]	; (8010b88 <send+0x1c0>)
 8010a80:	881b      	ldrh	r3, [r3, #0]
 8010a82:	461a      	mov	r2, r3
 8010a84:	79fb      	ldrb	r3, [r7, #7]
 8010a86:	fa42 f303 	asr.w	r3, r2, r3
 8010a8a:	f003 0301 	and.w	r3, r3, #1
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d04d      	beq.n	8010b2e <send+0x166>
   {
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8010a92:	e034      	b.n	8010afe <send+0x136>
      {    
         tmp = getSn_SR(sn);
 8010a94:	79fb      	ldrb	r3, [r7, #7]
 8010a96:	009b      	lsls	r3, r3, #2
 8010a98:	3301      	adds	r3, #1
 8010a9a:	00db      	lsls	r3, r3, #3
 8010a9c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f7ff fb15 	bl	80100d0 <WIZCHIP_READ>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	73fb      	strb	r3, [r7, #15]
         if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT) )
 8010aaa:	7bfb      	ldrb	r3, [r7, #15]
 8010aac:	2b17      	cmp	r3, #23
 8010aae:	d01a      	beq.n	8010ae6 <send+0x11e>
 8010ab0:	7bfb      	ldrb	r3, [r7, #15]
 8010ab2:	2b1c      	cmp	r3, #28
 8010ab4:	d017      	beq.n	8010ae6 <send+0x11e>
         {
            if( (tmp == SOCK_CLOSED) || (getSn_IR(sn) & Sn_IR_TIMEOUT) ) close(sn);
 8010ab6:	7bfb      	ldrb	r3, [r7, #15]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d00d      	beq.n	8010ad8 <send+0x110>
 8010abc:	79fb      	ldrb	r3, [r7, #7]
 8010abe:	009b      	lsls	r3, r3, #2
 8010ac0:	3301      	adds	r3, #1
 8010ac2:	00db      	lsls	r3, r3, #3
 8010ac4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7ff fb01 	bl	80100d0 <WIZCHIP_READ>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	f003 0308 	and.w	r3, r3, #8
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d003      	beq.n	8010ae0 <send+0x118>
 8010ad8:	79fb      	ldrb	r3, [r7, #7]
 8010ada:	4618      	mov	r0, r3
 8010adc:	f7ff fe4a 	bl	8010774 <close>
            return SOCKERR_SOCKSTATUS;
 8010ae0:	f06f 0306 	mvn.w	r3, #6
 8010ae4:	e049      	b.n	8010b7a <send+0x1b2>
         }
         if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8010ae6:	4b27      	ldr	r3, [pc, #156]	; (8010b84 <send+0x1bc>)
 8010ae8:	881b      	ldrh	r3, [r3, #0]
 8010aea:	461a      	mov	r2, r3
 8010aec:	79fb      	ldrb	r3, [r7, #7]
 8010aee:	fa42 f303 	asr.w	r3, r2, r3
 8010af2:	f003 0301 	and.w	r3, r3, #1
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d001      	beq.n	8010afe <send+0x136>
 8010afa:	2300      	movs	r3, #0
 8010afc:	e03d      	b.n	8010b7a <send+0x1b2>
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8010afe:	79fb      	ldrb	r3, [r7, #7]
 8010b00:	009b      	lsls	r3, r3, #2
 8010b02:	3301      	adds	r3, #1
 8010b04:	00db      	lsls	r3, r3, #3
 8010b06:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f7ff fae0 	bl	80100d0 <WIZCHIP_READ>
 8010b10:	4603      	mov	r3, r0
 8010b12:	f003 0310 	and.w	r3, r3, #16
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d0bc      	beq.n	8010a94 <send+0xcc>
      } 
      setSn_IRCLR(sn, Sn_IR_SENDOK);
 8010b1a:	79fb      	ldrb	r3, [r7, #7]
 8010b1c:	009b      	lsls	r3, r3, #2
 8010b1e:	3301      	adds	r3, #1
 8010b20:	00db      	lsls	r3, r3, #3
 8010b22:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8010b26:	2110      	movs	r1, #16
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f7ff fac1 	bl	80100b0 <WIZCHIP_WRITE>
   }
   setSn_CR(sn,Sn_CR_SEND);
 8010b2e:	79fb      	ldrb	r3, [r7, #7]
 8010b30:	009b      	lsls	r3, r3, #2
 8010b32:	3301      	adds	r3, #1
 8010b34:	00db      	lsls	r3, r3, #3
 8010b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b3a:	2120      	movs	r1, #32
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	f7ff fab7 	bl	80100b0 <WIZCHIP_WRITE>
 
   while(getSn_CR(sn));   // wait to process the command...
 8010b42:	bf00      	nop
 8010b44:	79fb      	ldrb	r3, [r7, #7]
 8010b46:	009b      	lsls	r3, r3, #2
 8010b48:	3301      	adds	r3, #1
 8010b4a:	00db      	lsls	r3, r3, #3
 8010b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b50:	4618      	mov	r0, r3
 8010b52:	f7ff fabd 	bl	80100d0 <WIZCHIP_READ>
 8010b56:	4603      	mov	r3, r0
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d1f3      	bne.n	8010b44 <send+0x17c>
   sock_is_sending |= (1<<sn);
 8010b5c:	79fb      	ldrb	r3, [r7, #7]
 8010b5e:	2201      	movs	r2, #1
 8010b60:	fa02 f303 	lsl.w	r3, r2, r3
 8010b64:	b21a      	sxth	r2, r3
 8010b66:	4b08      	ldr	r3, [pc, #32]	; (8010b88 <send+0x1c0>)
 8010b68:	881b      	ldrh	r3, [r3, #0]
 8010b6a:	b21b      	sxth	r3, r3
 8010b6c:	4313      	orrs	r3, r2
 8010b6e:	b21b      	sxth	r3, r3
 8010b70:	b29a      	uxth	r2, r3
 8010b72:	4b05      	ldr	r3, [pc, #20]	; (8010b88 <send+0x1c0>)
 8010b74:	801a      	strh	r2, [r3, #0]
 
   return len;
 8010b76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	3710      	adds	r7, #16
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd80      	pop	{r7, pc}
 8010b82:	bf00      	nop
 8010b84:	2400d248 	.word	0x2400d248
 8010b88:	2400d24a 	.word	0x2400d24a

08010b8c <recv>:
 
   return len;
}

datasize_t recv(uint8_t sn, uint8_t * buf, datasize_t len)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b084      	sub	sp, #16
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	4603      	mov	r3, r0
 8010b94:	6039      	str	r1, [r7, #0]
 8010b96:	71fb      	strb	r3, [r7, #7]
 8010b98:	4613      	mov	r3, r2
 8010b9a:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	73fb      	strb	r3, [r7, #15]
   datasize_t recvsize = 0;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	81bb      	strh	r3, [r7, #12]
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE();
   //CHECK_SOCKDATA();
   /************/
 
   recvsize = getSn_RxMAX(sn); 
 8010ba4:	79fb      	ldrb	r3, [r7, #7]
 8010ba6:	009b      	lsls	r3, r3, #2
 8010ba8:	3301      	adds	r3, #1
 8010baa:	00db      	lsls	r3, r3, #3
 8010bac:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f7ff fa8d 	bl	80100d0 <WIZCHIP_READ>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	029b      	lsls	r3, r3, #10
 8010bba:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8010bbc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8010bc0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	da01      	bge.n	8010bcc <recv+0x40>
 8010bc8:	89bb      	ldrh	r3, [r7, #12]
 8010bca:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      recvsize = (datasize_t)getSn_RX_RSR(sn);
 8010bcc:	79fb      	ldrb	r3, [r7, #7]
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7ff fae6 	bl	80101a0 <getSn_RX_RSR>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8010bd8:	79fb      	ldrb	r3, [r7, #7]
 8010bda:	009b      	lsls	r3, r3, #2
 8010bdc:	3301      	adds	r3, #1
 8010bde:	00db      	lsls	r3, r3, #3
 8010be0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010be4:	4618      	mov	r0, r3
 8010be6:	f7ff fa73 	bl	80100d0 <WIZCHIP_READ>
 8010bea:	4603      	mov	r3, r0
 8010bec:	73fb      	strb	r3, [r7, #15]
      if (tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT)
 8010bee:	7bfb      	ldrb	r3, [r7, #15]
 8010bf0:	2b17      	cmp	r3, #23
 8010bf2:	d00c      	beq.n	8010c0e <recv+0x82>
 8010bf4:	7bfb      	ldrb	r3, [r7, #15]
 8010bf6:	2b1c      	cmp	r3, #28
 8010bf8:	d009      	beq.n	8010c0e <recv+0x82>
      {
         if(tmp == SOCK_CLOSED) close(sn);
 8010bfa:	7bfb      	ldrb	r3, [r7, #15]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d103      	bne.n	8010c08 <recv+0x7c>
 8010c00:	79fb      	ldrb	r3, [r7, #7]
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7ff fdb6 	bl	8010774 <close>
         return SOCKERR_SOCKSTATUS;
 8010c08:	f06f 0306 	mvn.w	r3, #6
 8010c0c:	e038      	b.n	8010c80 <recv+0xf4>
      }
      if(recvsize) break;
 8010c0e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d10b      	bne.n	8010c2e <recv+0xa2>
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8010c16:	4b1c      	ldr	r3, [pc, #112]	; (8010c88 <recv+0xfc>)
 8010c18:	881b      	ldrh	r3, [r3, #0]
 8010c1a:	461a      	mov	r2, r3
 8010c1c:	79fb      	ldrb	r3, [r7, #7]
 8010c1e:	fa42 f303 	asr.w	r3, r2, r3
 8010c22:	f003 0301 	and.w	r3, r3, #1
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d0d0      	beq.n	8010bcc <recv+0x40>
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	e028      	b.n	8010c80 <recv+0xf4>
      if(recvsize) break;
 8010c2e:	bf00      	nop
   }
   if(recvsize < len) len = recvsize;
 8010c30:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8010c34:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	da01      	bge.n	8010c40 <recv+0xb4>
 8010c3c:	89bb      	ldrh	r3, [r7, #12]
 8010c3e:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len); 
 8010c40:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8010c44:	79fb      	ldrb	r3, [r7, #7]
 8010c46:	6839      	ldr	r1, [r7, #0]
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f7ff fb3f 	bl	80102cc <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV); 
 8010c4e:	79fb      	ldrb	r3, [r7, #7]
 8010c50:	009b      	lsls	r3, r3, #2
 8010c52:	3301      	adds	r3, #1
 8010c54:	00db      	lsls	r3, r3, #3
 8010c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c5a:	2140      	movs	r1, #64	; 0x40
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f7ff fa27 	bl	80100b0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));  
 8010c62:	bf00      	nop
 8010c64:	79fb      	ldrb	r3, [r7, #7]
 8010c66:	009b      	lsls	r3, r3, #2
 8010c68:	3301      	adds	r3, #1
 8010c6a:	00db      	lsls	r3, r3, #3
 8010c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c70:	4618      	mov	r0, r3
 8010c72:	f7ff fa2d 	bl	80100d0 <WIZCHIP_READ>
 8010c76:	4603      	mov	r3, r0
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d1f3      	bne.n	8010c64 <recv+0xd8>
   return len;
 8010c7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8010c80:	4618      	mov	r0, r3
 8010c82:	3710      	adds	r7, #16
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}
 8010c88:	2400d248 	.word	0x2400d248

08010c8c <ctlsocket>:
 
   return pack_len;
}

int8_t ctlsocket(uint8_t sn, ctlsock_type cstype, void* arg)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b084      	sub	sp, #16
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	4603      	mov	r3, r0
 8010c94:	603a      	str	r2, [r7, #0]
 8010c96:	71fb      	strb	r3, [r7, #7]
 8010c98:	460b      	mov	r3, r1
 8010c9a:	71bb      	strb	r3, [r7, #6]
   uint8_t tmp = 0;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	73fb      	strb	r3, [r7, #15]
   CHECK_SOCKNUM();
 8010ca0:	79fb      	ldrb	r3, [r7, #7]
 8010ca2:	2b07      	cmp	r3, #7
 8010ca4:	d902      	bls.n	8010cac <ctlsocket+0x20>
 8010ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8010caa:	e0d8      	b.n	8010e5e <ctlsocket+0x1d2>
   tmp = *((uint8_t*)arg); 
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	781b      	ldrb	r3, [r3, #0]
 8010cb0:	73fb      	strb	r3, [r7, #15]
   switch(cstype)
 8010cb2:	79bb      	ldrb	r3, [r7, #6]
 8010cb4:	2b09      	cmp	r3, #9
 8010cb6:	f200 80ce 	bhi.w	8010e56 <ctlsocket+0x1ca>
 8010cba:	a201      	add	r2, pc, #4	; (adr r2, 8010cc0 <ctlsocket+0x34>)
 8010cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cc0:	08010ce9 	.word	0x08010ce9
 8010cc4:	08010d37 	.word	0x08010d37
 8010cc8:	08010d51 	.word	0x08010d51
 8010ccc:	08010d6f 	.word	0x08010d6f
 8010cd0:	08010d8d 	.word	0x08010d8d
 8010cd4:	08010db3 	.word	0x08010db3
 8010cd8:	08010dcf 	.word	0x08010dcf
 8010cdc:	08010df5 	.word	0x08010df5
 8010ce0:	08010e11 	.word	0x08010e11
 8010ce4:	08010e3b 	.word	0x08010e3b
   {
      case CS_SET_IOMODE:
         if(tmp == SOCK_IO_NONBLOCK)  sock_io_mode |= (1<<sn);
 8010ce8:	7bfb      	ldrb	r3, [r7, #15]
 8010cea:	2b01      	cmp	r3, #1
 8010cec:	d10d      	bne.n	8010d0a <ctlsocket+0x7e>
 8010cee:	79fb      	ldrb	r3, [r7, #7]
 8010cf0:	2201      	movs	r2, #1
 8010cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8010cf6:	b21a      	sxth	r2, r3
 8010cf8:	4b5b      	ldr	r3, [pc, #364]	; (8010e68 <ctlsocket+0x1dc>)
 8010cfa:	881b      	ldrh	r3, [r3, #0]
 8010cfc:	b21b      	sxth	r3, r3
 8010cfe:	4313      	orrs	r3, r2
 8010d00:	b21b      	sxth	r3, r3
 8010d02:	b29a      	uxth	r2, r3
 8010d04:	4b58      	ldr	r3, [pc, #352]	; (8010e68 <ctlsocket+0x1dc>)
 8010d06:	801a      	strh	r2, [r3, #0]
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
         else return SOCKERR_ARG;
         break;
 8010d08:	e0a8      	b.n	8010e5c <ctlsocket+0x1d0>
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 8010d0a:	7bfb      	ldrb	r3, [r7, #15]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d10f      	bne.n	8010d30 <ctlsocket+0xa4>
 8010d10:	79fb      	ldrb	r3, [r7, #7]
 8010d12:	2201      	movs	r2, #1
 8010d14:	fa02 f303 	lsl.w	r3, r2, r3
 8010d18:	b21b      	sxth	r3, r3
 8010d1a:	43db      	mvns	r3, r3
 8010d1c:	b21a      	sxth	r2, r3
 8010d1e:	4b52      	ldr	r3, [pc, #328]	; (8010e68 <ctlsocket+0x1dc>)
 8010d20:	881b      	ldrh	r3, [r3, #0]
 8010d22:	b21b      	sxth	r3, r3
 8010d24:	4013      	ands	r3, r2
 8010d26:	b21b      	sxth	r3, r3
 8010d28:	b29a      	uxth	r2, r3
 8010d2a:	4b4f      	ldr	r3, [pc, #316]	; (8010e68 <ctlsocket+0x1dc>)
 8010d2c:	801a      	strh	r2, [r3, #0]
         break;
 8010d2e:	e095      	b.n	8010e5c <ctlsocket+0x1d0>
         else return SOCKERR_ARG;
 8010d30:	f06f 0309 	mvn.w	r3, #9
 8010d34:	e093      	b.n	8010e5e <ctlsocket+0x1d2>
      case CS_GET_IOMODE: 
         *((uint8_t*)arg) = (uint8_t)((sock_io_mode >> sn) & 0x0001);
 8010d36:	4b4c      	ldr	r3, [pc, #304]	; (8010e68 <ctlsocket+0x1dc>)
 8010d38:	881b      	ldrh	r3, [r3, #0]
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	79fb      	ldrb	r3, [r7, #7]
 8010d3e:	fa42 f303 	asr.w	r3, r2, r3
 8010d42:	b2db      	uxtb	r3, r3
 8010d44:	f003 0301 	and.w	r3, r3, #1
 8010d48:	b2da      	uxtb	r2, r3
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	701a      	strb	r2, [r3, #0]
         break;
 8010d4e:	e085      	b.n	8010e5c <ctlsocket+0x1d0>
      case CS_GET_MAXTXBUF:
         *((datasize_t*)arg) = getSn_TxMAX(sn);
 8010d50:	79fb      	ldrb	r3, [r7, #7]
 8010d52:	009b      	lsls	r3, r3, #2
 8010d54:	3301      	adds	r3, #1
 8010d56:	00db      	lsls	r3, r3, #3
 8010d58:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f7ff f9b7 	bl	80100d0 <WIZCHIP_READ>
 8010d62:	4603      	mov	r3, r0
 8010d64:	029b      	lsls	r3, r3, #10
 8010d66:	b21a      	sxth	r2, r3
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	801a      	strh	r2, [r3, #0]
         break;
 8010d6c:	e076      	b.n	8010e5c <ctlsocket+0x1d0>
      case CS_GET_MAXRXBUF:  
         *((datasize_t*)arg) = getSn_RxMAX(sn);
 8010d6e:	79fb      	ldrb	r3, [r7, #7]
 8010d70:	009b      	lsls	r3, r3, #2
 8010d72:	3301      	adds	r3, #1
 8010d74:	00db      	lsls	r3, r3, #3
 8010d76:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f7ff f9a8 	bl	80100d0 <WIZCHIP_READ>
 8010d80:	4603      	mov	r3, r0
 8010d82:	029b      	lsls	r3, r3, #10
 8010d84:	b21a      	sxth	r2, r3
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	801a      	strh	r2, [r3, #0]
         break;
 8010d8a:	e067      	b.n	8010e5c <ctlsocket+0x1d0>
      case CS_CLR_INTERRUPT:
         if( tmp > SIK_ALL) return SOCKERR_ARG;
 8010d8c:	7bfb      	ldrb	r3, [r7, #15]
 8010d8e:	2b1f      	cmp	r3, #31
 8010d90:	d902      	bls.n	8010d98 <ctlsocket+0x10c>
 8010d92:	f06f 0309 	mvn.w	r3, #9
 8010d96:	e062      	b.n	8010e5e <ctlsocket+0x1d2>
         setSn_IRCLR(sn,tmp);
 8010d98:	79fb      	ldrb	r3, [r7, #7]
 8010d9a:	009b      	lsls	r3, r3, #2
 8010d9c:	3301      	adds	r3, #1
 8010d9e:	00db      	lsls	r3, r3, #3
 8010da0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8010da4:	461a      	mov	r2, r3
 8010da6:	7bfb      	ldrb	r3, [r7, #15]
 8010da8:	4619      	mov	r1, r3
 8010daa:	4610      	mov	r0, r2
 8010dac:	f7ff f980 	bl	80100b0 <WIZCHIP_WRITE>
         break;
 8010db0:	e054      	b.n	8010e5c <ctlsocket+0x1d0>
      case CS_GET_INTERRUPT:
         *((uint8_t*)arg) = getSn_IR(sn);
 8010db2:	79fb      	ldrb	r3, [r7, #7]
 8010db4:	009b      	lsls	r3, r3, #2
 8010db6:	3301      	adds	r3, #1
 8010db8:	00db      	lsls	r3, r3, #3
 8010dba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f7ff f986 	bl	80100d0 <WIZCHIP_READ>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	461a      	mov	r2, r3
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	701a      	strb	r2, [r3, #0]
         break;
 8010dcc:	e046      	b.n	8010e5c <ctlsocket+0x1d0>
      case CS_SET_INTMASK:
         if( tmp > SIK_ALL) return SOCKERR_ARG;
 8010dce:	7bfb      	ldrb	r3, [r7, #15]
 8010dd0:	2b1f      	cmp	r3, #31
 8010dd2:	d902      	bls.n	8010dda <ctlsocket+0x14e>
 8010dd4:	f06f 0309 	mvn.w	r3, #9
 8010dd8:	e041      	b.n	8010e5e <ctlsocket+0x1d2>
         setSn_IMR(sn,tmp);
 8010dda:	79fb      	ldrb	r3, [r7, #7]
 8010ddc:	009b      	lsls	r3, r3, #2
 8010dde:	3301      	adds	r3, #1
 8010de0:	00db      	lsls	r3, r3, #3
 8010de2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8010de6:	461a      	mov	r2, r3
 8010de8:	7bfb      	ldrb	r3, [r7, #15]
 8010dea:	4619      	mov	r1, r3
 8010dec:	4610      	mov	r0, r2
 8010dee:	f7ff f95f 	bl	80100b0 <WIZCHIP_WRITE>
         break;
 8010df2:	e033      	b.n	8010e5c <ctlsocket+0x1d0>
      case CS_GET_INTMASK:
         *((uint8_t*)arg) = getSn_IMR(sn);
 8010df4:	79fb      	ldrb	r3, [r7, #7]
 8010df6:	009b      	lsls	r3, r3, #2
 8010df8:	3301      	adds	r3, #1
 8010dfa:	00db      	lsls	r3, r3, #3
 8010dfc:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7ff f965 	bl	80100d0 <WIZCHIP_READ>
 8010e06:	4603      	mov	r3, r0
 8010e08:	461a      	mov	r2, r3
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	701a      	strb	r2, [r3, #0]
         break;
 8010e0e:	e025      	b.n	8010e5c <ctlsocket+0x1d0>
      case CS_SET_PREFER:
    	  if((tmp & 0x03) == 0x01) return SOCKERR_ARG;
 8010e10:	7bfb      	ldrb	r3, [r7, #15]
 8010e12:	f003 0303 	and.w	r3, r3, #3
 8010e16:	2b01      	cmp	r3, #1
 8010e18:	d102      	bne.n	8010e20 <ctlsocket+0x194>
 8010e1a:	f06f 0309 	mvn.w	r3, #9
 8010e1e:	e01e      	b.n	8010e5e <ctlsocket+0x1d2>
    	  setSn_PSR(sn, tmp);
 8010e20:	79fb      	ldrb	r3, [r7, #7]
 8010e22:	009b      	lsls	r3, r3, #2
 8010e24:	3301      	adds	r3, #1
 8010e26:	00db      	lsls	r3, r3, #3
 8010e28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010e2c:	461a      	mov	r2, r3
 8010e2e:	7bfb      	ldrb	r3, [r7, #15]
 8010e30:	4619      	mov	r1, r3
 8010e32:	4610      	mov	r0, r2
 8010e34:	f7ff f93c 	bl	80100b0 <WIZCHIP_WRITE>
    	  break;
 8010e38:	e010      	b.n	8010e5c <ctlsocket+0x1d0>
      case CS_GET_PREFER:
    	  *(uint8_t*) arg = getSn_PSR(sn);
 8010e3a:	79fb      	ldrb	r3, [r7, #7]
 8010e3c:	009b      	lsls	r3, r3, #2
 8010e3e:	3301      	adds	r3, #1
 8010e40:	00db      	lsls	r3, r3, #3
 8010e42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010e46:	4618      	mov	r0, r3
 8010e48:	f7ff f942 	bl	80100d0 <WIZCHIP_READ>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	461a      	mov	r2, r3
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	701a      	strb	r2, [r3, #0]
    	  break;
 8010e54:	e002      	b.n	8010e5c <ctlsocket+0x1d0>
      default:
         return SOCKERR_ARG;
 8010e56:	f06f 0309 	mvn.w	r3, #9
 8010e5a:	e000      	b.n	8010e5e <ctlsocket+0x1d2>
   }
   return SOCK_OK;
 8010e5c:	2301      	movs	r3, #1
}
 8010e5e:	4618      	mov	r0, r3
 8010e60:	3710      	adds	r7, #16
 8010e62:	46bd      	mov	sp, r7
 8010e64:	bd80      	pop	{r7, pc}
 8010e66:	bf00      	nop
 8010e68:	2400d248 	.word	0x2400d248

08010e6c <getsockopt>:
   } 
   return SOCK_OK;
}

int8_t getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 8010e6c:	b590      	push	{r4, r7, lr}
 8010e6e:	b083      	sub	sp, #12
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	4603      	mov	r3, r0
 8010e74:	603a      	str	r2, [r7, #0]
 8010e76:	71fb      	strb	r3, [r7, #7]
 8010e78:	460b      	mov	r3, r1
 8010e7a:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 8010e7c:	79fb      	ldrb	r3, [r7, #7]
 8010e7e:	2b07      	cmp	r3, #7
 8010e80:	d902      	bls.n	8010e88 <getsockopt+0x1c>
 8010e82:	f04f 33ff 	mov.w	r3, #4294967295
 8010e86:	e19e      	b.n	80111c6 <getsockopt+0x35a>
   switch(sotype)
 8010e88:	79bb      	ldrb	r3, [r7, #6]
 8010e8a:	2b0e      	cmp	r3, #14
 8010e8c:	f200 8197 	bhi.w	80111be <getsockopt+0x352>
 8010e90:	a201      	add	r2, pc, #4	; (adr r2, 8010e98 <getsockopt+0x2c>)
 8010e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e96:	bf00      	nop
 8010e98:	08010ed5 	.word	0x08010ed5
 8010e9c:	08010f2d 	.word	0x08010f2d
 8010ea0:	08010f49 	.word	0x08010f49
 8010ea4:	08010f65 	.word	0x08010f65
 8010ea8:	08010f9f 	.word	0x08010f9f
 8010eac:	08011019 	.word	0x08011019
 8010eb0:	080111bf 	.word	0x080111bf
 8010eb4:	08011053 	.word	0x08011053
 8010eb8:	0801108d 	.word	0x0801108d
 8010ebc:	0801109f 	.word	0x0801109f
 8010ec0:	080110b1 	.word	0x080110b1
 8010ec4:	080110cd 	.word	0x080110cd
 8010ec8:	0801110b 	.word	0x0801110b
 8010ecc:	080111a3 	.word	0x080111a3
 8010ed0:	0801115f 	.word	0x0801115f
   {
      case SO_FLAG:
         *(uint8_t*)arg = (getSn_MR(sn) & 0xF0) | (getSn_MR2(sn)) | ((uint8_t)(((sock_io_mode >> sn) & 0x0001) << 3));
 8010ed4:	79fb      	ldrb	r3, [r7, #7]
 8010ed6:	009b      	lsls	r3, r3, #2
 8010ed8:	3301      	adds	r3, #1
 8010eda:	00db      	lsls	r3, r3, #3
 8010edc:	4618      	mov	r0, r3
 8010ede:	f7ff f8f7 	bl	80100d0 <WIZCHIP_READ>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	b25b      	sxtb	r3, r3
 8010ee6:	f023 030f 	bic.w	r3, r3, #15
 8010eea:	b25c      	sxtb	r4, r3
 8010eec:	79fb      	ldrb	r3, [r7, #7]
 8010eee:	009b      	lsls	r3, r3, #2
 8010ef0:	3301      	adds	r3, #1
 8010ef2:	00db      	lsls	r3, r3, #3
 8010ef4:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f7ff f8e9 	bl	80100d0 <WIZCHIP_READ>
 8010efe:	4603      	mov	r3, r0
 8010f00:	b25b      	sxtb	r3, r3
 8010f02:	4323      	orrs	r3, r4
 8010f04:	b25a      	sxtb	r2, r3
 8010f06:	4bb2      	ldr	r3, [pc, #712]	; (80111d0 <getsockopt+0x364>)
 8010f08:	881b      	ldrh	r3, [r3, #0]
 8010f0a:	4619      	mov	r1, r3
 8010f0c:	79fb      	ldrb	r3, [r7, #7]
 8010f0e:	fa41 f303 	asr.w	r3, r1, r3
 8010f12:	b2db      	uxtb	r3, r3
 8010f14:	00db      	lsls	r3, r3, #3
 8010f16:	b2db      	uxtb	r3, r3
 8010f18:	b25b      	sxtb	r3, r3
 8010f1a:	f003 0308 	and.w	r3, r3, #8
 8010f1e:	b25b      	sxtb	r3, r3
 8010f20:	4313      	orrs	r3, r2
 8010f22:	b25b      	sxtb	r3, r3
 8010f24:	b2da      	uxtb	r2, r3
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	701a      	strb	r2, [r3, #0]
         break;
 8010f2a:	e14b      	b.n	80111c4 <getsockopt+0x358>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTLR(sn);
 8010f2c:	79fb      	ldrb	r3, [r7, #7]
 8010f2e:	009b      	lsls	r3, r3, #2
 8010f30:	3301      	adds	r3, #1
 8010f32:	00db      	lsls	r3, r3, #3
 8010f34:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f7ff f8c9 	bl	80100d0 <WIZCHIP_READ>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	461a      	mov	r2, r3
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	701a      	strb	r2, [r3, #0]
         break;
 8010f46:	e13d      	b.n	80111c4 <getsockopt+0x358>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOSR(sn);
 8010f48:	79fb      	ldrb	r3, [r7, #7]
 8010f4a:	009b      	lsls	r3, r3, #2
 8010f4c:	3301      	adds	r3, #1
 8010f4e:	00db      	lsls	r3, r3, #3
 8010f50:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8010f54:	4618      	mov	r0, r3
 8010f56:	f7ff f8bb 	bl	80100d0 <WIZCHIP_READ>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	683b      	ldr	r3, [r7, #0]
 8010f60:	701a      	strb	r2, [r3, #0]
         break;
 8010f62:	e12f      	b.n	80111c4 <getsockopt+0x358>
      case SO_MSS: 
         *(uint16_t*) arg = getSn_MSSR(sn);
 8010f64:	79fb      	ldrb	r3, [r7, #7]
 8010f66:	009b      	lsls	r3, r3, #2
 8010f68:	3301      	adds	r3, #1
 8010f6a:	00db      	lsls	r3, r3, #3
 8010f6c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7ff f8ad 	bl	80100d0 <WIZCHIP_READ>
 8010f76:	4603      	mov	r3, r0
 8010f78:	b29b      	uxth	r3, r3
 8010f7a:	021b      	lsls	r3, r3, #8
 8010f7c:	b29c      	uxth	r4, r3
 8010f7e:	79fb      	ldrb	r3, [r7, #7]
 8010f80:	009b      	lsls	r3, r3, #2
 8010f82:	3301      	adds	r3, #1
 8010f84:	00da      	lsls	r2, r3, #3
 8010f86:	4b93      	ldr	r3, [pc, #588]	; (80111d4 <getsockopt+0x368>)
 8010f88:	4413      	add	r3, r2
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7ff f8a0 	bl	80100d0 <WIZCHIP_READ>
 8010f90:	4603      	mov	r3, r0
 8010f92:	b29b      	uxth	r3, r3
 8010f94:	4423      	add	r3, r4
 8010f96:	b29a      	uxth	r2, r3
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	801a      	strh	r2, [r3, #0]
         break;
 8010f9c:	e112      	b.n	80111c4 <getsockopt+0x358>
      case SO_DESTIP:
         CHECK_TCPMODE();
 8010f9e:	79fb      	ldrb	r3, [r7, #7]
 8010fa0:	009b      	lsls	r3, r3, #2
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	00db      	lsls	r3, r3, #3
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7ff f892 	bl	80100d0 <WIZCHIP_READ>
 8010fac:	4603      	mov	r3, r0
 8010fae:	f003 0303 	and.w	r3, r3, #3
 8010fb2:	2b01      	cmp	r3, #1
 8010fb4:	d002      	beq.n	8010fbc <getsockopt+0x150>
 8010fb6:	f06f 0304 	mvn.w	r3, #4
 8010fba:	e104      	b.n	80111c6 <getsockopt+0x35a>
         if(getSn_ESR(sn) & TCPSOCK_MODE) //IPv6 ?
 8010fbc:	79fb      	ldrb	r3, [r7, #7]
 8010fbe:	009b      	lsls	r3, r3, #2
 8010fc0:	3301      	adds	r3, #1
 8010fc2:	00db      	lsls	r3, r3, #3
 8010fc4:	f503 5344 	add.w	r3, r3, #12544	; 0x3100
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f7ff f881 	bl	80100d0 <WIZCHIP_READ>
 8010fce:	4603      	mov	r3, r0
 8010fd0:	f003 0304 	and.w	r3, r3, #4
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d00f      	beq.n	8010ff8 <getsockopt+0x18c>
         {
            getSn_DIP6R(sn, ((wiz_IPAddress*)arg)->ip);
 8010fd8:	79fb      	ldrb	r3, [r7, #7]
 8010fda:	009b      	lsls	r3, r3, #2
 8010fdc:	3301      	adds	r3, #1
 8010fde:	00db      	lsls	r3, r3, #3
 8010fe0:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	2210      	movs	r2, #16
 8010fea:	4619      	mov	r1, r3
 8010fec:	f7ff f891 	bl	8010112 <WIZCHIP_READ_BUF>
            ((wiz_IPAddress*)arg)->len = 16;
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	2210      	movs	r2, #16
 8010ff4:	741a      	strb	r2, [r3, #16]
         else
         {
            getSn_DIPR(sn, ((wiz_IPAddress*)arg)->ip);
            ((wiz_IPAddress*)arg)->len = 4;
         } 
         break;
 8010ff6:	e0e5      	b.n	80111c4 <getsockopt+0x358>
            getSn_DIPR(sn, ((wiz_IPAddress*)arg)->ip);
 8010ff8:	79fb      	ldrb	r3, [r7, #7]
 8010ffa:	009b      	lsls	r3, r3, #2
 8010ffc:	3301      	adds	r3, #1
 8010ffe:	00db      	lsls	r3, r3, #3
 8011000:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8011004:	4618      	mov	r0, r3
 8011006:	683b      	ldr	r3, [r7, #0]
 8011008:	2204      	movs	r2, #4
 801100a:	4619      	mov	r1, r3
 801100c:	f7ff f881 	bl	8010112 <WIZCHIP_READ_BUF>
            ((wiz_IPAddress*)arg)->len = 4;
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	2204      	movs	r2, #4
 8011014:	741a      	strb	r2, [r3, #16]
         break;
 8011016:	e0d5      	b.n	80111c4 <getsockopt+0x358>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORTR(sn);
 8011018:	79fb      	ldrb	r3, [r7, #7]
 801101a:	009b      	lsls	r3, r3, #2
 801101c:	3301      	adds	r3, #1
 801101e:	00db      	lsls	r3, r3, #3
 8011020:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
 8011024:	4618      	mov	r0, r3
 8011026:	f7ff f853 	bl	80100d0 <WIZCHIP_READ>
 801102a:	4603      	mov	r3, r0
 801102c:	b29b      	uxth	r3, r3
 801102e:	021b      	lsls	r3, r3, #8
 8011030:	b29c      	uxth	r4, r3
 8011032:	79fb      	ldrb	r3, [r7, #7]
 8011034:	009b      	lsls	r3, r3, #2
 8011036:	3301      	adds	r3, #1
 8011038:	00da      	lsls	r2, r3, #3
 801103a:	4b67      	ldr	r3, [pc, #412]	; (80111d8 <getsockopt+0x36c>)
 801103c:	4413      	add	r3, r2
 801103e:	4618      	mov	r0, r3
 8011040:	f7ff f846 	bl	80100d0 <WIZCHIP_READ>
 8011044:	4603      	mov	r3, r0
 8011046:	b29b      	uxth	r3, r3
 8011048:	4423      	add	r3, r4
 801104a:	b29a      	uxth	r2, r3
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	801a      	strh	r2, [r3, #0]
         break; 
 8011050:	e0b8      	b.n	80111c4 <getsockopt+0x358>
      case SO_KEEPALIVEAUTO:
         CHECK_TCPMODE();
 8011052:	79fb      	ldrb	r3, [r7, #7]
 8011054:	009b      	lsls	r3, r3, #2
 8011056:	3301      	adds	r3, #1
 8011058:	00db      	lsls	r3, r3, #3
 801105a:	4618      	mov	r0, r3
 801105c:	f7ff f838 	bl	80100d0 <WIZCHIP_READ>
 8011060:	4603      	mov	r3, r0
 8011062:	f003 0303 	and.w	r3, r3, #3
 8011066:	2b01      	cmp	r3, #1
 8011068:	d002      	beq.n	8011070 <getsockopt+0x204>
 801106a:	f06f 0304 	mvn.w	r3, #4
 801106e:	e0aa      	b.n	80111c6 <getsockopt+0x35a>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 8011070:	79fb      	ldrb	r3, [r7, #7]
 8011072:	009b      	lsls	r3, r3, #2
 8011074:	3301      	adds	r3, #1
 8011076:	00db      	lsls	r3, r3, #3
 8011078:	f503 33c4 	add.w	r3, r3, #100352	; 0x18800
 801107c:	4618      	mov	r0, r3
 801107e:	f7ff f827 	bl	80100d0 <WIZCHIP_READ>
 8011082:	4603      	mov	r3, r0
 8011084:	b29a      	uxth	r2, r3
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	801a      	strh	r2, [r3, #0]
         break;
 801108a:	e09b      	b.n	80111c4 <getsockopt+0x358>
      case SO_SENDBUF:
         *(datasize_t*) arg = getSn_TX_FSR(sn);
 801108c:	79fb      	ldrb	r3, [r7, #7]
 801108e:	4618      	mov	r0, r3
 8011090:	f7ff f850 	bl	8010134 <getSn_TX_FSR>
 8011094:	4603      	mov	r3, r0
 8011096:	461a      	mov	r2, r3
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	801a      	strh	r2, [r3, #0]
         break;
 801109c:	e092      	b.n	80111c4 <getsockopt+0x358>
      case SO_RECVBUF:
         *(datasize_t*) arg = getSn_RX_RSR(sn);
 801109e:	79fb      	ldrb	r3, [r7, #7]
 80110a0:	4618      	mov	r0, r3
 80110a2:	f7ff f87d 	bl	80101a0 <getSn_RX_RSR>
 80110a6:	4603      	mov	r3, r0
 80110a8:	461a      	mov	r2, r3
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	801a      	strh	r2, [r3, #0]
         break;
 80110ae:	e089      	b.n	80111c4 <getsockopt+0x358>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 80110b0:	79fb      	ldrb	r3, [r7, #7]
 80110b2:	009b      	lsls	r3, r3, #2
 80110b4:	3301      	adds	r3, #1
 80110b6:	00db      	lsls	r3, r3, #3
 80110b8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80110bc:	4618      	mov	r0, r3
 80110be:	f7ff f807 	bl	80100d0 <WIZCHIP_READ>
 80110c2:	4603      	mov	r3, r0
 80110c4:	461a      	mov	r2, r3
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	701a      	strb	r2, [r3, #0]
         break;
 80110ca:	e07b      	b.n	80111c4 <getsockopt+0x358>
      case SO_EXTSTATUS:
         CHECK_TCPMODE();
 80110cc:	79fb      	ldrb	r3, [r7, #7]
 80110ce:	009b      	lsls	r3, r3, #2
 80110d0:	3301      	adds	r3, #1
 80110d2:	00db      	lsls	r3, r3, #3
 80110d4:	4618      	mov	r0, r3
 80110d6:	f7fe fffb 	bl	80100d0 <WIZCHIP_READ>
 80110da:	4603      	mov	r3, r0
 80110dc:	f003 0303 	and.w	r3, r3, #3
 80110e0:	2b01      	cmp	r3, #1
 80110e2:	d002      	beq.n	80110ea <getsockopt+0x27e>
 80110e4:	f06f 0304 	mvn.w	r3, #4
 80110e8:	e06d      	b.n	80111c6 <getsockopt+0x35a>
         *(uint8_t*) arg = getSn_ESR(sn) & 0x07;
 80110ea:	79fb      	ldrb	r3, [r7, #7]
 80110ec:	009b      	lsls	r3, r3, #2
 80110ee:	3301      	adds	r3, #1
 80110f0:	00db      	lsls	r3, r3, #3
 80110f2:	f503 5344 	add.w	r3, r3, #12544	; 0x3100
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7fe ffea 	bl	80100d0 <WIZCHIP_READ>
 80110fc:	4603      	mov	r3, r0
 80110fe:	f003 0307 	and.w	r3, r3, #7
 8011102:	b2da      	uxtb	r2, r3
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	701a      	strb	r2, [r3, #0]
         break;
 8011108:	e05c      	b.n	80111c4 <getsockopt+0x358>
      case SO_REMAINSIZE:
         if(getSn_MR(sn)==SOCK_CLOSED) return SOCKERR_SOCKSTATUS;
 801110a:	79fb      	ldrb	r3, [r7, #7]
 801110c:	009b      	lsls	r3, r3, #2
 801110e:	3301      	adds	r3, #1
 8011110:	00db      	lsls	r3, r3, #3
 8011112:	4618      	mov	r0, r3
 8011114:	f7fe ffdc 	bl	80100d0 <WIZCHIP_READ>
 8011118:	4603      	mov	r3, r0
 801111a:	2b00      	cmp	r3, #0
 801111c:	d102      	bne.n	8011124 <getsockopt+0x2b8>
 801111e:	f06f 0306 	mvn.w	r3, #6
 8011122:	e050      	b.n	80111c6 <getsockopt+0x35a>
         if(getSn_MR(sn) & 0x01)   *(uint16_t*)arg = getSn_RX_RSR(sn);
 8011124:	79fb      	ldrb	r3, [r7, #7]
 8011126:	009b      	lsls	r3, r3, #2
 8011128:	3301      	adds	r3, #1
 801112a:	00db      	lsls	r3, r3, #3
 801112c:	4618      	mov	r0, r3
 801112e:	f7fe ffcf 	bl	80100d0 <WIZCHIP_READ>
 8011132:	4603      	mov	r3, r0
 8011134:	f003 0301 	and.w	r3, r3, #1
 8011138:	2b00      	cmp	r3, #0
 801113a:	d008      	beq.n	801114e <getsockopt+0x2e2>
 801113c:	79fb      	ldrb	r3, [r7, #7]
 801113e:	4618      	mov	r0, r3
 8011140:	f7ff f82e 	bl	80101a0 <getSn_RX_RSR>
 8011144:	4603      	mov	r3, r0
 8011146:	b29a      	uxth	r2, r3
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	801a      	strh	r2, [r3, #0]
         else                      *(uint16_t*)arg = sock_remained_size[sn];
         break;
 801114c:	e03a      	b.n	80111c4 <getsockopt+0x358>
         else                      *(uint16_t*)arg = sock_remained_size[sn];
 801114e:	79fb      	ldrb	r3, [r7, #7]
 8011150:	4a22      	ldr	r2, [pc, #136]	; (80111dc <getsockopt+0x370>)
 8011152:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8011156:	b29a      	uxth	r2, r3
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	801a      	strh	r2, [r3, #0]
         break;
 801115c:	e032      	b.n	80111c4 <getsockopt+0x358>
      case SO_PACKINFO:
         if(getSn_MR(sn)==SOCK_CLOSED) return SOCKERR_SOCKSTATUS;
 801115e:	79fb      	ldrb	r3, [r7, #7]
 8011160:	009b      	lsls	r3, r3, #2
 8011162:	3301      	adds	r3, #1
 8011164:	00db      	lsls	r3, r3, #3
 8011166:	4618      	mov	r0, r3
 8011168:	f7fe ffb2 	bl	80100d0 <WIZCHIP_READ>
 801116c:	4603      	mov	r3, r0
 801116e:	2b00      	cmp	r3, #0
 8011170:	d102      	bne.n	8011178 <getsockopt+0x30c>
 8011172:	f06f 0306 	mvn.w	r3, #6
 8011176:	e026      	b.n	80111c6 <getsockopt+0x35a>
         if(getSn_MR(sn) & 0x01)       return SOCKERR_SOCKMODE;
 8011178:	79fb      	ldrb	r3, [r7, #7]
 801117a:	009b      	lsls	r3, r3, #2
 801117c:	3301      	adds	r3, #1
 801117e:	00db      	lsls	r3, r3, #3
 8011180:	4618      	mov	r0, r3
 8011182:	f7fe ffa5 	bl	80100d0 <WIZCHIP_READ>
 8011186:	4603      	mov	r3, r0
 8011188:	f003 0301 	and.w	r3, r3, #1
 801118c:	2b00      	cmp	r3, #0
 801118e:	d002      	beq.n	8011196 <getsockopt+0x32a>
 8011190:	f06f 0304 	mvn.w	r3, #4
 8011194:	e017      	b.n	80111c6 <getsockopt+0x35a>
         else *(uint8_t*)arg = sock_pack_info[sn];
 8011196:	79fb      	ldrb	r3, [r7, #7]
 8011198:	4a11      	ldr	r2, [pc, #68]	; (80111e0 <getsockopt+0x374>)
 801119a:	5cd2      	ldrb	r2, [r2, r3]
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	701a      	strb	r2, [r3, #0]
         break;
 80111a0:	e010      	b.n	80111c4 <getsockopt+0x358>
      case SO_MODE:
         *(uint8_t*) arg = 0x0F & getSn_MR(sn);
 80111a2:	79fb      	ldrb	r3, [r7, #7]
 80111a4:	009b      	lsls	r3, r3, #2
 80111a6:	3301      	adds	r3, #1
 80111a8:	00db      	lsls	r3, r3, #3
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7fe ff90 	bl	80100d0 <WIZCHIP_READ>
 80111b0:	4603      	mov	r3, r0
 80111b2:	f003 030f 	and.w	r3, r3, #15
 80111b6:	b2da      	uxtb	r2, r3
 80111b8:	683b      	ldr	r3, [r7, #0]
 80111ba:	701a      	strb	r2, [r3, #0]
         break;
 80111bc:	e002      	b.n	80111c4 <getsockopt+0x358>
      default:
         return SOCKERR_SOCKOPT;
 80111be:	f06f 0301 	mvn.w	r3, #1
 80111c2:	e000      	b.n	80111c6 <getsockopt+0x35a>
   }
   return SOCK_OK;
 80111c4:	2301      	movs	r3, #1
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	370c      	adds	r7, #12
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd90      	pop	{r4, r7, pc}
 80111ce:	bf00      	nop
 80111d0:	2400d248 	.word	0x2400d248
 80111d4:	00011100 	.word	0x00011100
 80111d8:	00014100 	.word	0x00014100
 80111dc:	2400d24c 	.word	0x2400d24c
 80111e0:	2400d25c 	.word	0x2400d25c

080111e4 <wizchip_cris_enter>:
 * @details @ref wizchip_cris_enter() provides the default protection while @ref _WIZCHIP_ is accessed. \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_exit()
 */
void wizchip_cris_enter(void)   {}
 80111e4:	b480      	push	{r7}
 80111e6:	af00      	add	r7, sp, #0
 80111e8:	bf00      	nop
 80111ea:	46bd      	mov	sp, r7
 80111ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f0:	4770      	bx	lr

080111f2 <wizchip_cris_exit>:
 * @details @ref wizchip_cris_exit provides the default protection while @ref _WIZCHIP_ is accessed\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_enter()
 */
void wizchip_cris_exit(void)   {}
 80111f2:	b480      	push	{r7}
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	bf00      	nop
 80111f8:	46bd      	mov	sp, r7
 80111fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fe:	4770      	bx	lr

08011200 <wizchip_cs_select>:
 * @details @ref wizchip_cs_select() provides the default selection @ref _WIZCHIP_,\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_deselect()
 */
void wizchip_cs_select(void)   {}
 8011200:	b480      	push	{r7}
 8011202:	af00      	add	r7, sp, #0
 8011204:	bf00      	nop
 8011206:	46bd      	mov	sp, r7
 8011208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120c:	4770      	bx	lr

0801120e <wizchip_cs_deselect>:
 * @details @ref wizchip_cs_deselect() provides the default de-selection @ref _WIZCHIP_, \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_select()
 */
void wizchip_cs_deselect(void)   {}
 801120e:	b480      	push	{r7}
 8011210:	af00      	add	r7, sp, #0
 8011212:	bf00      	nop
 8011214:	46bd      	mov	sp, r7
 8011216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121a:	4770      	bx	lr

0801121c <wizchip_spi_read>:
 * @details @ref wizchip_spi_read() provides the default read one byte data from SPI of @ref _WIZCHIP_,\n
 *          but it is null function.
 * @return uint8_t 
 * @todo It should be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
uint8_t wizchip_spi_read(void)        {return 0;}
 801121c:	b480      	push	{r7}
 801121e:	af00      	add	r7, sp, #0
 8011220:	2300      	movs	r3, #0
 8011222:	4618      	mov	r0, r3
 8011224:	46bd      	mov	sp, r7
 8011226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122a:	4770      	bx	lr

0801122c <wizchip_spi_write>:
 *          but it is null function.
 * @param wb uint8_t data to be written
 * @return void 
 * @todo It should be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
void wizchip_spi_write(uint8_t wb) {}
 801122c:	b480      	push	{r7}
 801122e:	b083      	sub	sp, #12
 8011230:	af00      	add	r7, sp, #0
 8011232:	4603      	mov	r3, r0
 8011234:	71fb      	strb	r3, [r7, #7]
 8011236:	bf00      	nop
 8011238:	370c      	adds	r7, #12
 801123a:	46bd      	mov	sp, r7
 801123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011240:	4770      	bx	lr
	...

08011244 <wizchip_spi_read_buf>:
 * @return void
 * @note It is use @ref wizchip_spi_read() as default. \n
 *       It can be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
void wizchip_spi_read_buf(uint8_t* buf, datasize_t len)
{
 8011244:	b590      	push	{r4, r7, lr}
 8011246:	b085      	sub	sp, #20
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
 801124c:	460b      	mov	r3, r1
 801124e:	807b      	strh	r3, [r7, #2]
   for(datasize_t i=0; i < len; i++) *buf++ = WIZCHIP.IF.SPI._read_byte();
 8011250:	2300      	movs	r3, #0
 8011252:	81fb      	strh	r3, [r7, #14]
 8011254:	e00d      	b.n	8011272 <wizchip_spi_read_buf+0x2e>
 8011256:	4b0c      	ldr	r3, [pc, #48]	; (8011288 <wizchip_spi_read_buf+0x44>)
 8011258:	699b      	ldr	r3, [r3, #24]
 801125a:	687c      	ldr	r4, [r7, #4]
 801125c:	1c62      	adds	r2, r4, #1
 801125e:	607a      	str	r2, [r7, #4]
 8011260:	4798      	blx	r3
 8011262:	4603      	mov	r3, r0
 8011264:	7023      	strb	r3, [r4, #0]
 8011266:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801126a:	b29b      	uxth	r3, r3
 801126c:	3301      	adds	r3, #1
 801126e:	b29b      	uxth	r3, r3
 8011270:	81fb      	strh	r3, [r7, #14]
 8011272:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011276:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801127a:	429a      	cmp	r2, r3
 801127c:	dbeb      	blt.n	8011256 <wizchip_spi_read_buf+0x12>
}
 801127e:	bf00      	nop
 8011280:	bf00      	nop
 8011282:	3714      	adds	r7, #20
 8011284:	46bd      	mov	sp, r7
 8011286:	bd90      	pop	{r4, r7, pc}
 8011288:	240000f0 	.word	0x240000f0

0801128c <wizchip_spi_write_buf>:
 * @return void
 * @note It is use @ref wizchip_spi_write() as default. \n
 *       It can be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
void wizchip_spi_write_buf(uint8_t* buf, datasize_t len)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b084      	sub	sp, #16
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
 8011294:	460b      	mov	r3, r1
 8011296:	807b      	strh	r3, [r7, #2]
   for(datasize_t i=0; i < len; i++) WIZCHIP.IF.SPI._write_byte(*buf++);
 8011298:	2300      	movs	r3, #0
 801129a:	81fb      	strh	r3, [r7, #14]
 801129c:	e00d      	b.n	80112ba <wizchip_spi_write_buf+0x2e>
 801129e:	4b0c      	ldr	r3, [pc, #48]	; (80112d0 <wizchip_spi_write_buf+0x44>)
 80112a0:	69da      	ldr	r2, [r3, #28]
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	1c59      	adds	r1, r3, #1
 80112a6:	6079      	str	r1, [r7, #4]
 80112a8:	781b      	ldrb	r3, [r3, #0]
 80112aa:	4618      	mov	r0, r3
 80112ac:	4790      	blx	r2
 80112ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80112b2:	b29b      	uxth	r3, r3
 80112b4:	3301      	adds	r3, #1
 80112b6:	b29b      	uxth	r3, r3
 80112b8:	81fb      	strh	r3, [r7, #14]
 80112ba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80112be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80112c2:	429a      	cmp	r2, r3
 80112c4:	dbeb      	blt.n	801129e <wizchip_spi_write_buf+0x12>
}
 80112c6:	bf00      	nop
 80112c8:	bf00      	nop
 80112ca:	3710      	adds	r7, #16
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bd80      	pop	{r7, pc}
 80112d0:	240000f0 	.word	0x240000f0

080112d4 <reg_wizchip_cs_cbfunc>:
   if(!cris_ex)   WIZCHIP.CRIS._e_x_i_t_  = wizchip_cris_exit;
   else           WIZCHIP.CRIS._e_x_i_t_  = cris_ex;
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80112d4:	b480      	push	{r7}
 80112d6:	b083      	sub	sp, #12
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
 80112dc:	6039      	str	r1, [r7, #0]
   if(!cs_sel)    WIZCHIP.CS._s_e_l_e_c_t_   = wizchip_cs_select;
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d103      	bne.n	80112ec <reg_wizchip_cs_cbfunc+0x18>
 80112e4:	4b0b      	ldr	r3, [pc, #44]	; (8011314 <reg_wizchip_cs_cbfunc+0x40>)
 80112e6:	4a0c      	ldr	r2, [pc, #48]	; (8011318 <reg_wizchip_cs_cbfunc+0x44>)
 80112e8:	611a      	str	r2, [r3, #16]
 80112ea:	e002      	b.n	80112f2 <reg_wizchip_cs_cbfunc+0x1e>
   else           WIZCHIP.CS._s_e_l_e_c_t_   = cs_sel; 
 80112ec:	4a09      	ldr	r2, [pc, #36]	; (8011314 <reg_wizchip_cs_cbfunc+0x40>)
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6113      	str	r3, [r2, #16]
   if(!cs_desel)  WIZCHIP.CS._d_e_s_e_l_e_c_t_ = wizchip_cs_deselect;
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d103      	bne.n	8011300 <reg_wizchip_cs_cbfunc+0x2c>
 80112f8:	4b06      	ldr	r3, [pc, #24]	; (8011314 <reg_wizchip_cs_cbfunc+0x40>)
 80112fa:	4a08      	ldr	r2, [pc, #32]	; (801131c <reg_wizchip_cs_cbfunc+0x48>)
 80112fc:	615a      	str	r2, [r3, #20]
   else           WIZCHIP.CS._d_e_s_e_l_e_c_t_ = cs_desel;
}
 80112fe:	e002      	b.n	8011306 <reg_wizchip_cs_cbfunc+0x32>
   else           WIZCHIP.CS._d_e_s_e_l_e_c_t_ = cs_desel;
 8011300:	4a04      	ldr	r2, [pc, #16]	; (8011314 <reg_wizchip_cs_cbfunc+0x40>)
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	6153      	str	r3, [r2, #20]
}
 8011306:	bf00      	nop
 8011308:	370c      	adds	r7, #12
 801130a:	46bd      	mov	sp, r7
 801130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011310:	4770      	bx	lr
 8011312:	bf00      	nop
 8011314:	240000f0 	.word	0x240000f0
 8011318:	08011201 	.word	0x08011201
 801131c:	0801120f 	.word	0x0801120f

08011320 <reg_wizchip_spi_cbfunc>:
#if (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_)
void reg_wizchip_spi_cbfunc( uint8_t (*spi_rb)(void), 
                             void (*spi_wb)(uint8_t wb),
                             void (*spi_rbuf)(uint8_t* buf, datasize_t len),
                             void (*spi_wbuf)(uint8_t* buf, datasize_t len) )
{
 8011320:	b480      	push	{r7}
 8011322:	b085      	sub	sp, #20
 8011324:	af00      	add	r7, sp, #0
 8011326:	60f8      	str	r0, [r7, #12]
 8011328:	60b9      	str	r1, [r7, #8]
 801132a:	607a      	str	r2, [r7, #4]
 801132c:	603b      	str	r3, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 801132e:	bf00      	nop
 8011330:	4b19      	ldr	r3, [pc, #100]	; (8011398 <reg_wizchip_spi_cbfunc+0x78>)
 8011332:	881b      	ldrh	r3, [r3, #0]
 8011334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011338:	2b00      	cmp	r3, #0
 801133a:	d0f9      	beq.n	8011330 <reg_wizchip_spi_cbfunc+0x10>
   
   if(!spi_rb)    WIZCHIP.IF.SPI._read_byte      = wizchip_spi_read;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d103      	bne.n	801134a <reg_wizchip_spi_cbfunc+0x2a>
 8011342:	4b15      	ldr	r3, [pc, #84]	; (8011398 <reg_wizchip_spi_cbfunc+0x78>)
 8011344:	4a15      	ldr	r2, [pc, #84]	; (801139c <reg_wizchip_spi_cbfunc+0x7c>)
 8011346:	619a      	str	r2, [r3, #24]
 8011348:	e002      	b.n	8011350 <reg_wizchip_spi_cbfunc+0x30>
   else           WIZCHIP.IF.SPI._read_byte      = spi_rb;
 801134a:	4a13      	ldr	r2, [pc, #76]	; (8011398 <reg_wizchip_spi_cbfunc+0x78>)
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	6193      	str	r3, [r2, #24]
   if(!spi_wb)    WIZCHIP.IF.SPI._write_byte     = wizchip_spi_write;
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d103      	bne.n	801135e <reg_wizchip_spi_cbfunc+0x3e>
 8011356:	4b10      	ldr	r3, [pc, #64]	; (8011398 <reg_wizchip_spi_cbfunc+0x78>)
 8011358:	4a11      	ldr	r2, [pc, #68]	; (80113a0 <reg_wizchip_spi_cbfunc+0x80>)
 801135a:	61da      	str	r2, [r3, #28]
 801135c:	e002      	b.n	8011364 <reg_wizchip_spi_cbfunc+0x44>
   else           WIZCHIP.IF.SPI._write_byte     = spi_wb;
 801135e:	4a0e      	ldr	r2, [pc, #56]	; (8011398 <reg_wizchip_spi_cbfunc+0x78>)
 8011360:	68bb      	ldr	r3, [r7, #8]
 8011362:	61d3      	str	r3, [r2, #28]

   if(!spi_rbuf)  WIZCHIP.IF.SPI._read_byte_buf  = wizchip_spi_read_buf;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d103      	bne.n	8011372 <reg_wizchip_spi_cbfunc+0x52>
 801136a:	4b0b      	ldr	r3, [pc, #44]	; (8011398 <reg_wizchip_spi_cbfunc+0x78>)
 801136c:	4a0d      	ldr	r2, [pc, #52]	; (80113a4 <reg_wizchip_spi_cbfunc+0x84>)
 801136e:	621a      	str	r2, [r3, #32]
 8011370:	e002      	b.n	8011378 <reg_wizchip_spi_cbfunc+0x58>
   else           WIZCHIP.IF.SPI._read_byte_buf  = spi_rbuf;
 8011372:	4a09      	ldr	r2, [pc, #36]	; (8011398 <reg_wizchip_spi_cbfunc+0x78>)
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	6213      	str	r3, [r2, #32]
   if(!spi_wbuf)  WIZCHIP.IF.SPI._write_byte_buf = wizchip_spi_write_buf;
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d103      	bne.n	8011386 <reg_wizchip_spi_cbfunc+0x66>
 801137e:	4b06      	ldr	r3, [pc, #24]	; (8011398 <reg_wizchip_spi_cbfunc+0x78>)
 8011380:	4a09      	ldr	r2, [pc, #36]	; (80113a8 <reg_wizchip_spi_cbfunc+0x88>)
 8011382:	625a      	str	r2, [r3, #36]	; 0x24
   else           WIZCHIP.IF.SPI._write_byte_buf = spi_wbuf;
}
 8011384:	e002      	b.n	801138c <reg_wizchip_spi_cbfunc+0x6c>
   else           WIZCHIP.IF.SPI._write_byte_buf = spi_wbuf;
 8011386:	4a04      	ldr	r2, [pc, #16]	; (8011398 <reg_wizchip_spi_cbfunc+0x78>)
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	6253      	str	r3, [r2, #36]	; 0x24
}
 801138c:	bf00      	nop
 801138e:	3714      	adds	r7, #20
 8011390:	46bd      	mov	sp, r7
 8011392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011396:	4770      	bx	lr
 8011398:	240000f0 	.word	0x240000f0
 801139c:	0801121d 	.word	0x0801121d
 80113a0:	0801122d 	.word	0x0801122d
 80113a4:	08011245 	.word	0x08011245
 80113a8:	0801128d 	.word	0x0801128d

080113ac <ctlwizchip>:
#endif

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80113ac:	b590      	push	{r4, r7, lr}
 80113ae:	b087      	sub	sp, #28
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	4603      	mov	r3, r0
 80113b4:	6039      	str	r1, [r7, #0]
 80113b6:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = *(uint8_t*) arg;
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	781b      	ldrb	r3, [r3, #0]
 80113bc:	75fb      	strb	r3, [r7, #23]

   uint8_t* ptmp[2] = {0,0};
 80113be:	2300      	movs	r3, #0
 80113c0:	60fb      	str	r3, [r7, #12]
 80113c2:	2300      	movs	r3, #0
 80113c4:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 80113c6:	79fb      	ldrb	r3, [r7, #7]
 80113c8:	2b17      	cmp	r3, #23
 80113ca:	f200 8163 	bhi.w	8011694 <ctlwizchip+0x2e8>
 80113ce:	a201      	add	r2, pc, #4	; (adr r2, 80113d4 <ctlwizchip+0x28>)
 80113d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113d4:	08011435 	.word	0x08011435
 80113d8:	0801146f 	.word	0x0801146f
 80113dc:	080114a9 	.word	0x080114a9
 80113e0:	080114bd 	.word	0x080114bd
 80113e4:	080114c3 	.word	0x080114c3
 80113e8:	080114e3 	.word	0x080114e3
 80113ec:	080114ef 	.word	0x080114ef
 80113f0:	080114fb 	.word	0x080114fb
 80113f4:	08011507 	.word	0x08011507
 80113f8:	08011513 	.word	0x08011513
 80113fc:	08011535 	.word	0x08011535
 8011400:	08011557 	.word	0x08011557
 8011404:	0801158d 	.word	0x0801158d
 8011408:	0801159f 	.word	0x0801159f
 801140c:	080115d9 	.word	0x080115d9
 8011410:	080115ff 	.word	0x080115ff
 8011414:	0801163d 	.word	0x0801163d
 8011418:	08011651 	.word	0x08011651
 801141c:	08011657 	.word	0x08011657
 8011420:	0801165f 	.word	0x0801165f
 8011424:	08011667 	.word	0x08011667
 8011428:	0801166f 	.word	0x0801166f
 801142c:	08011679 	.word	0x08011679
 8011430:	08011687 	.word	0x08011687
   {
      case CW_SYS_LOCK:
         if(tmp & SYS_CHIP_LOCK) CHIPLOCK();
 8011434:	7dfb      	ldrb	r3, [r7, #23]
 8011436:	f003 0304 	and.w	r3, r3, #4
 801143a:	2b00      	cmp	r3, #0
 801143c:	d003      	beq.n	8011446 <ctlwizchip+0x9a>
 801143e:	21ff      	movs	r1, #255	; 0xff
 8011440:	489b      	ldr	r0, [pc, #620]	; (80116b0 <ctlwizchip+0x304>)
 8011442:	f7fe fe35 	bl	80100b0 <WIZCHIP_WRITE>
         if(tmp & SYS_NET_LOCK)  NETLOCK();
 8011446:	7dfb      	ldrb	r3, [r7, #23]
 8011448:	f003 0302 	and.w	r3, r3, #2
 801144c:	2b00      	cmp	r3, #0
 801144e:	d003      	beq.n	8011458 <ctlwizchip+0xac>
 8011450:	21c5      	movs	r1, #197	; 0xc5
 8011452:	4898      	ldr	r0, [pc, #608]	; (80116b4 <ctlwizchip+0x308>)
 8011454:	f7fe fe2c 	bl	80100b0 <WIZCHIP_WRITE>
         if(tmp & SYS_PHY_LOCK)  PHYLOCK();
 8011458:	7dfb      	ldrb	r3, [r7, #23]
 801145a:	f003 0301 	and.w	r3, r3, #1
 801145e:	2b00      	cmp	r3, #0
 8011460:	f000 811b 	beq.w	801169a <ctlwizchip+0x2ee>
 8011464:	21ff      	movs	r1, #255	; 0xff
 8011466:	4894      	ldr	r0, [pc, #592]	; (80116b8 <ctlwizchip+0x30c>)
 8011468:	f7fe fe22 	bl	80100b0 <WIZCHIP_WRITE>
         break;
 801146c:	e115      	b.n	801169a <ctlwizchip+0x2ee>
      case CW_SYS_UNLOCK:
         if(tmp & SYS_CHIP_LOCK) CHIPUNLOCK();
 801146e:	7dfb      	ldrb	r3, [r7, #23]
 8011470:	f003 0304 	and.w	r3, r3, #4
 8011474:	2b00      	cmp	r3, #0
 8011476:	d003      	beq.n	8011480 <ctlwizchip+0xd4>
 8011478:	21ce      	movs	r1, #206	; 0xce
 801147a:	488d      	ldr	r0, [pc, #564]	; (80116b0 <ctlwizchip+0x304>)
 801147c:	f7fe fe18 	bl	80100b0 <WIZCHIP_WRITE>
         if(tmp & SYS_NET_LOCK)  NETUNLOCK();
 8011480:	7dfb      	ldrb	r3, [r7, #23]
 8011482:	f003 0302 	and.w	r3, r3, #2
 8011486:	2b00      	cmp	r3, #0
 8011488:	d003      	beq.n	8011492 <ctlwizchip+0xe6>
 801148a:	213a      	movs	r1, #58	; 0x3a
 801148c:	4889      	ldr	r0, [pc, #548]	; (80116b4 <ctlwizchip+0x308>)
 801148e:	f7fe fe0f 	bl	80100b0 <WIZCHIP_WRITE>
         if(tmp & SYS_PHY_LOCK)  PHYUNLOCK();
 8011492:	7dfb      	ldrb	r3, [r7, #23]
 8011494:	f003 0301 	and.w	r3, r3, #1
 8011498:	2b00      	cmp	r3, #0
 801149a:	f000 8100 	beq.w	801169e <ctlwizchip+0x2f2>
 801149e:	2153      	movs	r1, #83	; 0x53
 80114a0:	4885      	ldr	r0, [pc, #532]	; (80116b8 <ctlwizchip+0x30c>)
 80114a2:	f7fe fe05 	bl	80100b0 <WIZCHIP_WRITE>
         break;
 80114a6:	e0fa      	b.n	801169e <ctlwizchip+0x2f2>
      case CW_GET_SYSLOCK:
         *(uint8_t*)arg = getSYSR() >> 5;
 80114a8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80114ac:	f7fe fe10 	bl	80100d0 <WIZCHIP_READ>
 80114b0:	4603      	mov	r3, r0
 80114b2:	095b      	lsrs	r3, r3, #5
 80114b4:	b2da      	uxtb	r2, r3
 80114b6:	683b      	ldr	r3, [r7, #0]
 80114b8:	701a      	strb	r2, [r3, #0]
         break;
 80114ba:	e0f3      	b.n	80116a4 <ctlwizchip+0x2f8>
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80114bc:	f000 f958 	bl	8011770 <wizchip_sw_reset>
         break;
 80114c0:	e0f0      	b.n	80116a4 <ctlwizchip+0x2f8>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80114c2:	683b      	ldr	r3, [r7, #0]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d004      	beq.n	80114d2 <ctlwizchip+0x126>
         {
            ptmp[0] = (uint8_t*)arg;
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	3308      	adds	r3, #8
 80114d0:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	693a      	ldr	r2, [r7, #16]
 80114d6:	4611      	mov	r1, r2
 80114d8:	4618      	mov	r0, r3
 80114da:	f000 f9fd 	bl	80118d8 <wizchip_init>
 80114de:	4603      	mov	r3, r0
 80114e0:	e0e1      	b.n	80116a6 <ctlwizchip+0x2fa>
      case CW_GET_INTERRUPT:
        *(intr_kind*)arg = wizchip_getinterrupt();
 80114e2:	f000 fabf 	bl	8011a64 <wizchip_getinterrupt>
 80114e6:	4602      	mov	r2, r0
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	601a      	str	r2, [r3, #0]
         break;
 80114ec:	e0da      	b.n	80116a4 <ctlwizchip+0x2f8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*(intr_kind*)arg);
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	4618      	mov	r0, r3
 80114f4:	f000 fa7c 	bl	80119f0 <wizchip_clrinterrupt>
         break;
 80114f8:	e0d4      	b.n	80116a4 <ctlwizchip+0x2f8>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*(intr_kind*)arg);
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	4618      	mov	r0, r3
 8011500:	f000 face 	bl	8011aa0 <wizchip_setinterruptmask>
         break;         
 8011504:	e0ce      	b.n	80116a4 <ctlwizchip+0x2f8>
      case CW_GET_INTRMASK:
         *(intr_kind*)arg = wizchip_getinterruptmask();
 8011506:	f000 faf1 	bl	8011aec <wizchip_getinterruptmask>
 801150a:	4602      	mov	r2, r0
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	601a      	str	r2, [r3, #0]
         break;   
 8011510:	e0c8      	b.n	80116a4 <ctlwizchip+0x2f8>
      case CW_SET_INTRTIME:
         setINTPTMR(*(uint16_t*)arg);
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	881b      	ldrh	r3, [r3, #0]
 8011516:	0a1b      	lsrs	r3, r3, #8
 8011518:	b29b      	uxth	r3, r3
 801151a:	b2db      	uxtb	r3, r3
 801151c:	4619      	mov	r1, r3
 801151e:	4867      	ldr	r0, [pc, #412]	; (80116bc <ctlwizchip+0x310>)
 8011520:	f7fe fdc6 	bl	80100b0 <WIZCHIP_WRITE>
 8011524:	683b      	ldr	r3, [r7, #0]
 8011526:	881b      	ldrh	r3, [r3, #0]
 8011528:	b2db      	uxtb	r3, r3
 801152a:	4619      	mov	r1, r3
 801152c:	4864      	ldr	r0, [pc, #400]	; (80116c0 <ctlwizchip+0x314>)
 801152e:	f7fe fdbf 	bl	80100b0 <WIZCHIP_WRITE>
         break;
 8011532:	e0b7      	b.n	80116a4 <ctlwizchip+0x2f8>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTPTMR();
 8011534:	4861      	ldr	r0, [pc, #388]	; (80116bc <ctlwizchip+0x310>)
 8011536:	f7fe fdcb 	bl	80100d0 <WIZCHIP_READ>
 801153a:	4603      	mov	r3, r0
 801153c:	b29b      	uxth	r3, r3
 801153e:	021b      	lsls	r3, r3, #8
 8011540:	b29c      	uxth	r4, r3
 8011542:	485f      	ldr	r0, [pc, #380]	; (80116c0 <ctlwizchip+0x314>)
 8011544:	f7fe fdc4 	bl	80100d0 <WIZCHIP_READ>
 8011548:	4603      	mov	r3, r0
 801154a:	b29b      	uxth	r3, r3
 801154c:	4423      	add	r3, r4
 801154e:	b29a      	uxth	r2, r3
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	801a      	strh	r2, [r3, #0]
         break;   
 8011554:	e0a6      	b.n	80116a4 <ctlwizchip+0x2f8>
      case CW_SET_IEN:
         tmp = getSYCR1();
 8011556:	485b      	ldr	r0, [pc, #364]	; (80116c4 <ctlwizchip+0x318>)
 8011558:	f7fe fdba 	bl	80100d0 <WIZCHIP_READ>
 801155c:	4603      	mov	r3, r0
 801155e:	75fb      	strb	r3, [r7, #23]
         if(*(uint8_t*)arg == 1) setSYCR1(tmp | SYCR1_IEN);
 8011560:	683b      	ldr	r3, [r7, #0]
 8011562:	781b      	ldrb	r3, [r3, #0]
 8011564:	2b01      	cmp	r3, #1
 8011566:	d108      	bne.n	801157a <ctlwizchip+0x1ce>
 8011568:	7dfb      	ldrb	r3, [r7, #23]
 801156a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801156e:	b2db      	uxtb	r3, r3
 8011570:	4619      	mov	r1, r3
 8011572:	4854      	ldr	r0, [pc, #336]	; (80116c4 <ctlwizchip+0x318>)
 8011574:	f7fe fd9c 	bl	80100b0 <WIZCHIP_WRITE>
         else                      setSYCR1(tmp & ~SYCR1_IEN);
         break;
 8011578:	e094      	b.n	80116a4 <ctlwizchip+0x2f8>
         else                      setSYCR1(tmp & ~SYCR1_IEN);
 801157a:	7dfb      	ldrb	r3, [r7, #23]
 801157c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011580:	b2db      	uxtb	r3, r3
 8011582:	4619      	mov	r1, r3
 8011584:	484f      	ldr	r0, [pc, #316]	; (80116c4 <ctlwizchip+0x318>)
 8011586:	f7fe fd93 	bl	80100b0 <WIZCHIP_WRITE>
         break;
 801158a:	e08b      	b.n	80116a4 <ctlwizchip+0x2f8>
      case CW_GET_IEN:
         *((uint8_t*)arg) = getSYCR1() >> 7;
 801158c:	484d      	ldr	r0, [pc, #308]	; (80116c4 <ctlwizchip+0x318>)
 801158e:	f7fe fd9f 	bl	80100d0 <WIZCHIP_READ>
 8011592:	4603      	mov	r3, r0
 8011594:	09db      	lsrs	r3, r3, #7
 8011596:	b2da      	uxtb	r2, r3
 8011598:	683b      	ldr	r3, [r7, #0]
 801159a:	701a      	strb	r2, [r3, #0]
         break;
 801159c:	e082      	b.n	80116a4 <ctlwizchip+0x2f8>
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 801159e:	4b4a      	ldr	r3, [pc, #296]	; (80116c8 <ctlwizchip+0x31c>)
 80115a0:	789a      	ldrb	r2, [r3, #2]
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80115a6:	683b      	ldr	r3, [r7, #0]
 80115a8:	3301      	adds	r3, #1
 80115aa:	4a47      	ldr	r2, [pc, #284]	; (80116c8 <ctlwizchip+0x31c>)
 80115ac:	78d2      	ldrb	r2, [r2, #3]
 80115ae:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80115b0:	683b      	ldr	r3, [r7, #0]
 80115b2:	3302      	adds	r3, #2
 80115b4:	4a44      	ldr	r2, [pc, #272]	; (80116c8 <ctlwizchip+0x31c>)
 80115b6:	7912      	ldrb	r2, [r2, #4]
 80115b8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80115ba:	683b      	ldr	r3, [r7, #0]
 80115bc:	3303      	adds	r3, #3
 80115be:	4a42      	ldr	r2, [pc, #264]	; (80116c8 <ctlwizchip+0x31c>)
 80115c0:	7952      	ldrb	r2, [r2, #5]
 80115c2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	3304      	adds	r3, #4
 80115c8:	4a3f      	ldr	r2, [pc, #252]	; (80116c8 <ctlwizchip+0x31c>)
 80115ca:	7992      	ldrb	r2, [r2, #6]
 80115cc:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	3305      	adds	r3, #5
 80115d2:	2200      	movs	r2, #0
 80115d4:	701a      	strb	r2, [r3, #0]
         break;   
 80115d6:	e065      	b.n	80116a4 <ctlwizchip+0x2f8>
      case CW_GET_VER:
         *(uint16_t*)arg = getVER();
 80115d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80115dc:	f7fe fd78 	bl	80100d0 <WIZCHIP_READ>
 80115e0:	4603      	mov	r3, r0
 80115e2:	b29b      	uxth	r3, r3
 80115e4:	021b      	lsls	r3, r3, #8
 80115e6:	b29c      	uxth	r4, r3
 80115e8:	f44f 7040 	mov.w	r0, #768	; 0x300
 80115ec:	f7fe fd70 	bl	80100d0 <WIZCHIP_READ>
 80115f0:	4603      	mov	r3, r0
 80115f2:	b29b      	uxth	r3, r3
 80115f4:	4423      	add	r3, r4
 80115f6:	b29a      	uxth	r2, r3
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	801a      	strh	r2, [r3, #0]
         break;
 80115fc:	e052      	b.n	80116a4 <ctlwizchip+0x2f8>
      case CW_SET_SYSCLK:
         tmp = getSYCR1();
 80115fe:	4831      	ldr	r0, [pc, #196]	; (80116c4 <ctlwizchip+0x318>)
 8011600:	f7fe fd66 	bl	80100d0 <WIZCHIP_READ>
 8011604:	4603      	mov	r3, r0
 8011606:	75fb      	strb	r3, [r7, #23]
         if(*(uint8_t*)arg == SYSCLK_100MHZ)     setSYCR1(tmp & ~SYCR1_CLKSEL);
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	781b      	ldrb	r3, [r3, #0]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d108      	bne.n	8011622 <ctlwizchip+0x276>
 8011610:	7dfb      	ldrb	r3, [r7, #23]
 8011612:	f023 0301 	bic.w	r3, r3, #1
 8011616:	b2db      	uxtb	r3, r3
 8011618:	4619      	mov	r1, r3
 801161a:	482a      	ldr	r0, [pc, #168]	; (80116c4 <ctlwizchip+0x318>)
 801161c:	f7fe fd48 	bl	80100b0 <WIZCHIP_WRITE>
         else if(*(uint8_t*)arg == SYSCLK_25MHZ) setSYCR1(tmp |  SYCR1_CLKSEL);
         break;
 8011620:	e03f      	b.n	80116a2 <ctlwizchip+0x2f6>
         else if(*(uint8_t*)arg == SYSCLK_25MHZ) setSYCR1(tmp |  SYCR1_CLKSEL);
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	781b      	ldrb	r3, [r3, #0]
 8011626:	2b01      	cmp	r3, #1
 8011628:	d13b      	bne.n	80116a2 <ctlwizchip+0x2f6>
 801162a:	7dfb      	ldrb	r3, [r7, #23]
 801162c:	f043 0301 	orr.w	r3, r3, #1
 8011630:	b2db      	uxtb	r3, r3
 8011632:	4619      	mov	r1, r3
 8011634:	4823      	ldr	r0, [pc, #140]	; (80116c4 <ctlwizchip+0x318>)
 8011636:	f7fe fd3b 	bl	80100b0 <WIZCHIP_WRITE>
         break;
 801163a:	e032      	b.n	80116a2 <ctlwizchip+0x2f6>
      case CW_GET_SYSCLK:
         *(uint8_t*)arg = (getSYCR1() & SYCR1_CLKSEL);
 801163c:	4821      	ldr	r0, [pc, #132]	; (80116c4 <ctlwizchip+0x318>)
 801163e:	f7fe fd47 	bl	80100d0 <WIZCHIP_READ>
 8011642:	4603      	mov	r3, r0
 8011644:	f003 0301 	and.w	r3, r3, #1
 8011648:	b2da      	uxtb	r2, r3
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	701a      	strb	r2, [r3, #0]
         break;
 801164e:	e029      	b.n	80116a4 <ctlwizchip+0x2f8>
      case CW_RESET_PHY:
         wizphy_reset();
 8011650:	f000 fa7a 	bl	8011b48 <wizphy_reset>
         break;
 8011654:	e026      	b.n	80116a4 <ctlwizchip+0x2f8>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8011656:	6838      	ldr	r0, [r7, #0]
 8011658:	f000 fa96 	bl	8011b88 <wizphy_setphyconf>
         break;
 801165c:	e022      	b.n	80116a4 <ctlwizchip+0x2f8>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 801165e:	6838      	ldr	r0, [r7, #0]
 8011660:	f000 fade 	bl	8011c20 <wizphy_getphyconf>
         break;
 8011664:	e01e      	b.n	80116a4 <ctlwizchip+0x2f8>
      case CW_GET_PHYSTATUS:
         wizphy_getphystatus((wiz_PhyConf*)arg);
 8011666:	6838      	ldr	r0, [r7, #0]
 8011668:	f000 fb1a 	bl	8011ca0 <wizphy_getphystatus>
         break;
 801166c:	e01a      	b.n	80116a4 <ctlwizchip+0x2f8>
      case CW_SET_PHYPOWMODE:
         wizphy_setphypmode(tmp);
 801166e:	7dfb      	ldrb	r3, [r7, #23]
 8011670:	4618      	mov	r0, r3
 8011672:	f000 fb55 	bl	8011d20 <wizphy_setphypmode>
         break;
 8011676:	e015      	b.n	80116a4 <ctlwizchip+0x2f8>
      case CW_GET_PHYPOWMODE:
         *(uint8_t*)arg = wizphy_getphypmode();
 8011678:	f000 fb74 	bl	8011d64 <wizphy_getphypmode>
 801167c:	4603      	mov	r3, r0
 801167e:	b2da      	uxtb	r2, r3
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	701a      	strb	r2, [r3, #0]
         break;
 8011684:	e00e      	b.n	80116a4 <ctlwizchip+0x2f8>
      case CW_GET_PHYLINK:
         *(uint8_t*)arg = wizphy_getphylink();
 8011686:	f000 fa51 	bl	8011b2c <wizphy_getphylink>
 801168a:	4603      	mov	r3, r0
 801168c:	b2da      	uxtb	r2, r3
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	701a      	strb	r2, [r3, #0]
         break;
 8011692:	e007      	b.n	80116a4 <ctlwizchip+0x2f8>
      default:
         return -1;
 8011694:	f04f 33ff 	mov.w	r3, #4294967295
 8011698:	e005      	b.n	80116a6 <ctlwizchip+0x2fa>
         break;
 801169a:	bf00      	nop
 801169c:	e002      	b.n	80116a4 <ctlwizchip+0x2f8>
         break;
 801169e:	bf00      	nop
 80116a0:	e000      	b.n	80116a4 <ctlwizchip+0x2f8>
         break;
 80116a2:	bf00      	nop
   }
   return 0;
 80116a4:	2300      	movs	r3, #0
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	371c      	adds	r7, #28
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd90      	pop	{r4, r7, pc}
 80116ae:	bf00      	nop
 80116b0:	0041f400 	.word	0x0041f400
 80116b4:	0041f500 	.word	0x0041f500
 80116b8:	0041f600 	.word	0x0041f600
 80116bc:	0041c500 	.word	0x0041c500
 80116c0:	0041c600 	.word	0x0041c600
 80116c4:	00200500 	.word	0x00200500
 80116c8:	240000f0 	.word	0x240000f0

080116cc <ctlnetwork>:

int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b082      	sub	sp, #8
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	4603      	mov	r3, r0
 80116d4:	6039      	str	r1, [r7, #0]
 80116d6:	71fb      	strb	r3, [r7, #7]
   switch(cntype)
 80116d8:	79fb      	ldrb	r3, [r7, #7]
 80116da:	2b07      	cmp	r3, #7
 80116dc:	d83d      	bhi.n	801175a <ctlnetwork+0x8e>
 80116de:	a201      	add	r2, pc, #4	; (adr r2, 80116e4 <ctlnetwork+0x18>)
 80116e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116e4:	08011705 	.word	0x08011705
 80116e8:	0801170d 	.word	0x0801170d
 80116ec:	08011715 	.word	0x08011715
 80116f0:	08011721 	.word	0x08011721
 80116f4:	0801172d 	.word	0x0801172d
 80116f8:	08011735 	.word	0x08011735
 80116fc:	0801173d 	.word	0x0801173d
 8011700:	0801174b 	.word	0x0801174b
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8011704:	6838      	ldr	r0, [r7, #0]
 8011706:	f000 fb3f 	bl	8011d88 <wizchip_setnetinfo>
         break;
 801170a:	e029      	b.n	8011760 <ctlnetwork+0x94>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 801170c:	6838      	ldr	r0, [r7, #0]
 801170e:	f000 fbb9 	bl	8011e84 <wizchip_getnetinfo>
         break;
 8011712:	e025      	b.n	8011760 <ctlnetwork+0x94>
      case CN_SET_NETMODE:
         wizchip_setnetmode(*(netmode_type*)arg);
 8011714:	683b      	ldr	r3, [r7, #0]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	4618      	mov	r0, r3
 801171a:	f000 fc33 	bl	8011f84 <wizchip_setnetmode>
         break;
 801171e:	e01f      	b.n	8011760 <ctlnetwork+0x94>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8011720:	f000 fc5c 	bl	8011fdc <wizchip_getnetmode>
 8011724:	4602      	mov	r2, r0
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	601a      	str	r2, [r3, #0]
         break;
 801172a:	e019      	b.n	8011760 <ctlnetwork+0x94>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 801172c:	6838      	ldr	r0, [r7, #0]
 801172e:	f000 fc83 	bl	8012038 <wizchip_settimeout>
         break;
 8011732:	e015      	b.n	8011760 <ctlnetwork+0x94>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8011734:	6838      	ldr	r0, [r7, #0]
 8011736:	f000 fcbf 	bl	80120b8 <wizchip_gettimeout>
         break;
 801173a:	e011      	b.n	8011760 <ctlnetwork+0x94>
      case CN_SET_PREFER:
         setSLPSR(*(uint8_t*)arg);
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	4619      	mov	r1, r3
 8011742:	480a      	ldr	r0, [pc, #40]	; (801176c <ctlnetwork+0xa0>)
 8011744:	f7fe fcb4 	bl	80100b0 <WIZCHIP_WRITE>
         break;
 8011748:	e00a      	b.n	8011760 <ctlnetwork+0x94>
      case CN_GET_PREFER:
    	  *(uint8_t*)arg= getSLPSR();
 801174a:	4808      	ldr	r0, [pc, #32]	; (801176c <ctlnetwork+0xa0>)
 801174c:	f7fe fcc0 	bl	80100d0 <WIZCHIP_READ>
 8011750:	4603      	mov	r3, r0
 8011752:	461a      	mov	r2, r3
 8011754:	683b      	ldr	r3, [r7, #0]
 8011756:	701a      	strb	r2, [r3, #0]
         break;
 8011758:	e002      	b.n	8011760 <ctlnetwork+0x94>
      default:
         return -1;
 801175a:	f04f 33ff 	mov.w	r3, #4294967295
 801175e:	e000      	b.n	8011762 <ctlnetwork+0x96>
   }
   return 0;
 8011760:	2300      	movs	r3, #0
}
 8011762:	4618      	mov	r0, r3
 8011764:	3708      	adds	r7, #8
 8011766:	46bd      	mov	sp, r7
 8011768:	bd80      	pop	{r7, pc}
 801176a:	bf00      	nop
 801176c:	00212c00 	.word	0x00212c00

08011770 <wizchip_sw_reset>:
          break;
   }
}

void wizchip_sw_reset(void)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b096      	sub	sp, #88	; 0x58
 8011774:	af00      	add	r7, sp, #0
   uint8_t gw[4], sn[4], sip[4], gw6[16], sn6[16], lla[16], gua[16];
   uint8_t mac[6];
   uint8_t islock = getSYSR();
 8011776:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 801177a:	f7fe fca9 	bl	80100d0 <WIZCHIP_READ>
 801177e:	4603      	mov	r3, r0
 8011780:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

   CHIPUNLOCK();
 8011784:	21ce      	movs	r1, #206	; 0xce
 8011786:	4849      	ldr	r0, [pc, #292]	; (80118ac <wizchip_sw_reset+0x13c>)
 8011788:	f7fe fc92 	bl	80100b0 <WIZCHIP_WRITE>

   getSHAR(mac);
 801178c:	463b      	mov	r3, r7
 801178e:	2206      	movs	r2, #6
 8011790:	4619      	mov	r1, r3
 8011792:	4847      	ldr	r0, [pc, #284]	; (80118b0 <wizchip_sw_reset+0x140>)
 8011794:	f7fe fcbd 	bl	8010112 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);	getGA6R(gw6); getSUB6R(sn6); getLLAR(lla); getGUAR(gua);
 8011798:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801179c:	2204      	movs	r2, #4
 801179e:	4619      	mov	r1, r3
 80117a0:	4844      	ldr	r0, [pc, #272]	; (80118b4 <wizchip_sw_reset+0x144>)
 80117a2:	f7fe fcb6 	bl	8010112 <WIZCHIP_READ_BUF>
 80117a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80117aa:	2204      	movs	r2, #4
 80117ac:	4619      	mov	r1, r3
 80117ae:	4842      	ldr	r0, [pc, #264]	; (80118b8 <wizchip_sw_reset+0x148>)
 80117b0:	f7fe fcaf 	bl	8010112 <WIZCHIP_READ_BUF>
 80117b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80117b8:	2204      	movs	r2, #4
 80117ba:	4619      	mov	r1, r3
 80117bc:	483f      	ldr	r0, [pc, #252]	; (80118bc <wizchip_sw_reset+0x14c>)
 80117be:	f7fe fca8 	bl	8010112 <WIZCHIP_READ_BUF>
 80117c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80117c6:	2210      	movs	r2, #16
 80117c8:	4619      	mov	r1, r3
 80117ca:	483d      	ldr	r0, [pc, #244]	; (80118c0 <wizchip_sw_reset+0x150>)
 80117cc:	f7fe fca1 	bl	8010112 <WIZCHIP_READ_BUF>
 80117d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80117d4:	2210      	movs	r2, #16
 80117d6:	4619      	mov	r1, r3
 80117d8:	483a      	ldr	r0, [pc, #232]	; (80118c4 <wizchip_sw_reset+0x154>)
 80117da:	f7fe fc9a 	bl	8010112 <WIZCHIP_READ_BUF>
 80117de:	f107 0318 	add.w	r3, r7, #24
 80117e2:	2210      	movs	r2, #16
 80117e4:	4619      	mov	r1, r3
 80117e6:	4838      	ldr	r0, [pc, #224]	; (80118c8 <wizchip_sw_reset+0x158>)
 80117e8:	f7fe fc93 	bl	8010112 <WIZCHIP_READ_BUF>
 80117ec:	f107 0308 	add.w	r3, r7, #8
 80117f0:	2210      	movs	r2, #16
 80117f2:	4619      	mov	r1, r3
 80117f4:	4835      	ldr	r0, [pc, #212]	; (80118cc <wizchip_sw_reset+0x15c>)
 80117f6:	f7fe fc8c 	bl	8010112 <WIZCHIP_READ_BUF>
   setSYCR0(SYCR0_RST);
 80117fa:	2100      	movs	r1, #0
 80117fc:	4834      	ldr	r0, [pc, #208]	; (80118d0 <wizchip_sw_reset+0x160>)
 80117fe:	f7fe fc57 	bl	80100b0 <WIZCHIP_WRITE>
   getSYCR0(); // for delay
 8011802:	4833      	ldr	r0, [pc, #204]	; (80118d0 <wizchip_sw_reset+0x160>)
 8011804:	f7fe fc64 	bl	80100d0 <WIZCHIP_READ>

   NETUNLOCK();
 8011808:	213a      	movs	r1, #58	; 0x3a
 801180a:	4832      	ldr	r0, [pc, #200]	; (80118d4 <wizchip_sw_reset+0x164>)
 801180c:	f7fe fc50 	bl	80100b0 <WIZCHIP_WRITE>

   setSHAR(mac);
 8011810:	463b      	mov	r3, r7
 8011812:	2206      	movs	r2, #6
 8011814:	4619      	mov	r1, r3
 8011816:	4826      	ldr	r0, [pc, #152]	; (80118b0 <wizchip_sw_reset+0x140>)
 8011818:	f7fe fc6a 	bl	80100f0 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 801181c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011820:	2204      	movs	r2, #4
 8011822:	4619      	mov	r1, r3
 8011824:	4823      	ldr	r0, [pc, #140]	; (80118b4 <wizchip_sw_reset+0x144>)
 8011826:	f7fe fc63 	bl	80100f0 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 801182a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801182e:	2204      	movs	r2, #4
 8011830:	4619      	mov	r1, r3
 8011832:	4821      	ldr	r0, [pc, #132]	; (80118b8 <wizchip_sw_reset+0x148>)
 8011834:	f7fe fc5c 	bl	80100f0 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8011838:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801183c:	2204      	movs	r2, #4
 801183e:	4619      	mov	r1, r3
 8011840:	481e      	ldr	r0, [pc, #120]	; (80118bc <wizchip_sw_reset+0x14c>)
 8011842:	f7fe fc55 	bl	80100f0 <WIZCHIP_WRITE_BUF>
   setGA6R(gw6); 
 8011846:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801184a:	2210      	movs	r2, #16
 801184c:	4619      	mov	r1, r3
 801184e:	481c      	ldr	r0, [pc, #112]	; (80118c0 <wizchip_sw_reset+0x150>)
 8011850:	f7fe fc4e 	bl	80100f0 <WIZCHIP_WRITE_BUF>
   setSUB6R(sn6); 
 8011854:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011858:	2210      	movs	r2, #16
 801185a:	4619      	mov	r1, r3
 801185c:	4819      	ldr	r0, [pc, #100]	; (80118c4 <wizchip_sw_reset+0x154>)
 801185e:	f7fe fc47 	bl	80100f0 <WIZCHIP_WRITE_BUF>
   setLLAR(lla);
 8011862:	f107 0318 	add.w	r3, r7, #24
 8011866:	2210      	movs	r2, #16
 8011868:	4619      	mov	r1, r3
 801186a:	4817      	ldr	r0, [pc, #92]	; (80118c8 <wizchip_sw_reset+0x158>)
 801186c:	f7fe fc40 	bl	80100f0 <WIZCHIP_WRITE_BUF>
   setGUAR(gua);
 8011870:	f107 0308 	add.w	r3, r7, #8
 8011874:	2210      	movs	r2, #16
 8011876:	4619      	mov	r1, r3
 8011878:	4814      	ldr	r0, [pc, #80]	; (80118cc <wizchip_sw_reset+0x15c>)
 801187a:	f7fe fc39 	bl	80100f0 <WIZCHIP_WRITE_BUF>
   if(islock & SYSR_CHPL) CHIPLOCK();
 801187e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8011882:	2b00      	cmp	r3, #0
 8011884:	da03      	bge.n	801188e <wizchip_sw_reset+0x11e>
 8011886:	21ff      	movs	r1, #255	; 0xff
 8011888:	4808      	ldr	r0, [pc, #32]	; (80118ac <wizchip_sw_reset+0x13c>)
 801188a:	f7fe fc11 	bl	80100b0 <WIZCHIP_WRITE>
   if(islock & SYSR_NETL) NETLOCK();
 801188e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011896:	2b00      	cmp	r3, #0
 8011898:	d003      	beq.n	80118a2 <wizchip_sw_reset+0x132>
 801189a:	21c5      	movs	r1, #197	; 0xc5
 801189c:	480d      	ldr	r0, [pc, #52]	; (80118d4 <wizchip_sw_reset+0x164>)
 801189e:	f7fe fc07 	bl	80100b0 <WIZCHIP_WRITE>
}
 80118a2:	bf00      	nop
 80118a4:	3758      	adds	r7, #88	; 0x58
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd80      	pop	{r7, pc}
 80118aa:	bf00      	nop
 80118ac:	0041f400 	.word	0x0041f400
 80118b0:	00412000 	.word	0x00412000
 80118b4:	00413000 	.word	0x00413000
 80118b8:	00413400 	.word	0x00413400
 80118bc:	00413800 	.word	0x00413800
 80118c0:	00417000 	.word	0x00417000
 80118c4:	00416000 	.word	0x00416000
 80118c8:	00414000 	.word	0x00414000
 80118cc:	00415000 	.word	0x00415000
 80118d0:	00200400 	.word	0x00200400
 80118d4:	0041f500 	.word	0x0041f500

080118d8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b084      	sub	sp, #16
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
 80118e0:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 80118e2:	2300      	movs	r3, #0
 80118e4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80118e6:	f7ff ff43 	bl	8011770 <wizchip_sw_reset>
   if(txsize)
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d03b      	beq.n	8011968 <wizchip_init+0x90>
   {
      tmp = 0;
 80118f0:	2300      	movs	r3, #0
 80118f2:	73bb      	strb	r3, [r7, #14]
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80118f4:	2300      	movs	r3, #0
 80118f6:	73fb      	strb	r3, [r7, #15]
 80118f8:	e015      	b.n	8011926 <wizchip_init+0x4e>
			{
				tmp += txsize[i];		
 80118fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80118fe:	687a      	ldr	r2, [r7, #4]
 8011900:	4413      	add	r3, r2
 8011902:	781a      	ldrb	r2, [r3, #0]
 8011904:	7bbb      	ldrb	r3, [r7, #14]
 8011906:	4413      	add	r3, r2
 8011908:	b2db      	uxtb	r3, r3
 801190a:	73bb      	strb	r3, [r7, #14]
				if(tmp > 2*_WIZCHIP_SOCK_NUM_) return -1;		
 801190c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011910:	2b10      	cmp	r3, #16
 8011912:	dd02      	ble.n	801191a <wizchip_init+0x42>
 8011914:	f04f 33ff 	mov.w	r3, #4294967295
 8011918:	e066      	b.n	80119e8 <wizchip_init+0x110>
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801191a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801191e:	b2db      	uxtb	r3, r3
 8011920:	3301      	adds	r3, #1
 8011922:	b2db      	uxtb	r3, r3
 8011924:	73fb      	strb	r3, [r7, #15]
 8011926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801192a:	2b07      	cmp	r3, #7
 801192c:	dde5      	ble.n	80118fa <wizchip_init+0x22>
			}
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++) setSn_TXBUF_SIZE(i, txsize[i]);			
 801192e:	2300      	movs	r3, #0
 8011930:	73fb      	strb	r3, [r7, #15]
 8011932:	e015      	b.n	8011960 <wizchip_init+0x88>
 8011934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011938:	009b      	lsls	r3, r3, #2
 801193a:	3301      	adds	r3, #1
 801193c:	00db      	lsls	r3, r3, #3
 801193e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8011942:	4618      	mov	r0, r3
 8011944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011948:	687a      	ldr	r2, [r7, #4]
 801194a:	4413      	add	r3, r2
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	4619      	mov	r1, r3
 8011950:	f7fe fbae 	bl	80100b0 <WIZCHIP_WRITE>
 8011954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011958:	b2db      	uxtb	r3, r3
 801195a:	3301      	adds	r3, #1
 801195c:	b2db      	uxtb	r3, r3
 801195e:	73fb      	strb	r3, [r7, #15]
 8011960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011964:	2b07      	cmp	r3, #7
 8011966:	dde5      	ble.n	8011934 <wizchip_init+0x5c>
   }
   if(rxsize)
 8011968:	683b      	ldr	r3, [r7, #0]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d03b      	beq.n	80119e6 <wizchip_init+0x10e>
   {
      tmp = 0;
 801196e:	2300      	movs	r3, #0
 8011970:	73bb      	strb	r3, [r7, #14]
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8011972:	2300      	movs	r3, #0
 8011974:	73fb      	strb	r3, [r7, #15]
 8011976:	e015      	b.n	80119a4 <wizchip_init+0xcc>
			{
				tmp += rxsize[i];		
 8011978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801197c:	683a      	ldr	r2, [r7, #0]
 801197e:	4413      	add	r3, r2
 8011980:	781a      	ldrb	r2, [r3, #0]
 8011982:	7bbb      	ldrb	r3, [r7, #14]
 8011984:	4413      	add	r3, r2
 8011986:	b2db      	uxtb	r3, r3
 8011988:	73bb      	strb	r3, [r7, #14]
				if(tmp > 2*_WIZCHIP_SOCK_NUM_) return -1;		
 801198a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801198e:	2b10      	cmp	r3, #16
 8011990:	dd02      	ble.n	8011998 <wizchip_init+0xc0>
 8011992:	f04f 33ff 	mov.w	r3, #4294967295
 8011996:	e027      	b.n	80119e8 <wizchip_init+0x110>
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8011998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801199c:	b2db      	uxtb	r3, r3
 801199e:	3301      	adds	r3, #1
 80119a0:	b2db      	uxtb	r3, r3
 80119a2:	73fb      	strb	r3, [r7, #15]
 80119a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119a8:	2b07      	cmp	r3, #7
 80119aa:	dde5      	ble.n	8011978 <wizchip_init+0xa0>
			}
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++) setSn_RXBUF_SIZE(i, rxsize[i]);
 80119ac:	2300      	movs	r3, #0
 80119ae:	73fb      	strb	r3, [r7, #15]
 80119b0:	e015      	b.n	80119de <wizchip_init+0x106>
 80119b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119b6:	009b      	lsls	r3, r3, #2
 80119b8:	3301      	adds	r3, #1
 80119ba:	00db      	lsls	r3, r3, #3
 80119bc:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 80119c0:	4618      	mov	r0, r3
 80119c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119c6:	683a      	ldr	r2, [r7, #0]
 80119c8:	4413      	add	r3, r2
 80119ca:	781b      	ldrb	r3, [r3, #0]
 80119cc:	4619      	mov	r1, r3
 80119ce:	f7fe fb6f 	bl	80100b0 <WIZCHIP_WRITE>
 80119d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119d6:	b2db      	uxtb	r3, r3
 80119d8:	3301      	adds	r3, #1
 80119da:	b2db      	uxtb	r3, r3
 80119dc:	73fb      	strb	r3, [r7, #15]
 80119de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119e2:	2b07      	cmp	r3, #7
 80119e4:	dde5      	ble.n	80119b2 <wizchip_init+0xda>
   }
   return 0;
 80119e6:	2300      	movs	r3, #0
}
 80119e8:	4618      	mov	r0, r3
 80119ea:	3710      	adds	r7, #16
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}

080119f0 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b084      	sub	sp, #16
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
   int i;
   uint8_t ir   = (uint8_t)intr;
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	72fb      	strb	r3, [r7, #11]
   uint8_t sir  = (uint8_t)((uint32_t)intr >> 8);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	0a1b      	lsrs	r3, r3, #8
 8011a00:	72bb      	strb	r3, [r7, #10]
   uint8_t slir = (uint8_t)((uint32_t)intr >> 16);
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	0c1b      	lsrs	r3, r3, #16
 8011a06:	727b      	strb	r3, [r7, #9]
   setIRCLR(ir);
 8011a08:	7afb      	ldrb	r3, [r7, #11]
 8011a0a:	4619      	mov	r1, r3
 8011a0c:	4813      	ldr	r0, [pc, #76]	; (8011a5c <wizchip_clrinterrupt+0x6c>)
 8011a0e:	f7fe fb4f 	bl	80100b0 <WIZCHIP_WRITE>
   for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 8011a12:	2300      	movs	r3, #0
 8011a14:	60fb      	str	r3, [r7, #12]
 8011a16:	e014      	b.n	8011a42 <wizchip_clrinterrupt+0x52>
   {
   	if(sir&(1<<i))   	setSn_IRCLR(i,0xFF);
 8011a18:	7aba      	ldrb	r2, [r7, #10]
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	fa42 f303 	asr.w	r3, r2, r3
 8011a20:	f003 0301 	and.w	r3, r3, #1
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d009      	beq.n	8011a3c <wizchip_clrinterrupt+0x4c>
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	009b      	lsls	r3, r3, #2
 8011a2c:	3301      	adds	r3, #1
 8011a2e:	00db      	lsls	r3, r3, #3
 8011a30:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8011a34:	21ff      	movs	r1, #255	; 0xff
 8011a36:	4618      	mov	r0, r3
 8011a38:	f7fe fb3a 	bl	80100b0 <WIZCHIP_WRITE>
   for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	3301      	adds	r3, #1
 8011a40:	60fb      	str	r3, [r7, #12]
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	2b07      	cmp	r3, #7
 8011a46:	dde7      	ble.n	8011a18 <wizchip_clrinterrupt+0x28>
   }
   setSLIRCLR(slir);
 8011a48:	7a7b      	ldrb	r3, [r7, #9]
 8011a4a:	4619      	mov	r1, r3
 8011a4c:	4804      	ldr	r0, [pc, #16]	; (8011a60 <wizchip_clrinterrupt+0x70>)
 8011a4e:	f7fe fb2f 	bl	80100b0 <WIZCHIP_WRITE>
}
 8011a52:	bf00      	nop
 8011a54:	3710      	adds	r7, #16
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}
 8011a5a:	bf00      	nop
 8011a5c:	00210800 	.word	0x00210800
 8011a60:	00212800 	.word	0x00212800

08011a64 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8011a64:	b590      	push	{r4, r7, lr}
 8011a66:	b083      	sub	sp, #12
 8011a68:	af00      	add	r7, sp, #0
   uint32_t ret;
   ret = (((uint32_t)getSLIR())<<16) | (((uint32_t)getSIR())<<8) | (((uint32_t)getIR()));
 8011a6a:	480b      	ldr	r0, [pc, #44]	; (8011a98 <wizchip_getinterrupt+0x34>)
 8011a6c:	f7fe fb30 	bl	80100d0 <WIZCHIP_READ>
 8011a70:	4603      	mov	r3, r0
 8011a72:	041c      	lsls	r4, r3, #16
 8011a74:	4809      	ldr	r0, [pc, #36]	; (8011a9c <wizchip_getinterrupt+0x38>)
 8011a76:	f7fe fb2b 	bl	80100d0 <WIZCHIP_READ>
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	021b      	lsls	r3, r3, #8
 8011a7e:	431c      	orrs	r4, r3
 8011a80:	f44f 1004 	mov.w	r0, #2162688	; 0x210000
 8011a84:	f7fe fb24 	bl	80100d0 <WIZCHIP_READ>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	4323      	orrs	r3, r4
 8011a8c:	607b      	str	r3, [r7, #4]
   return (intr_kind)ret;
 8011a8e:	687b      	ldr	r3, [r7, #4]
}
 8011a90:	4618      	mov	r0, r3
 8011a92:	370c      	adds	r7, #12
 8011a94:	46bd      	mov	sp, r7
 8011a96:	bd90      	pop	{r4, r7, pc}
 8011a98:	00210200 	.word	0x00210200
 8011a9c:	00210100 	.word	0x00210100

08011aa0 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b084      	sub	sp, #16
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
   uint8_t imr   = (uint8_t)intr;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	73fb      	strb	r3, [r7, #15]
   uint8_t simr  = (uint8_t)((uint32_t)intr >> 8);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	0a1b      	lsrs	r3, r3, #8
 8011ab0:	73bb      	strb	r3, [r7, #14]
   uint8_t slimr = (uint8_t)((uint32_t)intr >> 16);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	0c1b      	lsrs	r3, r3, #16
 8011ab6:	737b      	strb	r3, [r7, #13]
   setIMR(imr);
 8011ab8:	7bfb      	ldrb	r3, [r7, #15]
 8011aba:	4619      	mov	r1, r3
 8011abc:	4808      	ldr	r0, [pc, #32]	; (8011ae0 <wizchip_setinterruptmask+0x40>)
 8011abe:	f7fe faf7 	bl	80100b0 <WIZCHIP_WRITE>
   setSIMR(simr);
 8011ac2:	7bbb      	ldrb	r3, [r7, #14]
 8011ac4:	4619      	mov	r1, r3
 8011ac6:	4807      	ldr	r0, [pc, #28]	; (8011ae4 <wizchip_setinterruptmask+0x44>)
 8011ac8:	f7fe faf2 	bl	80100b0 <WIZCHIP_WRITE>
   setSLIMR(slimr);
 8011acc:	7b7b      	ldrb	r3, [r7, #13]
 8011ace:	4619      	mov	r1, r3
 8011ad0:	4805      	ldr	r0, [pc, #20]	; (8011ae8 <wizchip_setinterruptmask+0x48>)
 8011ad2:	f7fe faed 	bl	80100b0 <WIZCHIP_WRITE>
}
 8011ad6:	bf00      	nop
 8011ad8:	3710      	adds	r7, #16
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}
 8011ade:	bf00      	nop
 8011ae0:	00210400 	.word	0x00210400
 8011ae4:	00211400 	.word	0x00211400
 8011ae8:	00212400 	.word	0x00212400

08011aec <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8011aec:	b590      	push	{r4, r7, lr}
 8011aee:	b083      	sub	sp, #12
 8011af0:	af00      	add	r7, sp, #0
   uint32_t ret;
   ret = (((uint32_t)getSLIMR())<<16) | (((uint32_t)getSIMR())<<8) | (((uint32_t)getIMR()));
 8011af2:	480b      	ldr	r0, [pc, #44]	; (8011b20 <wizchip_getinterruptmask+0x34>)
 8011af4:	f7fe faec 	bl	80100d0 <WIZCHIP_READ>
 8011af8:	4603      	mov	r3, r0
 8011afa:	041c      	lsls	r4, r3, #16
 8011afc:	4809      	ldr	r0, [pc, #36]	; (8011b24 <wizchip_getinterruptmask+0x38>)
 8011afe:	f7fe fae7 	bl	80100d0 <WIZCHIP_READ>
 8011b02:	4603      	mov	r3, r0
 8011b04:	021b      	lsls	r3, r3, #8
 8011b06:	431c      	orrs	r4, r3
 8011b08:	4807      	ldr	r0, [pc, #28]	; (8011b28 <wizchip_getinterruptmask+0x3c>)
 8011b0a:	f7fe fae1 	bl	80100d0 <WIZCHIP_READ>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	4323      	orrs	r3, r4
 8011b12:	607b      	str	r3, [r7, #4]
   return (intr_kind)ret;
 8011b14:	687b      	ldr	r3, [r7, #4]
}
 8011b16:	4618      	mov	r0, r3
 8011b18:	370c      	adds	r7, #12
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd90      	pop	{r4, r7, pc}
 8011b1e:	bf00      	nop
 8011b20:	00212400 	.word	0x00212400
 8011b24:	00211400 	.word	0x00211400
 8011b28:	00210400 	.word	0x00210400

08011b2c <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   return (getPHYSR() & PHYSR_LNK);
 8011b30:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8011b34:	f7fe facc 	bl	80100d0 <WIZCHIP_READ>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	b25b      	sxtb	r3, r3
 8011b3c:	f003 0301 	and.w	r3, r3, #1
 8011b40:	b25b      	sxtb	r3, r3
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
   if(wiz_mdio_read(PHYRAR_BMSR) & BMSR_LINK_STATUS) return PHY_LINK_ON;
   return PHY_LINK_OFF;
#endif  
}
 8011b42:	4618      	mov	r0, r3
 8011b44:	bd80      	pop	{r7, pc}
	...

08011b48 <wizphy_reset>:

void wizphy_reset(void)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b082      	sub	sp, #8
 8011b4c:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = getPHYCR1() | PHYCR1_RST;
 8011b4e:	480c      	ldr	r0, [pc, #48]	; (8011b80 <wizphy_reset+0x38>)
 8011b50:	f7fe fabe 	bl	80100d0 <WIZCHIP_READ>
 8011b54:	4603      	mov	r3, r0
 8011b56:	f043 0301 	orr.w	r3, r3, #1
 8011b5a:	71fb      	strb	r3, [r7, #7]
   PHYUNLOCK();
 8011b5c:	2153      	movs	r1, #83	; 0x53
 8011b5e:	4809      	ldr	r0, [pc, #36]	; (8011b84 <wizphy_reset+0x3c>)
 8011b60:	f7fe faa6 	bl	80100b0 <WIZCHIP_WRITE>
   setPHYCR1(tmp);
 8011b64:	79fb      	ldrb	r3, [r7, #7]
 8011b66:	4619      	mov	r1, r3
 8011b68:	4805      	ldr	r0, [pc, #20]	; (8011b80 <wizphy_reset+0x38>)
 8011b6a:	f7fe faa1 	bl	80100b0 <WIZCHIP_WRITE>
   PHYLOCK();
 8011b6e:	21ff      	movs	r1, #255	; 0xff
 8011b70:	4804      	ldr	r0, [pc, #16]	; (8011b84 <wizphy_reset+0x3c>)
 8011b72:	f7fe fa9d 	bl	80100b0 <WIZCHIP_WRITE>
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
	wiz_mdio_write(PHYRAR_BMCR, wiz_mdio_read(PHYRAR_BMCR) | BMCR_RST);
	while(wiz_mdio_read(PHYRAR_BMCR) & BMCR_RST);
#endif
}
 8011b76:	bf00      	nop
 8011b78:	3708      	adds	r7, #8
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}
 8011b7e:	bf00      	nop
 8011b80:	00301d00 	.word	0x00301d00
 8011b84:	0041f600 	.word	0x0041f600

08011b88 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b084      	sub	sp, #16
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = 0;
 8011b90:	2300      	movs	r3, #0
 8011b92:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_TE)
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	781b      	ldrb	r3, [r3, #0]
 8011b98:	2b02      	cmp	r3, #2
 8011b9a:	d10d      	bne.n	8011bb8 <wizphy_setphyconf+0x30>
   {
      setPHYCR1(getPHYCR1() | PHYCR1_TE);
 8011b9c:	481e      	ldr	r0, [pc, #120]	; (8011c18 <wizphy_setphyconf+0x90>)
 8011b9e:	f7fe fa97 	bl	80100d0 <WIZCHIP_READ>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	f043 0308 	orr.w	r3, r3, #8
 8011ba8:	b2db      	uxtb	r3, r3
 8011baa:	4619      	mov	r1, r3
 8011bac:	481a      	ldr	r0, [pc, #104]	; (8011c18 <wizphy_setphyconf+0x90>)
 8011bae:	f7fe fa7f 	bl	80100b0 <WIZCHIP_WRITE>
      tmp = PHYCR0_AUTO;
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	73fb      	strb	r3, [r7, #15]
 8011bb6:	e025      	b.n	8011c04 <wizphy_setphyconf+0x7c>
   }
   else
   {
      setPHYCR1(getPHYCR1() & ~PHYCR1_TE);
 8011bb8:	4817      	ldr	r0, [pc, #92]	; (8011c18 <wizphy_setphyconf+0x90>)
 8011bba:	f7fe fa89 	bl	80100d0 <WIZCHIP_READ>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	f023 0308 	bic.w	r3, r3, #8
 8011bc4:	b2db      	uxtb	r3, r3
 8011bc6:	4619      	mov	r1, r3
 8011bc8:	4813      	ldr	r0, [pc, #76]	; (8011c18 <wizphy_setphyconf+0x90>)
 8011bca:	f7fe fa71 	bl	80100b0 <WIZCHIP_WRITE>
      if(phyconf->mode == PHY_MODE_AUTONEGO) tmp = PHYCR0_AUTO;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	781b      	ldrb	r3, [r3, #0]
 8011bd2:	2b01      	cmp	r3, #1
 8011bd4:	d102      	bne.n	8011bdc <wizphy_setphyconf+0x54>
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	73fb      	strb	r3, [r7, #15]
 8011bda:	e013      	b.n	8011c04 <wizphy_setphyconf+0x7c>
      else
      {
         tmp |= 0x04;
 8011bdc:	7bfb      	ldrb	r3, [r7, #15]
 8011bde:	f043 0304 	orr.w	r3, r3, #4
 8011be2:	73fb      	strb	r3, [r7, #15]
         if(phyconf->speed  == PHY_SPEED_10)    tmp |= 0x02;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	785b      	ldrb	r3, [r3, #1]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d103      	bne.n	8011bf4 <wizphy_setphyconf+0x6c>
 8011bec:	7bfb      	ldrb	r3, [r7, #15]
 8011bee:	f043 0302 	orr.w	r3, r3, #2
 8011bf2:	73fb      	strb	r3, [r7, #15]
         if(phyconf->duplex == PHY_DUPLEX_HALF) tmp |= 0x01;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	789b      	ldrb	r3, [r3, #2]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d103      	bne.n	8011c04 <wizphy_setphyconf+0x7c>
 8011bfc:	7bfb      	ldrb	r3, [r7, #15]
 8011bfe:	f043 0301 	orr.w	r3, r3, #1
 8011c02:	73fb      	strb	r3, [r7, #15]
      }
   }
   setPHYCR0(tmp);
 8011c04:	7bfb      	ldrb	r3, [r7, #15]
 8011c06:	4619      	mov	r1, r3
 8011c08:	4804      	ldr	r0, [pc, #16]	; (8011c1c <wizphy_setphyconf+0x94>)
 8011c0a:	f7fe fa51 	bl	80100b0 <WIZCHIP_WRITE>
         if(phyconf->speed == PHY_SPEED_100)    tmp |= BMCR_SPD;
      }
      wiz_mdio_write(PHYRAR_BMCR, tmp);
   }
#endif   
}
 8011c0e:	bf00      	nop
 8011c10:	3710      	adds	r7, #16
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd80      	pop	{r7, pc}
 8011c16:	bf00      	nop
 8011c18:	00301d00 	.word	0x00301d00
 8011c1c:	00301c00 	.word	0x00301c00

08011c20 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b084      	sub	sp, #16
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = 0;
 8011c28:	2300      	movs	r3, #0
 8011c2a:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYSR();
 8011c2c:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8011c30:	f7fe fa4e 	bl	80100d0 <WIZCHIP_READ>
 8011c34:	4603      	mov	r3, r0
 8011c36:	73fb      	strb	r3, [r7, #15]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
 8011c38:	4818      	ldr	r0, [pc, #96]	; (8011c9c <wizphy_getphyconf+0x7c>)
 8011c3a:	f7fe fa49 	bl	80100d0 <WIZCHIP_READ>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	f003 0308 	and.w	r3, r3, #8
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d003      	beq.n	8011c50 <wizphy_getphyconf+0x30>
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	2202      	movs	r2, #2
 8011c4c:	701a      	strb	r2, [r3, #0]
 8011c4e:	e00a      	b.n	8011c66 <wizphy_getphyconf+0x46>
   else                        phyconf->mode = (tmp & (1<<5)) ? PHY_MODE_MANUAL : PHY_MODE_AUTONEGO ;
 8011c50:	7bfb      	ldrb	r3, [r7, #15]
 8011c52:	f003 0320 	and.w	r3, r3, #32
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	bf0c      	ite	eq
 8011c5a:	2301      	moveq	r3, #1
 8011c5c:	2300      	movne	r3, #0
 8011c5e:	b2db      	uxtb	r3, r3
 8011c60:	461a      	mov	r2, r3
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	701a      	strb	r2, [r3, #0]
   phyconf->speed  = (tmp & (1<<4)) ? PHY_SPEED_10    : PHY_SPEED_100;
 8011c66:	7bfb      	ldrb	r3, [r7, #15]
 8011c68:	f003 0310 	and.w	r3, r3, #16
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	bf0c      	ite	eq
 8011c70:	2301      	moveq	r3, #1
 8011c72:	2300      	movne	r3, #0
 8011c74:	b2db      	uxtb	r3, r3
 8011c76:	461a      	mov	r2, r3
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	705a      	strb	r2, [r3, #1]
   phyconf->duplex = (tmp & (1<<3)) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
 8011c7c:	7bfb      	ldrb	r3, [r7, #15]
 8011c7e:	f003 0308 	and.w	r3, r3, #8
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	bf0c      	ite	eq
 8011c86:	2301      	moveq	r3, #1
 8011c88:	2300      	movne	r3, #0
 8011c8a:	b2db      	uxtb	r3, r3
 8011c8c:	461a      	mov	r2, r3
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	709a      	strb	r2, [r3, #2]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
   else phyconf->mode   = (tmp & BMCR_ANE) ? PHY_MODE_AUTONEGO : PHY_MODE_MANUAL;
   phyconf->duplex = (tmp & BMCR_DPX) ? PHY_DUPLEX_FULL   : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & BMCR_SPD) ? PHY_SPEED_100     : PHY_SPEED_10;
#endif
}
 8011c92:	bf00      	nop
 8011c94:	3710      	adds	r7, #16
 8011c96:	46bd      	mov	sp, r7
 8011c98:	bd80      	pop	{r7, pc}
 8011c9a:	bf00      	nop
 8011c9c:	00301d00 	.word	0x00301d00

08011ca0 <wizphy_getphystatus>:

void wizphy_getphystatus(wiz_PhyConf* phyconf)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b084      	sub	sp, #16
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8011ca8:	2300      	movs	r3, #0
 8011caa:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYSR();
 8011cac:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8011cb0:	f7fe fa0e 	bl	80100d0 <WIZCHIP_READ>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	73fb      	strb	r3, [r7, #15]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
 8011cb8:	4818      	ldr	r0, [pc, #96]	; (8011d1c <wizphy_getphystatus+0x7c>)
 8011cba:	f7fe fa09 	bl	80100d0 <WIZCHIP_READ>
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	f003 0308 	and.w	r3, r3, #8
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d003      	beq.n	8011cd0 <wizphy_getphystatus+0x30>
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	2202      	movs	r2, #2
 8011ccc:	701a      	strb	r2, [r3, #0]
 8011cce:	e00a      	b.n	8011ce6 <wizphy_getphystatus+0x46>
   else phyconf->mode   = (tmp & (1<<5))    ? PHY_MODE_MANUAL : PHY_MODE_AUTONEGO ;
 8011cd0:	7bfb      	ldrb	r3, [r7, #15]
 8011cd2:	f003 0320 	and.w	r3, r3, #32
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	bf0c      	ite	eq
 8011cda:	2301      	moveq	r3, #1
 8011cdc:	2300      	movne	r3, #0
 8011cde:	b2db      	uxtb	r3, r3
 8011ce0:	461a      	mov	r2, r3
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	701a      	strb	r2, [r3, #0]
   phyconf->speed  = (tmp & PHYSR_SPD) ? PHY_SPEED_10    : PHY_SPEED_100;
 8011ce6:	7bfb      	ldrb	r3, [r7, #15]
 8011ce8:	f003 0302 	and.w	r3, r3, #2
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	bf0c      	ite	eq
 8011cf0:	2301      	moveq	r3, #1
 8011cf2:	2300      	movne	r3, #0
 8011cf4:	b2db      	uxtb	r3, r3
 8011cf6:	461a      	mov	r2, r3
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	705a      	strb	r2, [r3, #1]
   phyconf->duplex = (tmp & PHYSR_DPX) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
 8011cfc:	7bfb      	ldrb	r3, [r7, #15]
 8011cfe:	f003 0304 	and.w	r3, r3, #4
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	bf0c      	ite	eq
 8011d06:	2301      	moveq	r3, #1
 8011d08:	2300      	movne	r3, #0
 8011d0a:	b2db      	uxtb	r3, r3
 8011d0c:	461a      	mov	r2, r3
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	709a      	strb	r2, [r3, #2]
}
 8011d12:	bf00      	nop
 8011d14:	3710      	adds	r7, #16
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}
 8011d1a:	bf00      	nop
 8011d1c:	00301d00 	.word	0x00301d00

08011d20 <wizphy_setphypmode>:

void wizphy_setphypmode(uint8_t pmode)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b084      	sub	sp, #16
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	4603      	mov	r3, r0
 8011d28:	71fb      	strb	r3, [r7, #7]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = getPHYCR1();
 8011d2a:	480d      	ldr	r0, [pc, #52]	; (8011d60 <wizphy_setphypmode+0x40>)
 8011d2c:	f7fe f9d0 	bl	80100d0 <WIZCHIP_READ>
 8011d30:	4603      	mov	r3, r0
 8011d32:	73fb      	strb	r3, [r7, #15]
   if (pmode == PHY_POWER_DOWN)    tmp |= PHYCR1_PWDN;
 8011d34:	79fb      	ldrb	r3, [r7, #7]
 8011d36:	2b01      	cmp	r3, #1
 8011d38:	d104      	bne.n	8011d44 <wizphy_setphypmode+0x24>
 8011d3a:	7bfb      	ldrb	r3, [r7, #15]
 8011d3c:	f043 0320 	orr.w	r3, r3, #32
 8011d40:	73fb      	strb	r3, [r7, #15]
 8011d42:	e003      	b.n	8011d4c <wizphy_setphypmode+0x2c>
   else                            tmp &= ~PHYCR1_PWDN;
 8011d44:	7bfb      	ldrb	r3, [r7, #15]
 8011d46:	f023 0320 	bic.w	r3, r3, #32
 8011d4a:	73fb      	strb	r3, [r7, #15]
   setPHYCR1(tmp);
 8011d4c:	7bfb      	ldrb	r3, [r7, #15]
 8011d4e:	4619      	mov	r1, r3
 8011d50:	4803      	ldr	r0, [pc, #12]	; (8011d60 <wizphy_setphypmode+0x40>)
 8011d52:	f7fe f9ad 	bl	80100b0 <WIZCHIP_WRITE>
   tmp = wiz_mdio_read(PHYRAR_BMCR);
   if (pmode == PHY_POWER_DOWN)    tmp |= BMCR_PWDN;
   else                            tmp &= ~BMCR_PWDN;
   wiz_mdio_write(PHYRAR_BMCR, tmp);
#endif   
}
 8011d56:	bf00      	nop
 8011d58:	3710      	adds	r7, #16
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd80      	pop	{r7, pc}
 8011d5e:	bf00      	nop
 8011d60:	00301d00 	.word	0x00301d00

08011d64 <wizphy_getphypmode>:

int8_t wizphy_getphypmode(void)
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   if (getPHYCR1() & PHYCR1_PWDN)              return PHY_POWER_DOWN;
 8011d68:	4806      	ldr	r0, [pc, #24]	; (8011d84 <wizphy_getphypmode+0x20>)
 8011d6a:	f7fe f9b1 	bl	80100d0 <WIZCHIP_READ>
 8011d6e:	4603      	mov	r3, r0
 8011d70:	f003 0320 	and.w	r3, r3, #32
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d001      	beq.n	8011d7c <wizphy_getphypmode+0x18>
 8011d78:	2301      	movs	r3, #1
 8011d7a:	e000      	b.n	8011d7e <wizphy_getphypmode+0x1a>
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
   if (wiz_mdio_read(PHYRAR_BMCR) & BMCR_PWDN) return PHY_POWER_DOWN;
#endif   
   return PHY_POWER_NORM;
 8011d7c:	2300      	movs	r3, #0
}
 8011d7e:	4618      	mov	r0, r3
 8011d80:	bd80      	pop	{r7, pc}
 8011d82:	bf00      	nop
 8011d84:	00301d00 	.word	0x00301d00

08011d88 <wizchip_setnetinfo>:

void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b084      	sub	sp, #16
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
   uint8_t i=0;
 8011d90:	2300      	movs	r3, #0
 8011d92:	73fb      	strb	r3, [r7, #15]
   setSHAR(pnetinfo->mac);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2206      	movs	r2, #6
 8011d98:	4619      	mov	r1, r3
 8011d9a:	482f      	ldr	r0, [pc, #188]	; (8011e58 <wizchip_setnetinfo+0xd0>)
 8011d9c:	f7fe f9a8 	bl	80100f0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	330e      	adds	r3, #14
 8011da4:	2204      	movs	r2, #4
 8011da6:	4619      	mov	r1, r3
 8011da8:	482c      	ldr	r0, [pc, #176]	; (8011e5c <wizchip_setnetinfo+0xd4>)
 8011daa:	f7fe f9a1 	bl	80100f0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	330a      	adds	r3, #10
 8011db2:	2204      	movs	r2, #4
 8011db4:	4619      	mov	r1, r3
 8011db6:	482a      	ldr	r0, [pc, #168]	; (8011e60 <wizchip_setnetinfo+0xd8>)
 8011db8:	f7fe f99a 	bl	80100f0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);   
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	3306      	adds	r3, #6
 8011dc0:	2204      	movs	r2, #4
 8011dc2:	4619      	mov	r1, r3
 8011dc4:	4827      	ldr	r0, [pc, #156]	; (8011e64 <wizchip_setnetinfo+0xdc>)
 8011dc6:	f7fe f993 	bl	80100f0 <WIZCHIP_WRITE_BUF>
   setGA6R(pnetinfo->gw6);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	3342      	adds	r3, #66	; 0x42
 8011dce:	2210      	movs	r2, #16
 8011dd0:	4619      	mov	r1, r3
 8011dd2:	4825      	ldr	r0, [pc, #148]	; (8011e68 <wizchip_setnetinfo+0xe0>)
 8011dd4:	f7fe f98c 	bl	80100f0 <WIZCHIP_WRITE_BUF>
   setSUB6R(pnetinfo->sn6);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	3332      	adds	r3, #50	; 0x32
 8011ddc:	2210      	movs	r2, #16
 8011dde:	4619      	mov	r1, r3
 8011de0:	4822      	ldr	r0, [pc, #136]	; (8011e6c <wizchip_setnetinfo+0xe4>)
 8011de2:	f7fe f985 	bl	80100f0 <WIZCHIP_WRITE_BUF>
   setLLAR(pnetinfo->lla);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	3312      	adds	r3, #18
 8011dea:	2210      	movs	r2, #16
 8011dec:	4619      	mov	r1, r3
 8011dee:	4820      	ldr	r0, [pc, #128]	; (8011e70 <wizchip_setnetinfo+0xe8>)
 8011df0:	f7fe f97e 	bl	80100f0 <WIZCHIP_WRITE_BUF>
   setGUAR(pnetinfo->gua);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	3322      	adds	r3, #34	; 0x22
 8011df8:	2210      	movs	r2, #16
 8011dfa:	4619      	mov	r1, r3
 8011dfc:	481d      	ldr	r0, [pc, #116]	; (8011e74 <wizchip_setnetinfo+0xec>)
 8011dfe:	f7fe f977 	bl	80100f0 <WIZCHIP_WRITE_BUF>

   for(i=0; i<4; i++)  _DNS_[i]  = pnetinfo->dns[i];
 8011e02:	2300      	movs	r3, #0
 8011e04:	73fb      	strb	r3, [r7, #15]
 8011e06:	e00a      	b.n	8011e1e <wizchip_setnetinfo+0x96>
 8011e08:	7bfa      	ldrb	r2, [r7, #15]
 8011e0a:	7bfb      	ldrb	r3, [r7, #15]
 8011e0c:	6879      	ldr	r1, [r7, #4]
 8011e0e:	440a      	add	r2, r1
 8011e10:	f892 1052 	ldrb.w	r1, [r2, #82]	; 0x52
 8011e14:	4a18      	ldr	r2, [pc, #96]	; (8011e78 <wizchip_setnetinfo+0xf0>)
 8011e16:	54d1      	strb	r1, [r2, r3]
 8011e18:	7bfb      	ldrb	r3, [r7, #15]
 8011e1a:	3301      	adds	r3, #1
 8011e1c:	73fb      	strb	r3, [r7, #15]
 8011e1e:	7bfb      	ldrb	r3, [r7, #15]
 8011e20:	2b03      	cmp	r3, #3
 8011e22:	d9f1      	bls.n	8011e08 <wizchip_setnetinfo+0x80>
   for(i=0; i<16; i++) _DNS6_[i] = pnetinfo->dns6[i];
 8011e24:	2300      	movs	r3, #0
 8011e26:	73fb      	strb	r3, [r7, #15]
 8011e28:	e00a      	b.n	8011e40 <wizchip_setnetinfo+0xb8>
 8011e2a:	7bfa      	ldrb	r2, [r7, #15]
 8011e2c:	7bfb      	ldrb	r3, [r7, #15]
 8011e2e:	6879      	ldr	r1, [r7, #4]
 8011e30:	440a      	add	r2, r1
 8011e32:	f892 1056 	ldrb.w	r1, [r2, #86]	; 0x56
 8011e36:	4a11      	ldr	r2, [pc, #68]	; (8011e7c <wizchip_setnetinfo+0xf4>)
 8011e38:	54d1      	strb	r1, [r2, r3]
 8011e3a:	7bfb      	ldrb	r3, [r7, #15]
 8011e3c:	3301      	adds	r3, #1
 8011e3e:	73fb      	strb	r3, [r7, #15]
 8011e40:	7bfb      	ldrb	r3, [r7, #15]
 8011e42:	2b0f      	cmp	r3, #15
 8011e44:	d9f1      	bls.n	8011e2a <wizchip_setnetinfo+0xa2>

   _IPMODE_   = pnetinfo->ipmode;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 8011e4c:	4b0c      	ldr	r3, [pc, #48]	; (8011e80 <wizchip_setnetinfo+0xf8>)
 8011e4e:	701a      	strb	r2, [r3, #0]
}
 8011e50:	bf00      	nop
 8011e52:	3710      	adds	r7, #16
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}
 8011e58:	00412000 	.word	0x00412000
 8011e5c:	00413000 	.word	0x00413000
 8011e60:	00413400 	.word	0x00413400
 8011e64:	00413800 	.word	0x00413800
 8011e68:	00417000 	.word	0x00417000
 8011e6c:	00416000 	.word	0x00416000
 8011e70:	00414000 	.word	0x00414000
 8011e74:	00415000 	.word	0x00415000
 8011e78:	2400d264 	.word	0x2400d264
 8011e7c:	2400d268 	.word	0x2400d268
 8011e80:	2400d278 	.word	0x2400d278

08011e84 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b084      	sub	sp, #16
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
   uint8_t i = 0;
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	73fb      	strb	r3, [r7, #15]
   getSHAR(pnetinfo->mac);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2206      	movs	r2, #6
 8011e94:	4619      	mov	r1, r3
 8011e96:	4830      	ldr	r0, [pc, #192]	; (8011f58 <wizchip_getnetinfo+0xd4>)
 8011e98:	f7fe f93b 	bl	8010112 <WIZCHIP_READ_BUF>

   getGAR(pnetinfo->gw);
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	330e      	adds	r3, #14
 8011ea0:	2204      	movs	r2, #4
 8011ea2:	4619      	mov	r1, r3
 8011ea4:	482d      	ldr	r0, [pc, #180]	; (8011f5c <wizchip_getnetinfo+0xd8>)
 8011ea6:	f7fe f934 	bl	8010112 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	330a      	adds	r3, #10
 8011eae:	2204      	movs	r2, #4
 8011eb0:	4619      	mov	r1, r3
 8011eb2:	482b      	ldr	r0, [pc, #172]	; (8011f60 <wizchip_getnetinfo+0xdc>)
 8011eb4:	f7fe f92d 	bl	8010112 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	3306      	adds	r3, #6
 8011ebc:	2204      	movs	r2, #4
 8011ebe:	4619      	mov	r1, r3
 8011ec0:	4828      	ldr	r0, [pc, #160]	; (8011f64 <wizchip_getnetinfo+0xe0>)
 8011ec2:	f7fe f926 	bl	8010112 <WIZCHIP_READ_BUF>
   
   getGA6R(pnetinfo->gw6);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	3342      	adds	r3, #66	; 0x42
 8011eca:	2210      	movs	r2, #16
 8011ecc:	4619      	mov	r1, r3
 8011ece:	4826      	ldr	r0, [pc, #152]	; (8011f68 <wizchip_getnetinfo+0xe4>)
 8011ed0:	f7fe f91f 	bl	8010112 <WIZCHIP_READ_BUF>
   getSUB6R(pnetinfo->sn6);
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	3332      	adds	r3, #50	; 0x32
 8011ed8:	2210      	movs	r2, #16
 8011eda:	4619      	mov	r1, r3
 8011edc:	4823      	ldr	r0, [pc, #140]	; (8011f6c <wizchip_getnetinfo+0xe8>)
 8011ede:	f7fe f918 	bl	8010112 <WIZCHIP_READ_BUF>
   getLLAR(pnetinfo->lla);
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	3312      	adds	r3, #18
 8011ee6:	2210      	movs	r2, #16
 8011ee8:	4619      	mov	r1, r3
 8011eea:	4821      	ldr	r0, [pc, #132]	; (8011f70 <wizchip_getnetinfo+0xec>)
 8011eec:	f7fe f911 	bl	8010112 <WIZCHIP_READ_BUF>
   getGUAR(pnetinfo->gua);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	3322      	adds	r3, #34	; 0x22
 8011ef4:	2210      	movs	r2, #16
 8011ef6:	4619      	mov	r1, r3
 8011ef8:	481e      	ldr	r0, [pc, #120]	; (8011f74 <wizchip_getnetinfo+0xf0>)
 8011efa:	f7fe f90a 	bl	8010112 <WIZCHIP_READ_BUF>
   for(i=0; i<4; i++)  pnetinfo->dns[i] = _DNS_[i];
 8011efe:	2300      	movs	r3, #0
 8011f00:	73fb      	strb	r3, [r7, #15]
 8011f02:	e00b      	b.n	8011f1c <wizchip_getnetinfo+0x98>
 8011f04:	7bfa      	ldrb	r2, [r7, #15]
 8011f06:	7bfb      	ldrb	r3, [r7, #15]
 8011f08:	491b      	ldr	r1, [pc, #108]	; (8011f78 <wizchip_getnetinfo+0xf4>)
 8011f0a:	5c89      	ldrb	r1, [r1, r2]
 8011f0c:	687a      	ldr	r2, [r7, #4]
 8011f0e:	4413      	add	r3, r2
 8011f10:	460a      	mov	r2, r1
 8011f12:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8011f16:	7bfb      	ldrb	r3, [r7, #15]
 8011f18:	3301      	adds	r3, #1
 8011f1a:	73fb      	strb	r3, [r7, #15]
 8011f1c:	7bfb      	ldrb	r3, [r7, #15]
 8011f1e:	2b03      	cmp	r3, #3
 8011f20:	d9f0      	bls.n	8011f04 <wizchip_getnetinfo+0x80>
   for(i=0; i<16; i++) pnetinfo->dns6[i]  = _DNS6_[i];
 8011f22:	2300      	movs	r3, #0
 8011f24:	73fb      	strb	r3, [r7, #15]
 8011f26:	e00b      	b.n	8011f40 <wizchip_getnetinfo+0xbc>
 8011f28:	7bfa      	ldrb	r2, [r7, #15]
 8011f2a:	7bfb      	ldrb	r3, [r7, #15]
 8011f2c:	4913      	ldr	r1, [pc, #76]	; (8011f7c <wizchip_getnetinfo+0xf8>)
 8011f2e:	5c89      	ldrb	r1, [r1, r2]
 8011f30:	687a      	ldr	r2, [r7, #4]
 8011f32:	4413      	add	r3, r2
 8011f34:	460a      	mov	r2, r1
 8011f36:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8011f3a:	7bfb      	ldrb	r3, [r7, #15]
 8011f3c:	3301      	adds	r3, #1
 8011f3e:	73fb      	strb	r3, [r7, #15]
 8011f40:	7bfb      	ldrb	r3, [r7, #15]
 8011f42:	2b0f      	cmp	r3, #15
 8011f44:	d9f0      	bls.n	8011f28 <wizchip_getnetinfo+0xa4>

   pnetinfo->ipmode = _IPMODE_;
 8011f46:	4b0e      	ldr	r3, [pc, #56]	; (8011f80 <wizchip_getnetinfo+0xfc>)
 8011f48:	781a      	ldrb	r2, [r3, #0]
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
 8011f50:	bf00      	nop
 8011f52:	3710      	adds	r7, #16
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}
 8011f58:	00412000 	.word	0x00412000
 8011f5c:	00413000 	.word	0x00413000
 8011f60:	00413400 	.word	0x00413400
 8011f64:	00413800 	.word	0x00413800
 8011f68:	00417000 	.word	0x00417000
 8011f6c:	00416000 	.word	0x00416000
 8011f70:	00414000 	.word	0x00414000
 8011f74:	00415000 	.word	0x00415000
 8011f78:	2400d264 	.word	0x2400d264
 8011f7c:	2400d268 	.word	0x2400d268
 8011f80:	2400d278 	.word	0x2400d278

08011f84 <wizchip_setnetmode>:

void wizchip_setnetmode(netmode_type netmode)
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b084      	sub	sp, #16
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
   uint32_t tmp = (uint32_t) netmode;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	60fb      	str	r3, [r7, #12]
   setNETMR ((uint8_t)tmp);
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	b2db      	uxtb	r3, r3
 8011f94:	4619      	mov	r1, r3
 8011f96:	480e      	ldr	r0, [pc, #56]	; (8011fd0 <wizchip_setnetmode+0x4c>)
 8011f98:	f7fe f88a 	bl	80100b0 <WIZCHIP_WRITE>
   setNETMR2((uint8_t)(tmp>>8));
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	0a1b      	lsrs	r3, r3, #8
 8011fa0:	b2db      	uxtb	r3, r3
 8011fa2:	4619      	mov	r1, r3
 8011fa4:	480b      	ldr	r0, [pc, #44]	; (8011fd4 <wizchip_setnetmode+0x50>)
 8011fa6:	f7fe f883 	bl	80100b0 <WIZCHIP_WRITE>
   setNET4MR((uint8_t)(tmp>>16));
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	0c1b      	lsrs	r3, r3, #16
 8011fae:	b2db      	uxtb	r3, r3
 8011fb0:	4619      	mov	r1, r3
 8011fb2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8011fb6:	f7fe f87b 	bl	80100b0 <WIZCHIP_WRITE>
   setNET6MR((uint8_t)(tmp>>24));
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	0e1b      	lsrs	r3, r3, #24
 8011fbe:	b2db      	uxtb	r3, r3
 8011fc0:	4619      	mov	r1, r3
 8011fc2:	4805      	ldr	r0, [pc, #20]	; (8011fd8 <wizchip_setnetmode+0x54>)
 8011fc4:	f7fe f874 	bl	80100b0 <WIZCHIP_WRITE>
}
 8011fc8:	bf00      	nop
 8011fca:	3710      	adds	r7, #16
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	bd80      	pop	{r7, pc}
 8011fd0:	00400800 	.word	0x00400800
 8011fd4:	00400900 	.word	0x00400900
 8011fd8:	00400400 	.word	0x00400400

08011fdc <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8011fdc:	b590      	push	{r4, r7, lr}
 8011fde:	b083      	sub	sp, #12
 8011fe0:	af00      	add	r7, sp, #0
   uint32_t ret = 0;
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	607b      	str	r3, [r7, #4]
   ret = getNETMR();
 8011fe6:	4811      	ldr	r0, [pc, #68]	; (801202c <wizchip_getnetmode+0x50>)
 8011fe8:	f7fe f872 	bl	80100d0 <WIZCHIP_READ>
 8011fec:	4603      	mov	r3, r0
 8011fee:	607b      	str	r3, [r7, #4]
   ret = (ret << 8)  + getNETMR2();
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	021c      	lsls	r4, r3, #8
 8011ff4:	480e      	ldr	r0, [pc, #56]	; (8012030 <wizchip_getnetmode+0x54>)
 8011ff6:	f7fe f86b 	bl	80100d0 <WIZCHIP_READ>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	4423      	add	r3, r4
 8011ffe:	607b      	str	r3, [r7, #4]
   ret = (ret << 16) + getNET4MR();
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	041c      	lsls	r4, r3, #16
 8012004:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8012008:	f7fe f862 	bl	80100d0 <WIZCHIP_READ>
 801200c:	4603      	mov	r3, r0
 801200e:	4423      	add	r3, r4
 8012010:	607b      	str	r3, [r7, #4]
   ret = (ret << 24) + getNET6MR();
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	061c      	lsls	r4, r3, #24
 8012016:	4807      	ldr	r0, [pc, #28]	; (8012034 <wizchip_getnetmode+0x58>)
 8012018:	f7fe f85a 	bl	80100d0 <WIZCHIP_READ>
 801201c:	4603      	mov	r3, r0
 801201e:	4423      	add	r3, r4
 8012020:	607b      	str	r3, [r7, #4]
   return (netmode_type)ret;
 8012022:	687b      	ldr	r3, [r7, #4]
}
 8012024:	4618      	mov	r0, r3
 8012026:	370c      	adds	r7, #12
 8012028:	46bd      	mov	sp, r7
 801202a:	bd90      	pop	{r4, r7, pc}
 801202c:	00400800 	.word	0x00400800
 8012030:	00400900 	.word	0x00400900
 8012034:	00400400 	.word	0x00400400

08012038 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8012038:	b580      	push	{r7, lr}
 801203a:	b082      	sub	sp, #8
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
   setRCR(nettime->s_retry_cnt);
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	781b      	ldrb	r3, [r3, #0]
 8012044:	4619      	mov	r1, r3
 8012046:	4817      	ldr	r0, [pc, #92]	; (80120a4 <wizchip_settimeout+0x6c>)
 8012048:	f7fe f832 	bl	80100b0 <WIZCHIP_WRITE>
   setRTR(nettime->s_time_100us);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	885b      	ldrh	r3, [r3, #2]
 8012050:	0a1b      	lsrs	r3, r3, #8
 8012052:	b29b      	uxth	r3, r3
 8012054:	b2db      	uxtb	r3, r3
 8012056:	4619      	mov	r1, r3
 8012058:	f44f 0084 	mov.w	r0, #4325376	; 0x420000
 801205c:	f7fe f828 	bl	80100b0 <WIZCHIP_WRITE>
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	885b      	ldrh	r3, [r3, #2]
 8012064:	b2db      	uxtb	r3, r3
 8012066:	4619      	mov	r1, r3
 8012068:	480f      	ldr	r0, [pc, #60]	; (80120a8 <wizchip_settimeout+0x70>)
 801206a:	f7fe f821 	bl	80100b0 <WIZCHIP_WRITE>
   setSLRCR(nettime->sl_retry_cnt);
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	791b      	ldrb	r3, [r3, #4]
 8012072:	4619      	mov	r1, r3
 8012074:	480d      	ldr	r0, [pc, #52]	; (80120ac <wizchip_settimeout+0x74>)
 8012076:	f7fe f81b 	bl	80100b0 <WIZCHIP_WRITE>
   setSLRTR(nettime->sl_time_100us);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	88db      	ldrh	r3, [r3, #6]
 801207e:	0a1b      	lsrs	r3, r3, #8
 8012080:	b29b      	uxth	r3, r3
 8012082:	b2db      	uxtb	r3, r3
 8012084:	4619      	mov	r1, r3
 8012086:	480a      	ldr	r0, [pc, #40]	; (80120b0 <wizchip_settimeout+0x78>)
 8012088:	f7fe f812 	bl	80100b0 <WIZCHIP_WRITE>
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	88db      	ldrh	r3, [r3, #6]
 8012090:	b2db      	uxtb	r3, r3
 8012092:	4619      	mov	r1, r3
 8012094:	4807      	ldr	r0, [pc, #28]	; (80120b4 <wizchip_settimeout+0x7c>)
 8012096:	f7fe f80b 	bl	80100b0 <WIZCHIP_WRITE>
}
 801209a:	bf00      	nop
 801209c:	3708      	adds	r7, #8
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}
 80120a2:	bf00      	nop
 80120a4:	00420400 	.word	0x00420400
 80120a8:	00420100 	.word	0x00420100
 80120ac:	00420c00 	.word	0x00420c00
 80120b0:	00420800 	.word	0x00420800
 80120b4:	00420900 	.word	0x00420900

080120b8 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80120b8:	b590      	push	{r4, r7, lr}
 80120ba:	b083      	sub	sp, #12
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
   nettime->s_retry_cnt   = getRCR();
 80120c0:	4819      	ldr	r0, [pc, #100]	; (8012128 <wizchip_gettimeout+0x70>)
 80120c2:	f7fe f805 	bl	80100d0 <WIZCHIP_READ>
 80120c6:	4603      	mov	r3, r0
 80120c8:	461a      	mov	r2, r3
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	701a      	strb	r2, [r3, #0]
   nettime->s_time_100us  = getRTR();
 80120ce:	f44f 0084 	mov.w	r0, #4325376	; 0x420000
 80120d2:	f7fd fffd 	bl	80100d0 <WIZCHIP_READ>
 80120d6:	4603      	mov	r3, r0
 80120d8:	b29b      	uxth	r3, r3
 80120da:	021b      	lsls	r3, r3, #8
 80120dc:	b29c      	uxth	r4, r3
 80120de:	4813      	ldr	r0, [pc, #76]	; (801212c <wizchip_gettimeout+0x74>)
 80120e0:	f7fd fff6 	bl	80100d0 <WIZCHIP_READ>
 80120e4:	4603      	mov	r3, r0
 80120e6:	b29b      	uxth	r3, r3
 80120e8:	4423      	add	r3, r4
 80120ea:	b29a      	uxth	r2, r3
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	805a      	strh	r2, [r3, #2]
   nettime->sl_retry_cnt  = getSLRCR();
 80120f0:	480f      	ldr	r0, [pc, #60]	; (8012130 <wizchip_gettimeout+0x78>)
 80120f2:	f7fd ffed 	bl	80100d0 <WIZCHIP_READ>
 80120f6:	4603      	mov	r3, r0
 80120f8:	461a      	mov	r2, r3
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	711a      	strb	r2, [r3, #4]
   nettime->sl_time_100us = getSLRTR();
 80120fe:	480d      	ldr	r0, [pc, #52]	; (8012134 <wizchip_gettimeout+0x7c>)
 8012100:	f7fd ffe6 	bl	80100d0 <WIZCHIP_READ>
 8012104:	4603      	mov	r3, r0
 8012106:	b29b      	uxth	r3, r3
 8012108:	021b      	lsls	r3, r3, #8
 801210a:	b29c      	uxth	r4, r3
 801210c:	480a      	ldr	r0, [pc, #40]	; (8012138 <wizchip_gettimeout+0x80>)
 801210e:	f7fd ffdf 	bl	80100d0 <WIZCHIP_READ>
 8012112:	4603      	mov	r3, r0
 8012114:	b29b      	uxth	r3, r3
 8012116:	4423      	add	r3, r4
 8012118:	b29a      	uxth	r2, r3
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	80da      	strh	r2, [r3, #6]
}
 801211e:	bf00      	nop
 8012120:	370c      	adds	r7, #12
 8012122:	46bd      	mov	sp, r7
 8012124:	bd90      	pop	{r4, r7, pc}
 8012126:	bf00      	nop
 8012128:	00420400 	.word	0x00420400
 801212c:	00420100 	.word	0x00420100
 8012130:	00420c00 	.word	0x00420c00
 8012134:	00420800 	.word	0x00420800
 8012138:	00420900 	.word	0x00420900

0801213c <__errno>:
 801213c:	4b01      	ldr	r3, [pc, #4]	; (8012144 <__errno+0x8>)
 801213e:	6818      	ldr	r0, [r3, #0]
 8012140:	4770      	bx	lr
 8012142:	bf00      	nop
 8012144:	24000118 	.word	0x24000118

08012148 <std>:
 8012148:	2300      	movs	r3, #0
 801214a:	b510      	push	{r4, lr}
 801214c:	4604      	mov	r4, r0
 801214e:	e9c0 3300 	strd	r3, r3, [r0]
 8012152:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012156:	6083      	str	r3, [r0, #8]
 8012158:	8181      	strh	r1, [r0, #12]
 801215a:	6643      	str	r3, [r0, #100]	; 0x64
 801215c:	81c2      	strh	r2, [r0, #14]
 801215e:	6183      	str	r3, [r0, #24]
 8012160:	4619      	mov	r1, r3
 8012162:	2208      	movs	r2, #8
 8012164:	305c      	adds	r0, #92	; 0x5c
 8012166:	f000 f91a 	bl	801239e <memset>
 801216a:	4b05      	ldr	r3, [pc, #20]	; (8012180 <std+0x38>)
 801216c:	6263      	str	r3, [r4, #36]	; 0x24
 801216e:	4b05      	ldr	r3, [pc, #20]	; (8012184 <std+0x3c>)
 8012170:	62a3      	str	r3, [r4, #40]	; 0x28
 8012172:	4b05      	ldr	r3, [pc, #20]	; (8012188 <std+0x40>)
 8012174:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012176:	4b05      	ldr	r3, [pc, #20]	; (801218c <std+0x44>)
 8012178:	6224      	str	r4, [r4, #32]
 801217a:	6323      	str	r3, [r4, #48]	; 0x30
 801217c:	bd10      	pop	{r4, pc}
 801217e:	bf00      	nop
 8012180:	08012f99 	.word	0x08012f99
 8012184:	08012fbb 	.word	0x08012fbb
 8012188:	08012ff3 	.word	0x08012ff3
 801218c:	08013017 	.word	0x08013017

08012190 <_cleanup_r>:
 8012190:	4901      	ldr	r1, [pc, #4]	; (8012198 <_cleanup_r+0x8>)
 8012192:	f000 b8af 	b.w	80122f4 <_fwalk_reent>
 8012196:	bf00      	nop
 8012198:	08013ee9 	.word	0x08013ee9

0801219c <__sfmoreglue>:
 801219c:	b570      	push	{r4, r5, r6, lr}
 801219e:	2268      	movs	r2, #104	; 0x68
 80121a0:	1e4d      	subs	r5, r1, #1
 80121a2:	4355      	muls	r5, r2
 80121a4:	460e      	mov	r6, r1
 80121a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80121aa:	f000 f921 	bl	80123f0 <_malloc_r>
 80121ae:	4604      	mov	r4, r0
 80121b0:	b140      	cbz	r0, 80121c4 <__sfmoreglue+0x28>
 80121b2:	2100      	movs	r1, #0
 80121b4:	e9c0 1600 	strd	r1, r6, [r0]
 80121b8:	300c      	adds	r0, #12
 80121ba:	60a0      	str	r0, [r4, #8]
 80121bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80121c0:	f000 f8ed 	bl	801239e <memset>
 80121c4:	4620      	mov	r0, r4
 80121c6:	bd70      	pop	{r4, r5, r6, pc}

080121c8 <__sfp_lock_acquire>:
 80121c8:	4801      	ldr	r0, [pc, #4]	; (80121d0 <__sfp_lock_acquire+0x8>)
 80121ca:	f000 b8d8 	b.w	801237e <__retarget_lock_acquire_recursive>
 80121ce:	bf00      	nop
 80121d0:	2400d27a 	.word	0x2400d27a

080121d4 <__sfp_lock_release>:
 80121d4:	4801      	ldr	r0, [pc, #4]	; (80121dc <__sfp_lock_release+0x8>)
 80121d6:	f000 b8d3 	b.w	8012380 <__retarget_lock_release_recursive>
 80121da:	bf00      	nop
 80121dc:	2400d27a 	.word	0x2400d27a

080121e0 <__sinit_lock_acquire>:
 80121e0:	4801      	ldr	r0, [pc, #4]	; (80121e8 <__sinit_lock_acquire+0x8>)
 80121e2:	f000 b8cc 	b.w	801237e <__retarget_lock_acquire_recursive>
 80121e6:	bf00      	nop
 80121e8:	2400d27b 	.word	0x2400d27b

080121ec <__sinit_lock_release>:
 80121ec:	4801      	ldr	r0, [pc, #4]	; (80121f4 <__sinit_lock_release+0x8>)
 80121ee:	f000 b8c7 	b.w	8012380 <__retarget_lock_release_recursive>
 80121f2:	bf00      	nop
 80121f4:	2400d27b 	.word	0x2400d27b

080121f8 <__sinit>:
 80121f8:	b510      	push	{r4, lr}
 80121fa:	4604      	mov	r4, r0
 80121fc:	f7ff fff0 	bl	80121e0 <__sinit_lock_acquire>
 8012200:	69a3      	ldr	r3, [r4, #24]
 8012202:	b11b      	cbz	r3, 801220c <__sinit+0x14>
 8012204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012208:	f7ff bff0 	b.w	80121ec <__sinit_lock_release>
 801220c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012210:	6523      	str	r3, [r4, #80]	; 0x50
 8012212:	4b13      	ldr	r3, [pc, #76]	; (8012260 <__sinit+0x68>)
 8012214:	4a13      	ldr	r2, [pc, #76]	; (8012264 <__sinit+0x6c>)
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	62a2      	str	r2, [r4, #40]	; 0x28
 801221a:	42a3      	cmp	r3, r4
 801221c:	bf04      	itt	eq
 801221e:	2301      	moveq	r3, #1
 8012220:	61a3      	streq	r3, [r4, #24]
 8012222:	4620      	mov	r0, r4
 8012224:	f000 f820 	bl	8012268 <__sfp>
 8012228:	6060      	str	r0, [r4, #4]
 801222a:	4620      	mov	r0, r4
 801222c:	f000 f81c 	bl	8012268 <__sfp>
 8012230:	60a0      	str	r0, [r4, #8]
 8012232:	4620      	mov	r0, r4
 8012234:	f000 f818 	bl	8012268 <__sfp>
 8012238:	2200      	movs	r2, #0
 801223a:	60e0      	str	r0, [r4, #12]
 801223c:	2104      	movs	r1, #4
 801223e:	6860      	ldr	r0, [r4, #4]
 8012240:	f7ff ff82 	bl	8012148 <std>
 8012244:	68a0      	ldr	r0, [r4, #8]
 8012246:	2201      	movs	r2, #1
 8012248:	2109      	movs	r1, #9
 801224a:	f7ff ff7d 	bl	8012148 <std>
 801224e:	68e0      	ldr	r0, [r4, #12]
 8012250:	2202      	movs	r2, #2
 8012252:	2112      	movs	r1, #18
 8012254:	f7ff ff78 	bl	8012148 <std>
 8012258:	2301      	movs	r3, #1
 801225a:	61a3      	str	r3, [r4, #24]
 801225c:	e7d2      	b.n	8012204 <__sinit+0xc>
 801225e:	bf00      	nop
 8012260:	080157a8 	.word	0x080157a8
 8012264:	08012191 	.word	0x08012191

08012268 <__sfp>:
 8012268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801226a:	4607      	mov	r7, r0
 801226c:	f7ff ffac 	bl	80121c8 <__sfp_lock_acquire>
 8012270:	4b1e      	ldr	r3, [pc, #120]	; (80122ec <__sfp+0x84>)
 8012272:	681e      	ldr	r6, [r3, #0]
 8012274:	69b3      	ldr	r3, [r6, #24]
 8012276:	b913      	cbnz	r3, 801227e <__sfp+0x16>
 8012278:	4630      	mov	r0, r6
 801227a:	f7ff ffbd 	bl	80121f8 <__sinit>
 801227e:	3648      	adds	r6, #72	; 0x48
 8012280:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012284:	3b01      	subs	r3, #1
 8012286:	d503      	bpl.n	8012290 <__sfp+0x28>
 8012288:	6833      	ldr	r3, [r6, #0]
 801228a:	b30b      	cbz	r3, 80122d0 <__sfp+0x68>
 801228c:	6836      	ldr	r6, [r6, #0]
 801228e:	e7f7      	b.n	8012280 <__sfp+0x18>
 8012290:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012294:	b9d5      	cbnz	r5, 80122cc <__sfp+0x64>
 8012296:	4b16      	ldr	r3, [pc, #88]	; (80122f0 <__sfp+0x88>)
 8012298:	60e3      	str	r3, [r4, #12]
 801229a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801229e:	6665      	str	r5, [r4, #100]	; 0x64
 80122a0:	f000 f86c 	bl	801237c <__retarget_lock_init_recursive>
 80122a4:	f7ff ff96 	bl	80121d4 <__sfp_lock_release>
 80122a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80122ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80122b0:	6025      	str	r5, [r4, #0]
 80122b2:	61a5      	str	r5, [r4, #24]
 80122b4:	2208      	movs	r2, #8
 80122b6:	4629      	mov	r1, r5
 80122b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80122bc:	f000 f86f 	bl	801239e <memset>
 80122c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80122c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80122c8:	4620      	mov	r0, r4
 80122ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122cc:	3468      	adds	r4, #104	; 0x68
 80122ce:	e7d9      	b.n	8012284 <__sfp+0x1c>
 80122d0:	2104      	movs	r1, #4
 80122d2:	4638      	mov	r0, r7
 80122d4:	f7ff ff62 	bl	801219c <__sfmoreglue>
 80122d8:	4604      	mov	r4, r0
 80122da:	6030      	str	r0, [r6, #0]
 80122dc:	2800      	cmp	r0, #0
 80122de:	d1d5      	bne.n	801228c <__sfp+0x24>
 80122e0:	f7ff ff78 	bl	80121d4 <__sfp_lock_release>
 80122e4:	230c      	movs	r3, #12
 80122e6:	603b      	str	r3, [r7, #0]
 80122e8:	e7ee      	b.n	80122c8 <__sfp+0x60>
 80122ea:	bf00      	nop
 80122ec:	080157a8 	.word	0x080157a8
 80122f0:	ffff0001 	.word	0xffff0001

080122f4 <_fwalk_reent>:
 80122f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122f8:	4606      	mov	r6, r0
 80122fa:	4688      	mov	r8, r1
 80122fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012300:	2700      	movs	r7, #0
 8012302:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012306:	f1b9 0901 	subs.w	r9, r9, #1
 801230a:	d505      	bpl.n	8012318 <_fwalk_reent+0x24>
 801230c:	6824      	ldr	r4, [r4, #0]
 801230e:	2c00      	cmp	r4, #0
 8012310:	d1f7      	bne.n	8012302 <_fwalk_reent+0xe>
 8012312:	4638      	mov	r0, r7
 8012314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012318:	89ab      	ldrh	r3, [r5, #12]
 801231a:	2b01      	cmp	r3, #1
 801231c:	d907      	bls.n	801232e <_fwalk_reent+0x3a>
 801231e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012322:	3301      	adds	r3, #1
 8012324:	d003      	beq.n	801232e <_fwalk_reent+0x3a>
 8012326:	4629      	mov	r1, r5
 8012328:	4630      	mov	r0, r6
 801232a:	47c0      	blx	r8
 801232c:	4307      	orrs	r7, r0
 801232e:	3568      	adds	r5, #104	; 0x68
 8012330:	e7e9      	b.n	8012306 <_fwalk_reent+0x12>
	...

08012334 <__libc_init_array>:
 8012334:	b570      	push	{r4, r5, r6, lr}
 8012336:	4d0d      	ldr	r5, [pc, #52]	; (801236c <__libc_init_array+0x38>)
 8012338:	4c0d      	ldr	r4, [pc, #52]	; (8012370 <__libc_init_array+0x3c>)
 801233a:	1b64      	subs	r4, r4, r5
 801233c:	10a4      	asrs	r4, r4, #2
 801233e:	2600      	movs	r6, #0
 8012340:	42a6      	cmp	r6, r4
 8012342:	d109      	bne.n	8012358 <__libc_init_array+0x24>
 8012344:	4d0b      	ldr	r5, [pc, #44]	; (8012374 <__libc_init_array+0x40>)
 8012346:	4c0c      	ldr	r4, [pc, #48]	; (8012378 <__libc_init_array+0x44>)
 8012348:	f002 fcf0 	bl	8014d2c <_init>
 801234c:	1b64      	subs	r4, r4, r5
 801234e:	10a4      	asrs	r4, r4, #2
 8012350:	2600      	movs	r6, #0
 8012352:	42a6      	cmp	r6, r4
 8012354:	d105      	bne.n	8012362 <__libc_init_array+0x2e>
 8012356:	bd70      	pop	{r4, r5, r6, pc}
 8012358:	f855 3b04 	ldr.w	r3, [r5], #4
 801235c:	4798      	blx	r3
 801235e:	3601      	adds	r6, #1
 8012360:	e7ee      	b.n	8012340 <__libc_init_array+0xc>
 8012362:	f855 3b04 	ldr.w	r3, [r5], #4
 8012366:	4798      	blx	r3
 8012368:	3601      	adds	r6, #1
 801236a:	e7f2      	b.n	8012352 <__libc_init_array+0x1e>
 801236c:	08015b2c 	.word	0x08015b2c
 8012370:	08015b2c 	.word	0x08015b2c
 8012374:	08015b2c 	.word	0x08015b2c
 8012378:	08015b30 	.word	0x08015b30

0801237c <__retarget_lock_init_recursive>:
 801237c:	4770      	bx	lr

0801237e <__retarget_lock_acquire_recursive>:
 801237e:	4770      	bx	lr

08012380 <__retarget_lock_release_recursive>:
 8012380:	4770      	bx	lr

08012382 <memcpy>:
 8012382:	440a      	add	r2, r1
 8012384:	4291      	cmp	r1, r2
 8012386:	f100 33ff 	add.w	r3, r0, #4294967295
 801238a:	d100      	bne.n	801238e <memcpy+0xc>
 801238c:	4770      	bx	lr
 801238e:	b510      	push	{r4, lr}
 8012390:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012394:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012398:	4291      	cmp	r1, r2
 801239a:	d1f9      	bne.n	8012390 <memcpy+0xe>
 801239c:	bd10      	pop	{r4, pc}

0801239e <memset>:
 801239e:	4402      	add	r2, r0
 80123a0:	4603      	mov	r3, r0
 80123a2:	4293      	cmp	r3, r2
 80123a4:	d100      	bne.n	80123a8 <memset+0xa>
 80123a6:	4770      	bx	lr
 80123a8:	f803 1b01 	strb.w	r1, [r3], #1
 80123ac:	e7f9      	b.n	80123a2 <memset+0x4>
	...

080123b0 <sbrk_aligned>:
 80123b0:	b570      	push	{r4, r5, r6, lr}
 80123b2:	4e0e      	ldr	r6, [pc, #56]	; (80123ec <sbrk_aligned+0x3c>)
 80123b4:	460c      	mov	r4, r1
 80123b6:	6831      	ldr	r1, [r6, #0]
 80123b8:	4605      	mov	r5, r0
 80123ba:	b911      	cbnz	r1, 80123c2 <sbrk_aligned+0x12>
 80123bc:	f000 fddc 	bl	8012f78 <_sbrk_r>
 80123c0:	6030      	str	r0, [r6, #0]
 80123c2:	4621      	mov	r1, r4
 80123c4:	4628      	mov	r0, r5
 80123c6:	f000 fdd7 	bl	8012f78 <_sbrk_r>
 80123ca:	1c43      	adds	r3, r0, #1
 80123cc:	d00a      	beq.n	80123e4 <sbrk_aligned+0x34>
 80123ce:	1cc4      	adds	r4, r0, #3
 80123d0:	f024 0403 	bic.w	r4, r4, #3
 80123d4:	42a0      	cmp	r0, r4
 80123d6:	d007      	beq.n	80123e8 <sbrk_aligned+0x38>
 80123d8:	1a21      	subs	r1, r4, r0
 80123da:	4628      	mov	r0, r5
 80123dc:	f000 fdcc 	bl	8012f78 <_sbrk_r>
 80123e0:	3001      	adds	r0, #1
 80123e2:	d101      	bne.n	80123e8 <sbrk_aligned+0x38>
 80123e4:	f04f 34ff 	mov.w	r4, #4294967295
 80123e8:	4620      	mov	r0, r4
 80123ea:	bd70      	pop	{r4, r5, r6, pc}
 80123ec:	2400d280 	.word	0x2400d280

080123f0 <_malloc_r>:
 80123f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123f4:	1ccd      	adds	r5, r1, #3
 80123f6:	f025 0503 	bic.w	r5, r5, #3
 80123fa:	3508      	adds	r5, #8
 80123fc:	2d0c      	cmp	r5, #12
 80123fe:	bf38      	it	cc
 8012400:	250c      	movcc	r5, #12
 8012402:	2d00      	cmp	r5, #0
 8012404:	4607      	mov	r7, r0
 8012406:	db01      	blt.n	801240c <_malloc_r+0x1c>
 8012408:	42a9      	cmp	r1, r5
 801240a:	d905      	bls.n	8012418 <_malloc_r+0x28>
 801240c:	230c      	movs	r3, #12
 801240e:	603b      	str	r3, [r7, #0]
 8012410:	2600      	movs	r6, #0
 8012412:	4630      	mov	r0, r6
 8012414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012418:	4e2e      	ldr	r6, [pc, #184]	; (80124d4 <_malloc_r+0xe4>)
 801241a:	f001 fe25 	bl	8014068 <__malloc_lock>
 801241e:	6833      	ldr	r3, [r6, #0]
 8012420:	461c      	mov	r4, r3
 8012422:	bb34      	cbnz	r4, 8012472 <_malloc_r+0x82>
 8012424:	4629      	mov	r1, r5
 8012426:	4638      	mov	r0, r7
 8012428:	f7ff ffc2 	bl	80123b0 <sbrk_aligned>
 801242c:	1c43      	adds	r3, r0, #1
 801242e:	4604      	mov	r4, r0
 8012430:	d14d      	bne.n	80124ce <_malloc_r+0xde>
 8012432:	6834      	ldr	r4, [r6, #0]
 8012434:	4626      	mov	r6, r4
 8012436:	2e00      	cmp	r6, #0
 8012438:	d140      	bne.n	80124bc <_malloc_r+0xcc>
 801243a:	6823      	ldr	r3, [r4, #0]
 801243c:	4631      	mov	r1, r6
 801243e:	4638      	mov	r0, r7
 8012440:	eb04 0803 	add.w	r8, r4, r3
 8012444:	f000 fd98 	bl	8012f78 <_sbrk_r>
 8012448:	4580      	cmp	r8, r0
 801244a:	d13a      	bne.n	80124c2 <_malloc_r+0xd2>
 801244c:	6821      	ldr	r1, [r4, #0]
 801244e:	3503      	adds	r5, #3
 8012450:	1a6d      	subs	r5, r5, r1
 8012452:	f025 0503 	bic.w	r5, r5, #3
 8012456:	3508      	adds	r5, #8
 8012458:	2d0c      	cmp	r5, #12
 801245a:	bf38      	it	cc
 801245c:	250c      	movcc	r5, #12
 801245e:	4629      	mov	r1, r5
 8012460:	4638      	mov	r0, r7
 8012462:	f7ff ffa5 	bl	80123b0 <sbrk_aligned>
 8012466:	3001      	adds	r0, #1
 8012468:	d02b      	beq.n	80124c2 <_malloc_r+0xd2>
 801246a:	6823      	ldr	r3, [r4, #0]
 801246c:	442b      	add	r3, r5
 801246e:	6023      	str	r3, [r4, #0]
 8012470:	e00e      	b.n	8012490 <_malloc_r+0xa0>
 8012472:	6822      	ldr	r2, [r4, #0]
 8012474:	1b52      	subs	r2, r2, r5
 8012476:	d41e      	bmi.n	80124b6 <_malloc_r+0xc6>
 8012478:	2a0b      	cmp	r2, #11
 801247a:	d916      	bls.n	80124aa <_malloc_r+0xba>
 801247c:	1961      	adds	r1, r4, r5
 801247e:	42a3      	cmp	r3, r4
 8012480:	6025      	str	r5, [r4, #0]
 8012482:	bf18      	it	ne
 8012484:	6059      	strne	r1, [r3, #4]
 8012486:	6863      	ldr	r3, [r4, #4]
 8012488:	bf08      	it	eq
 801248a:	6031      	streq	r1, [r6, #0]
 801248c:	5162      	str	r2, [r4, r5]
 801248e:	604b      	str	r3, [r1, #4]
 8012490:	4638      	mov	r0, r7
 8012492:	f104 060b 	add.w	r6, r4, #11
 8012496:	f001 fded 	bl	8014074 <__malloc_unlock>
 801249a:	f026 0607 	bic.w	r6, r6, #7
 801249e:	1d23      	adds	r3, r4, #4
 80124a0:	1af2      	subs	r2, r6, r3
 80124a2:	d0b6      	beq.n	8012412 <_malloc_r+0x22>
 80124a4:	1b9b      	subs	r3, r3, r6
 80124a6:	50a3      	str	r3, [r4, r2]
 80124a8:	e7b3      	b.n	8012412 <_malloc_r+0x22>
 80124aa:	6862      	ldr	r2, [r4, #4]
 80124ac:	42a3      	cmp	r3, r4
 80124ae:	bf0c      	ite	eq
 80124b0:	6032      	streq	r2, [r6, #0]
 80124b2:	605a      	strne	r2, [r3, #4]
 80124b4:	e7ec      	b.n	8012490 <_malloc_r+0xa0>
 80124b6:	4623      	mov	r3, r4
 80124b8:	6864      	ldr	r4, [r4, #4]
 80124ba:	e7b2      	b.n	8012422 <_malloc_r+0x32>
 80124bc:	4634      	mov	r4, r6
 80124be:	6876      	ldr	r6, [r6, #4]
 80124c0:	e7b9      	b.n	8012436 <_malloc_r+0x46>
 80124c2:	230c      	movs	r3, #12
 80124c4:	603b      	str	r3, [r7, #0]
 80124c6:	4638      	mov	r0, r7
 80124c8:	f001 fdd4 	bl	8014074 <__malloc_unlock>
 80124cc:	e7a1      	b.n	8012412 <_malloc_r+0x22>
 80124ce:	6025      	str	r5, [r4, #0]
 80124d0:	e7de      	b.n	8012490 <_malloc_r+0xa0>
 80124d2:	bf00      	nop
 80124d4:	2400d27c 	.word	0x2400d27c

080124d8 <__cvt>:
 80124d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124da:	ed2d 8b02 	vpush	{d8}
 80124de:	eeb0 8b40 	vmov.f64	d8, d0
 80124e2:	b085      	sub	sp, #20
 80124e4:	4617      	mov	r7, r2
 80124e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80124e8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80124ea:	ee18 2a90 	vmov	r2, s17
 80124ee:	f025 0520 	bic.w	r5, r5, #32
 80124f2:	2a00      	cmp	r2, #0
 80124f4:	bfb6      	itet	lt
 80124f6:	222d      	movlt	r2, #45	; 0x2d
 80124f8:	2200      	movge	r2, #0
 80124fa:	eeb1 8b40 	vneglt.f64	d8, d0
 80124fe:	2d46      	cmp	r5, #70	; 0x46
 8012500:	460c      	mov	r4, r1
 8012502:	701a      	strb	r2, [r3, #0]
 8012504:	d004      	beq.n	8012510 <__cvt+0x38>
 8012506:	2d45      	cmp	r5, #69	; 0x45
 8012508:	d100      	bne.n	801250c <__cvt+0x34>
 801250a:	3401      	adds	r4, #1
 801250c:	2102      	movs	r1, #2
 801250e:	e000      	b.n	8012512 <__cvt+0x3a>
 8012510:	2103      	movs	r1, #3
 8012512:	ab03      	add	r3, sp, #12
 8012514:	9301      	str	r3, [sp, #4]
 8012516:	ab02      	add	r3, sp, #8
 8012518:	9300      	str	r3, [sp, #0]
 801251a:	4622      	mov	r2, r4
 801251c:	4633      	mov	r3, r6
 801251e:	eeb0 0b48 	vmov.f64	d0, d8
 8012522:	f000 feed 	bl	8013300 <_dtoa_r>
 8012526:	2d47      	cmp	r5, #71	; 0x47
 8012528:	d101      	bne.n	801252e <__cvt+0x56>
 801252a:	07fb      	lsls	r3, r7, #31
 801252c:	d51a      	bpl.n	8012564 <__cvt+0x8c>
 801252e:	2d46      	cmp	r5, #70	; 0x46
 8012530:	eb00 0204 	add.w	r2, r0, r4
 8012534:	d10c      	bne.n	8012550 <__cvt+0x78>
 8012536:	7803      	ldrb	r3, [r0, #0]
 8012538:	2b30      	cmp	r3, #48	; 0x30
 801253a:	d107      	bne.n	801254c <__cvt+0x74>
 801253c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012544:	bf1c      	itt	ne
 8012546:	f1c4 0401 	rsbne	r4, r4, #1
 801254a:	6034      	strne	r4, [r6, #0]
 801254c:	6833      	ldr	r3, [r6, #0]
 801254e:	441a      	add	r2, r3
 8012550:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012558:	bf08      	it	eq
 801255a:	9203      	streq	r2, [sp, #12]
 801255c:	2130      	movs	r1, #48	; 0x30
 801255e:	9b03      	ldr	r3, [sp, #12]
 8012560:	4293      	cmp	r3, r2
 8012562:	d307      	bcc.n	8012574 <__cvt+0x9c>
 8012564:	9b03      	ldr	r3, [sp, #12]
 8012566:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012568:	1a1b      	subs	r3, r3, r0
 801256a:	6013      	str	r3, [r2, #0]
 801256c:	b005      	add	sp, #20
 801256e:	ecbd 8b02 	vpop	{d8}
 8012572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012574:	1c5c      	adds	r4, r3, #1
 8012576:	9403      	str	r4, [sp, #12]
 8012578:	7019      	strb	r1, [r3, #0]
 801257a:	e7f0      	b.n	801255e <__cvt+0x86>

0801257c <__exponent>:
 801257c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801257e:	4603      	mov	r3, r0
 8012580:	2900      	cmp	r1, #0
 8012582:	bfb8      	it	lt
 8012584:	4249      	neglt	r1, r1
 8012586:	f803 2b02 	strb.w	r2, [r3], #2
 801258a:	bfb4      	ite	lt
 801258c:	222d      	movlt	r2, #45	; 0x2d
 801258e:	222b      	movge	r2, #43	; 0x2b
 8012590:	2909      	cmp	r1, #9
 8012592:	7042      	strb	r2, [r0, #1]
 8012594:	dd2a      	ble.n	80125ec <__exponent+0x70>
 8012596:	f10d 0407 	add.w	r4, sp, #7
 801259a:	46a4      	mov	ip, r4
 801259c:	270a      	movs	r7, #10
 801259e:	46a6      	mov	lr, r4
 80125a0:	460a      	mov	r2, r1
 80125a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80125a6:	fb07 1516 	mls	r5, r7, r6, r1
 80125aa:	3530      	adds	r5, #48	; 0x30
 80125ac:	2a63      	cmp	r2, #99	; 0x63
 80125ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80125b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80125b6:	4631      	mov	r1, r6
 80125b8:	dcf1      	bgt.n	801259e <__exponent+0x22>
 80125ba:	3130      	adds	r1, #48	; 0x30
 80125bc:	f1ae 0502 	sub.w	r5, lr, #2
 80125c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80125c4:	1c44      	adds	r4, r0, #1
 80125c6:	4629      	mov	r1, r5
 80125c8:	4561      	cmp	r1, ip
 80125ca:	d30a      	bcc.n	80125e2 <__exponent+0x66>
 80125cc:	f10d 0209 	add.w	r2, sp, #9
 80125d0:	eba2 020e 	sub.w	r2, r2, lr
 80125d4:	4565      	cmp	r5, ip
 80125d6:	bf88      	it	hi
 80125d8:	2200      	movhi	r2, #0
 80125da:	4413      	add	r3, r2
 80125dc:	1a18      	subs	r0, r3, r0
 80125de:	b003      	add	sp, #12
 80125e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80125e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80125ea:	e7ed      	b.n	80125c8 <__exponent+0x4c>
 80125ec:	2330      	movs	r3, #48	; 0x30
 80125ee:	3130      	adds	r1, #48	; 0x30
 80125f0:	7083      	strb	r3, [r0, #2]
 80125f2:	70c1      	strb	r1, [r0, #3]
 80125f4:	1d03      	adds	r3, r0, #4
 80125f6:	e7f1      	b.n	80125dc <__exponent+0x60>

080125f8 <_printf_float>:
 80125f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125fc:	b08b      	sub	sp, #44	; 0x2c
 80125fe:	460c      	mov	r4, r1
 8012600:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8012604:	4616      	mov	r6, r2
 8012606:	461f      	mov	r7, r3
 8012608:	4605      	mov	r5, r0
 801260a:	f001 fca9 	bl	8013f60 <_localeconv_r>
 801260e:	f8d0 b000 	ldr.w	fp, [r0]
 8012612:	4658      	mov	r0, fp
 8012614:	f7ed fe7c 	bl	8000310 <strlen>
 8012618:	2300      	movs	r3, #0
 801261a:	9308      	str	r3, [sp, #32]
 801261c:	f8d8 3000 	ldr.w	r3, [r8]
 8012620:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012624:	6822      	ldr	r2, [r4, #0]
 8012626:	3307      	adds	r3, #7
 8012628:	f023 0307 	bic.w	r3, r3, #7
 801262c:	f103 0108 	add.w	r1, r3, #8
 8012630:	f8c8 1000 	str.w	r1, [r8]
 8012634:	4682      	mov	sl, r0
 8012636:	e9d3 0100 	ldrd	r0, r1, [r3]
 801263a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801263e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80128a0 <_printf_float+0x2a8>
 8012642:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8012646:	eeb0 6bc0 	vabs.f64	d6, d0
 801264a:	eeb4 6b47 	vcmp.f64	d6, d7
 801264e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012652:	dd24      	ble.n	801269e <_printf_float+0xa6>
 8012654:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801265c:	d502      	bpl.n	8012664 <_printf_float+0x6c>
 801265e:	232d      	movs	r3, #45	; 0x2d
 8012660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012664:	4b90      	ldr	r3, [pc, #576]	; (80128a8 <_printf_float+0x2b0>)
 8012666:	4891      	ldr	r0, [pc, #580]	; (80128ac <_printf_float+0x2b4>)
 8012668:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801266c:	bf94      	ite	ls
 801266e:	4698      	movls	r8, r3
 8012670:	4680      	movhi	r8, r0
 8012672:	2303      	movs	r3, #3
 8012674:	6123      	str	r3, [r4, #16]
 8012676:	f022 0204 	bic.w	r2, r2, #4
 801267a:	2300      	movs	r3, #0
 801267c:	6022      	str	r2, [r4, #0]
 801267e:	9304      	str	r3, [sp, #16]
 8012680:	9700      	str	r7, [sp, #0]
 8012682:	4633      	mov	r3, r6
 8012684:	aa09      	add	r2, sp, #36	; 0x24
 8012686:	4621      	mov	r1, r4
 8012688:	4628      	mov	r0, r5
 801268a:	f000 f9d3 	bl	8012a34 <_printf_common>
 801268e:	3001      	adds	r0, #1
 8012690:	f040 808a 	bne.w	80127a8 <_printf_float+0x1b0>
 8012694:	f04f 30ff 	mov.w	r0, #4294967295
 8012698:	b00b      	add	sp, #44	; 0x2c
 801269a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801269e:	eeb4 0b40 	vcmp.f64	d0, d0
 80126a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126a6:	d709      	bvc.n	80126bc <_printf_float+0xc4>
 80126a8:	ee10 3a90 	vmov	r3, s1
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	bfbc      	itt	lt
 80126b0:	232d      	movlt	r3, #45	; 0x2d
 80126b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80126b6:	487e      	ldr	r0, [pc, #504]	; (80128b0 <_printf_float+0x2b8>)
 80126b8:	4b7e      	ldr	r3, [pc, #504]	; (80128b4 <_printf_float+0x2bc>)
 80126ba:	e7d5      	b.n	8012668 <_printf_float+0x70>
 80126bc:	6863      	ldr	r3, [r4, #4]
 80126be:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80126c2:	9104      	str	r1, [sp, #16]
 80126c4:	1c59      	adds	r1, r3, #1
 80126c6:	d13c      	bne.n	8012742 <_printf_float+0x14a>
 80126c8:	2306      	movs	r3, #6
 80126ca:	6063      	str	r3, [r4, #4]
 80126cc:	2300      	movs	r3, #0
 80126ce:	9303      	str	r3, [sp, #12]
 80126d0:	ab08      	add	r3, sp, #32
 80126d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80126d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80126da:	ab07      	add	r3, sp, #28
 80126dc:	6861      	ldr	r1, [r4, #4]
 80126de:	9300      	str	r3, [sp, #0]
 80126e0:	6022      	str	r2, [r4, #0]
 80126e2:	f10d 031b 	add.w	r3, sp, #27
 80126e6:	4628      	mov	r0, r5
 80126e8:	f7ff fef6 	bl	80124d8 <__cvt>
 80126ec:	9b04      	ldr	r3, [sp, #16]
 80126ee:	9907      	ldr	r1, [sp, #28]
 80126f0:	2b47      	cmp	r3, #71	; 0x47
 80126f2:	4680      	mov	r8, r0
 80126f4:	d108      	bne.n	8012708 <_printf_float+0x110>
 80126f6:	1cc8      	adds	r0, r1, #3
 80126f8:	db02      	blt.n	8012700 <_printf_float+0x108>
 80126fa:	6863      	ldr	r3, [r4, #4]
 80126fc:	4299      	cmp	r1, r3
 80126fe:	dd41      	ble.n	8012784 <_printf_float+0x18c>
 8012700:	f1a9 0902 	sub.w	r9, r9, #2
 8012704:	fa5f f989 	uxtb.w	r9, r9
 8012708:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801270c:	d820      	bhi.n	8012750 <_printf_float+0x158>
 801270e:	3901      	subs	r1, #1
 8012710:	464a      	mov	r2, r9
 8012712:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012716:	9107      	str	r1, [sp, #28]
 8012718:	f7ff ff30 	bl	801257c <__exponent>
 801271c:	9a08      	ldr	r2, [sp, #32]
 801271e:	9004      	str	r0, [sp, #16]
 8012720:	1813      	adds	r3, r2, r0
 8012722:	2a01      	cmp	r2, #1
 8012724:	6123      	str	r3, [r4, #16]
 8012726:	dc02      	bgt.n	801272e <_printf_float+0x136>
 8012728:	6822      	ldr	r2, [r4, #0]
 801272a:	07d2      	lsls	r2, r2, #31
 801272c:	d501      	bpl.n	8012732 <_printf_float+0x13a>
 801272e:	3301      	adds	r3, #1
 8012730:	6123      	str	r3, [r4, #16]
 8012732:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d0a2      	beq.n	8012680 <_printf_float+0x88>
 801273a:	232d      	movs	r3, #45	; 0x2d
 801273c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012740:	e79e      	b.n	8012680 <_printf_float+0x88>
 8012742:	9904      	ldr	r1, [sp, #16]
 8012744:	2947      	cmp	r1, #71	; 0x47
 8012746:	d1c1      	bne.n	80126cc <_printf_float+0xd4>
 8012748:	2b00      	cmp	r3, #0
 801274a:	d1bf      	bne.n	80126cc <_printf_float+0xd4>
 801274c:	2301      	movs	r3, #1
 801274e:	e7bc      	b.n	80126ca <_printf_float+0xd2>
 8012750:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8012754:	d118      	bne.n	8012788 <_printf_float+0x190>
 8012756:	2900      	cmp	r1, #0
 8012758:	6863      	ldr	r3, [r4, #4]
 801275a:	dd0b      	ble.n	8012774 <_printf_float+0x17c>
 801275c:	6121      	str	r1, [r4, #16]
 801275e:	b913      	cbnz	r3, 8012766 <_printf_float+0x16e>
 8012760:	6822      	ldr	r2, [r4, #0]
 8012762:	07d0      	lsls	r0, r2, #31
 8012764:	d502      	bpl.n	801276c <_printf_float+0x174>
 8012766:	3301      	adds	r3, #1
 8012768:	440b      	add	r3, r1
 801276a:	6123      	str	r3, [r4, #16]
 801276c:	2300      	movs	r3, #0
 801276e:	65a1      	str	r1, [r4, #88]	; 0x58
 8012770:	9304      	str	r3, [sp, #16]
 8012772:	e7de      	b.n	8012732 <_printf_float+0x13a>
 8012774:	b913      	cbnz	r3, 801277c <_printf_float+0x184>
 8012776:	6822      	ldr	r2, [r4, #0]
 8012778:	07d2      	lsls	r2, r2, #31
 801277a:	d501      	bpl.n	8012780 <_printf_float+0x188>
 801277c:	3302      	adds	r3, #2
 801277e:	e7f4      	b.n	801276a <_printf_float+0x172>
 8012780:	2301      	movs	r3, #1
 8012782:	e7f2      	b.n	801276a <_printf_float+0x172>
 8012784:	f04f 0967 	mov.w	r9, #103	; 0x67
 8012788:	9b08      	ldr	r3, [sp, #32]
 801278a:	4299      	cmp	r1, r3
 801278c:	db05      	blt.n	801279a <_printf_float+0x1a2>
 801278e:	6823      	ldr	r3, [r4, #0]
 8012790:	6121      	str	r1, [r4, #16]
 8012792:	07d8      	lsls	r0, r3, #31
 8012794:	d5ea      	bpl.n	801276c <_printf_float+0x174>
 8012796:	1c4b      	adds	r3, r1, #1
 8012798:	e7e7      	b.n	801276a <_printf_float+0x172>
 801279a:	2900      	cmp	r1, #0
 801279c:	bfd4      	ite	le
 801279e:	f1c1 0202 	rsble	r2, r1, #2
 80127a2:	2201      	movgt	r2, #1
 80127a4:	4413      	add	r3, r2
 80127a6:	e7e0      	b.n	801276a <_printf_float+0x172>
 80127a8:	6823      	ldr	r3, [r4, #0]
 80127aa:	055a      	lsls	r2, r3, #21
 80127ac:	d407      	bmi.n	80127be <_printf_float+0x1c6>
 80127ae:	6923      	ldr	r3, [r4, #16]
 80127b0:	4642      	mov	r2, r8
 80127b2:	4631      	mov	r1, r6
 80127b4:	4628      	mov	r0, r5
 80127b6:	47b8      	blx	r7
 80127b8:	3001      	adds	r0, #1
 80127ba:	d12a      	bne.n	8012812 <_printf_float+0x21a>
 80127bc:	e76a      	b.n	8012694 <_printf_float+0x9c>
 80127be:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80127c2:	f240 80e2 	bls.w	801298a <_printf_float+0x392>
 80127c6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80127ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80127ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127d2:	d133      	bne.n	801283c <_printf_float+0x244>
 80127d4:	4a38      	ldr	r2, [pc, #224]	; (80128b8 <_printf_float+0x2c0>)
 80127d6:	2301      	movs	r3, #1
 80127d8:	4631      	mov	r1, r6
 80127da:	4628      	mov	r0, r5
 80127dc:	47b8      	blx	r7
 80127de:	3001      	adds	r0, #1
 80127e0:	f43f af58 	beq.w	8012694 <_printf_float+0x9c>
 80127e4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80127e8:	429a      	cmp	r2, r3
 80127ea:	db02      	blt.n	80127f2 <_printf_float+0x1fa>
 80127ec:	6823      	ldr	r3, [r4, #0]
 80127ee:	07d8      	lsls	r0, r3, #31
 80127f0:	d50f      	bpl.n	8012812 <_printf_float+0x21a>
 80127f2:	4653      	mov	r3, sl
 80127f4:	465a      	mov	r2, fp
 80127f6:	4631      	mov	r1, r6
 80127f8:	4628      	mov	r0, r5
 80127fa:	47b8      	blx	r7
 80127fc:	3001      	adds	r0, #1
 80127fe:	f43f af49 	beq.w	8012694 <_printf_float+0x9c>
 8012802:	f04f 0800 	mov.w	r8, #0
 8012806:	f104 091a 	add.w	r9, r4, #26
 801280a:	9b08      	ldr	r3, [sp, #32]
 801280c:	3b01      	subs	r3, #1
 801280e:	4543      	cmp	r3, r8
 8012810:	dc09      	bgt.n	8012826 <_printf_float+0x22e>
 8012812:	6823      	ldr	r3, [r4, #0]
 8012814:	079b      	lsls	r3, r3, #30
 8012816:	f100 8108 	bmi.w	8012a2a <_printf_float+0x432>
 801281a:	68e0      	ldr	r0, [r4, #12]
 801281c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801281e:	4298      	cmp	r0, r3
 8012820:	bfb8      	it	lt
 8012822:	4618      	movlt	r0, r3
 8012824:	e738      	b.n	8012698 <_printf_float+0xa0>
 8012826:	2301      	movs	r3, #1
 8012828:	464a      	mov	r2, r9
 801282a:	4631      	mov	r1, r6
 801282c:	4628      	mov	r0, r5
 801282e:	47b8      	blx	r7
 8012830:	3001      	adds	r0, #1
 8012832:	f43f af2f 	beq.w	8012694 <_printf_float+0x9c>
 8012836:	f108 0801 	add.w	r8, r8, #1
 801283a:	e7e6      	b.n	801280a <_printf_float+0x212>
 801283c:	9b07      	ldr	r3, [sp, #28]
 801283e:	2b00      	cmp	r3, #0
 8012840:	dc3c      	bgt.n	80128bc <_printf_float+0x2c4>
 8012842:	4a1d      	ldr	r2, [pc, #116]	; (80128b8 <_printf_float+0x2c0>)
 8012844:	2301      	movs	r3, #1
 8012846:	4631      	mov	r1, r6
 8012848:	4628      	mov	r0, r5
 801284a:	47b8      	blx	r7
 801284c:	3001      	adds	r0, #1
 801284e:	f43f af21 	beq.w	8012694 <_printf_float+0x9c>
 8012852:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012856:	4313      	orrs	r3, r2
 8012858:	d102      	bne.n	8012860 <_printf_float+0x268>
 801285a:	6823      	ldr	r3, [r4, #0]
 801285c:	07d9      	lsls	r1, r3, #31
 801285e:	d5d8      	bpl.n	8012812 <_printf_float+0x21a>
 8012860:	4653      	mov	r3, sl
 8012862:	465a      	mov	r2, fp
 8012864:	4631      	mov	r1, r6
 8012866:	4628      	mov	r0, r5
 8012868:	47b8      	blx	r7
 801286a:	3001      	adds	r0, #1
 801286c:	f43f af12 	beq.w	8012694 <_printf_float+0x9c>
 8012870:	f04f 0900 	mov.w	r9, #0
 8012874:	f104 0a1a 	add.w	sl, r4, #26
 8012878:	9b07      	ldr	r3, [sp, #28]
 801287a:	425b      	negs	r3, r3
 801287c:	454b      	cmp	r3, r9
 801287e:	dc01      	bgt.n	8012884 <_printf_float+0x28c>
 8012880:	9b08      	ldr	r3, [sp, #32]
 8012882:	e795      	b.n	80127b0 <_printf_float+0x1b8>
 8012884:	2301      	movs	r3, #1
 8012886:	4652      	mov	r2, sl
 8012888:	4631      	mov	r1, r6
 801288a:	4628      	mov	r0, r5
 801288c:	47b8      	blx	r7
 801288e:	3001      	adds	r0, #1
 8012890:	f43f af00 	beq.w	8012694 <_printf_float+0x9c>
 8012894:	f109 0901 	add.w	r9, r9, #1
 8012898:	e7ee      	b.n	8012878 <_printf_float+0x280>
 801289a:	bf00      	nop
 801289c:	f3af 8000 	nop.w
 80128a0:	ffffffff 	.word	0xffffffff
 80128a4:	7fefffff 	.word	0x7fefffff
 80128a8:	080157ac 	.word	0x080157ac
 80128ac:	080157b0 	.word	0x080157b0
 80128b0:	080157b8 	.word	0x080157b8
 80128b4:	080157b4 	.word	0x080157b4
 80128b8:	080157bc 	.word	0x080157bc
 80128bc:	9a08      	ldr	r2, [sp, #32]
 80128be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80128c0:	429a      	cmp	r2, r3
 80128c2:	bfa8      	it	ge
 80128c4:	461a      	movge	r2, r3
 80128c6:	2a00      	cmp	r2, #0
 80128c8:	4691      	mov	r9, r2
 80128ca:	dc38      	bgt.n	801293e <_printf_float+0x346>
 80128cc:	2300      	movs	r3, #0
 80128ce:	9305      	str	r3, [sp, #20]
 80128d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80128d4:	f104 021a 	add.w	r2, r4, #26
 80128d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80128da:	9905      	ldr	r1, [sp, #20]
 80128dc:	9304      	str	r3, [sp, #16]
 80128de:	eba3 0309 	sub.w	r3, r3, r9
 80128e2:	428b      	cmp	r3, r1
 80128e4:	dc33      	bgt.n	801294e <_printf_float+0x356>
 80128e6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80128ea:	429a      	cmp	r2, r3
 80128ec:	db3c      	blt.n	8012968 <_printf_float+0x370>
 80128ee:	6823      	ldr	r3, [r4, #0]
 80128f0:	07da      	lsls	r2, r3, #31
 80128f2:	d439      	bmi.n	8012968 <_printf_float+0x370>
 80128f4:	9b08      	ldr	r3, [sp, #32]
 80128f6:	9a04      	ldr	r2, [sp, #16]
 80128f8:	9907      	ldr	r1, [sp, #28]
 80128fa:	1a9a      	subs	r2, r3, r2
 80128fc:	eba3 0901 	sub.w	r9, r3, r1
 8012900:	4591      	cmp	r9, r2
 8012902:	bfa8      	it	ge
 8012904:	4691      	movge	r9, r2
 8012906:	f1b9 0f00 	cmp.w	r9, #0
 801290a:	dc35      	bgt.n	8012978 <_printf_float+0x380>
 801290c:	f04f 0800 	mov.w	r8, #0
 8012910:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012914:	f104 0a1a 	add.w	sl, r4, #26
 8012918:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801291c:	1a9b      	subs	r3, r3, r2
 801291e:	eba3 0309 	sub.w	r3, r3, r9
 8012922:	4543      	cmp	r3, r8
 8012924:	f77f af75 	ble.w	8012812 <_printf_float+0x21a>
 8012928:	2301      	movs	r3, #1
 801292a:	4652      	mov	r2, sl
 801292c:	4631      	mov	r1, r6
 801292e:	4628      	mov	r0, r5
 8012930:	47b8      	blx	r7
 8012932:	3001      	adds	r0, #1
 8012934:	f43f aeae 	beq.w	8012694 <_printf_float+0x9c>
 8012938:	f108 0801 	add.w	r8, r8, #1
 801293c:	e7ec      	b.n	8012918 <_printf_float+0x320>
 801293e:	4613      	mov	r3, r2
 8012940:	4631      	mov	r1, r6
 8012942:	4642      	mov	r2, r8
 8012944:	4628      	mov	r0, r5
 8012946:	47b8      	blx	r7
 8012948:	3001      	adds	r0, #1
 801294a:	d1bf      	bne.n	80128cc <_printf_float+0x2d4>
 801294c:	e6a2      	b.n	8012694 <_printf_float+0x9c>
 801294e:	2301      	movs	r3, #1
 8012950:	4631      	mov	r1, r6
 8012952:	4628      	mov	r0, r5
 8012954:	9204      	str	r2, [sp, #16]
 8012956:	47b8      	blx	r7
 8012958:	3001      	adds	r0, #1
 801295a:	f43f ae9b 	beq.w	8012694 <_printf_float+0x9c>
 801295e:	9b05      	ldr	r3, [sp, #20]
 8012960:	9a04      	ldr	r2, [sp, #16]
 8012962:	3301      	adds	r3, #1
 8012964:	9305      	str	r3, [sp, #20]
 8012966:	e7b7      	b.n	80128d8 <_printf_float+0x2e0>
 8012968:	4653      	mov	r3, sl
 801296a:	465a      	mov	r2, fp
 801296c:	4631      	mov	r1, r6
 801296e:	4628      	mov	r0, r5
 8012970:	47b8      	blx	r7
 8012972:	3001      	adds	r0, #1
 8012974:	d1be      	bne.n	80128f4 <_printf_float+0x2fc>
 8012976:	e68d      	b.n	8012694 <_printf_float+0x9c>
 8012978:	9a04      	ldr	r2, [sp, #16]
 801297a:	464b      	mov	r3, r9
 801297c:	4442      	add	r2, r8
 801297e:	4631      	mov	r1, r6
 8012980:	4628      	mov	r0, r5
 8012982:	47b8      	blx	r7
 8012984:	3001      	adds	r0, #1
 8012986:	d1c1      	bne.n	801290c <_printf_float+0x314>
 8012988:	e684      	b.n	8012694 <_printf_float+0x9c>
 801298a:	9a08      	ldr	r2, [sp, #32]
 801298c:	2a01      	cmp	r2, #1
 801298e:	dc01      	bgt.n	8012994 <_printf_float+0x39c>
 8012990:	07db      	lsls	r3, r3, #31
 8012992:	d537      	bpl.n	8012a04 <_printf_float+0x40c>
 8012994:	2301      	movs	r3, #1
 8012996:	4642      	mov	r2, r8
 8012998:	4631      	mov	r1, r6
 801299a:	4628      	mov	r0, r5
 801299c:	47b8      	blx	r7
 801299e:	3001      	adds	r0, #1
 80129a0:	f43f ae78 	beq.w	8012694 <_printf_float+0x9c>
 80129a4:	4653      	mov	r3, sl
 80129a6:	465a      	mov	r2, fp
 80129a8:	4631      	mov	r1, r6
 80129aa:	4628      	mov	r0, r5
 80129ac:	47b8      	blx	r7
 80129ae:	3001      	adds	r0, #1
 80129b0:	f43f ae70 	beq.w	8012694 <_printf_float+0x9c>
 80129b4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80129b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80129bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129c0:	d01b      	beq.n	80129fa <_printf_float+0x402>
 80129c2:	9b08      	ldr	r3, [sp, #32]
 80129c4:	f108 0201 	add.w	r2, r8, #1
 80129c8:	3b01      	subs	r3, #1
 80129ca:	4631      	mov	r1, r6
 80129cc:	4628      	mov	r0, r5
 80129ce:	47b8      	blx	r7
 80129d0:	3001      	adds	r0, #1
 80129d2:	d10e      	bne.n	80129f2 <_printf_float+0x3fa>
 80129d4:	e65e      	b.n	8012694 <_printf_float+0x9c>
 80129d6:	2301      	movs	r3, #1
 80129d8:	464a      	mov	r2, r9
 80129da:	4631      	mov	r1, r6
 80129dc:	4628      	mov	r0, r5
 80129de:	47b8      	blx	r7
 80129e0:	3001      	adds	r0, #1
 80129e2:	f43f ae57 	beq.w	8012694 <_printf_float+0x9c>
 80129e6:	f108 0801 	add.w	r8, r8, #1
 80129ea:	9b08      	ldr	r3, [sp, #32]
 80129ec:	3b01      	subs	r3, #1
 80129ee:	4543      	cmp	r3, r8
 80129f0:	dcf1      	bgt.n	80129d6 <_printf_float+0x3de>
 80129f2:	9b04      	ldr	r3, [sp, #16]
 80129f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80129f8:	e6db      	b.n	80127b2 <_printf_float+0x1ba>
 80129fa:	f04f 0800 	mov.w	r8, #0
 80129fe:	f104 091a 	add.w	r9, r4, #26
 8012a02:	e7f2      	b.n	80129ea <_printf_float+0x3f2>
 8012a04:	2301      	movs	r3, #1
 8012a06:	4642      	mov	r2, r8
 8012a08:	e7df      	b.n	80129ca <_printf_float+0x3d2>
 8012a0a:	2301      	movs	r3, #1
 8012a0c:	464a      	mov	r2, r9
 8012a0e:	4631      	mov	r1, r6
 8012a10:	4628      	mov	r0, r5
 8012a12:	47b8      	blx	r7
 8012a14:	3001      	adds	r0, #1
 8012a16:	f43f ae3d 	beq.w	8012694 <_printf_float+0x9c>
 8012a1a:	f108 0801 	add.w	r8, r8, #1
 8012a1e:	68e3      	ldr	r3, [r4, #12]
 8012a20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012a22:	1a5b      	subs	r3, r3, r1
 8012a24:	4543      	cmp	r3, r8
 8012a26:	dcf0      	bgt.n	8012a0a <_printf_float+0x412>
 8012a28:	e6f7      	b.n	801281a <_printf_float+0x222>
 8012a2a:	f04f 0800 	mov.w	r8, #0
 8012a2e:	f104 0919 	add.w	r9, r4, #25
 8012a32:	e7f4      	b.n	8012a1e <_printf_float+0x426>

08012a34 <_printf_common>:
 8012a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a38:	4616      	mov	r6, r2
 8012a3a:	4699      	mov	r9, r3
 8012a3c:	688a      	ldr	r2, [r1, #8]
 8012a3e:	690b      	ldr	r3, [r1, #16]
 8012a40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012a44:	4293      	cmp	r3, r2
 8012a46:	bfb8      	it	lt
 8012a48:	4613      	movlt	r3, r2
 8012a4a:	6033      	str	r3, [r6, #0]
 8012a4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012a50:	4607      	mov	r7, r0
 8012a52:	460c      	mov	r4, r1
 8012a54:	b10a      	cbz	r2, 8012a5a <_printf_common+0x26>
 8012a56:	3301      	adds	r3, #1
 8012a58:	6033      	str	r3, [r6, #0]
 8012a5a:	6823      	ldr	r3, [r4, #0]
 8012a5c:	0699      	lsls	r1, r3, #26
 8012a5e:	bf42      	ittt	mi
 8012a60:	6833      	ldrmi	r3, [r6, #0]
 8012a62:	3302      	addmi	r3, #2
 8012a64:	6033      	strmi	r3, [r6, #0]
 8012a66:	6825      	ldr	r5, [r4, #0]
 8012a68:	f015 0506 	ands.w	r5, r5, #6
 8012a6c:	d106      	bne.n	8012a7c <_printf_common+0x48>
 8012a6e:	f104 0a19 	add.w	sl, r4, #25
 8012a72:	68e3      	ldr	r3, [r4, #12]
 8012a74:	6832      	ldr	r2, [r6, #0]
 8012a76:	1a9b      	subs	r3, r3, r2
 8012a78:	42ab      	cmp	r3, r5
 8012a7a:	dc26      	bgt.n	8012aca <_printf_common+0x96>
 8012a7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012a80:	1e13      	subs	r3, r2, #0
 8012a82:	6822      	ldr	r2, [r4, #0]
 8012a84:	bf18      	it	ne
 8012a86:	2301      	movne	r3, #1
 8012a88:	0692      	lsls	r2, r2, #26
 8012a8a:	d42b      	bmi.n	8012ae4 <_printf_common+0xb0>
 8012a8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012a90:	4649      	mov	r1, r9
 8012a92:	4638      	mov	r0, r7
 8012a94:	47c0      	blx	r8
 8012a96:	3001      	adds	r0, #1
 8012a98:	d01e      	beq.n	8012ad8 <_printf_common+0xa4>
 8012a9a:	6823      	ldr	r3, [r4, #0]
 8012a9c:	68e5      	ldr	r5, [r4, #12]
 8012a9e:	6832      	ldr	r2, [r6, #0]
 8012aa0:	f003 0306 	and.w	r3, r3, #6
 8012aa4:	2b04      	cmp	r3, #4
 8012aa6:	bf08      	it	eq
 8012aa8:	1aad      	subeq	r5, r5, r2
 8012aaa:	68a3      	ldr	r3, [r4, #8]
 8012aac:	6922      	ldr	r2, [r4, #16]
 8012aae:	bf0c      	ite	eq
 8012ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012ab4:	2500      	movne	r5, #0
 8012ab6:	4293      	cmp	r3, r2
 8012ab8:	bfc4      	itt	gt
 8012aba:	1a9b      	subgt	r3, r3, r2
 8012abc:	18ed      	addgt	r5, r5, r3
 8012abe:	2600      	movs	r6, #0
 8012ac0:	341a      	adds	r4, #26
 8012ac2:	42b5      	cmp	r5, r6
 8012ac4:	d11a      	bne.n	8012afc <_printf_common+0xc8>
 8012ac6:	2000      	movs	r0, #0
 8012ac8:	e008      	b.n	8012adc <_printf_common+0xa8>
 8012aca:	2301      	movs	r3, #1
 8012acc:	4652      	mov	r2, sl
 8012ace:	4649      	mov	r1, r9
 8012ad0:	4638      	mov	r0, r7
 8012ad2:	47c0      	blx	r8
 8012ad4:	3001      	adds	r0, #1
 8012ad6:	d103      	bne.n	8012ae0 <_printf_common+0xac>
 8012ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8012adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ae0:	3501      	adds	r5, #1
 8012ae2:	e7c6      	b.n	8012a72 <_printf_common+0x3e>
 8012ae4:	18e1      	adds	r1, r4, r3
 8012ae6:	1c5a      	adds	r2, r3, #1
 8012ae8:	2030      	movs	r0, #48	; 0x30
 8012aea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012aee:	4422      	add	r2, r4
 8012af0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012af4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012af8:	3302      	adds	r3, #2
 8012afa:	e7c7      	b.n	8012a8c <_printf_common+0x58>
 8012afc:	2301      	movs	r3, #1
 8012afe:	4622      	mov	r2, r4
 8012b00:	4649      	mov	r1, r9
 8012b02:	4638      	mov	r0, r7
 8012b04:	47c0      	blx	r8
 8012b06:	3001      	adds	r0, #1
 8012b08:	d0e6      	beq.n	8012ad8 <_printf_common+0xa4>
 8012b0a:	3601      	adds	r6, #1
 8012b0c:	e7d9      	b.n	8012ac2 <_printf_common+0x8e>
	...

08012b10 <_printf_i>:
 8012b10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012b14:	7e0f      	ldrb	r7, [r1, #24]
 8012b16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012b18:	2f78      	cmp	r7, #120	; 0x78
 8012b1a:	4691      	mov	r9, r2
 8012b1c:	4680      	mov	r8, r0
 8012b1e:	460c      	mov	r4, r1
 8012b20:	469a      	mov	sl, r3
 8012b22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012b26:	d807      	bhi.n	8012b38 <_printf_i+0x28>
 8012b28:	2f62      	cmp	r7, #98	; 0x62
 8012b2a:	d80a      	bhi.n	8012b42 <_printf_i+0x32>
 8012b2c:	2f00      	cmp	r7, #0
 8012b2e:	f000 80d8 	beq.w	8012ce2 <_printf_i+0x1d2>
 8012b32:	2f58      	cmp	r7, #88	; 0x58
 8012b34:	f000 80a3 	beq.w	8012c7e <_printf_i+0x16e>
 8012b38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012b3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012b40:	e03a      	b.n	8012bb8 <_printf_i+0xa8>
 8012b42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012b46:	2b15      	cmp	r3, #21
 8012b48:	d8f6      	bhi.n	8012b38 <_printf_i+0x28>
 8012b4a:	a101      	add	r1, pc, #4	; (adr r1, 8012b50 <_printf_i+0x40>)
 8012b4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012b50:	08012ba9 	.word	0x08012ba9
 8012b54:	08012bbd 	.word	0x08012bbd
 8012b58:	08012b39 	.word	0x08012b39
 8012b5c:	08012b39 	.word	0x08012b39
 8012b60:	08012b39 	.word	0x08012b39
 8012b64:	08012b39 	.word	0x08012b39
 8012b68:	08012bbd 	.word	0x08012bbd
 8012b6c:	08012b39 	.word	0x08012b39
 8012b70:	08012b39 	.word	0x08012b39
 8012b74:	08012b39 	.word	0x08012b39
 8012b78:	08012b39 	.word	0x08012b39
 8012b7c:	08012cc9 	.word	0x08012cc9
 8012b80:	08012bed 	.word	0x08012bed
 8012b84:	08012cab 	.word	0x08012cab
 8012b88:	08012b39 	.word	0x08012b39
 8012b8c:	08012b39 	.word	0x08012b39
 8012b90:	08012ceb 	.word	0x08012ceb
 8012b94:	08012b39 	.word	0x08012b39
 8012b98:	08012bed 	.word	0x08012bed
 8012b9c:	08012b39 	.word	0x08012b39
 8012ba0:	08012b39 	.word	0x08012b39
 8012ba4:	08012cb3 	.word	0x08012cb3
 8012ba8:	682b      	ldr	r3, [r5, #0]
 8012baa:	1d1a      	adds	r2, r3, #4
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	602a      	str	r2, [r5, #0]
 8012bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012bb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012bb8:	2301      	movs	r3, #1
 8012bba:	e0a3      	b.n	8012d04 <_printf_i+0x1f4>
 8012bbc:	6820      	ldr	r0, [r4, #0]
 8012bbe:	6829      	ldr	r1, [r5, #0]
 8012bc0:	0606      	lsls	r6, r0, #24
 8012bc2:	f101 0304 	add.w	r3, r1, #4
 8012bc6:	d50a      	bpl.n	8012bde <_printf_i+0xce>
 8012bc8:	680e      	ldr	r6, [r1, #0]
 8012bca:	602b      	str	r3, [r5, #0]
 8012bcc:	2e00      	cmp	r6, #0
 8012bce:	da03      	bge.n	8012bd8 <_printf_i+0xc8>
 8012bd0:	232d      	movs	r3, #45	; 0x2d
 8012bd2:	4276      	negs	r6, r6
 8012bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012bd8:	485e      	ldr	r0, [pc, #376]	; (8012d54 <_printf_i+0x244>)
 8012bda:	230a      	movs	r3, #10
 8012bdc:	e019      	b.n	8012c12 <_printf_i+0x102>
 8012bde:	680e      	ldr	r6, [r1, #0]
 8012be0:	602b      	str	r3, [r5, #0]
 8012be2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012be6:	bf18      	it	ne
 8012be8:	b236      	sxthne	r6, r6
 8012bea:	e7ef      	b.n	8012bcc <_printf_i+0xbc>
 8012bec:	682b      	ldr	r3, [r5, #0]
 8012bee:	6820      	ldr	r0, [r4, #0]
 8012bf0:	1d19      	adds	r1, r3, #4
 8012bf2:	6029      	str	r1, [r5, #0]
 8012bf4:	0601      	lsls	r1, r0, #24
 8012bf6:	d501      	bpl.n	8012bfc <_printf_i+0xec>
 8012bf8:	681e      	ldr	r6, [r3, #0]
 8012bfa:	e002      	b.n	8012c02 <_printf_i+0xf2>
 8012bfc:	0646      	lsls	r6, r0, #25
 8012bfe:	d5fb      	bpl.n	8012bf8 <_printf_i+0xe8>
 8012c00:	881e      	ldrh	r6, [r3, #0]
 8012c02:	4854      	ldr	r0, [pc, #336]	; (8012d54 <_printf_i+0x244>)
 8012c04:	2f6f      	cmp	r7, #111	; 0x6f
 8012c06:	bf0c      	ite	eq
 8012c08:	2308      	moveq	r3, #8
 8012c0a:	230a      	movne	r3, #10
 8012c0c:	2100      	movs	r1, #0
 8012c0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012c12:	6865      	ldr	r5, [r4, #4]
 8012c14:	60a5      	str	r5, [r4, #8]
 8012c16:	2d00      	cmp	r5, #0
 8012c18:	bfa2      	ittt	ge
 8012c1a:	6821      	ldrge	r1, [r4, #0]
 8012c1c:	f021 0104 	bicge.w	r1, r1, #4
 8012c20:	6021      	strge	r1, [r4, #0]
 8012c22:	b90e      	cbnz	r6, 8012c28 <_printf_i+0x118>
 8012c24:	2d00      	cmp	r5, #0
 8012c26:	d04d      	beq.n	8012cc4 <_printf_i+0x1b4>
 8012c28:	4615      	mov	r5, r2
 8012c2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8012c2e:	fb03 6711 	mls	r7, r3, r1, r6
 8012c32:	5dc7      	ldrb	r7, [r0, r7]
 8012c34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012c38:	4637      	mov	r7, r6
 8012c3a:	42bb      	cmp	r3, r7
 8012c3c:	460e      	mov	r6, r1
 8012c3e:	d9f4      	bls.n	8012c2a <_printf_i+0x11a>
 8012c40:	2b08      	cmp	r3, #8
 8012c42:	d10b      	bne.n	8012c5c <_printf_i+0x14c>
 8012c44:	6823      	ldr	r3, [r4, #0]
 8012c46:	07de      	lsls	r6, r3, #31
 8012c48:	d508      	bpl.n	8012c5c <_printf_i+0x14c>
 8012c4a:	6923      	ldr	r3, [r4, #16]
 8012c4c:	6861      	ldr	r1, [r4, #4]
 8012c4e:	4299      	cmp	r1, r3
 8012c50:	bfde      	ittt	le
 8012c52:	2330      	movle	r3, #48	; 0x30
 8012c54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012c58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012c5c:	1b52      	subs	r2, r2, r5
 8012c5e:	6122      	str	r2, [r4, #16]
 8012c60:	f8cd a000 	str.w	sl, [sp]
 8012c64:	464b      	mov	r3, r9
 8012c66:	aa03      	add	r2, sp, #12
 8012c68:	4621      	mov	r1, r4
 8012c6a:	4640      	mov	r0, r8
 8012c6c:	f7ff fee2 	bl	8012a34 <_printf_common>
 8012c70:	3001      	adds	r0, #1
 8012c72:	d14c      	bne.n	8012d0e <_printf_i+0x1fe>
 8012c74:	f04f 30ff 	mov.w	r0, #4294967295
 8012c78:	b004      	add	sp, #16
 8012c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c7e:	4835      	ldr	r0, [pc, #212]	; (8012d54 <_printf_i+0x244>)
 8012c80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012c84:	6829      	ldr	r1, [r5, #0]
 8012c86:	6823      	ldr	r3, [r4, #0]
 8012c88:	f851 6b04 	ldr.w	r6, [r1], #4
 8012c8c:	6029      	str	r1, [r5, #0]
 8012c8e:	061d      	lsls	r5, r3, #24
 8012c90:	d514      	bpl.n	8012cbc <_printf_i+0x1ac>
 8012c92:	07df      	lsls	r7, r3, #31
 8012c94:	bf44      	itt	mi
 8012c96:	f043 0320 	orrmi.w	r3, r3, #32
 8012c9a:	6023      	strmi	r3, [r4, #0]
 8012c9c:	b91e      	cbnz	r6, 8012ca6 <_printf_i+0x196>
 8012c9e:	6823      	ldr	r3, [r4, #0]
 8012ca0:	f023 0320 	bic.w	r3, r3, #32
 8012ca4:	6023      	str	r3, [r4, #0]
 8012ca6:	2310      	movs	r3, #16
 8012ca8:	e7b0      	b.n	8012c0c <_printf_i+0xfc>
 8012caa:	6823      	ldr	r3, [r4, #0]
 8012cac:	f043 0320 	orr.w	r3, r3, #32
 8012cb0:	6023      	str	r3, [r4, #0]
 8012cb2:	2378      	movs	r3, #120	; 0x78
 8012cb4:	4828      	ldr	r0, [pc, #160]	; (8012d58 <_printf_i+0x248>)
 8012cb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012cba:	e7e3      	b.n	8012c84 <_printf_i+0x174>
 8012cbc:	0659      	lsls	r1, r3, #25
 8012cbe:	bf48      	it	mi
 8012cc0:	b2b6      	uxthmi	r6, r6
 8012cc2:	e7e6      	b.n	8012c92 <_printf_i+0x182>
 8012cc4:	4615      	mov	r5, r2
 8012cc6:	e7bb      	b.n	8012c40 <_printf_i+0x130>
 8012cc8:	682b      	ldr	r3, [r5, #0]
 8012cca:	6826      	ldr	r6, [r4, #0]
 8012ccc:	6961      	ldr	r1, [r4, #20]
 8012cce:	1d18      	adds	r0, r3, #4
 8012cd0:	6028      	str	r0, [r5, #0]
 8012cd2:	0635      	lsls	r5, r6, #24
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	d501      	bpl.n	8012cdc <_printf_i+0x1cc>
 8012cd8:	6019      	str	r1, [r3, #0]
 8012cda:	e002      	b.n	8012ce2 <_printf_i+0x1d2>
 8012cdc:	0670      	lsls	r0, r6, #25
 8012cde:	d5fb      	bpl.n	8012cd8 <_printf_i+0x1c8>
 8012ce0:	8019      	strh	r1, [r3, #0]
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	6123      	str	r3, [r4, #16]
 8012ce6:	4615      	mov	r5, r2
 8012ce8:	e7ba      	b.n	8012c60 <_printf_i+0x150>
 8012cea:	682b      	ldr	r3, [r5, #0]
 8012cec:	1d1a      	adds	r2, r3, #4
 8012cee:	602a      	str	r2, [r5, #0]
 8012cf0:	681d      	ldr	r5, [r3, #0]
 8012cf2:	6862      	ldr	r2, [r4, #4]
 8012cf4:	2100      	movs	r1, #0
 8012cf6:	4628      	mov	r0, r5
 8012cf8:	f7ed fb12 	bl	8000320 <memchr>
 8012cfc:	b108      	cbz	r0, 8012d02 <_printf_i+0x1f2>
 8012cfe:	1b40      	subs	r0, r0, r5
 8012d00:	6060      	str	r0, [r4, #4]
 8012d02:	6863      	ldr	r3, [r4, #4]
 8012d04:	6123      	str	r3, [r4, #16]
 8012d06:	2300      	movs	r3, #0
 8012d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d0c:	e7a8      	b.n	8012c60 <_printf_i+0x150>
 8012d0e:	6923      	ldr	r3, [r4, #16]
 8012d10:	462a      	mov	r2, r5
 8012d12:	4649      	mov	r1, r9
 8012d14:	4640      	mov	r0, r8
 8012d16:	47d0      	blx	sl
 8012d18:	3001      	adds	r0, #1
 8012d1a:	d0ab      	beq.n	8012c74 <_printf_i+0x164>
 8012d1c:	6823      	ldr	r3, [r4, #0]
 8012d1e:	079b      	lsls	r3, r3, #30
 8012d20:	d413      	bmi.n	8012d4a <_printf_i+0x23a>
 8012d22:	68e0      	ldr	r0, [r4, #12]
 8012d24:	9b03      	ldr	r3, [sp, #12]
 8012d26:	4298      	cmp	r0, r3
 8012d28:	bfb8      	it	lt
 8012d2a:	4618      	movlt	r0, r3
 8012d2c:	e7a4      	b.n	8012c78 <_printf_i+0x168>
 8012d2e:	2301      	movs	r3, #1
 8012d30:	4632      	mov	r2, r6
 8012d32:	4649      	mov	r1, r9
 8012d34:	4640      	mov	r0, r8
 8012d36:	47d0      	blx	sl
 8012d38:	3001      	adds	r0, #1
 8012d3a:	d09b      	beq.n	8012c74 <_printf_i+0x164>
 8012d3c:	3501      	adds	r5, #1
 8012d3e:	68e3      	ldr	r3, [r4, #12]
 8012d40:	9903      	ldr	r1, [sp, #12]
 8012d42:	1a5b      	subs	r3, r3, r1
 8012d44:	42ab      	cmp	r3, r5
 8012d46:	dcf2      	bgt.n	8012d2e <_printf_i+0x21e>
 8012d48:	e7eb      	b.n	8012d22 <_printf_i+0x212>
 8012d4a:	2500      	movs	r5, #0
 8012d4c:	f104 0619 	add.w	r6, r4, #25
 8012d50:	e7f5      	b.n	8012d3e <_printf_i+0x22e>
 8012d52:	bf00      	nop
 8012d54:	080157be 	.word	0x080157be
 8012d58:	080157cf 	.word	0x080157cf

08012d5c <iprintf>:
 8012d5c:	b40f      	push	{r0, r1, r2, r3}
 8012d5e:	4b0a      	ldr	r3, [pc, #40]	; (8012d88 <iprintf+0x2c>)
 8012d60:	b513      	push	{r0, r1, r4, lr}
 8012d62:	681c      	ldr	r4, [r3, #0]
 8012d64:	b124      	cbz	r4, 8012d70 <iprintf+0x14>
 8012d66:	69a3      	ldr	r3, [r4, #24]
 8012d68:	b913      	cbnz	r3, 8012d70 <iprintf+0x14>
 8012d6a:	4620      	mov	r0, r4
 8012d6c:	f7ff fa44 	bl	80121f8 <__sinit>
 8012d70:	ab05      	add	r3, sp, #20
 8012d72:	9a04      	ldr	r2, [sp, #16]
 8012d74:	68a1      	ldr	r1, [r4, #8]
 8012d76:	9301      	str	r3, [sp, #4]
 8012d78:	4620      	mov	r0, r4
 8012d7a:	f001 fd91 	bl	80148a0 <_vfiprintf_r>
 8012d7e:	b002      	add	sp, #8
 8012d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d84:	b004      	add	sp, #16
 8012d86:	4770      	bx	lr
 8012d88:	24000118 	.word	0x24000118

08012d8c <putchar>:
 8012d8c:	4b09      	ldr	r3, [pc, #36]	; (8012db4 <putchar+0x28>)
 8012d8e:	b513      	push	{r0, r1, r4, lr}
 8012d90:	681c      	ldr	r4, [r3, #0]
 8012d92:	4601      	mov	r1, r0
 8012d94:	b134      	cbz	r4, 8012da4 <putchar+0x18>
 8012d96:	69a3      	ldr	r3, [r4, #24]
 8012d98:	b923      	cbnz	r3, 8012da4 <putchar+0x18>
 8012d9a:	9001      	str	r0, [sp, #4]
 8012d9c:	4620      	mov	r0, r4
 8012d9e:	f7ff fa2b 	bl	80121f8 <__sinit>
 8012da2:	9901      	ldr	r1, [sp, #4]
 8012da4:	68a2      	ldr	r2, [r4, #8]
 8012da6:	4620      	mov	r0, r4
 8012da8:	b002      	add	sp, #8
 8012daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012dae:	f001 bea7 	b.w	8014b00 <_putc_r>
 8012db2:	bf00      	nop
 8012db4:	24000118 	.word	0x24000118

08012db8 <_puts_r>:
 8012db8:	b570      	push	{r4, r5, r6, lr}
 8012dba:	460e      	mov	r6, r1
 8012dbc:	4605      	mov	r5, r0
 8012dbe:	b118      	cbz	r0, 8012dc8 <_puts_r+0x10>
 8012dc0:	6983      	ldr	r3, [r0, #24]
 8012dc2:	b90b      	cbnz	r3, 8012dc8 <_puts_r+0x10>
 8012dc4:	f7ff fa18 	bl	80121f8 <__sinit>
 8012dc8:	69ab      	ldr	r3, [r5, #24]
 8012dca:	68ac      	ldr	r4, [r5, #8]
 8012dcc:	b913      	cbnz	r3, 8012dd4 <_puts_r+0x1c>
 8012dce:	4628      	mov	r0, r5
 8012dd0:	f7ff fa12 	bl	80121f8 <__sinit>
 8012dd4:	4b2c      	ldr	r3, [pc, #176]	; (8012e88 <_puts_r+0xd0>)
 8012dd6:	429c      	cmp	r4, r3
 8012dd8:	d120      	bne.n	8012e1c <_puts_r+0x64>
 8012dda:	686c      	ldr	r4, [r5, #4]
 8012ddc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012dde:	07db      	lsls	r3, r3, #31
 8012de0:	d405      	bmi.n	8012dee <_puts_r+0x36>
 8012de2:	89a3      	ldrh	r3, [r4, #12]
 8012de4:	0598      	lsls	r0, r3, #22
 8012de6:	d402      	bmi.n	8012dee <_puts_r+0x36>
 8012de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012dea:	f7ff fac8 	bl	801237e <__retarget_lock_acquire_recursive>
 8012dee:	89a3      	ldrh	r3, [r4, #12]
 8012df0:	0719      	lsls	r1, r3, #28
 8012df2:	d51d      	bpl.n	8012e30 <_puts_r+0x78>
 8012df4:	6923      	ldr	r3, [r4, #16]
 8012df6:	b1db      	cbz	r3, 8012e30 <_puts_r+0x78>
 8012df8:	3e01      	subs	r6, #1
 8012dfa:	68a3      	ldr	r3, [r4, #8]
 8012dfc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012e00:	3b01      	subs	r3, #1
 8012e02:	60a3      	str	r3, [r4, #8]
 8012e04:	bb39      	cbnz	r1, 8012e56 <_puts_r+0x9e>
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	da38      	bge.n	8012e7c <_puts_r+0xc4>
 8012e0a:	4622      	mov	r2, r4
 8012e0c:	210a      	movs	r1, #10
 8012e0e:	4628      	mov	r0, r5
 8012e10:	f000 f906 	bl	8013020 <__swbuf_r>
 8012e14:	3001      	adds	r0, #1
 8012e16:	d011      	beq.n	8012e3c <_puts_r+0x84>
 8012e18:	250a      	movs	r5, #10
 8012e1a:	e011      	b.n	8012e40 <_puts_r+0x88>
 8012e1c:	4b1b      	ldr	r3, [pc, #108]	; (8012e8c <_puts_r+0xd4>)
 8012e1e:	429c      	cmp	r4, r3
 8012e20:	d101      	bne.n	8012e26 <_puts_r+0x6e>
 8012e22:	68ac      	ldr	r4, [r5, #8]
 8012e24:	e7da      	b.n	8012ddc <_puts_r+0x24>
 8012e26:	4b1a      	ldr	r3, [pc, #104]	; (8012e90 <_puts_r+0xd8>)
 8012e28:	429c      	cmp	r4, r3
 8012e2a:	bf08      	it	eq
 8012e2c:	68ec      	ldreq	r4, [r5, #12]
 8012e2e:	e7d5      	b.n	8012ddc <_puts_r+0x24>
 8012e30:	4621      	mov	r1, r4
 8012e32:	4628      	mov	r0, r5
 8012e34:	f000 f958 	bl	80130e8 <__swsetup_r>
 8012e38:	2800      	cmp	r0, #0
 8012e3a:	d0dd      	beq.n	8012df8 <_puts_r+0x40>
 8012e3c:	f04f 35ff 	mov.w	r5, #4294967295
 8012e40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012e42:	07da      	lsls	r2, r3, #31
 8012e44:	d405      	bmi.n	8012e52 <_puts_r+0x9a>
 8012e46:	89a3      	ldrh	r3, [r4, #12]
 8012e48:	059b      	lsls	r3, r3, #22
 8012e4a:	d402      	bmi.n	8012e52 <_puts_r+0x9a>
 8012e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e4e:	f7ff fa97 	bl	8012380 <__retarget_lock_release_recursive>
 8012e52:	4628      	mov	r0, r5
 8012e54:	bd70      	pop	{r4, r5, r6, pc}
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	da04      	bge.n	8012e64 <_puts_r+0xac>
 8012e5a:	69a2      	ldr	r2, [r4, #24]
 8012e5c:	429a      	cmp	r2, r3
 8012e5e:	dc06      	bgt.n	8012e6e <_puts_r+0xb6>
 8012e60:	290a      	cmp	r1, #10
 8012e62:	d004      	beq.n	8012e6e <_puts_r+0xb6>
 8012e64:	6823      	ldr	r3, [r4, #0]
 8012e66:	1c5a      	adds	r2, r3, #1
 8012e68:	6022      	str	r2, [r4, #0]
 8012e6a:	7019      	strb	r1, [r3, #0]
 8012e6c:	e7c5      	b.n	8012dfa <_puts_r+0x42>
 8012e6e:	4622      	mov	r2, r4
 8012e70:	4628      	mov	r0, r5
 8012e72:	f000 f8d5 	bl	8013020 <__swbuf_r>
 8012e76:	3001      	adds	r0, #1
 8012e78:	d1bf      	bne.n	8012dfa <_puts_r+0x42>
 8012e7a:	e7df      	b.n	8012e3c <_puts_r+0x84>
 8012e7c:	6823      	ldr	r3, [r4, #0]
 8012e7e:	250a      	movs	r5, #10
 8012e80:	1c5a      	adds	r2, r3, #1
 8012e82:	6022      	str	r2, [r4, #0]
 8012e84:	701d      	strb	r5, [r3, #0]
 8012e86:	e7db      	b.n	8012e40 <_puts_r+0x88>
 8012e88:	08015768 	.word	0x08015768
 8012e8c:	08015788 	.word	0x08015788
 8012e90:	08015748 	.word	0x08015748

08012e94 <puts>:
 8012e94:	4b02      	ldr	r3, [pc, #8]	; (8012ea0 <puts+0xc>)
 8012e96:	4601      	mov	r1, r0
 8012e98:	6818      	ldr	r0, [r3, #0]
 8012e9a:	f7ff bf8d 	b.w	8012db8 <_puts_r>
 8012e9e:	bf00      	nop
 8012ea0:	24000118 	.word	0x24000118

08012ea4 <cleanup_glue>:
 8012ea4:	b538      	push	{r3, r4, r5, lr}
 8012ea6:	460c      	mov	r4, r1
 8012ea8:	6809      	ldr	r1, [r1, #0]
 8012eaa:	4605      	mov	r5, r0
 8012eac:	b109      	cbz	r1, 8012eb2 <cleanup_glue+0xe>
 8012eae:	f7ff fff9 	bl	8012ea4 <cleanup_glue>
 8012eb2:	4621      	mov	r1, r4
 8012eb4:	4628      	mov	r0, r5
 8012eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012eba:	f001 bc7b 	b.w	80147b4 <_free_r>
	...

08012ec0 <_reclaim_reent>:
 8012ec0:	4b2c      	ldr	r3, [pc, #176]	; (8012f74 <_reclaim_reent+0xb4>)
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	4283      	cmp	r3, r0
 8012ec6:	b570      	push	{r4, r5, r6, lr}
 8012ec8:	4604      	mov	r4, r0
 8012eca:	d051      	beq.n	8012f70 <_reclaim_reent+0xb0>
 8012ecc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012ece:	b143      	cbz	r3, 8012ee2 <_reclaim_reent+0x22>
 8012ed0:	68db      	ldr	r3, [r3, #12]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d14a      	bne.n	8012f6c <_reclaim_reent+0xac>
 8012ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ed8:	6819      	ldr	r1, [r3, #0]
 8012eda:	b111      	cbz	r1, 8012ee2 <_reclaim_reent+0x22>
 8012edc:	4620      	mov	r0, r4
 8012ede:	f001 fc69 	bl	80147b4 <_free_r>
 8012ee2:	6961      	ldr	r1, [r4, #20]
 8012ee4:	b111      	cbz	r1, 8012eec <_reclaim_reent+0x2c>
 8012ee6:	4620      	mov	r0, r4
 8012ee8:	f001 fc64 	bl	80147b4 <_free_r>
 8012eec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012eee:	b111      	cbz	r1, 8012ef6 <_reclaim_reent+0x36>
 8012ef0:	4620      	mov	r0, r4
 8012ef2:	f001 fc5f 	bl	80147b4 <_free_r>
 8012ef6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012ef8:	b111      	cbz	r1, 8012f00 <_reclaim_reent+0x40>
 8012efa:	4620      	mov	r0, r4
 8012efc:	f001 fc5a 	bl	80147b4 <_free_r>
 8012f00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012f02:	b111      	cbz	r1, 8012f0a <_reclaim_reent+0x4a>
 8012f04:	4620      	mov	r0, r4
 8012f06:	f001 fc55 	bl	80147b4 <_free_r>
 8012f0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012f0c:	b111      	cbz	r1, 8012f14 <_reclaim_reent+0x54>
 8012f0e:	4620      	mov	r0, r4
 8012f10:	f001 fc50 	bl	80147b4 <_free_r>
 8012f14:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012f16:	b111      	cbz	r1, 8012f1e <_reclaim_reent+0x5e>
 8012f18:	4620      	mov	r0, r4
 8012f1a:	f001 fc4b 	bl	80147b4 <_free_r>
 8012f1e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012f20:	b111      	cbz	r1, 8012f28 <_reclaim_reent+0x68>
 8012f22:	4620      	mov	r0, r4
 8012f24:	f001 fc46 	bl	80147b4 <_free_r>
 8012f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012f2a:	b111      	cbz	r1, 8012f32 <_reclaim_reent+0x72>
 8012f2c:	4620      	mov	r0, r4
 8012f2e:	f001 fc41 	bl	80147b4 <_free_r>
 8012f32:	69a3      	ldr	r3, [r4, #24]
 8012f34:	b1e3      	cbz	r3, 8012f70 <_reclaim_reent+0xb0>
 8012f36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012f38:	4620      	mov	r0, r4
 8012f3a:	4798      	blx	r3
 8012f3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012f3e:	b1b9      	cbz	r1, 8012f70 <_reclaim_reent+0xb0>
 8012f40:	4620      	mov	r0, r4
 8012f42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f46:	f7ff bfad 	b.w	8012ea4 <cleanup_glue>
 8012f4a:	5949      	ldr	r1, [r1, r5]
 8012f4c:	b941      	cbnz	r1, 8012f60 <_reclaim_reent+0xa0>
 8012f4e:	3504      	adds	r5, #4
 8012f50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f52:	2d80      	cmp	r5, #128	; 0x80
 8012f54:	68d9      	ldr	r1, [r3, #12]
 8012f56:	d1f8      	bne.n	8012f4a <_reclaim_reent+0x8a>
 8012f58:	4620      	mov	r0, r4
 8012f5a:	f001 fc2b 	bl	80147b4 <_free_r>
 8012f5e:	e7ba      	b.n	8012ed6 <_reclaim_reent+0x16>
 8012f60:	680e      	ldr	r6, [r1, #0]
 8012f62:	4620      	mov	r0, r4
 8012f64:	f001 fc26 	bl	80147b4 <_free_r>
 8012f68:	4631      	mov	r1, r6
 8012f6a:	e7ef      	b.n	8012f4c <_reclaim_reent+0x8c>
 8012f6c:	2500      	movs	r5, #0
 8012f6e:	e7ef      	b.n	8012f50 <_reclaim_reent+0x90>
 8012f70:	bd70      	pop	{r4, r5, r6, pc}
 8012f72:	bf00      	nop
 8012f74:	24000118 	.word	0x24000118

08012f78 <_sbrk_r>:
 8012f78:	b538      	push	{r3, r4, r5, lr}
 8012f7a:	4d06      	ldr	r5, [pc, #24]	; (8012f94 <_sbrk_r+0x1c>)
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	4604      	mov	r4, r0
 8012f80:	4608      	mov	r0, r1
 8012f82:	602b      	str	r3, [r5, #0]
 8012f84:	f7ee fe50 	bl	8001c28 <_sbrk>
 8012f88:	1c43      	adds	r3, r0, #1
 8012f8a:	d102      	bne.n	8012f92 <_sbrk_r+0x1a>
 8012f8c:	682b      	ldr	r3, [r5, #0]
 8012f8e:	b103      	cbz	r3, 8012f92 <_sbrk_r+0x1a>
 8012f90:	6023      	str	r3, [r4, #0]
 8012f92:	bd38      	pop	{r3, r4, r5, pc}
 8012f94:	2400d284 	.word	0x2400d284

08012f98 <__sread>:
 8012f98:	b510      	push	{r4, lr}
 8012f9a:	460c      	mov	r4, r1
 8012f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fa0:	f001 fdf6 	bl	8014b90 <_read_r>
 8012fa4:	2800      	cmp	r0, #0
 8012fa6:	bfab      	itete	ge
 8012fa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012faa:	89a3      	ldrhlt	r3, [r4, #12]
 8012fac:	181b      	addge	r3, r3, r0
 8012fae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012fb2:	bfac      	ite	ge
 8012fb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8012fb6:	81a3      	strhlt	r3, [r4, #12]
 8012fb8:	bd10      	pop	{r4, pc}

08012fba <__swrite>:
 8012fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fbe:	461f      	mov	r7, r3
 8012fc0:	898b      	ldrh	r3, [r1, #12]
 8012fc2:	05db      	lsls	r3, r3, #23
 8012fc4:	4605      	mov	r5, r0
 8012fc6:	460c      	mov	r4, r1
 8012fc8:	4616      	mov	r6, r2
 8012fca:	d505      	bpl.n	8012fd8 <__swrite+0x1e>
 8012fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fd0:	2302      	movs	r3, #2
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	f000 ffc8 	bl	8013f68 <_lseek_r>
 8012fd8:	89a3      	ldrh	r3, [r4, #12]
 8012fda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012fde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012fe2:	81a3      	strh	r3, [r4, #12]
 8012fe4:	4632      	mov	r2, r6
 8012fe6:	463b      	mov	r3, r7
 8012fe8:	4628      	mov	r0, r5
 8012fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fee:	f000 b869 	b.w	80130c4 <_write_r>

08012ff2 <__sseek>:
 8012ff2:	b510      	push	{r4, lr}
 8012ff4:	460c      	mov	r4, r1
 8012ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ffa:	f000 ffb5 	bl	8013f68 <_lseek_r>
 8012ffe:	1c43      	adds	r3, r0, #1
 8013000:	89a3      	ldrh	r3, [r4, #12]
 8013002:	bf15      	itete	ne
 8013004:	6560      	strne	r0, [r4, #84]	; 0x54
 8013006:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801300a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801300e:	81a3      	strheq	r3, [r4, #12]
 8013010:	bf18      	it	ne
 8013012:	81a3      	strhne	r3, [r4, #12]
 8013014:	bd10      	pop	{r4, pc}

08013016 <__sclose>:
 8013016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801301a:	f000 b8d3 	b.w	80131c4 <_close_r>
	...

08013020 <__swbuf_r>:
 8013020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013022:	460e      	mov	r6, r1
 8013024:	4614      	mov	r4, r2
 8013026:	4605      	mov	r5, r0
 8013028:	b118      	cbz	r0, 8013032 <__swbuf_r+0x12>
 801302a:	6983      	ldr	r3, [r0, #24]
 801302c:	b90b      	cbnz	r3, 8013032 <__swbuf_r+0x12>
 801302e:	f7ff f8e3 	bl	80121f8 <__sinit>
 8013032:	4b21      	ldr	r3, [pc, #132]	; (80130b8 <__swbuf_r+0x98>)
 8013034:	429c      	cmp	r4, r3
 8013036:	d12b      	bne.n	8013090 <__swbuf_r+0x70>
 8013038:	686c      	ldr	r4, [r5, #4]
 801303a:	69a3      	ldr	r3, [r4, #24]
 801303c:	60a3      	str	r3, [r4, #8]
 801303e:	89a3      	ldrh	r3, [r4, #12]
 8013040:	071a      	lsls	r2, r3, #28
 8013042:	d52f      	bpl.n	80130a4 <__swbuf_r+0x84>
 8013044:	6923      	ldr	r3, [r4, #16]
 8013046:	b36b      	cbz	r3, 80130a4 <__swbuf_r+0x84>
 8013048:	6923      	ldr	r3, [r4, #16]
 801304a:	6820      	ldr	r0, [r4, #0]
 801304c:	1ac0      	subs	r0, r0, r3
 801304e:	6963      	ldr	r3, [r4, #20]
 8013050:	b2f6      	uxtb	r6, r6
 8013052:	4283      	cmp	r3, r0
 8013054:	4637      	mov	r7, r6
 8013056:	dc04      	bgt.n	8013062 <__swbuf_r+0x42>
 8013058:	4621      	mov	r1, r4
 801305a:	4628      	mov	r0, r5
 801305c:	f000 ff44 	bl	8013ee8 <_fflush_r>
 8013060:	bb30      	cbnz	r0, 80130b0 <__swbuf_r+0x90>
 8013062:	68a3      	ldr	r3, [r4, #8]
 8013064:	3b01      	subs	r3, #1
 8013066:	60a3      	str	r3, [r4, #8]
 8013068:	6823      	ldr	r3, [r4, #0]
 801306a:	1c5a      	adds	r2, r3, #1
 801306c:	6022      	str	r2, [r4, #0]
 801306e:	701e      	strb	r6, [r3, #0]
 8013070:	6963      	ldr	r3, [r4, #20]
 8013072:	3001      	adds	r0, #1
 8013074:	4283      	cmp	r3, r0
 8013076:	d004      	beq.n	8013082 <__swbuf_r+0x62>
 8013078:	89a3      	ldrh	r3, [r4, #12]
 801307a:	07db      	lsls	r3, r3, #31
 801307c:	d506      	bpl.n	801308c <__swbuf_r+0x6c>
 801307e:	2e0a      	cmp	r6, #10
 8013080:	d104      	bne.n	801308c <__swbuf_r+0x6c>
 8013082:	4621      	mov	r1, r4
 8013084:	4628      	mov	r0, r5
 8013086:	f000 ff2f 	bl	8013ee8 <_fflush_r>
 801308a:	b988      	cbnz	r0, 80130b0 <__swbuf_r+0x90>
 801308c:	4638      	mov	r0, r7
 801308e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013090:	4b0a      	ldr	r3, [pc, #40]	; (80130bc <__swbuf_r+0x9c>)
 8013092:	429c      	cmp	r4, r3
 8013094:	d101      	bne.n	801309a <__swbuf_r+0x7a>
 8013096:	68ac      	ldr	r4, [r5, #8]
 8013098:	e7cf      	b.n	801303a <__swbuf_r+0x1a>
 801309a:	4b09      	ldr	r3, [pc, #36]	; (80130c0 <__swbuf_r+0xa0>)
 801309c:	429c      	cmp	r4, r3
 801309e:	bf08      	it	eq
 80130a0:	68ec      	ldreq	r4, [r5, #12]
 80130a2:	e7ca      	b.n	801303a <__swbuf_r+0x1a>
 80130a4:	4621      	mov	r1, r4
 80130a6:	4628      	mov	r0, r5
 80130a8:	f000 f81e 	bl	80130e8 <__swsetup_r>
 80130ac:	2800      	cmp	r0, #0
 80130ae:	d0cb      	beq.n	8013048 <__swbuf_r+0x28>
 80130b0:	f04f 37ff 	mov.w	r7, #4294967295
 80130b4:	e7ea      	b.n	801308c <__swbuf_r+0x6c>
 80130b6:	bf00      	nop
 80130b8:	08015768 	.word	0x08015768
 80130bc:	08015788 	.word	0x08015788
 80130c0:	08015748 	.word	0x08015748

080130c4 <_write_r>:
 80130c4:	b538      	push	{r3, r4, r5, lr}
 80130c6:	4d07      	ldr	r5, [pc, #28]	; (80130e4 <_write_r+0x20>)
 80130c8:	4604      	mov	r4, r0
 80130ca:	4608      	mov	r0, r1
 80130cc:	4611      	mov	r1, r2
 80130ce:	2200      	movs	r2, #0
 80130d0:	602a      	str	r2, [r5, #0]
 80130d2:	461a      	mov	r2, r3
 80130d4:	f7ee fd57 	bl	8001b86 <_write>
 80130d8:	1c43      	adds	r3, r0, #1
 80130da:	d102      	bne.n	80130e2 <_write_r+0x1e>
 80130dc:	682b      	ldr	r3, [r5, #0]
 80130de:	b103      	cbz	r3, 80130e2 <_write_r+0x1e>
 80130e0:	6023      	str	r3, [r4, #0]
 80130e2:	bd38      	pop	{r3, r4, r5, pc}
 80130e4:	2400d284 	.word	0x2400d284

080130e8 <__swsetup_r>:
 80130e8:	4b32      	ldr	r3, [pc, #200]	; (80131b4 <__swsetup_r+0xcc>)
 80130ea:	b570      	push	{r4, r5, r6, lr}
 80130ec:	681d      	ldr	r5, [r3, #0]
 80130ee:	4606      	mov	r6, r0
 80130f0:	460c      	mov	r4, r1
 80130f2:	b125      	cbz	r5, 80130fe <__swsetup_r+0x16>
 80130f4:	69ab      	ldr	r3, [r5, #24]
 80130f6:	b913      	cbnz	r3, 80130fe <__swsetup_r+0x16>
 80130f8:	4628      	mov	r0, r5
 80130fa:	f7ff f87d 	bl	80121f8 <__sinit>
 80130fe:	4b2e      	ldr	r3, [pc, #184]	; (80131b8 <__swsetup_r+0xd0>)
 8013100:	429c      	cmp	r4, r3
 8013102:	d10f      	bne.n	8013124 <__swsetup_r+0x3c>
 8013104:	686c      	ldr	r4, [r5, #4]
 8013106:	89a3      	ldrh	r3, [r4, #12]
 8013108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801310c:	0719      	lsls	r1, r3, #28
 801310e:	d42c      	bmi.n	801316a <__swsetup_r+0x82>
 8013110:	06dd      	lsls	r5, r3, #27
 8013112:	d411      	bmi.n	8013138 <__swsetup_r+0x50>
 8013114:	2309      	movs	r3, #9
 8013116:	6033      	str	r3, [r6, #0]
 8013118:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801311c:	81a3      	strh	r3, [r4, #12]
 801311e:	f04f 30ff 	mov.w	r0, #4294967295
 8013122:	e03e      	b.n	80131a2 <__swsetup_r+0xba>
 8013124:	4b25      	ldr	r3, [pc, #148]	; (80131bc <__swsetup_r+0xd4>)
 8013126:	429c      	cmp	r4, r3
 8013128:	d101      	bne.n	801312e <__swsetup_r+0x46>
 801312a:	68ac      	ldr	r4, [r5, #8]
 801312c:	e7eb      	b.n	8013106 <__swsetup_r+0x1e>
 801312e:	4b24      	ldr	r3, [pc, #144]	; (80131c0 <__swsetup_r+0xd8>)
 8013130:	429c      	cmp	r4, r3
 8013132:	bf08      	it	eq
 8013134:	68ec      	ldreq	r4, [r5, #12]
 8013136:	e7e6      	b.n	8013106 <__swsetup_r+0x1e>
 8013138:	0758      	lsls	r0, r3, #29
 801313a:	d512      	bpl.n	8013162 <__swsetup_r+0x7a>
 801313c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801313e:	b141      	cbz	r1, 8013152 <__swsetup_r+0x6a>
 8013140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013144:	4299      	cmp	r1, r3
 8013146:	d002      	beq.n	801314e <__swsetup_r+0x66>
 8013148:	4630      	mov	r0, r6
 801314a:	f001 fb33 	bl	80147b4 <_free_r>
 801314e:	2300      	movs	r3, #0
 8013150:	6363      	str	r3, [r4, #52]	; 0x34
 8013152:	89a3      	ldrh	r3, [r4, #12]
 8013154:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013158:	81a3      	strh	r3, [r4, #12]
 801315a:	2300      	movs	r3, #0
 801315c:	6063      	str	r3, [r4, #4]
 801315e:	6923      	ldr	r3, [r4, #16]
 8013160:	6023      	str	r3, [r4, #0]
 8013162:	89a3      	ldrh	r3, [r4, #12]
 8013164:	f043 0308 	orr.w	r3, r3, #8
 8013168:	81a3      	strh	r3, [r4, #12]
 801316a:	6923      	ldr	r3, [r4, #16]
 801316c:	b94b      	cbnz	r3, 8013182 <__swsetup_r+0x9a>
 801316e:	89a3      	ldrh	r3, [r4, #12]
 8013170:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013178:	d003      	beq.n	8013182 <__swsetup_r+0x9a>
 801317a:	4621      	mov	r1, r4
 801317c:	4630      	mov	r0, r6
 801317e:	f000 ff2b 	bl	8013fd8 <__smakebuf_r>
 8013182:	89a0      	ldrh	r0, [r4, #12]
 8013184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013188:	f010 0301 	ands.w	r3, r0, #1
 801318c:	d00a      	beq.n	80131a4 <__swsetup_r+0xbc>
 801318e:	2300      	movs	r3, #0
 8013190:	60a3      	str	r3, [r4, #8]
 8013192:	6963      	ldr	r3, [r4, #20]
 8013194:	425b      	negs	r3, r3
 8013196:	61a3      	str	r3, [r4, #24]
 8013198:	6923      	ldr	r3, [r4, #16]
 801319a:	b943      	cbnz	r3, 80131ae <__swsetup_r+0xc6>
 801319c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80131a0:	d1ba      	bne.n	8013118 <__swsetup_r+0x30>
 80131a2:	bd70      	pop	{r4, r5, r6, pc}
 80131a4:	0781      	lsls	r1, r0, #30
 80131a6:	bf58      	it	pl
 80131a8:	6963      	ldrpl	r3, [r4, #20]
 80131aa:	60a3      	str	r3, [r4, #8]
 80131ac:	e7f4      	b.n	8013198 <__swsetup_r+0xb0>
 80131ae:	2000      	movs	r0, #0
 80131b0:	e7f7      	b.n	80131a2 <__swsetup_r+0xba>
 80131b2:	bf00      	nop
 80131b4:	24000118 	.word	0x24000118
 80131b8:	08015768 	.word	0x08015768
 80131bc:	08015788 	.word	0x08015788
 80131c0:	08015748 	.word	0x08015748

080131c4 <_close_r>:
 80131c4:	b538      	push	{r3, r4, r5, lr}
 80131c6:	4d06      	ldr	r5, [pc, #24]	; (80131e0 <_close_r+0x1c>)
 80131c8:	2300      	movs	r3, #0
 80131ca:	4604      	mov	r4, r0
 80131cc:	4608      	mov	r0, r1
 80131ce:	602b      	str	r3, [r5, #0]
 80131d0:	f7ee fcf5 	bl	8001bbe <_close>
 80131d4:	1c43      	adds	r3, r0, #1
 80131d6:	d102      	bne.n	80131de <_close_r+0x1a>
 80131d8:	682b      	ldr	r3, [r5, #0]
 80131da:	b103      	cbz	r3, 80131de <_close_r+0x1a>
 80131dc:	6023      	str	r3, [r4, #0]
 80131de:	bd38      	pop	{r3, r4, r5, pc}
 80131e0:	2400d284 	.word	0x2400d284

080131e4 <quorem>:
 80131e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131e8:	6903      	ldr	r3, [r0, #16]
 80131ea:	690c      	ldr	r4, [r1, #16]
 80131ec:	42a3      	cmp	r3, r4
 80131ee:	4607      	mov	r7, r0
 80131f0:	f2c0 8081 	blt.w	80132f6 <quorem+0x112>
 80131f4:	3c01      	subs	r4, #1
 80131f6:	f101 0814 	add.w	r8, r1, #20
 80131fa:	f100 0514 	add.w	r5, r0, #20
 80131fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013202:	9301      	str	r3, [sp, #4]
 8013204:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013208:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801320c:	3301      	adds	r3, #1
 801320e:	429a      	cmp	r2, r3
 8013210:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013214:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013218:	fbb2 f6f3 	udiv	r6, r2, r3
 801321c:	d331      	bcc.n	8013282 <quorem+0x9e>
 801321e:	f04f 0e00 	mov.w	lr, #0
 8013222:	4640      	mov	r0, r8
 8013224:	46ac      	mov	ip, r5
 8013226:	46f2      	mov	sl, lr
 8013228:	f850 2b04 	ldr.w	r2, [r0], #4
 801322c:	b293      	uxth	r3, r2
 801322e:	fb06 e303 	mla	r3, r6, r3, lr
 8013232:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013236:	b29b      	uxth	r3, r3
 8013238:	ebaa 0303 	sub.w	r3, sl, r3
 801323c:	f8dc a000 	ldr.w	sl, [ip]
 8013240:	0c12      	lsrs	r2, r2, #16
 8013242:	fa13 f38a 	uxtah	r3, r3, sl
 8013246:	fb06 e202 	mla	r2, r6, r2, lr
 801324a:	9300      	str	r3, [sp, #0]
 801324c:	9b00      	ldr	r3, [sp, #0]
 801324e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013252:	b292      	uxth	r2, r2
 8013254:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013258:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801325c:	f8bd 3000 	ldrh.w	r3, [sp]
 8013260:	4581      	cmp	r9, r0
 8013262:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013266:	f84c 3b04 	str.w	r3, [ip], #4
 801326a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801326e:	d2db      	bcs.n	8013228 <quorem+0x44>
 8013270:	f855 300b 	ldr.w	r3, [r5, fp]
 8013274:	b92b      	cbnz	r3, 8013282 <quorem+0x9e>
 8013276:	9b01      	ldr	r3, [sp, #4]
 8013278:	3b04      	subs	r3, #4
 801327a:	429d      	cmp	r5, r3
 801327c:	461a      	mov	r2, r3
 801327e:	d32e      	bcc.n	80132de <quorem+0xfa>
 8013280:	613c      	str	r4, [r7, #16]
 8013282:	4638      	mov	r0, r7
 8013284:	f001 f97e 	bl	8014584 <__mcmp>
 8013288:	2800      	cmp	r0, #0
 801328a:	db24      	blt.n	80132d6 <quorem+0xf2>
 801328c:	3601      	adds	r6, #1
 801328e:	4628      	mov	r0, r5
 8013290:	f04f 0c00 	mov.w	ip, #0
 8013294:	f858 2b04 	ldr.w	r2, [r8], #4
 8013298:	f8d0 e000 	ldr.w	lr, [r0]
 801329c:	b293      	uxth	r3, r2
 801329e:	ebac 0303 	sub.w	r3, ip, r3
 80132a2:	0c12      	lsrs	r2, r2, #16
 80132a4:	fa13 f38e 	uxtah	r3, r3, lr
 80132a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80132ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80132b0:	b29b      	uxth	r3, r3
 80132b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80132b6:	45c1      	cmp	r9, r8
 80132b8:	f840 3b04 	str.w	r3, [r0], #4
 80132bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80132c0:	d2e8      	bcs.n	8013294 <quorem+0xb0>
 80132c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80132c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80132ca:	b922      	cbnz	r2, 80132d6 <quorem+0xf2>
 80132cc:	3b04      	subs	r3, #4
 80132ce:	429d      	cmp	r5, r3
 80132d0:	461a      	mov	r2, r3
 80132d2:	d30a      	bcc.n	80132ea <quorem+0x106>
 80132d4:	613c      	str	r4, [r7, #16]
 80132d6:	4630      	mov	r0, r6
 80132d8:	b003      	add	sp, #12
 80132da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132de:	6812      	ldr	r2, [r2, #0]
 80132e0:	3b04      	subs	r3, #4
 80132e2:	2a00      	cmp	r2, #0
 80132e4:	d1cc      	bne.n	8013280 <quorem+0x9c>
 80132e6:	3c01      	subs	r4, #1
 80132e8:	e7c7      	b.n	801327a <quorem+0x96>
 80132ea:	6812      	ldr	r2, [r2, #0]
 80132ec:	3b04      	subs	r3, #4
 80132ee:	2a00      	cmp	r2, #0
 80132f0:	d1f0      	bne.n	80132d4 <quorem+0xf0>
 80132f2:	3c01      	subs	r4, #1
 80132f4:	e7eb      	b.n	80132ce <quorem+0xea>
 80132f6:	2000      	movs	r0, #0
 80132f8:	e7ee      	b.n	80132d8 <quorem+0xf4>
 80132fa:	0000      	movs	r0, r0
 80132fc:	0000      	movs	r0, r0
	...

08013300 <_dtoa_r>:
 8013300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013304:	ed2d 8b02 	vpush	{d8}
 8013308:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801330a:	b091      	sub	sp, #68	; 0x44
 801330c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013310:	ec59 8b10 	vmov	r8, r9, d0
 8013314:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8013316:	9106      	str	r1, [sp, #24]
 8013318:	4606      	mov	r6, r0
 801331a:	9208      	str	r2, [sp, #32]
 801331c:	930c      	str	r3, [sp, #48]	; 0x30
 801331e:	b975      	cbnz	r5, 801333e <_dtoa_r+0x3e>
 8013320:	2010      	movs	r0, #16
 8013322:	f000 fe99 	bl	8014058 <malloc>
 8013326:	4602      	mov	r2, r0
 8013328:	6270      	str	r0, [r6, #36]	; 0x24
 801332a:	b920      	cbnz	r0, 8013336 <_dtoa_r+0x36>
 801332c:	4baa      	ldr	r3, [pc, #680]	; (80135d8 <_dtoa_r+0x2d8>)
 801332e:	21ea      	movs	r1, #234	; 0xea
 8013330:	48aa      	ldr	r0, [pc, #680]	; (80135dc <_dtoa_r+0x2dc>)
 8013332:	f001 fc3f 	bl	8014bb4 <__assert_func>
 8013336:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801333a:	6005      	str	r5, [r0, #0]
 801333c:	60c5      	str	r5, [r0, #12]
 801333e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013340:	6819      	ldr	r1, [r3, #0]
 8013342:	b151      	cbz	r1, 801335a <_dtoa_r+0x5a>
 8013344:	685a      	ldr	r2, [r3, #4]
 8013346:	604a      	str	r2, [r1, #4]
 8013348:	2301      	movs	r3, #1
 801334a:	4093      	lsls	r3, r2
 801334c:	608b      	str	r3, [r1, #8]
 801334e:	4630      	mov	r0, r6
 8013350:	f000 fed6 	bl	8014100 <_Bfree>
 8013354:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013356:	2200      	movs	r2, #0
 8013358:	601a      	str	r2, [r3, #0]
 801335a:	f1b9 0300 	subs.w	r3, r9, #0
 801335e:	bfbb      	ittet	lt
 8013360:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013364:	9303      	strlt	r3, [sp, #12]
 8013366:	2300      	movge	r3, #0
 8013368:	2201      	movlt	r2, #1
 801336a:	bfac      	ite	ge
 801336c:	6023      	strge	r3, [r4, #0]
 801336e:	6022      	strlt	r2, [r4, #0]
 8013370:	4b9b      	ldr	r3, [pc, #620]	; (80135e0 <_dtoa_r+0x2e0>)
 8013372:	9c03      	ldr	r4, [sp, #12]
 8013374:	43a3      	bics	r3, r4
 8013376:	d11c      	bne.n	80133b2 <_dtoa_r+0xb2>
 8013378:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801337a:	f242 730f 	movw	r3, #9999	; 0x270f
 801337e:	6013      	str	r3, [r2, #0]
 8013380:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8013384:	ea53 0308 	orrs.w	r3, r3, r8
 8013388:	f000 84fd 	beq.w	8013d86 <_dtoa_r+0xa86>
 801338c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801338e:	b963      	cbnz	r3, 80133aa <_dtoa_r+0xaa>
 8013390:	4b94      	ldr	r3, [pc, #592]	; (80135e4 <_dtoa_r+0x2e4>)
 8013392:	e01f      	b.n	80133d4 <_dtoa_r+0xd4>
 8013394:	4b94      	ldr	r3, [pc, #592]	; (80135e8 <_dtoa_r+0x2e8>)
 8013396:	9301      	str	r3, [sp, #4]
 8013398:	3308      	adds	r3, #8
 801339a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801339c:	6013      	str	r3, [r2, #0]
 801339e:	9801      	ldr	r0, [sp, #4]
 80133a0:	b011      	add	sp, #68	; 0x44
 80133a2:	ecbd 8b02 	vpop	{d8}
 80133a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133aa:	4b8e      	ldr	r3, [pc, #568]	; (80135e4 <_dtoa_r+0x2e4>)
 80133ac:	9301      	str	r3, [sp, #4]
 80133ae:	3303      	adds	r3, #3
 80133b0:	e7f3      	b.n	801339a <_dtoa_r+0x9a>
 80133b2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80133b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80133ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133be:	d10b      	bne.n	80133d8 <_dtoa_r+0xd8>
 80133c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80133c2:	2301      	movs	r3, #1
 80133c4:	6013      	str	r3, [r2, #0]
 80133c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	f000 84d9 	beq.w	8013d80 <_dtoa_r+0xa80>
 80133ce:	4887      	ldr	r0, [pc, #540]	; (80135ec <_dtoa_r+0x2ec>)
 80133d0:	6018      	str	r0, [r3, #0]
 80133d2:	1e43      	subs	r3, r0, #1
 80133d4:	9301      	str	r3, [sp, #4]
 80133d6:	e7e2      	b.n	801339e <_dtoa_r+0x9e>
 80133d8:	a90f      	add	r1, sp, #60	; 0x3c
 80133da:	aa0e      	add	r2, sp, #56	; 0x38
 80133dc:	4630      	mov	r0, r6
 80133de:	eeb0 0b48 	vmov.f64	d0, d8
 80133e2:	f001 f975 	bl	80146d0 <__d2b>
 80133e6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80133ea:	4605      	mov	r5, r0
 80133ec:	980e      	ldr	r0, [sp, #56]	; 0x38
 80133ee:	2900      	cmp	r1, #0
 80133f0:	d046      	beq.n	8013480 <_dtoa_r+0x180>
 80133f2:	ee18 4a90 	vmov	r4, s17
 80133f6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80133fa:	ec53 2b18 	vmov	r2, r3, d8
 80133fe:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8013402:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013406:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801340a:	2400      	movs	r4, #0
 801340c:	ec43 2b16 	vmov	d6, r2, r3
 8013410:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8013414:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80135c0 <_dtoa_r+0x2c0>
 8013418:	ee36 7b47 	vsub.f64	d7, d6, d7
 801341c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80135c8 <_dtoa_r+0x2c8>
 8013420:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013424:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80135d0 <_dtoa_r+0x2d0>
 8013428:	ee07 1a90 	vmov	s15, r1
 801342c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013430:	eeb0 7b46 	vmov.f64	d7, d6
 8013434:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013438:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801343c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013444:	ee16 ba90 	vmov	fp, s13
 8013448:	940a      	str	r4, [sp, #40]	; 0x28
 801344a:	d508      	bpl.n	801345e <_dtoa_r+0x15e>
 801344c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013450:	eeb4 6b47 	vcmp.f64	d6, d7
 8013454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013458:	bf18      	it	ne
 801345a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801345e:	f1bb 0f16 	cmp.w	fp, #22
 8013462:	d82f      	bhi.n	80134c4 <_dtoa_r+0x1c4>
 8013464:	4b62      	ldr	r3, [pc, #392]	; (80135f0 <_dtoa_r+0x2f0>)
 8013466:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801346a:	ed93 7b00 	vldr	d7, [r3]
 801346e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013476:	d501      	bpl.n	801347c <_dtoa_r+0x17c>
 8013478:	f10b 3bff 	add.w	fp, fp, #4294967295
 801347c:	2300      	movs	r3, #0
 801347e:	e022      	b.n	80134c6 <_dtoa_r+0x1c6>
 8013480:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013482:	4401      	add	r1, r0
 8013484:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8013488:	2b20      	cmp	r3, #32
 801348a:	bfc1      	itttt	gt
 801348c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013490:	fa04 f303 	lslgt.w	r3, r4, r3
 8013494:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8013498:	fa28 f804 	lsrgt.w	r8, r8, r4
 801349c:	bfd6      	itet	le
 801349e:	f1c3 0320 	rsble	r3, r3, #32
 80134a2:	ea43 0808 	orrgt.w	r8, r3, r8
 80134a6:	fa08 f803 	lslle.w	r8, r8, r3
 80134aa:	ee07 8a90 	vmov	s15, r8
 80134ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80134b2:	3901      	subs	r1, #1
 80134b4:	ee17 4a90 	vmov	r4, s15
 80134b8:	ec53 2b17 	vmov	r2, r3, d7
 80134bc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80134c0:	2401      	movs	r4, #1
 80134c2:	e7a3      	b.n	801340c <_dtoa_r+0x10c>
 80134c4:	2301      	movs	r3, #1
 80134c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80134c8:	1a43      	subs	r3, r0, r1
 80134ca:	1e5a      	subs	r2, r3, #1
 80134cc:	bf45      	ittet	mi
 80134ce:	f1c3 0301 	rsbmi	r3, r3, #1
 80134d2:	9304      	strmi	r3, [sp, #16]
 80134d4:	2300      	movpl	r3, #0
 80134d6:	2300      	movmi	r3, #0
 80134d8:	9205      	str	r2, [sp, #20]
 80134da:	bf54      	ite	pl
 80134dc:	9304      	strpl	r3, [sp, #16]
 80134de:	9305      	strmi	r3, [sp, #20]
 80134e0:	f1bb 0f00 	cmp.w	fp, #0
 80134e4:	db18      	blt.n	8013518 <_dtoa_r+0x218>
 80134e6:	9b05      	ldr	r3, [sp, #20]
 80134e8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80134ec:	445b      	add	r3, fp
 80134ee:	9305      	str	r3, [sp, #20]
 80134f0:	2300      	movs	r3, #0
 80134f2:	9a06      	ldr	r2, [sp, #24]
 80134f4:	2a09      	cmp	r2, #9
 80134f6:	d849      	bhi.n	801358c <_dtoa_r+0x28c>
 80134f8:	2a05      	cmp	r2, #5
 80134fa:	bfc4      	itt	gt
 80134fc:	3a04      	subgt	r2, #4
 80134fe:	9206      	strgt	r2, [sp, #24]
 8013500:	9a06      	ldr	r2, [sp, #24]
 8013502:	f1a2 0202 	sub.w	r2, r2, #2
 8013506:	bfcc      	ite	gt
 8013508:	2400      	movgt	r4, #0
 801350a:	2401      	movle	r4, #1
 801350c:	2a03      	cmp	r2, #3
 801350e:	d848      	bhi.n	80135a2 <_dtoa_r+0x2a2>
 8013510:	e8df f002 	tbb	[pc, r2]
 8013514:	3a2c2e0b 	.word	0x3a2c2e0b
 8013518:	9b04      	ldr	r3, [sp, #16]
 801351a:	2200      	movs	r2, #0
 801351c:	eba3 030b 	sub.w	r3, r3, fp
 8013520:	9304      	str	r3, [sp, #16]
 8013522:	9209      	str	r2, [sp, #36]	; 0x24
 8013524:	f1cb 0300 	rsb	r3, fp, #0
 8013528:	e7e3      	b.n	80134f2 <_dtoa_r+0x1f2>
 801352a:	2200      	movs	r2, #0
 801352c:	9207      	str	r2, [sp, #28]
 801352e:	9a08      	ldr	r2, [sp, #32]
 8013530:	2a00      	cmp	r2, #0
 8013532:	dc39      	bgt.n	80135a8 <_dtoa_r+0x2a8>
 8013534:	f04f 0a01 	mov.w	sl, #1
 8013538:	46d1      	mov	r9, sl
 801353a:	4652      	mov	r2, sl
 801353c:	f8cd a020 	str.w	sl, [sp, #32]
 8013540:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8013542:	2100      	movs	r1, #0
 8013544:	6079      	str	r1, [r7, #4]
 8013546:	2004      	movs	r0, #4
 8013548:	f100 0c14 	add.w	ip, r0, #20
 801354c:	4594      	cmp	ip, r2
 801354e:	6879      	ldr	r1, [r7, #4]
 8013550:	d92f      	bls.n	80135b2 <_dtoa_r+0x2b2>
 8013552:	4630      	mov	r0, r6
 8013554:	930d      	str	r3, [sp, #52]	; 0x34
 8013556:	f000 fd93 	bl	8014080 <_Balloc>
 801355a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801355c:	9001      	str	r0, [sp, #4]
 801355e:	4602      	mov	r2, r0
 8013560:	2800      	cmp	r0, #0
 8013562:	d149      	bne.n	80135f8 <_dtoa_r+0x2f8>
 8013564:	4b23      	ldr	r3, [pc, #140]	; (80135f4 <_dtoa_r+0x2f4>)
 8013566:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801356a:	e6e1      	b.n	8013330 <_dtoa_r+0x30>
 801356c:	2201      	movs	r2, #1
 801356e:	e7dd      	b.n	801352c <_dtoa_r+0x22c>
 8013570:	2200      	movs	r2, #0
 8013572:	9207      	str	r2, [sp, #28]
 8013574:	9a08      	ldr	r2, [sp, #32]
 8013576:	eb0b 0a02 	add.w	sl, fp, r2
 801357a:	f10a 0901 	add.w	r9, sl, #1
 801357e:	464a      	mov	r2, r9
 8013580:	2a01      	cmp	r2, #1
 8013582:	bfb8      	it	lt
 8013584:	2201      	movlt	r2, #1
 8013586:	e7db      	b.n	8013540 <_dtoa_r+0x240>
 8013588:	2201      	movs	r2, #1
 801358a:	e7f2      	b.n	8013572 <_dtoa_r+0x272>
 801358c:	2401      	movs	r4, #1
 801358e:	2200      	movs	r2, #0
 8013590:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8013594:	f04f 3aff 	mov.w	sl, #4294967295
 8013598:	2100      	movs	r1, #0
 801359a:	46d1      	mov	r9, sl
 801359c:	2212      	movs	r2, #18
 801359e:	9108      	str	r1, [sp, #32]
 80135a0:	e7ce      	b.n	8013540 <_dtoa_r+0x240>
 80135a2:	2201      	movs	r2, #1
 80135a4:	9207      	str	r2, [sp, #28]
 80135a6:	e7f5      	b.n	8013594 <_dtoa_r+0x294>
 80135a8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80135ac:	46d1      	mov	r9, sl
 80135ae:	4652      	mov	r2, sl
 80135b0:	e7c6      	b.n	8013540 <_dtoa_r+0x240>
 80135b2:	3101      	adds	r1, #1
 80135b4:	6079      	str	r1, [r7, #4]
 80135b6:	0040      	lsls	r0, r0, #1
 80135b8:	e7c6      	b.n	8013548 <_dtoa_r+0x248>
 80135ba:	bf00      	nop
 80135bc:	f3af 8000 	nop.w
 80135c0:	636f4361 	.word	0x636f4361
 80135c4:	3fd287a7 	.word	0x3fd287a7
 80135c8:	8b60c8b3 	.word	0x8b60c8b3
 80135cc:	3fc68a28 	.word	0x3fc68a28
 80135d0:	509f79fb 	.word	0x509f79fb
 80135d4:	3fd34413 	.word	0x3fd34413
 80135d8:	080157ed 	.word	0x080157ed
 80135dc:	08015804 	.word	0x08015804
 80135e0:	7ff00000 	.word	0x7ff00000
 80135e4:	080157e9 	.word	0x080157e9
 80135e8:	080157e0 	.word	0x080157e0
 80135ec:	080157bd 	.word	0x080157bd
 80135f0:	080158f8 	.word	0x080158f8
 80135f4:	0801585f 	.word	0x0801585f
 80135f8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80135fa:	9901      	ldr	r1, [sp, #4]
 80135fc:	6011      	str	r1, [r2, #0]
 80135fe:	f1b9 0f0e 	cmp.w	r9, #14
 8013602:	d86c      	bhi.n	80136de <_dtoa_r+0x3de>
 8013604:	2c00      	cmp	r4, #0
 8013606:	d06a      	beq.n	80136de <_dtoa_r+0x3de>
 8013608:	f1bb 0f00 	cmp.w	fp, #0
 801360c:	f340 80a0 	ble.w	8013750 <_dtoa_r+0x450>
 8013610:	49c1      	ldr	r1, [pc, #772]	; (8013918 <_dtoa_r+0x618>)
 8013612:	f00b 020f 	and.w	r2, fp, #15
 8013616:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801361a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801361e:	ed92 7b00 	vldr	d7, [r2]
 8013622:	ea4f 112b 	mov.w	r1, fp, asr #4
 8013626:	f000 8087 	beq.w	8013738 <_dtoa_r+0x438>
 801362a:	4abc      	ldr	r2, [pc, #752]	; (801391c <_dtoa_r+0x61c>)
 801362c:	ed92 6b08 	vldr	d6, [r2, #32]
 8013630:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8013634:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013638:	f001 010f 	and.w	r1, r1, #15
 801363c:	2203      	movs	r2, #3
 801363e:	48b7      	ldr	r0, [pc, #732]	; (801391c <_dtoa_r+0x61c>)
 8013640:	2900      	cmp	r1, #0
 8013642:	d17b      	bne.n	801373c <_dtoa_r+0x43c>
 8013644:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013648:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801364c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013650:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013652:	2900      	cmp	r1, #0
 8013654:	f000 80a2 	beq.w	801379c <_dtoa_r+0x49c>
 8013658:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801365c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013660:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013668:	f140 8098 	bpl.w	801379c <_dtoa_r+0x49c>
 801366c:	f1b9 0f00 	cmp.w	r9, #0
 8013670:	f000 8094 	beq.w	801379c <_dtoa_r+0x49c>
 8013674:	f1ba 0f00 	cmp.w	sl, #0
 8013678:	dd2f      	ble.n	80136da <_dtoa_r+0x3da>
 801367a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801367e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013682:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013686:	f10b 37ff 	add.w	r7, fp, #4294967295
 801368a:	3201      	adds	r2, #1
 801368c:	4650      	mov	r0, sl
 801368e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013692:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8013696:	ee07 2a90 	vmov	s15, r2
 801369a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801369e:	eea7 5b06 	vfma.f64	d5, d7, d6
 80136a2:	ee15 4a90 	vmov	r4, s11
 80136a6:	ec52 1b15 	vmov	r1, r2, d5
 80136aa:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80136ae:	2800      	cmp	r0, #0
 80136b0:	d177      	bne.n	80137a2 <_dtoa_r+0x4a2>
 80136b2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80136b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80136ba:	ec42 1b17 	vmov	d7, r1, r2
 80136be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80136c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136c6:	f300 8263 	bgt.w	8013b90 <_dtoa_r+0x890>
 80136ca:	eeb1 7b47 	vneg.f64	d7, d7
 80136ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80136d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136d6:	f100 8258 	bmi.w	8013b8a <_dtoa_r+0x88a>
 80136da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80136de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80136e0:	2a00      	cmp	r2, #0
 80136e2:	f2c0 811d 	blt.w	8013920 <_dtoa_r+0x620>
 80136e6:	f1bb 0f0e 	cmp.w	fp, #14
 80136ea:	f300 8119 	bgt.w	8013920 <_dtoa_r+0x620>
 80136ee:	4b8a      	ldr	r3, [pc, #552]	; (8013918 <_dtoa_r+0x618>)
 80136f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80136f4:	ed93 6b00 	vldr	d6, [r3]
 80136f8:	9b08      	ldr	r3, [sp, #32]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	f280 80b7 	bge.w	801386e <_dtoa_r+0x56e>
 8013700:	f1b9 0f00 	cmp.w	r9, #0
 8013704:	f300 80b3 	bgt.w	801386e <_dtoa_r+0x56e>
 8013708:	f040 823f 	bne.w	8013b8a <_dtoa_r+0x88a>
 801370c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013710:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013714:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013718:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801371c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013720:	464c      	mov	r4, r9
 8013722:	464f      	mov	r7, r9
 8013724:	f280 8215 	bge.w	8013b52 <_dtoa_r+0x852>
 8013728:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801372c:	2331      	movs	r3, #49	; 0x31
 801372e:	f808 3b01 	strb.w	r3, [r8], #1
 8013732:	f10b 0b01 	add.w	fp, fp, #1
 8013736:	e211      	b.n	8013b5c <_dtoa_r+0x85c>
 8013738:	2202      	movs	r2, #2
 801373a:	e780      	b.n	801363e <_dtoa_r+0x33e>
 801373c:	07cc      	lsls	r4, r1, #31
 801373e:	d504      	bpl.n	801374a <_dtoa_r+0x44a>
 8013740:	ed90 6b00 	vldr	d6, [r0]
 8013744:	3201      	adds	r2, #1
 8013746:	ee27 7b06 	vmul.f64	d7, d7, d6
 801374a:	1049      	asrs	r1, r1, #1
 801374c:	3008      	adds	r0, #8
 801374e:	e777      	b.n	8013640 <_dtoa_r+0x340>
 8013750:	d022      	beq.n	8013798 <_dtoa_r+0x498>
 8013752:	f1cb 0100 	rsb	r1, fp, #0
 8013756:	4a70      	ldr	r2, [pc, #448]	; (8013918 <_dtoa_r+0x618>)
 8013758:	f001 000f 	and.w	r0, r1, #15
 801375c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013760:	ed92 7b00 	vldr	d7, [r2]
 8013764:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013768:	ed8d 7b02 	vstr	d7, [sp, #8]
 801376c:	486b      	ldr	r0, [pc, #428]	; (801391c <_dtoa_r+0x61c>)
 801376e:	1109      	asrs	r1, r1, #4
 8013770:	2400      	movs	r4, #0
 8013772:	2202      	movs	r2, #2
 8013774:	b929      	cbnz	r1, 8013782 <_dtoa_r+0x482>
 8013776:	2c00      	cmp	r4, #0
 8013778:	f43f af6a 	beq.w	8013650 <_dtoa_r+0x350>
 801377c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013780:	e766      	b.n	8013650 <_dtoa_r+0x350>
 8013782:	07cf      	lsls	r7, r1, #31
 8013784:	d505      	bpl.n	8013792 <_dtoa_r+0x492>
 8013786:	ed90 6b00 	vldr	d6, [r0]
 801378a:	3201      	adds	r2, #1
 801378c:	2401      	movs	r4, #1
 801378e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013792:	1049      	asrs	r1, r1, #1
 8013794:	3008      	adds	r0, #8
 8013796:	e7ed      	b.n	8013774 <_dtoa_r+0x474>
 8013798:	2202      	movs	r2, #2
 801379a:	e759      	b.n	8013650 <_dtoa_r+0x350>
 801379c:	465f      	mov	r7, fp
 801379e:	4648      	mov	r0, r9
 80137a0:	e775      	b.n	801368e <_dtoa_r+0x38e>
 80137a2:	ec42 1b17 	vmov	d7, r1, r2
 80137a6:	4a5c      	ldr	r2, [pc, #368]	; (8013918 <_dtoa_r+0x618>)
 80137a8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80137ac:	ed12 4b02 	vldr	d4, [r2, #-8]
 80137b0:	9a01      	ldr	r2, [sp, #4]
 80137b2:	1814      	adds	r4, r2, r0
 80137b4:	9a07      	ldr	r2, [sp, #28]
 80137b6:	b352      	cbz	r2, 801380e <_dtoa_r+0x50e>
 80137b8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80137bc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80137c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80137c4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80137c8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80137cc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80137d0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80137d4:	ee14 2a90 	vmov	r2, s9
 80137d8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80137dc:	3230      	adds	r2, #48	; 0x30
 80137de:	ee36 6b45 	vsub.f64	d6, d6, d5
 80137e2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80137e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ea:	f808 2b01 	strb.w	r2, [r8], #1
 80137ee:	d439      	bmi.n	8013864 <_dtoa_r+0x564>
 80137f0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80137f4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80137f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137fc:	d472      	bmi.n	80138e4 <_dtoa_r+0x5e4>
 80137fe:	45a0      	cmp	r8, r4
 8013800:	f43f af6b 	beq.w	80136da <_dtoa_r+0x3da>
 8013804:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013808:	ee26 6b03 	vmul.f64	d6, d6, d3
 801380c:	e7e0      	b.n	80137d0 <_dtoa_r+0x4d0>
 801380e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013812:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013816:	4621      	mov	r1, r4
 8013818:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801381c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013820:	ee14 2a90 	vmov	r2, s9
 8013824:	3230      	adds	r2, #48	; 0x30
 8013826:	f808 2b01 	strb.w	r2, [r8], #1
 801382a:	45a0      	cmp	r8, r4
 801382c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013830:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013834:	d118      	bne.n	8013868 <_dtoa_r+0x568>
 8013836:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801383a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801383e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8013842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013846:	dc4d      	bgt.n	80138e4 <_dtoa_r+0x5e4>
 8013848:	ee35 7b47 	vsub.f64	d7, d5, d7
 801384c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013854:	f57f af41 	bpl.w	80136da <_dtoa_r+0x3da>
 8013858:	4688      	mov	r8, r1
 801385a:	3901      	subs	r1, #1
 801385c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8013860:	2b30      	cmp	r3, #48	; 0x30
 8013862:	d0f9      	beq.n	8013858 <_dtoa_r+0x558>
 8013864:	46bb      	mov	fp, r7
 8013866:	e02a      	b.n	80138be <_dtoa_r+0x5be>
 8013868:	ee26 6b03 	vmul.f64	d6, d6, d3
 801386c:	e7d6      	b.n	801381c <_dtoa_r+0x51c>
 801386e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013872:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8013876:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801387a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801387e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8013882:	ee15 3a10 	vmov	r3, s10
 8013886:	3330      	adds	r3, #48	; 0x30
 8013888:	f808 3b01 	strb.w	r3, [r8], #1
 801388c:	9b01      	ldr	r3, [sp, #4]
 801388e:	eba8 0303 	sub.w	r3, r8, r3
 8013892:	4599      	cmp	r9, r3
 8013894:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013898:	eea3 7b46 	vfms.f64	d7, d3, d6
 801389c:	d133      	bne.n	8013906 <_dtoa_r+0x606>
 801389e:	ee37 7b07 	vadd.f64	d7, d7, d7
 80138a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80138a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138aa:	dc1a      	bgt.n	80138e2 <_dtoa_r+0x5e2>
 80138ac:	eeb4 7b46 	vcmp.f64	d7, d6
 80138b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138b4:	d103      	bne.n	80138be <_dtoa_r+0x5be>
 80138b6:	ee15 3a10 	vmov	r3, s10
 80138ba:	07d9      	lsls	r1, r3, #31
 80138bc:	d411      	bmi.n	80138e2 <_dtoa_r+0x5e2>
 80138be:	4629      	mov	r1, r5
 80138c0:	4630      	mov	r0, r6
 80138c2:	f000 fc1d 	bl	8014100 <_Bfree>
 80138c6:	2300      	movs	r3, #0
 80138c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80138ca:	f888 3000 	strb.w	r3, [r8]
 80138ce:	f10b 0301 	add.w	r3, fp, #1
 80138d2:	6013      	str	r3, [r2, #0]
 80138d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	f43f ad61 	beq.w	801339e <_dtoa_r+0x9e>
 80138dc:	f8c3 8000 	str.w	r8, [r3]
 80138e0:	e55d      	b.n	801339e <_dtoa_r+0x9e>
 80138e2:	465f      	mov	r7, fp
 80138e4:	4643      	mov	r3, r8
 80138e6:	4698      	mov	r8, r3
 80138e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80138ec:	2a39      	cmp	r2, #57	; 0x39
 80138ee:	d106      	bne.n	80138fe <_dtoa_r+0x5fe>
 80138f0:	9a01      	ldr	r2, [sp, #4]
 80138f2:	429a      	cmp	r2, r3
 80138f4:	d1f7      	bne.n	80138e6 <_dtoa_r+0x5e6>
 80138f6:	9901      	ldr	r1, [sp, #4]
 80138f8:	2230      	movs	r2, #48	; 0x30
 80138fa:	3701      	adds	r7, #1
 80138fc:	700a      	strb	r2, [r1, #0]
 80138fe:	781a      	ldrb	r2, [r3, #0]
 8013900:	3201      	adds	r2, #1
 8013902:	701a      	strb	r2, [r3, #0]
 8013904:	e7ae      	b.n	8013864 <_dtoa_r+0x564>
 8013906:	ee27 7b04 	vmul.f64	d7, d7, d4
 801390a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801390e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013912:	d1b2      	bne.n	801387a <_dtoa_r+0x57a>
 8013914:	e7d3      	b.n	80138be <_dtoa_r+0x5be>
 8013916:	bf00      	nop
 8013918:	080158f8 	.word	0x080158f8
 801391c:	080158d0 	.word	0x080158d0
 8013920:	9907      	ldr	r1, [sp, #28]
 8013922:	2900      	cmp	r1, #0
 8013924:	f000 80d0 	beq.w	8013ac8 <_dtoa_r+0x7c8>
 8013928:	9906      	ldr	r1, [sp, #24]
 801392a:	2901      	cmp	r1, #1
 801392c:	f300 80b4 	bgt.w	8013a98 <_dtoa_r+0x798>
 8013930:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013932:	2900      	cmp	r1, #0
 8013934:	f000 80ac 	beq.w	8013a90 <_dtoa_r+0x790>
 8013938:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801393c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013940:	461c      	mov	r4, r3
 8013942:	930a      	str	r3, [sp, #40]	; 0x28
 8013944:	9b04      	ldr	r3, [sp, #16]
 8013946:	4413      	add	r3, r2
 8013948:	9304      	str	r3, [sp, #16]
 801394a:	9b05      	ldr	r3, [sp, #20]
 801394c:	2101      	movs	r1, #1
 801394e:	4413      	add	r3, r2
 8013950:	4630      	mov	r0, r6
 8013952:	9305      	str	r3, [sp, #20]
 8013954:	f000 fc8c 	bl	8014270 <__i2b>
 8013958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801395a:	4607      	mov	r7, r0
 801395c:	f1b8 0f00 	cmp.w	r8, #0
 8013960:	dd0d      	ble.n	801397e <_dtoa_r+0x67e>
 8013962:	9a05      	ldr	r2, [sp, #20]
 8013964:	2a00      	cmp	r2, #0
 8013966:	dd0a      	ble.n	801397e <_dtoa_r+0x67e>
 8013968:	4542      	cmp	r2, r8
 801396a:	9904      	ldr	r1, [sp, #16]
 801396c:	bfa8      	it	ge
 801396e:	4642      	movge	r2, r8
 8013970:	1a89      	subs	r1, r1, r2
 8013972:	9104      	str	r1, [sp, #16]
 8013974:	9905      	ldr	r1, [sp, #20]
 8013976:	eba8 0802 	sub.w	r8, r8, r2
 801397a:	1a8a      	subs	r2, r1, r2
 801397c:	9205      	str	r2, [sp, #20]
 801397e:	b303      	cbz	r3, 80139c2 <_dtoa_r+0x6c2>
 8013980:	9a07      	ldr	r2, [sp, #28]
 8013982:	2a00      	cmp	r2, #0
 8013984:	f000 80a5 	beq.w	8013ad2 <_dtoa_r+0x7d2>
 8013988:	2c00      	cmp	r4, #0
 801398a:	dd13      	ble.n	80139b4 <_dtoa_r+0x6b4>
 801398c:	4639      	mov	r1, r7
 801398e:	4622      	mov	r2, r4
 8013990:	4630      	mov	r0, r6
 8013992:	930d      	str	r3, [sp, #52]	; 0x34
 8013994:	f000 fd2c 	bl	80143f0 <__pow5mult>
 8013998:	462a      	mov	r2, r5
 801399a:	4601      	mov	r1, r0
 801399c:	4607      	mov	r7, r0
 801399e:	4630      	mov	r0, r6
 80139a0:	f000 fc7c 	bl	801429c <__multiply>
 80139a4:	4629      	mov	r1, r5
 80139a6:	900a      	str	r0, [sp, #40]	; 0x28
 80139a8:	4630      	mov	r0, r6
 80139aa:	f000 fba9 	bl	8014100 <_Bfree>
 80139ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80139b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80139b2:	4615      	mov	r5, r2
 80139b4:	1b1a      	subs	r2, r3, r4
 80139b6:	d004      	beq.n	80139c2 <_dtoa_r+0x6c2>
 80139b8:	4629      	mov	r1, r5
 80139ba:	4630      	mov	r0, r6
 80139bc:	f000 fd18 	bl	80143f0 <__pow5mult>
 80139c0:	4605      	mov	r5, r0
 80139c2:	2101      	movs	r1, #1
 80139c4:	4630      	mov	r0, r6
 80139c6:	f000 fc53 	bl	8014270 <__i2b>
 80139ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	4604      	mov	r4, r0
 80139d0:	f340 8081 	ble.w	8013ad6 <_dtoa_r+0x7d6>
 80139d4:	461a      	mov	r2, r3
 80139d6:	4601      	mov	r1, r0
 80139d8:	4630      	mov	r0, r6
 80139da:	f000 fd09 	bl	80143f0 <__pow5mult>
 80139de:	9b06      	ldr	r3, [sp, #24]
 80139e0:	2b01      	cmp	r3, #1
 80139e2:	4604      	mov	r4, r0
 80139e4:	dd7a      	ble.n	8013adc <_dtoa_r+0x7dc>
 80139e6:	2300      	movs	r3, #0
 80139e8:	930a      	str	r3, [sp, #40]	; 0x28
 80139ea:	6922      	ldr	r2, [r4, #16]
 80139ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80139f0:	6910      	ldr	r0, [r2, #16]
 80139f2:	f000 fbed 	bl	80141d0 <__hi0bits>
 80139f6:	f1c0 0020 	rsb	r0, r0, #32
 80139fa:	9b05      	ldr	r3, [sp, #20]
 80139fc:	4418      	add	r0, r3
 80139fe:	f010 001f 	ands.w	r0, r0, #31
 8013a02:	f000 808c 	beq.w	8013b1e <_dtoa_r+0x81e>
 8013a06:	f1c0 0220 	rsb	r2, r0, #32
 8013a0a:	2a04      	cmp	r2, #4
 8013a0c:	f340 8085 	ble.w	8013b1a <_dtoa_r+0x81a>
 8013a10:	f1c0 001c 	rsb	r0, r0, #28
 8013a14:	9b04      	ldr	r3, [sp, #16]
 8013a16:	4403      	add	r3, r0
 8013a18:	9304      	str	r3, [sp, #16]
 8013a1a:	9b05      	ldr	r3, [sp, #20]
 8013a1c:	4403      	add	r3, r0
 8013a1e:	4480      	add	r8, r0
 8013a20:	9305      	str	r3, [sp, #20]
 8013a22:	9b04      	ldr	r3, [sp, #16]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	dd05      	ble.n	8013a34 <_dtoa_r+0x734>
 8013a28:	4629      	mov	r1, r5
 8013a2a:	461a      	mov	r2, r3
 8013a2c:	4630      	mov	r0, r6
 8013a2e:	f000 fd39 	bl	80144a4 <__lshift>
 8013a32:	4605      	mov	r5, r0
 8013a34:	9b05      	ldr	r3, [sp, #20]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	dd05      	ble.n	8013a46 <_dtoa_r+0x746>
 8013a3a:	4621      	mov	r1, r4
 8013a3c:	461a      	mov	r2, r3
 8013a3e:	4630      	mov	r0, r6
 8013a40:	f000 fd30 	bl	80144a4 <__lshift>
 8013a44:	4604      	mov	r4, r0
 8013a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d06a      	beq.n	8013b22 <_dtoa_r+0x822>
 8013a4c:	4621      	mov	r1, r4
 8013a4e:	4628      	mov	r0, r5
 8013a50:	f000 fd98 	bl	8014584 <__mcmp>
 8013a54:	2800      	cmp	r0, #0
 8013a56:	da64      	bge.n	8013b22 <_dtoa_r+0x822>
 8013a58:	2300      	movs	r3, #0
 8013a5a:	4629      	mov	r1, r5
 8013a5c:	220a      	movs	r2, #10
 8013a5e:	4630      	mov	r0, r6
 8013a60:	f000 fb70 	bl	8014144 <__multadd>
 8013a64:	9b07      	ldr	r3, [sp, #28]
 8013a66:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013a6a:	4605      	mov	r5, r0
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	f000 8191 	beq.w	8013d94 <_dtoa_r+0xa94>
 8013a72:	4639      	mov	r1, r7
 8013a74:	2300      	movs	r3, #0
 8013a76:	220a      	movs	r2, #10
 8013a78:	4630      	mov	r0, r6
 8013a7a:	f000 fb63 	bl	8014144 <__multadd>
 8013a7e:	f1ba 0f00 	cmp.w	sl, #0
 8013a82:	4607      	mov	r7, r0
 8013a84:	f300 808d 	bgt.w	8013ba2 <_dtoa_r+0x8a2>
 8013a88:	9b06      	ldr	r3, [sp, #24]
 8013a8a:	2b02      	cmp	r3, #2
 8013a8c:	dc50      	bgt.n	8013b30 <_dtoa_r+0x830>
 8013a8e:	e088      	b.n	8013ba2 <_dtoa_r+0x8a2>
 8013a90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013a92:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013a96:	e751      	b.n	801393c <_dtoa_r+0x63c>
 8013a98:	f109 34ff 	add.w	r4, r9, #4294967295
 8013a9c:	42a3      	cmp	r3, r4
 8013a9e:	bfbf      	itttt	lt
 8013aa0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8013aa2:	1ae3      	sublt	r3, r4, r3
 8013aa4:	18d2      	addlt	r2, r2, r3
 8013aa6:	9209      	strlt	r2, [sp, #36]	; 0x24
 8013aa8:	bfb6      	itet	lt
 8013aaa:	4623      	movlt	r3, r4
 8013aac:	1b1c      	subge	r4, r3, r4
 8013aae:	2400      	movlt	r4, #0
 8013ab0:	f1b9 0f00 	cmp.w	r9, #0
 8013ab4:	bfb5      	itete	lt
 8013ab6:	9a04      	ldrlt	r2, [sp, #16]
 8013ab8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8013abc:	eba2 0809 	sublt.w	r8, r2, r9
 8013ac0:	464a      	movge	r2, r9
 8013ac2:	bfb8      	it	lt
 8013ac4:	2200      	movlt	r2, #0
 8013ac6:	e73c      	b.n	8013942 <_dtoa_r+0x642>
 8013ac8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013acc:	9f07      	ldr	r7, [sp, #28]
 8013ace:	461c      	mov	r4, r3
 8013ad0:	e744      	b.n	801395c <_dtoa_r+0x65c>
 8013ad2:	461a      	mov	r2, r3
 8013ad4:	e770      	b.n	80139b8 <_dtoa_r+0x6b8>
 8013ad6:	9b06      	ldr	r3, [sp, #24]
 8013ad8:	2b01      	cmp	r3, #1
 8013ada:	dc18      	bgt.n	8013b0e <_dtoa_r+0x80e>
 8013adc:	9b02      	ldr	r3, [sp, #8]
 8013ade:	b9b3      	cbnz	r3, 8013b0e <_dtoa_r+0x80e>
 8013ae0:	9b03      	ldr	r3, [sp, #12]
 8013ae2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013ae6:	b9a2      	cbnz	r2, 8013b12 <_dtoa_r+0x812>
 8013ae8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013aec:	0d12      	lsrs	r2, r2, #20
 8013aee:	0512      	lsls	r2, r2, #20
 8013af0:	b18a      	cbz	r2, 8013b16 <_dtoa_r+0x816>
 8013af2:	9b04      	ldr	r3, [sp, #16]
 8013af4:	3301      	adds	r3, #1
 8013af6:	9304      	str	r3, [sp, #16]
 8013af8:	9b05      	ldr	r3, [sp, #20]
 8013afa:	3301      	adds	r3, #1
 8013afc:	9305      	str	r3, [sp, #20]
 8013afe:	2301      	movs	r3, #1
 8013b00:	930a      	str	r3, [sp, #40]	; 0x28
 8013b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	f47f af70 	bne.w	80139ea <_dtoa_r+0x6ea>
 8013b0a:	2001      	movs	r0, #1
 8013b0c:	e775      	b.n	80139fa <_dtoa_r+0x6fa>
 8013b0e:	2300      	movs	r3, #0
 8013b10:	e7f6      	b.n	8013b00 <_dtoa_r+0x800>
 8013b12:	9b02      	ldr	r3, [sp, #8]
 8013b14:	e7f4      	b.n	8013b00 <_dtoa_r+0x800>
 8013b16:	920a      	str	r2, [sp, #40]	; 0x28
 8013b18:	e7f3      	b.n	8013b02 <_dtoa_r+0x802>
 8013b1a:	d082      	beq.n	8013a22 <_dtoa_r+0x722>
 8013b1c:	4610      	mov	r0, r2
 8013b1e:	301c      	adds	r0, #28
 8013b20:	e778      	b.n	8013a14 <_dtoa_r+0x714>
 8013b22:	f1b9 0f00 	cmp.w	r9, #0
 8013b26:	dc37      	bgt.n	8013b98 <_dtoa_r+0x898>
 8013b28:	9b06      	ldr	r3, [sp, #24]
 8013b2a:	2b02      	cmp	r3, #2
 8013b2c:	dd34      	ble.n	8013b98 <_dtoa_r+0x898>
 8013b2e:	46ca      	mov	sl, r9
 8013b30:	f1ba 0f00 	cmp.w	sl, #0
 8013b34:	d10d      	bne.n	8013b52 <_dtoa_r+0x852>
 8013b36:	4621      	mov	r1, r4
 8013b38:	4653      	mov	r3, sl
 8013b3a:	2205      	movs	r2, #5
 8013b3c:	4630      	mov	r0, r6
 8013b3e:	f000 fb01 	bl	8014144 <__multadd>
 8013b42:	4601      	mov	r1, r0
 8013b44:	4604      	mov	r4, r0
 8013b46:	4628      	mov	r0, r5
 8013b48:	f000 fd1c 	bl	8014584 <__mcmp>
 8013b4c:	2800      	cmp	r0, #0
 8013b4e:	f73f adeb 	bgt.w	8013728 <_dtoa_r+0x428>
 8013b52:	9b08      	ldr	r3, [sp, #32]
 8013b54:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013b58:	ea6f 0b03 	mvn.w	fp, r3
 8013b5c:	f04f 0900 	mov.w	r9, #0
 8013b60:	4621      	mov	r1, r4
 8013b62:	4630      	mov	r0, r6
 8013b64:	f000 facc 	bl	8014100 <_Bfree>
 8013b68:	2f00      	cmp	r7, #0
 8013b6a:	f43f aea8 	beq.w	80138be <_dtoa_r+0x5be>
 8013b6e:	f1b9 0f00 	cmp.w	r9, #0
 8013b72:	d005      	beq.n	8013b80 <_dtoa_r+0x880>
 8013b74:	45b9      	cmp	r9, r7
 8013b76:	d003      	beq.n	8013b80 <_dtoa_r+0x880>
 8013b78:	4649      	mov	r1, r9
 8013b7a:	4630      	mov	r0, r6
 8013b7c:	f000 fac0 	bl	8014100 <_Bfree>
 8013b80:	4639      	mov	r1, r7
 8013b82:	4630      	mov	r0, r6
 8013b84:	f000 fabc 	bl	8014100 <_Bfree>
 8013b88:	e699      	b.n	80138be <_dtoa_r+0x5be>
 8013b8a:	2400      	movs	r4, #0
 8013b8c:	4627      	mov	r7, r4
 8013b8e:	e7e0      	b.n	8013b52 <_dtoa_r+0x852>
 8013b90:	46bb      	mov	fp, r7
 8013b92:	4604      	mov	r4, r0
 8013b94:	4607      	mov	r7, r0
 8013b96:	e5c7      	b.n	8013728 <_dtoa_r+0x428>
 8013b98:	9b07      	ldr	r3, [sp, #28]
 8013b9a:	46ca      	mov	sl, r9
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	f000 8100 	beq.w	8013da2 <_dtoa_r+0xaa2>
 8013ba2:	f1b8 0f00 	cmp.w	r8, #0
 8013ba6:	dd05      	ble.n	8013bb4 <_dtoa_r+0x8b4>
 8013ba8:	4639      	mov	r1, r7
 8013baa:	4642      	mov	r2, r8
 8013bac:	4630      	mov	r0, r6
 8013bae:	f000 fc79 	bl	80144a4 <__lshift>
 8013bb2:	4607      	mov	r7, r0
 8013bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d05d      	beq.n	8013c76 <_dtoa_r+0x976>
 8013bba:	6879      	ldr	r1, [r7, #4]
 8013bbc:	4630      	mov	r0, r6
 8013bbe:	f000 fa5f 	bl	8014080 <_Balloc>
 8013bc2:	4680      	mov	r8, r0
 8013bc4:	b928      	cbnz	r0, 8013bd2 <_dtoa_r+0x8d2>
 8013bc6:	4b82      	ldr	r3, [pc, #520]	; (8013dd0 <_dtoa_r+0xad0>)
 8013bc8:	4602      	mov	r2, r0
 8013bca:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013bce:	f7ff bbaf 	b.w	8013330 <_dtoa_r+0x30>
 8013bd2:	693a      	ldr	r2, [r7, #16]
 8013bd4:	3202      	adds	r2, #2
 8013bd6:	0092      	lsls	r2, r2, #2
 8013bd8:	f107 010c 	add.w	r1, r7, #12
 8013bdc:	300c      	adds	r0, #12
 8013bde:	f7fe fbd0 	bl	8012382 <memcpy>
 8013be2:	2201      	movs	r2, #1
 8013be4:	4641      	mov	r1, r8
 8013be6:	4630      	mov	r0, r6
 8013be8:	f000 fc5c 	bl	80144a4 <__lshift>
 8013bec:	9b01      	ldr	r3, [sp, #4]
 8013bee:	3301      	adds	r3, #1
 8013bf0:	9304      	str	r3, [sp, #16]
 8013bf2:	9b01      	ldr	r3, [sp, #4]
 8013bf4:	4453      	add	r3, sl
 8013bf6:	9308      	str	r3, [sp, #32]
 8013bf8:	9b02      	ldr	r3, [sp, #8]
 8013bfa:	f003 0301 	and.w	r3, r3, #1
 8013bfe:	46b9      	mov	r9, r7
 8013c00:	9307      	str	r3, [sp, #28]
 8013c02:	4607      	mov	r7, r0
 8013c04:	9b04      	ldr	r3, [sp, #16]
 8013c06:	4621      	mov	r1, r4
 8013c08:	3b01      	subs	r3, #1
 8013c0a:	4628      	mov	r0, r5
 8013c0c:	9302      	str	r3, [sp, #8]
 8013c0e:	f7ff fae9 	bl	80131e4 <quorem>
 8013c12:	4603      	mov	r3, r0
 8013c14:	3330      	adds	r3, #48	; 0x30
 8013c16:	9005      	str	r0, [sp, #20]
 8013c18:	4649      	mov	r1, r9
 8013c1a:	4628      	mov	r0, r5
 8013c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8013c1e:	f000 fcb1 	bl	8014584 <__mcmp>
 8013c22:	463a      	mov	r2, r7
 8013c24:	4682      	mov	sl, r0
 8013c26:	4621      	mov	r1, r4
 8013c28:	4630      	mov	r0, r6
 8013c2a:	f000 fcc7 	bl	80145bc <__mdiff>
 8013c2e:	68c2      	ldr	r2, [r0, #12]
 8013c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c32:	4680      	mov	r8, r0
 8013c34:	bb0a      	cbnz	r2, 8013c7a <_dtoa_r+0x97a>
 8013c36:	4601      	mov	r1, r0
 8013c38:	4628      	mov	r0, r5
 8013c3a:	f000 fca3 	bl	8014584 <__mcmp>
 8013c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c40:	4602      	mov	r2, r0
 8013c42:	4641      	mov	r1, r8
 8013c44:	4630      	mov	r0, r6
 8013c46:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8013c4a:	f000 fa59 	bl	8014100 <_Bfree>
 8013c4e:	9b06      	ldr	r3, [sp, #24]
 8013c50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013c52:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013c56:	ea43 0102 	orr.w	r1, r3, r2
 8013c5a:	9b07      	ldr	r3, [sp, #28]
 8013c5c:	430b      	orrs	r3, r1
 8013c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c60:	d10d      	bne.n	8013c7e <_dtoa_r+0x97e>
 8013c62:	2b39      	cmp	r3, #57	; 0x39
 8013c64:	d029      	beq.n	8013cba <_dtoa_r+0x9ba>
 8013c66:	f1ba 0f00 	cmp.w	sl, #0
 8013c6a:	dd01      	ble.n	8013c70 <_dtoa_r+0x970>
 8013c6c:	9b05      	ldr	r3, [sp, #20]
 8013c6e:	3331      	adds	r3, #49	; 0x31
 8013c70:	9a02      	ldr	r2, [sp, #8]
 8013c72:	7013      	strb	r3, [r2, #0]
 8013c74:	e774      	b.n	8013b60 <_dtoa_r+0x860>
 8013c76:	4638      	mov	r0, r7
 8013c78:	e7b8      	b.n	8013bec <_dtoa_r+0x8ec>
 8013c7a:	2201      	movs	r2, #1
 8013c7c:	e7e1      	b.n	8013c42 <_dtoa_r+0x942>
 8013c7e:	f1ba 0f00 	cmp.w	sl, #0
 8013c82:	db06      	blt.n	8013c92 <_dtoa_r+0x992>
 8013c84:	9906      	ldr	r1, [sp, #24]
 8013c86:	ea41 0a0a 	orr.w	sl, r1, sl
 8013c8a:	9907      	ldr	r1, [sp, #28]
 8013c8c:	ea5a 0101 	orrs.w	r1, sl, r1
 8013c90:	d120      	bne.n	8013cd4 <_dtoa_r+0x9d4>
 8013c92:	2a00      	cmp	r2, #0
 8013c94:	ddec      	ble.n	8013c70 <_dtoa_r+0x970>
 8013c96:	4629      	mov	r1, r5
 8013c98:	2201      	movs	r2, #1
 8013c9a:	4630      	mov	r0, r6
 8013c9c:	9304      	str	r3, [sp, #16]
 8013c9e:	f000 fc01 	bl	80144a4 <__lshift>
 8013ca2:	4621      	mov	r1, r4
 8013ca4:	4605      	mov	r5, r0
 8013ca6:	f000 fc6d 	bl	8014584 <__mcmp>
 8013caa:	2800      	cmp	r0, #0
 8013cac:	9b04      	ldr	r3, [sp, #16]
 8013cae:	dc02      	bgt.n	8013cb6 <_dtoa_r+0x9b6>
 8013cb0:	d1de      	bne.n	8013c70 <_dtoa_r+0x970>
 8013cb2:	07da      	lsls	r2, r3, #31
 8013cb4:	d5dc      	bpl.n	8013c70 <_dtoa_r+0x970>
 8013cb6:	2b39      	cmp	r3, #57	; 0x39
 8013cb8:	d1d8      	bne.n	8013c6c <_dtoa_r+0x96c>
 8013cba:	9a02      	ldr	r2, [sp, #8]
 8013cbc:	2339      	movs	r3, #57	; 0x39
 8013cbe:	7013      	strb	r3, [r2, #0]
 8013cc0:	4643      	mov	r3, r8
 8013cc2:	4698      	mov	r8, r3
 8013cc4:	3b01      	subs	r3, #1
 8013cc6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8013cca:	2a39      	cmp	r2, #57	; 0x39
 8013ccc:	d051      	beq.n	8013d72 <_dtoa_r+0xa72>
 8013cce:	3201      	adds	r2, #1
 8013cd0:	701a      	strb	r2, [r3, #0]
 8013cd2:	e745      	b.n	8013b60 <_dtoa_r+0x860>
 8013cd4:	2a00      	cmp	r2, #0
 8013cd6:	dd03      	ble.n	8013ce0 <_dtoa_r+0x9e0>
 8013cd8:	2b39      	cmp	r3, #57	; 0x39
 8013cda:	d0ee      	beq.n	8013cba <_dtoa_r+0x9ba>
 8013cdc:	3301      	adds	r3, #1
 8013cde:	e7c7      	b.n	8013c70 <_dtoa_r+0x970>
 8013ce0:	9a04      	ldr	r2, [sp, #16]
 8013ce2:	9908      	ldr	r1, [sp, #32]
 8013ce4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013ce8:	428a      	cmp	r2, r1
 8013cea:	d02b      	beq.n	8013d44 <_dtoa_r+0xa44>
 8013cec:	4629      	mov	r1, r5
 8013cee:	2300      	movs	r3, #0
 8013cf0:	220a      	movs	r2, #10
 8013cf2:	4630      	mov	r0, r6
 8013cf4:	f000 fa26 	bl	8014144 <__multadd>
 8013cf8:	45b9      	cmp	r9, r7
 8013cfa:	4605      	mov	r5, r0
 8013cfc:	f04f 0300 	mov.w	r3, #0
 8013d00:	f04f 020a 	mov.w	r2, #10
 8013d04:	4649      	mov	r1, r9
 8013d06:	4630      	mov	r0, r6
 8013d08:	d107      	bne.n	8013d1a <_dtoa_r+0xa1a>
 8013d0a:	f000 fa1b 	bl	8014144 <__multadd>
 8013d0e:	4681      	mov	r9, r0
 8013d10:	4607      	mov	r7, r0
 8013d12:	9b04      	ldr	r3, [sp, #16]
 8013d14:	3301      	adds	r3, #1
 8013d16:	9304      	str	r3, [sp, #16]
 8013d18:	e774      	b.n	8013c04 <_dtoa_r+0x904>
 8013d1a:	f000 fa13 	bl	8014144 <__multadd>
 8013d1e:	4639      	mov	r1, r7
 8013d20:	4681      	mov	r9, r0
 8013d22:	2300      	movs	r3, #0
 8013d24:	220a      	movs	r2, #10
 8013d26:	4630      	mov	r0, r6
 8013d28:	f000 fa0c 	bl	8014144 <__multadd>
 8013d2c:	4607      	mov	r7, r0
 8013d2e:	e7f0      	b.n	8013d12 <_dtoa_r+0xa12>
 8013d30:	f1ba 0f00 	cmp.w	sl, #0
 8013d34:	9a01      	ldr	r2, [sp, #4]
 8013d36:	bfcc      	ite	gt
 8013d38:	46d0      	movgt	r8, sl
 8013d3a:	f04f 0801 	movle.w	r8, #1
 8013d3e:	4490      	add	r8, r2
 8013d40:	f04f 0900 	mov.w	r9, #0
 8013d44:	4629      	mov	r1, r5
 8013d46:	2201      	movs	r2, #1
 8013d48:	4630      	mov	r0, r6
 8013d4a:	9302      	str	r3, [sp, #8]
 8013d4c:	f000 fbaa 	bl	80144a4 <__lshift>
 8013d50:	4621      	mov	r1, r4
 8013d52:	4605      	mov	r5, r0
 8013d54:	f000 fc16 	bl	8014584 <__mcmp>
 8013d58:	2800      	cmp	r0, #0
 8013d5a:	dcb1      	bgt.n	8013cc0 <_dtoa_r+0x9c0>
 8013d5c:	d102      	bne.n	8013d64 <_dtoa_r+0xa64>
 8013d5e:	9b02      	ldr	r3, [sp, #8]
 8013d60:	07db      	lsls	r3, r3, #31
 8013d62:	d4ad      	bmi.n	8013cc0 <_dtoa_r+0x9c0>
 8013d64:	4643      	mov	r3, r8
 8013d66:	4698      	mov	r8, r3
 8013d68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013d6c:	2a30      	cmp	r2, #48	; 0x30
 8013d6e:	d0fa      	beq.n	8013d66 <_dtoa_r+0xa66>
 8013d70:	e6f6      	b.n	8013b60 <_dtoa_r+0x860>
 8013d72:	9a01      	ldr	r2, [sp, #4]
 8013d74:	429a      	cmp	r2, r3
 8013d76:	d1a4      	bne.n	8013cc2 <_dtoa_r+0x9c2>
 8013d78:	f10b 0b01 	add.w	fp, fp, #1
 8013d7c:	2331      	movs	r3, #49	; 0x31
 8013d7e:	e778      	b.n	8013c72 <_dtoa_r+0x972>
 8013d80:	4b14      	ldr	r3, [pc, #80]	; (8013dd4 <_dtoa_r+0xad4>)
 8013d82:	f7ff bb27 	b.w	80133d4 <_dtoa_r+0xd4>
 8013d86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	f47f ab03 	bne.w	8013394 <_dtoa_r+0x94>
 8013d8e:	4b12      	ldr	r3, [pc, #72]	; (8013dd8 <_dtoa_r+0xad8>)
 8013d90:	f7ff bb20 	b.w	80133d4 <_dtoa_r+0xd4>
 8013d94:	f1ba 0f00 	cmp.w	sl, #0
 8013d98:	dc03      	bgt.n	8013da2 <_dtoa_r+0xaa2>
 8013d9a:	9b06      	ldr	r3, [sp, #24]
 8013d9c:	2b02      	cmp	r3, #2
 8013d9e:	f73f aec7 	bgt.w	8013b30 <_dtoa_r+0x830>
 8013da2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013da6:	4621      	mov	r1, r4
 8013da8:	4628      	mov	r0, r5
 8013daa:	f7ff fa1b 	bl	80131e4 <quorem>
 8013dae:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013db2:	f808 3b01 	strb.w	r3, [r8], #1
 8013db6:	9a01      	ldr	r2, [sp, #4]
 8013db8:	eba8 0202 	sub.w	r2, r8, r2
 8013dbc:	4592      	cmp	sl, r2
 8013dbe:	ddb7      	ble.n	8013d30 <_dtoa_r+0xa30>
 8013dc0:	4629      	mov	r1, r5
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	220a      	movs	r2, #10
 8013dc6:	4630      	mov	r0, r6
 8013dc8:	f000 f9bc 	bl	8014144 <__multadd>
 8013dcc:	4605      	mov	r5, r0
 8013dce:	e7ea      	b.n	8013da6 <_dtoa_r+0xaa6>
 8013dd0:	0801585f 	.word	0x0801585f
 8013dd4:	080157bc 	.word	0x080157bc
 8013dd8:	080157e0 	.word	0x080157e0

08013ddc <__sflush_r>:
 8013ddc:	898a      	ldrh	r2, [r1, #12]
 8013dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013de2:	4605      	mov	r5, r0
 8013de4:	0710      	lsls	r0, r2, #28
 8013de6:	460c      	mov	r4, r1
 8013de8:	d458      	bmi.n	8013e9c <__sflush_r+0xc0>
 8013dea:	684b      	ldr	r3, [r1, #4]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	dc05      	bgt.n	8013dfc <__sflush_r+0x20>
 8013df0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	dc02      	bgt.n	8013dfc <__sflush_r+0x20>
 8013df6:	2000      	movs	r0, #0
 8013df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013dfe:	2e00      	cmp	r6, #0
 8013e00:	d0f9      	beq.n	8013df6 <__sflush_r+0x1a>
 8013e02:	2300      	movs	r3, #0
 8013e04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013e08:	682f      	ldr	r7, [r5, #0]
 8013e0a:	602b      	str	r3, [r5, #0]
 8013e0c:	d032      	beq.n	8013e74 <__sflush_r+0x98>
 8013e0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013e10:	89a3      	ldrh	r3, [r4, #12]
 8013e12:	075a      	lsls	r2, r3, #29
 8013e14:	d505      	bpl.n	8013e22 <__sflush_r+0x46>
 8013e16:	6863      	ldr	r3, [r4, #4]
 8013e18:	1ac0      	subs	r0, r0, r3
 8013e1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013e1c:	b10b      	cbz	r3, 8013e22 <__sflush_r+0x46>
 8013e1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013e20:	1ac0      	subs	r0, r0, r3
 8013e22:	2300      	movs	r3, #0
 8013e24:	4602      	mov	r2, r0
 8013e26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013e28:	6a21      	ldr	r1, [r4, #32]
 8013e2a:	4628      	mov	r0, r5
 8013e2c:	47b0      	blx	r6
 8013e2e:	1c43      	adds	r3, r0, #1
 8013e30:	89a3      	ldrh	r3, [r4, #12]
 8013e32:	d106      	bne.n	8013e42 <__sflush_r+0x66>
 8013e34:	6829      	ldr	r1, [r5, #0]
 8013e36:	291d      	cmp	r1, #29
 8013e38:	d82c      	bhi.n	8013e94 <__sflush_r+0xb8>
 8013e3a:	4a2a      	ldr	r2, [pc, #168]	; (8013ee4 <__sflush_r+0x108>)
 8013e3c:	40ca      	lsrs	r2, r1
 8013e3e:	07d6      	lsls	r6, r2, #31
 8013e40:	d528      	bpl.n	8013e94 <__sflush_r+0xb8>
 8013e42:	2200      	movs	r2, #0
 8013e44:	6062      	str	r2, [r4, #4]
 8013e46:	04d9      	lsls	r1, r3, #19
 8013e48:	6922      	ldr	r2, [r4, #16]
 8013e4a:	6022      	str	r2, [r4, #0]
 8013e4c:	d504      	bpl.n	8013e58 <__sflush_r+0x7c>
 8013e4e:	1c42      	adds	r2, r0, #1
 8013e50:	d101      	bne.n	8013e56 <__sflush_r+0x7a>
 8013e52:	682b      	ldr	r3, [r5, #0]
 8013e54:	b903      	cbnz	r3, 8013e58 <__sflush_r+0x7c>
 8013e56:	6560      	str	r0, [r4, #84]	; 0x54
 8013e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013e5a:	602f      	str	r7, [r5, #0]
 8013e5c:	2900      	cmp	r1, #0
 8013e5e:	d0ca      	beq.n	8013df6 <__sflush_r+0x1a>
 8013e60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013e64:	4299      	cmp	r1, r3
 8013e66:	d002      	beq.n	8013e6e <__sflush_r+0x92>
 8013e68:	4628      	mov	r0, r5
 8013e6a:	f000 fca3 	bl	80147b4 <_free_r>
 8013e6e:	2000      	movs	r0, #0
 8013e70:	6360      	str	r0, [r4, #52]	; 0x34
 8013e72:	e7c1      	b.n	8013df8 <__sflush_r+0x1c>
 8013e74:	6a21      	ldr	r1, [r4, #32]
 8013e76:	2301      	movs	r3, #1
 8013e78:	4628      	mov	r0, r5
 8013e7a:	47b0      	blx	r6
 8013e7c:	1c41      	adds	r1, r0, #1
 8013e7e:	d1c7      	bne.n	8013e10 <__sflush_r+0x34>
 8013e80:	682b      	ldr	r3, [r5, #0]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d0c4      	beq.n	8013e10 <__sflush_r+0x34>
 8013e86:	2b1d      	cmp	r3, #29
 8013e88:	d001      	beq.n	8013e8e <__sflush_r+0xb2>
 8013e8a:	2b16      	cmp	r3, #22
 8013e8c:	d101      	bne.n	8013e92 <__sflush_r+0xb6>
 8013e8e:	602f      	str	r7, [r5, #0]
 8013e90:	e7b1      	b.n	8013df6 <__sflush_r+0x1a>
 8013e92:	89a3      	ldrh	r3, [r4, #12]
 8013e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e98:	81a3      	strh	r3, [r4, #12]
 8013e9a:	e7ad      	b.n	8013df8 <__sflush_r+0x1c>
 8013e9c:	690f      	ldr	r7, [r1, #16]
 8013e9e:	2f00      	cmp	r7, #0
 8013ea0:	d0a9      	beq.n	8013df6 <__sflush_r+0x1a>
 8013ea2:	0793      	lsls	r3, r2, #30
 8013ea4:	680e      	ldr	r6, [r1, #0]
 8013ea6:	bf08      	it	eq
 8013ea8:	694b      	ldreq	r3, [r1, #20]
 8013eaa:	600f      	str	r7, [r1, #0]
 8013eac:	bf18      	it	ne
 8013eae:	2300      	movne	r3, #0
 8013eb0:	eba6 0807 	sub.w	r8, r6, r7
 8013eb4:	608b      	str	r3, [r1, #8]
 8013eb6:	f1b8 0f00 	cmp.w	r8, #0
 8013eba:	dd9c      	ble.n	8013df6 <__sflush_r+0x1a>
 8013ebc:	6a21      	ldr	r1, [r4, #32]
 8013ebe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013ec0:	4643      	mov	r3, r8
 8013ec2:	463a      	mov	r2, r7
 8013ec4:	4628      	mov	r0, r5
 8013ec6:	47b0      	blx	r6
 8013ec8:	2800      	cmp	r0, #0
 8013eca:	dc06      	bgt.n	8013eda <__sflush_r+0xfe>
 8013ecc:	89a3      	ldrh	r3, [r4, #12]
 8013ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ed2:	81a3      	strh	r3, [r4, #12]
 8013ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8013ed8:	e78e      	b.n	8013df8 <__sflush_r+0x1c>
 8013eda:	4407      	add	r7, r0
 8013edc:	eba8 0800 	sub.w	r8, r8, r0
 8013ee0:	e7e9      	b.n	8013eb6 <__sflush_r+0xda>
 8013ee2:	bf00      	nop
 8013ee4:	20400001 	.word	0x20400001

08013ee8 <_fflush_r>:
 8013ee8:	b538      	push	{r3, r4, r5, lr}
 8013eea:	690b      	ldr	r3, [r1, #16]
 8013eec:	4605      	mov	r5, r0
 8013eee:	460c      	mov	r4, r1
 8013ef0:	b913      	cbnz	r3, 8013ef8 <_fflush_r+0x10>
 8013ef2:	2500      	movs	r5, #0
 8013ef4:	4628      	mov	r0, r5
 8013ef6:	bd38      	pop	{r3, r4, r5, pc}
 8013ef8:	b118      	cbz	r0, 8013f02 <_fflush_r+0x1a>
 8013efa:	6983      	ldr	r3, [r0, #24]
 8013efc:	b90b      	cbnz	r3, 8013f02 <_fflush_r+0x1a>
 8013efe:	f7fe f97b 	bl	80121f8 <__sinit>
 8013f02:	4b14      	ldr	r3, [pc, #80]	; (8013f54 <_fflush_r+0x6c>)
 8013f04:	429c      	cmp	r4, r3
 8013f06:	d11b      	bne.n	8013f40 <_fflush_r+0x58>
 8013f08:	686c      	ldr	r4, [r5, #4]
 8013f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d0ef      	beq.n	8013ef2 <_fflush_r+0xa>
 8013f12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013f14:	07d0      	lsls	r0, r2, #31
 8013f16:	d404      	bmi.n	8013f22 <_fflush_r+0x3a>
 8013f18:	0599      	lsls	r1, r3, #22
 8013f1a:	d402      	bmi.n	8013f22 <_fflush_r+0x3a>
 8013f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f1e:	f7fe fa2e 	bl	801237e <__retarget_lock_acquire_recursive>
 8013f22:	4628      	mov	r0, r5
 8013f24:	4621      	mov	r1, r4
 8013f26:	f7ff ff59 	bl	8013ddc <__sflush_r>
 8013f2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013f2c:	07da      	lsls	r2, r3, #31
 8013f2e:	4605      	mov	r5, r0
 8013f30:	d4e0      	bmi.n	8013ef4 <_fflush_r+0xc>
 8013f32:	89a3      	ldrh	r3, [r4, #12]
 8013f34:	059b      	lsls	r3, r3, #22
 8013f36:	d4dd      	bmi.n	8013ef4 <_fflush_r+0xc>
 8013f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f3a:	f7fe fa21 	bl	8012380 <__retarget_lock_release_recursive>
 8013f3e:	e7d9      	b.n	8013ef4 <_fflush_r+0xc>
 8013f40:	4b05      	ldr	r3, [pc, #20]	; (8013f58 <_fflush_r+0x70>)
 8013f42:	429c      	cmp	r4, r3
 8013f44:	d101      	bne.n	8013f4a <_fflush_r+0x62>
 8013f46:	68ac      	ldr	r4, [r5, #8]
 8013f48:	e7df      	b.n	8013f0a <_fflush_r+0x22>
 8013f4a:	4b04      	ldr	r3, [pc, #16]	; (8013f5c <_fflush_r+0x74>)
 8013f4c:	429c      	cmp	r4, r3
 8013f4e:	bf08      	it	eq
 8013f50:	68ec      	ldreq	r4, [r5, #12]
 8013f52:	e7da      	b.n	8013f0a <_fflush_r+0x22>
 8013f54:	08015768 	.word	0x08015768
 8013f58:	08015788 	.word	0x08015788
 8013f5c:	08015748 	.word	0x08015748

08013f60 <_localeconv_r>:
 8013f60:	4800      	ldr	r0, [pc, #0]	; (8013f64 <_localeconv_r+0x4>)
 8013f62:	4770      	bx	lr
 8013f64:	2400026c 	.word	0x2400026c

08013f68 <_lseek_r>:
 8013f68:	b538      	push	{r3, r4, r5, lr}
 8013f6a:	4d07      	ldr	r5, [pc, #28]	; (8013f88 <_lseek_r+0x20>)
 8013f6c:	4604      	mov	r4, r0
 8013f6e:	4608      	mov	r0, r1
 8013f70:	4611      	mov	r1, r2
 8013f72:	2200      	movs	r2, #0
 8013f74:	602a      	str	r2, [r5, #0]
 8013f76:	461a      	mov	r2, r3
 8013f78:	f7ed fe48 	bl	8001c0c <_lseek>
 8013f7c:	1c43      	adds	r3, r0, #1
 8013f7e:	d102      	bne.n	8013f86 <_lseek_r+0x1e>
 8013f80:	682b      	ldr	r3, [r5, #0]
 8013f82:	b103      	cbz	r3, 8013f86 <_lseek_r+0x1e>
 8013f84:	6023      	str	r3, [r4, #0]
 8013f86:	bd38      	pop	{r3, r4, r5, pc}
 8013f88:	2400d284 	.word	0x2400d284

08013f8c <__swhatbuf_r>:
 8013f8c:	b570      	push	{r4, r5, r6, lr}
 8013f8e:	460e      	mov	r6, r1
 8013f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f94:	2900      	cmp	r1, #0
 8013f96:	b096      	sub	sp, #88	; 0x58
 8013f98:	4614      	mov	r4, r2
 8013f9a:	461d      	mov	r5, r3
 8013f9c:	da08      	bge.n	8013fb0 <__swhatbuf_r+0x24>
 8013f9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	602a      	str	r2, [r5, #0]
 8013fa6:	061a      	lsls	r2, r3, #24
 8013fa8:	d410      	bmi.n	8013fcc <__swhatbuf_r+0x40>
 8013faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013fae:	e00e      	b.n	8013fce <__swhatbuf_r+0x42>
 8013fb0:	466a      	mov	r2, sp
 8013fb2:	f000 fe2f 	bl	8014c14 <_fstat_r>
 8013fb6:	2800      	cmp	r0, #0
 8013fb8:	dbf1      	blt.n	8013f9e <__swhatbuf_r+0x12>
 8013fba:	9a01      	ldr	r2, [sp, #4]
 8013fbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013fc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013fc4:	425a      	negs	r2, r3
 8013fc6:	415a      	adcs	r2, r3
 8013fc8:	602a      	str	r2, [r5, #0]
 8013fca:	e7ee      	b.n	8013faa <__swhatbuf_r+0x1e>
 8013fcc:	2340      	movs	r3, #64	; 0x40
 8013fce:	2000      	movs	r0, #0
 8013fd0:	6023      	str	r3, [r4, #0]
 8013fd2:	b016      	add	sp, #88	; 0x58
 8013fd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08013fd8 <__smakebuf_r>:
 8013fd8:	898b      	ldrh	r3, [r1, #12]
 8013fda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013fdc:	079d      	lsls	r5, r3, #30
 8013fde:	4606      	mov	r6, r0
 8013fe0:	460c      	mov	r4, r1
 8013fe2:	d507      	bpl.n	8013ff4 <__smakebuf_r+0x1c>
 8013fe4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013fe8:	6023      	str	r3, [r4, #0]
 8013fea:	6123      	str	r3, [r4, #16]
 8013fec:	2301      	movs	r3, #1
 8013fee:	6163      	str	r3, [r4, #20]
 8013ff0:	b002      	add	sp, #8
 8013ff2:	bd70      	pop	{r4, r5, r6, pc}
 8013ff4:	ab01      	add	r3, sp, #4
 8013ff6:	466a      	mov	r2, sp
 8013ff8:	f7ff ffc8 	bl	8013f8c <__swhatbuf_r>
 8013ffc:	9900      	ldr	r1, [sp, #0]
 8013ffe:	4605      	mov	r5, r0
 8014000:	4630      	mov	r0, r6
 8014002:	f7fe f9f5 	bl	80123f0 <_malloc_r>
 8014006:	b948      	cbnz	r0, 801401c <__smakebuf_r+0x44>
 8014008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801400c:	059a      	lsls	r2, r3, #22
 801400e:	d4ef      	bmi.n	8013ff0 <__smakebuf_r+0x18>
 8014010:	f023 0303 	bic.w	r3, r3, #3
 8014014:	f043 0302 	orr.w	r3, r3, #2
 8014018:	81a3      	strh	r3, [r4, #12]
 801401a:	e7e3      	b.n	8013fe4 <__smakebuf_r+0xc>
 801401c:	4b0d      	ldr	r3, [pc, #52]	; (8014054 <__smakebuf_r+0x7c>)
 801401e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014020:	89a3      	ldrh	r3, [r4, #12]
 8014022:	6020      	str	r0, [r4, #0]
 8014024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014028:	81a3      	strh	r3, [r4, #12]
 801402a:	9b00      	ldr	r3, [sp, #0]
 801402c:	6163      	str	r3, [r4, #20]
 801402e:	9b01      	ldr	r3, [sp, #4]
 8014030:	6120      	str	r0, [r4, #16]
 8014032:	b15b      	cbz	r3, 801404c <__smakebuf_r+0x74>
 8014034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014038:	4630      	mov	r0, r6
 801403a:	f000 fdfd 	bl	8014c38 <_isatty_r>
 801403e:	b128      	cbz	r0, 801404c <__smakebuf_r+0x74>
 8014040:	89a3      	ldrh	r3, [r4, #12]
 8014042:	f023 0303 	bic.w	r3, r3, #3
 8014046:	f043 0301 	orr.w	r3, r3, #1
 801404a:	81a3      	strh	r3, [r4, #12]
 801404c:	89a0      	ldrh	r0, [r4, #12]
 801404e:	4305      	orrs	r5, r0
 8014050:	81a5      	strh	r5, [r4, #12]
 8014052:	e7cd      	b.n	8013ff0 <__smakebuf_r+0x18>
 8014054:	08012191 	.word	0x08012191

08014058 <malloc>:
 8014058:	4b02      	ldr	r3, [pc, #8]	; (8014064 <malloc+0xc>)
 801405a:	4601      	mov	r1, r0
 801405c:	6818      	ldr	r0, [r3, #0]
 801405e:	f7fe b9c7 	b.w	80123f0 <_malloc_r>
 8014062:	bf00      	nop
 8014064:	24000118 	.word	0x24000118

08014068 <__malloc_lock>:
 8014068:	4801      	ldr	r0, [pc, #4]	; (8014070 <__malloc_lock+0x8>)
 801406a:	f7fe b988 	b.w	801237e <__retarget_lock_acquire_recursive>
 801406e:	bf00      	nop
 8014070:	2400d279 	.word	0x2400d279

08014074 <__malloc_unlock>:
 8014074:	4801      	ldr	r0, [pc, #4]	; (801407c <__malloc_unlock+0x8>)
 8014076:	f7fe b983 	b.w	8012380 <__retarget_lock_release_recursive>
 801407a:	bf00      	nop
 801407c:	2400d279 	.word	0x2400d279

08014080 <_Balloc>:
 8014080:	b570      	push	{r4, r5, r6, lr}
 8014082:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014084:	4604      	mov	r4, r0
 8014086:	460d      	mov	r5, r1
 8014088:	b976      	cbnz	r6, 80140a8 <_Balloc+0x28>
 801408a:	2010      	movs	r0, #16
 801408c:	f7ff ffe4 	bl	8014058 <malloc>
 8014090:	4602      	mov	r2, r0
 8014092:	6260      	str	r0, [r4, #36]	; 0x24
 8014094:	b920      	cbnz	r0, 80140a0 <_Balloc+0x20>
 8014096:	4b18      	ldr	r3, [pc, #96]	; (80140f8 <_Balloc+0x78>)
 8014098:	4818      	ldr	r0, [pc, #96]	; (80140fc <_Balloc+0x7c>)
 801409a:	2166      	movs	r1, #102	; 0x66
 801409c:	f000 fd8a 	bl	8014bb4 <__assert_func>
 80140a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80140a4:	6006      	str	r6, [r0, #0]
 80140a6:	60c6      	str	r6, [r0, #12]
 80140a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80140aa:	68f3      	ldr	r3, [r6, #12]
 80140ac:	b183      	cbz	r3, 80140d0 <_Balloc+0x50>
 80140ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80140b0:	68db      	ldr	r3, [r3, #12]
 80140b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80140b6:	b9b8      	cbnz	r0, 80140e8 <_Balloc+0x68>
 80140b8:	2101      	movs	r1, #1
 80140ba:	fa01 f605 	lsl.w	r6, r1, r5
 80140be:	1d72      	adds	r2, r6, #5
 80140c0:	0092      	lsls	r2, r2, #2
 80140c2:	4620      	mov	r0, r4
 80140c4:	f000 fb60 	bl	8014788 <_calloc_r>
 80140c8:	b160      	cbz	r0, 80140e4 <_Balloc+0x64>
 80140ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80140ce:	e00e      	b.n	80140ee <_Balloc+0x6e>
 80140d0:	2221      	movs	r2, #33	; 0x21
 80140d2:	2104      	movs	r1, #4
 80140d4:	4620      	mov	r0, r4
 80140d6:	f000 fb57 	bl	8014788 <_calloc_r>
 80140da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80140dc:	60f0      	str	r0, [r6, #12]
 80140de:	68db      	ldr	r3, [r3, #12]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d1e4      	bne.n	80140ae <_Balloc+0x2e>
 80140e4:	2000      	movs	r0, #0
 80140e6:	bd70      	pop	{r4, r5, r6, pc}
 80140e8:	6802      	ldr	r2, [r0, #0]
 80140ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80140ee:	2300      	movs	r3, #0
 80140f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80140f4:	e7f7      	b.n	80140e6 <_Balloc+0x66>
 80140f6:	bf00      	nop
 80140f8:	080157ed 	.word	0x080157ed
 80140fc:	08015870 	.word	0x08015870

08014100 <_Bfree>:
 8014100:	b570      	push	{r4, r5, r6, lr}
 8014102:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014104:	4605      	mov	r5, r0
 8014106:	460c      	mov	r4, r1
 8014108:	b976      	cbnz	r6, 8014128 <_Bfree+0x28>
 801410a:	2010      	movs	r0, #16
 801410c:	f7ff ffa4 	bl	8014058 <malloc>
 8014110:	4602      	mov	r2, r0
 8014112:	6268      	str	r0, [r5, #36]	; 0x24
 8014114:	b920      	cbnz	r0, 8014120 <_Bfree+0x20>
 8014116:	4b09      	ldr	r3, [pc, #36]	; (801413c <_Bfree+0x3c>)
 8014118:	4809      	ldr	r0, [pc, #36]	; (8014140 <_Bfree+0x40>)
 801411a:	218a      	movs	r1, #138	; 0x8a
 801411c:	f000 fd4a 	bl	8014bb4 <__assert_func>
 8014120:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014124:	6006      	str	r6, [r0, #0]
 8014126:	60c6      	str	r6, [r0, #12]
 8014128:	b13c      	cbz	r4, 801413a <_Bfree+0x3a>
 801412a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801412c:	6862      	ldr	r2, [r4, #4]
 801412e:	68db      	ldr	r3, [r3, #12]
 8014130:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014134:	6021      	str	r1, [r4, #0]
 8014136:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801413a:	bd70      	pop	{r4, r5, r6, pc}
 801413c:	080157ed 	.word	0x080157ed
 8014140:	08015870 	.word	0x08015870

08014144 <__multadd>:
 8014144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014148:	690d      	ldr	r5, [r1, #16]
 801414a:	4607      	mov	r7, r0
 801414c:	460c      	mov	r4, r1
 801414e:	461e      	mov	r6, r3
 8014150:	f101 0c14 	add.w	ip, r1, #20
 8014154:	2000      	movs	r0, #0
 8014156:	f8dc 3000 	ldr.w	r3, [ip]
 801415a:	b299      	uxth	r1, r3
 801415c:	fb02 6101 	mla	r1, r2, r1, r6
 8014160:	0c1e      	lsrs	r6, r3, #16
 8014162:	0c0b      	lsrs	r3, r1, #16
 8014164:	fb02 3306 	mla	r3, r2, r6, r3
 8014168:	b289      	uxth	r1, r1
 801416a:	3001      	adds	r0, #1
 801416c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014170:	4285      	cmp	r5, r0
 8014172:	f84c 1b04 	str.w	r1, [ip], #4
 8014176:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801417a:	dcec      	bgt.n	8014156 <__multadd+0x12>
 801417c:	b30e      	cbz	r6, 80141c2 <__multadd+0x7e>
 801417e:	68a3      	ldr	r3, [r4, #8]
 8014180:	42ab      	cmp	r3, r5
 8014182:	dc19      	bgt.n	80141b8 <__multadd+0x74>
 8014184:	6861      	ldr	r1, [r4, #4]
 8014186:	4638      	mov	r0, r7
 8014188:	3101      	adds	r1, #1
 801418a:	f7ff ff79 	bl	8014080 <_Balloc>
 801418e:	4680      	mov	r8, r0
 8014190:	b928      	cbnz	r0, 801419e <__multadd+0x5a>
 8014192:	4602      	mov	r2, r0
 8014194:	4b0c      	ldr	r3, [pc, #48]	; (80141c8 <__multadd+0x84>)
 8014196:	480d      	ldr	r0, [pc, #52]	; (80141cc <__multadd+0x88>)
 8014198:	21b5      	movs	r1, #181	; 0xb5
 801419a:	f000 fd0b 	bl	8014bb4 <__assert_func>
 801419e:	6922      	ldr	r2, [r4, #16]
 80141a0:	3202      	adds	r2, #2
 80141a2:	f104 010c 	add.w	r1, r4, #12
 80141a6:	0092      	lsls	r2, r2, #2
 80141a8:	300c      	adds	r0, #12
 80141aa:	f7fe f8ea 	bl	8012382 <memcpy>
 80141ae:	4621      	mov	r1, r4
 80141b0:	4638      	mov	r0, r7
 80141b2:	f7ff ffa5 	bl	8014100 <_Bfree>
 80141b6:	4644      	mov	r4, r8
 80141b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80141bc:	3501      	adds	r5, #1
 80141be:	615e      	str	r6, [r3, #20]
 80141c0:	6125      	str	r5, [r4, #16]
 80141c2:	4620      	mov	r0, r4
 80141c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141c8:	0801585f 	.word	0x0801585f
 80141cc:	08015870 	.word	0x08015870

080141d0 <__hi0bits>:
 80141d0:	0c03      	lsrs	r3, r0, #16
 80141d2:	041b      	lsls	r3, r3, #16
 80141d4:	b9d3      	cbnz	r3, 801420c <__hi0bits+0x3c>
 80141d6:	0400      	lsls	r0, r0, #16
 80141d8:	2310      	movs	r3, #16
 80141da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80141de:	bf04      	itt	eq
 80141e0:	0200      	lsleq	r0, r0, #8
 80141e2:	3308      	addeq	r3, #8
 80141e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80141e8:	bf04      	itt	eq
 80141ea:	0100      	lsleq	r0, r0, #4
 80141ec:	3304      	addeq	r3, #4
 80141ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80141f2:	bf04      	itt	eq
 80141f4:	0080      	lsleq	r0, r0, #2
 80141f6:	3302      	addeq	r3, #2
 80141f8:	2800      	cmp	r0, #0
 80141fa:	db05      	blt.n	8014208 <__hi0bits+0x38>
 80141fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014200:	f103 0301 	add.w	r3, r3, #1
 8014204:	bf08      	it	eq
 8014206:	2320      	moveq	r3, #32
 8014208:	4618      	mov	r0, r3
 801420a:	4770      	bx	lr
 801420c:	2300      	movs	r3, #0
 801420e:	e7e4      	b.n	80141da <__hi0bits+0xa>

08014210 <__lo0bits>:
 8014210:	6803      	ldr	r3, [r0, #0]
 8014212:	f013 0207 	ands.w	r2, r3, #7
 8014216:	4601      	mov	r1, r0
 8014218:	d00b      	beq.n	8014232 <__lo0bits+0x22>
 801421a:	07da      	lsls	r2, r3, #31
 801421c:	d423      	bmi.n	8014266 <__lo0bits+0x56>
 801421e:	0798      	lsls	r0, r3, #30
 8014220:	bf49      	itett	mi
 8014222:	085b      	lsrmi	r3, r3, #1
 8014224:	089b      	lsrpl	r3, r3, #2
 8014226:	2001      	movmi	r0, #1
 8014228:	600b      	strmi	r3, [r1, #0]
 801422a:	bf5c      	itt	pl
 801422c:	600b      	strpl	r3, [r1, #0]
 801422e:	2002      	movpl	r0, #2
 8014230:	4770      	bx	lr
 8014232:	b298      	uxth	r0, r3
 8014234:	b9a8      	cbnz	r0, 8014262 <__lo0bits+0x52>
 8014236:	0c1b      	lsrs	r3, r3, #16
 8014238:	2010      	movs	r0, #16
 801423a:	b2da      	uxtb	r2, r3
 801423c:	b90a      	cbnz	r2, 8014242 <__lo0bits+0x32>
 801423e:	3008      	adds	r0, #8
 8014240:	0a1b      	lsrs	r3, r3, #8
 8014242:	071a      	lsls	r2, r3, #28
 8014244:	bf04      	itt	eq
 8014246:	091b      	lsreq	r3, r3, #4
 8014248:	3004      	addeq	r0, #4
 801424a:	079a      	lsls	r2, r3, #30
 801424c:	bf04      	itt	eq
 801424e:	089b      	lsreq	r3, r3, #2
 8014250:	3002      	addeq	r0, #2
 8014252:	07da      	lsls	r2, r3, #31
 8014254:	d403      	bmi.n	801425e <__lo0bits+0x4e>
 8014256:	085b      	lsrs	r3, r3, #1
 8014258:	f100 0001 	add.w	r0, r0, #1
 801425c:	d005      	beq.n	801426a <__lo0bits+0x5a>
 801425e:	600b      	str	r3, [r1, #0]
 8014260:	4770      	bx	lr
 8014262:	4610      	mov	r0, r2
 8014264:	e7e9      	b.n	801423a <__lo0bits+0x2a>
 8014266:	2000      	movs	r0, #0
 8014268:	4770      	bx	lr
 801426a:	2020      	movs	r0, #32
 801426c:	4770      	bx	lr
	...

08014270 <__i2b>:
 8014270:	b510      	push	{r4, lr}
 8014272:	460c      	mov	r4, r1
 8014274:	2101      	movs	r1, #1
 8014276:	f7ff ff03 	bl	8014080 <_Balloc>
 801427a:	4602      	mov	r2, r0
 801427c:	b928      	cbnz	r0, 801428a <__i2b+0x1a>
 801427e:	4b05      	ldr	r3, [pc, #20]	; (8014294 <__i2b+0x24>)
 8014280:	4805      	ldr	r0, [pc, #20]	; (8014298 <__i2b+0x28>)
 8014282:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014286:	f000 fc95 	bl	8014bb4 <__assert_func>
 801428a:	2301      	movs	r3, #1
 801428c:	6144      	str	r4, [r0, #20]
 801428e:	6103      	str	r3, [r0, #16]
 8014290:	bd10      	pop	{r4, pc}
 8014292:	bf00      	nop
 8014294:	0801585f 	.word	0x0801585f
 8014298:	08015870 	.word	0x08015870

0801429c <__multiply>:
 801429c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142a0:	4691      	mov	r9, r2
 80142a2:	690a      	ldr	r2, [r1, #16]
 80142a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80142a8:	429a      	cmp	r2, r3
 80142aa:	bfb8      	it	lt
 80142ac:	460b      	movlt	r3, r1
 80142ae:	460c      	mov	r4, r1
 80142b0:	bfbc      	itt	lt
 80142b2:	464c      	movlt	r4, r9
 80142b4:	4699      	movlt	r9, r3
 80142b6:	6927      	ldr	r7, [r4, #16]
 80142b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80142bc:	68a3      	ldr	r3, [r4, #8]
 80142be:	6861      	ldr	r1, [r4, #4]
 80142c0:	eb07 060a 	add.w	r6, r7, sl
 80142c4:	42b3      	cmp	r3, r6
 80142c6:	b085      	sub	sp, #20
 80142c8:	bfb8      	it	lt
 80142ca:	3101      	addlt	r1, #1
 80142cc:	f7ff fed8 	bl	8014080 <_Balloc>
 80142d0:	b930      	cbnz	r0, 80142e0 <__multiply+0x44>
 80142d2:	4602      	mov	r2, r0
 80142d4:	4b44      	ldr	r3, [pc, #272]	; (80143e8 <__multiply+0x14c>)
 80142d6:	4845      	ldr	r0, [pc, #276]	; (80143ec <__multiply+0x150>)
 80142d8:	f240 115d 	movw	r1, #349	; 0x15d
 80142dc:	f000 fc6a 	bl	8014bb4 <__assert_func>
 80142e0:	f100 0514 	add.w	r5, r0, #20
 80142e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80142e8:	462b      	mov	r3, r5
 80142ea:	2200      	movs	r2, #0
 80142ec:	4543      	cmp	r3, r8
 80142ee:	d321      	bcc.n	8014334 <__multiply+0x98>
 80142f0:	f104 0314 	add.w	r3, r4, #20
 80142f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80142f8:	f109 0314 	add.w	r3, r9, #20
 80142fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014300:	9202      	str	r2, [sp, #8]
 8014302:	1b3a      	subs	r2, r7, r4
 8014304:	3a15      	subs	r2, #21
 8014306:	f022 0203 	bic.w	r2, r2, #3
 801430a:	3204      	adds	r2, #4
 801430c:	f104 0115 	add.w	r1, r4, #21
 8014310:	428f      	cmp	r7, r1
 8014312:	bf38      	it	cc
 8014314:	2204      	movcc	r2, #4
 8014316:	9201      	str	r2, [sp, #4]
 8014318:	9a02      	ldr	r2, [sp, #8]
 801431a:	9303      	str	r3, [sp, #12]
 801431c:	429a      	cmp	r2, r3
 801431e:	d80c      	bhi.n	801433a <__multiply+0x9e>
 8014320:	2e00      	cmp	r6, #0
 8014322:	dd03      	ble.n	801432c <__multiply+0x90>
 8014324:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014328:	2b00      	cmp	r3, #0
 801432a:	d05a      	beq.n	80143e2 <__multiply+0x146>
 801432c:	6106      	str	r6, [r0, #16]
 801432e:	b005      	add	sp, #20
 8014330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014334:	f843 2b04 	str.w	r2, [r3], #4
 8014338:	e7d8      	b.n	80142ec <__multiply+0x50>
 801433a:	f8b3 a000 	ldrh.w	sl, [r3]
 801433e:	f1ba 0f00 	cmp.w	sl, #0
 8014342:	d024      	beq.n	801438e <__multiply+0xf2>
 8014344:	f104 0e14 	add.w	lr, r4, #20
 8014348:	46a9      	mov	r9, r5
 801434a:	f04f 0c00 	mov.w	ip, #0
 801434e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014352:	f8d9 1000 	ldr.w	r1, [r9]
 8014356:	fa1f fb82 	uxth.w	fp, r2
 801435a:	b289      	uxth	r1, r1
 801435c:	fb0a 110b 	mla	r1, sl, fp, r1
 8014360:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014364:	f8d9 2000 	ldr.w	r2, [r9]
 8014368:	4461      	add	r1, ip
 801436a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801436e:	fb0a c20b 	mla	r2, sl, fp, ip
 8014372:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014376:	b289      	uxth	r1, r1
 8014378:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801437c:	4577      	cmp	r7, lr
 801437e:	f849 1b04 	str.w	r1, [r9], #4
 8014382:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014386:	d8e2      	bhi.n	801434e <__multiply+0xb2>
 8014388:	9a01      	ldr	r2, [sp, #4]
 801438a:	f845 c002 	str.w	ip, [r5, r2]
 801438e:	9a03      	ldr	r2, [sp, #12]
 8014390:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014394:	3304      	adds	r3, #4
 8014396:	f1b9 0f00 	cmp.w	r9, #0
 801439a:	d020      	beq.n	80143de <__multiply+0x142>
 801439c:	6829      	ldr	r1, [r5, #0]
 801439e:	f104 0c14 	add.w	ip, r4, #20
 80143a2:	46ae      	mov	lr, r5
 80143a4:	f04f 0a00 	mov.w	sl, #0
 80143a8:	f8bc b000 	ldrh.w	fp, [ip]
 80143ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80143b0:	fb09 220b 	mla	r2, r9, fp, r2
 80143b4:	4492      	add	sl, r2
 80143b6:	b289      	uxth	r1, r1
 80143b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80143bc:	f84e 1b04 	str.w	r1, [lr], #4
 80143c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80143c4:	f8be 1000 	ldrh.w	r1, [lr]
 80143c8:	0c12      	lsrs	r2, r2, #16
 80143ca:	fb09 1102 	mla	r1, r9, r2, r1
 80143ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80143d2:	4567      	cmp	r7, ip
 80143d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80143d8:	d8e6      	bhi.n	80143a8 <__multiply+0x10c>
 80143da:	9a01      	ldr	r2, [sp, #4]
 80143dc:	50a9      	str	r1, [r5, r2]
 80143de:	3504      	adds	r5, #4
 80143e0:	e79a      	b.n	8014318 <__multiply+0x7c>
 80143e2:	3e01      	subs	r6, #1
 80143e4:	e79c      	b.n	8014320 <__multiply+0x84>
 80143e6:	bf00      	nop
 80143e8:	0801585f 	.word	0x0801585f
 80143ec:	08015870 	.word	0x08015870

080143f0 <__pow5mult>:
 80143f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143f4:	4615      	mov	r5, r2
 80143f6:	f012 0203 	ands.w	r2, r2, #3
 80143fa:	4606      	mov	r6, r0
 80143fc:	460f      	mov	r7, r1
 80143fe:	d007      	beq.n	8014410 <__pow5mult+0x20>
 8014400:	4c25      	ldr	r4, [pc, #148]	; (8014498 <__pow5mult+0xa8>)
 8014402:	3a01      	subs	r2, #1
 8014404:	2300      	movs	r3, #0
 8014406:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801440a:	f7ff fe9b 	bl	8014144 <__multadd>
 801440e:	4607      	mov	r7, r0
 8014410:	10ad      	asrs	r5, r5, #2
 8014412:	d03d      	beq.n	8014490 <__pow5mult+0xa0>
 8014414:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014416:	b97c      	cbnz	r4, 8014438 <__pow5mult+0x48>
 8014418:	2010      	movs	r0, #16
 801441a:	f7ff fe1d 	bl	8014058 <malloc>
 801441e:	4602      	mov	r2, r0
 8014420:	6270      	str	r0, [r6, #36]	; 0x24
 8014422:	b928      	cbnz	r0, 8014430 <__pow5mult+0x40>
 8014424:	4b1d      	ldr	r3, [pc, #116]	; (801449c <__pow5mult+0xac>)
 8014426:	481e      	ldr	r0, [pc, #120]	; (80144a0 <__pow5mult+0xb0>)
 8014428:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801442c:	f000 fbc2 	bl	8014bb4 <__assert_func>
 8014430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014434:	6004      	str	r4, [r0, #0]
 8014436:	60c4      	str	r4, [r0, #12]
 8014438:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801443c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014440:	b94c      	cbnz	r4, 8014456 <__pow5mult+0x66>
 8014442:	f240 2171 	movw	r1, #625	; 0x271
 8014446:	4630      	mov	r0, r6
 8014448:	f7ff ff12 	bl	8014270 <__i2b>
 801444c:	2300      	movs	r3, #0
 801444e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014452:	4604      	mov	r4, r0
 8014454:	6003      	str	r3, [r0, #0]
 8014456:	f04f 0900 	mov.w	r9, #0
 801445a:	07eb      	lsls	r3, r5, #31
 801445c:	d50a      	bpl.n	8014474 <__pow5mult+0x84>
 801445e:	4639      	mov	r1, r7
 8014460:	4622      	mov	r2, r4
 8014462:	4630      	mov	r0, r6
 8014464:	f7ff ff1a 	bl	801429c <__multiply>
 8014468:	4639      	mov	r1, r7
 801446a:	4680      	mov	r8, r0
 801446c:	4630      	mov	r0, r6
 801446e:	f7ff fe47 	bl	8014100 <_Bfree>
 8014472:	4647      	mov	r7, r8
 8014474:	106d      	asrs	r5, r5, #1
 8014476:	d00b      	beq.n	8014490 <__pow5mult+0xa0>
 8014478:	6820      	ldr	r0, [r4, #0]
 801447a:	b938      	cbnz	r0, 801448c <__pow5mult+0x9c>
 801447c:	4622      	mov	r2, r4
 801447e:	4621      	mov	r1, r4
 8014480:	4630      	mov	r0, r6
 8014482:	f7ff ff0b 	bl	801429c <__multiply>
 8014486:	6020      	str	r0, [r4, #0]
 8014488:	f8c0 9000 	str.w	r9, [r0]
 801448c:	4604      	mov	r4, r0
 801448e:	e7e4      	b.n	801445a <__pow5mult+0x6a>
 8014490:	4638      	mov	r0, r7
 8014492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014496:	bf00      	nop
 8014498:	080159c0 	.word	0x080159c0
 801449c:	080157ed 	.word	0x080157ed
 80144a0:	08015870 	.word	0x08015870

080144a4 <__lshift>:
 80144a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144a8:	460c      	mov	r4, r1
 80144aa:	6849      	ldr	r1, [r1, #4]
 80144ac:	6923      	ldr	r3, [r4, #16]
 80144ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80144b2:	68a3      	ldr	r3, [r4, #8]
 80144b4:	4607      	mov	r7, r0
 80144b6:	4691      	mov	r9, r2
 80144b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80144bc:	f108 0601 	add.w	r6, r8, #1
 80144c0:	42b3      	cmp	r3, r6
 80144c2:	db0b      	blt.n	80144dc <__lshift+0x38>
 80144c4:	4638      	mov	r0, r7
 80144c6:	f7ff fddb 	bl	8014080 <_Balloc>
 80144ca:	4605      	mov	r5, r0
 80144cc:	b948      	cbnz	r0, 80144e2 <__lshift+0x3e>
 80144ce:	4602      	mov	r2, r0
 80144d0:	4b2a      	ldr	r3, [pc, #168]	; (801457c <__lshift+0xd8>)
 80144d2:	482b      	ldr	r0, [pc, #172]	; (8014580 <__lshift+0xdc>)
 80144d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80144d8:	f000 fb6c 	bl	8014bb4 <__assert_func>
 80144dc:	3101      	adds	r1, #1
 80144de:	005b      	lsls	r3, r3, #1
 80144e0:	e7ee      	b.n	80144c0 <__lshift+0x1c>
 80144e2:	2300      	movs	r3, #0
 80144e4:	f100 0114 	add.w	r1, r0, #20
 80144e8:	f100 0210 	add.w	r2, r0, #16
 80144ec:	4618      	mov	r0, r3
 80144ee:	4553      	cmp	r3, sl
 80144f0:	db37      	blt.n	8014562 <__lshift+0xbe>
 80144f2:	6920      	ldr	r0, [r4, #16]
 80144f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80144f8:	f104 0314 	add.w	r3, r4, #20
 80144fc:	f019 091f 	ands.w	r9, r9, #31
 8014500:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014504:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014508:	d02f      	beq.n	801456a <__lshift+0xc6>
 801450a:	f1c9 0e20 	rsb	lr, r9, #32
 801450e:	468a      	mov	sl, r1
 8014510:	f04f 0c00 	mov.w	ip, #0
 8014514:	681a      	ldr	r2, [r3, #0]
 8014516:	fa02 f209 	lsl.w	r2, r2, r9
 801451a:	ea42 020c 	orr.w	r2, r2, ip
 801451e:	f84a 2b04 	str.w	r2, [sl], #4
 8014522:	f853 2b04 	ldr.w	r2, [r3], #4
 8014526:	4298      	cmp	r0, r3
 8014528:	fa22 fc0e 	lsr.w	ip, r2, lr
 801452c:	d8f2      	bhi.n	8014514 <__lshift+0x70>
 801452e:	1b03      	subs	r3, r0, r4
 8014530:	3b15      	subs	r3, #21
 8014532:	f023 0303 	bic.w	r3, r3, #3
 8014536:	3304      	adds	r3, #4
 8014538:	f104 0215 	add.w	r2, r4, #21
 801453c:	4290      	cmp	r0, r2
 801453e:	bf38      	it	cc
 8014540:	2304      	movcc	r3, #4
 8014542:	f841 c003 	str.w	ip, [r1, r3]
 8014546:	f1bc 0f00 	cmp.w	ip, #0
 801454a:	d001      	beq.n	8014550 <__lshift+0xac>
 801454c:	f108 0602 	add.w	r6, r8, #2
 8014550:	3e01      	subs	r6, #1
 8014552:	4638      	mov	r0, r7
 8014554:	612e      	str	r6, [r5, #16]
 8014556:	4621      	mov	r1, r4
 8014558:	f7ff fdd2 	bl	8014100 <_Bfree>
 801455c:	4628      	mov	r0, r5
 801455e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014562:	f842 0f04 	str.w	r0, [r2, #4]!
 8014566:	3301      	adds	r3, #1
 8014568:	e7c1      	b.n	80144ee <__lshift+0x4a>
 801456a:	3904      	subs	r1, #4
 801456c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014570:	f841 2f04 	str.w	r2, [r1, #4]!
 8014574:	4298      	cmp	r0, r3
 8014576:	d8f9      	bhi.n	801456c <__lshift+0xc8>
 8014578:	e7ea      	b.n	8014550 <__lshift+0xac>
 801457a:	bf00      	nop
 801457c:	0801585f 	.word	0x0801585f
 8014580:	08015870 	.word	0x08015870

08014584 <__mcmp>:
 8014584:	b530      	push	{r4, r5, lr}
 8014586:	6902      	ldr	r2, [r0, #16]
 8014588:	690c      	ldr	r4, [r1, #16]
 801458a:	1b12      	subs	r2, r2, r4
 801458c:	d10e      	bne.n	80145ac <__mcmp+0x28>
 801458e:	f100 0314 	add.w	r3, r0, #20
 8014592:	3114      	adds	r1, #20
 8014594:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014598:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801459c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80145a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80145a4:	42a5      	cmp	r5, r4
 80145a6:	d003      	beq.n	80145b0 <__mcmp+0x2c>
 80145a8:	d305      	bcc.n	80145b6 <__mcmp+0x32>
 80145aa:	2201      	movs	r2, #1
 80145ac:	4610      	mov	r0, r2
 80145ae:	bd30      	pop	{r4, r5, pc}
 80145b0:	4283      	cmp	r3, r0
 80145b2:	d3f3      	bcc.n	801459c <__mcmp+0x18>
 80145b4:	e7fa      	b.n	80145ac <__mcmp+0x28>
 80145b6:	f04f 32ff 	mov.w	r2, #4294967295
 80145ba:	e7f7      	b.n	80145ac <__mcmp+0x28>

080145bc <__mdiff>:
 80145bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145c0:	460c      	mov	r4, r1
 80145c2:	4606      	mov	r6, r0
 80145c4:	4611      	mov	r1, r2
 80145c6:	4620      	mov	r0, r4
 80145c8:	4690      	mov	r8, r2
 80145ca:	f7ff ffdb 	bl	8014584 <__mcmp>
 80145ce:	1e05      	subs	r5, r0, #0
 80145d0:	d110      	bne.n	80145f4 <__mdiff+0x38>
 80145d2:	4629      	mov	r1, r5
 80145d4:	4630      	mov	r0, r6
 80145d6:	f7ff fd53 	bl	8014080 <_Balloc>
 80145da:	b930      	cbnz	r0, 80145ea <__mdiff+0x2e>
 80145dc:	4b3a      	ldr	r3, [pc, #232]	; (80146c8 <__mdiff+0x10c>)
 80145de:	4602      	mov	r2, r0
 80145e0:	f240 2132 	movw	r1, #562	; 0x232
 80145e4:	4839      	ldr	r0, [pc, #228]	; (80146cc <__mdiff+0x110>)
 80145e6:	f000 fae5 	bl	8014bb4 <__assert_func>
 80145ea:	2301      	movs	r3, #1
 80145ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80145f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145f4:	bfa4      	itt	ge
 80145f6:	4643      	movge	r3, r8
 80145f8:	46a0      	movge	r8, r4
 80145fa:	4630      	mov	r0, r6
 80145fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014600:	bfa6      	itte	ge
 8014602:	461c      	movge	r4, r3
 8014604:	2500      	movge	r5, #0
 8014606:	2501      	movlt	r5, #1
 8014608:	f7ff fd3a 	bl	8014080 <_Balloc>
 801460c:	b920      	cbnz	r0, 8014618 <__mdiff+0x5c>
 801460e:	4b2e      	ldr	r3, [pc, #184]	; (80146c8 <__mdiff+0x10c>)
 8014610:	4602      	mov	r2, r0
 8014612:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014616:	e7e5      	b.n	80145e4 <__mdiff+0x28>
 8014618:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801461c:	6926      	ldr	r6, [r4, #16]
 801461e:	60c5      	str	r5, [r0, #12]
 8014620:	f104 0914 	add.w	r9, r4, #20
 8014624:	f108 0514 	add.w	r5, r8, #20
 8014628:	f100 0e14 	add.w	lr, r0, #20
 801462c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014630:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014634:	f108 0210 	add.w	r2, r8, #16
 8014638:	46f2      	mov	sl, lr
 801463a:	2100      	movs	r1, #0
 801463c:	f859 3b04 	ldr.w	r3, [r9], #4
 8014640:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014644:	fa1f f883 	uxth.w	r8, r3
 8014648:	fa11 f18b 	uxtah	r1, r1, fp
 801464c:	0c1b      	lsrs	r3, r3, #16
 801464e:	eba1 0808 	sub.w	r8, r1, r8
 8014652:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014656:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801465a:	fa1f f888 	uxth.w	r8, r8
 801465e:	1419      	asrs	r1, r3, #16
 8014660:	454e      	cmp	r6, r9
 8014662:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014666:	f84a 3b04 	str.w	r3, [sl], #4
 801466a:	d8e7      	bhi.n	801463c <__mdiff+0x80>
 801466c:	1b33      	subs	r3, r6, r4
 801466e:	3b15      	subs	r3, #21
 8014670:	f023 0303 	bic.w	r3, r3, #3
 8014674:	3304      	adds	r3, #4
 8014676:	3415      	adds	r4, #21
 8014678:	42a6      	cmp	r6, r4
 801467a:	bf38      	it	cc
 801467c:	2304      	movcc	r3, #4
 801467e:	441d      	add	r5, r3
 8014680:	4473      	add	r3, lr
 8014682:	469e      	mov	lr, r3
 8014684:	462e      	mov	r6, r5
 8014686:	4566      	cmp	r6, ip
 8014688:	d30e      	bcc.n	80146a8 <__mdiff+0xec>
 801468a:	f10c 0203 	add.w	r2, ip, #3
 801468e:	1b52      	subs	r2, r2, r5
 8014690:	f022 0203 	bic.w	r2, r2, #3
 8014694:	3d03      	subs	r5, #3
 8014696:	45ac      	cmp	ip, r5
 8014698:	bf38      	it	cc
 801469a:	2200      	movcc	r2, #0
 801469c:	441a      	add	r2, r3
 801469e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80146a2:	b17b      	cbz	r3, 80146c4 <__mdiff+0x108>
 80146a4:	6107      	str	r7, [r0, #16]
 80146a6:	e7a3      	b.n	80145f0 <__mdiff+0x34>
 80146a8:	f856 8b04 	ldr.w	r8, [r6], #4
 80146ac:	fa11 f288 	uxtah	r2, r1, r8
 80146b0:	1414      	asrs	r4, r2, #16
 80146b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80146b6:	b292      	uxth	r2, r2
 80146b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80146bc:	f84e 2b04 	str.w	r2, [lr], #4
 80146c0:	1421      	asrs	r1, r4, #16
 80146c2:	e7e0      	b.n	8014686 <__mdiff+0xca>
 80146c4:	3f01      	subs	r7, #1
 80146c6:	e7ea      	b.n	801469e <__mdiff+0xe2>
 80146c8:	0801585f 	.word	0x0801585f
 80146cc:	08015870 	.word	0x08015870

080146d0 <__d2b>:
 80146d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80146d4:	4689      	mov	r9, r1
 80146d6:	2101      	movs	r1, #1
 80146d8:	ec57 6b10 	vmov	r6, r7, d0
 80146dc:	4690      	mov	r8, r2
 80146de:	f7ff fccf 	bl	8014080 <_Balloc>
 80146e2:	4604      	mov	r4, r0
 80146e4:	b930      	cbnz	r0, 80146f4 <__d2b+0x24>
 80146e6:	4602      	mov	r2, r0
 80146e8:	4b25      	ldr	r3, [pc, #148]	; (8014780 <__d2b+0xb0>)
 80146ea:	4826      	ldr	r0, [pc, #152]	; (8014784 <__d2b+0xb4>)
 80146ec:	f240 310a 	movw	r1, #778	; 0x30a
 80146f0:	f000 fa60 	bl	8014bb4 <__assert_func>
 80146f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80146f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80146fc:	bb35      	cbnz	r5, 801474c <__d2b+0x7c>
 80146fe:	2e00      	cmp	r6, #0
 8014700:	9301      	str	r3, [sp, #4]
 8014702:	d028      	beq.n	8014756 <__d2b+0x86>
 8014704:	4668      	mov	r0, sp
 8014706:	9600      	str	r6, [sp, #0]
 8014708:	f7ff fd82 	bl	8014210 <__lo0bits>
 801470c:	9900      	ldr	r1, [sp, #0]
 801470e:	b300      	cbz	r0, 8014752 <__d2b+0x82>
 8014710:	9a01      	ldr	r2, [sp, #4]
 8014712:	f1c0 0320 	rsb	r3, r0, #32
 8014716:	fa02 f303 	lsl.w	r3, r2, r3
 801471a:	430b      	orrs	r3, r1
 801471c:	40c2      	lsrs	r2, r0
 801471e:	6163      	str	r3, [r4, #20]
 8014720:	9201      	str	r2, [sp, #4]
 8014722:	9b01      	ldr	r3, [sp, #4]
 8014724:	61a3      	str	r3, [r4, #24]
 8014726:	2b00      	cmp	r3, #0
 8014728:	bf14      	ite	ne
 801472a:	2202      	movne	r2, #2
 801472c:	2201      	moveq	r2, #1
 801472e:	6122      	str	r2, [r4, #16]
 8014730:	b1d5      	cbz	r5, 8014768 <__d2b+0x98>
 8014732:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014736:	4405      	add	r5, r0
 8014738:	f8c9 5000 	str.w	r5, [r9]
 801473c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014740:	f8c8 0000 	str.w	r0, [r8]
 8014744:	4620      	mov	r0, r4
 8014746:	b003      	add	sp, #12
 8014748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801474c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014750:	e7d5      	b.n	80146fe <__d2b+0x2e>
 8014752:	6161      	str	r1, [r4, #20]
 8014754:	e7e5      	b.n	8014722 <__d2b+0x52>
 8014756:	a801      	add	r0, sp, #4
 8014758:	f7ff fd5a 	bl	8014210 <__lo0bits>
 801475c:	9b01      	ldr	r3, [sp, #4]
 801475e:	6163      	str	r3, [r4, #20]
 8014760:	2201      	movs	r2, #1
 8014762:	6122      	str	r2, [r4, #16]
 8014764:	3020      	adds	r0, #32
 8014766:	e7e3      	b.n	8014730 <__d2b+0x60>
 8014768:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801476c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014770:	f8c9 0000 	str.w	r0, [r9]
 8014774:	6918      	ldr	r0, [r3, #16]
 8014776:	f7ff fd2b 	bl	80141d0 <__hi0bits>
 801477a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801477e:	e7df      	b.n	8014740 <__d2b+0x70>
 8014780:	0801585f 	.word	0x0801585f
 8014784:	08015870 	.word	0x08015870

08014788 <_calloc_r>:
 8014788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801478a:	fba1 2402 	umull	r2, r4, r1, r2
 801478e:	b94c      	cbnz	r4, 80147a4 <_calloc_r+0x1c>
 8014790:	4611      	mov	r1, r2
 8014792:	9201      	str	r2, [sp, #4]
 8014794:	f7fd fe2c 	bl	80123f0 <_malloc_r>
 8014798:	9a01      	ldr	r2, [sp, #4]
 801479a:	4605      	mov	r5, r0
 801479c:	b930      	cbnz	r0, 80147ac <_calloc_r+0x24>
 801479e:	4628      	mov	r0, r5
 80147a0:	b003      	add	sp, #12
 80147a2:	bd30      	pop	{r4, r5, pc}
 80147a4:	220c      	movs	r2, #12
 80147a6:	6002      	str	r2, [r0, #0]
 80147a8:	2500      	movs	r5, #0
 80147aa:	e7f8      	b.n	801479e <_calloc_r+0x16>
 80147ac:	4621      	mov	r1, r4
 80147ae:	f7fd fdf6 	bl	801239e <memset>
 80147b2:	e7f4      	b.n	801479e <_calloc_r+0x16>

080147b4 <_free_r>:
 80147b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80147b6:	2900      	cmp	r1, #0
 80147b8:	d044      	beq.n	8014844 <_free_r+0x90>
 80147ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80147be:	9001      	str	r0, [sp, #4]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	f1a1 0404 	sub.w	r4, r1, #4
 80147c6:	bfb8      	it	lt
 80147c8:	18e4      	addlt	r4, r4, r3
 80147ca:	f7ff fc4d 	bl	8014068 <__malloc_lock>
 80147ce:	4a1e      	ldr	r2, [pc, #120]	; (8014848 <_free_r+0x94>)
 80147d0:	9801      	ldr	r0, [sp, #4]
 80147d2:	6813      	ldr	r3, [r2, #0]
 80147d4:	b933      	cbnz	r3, 80147e4 <_free_r+0x30>
 80147d6:	6063      	str	r3, [r4, #4]
 80147d8:	6014      	str	r4, [r2, #0]
 80147da:	b003      	add	sp, #12
 80147dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80147e0:	f7ff bc48 	b.w	8014074 <__malloc_unlock>
 80147e4:	42a3      	cmp	r3, r4
 80147e6:	d908      	bls.n	80147fa <_free_r+0x46>
 80147e8:	6825      	ldr	r5, [r4, #0]
 80147ea:	1961      	adds	r1, r4, r5
 80147ec:	428b      	cmp	r3, r1
 80147ee:	bf01      	itttt	eq
 80147f0:	6819      	ldreq	r1, [r3, #0]
 80147f2:	685b      	ldreq	r3, [r3, #4]
 80147f4:	1949      	addeq	r1, r1, r5
 80147f6:	6021      	streq	r1, [r4, #0]
 80147f8:	e7ed      	b.n	80147d6 <_free_r+0x22>
 80147fa:	461a      	mov	r2, r3
 80147fc:	685b      	ldr	r3, [r3, #4]
 80147fe:	b10b      	cbz	r3, 8014804 <_free_r+0x50>
 8014800:	42a3      	cmp	r3, r4
 8014802:	d9fa      	bls.n	80147fa <_free_r+0x46>
 8014804:	6811      	ldr	r1, [r2, #0]
 8014806:	1855      	adds	r5, r2, r1
 8014808:	42a5      	cmp	r5, r4
 801480a:	d10b      	bne.n	8014824 <_free_r+0x70>
 801480c:	6824      	ldr	r4, [r4, #0]
 801480e:	4421      	add	r1, r4
 8014810:	1854      	adds	r4, r2, r1
 8014812:	42a3      	cmp	r3, r4
 8014814:	6011      	str	r1, [r2, #0]
 8014816:	d1e0      	bne.n	80147da <_free_r+0x26>
 8014818:	681c      	ldr	r4, [r3, #0]
 801481a:	685b      	ldr	r3, [r3, #4]
 801481c:	6053      	str	r3, [r2, #4]
 801481e:	4421      	add	r1, r4
 8014820:	6011      	str	r1, [r2, #0]
 8014822:	e7da      	b.n	80147da <_free_r+0x26>
 8014824:	d902      	bls.n	801482c <_free_r+0x78>
 8014826:	230c      	movs	r3, #12
 8014828:	6003      	str	r3, [r0, #0]
 801482a:	e7d6      	b.n	80147da <_free_r+0x26>
 801482c:	6825      	ldr	r5, [r4, #0]
 801482e:	1961      	adds	r1, r4, r5
 8014830:	428b      	cmp	r3, r1
 8014832:	bf04      	itt	eq
 8014834:	6819      	ldreq	r1, [r3, #0]
 8014836:	685b      	ldreq	r3, [r3, #4]
 8014838:	6063      	str	r3, [r4, #4]
 801483a:	bf04      	itt	eq
 801483c:	1949      	addeq	r1, r1, r5
 801483e:	6021      	streq	r1, [r4, #0]
 8014840:	6054      	str	r4, [r2, #4]
 8014842:	e7ca      	b.n	80147da <_free_r+0x26>
 8014844:	b003      	add	sp, #12
 8014846:	bd30      	pop	{r4, r5, pc}
 8014848:	2400d27c 	.word	0x2400d27c

0801484c <__sfputc_r>:
 801484c:	6893      	ldr	r3, [r2, #8]
 801484e:	3b01      	subs	r3, #1
 8014850:	2b00      	cmp	r3, #0
 8014852:	b410      	push	{r4}
 8014854:	6093      	str	r3, [r2, #8]
 8014856:	da08      	bge.n	801486a <__sfputc_r+0x1e>
 8014858:	6994      	ldr	r4, [r2, #24]
 801485a:	42a3      	cmp	r3, r4
 801485c:	db01      	blt.n	8014862 <__sfputc_r+0x16>
 801485e:	290a      	cmp	r1, #10
 8014860:	d103      	bne.n	801486a <__sfputc_r+0x1e>
 8014862:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014866:	f7fe bbdb 	b.w	8013020 <__swbuf_r>
 801486a:	6813      	ldr	r3, [r2, #0]
 801486c:	1c58      	adds	r0, r3, #1
 801486e:	6010      	str	r0, [r2, #0]
 8014870:	7019      	strb	r1, [r3, #0]
 8014872:	4608      	mov	r0, r1
 8014874:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014878:	4770      	bx	lr

0801487a <__sfputs_r>:
 801487a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801487c:	4606      	mov	r6, r0
 801487e:	460f      	mov	r7, r1
 8014880:	4614      	mov	r4, r2
 8014882:	18d5      	adds	r5, r2, r3
 8014884:	42ac      	cmp	r4, r5
 8014886:	d101      	bne.n	801488c <__sfputs_r+0x12>
 8014888:	2000      	movs	r0, #0
 801488a:	e007      	b.n	801489c <__sfputs_r+0x22>
 801488c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014890:	463a      	mov	r2, r7
 8014892:	4630      	mov	r0, r6
 8014894:	f7ff ffda 	bl	801484c <__sfputc_r>
 8014898:	1c43      	adds	r3, r0, #1
 801489a:	d1f3      	bne.n	8014884 <__sfputs_r+0xa>
 801489c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080148a0 <_vfiprintf_r>:
 80148a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148a4:	460d      	mov	r5, r1
 80148a6:	b09d      	sub	sp, #116	; 0x74
 80148a8:	4614      	mov	r4, r2
 80148aa:	4698      	mov	r8, r3
 80148ac:	4606      	mov	r6, r0
 80148ae:	b118      	cbz	r0, 80148b8 <_vfiprintf_r+0x18>
 80148b0:	6983      	ldr	r3, [r0, #24]
 80148b2:	b90b      	cbnz	r3, 80148b8 <_vfiprintf_r+0x18>
 80148b4:	f7fd fca0 	bl	80121f8 <__sinit>
 80148b8:	4b89      	ldr	r3, [pc, #548]	; (8014ae0 <_vfiprintf_r+0x240>)
 80148ba:	429d      	cmp	r5, r3
 80148bc:	d11b      	bne.n	80148f6 <_vfiprintf_r+0x56>
 80148be:	6875      	ldr	r5, [r6, #4]
 80148c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80148c2:	07d9      	lsls	r1, r3, #31
 80148c4:	d405      	bmi.n	80148d2 <_vfiprintf_r+0x32>
 80148c6:	89ab      	ldrh	r3, [r5, #12]
 80148c8:	059a      	lsls	r2, r3, #22
 80148ca:	d402      	bmi.n	80148d2 <_vfiprintf_r+0x32>
 80148cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80148ce:	f7fd fd56 	bl	801237e <__retarget_lock_acquire_recursive>
 80148d2:	89ab      	ldrh	r3, [r5, #12]
 80148d4:	071b      	lsls	r3, r3, #28
 80148d6:	d501      	bpl.n	80148dc <_vfiprintf_r+0x3c>
 80148d8:	692b      	ldr	r3, [r5, #16]
 80148da:	b9eb      	cbnz	r3, 8014918 <_vfiprintf_r+0x78>
 80148dc:	4629      	mov	r1, r5
 80148de:	4630      	mov	r0, r6
 80148e0:	f7fe fc02 	bl	80130e8 <__swsetup_r>
 80148e4:	b1c0      	cbz	r0, 8014918 <_vfiprintf_r+0x78>
 80148e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80148e8:	07dc      	lsls	r4, r3, #31
 80148ea:	d50e      	bpl.n	801490a <_vfiprintf_r+0x6a>
 80148ec:	f04f 30ff 	mov.w	r0, #4294967295
 80148f0:	b01d      	add	sp, #116	; 0x74
 80148f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148f6:	4b7b      	ldr	r3, [pc, #492]	; (8014ae4 <_vfiprintf_r+0x244>)
 80148f8:	429d      	cmp	r5, r3
 80148fa:	d101      	bne.n	8014900 <_vfiprintf_r+0x60>
 80148fc:	68b5      	ldr	r5, [r6, #8]
 80148fe:	e7df      	b.n	80148c0 <_vfiprintf_r+0x20>
 8014900:	4b79      	ldr	r3, [pc, #484]	; (8014ae8 <_vfiprintf_r+0x248>)
 8014902:	429d      	cmp	r5, r3
 8014904:	bf08      	it	eq
 8014906:	68f5      	ldreq	r5, [r6, #12]
 8014908:	e7da      	b.n	80148c0 <_vfiprintf_r+0x20>
 801490a:	89ab      	ldrh	r3, [r5, #12]
 801490c:	0598      	lsls	r0, r3, #22
 801490e:	d4ed      	bmi.n	80148ec <_vfiprintf_r+0x4c>
 8014910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014912:	f7fd fd35 	bl	8012380 <__retarget_lock_release_recursive>
 8014916:	e7e9      	b.n	80148ec <_vfiprintf_r+0x4c>
 8014918:	2300      	movs	r3, #0
 801491a:	9309      	str	r3, [sp, #36]	; 0x24
 801491c:	2320      	movs	r3, #32
 801491e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014922:	f8cd 800c 	str.w	r8, [sp, #12]
 8014926:	2330      	movs	r3, #48	; 0x30
 8014928:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014aec <_vfiprintf_r+0x24c>
 801492c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014930:	f04f 0901 	mov.w	r9, #1
 8014934:	4623      	mov	r3, r4
 8014936:	469a      	mov	sl, r3
 8014938:	f813 2b01 	ldrb.w	r2, [r3], #1
 801493c:	b10a      	cbz	r2, 8014942 <_vfiprintf_r+0xa2>
 801493e:	2a25      	cmp	r2, #37	; 0x25
 8014940:	d1f9      	bne.n	8014936 <_vfiprintf_r+0x96>
 8014942:	ebba 0b04 	subs.w	fp, sl, r4
 8014946:	d00b      	beq.n	8014960 <_vfiprintf_r+0xc0>
 8014948:	465b      	mov	r3, fp
 801494a:	4622      	mov	r2, r4
 801494c:	4629      	mov	r1, r5
 801494e:	4630      	mov	r0, r6
 8014950:	f7ff ff93 	bl	801487a <__sfputs_r>
 8014954:	3001      	adds	r0, #1
 8014956:	f000 80aa 	beq.w	8014aae <_vfiprintf_r+0x20e>
 801495a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801495c:	445a      	add	r2, fp
 801495e:	9209      	str	r2, [sp, #36]	; 0x24
 8014960:	f89a 3000 	ldrb.w	r3, [sl]
 8014964:	2b00      	cmp	r3, #0
 8014966:	f000 80a2 	beq.w	8014aae <_vfiprintf_r+0x20e>
 801496a:	2300      	movs	r3, #0
 801496c:	f04f 32ff 	mov.w	r2, #4294967295
 8014970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014974:	f10a 0a01 	add.w	sl, sl, #1
 8014978:	9304      	str	r3, [sp, #16]
 801497a:	9307      	str	r3, [sp, #28]
 801497c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014980:	931a      	str	r3, [sp, #104]	; 0x68
 8014982:	4654      	mov	r4, sl
 8014984:	2205      	movs	r2, #5
 8014986:	f814 1b01 	ldrb.w	r1, [r4], #1
 801498a:	4858      	ldr	r0, [pc, #352]	; (8014aec <_vfiprintf_r+0x24c>)
 801498c:	f7eb fcc8 	bl	8000320 <memchr>
 8014990:	9a04      	ldr	r2, [sp, #16]
 8014992:	b9d8      	cbnz	r0, 80149cc <_vfiprintf_r+0x12c>
 8014994:	06d1      	lsls	r1, r2, #27
 8014996:	bf44      	itt	mi
 8014998:	2320      	movmi	r3, #32
 801499a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801499e:	0713      	lsls	r3, r2, #28
 80149a0:	bf44      	itt	mi
 80149a2:	232b      	movmi	r3, #43	; 0x2b
 80149a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80149a8:	f89a 3000 	ldrb.w	r3, [sl]
 80149ac:	2b2a      	cmp	r3, #42	; 0x2a
 80149ae:	d015      	beq.n	80149dc <_vfiprintf_r+0x13c>
 80149b0:	9a07      	ldr	r2, [sp, #28]
 80149b2:	4654      	mov	r4, sl
 80149b4:	2000      	movs	r0, #0
 80149b6:	f04f 0c0a 	mov.w	ip, #10
 80149ba:	4621      	mov	r1, r4
 80149bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80149c0:	3b30      	subs	r3, #48	; 0x30
 80149c2:	2b09      	cmp	r3, #9
 80149c4:	d94e      	bls.n	8014a64 <_vfiprintf_r+0x1c4>
 80149c6:	b1b0      	cbz	r0, 80149f6 <_vfiprintf_r+0x156>
 80149c8:	9207      	str	r2, [sp, #28]
 80149ca:	e014      	b.n	80149f6 <_vfiprintf_r+0x156>
 80149cc:	eba0 0308 	sub.w	r3, r0, r8
 80149d0:	fa09 f303 	lsl.w	r3, r9, r3
 80149d4:	4313      	orrs	r3, r2
 80149d6:	9304      	str	r3, [sp, #16]
 80149d8:	46a2      	mov	sl, r4
 80149da:	e7d2      	b.n	8014982 <_vfiprintf_r+0xe2>
 80149dc:	9b03      	ldr	r3, [sp, #12]
 80149de:	1d19      	adds	r1, r3, #4
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	9103      	str	r1, [sp, #12]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	bfbb      	ittet	lt
 80149e8:	425b      	neglt	r3, r3
 80149ea:	f042 0202 	orrlt.w	r2, r2, #2
 80149ee:	9307      	strge	r3, [sp, #28]
 80149f0:	9307      	strlt	r3, [sp, #28]
 80149f2:	bfb8      	it	lt
 80149f4:	9204      	strlt	r2, [sp, #16]
 80149f6:	7823      	ldrb	r3, [r4, #0]
 80149f8:	2b2e      	cmp	r3, #46	; 0x2e
 80149fa:	d10c      	bne.n	8014a16 <_vfiprintf_r+0x176>
 80149fc:	7863      	ldrb	r3, [r4, #1]
 80149fe:	2b2a      	cmp	r3, #42	; 0x2a
 8014a00:	d135      	bne.n	8014a6e <_vfiprintf_r+0x1ce>
 8014a02:	9b03      	ldr	r3, [sp, #12]
 8014a04:	1d1a      	adds	r2, r3, #4
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	9203      	str	r2, [sp, #12]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	bfb8      	it	lt
 8014a0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014a12:	3402      	adds	r4, #2
 8014a14:	9305      	str	r3, [sp, #20]
 8014a16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014afc <_vfiprintf_r+0x25c>
 8014a1a:	7821      	ldrb	r1, [r4, #0]
 8014a1c:	2203      	movs	r2, #3
 8014a1e:	4650      	mov	r0, sl
 8014a20:	f7eb fc7e 	bl	8000320 <memchr>
 8014a24:	b140      	cbz	r0, 8014a38 <_vfiprintf_r+0x198>
 8014a26:	2340      	movs	r3, #64	; 0x40
 8014a28:	eba0 000a 	sub.w	r0, r0, sl
 8014a2c:	fa03 f000 	lsl.w	r0, r3, r0
 8014a30:	9b04      	ldr	r3, [sp, #16]
 8014a32:	4303      	orrs	r3, r0
 8014a34:	3401      	adds	r4, #1
 8014a36:	9304      	str	r3, [sp, #16]
 8014a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a3c:	482c      	ldr	r0, [pc, #176]	; (8014af0 <_vfiprintf_r+0x250>)
 8014a3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014a42:	2206      	movs	r2, #6
 8014a44:	f7eb fc6c 	bl	8000320 <memchr>
 8014a48:	2800      	cmp	r0, #0
 8014a4a:	d03f      	beq.n	8014acc <_vfiprintf_r+0x22c>
 8014a4c:	4b29      	ldr	r3, [pc, #164]	; (8014af4 <_vfiprintf_r+0x254>)
 8014a4e:	bb1b      	cbnz	r3, 8014a98 <_vfiprintf_r+0x1f8>
 8014a50:	9b03      	ldr	r3, [sp, #12]
 8014a52:	3307      	adds	r3, #7
 8014a54:	f023 0307 	bic.w	r3, r3, #7
 8014a58:	3308      	adds	r3, #8
 8014a5a:	9303      	str	r3, [sp, #12]
 8014a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a5e:	443b      	add	r3, r7
 8014a60:	9309      	str	r3, [sp, #36]	; 0x24
 8014a62:	e767      	b.n	8014934 <_vfiprintf_r+0x94>
 8014a64:	fb0c 3202 	mla	r2, ip, r2, r3
 8014a68:	460c      	mov	r4, r1
 8014a6a:	2001      	movs	r0, #1
 8014a6c:	e7a5      	b.n	80149ba <_vfiprintf_r+0x11a>
 8014a6e:	2300      	movs	r3, #0
 8014a70:	3401      	adds	r4, #1
 8014a72:	9305      	str	r3, [sp, #20]
 8014a74:	4619      	mov	r1, r3
 8014a76:	f04f 0c0a 	mov.w	ip, #10
 8014a7a:	4620      	mov	r0, r4
 8014a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a80:	3a30      	subs	r2, #48	; 0x30
 8014a82:	2a09      	cmp	r2, #9
 8014a84:	d903      	bls.n	8014a8e <_vfiprintf_r+0x1ee>
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d0c5      	beq.n	8014a16 <_vfiprintf_r+0x176>
 8014a8a:	9105      	str	r1, [sp, #20]
 8014a8c:	e7c3      	b.n	8014a16 <_vfiprintf_r+0x176>
 8014a8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014a92:	4604      	mov	r4, r0
 8014a94:	2301      	movs	r3, #1
 8014a96:	e7f0      	b.n	8014a7a <_vfiprintf_r+0x1da>
 8014a98:	ab03      	add	r3, sp, #12
 8014a9a:	9300      	str	r3, [sp, #0]
 8014a9c:	462a      	mov	r2, r5
 8014a9e:	4b16      	ldr	r3, [pc, #88]	; (8014af8 <_vfiprintf_r+0x258>)
 8014aa0:	a904      	add	r1, sp, #16
 8014aa2:	4630      	mov	r0, r6
 8014aa4:	f7fd fda8 	bl	80125f8 <_printf_float>
 8014aa8:	4607      	mov	r7, r0
 8014aaa:	1c78      	adds	r0, r7, #1
 8014aac:	d1d6      	bne.n	8014a5c <_vfiprintf_r+0x1bc>
 8014aae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ab0:	07d9      	lsls	r1, r3, #31
 8014ab2:	d405      	bmi.n	8014ac0 <_vfiprintf_r+0x220>
 8014ab4:	89ab      	ldrh	r3, [r5, #12]
 8014ab6:	059a      	lsls	r2, r3, #22
 8014ab8:	d402      	bmi.n	8014ac0 <_vfiprintf_r+0x220>
 8014aba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014abc:	f7fd fc60 	bl	8012380 <__retarget_lock_release_recursive>
 8014ac0:	89ab      	ldrh	r3, [r5, #12]
 8014ac2:	065b      	lsls	r3, r3, #25
 8014ac4:	f53f af12 	bmi.w	80148ec <_vfiprintf_r+0x4c>
 8014ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014aca:	e711      	b.n	80148f0 <_vfiprintf_r+0x50>
 8014acc:	ab03      	add	r3, sp, #12
 8014ace:	9300      	str	r3, [sp, #0]
 8014ad0:	462a      	mov	r2, r5
 8014ad2:	4b09      	ldr	r3, [pc, #36]	; (8014af8 <_vfiprintf_r+0x258>)
 8014ad4:	a904      	add	r1, sp, #16
 8014ad6:	4630      	mov	r0, r6
 8014ad8:	f7fe f81a 	bl	8012b10 <_printf_i>
 8014adc:	e7e4      	b.n	8014aa8 <_vfiprintf_r+0x208>
 8014ade:	bf00      	nop
 8014ae0:	08015768 	.word	0x08015768
 8014ae4:	08015788 	.word	0x08015788
 8014ae8:	08015748 	.word	0x08015748
 8014aec:	080159cc 	.word	0x080159cc
 8014af0:	080159d6 	.word	0x080159d6
 8014af4:	080125f9 	.word	0x080125f9
 8014af8:	0801487b 	.word	0x0801487b
 8014afc:	080159d2 	.word	0x080159d2

08014b00 <_putc_r>:
 8014b00:	b570      	push	{r4, r5, r6, lr}
 8014b02:	460d      	mov	r5, r1
 8014b04:	4614      	mov	r4, r2
 8014b06:	4606      	mov	r6, r0
 8014b08:	b118      	cbz	r0, 8014b12 <_putc_r+0x12>
 8014b0a:	6983      	ldr	r3, [r0, #24]
 8014b0c:	b90b      	cbnz	r3, 8014b12 <_putc_r+0x12>
 8014b0e:	f7fd fb73 	bl	80121f8 <__sinit>
 8014b12:	4b1c      	ldr	r3, [pc, #112]	; (8014b84 <_putc_r+0x84>)
 8014b14:	429c      	cmp	r4, r3
 8014b16:	d124      	bne.n	8014b62 <_putc_r+0x62>
 8014b18:	6874      	ldr	r4, [r6, #4]
 8014b1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014b1c:	07d8      	lsls	r0, r3, #31
 8014b1e:	d405      	bmi.n	8014b2c <_putc_r+0x2c>
 8014b20:	89a3      	ldrh	r3, [r4, #12]
 8014b22:	0599      	lsls	r1, r3, #22
 8014b24:	d402      	bmi.n	8014b2c <_putc_r+0x2c>
 8014b26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b28:	f7fd fc29 	bl	801237e <__retarget_lock_acquire_recursive>
 8014b2c:	68a3      	ldr	r3, [r4, #8]
 8014b2e:	3b01      	subs	r3, #1
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	60a3      	str	r3, [r4, #8]
 8014b34:	da05      	bge.n	8014b42 <_putc_r+0x42>
 8014b36:	69a2      	ldr	r2, [r4, #24]
 8014b38:	4293      	cmp	r3, r2
 8014b3a:	db1c      	blt.n	8014b76 <_putc_r+0x76>
 8014b3c:	b2eb      	uxtb	r3, r5
 8014b3e:	2b0a      	cmp	r3, #10
 8014b40:	d019      	beq.n	8014b76 <_putc_r+0x76>
 8014b42:	6823      	ldr	r3, [r4, #0]
 8014b44:	1c5a      	adds	r2, r3, #1
 8014b46:	6022      	str	r2, [r4, #0]
 8014b48:	701d      	strb	r5, [r3, #0]
 8014b4a:	b2ed      	uxtb	r5, r5
 8014b4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014b4e:	07da      	lsls	r2, r3, #31
 8014b50:	d405      	bmi.n	8014b5e <_putc_r+0x5e>
 8014b52:	89a3      	ldrh	r3, [r4, #12]
 8014b54:	059b      	lsls	r3, r3, #22
 8014b56:	d402      	bmi.n	8014b5e <_putc_r+0x5e>
 8014b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b5a:	f7fd fc11 	bl	8012380 <__retarget_lock_release_recursive>
 8014b5e:	4628      	mov	r0, r5
 8014b60:	bd70      	pop	{r4, r5, r6, pc}
 8014b62:	4b09      	ldr	r3, [pc, #36]	; (8014b88 <_putc_r+0x88>)
 8014b64:	429c      	cmp	r4, r3
 8014b66:	d101      	bne.n	8014b6c <_putc_r+0x6c>
 8014b68:	68b4      	ldr	r4, [r6, #8]
 8014b6a:	e7d6      	b.n	8014b1a <_putc_r+0x1a>
 8014b6c:	4b07      	ldr	r3, [pc, #28]	; (8014b8c <_putc_r+0x8c>)
 8014b6e:	429c      	cmp	r4, r3
 8014b70:	bf08      	it	eq
 8014b72:	68f4      	ldreq	r4, [r6, #12]
 8014b74:	e7d1      	b.n	8014b1a <_putc_r+0x1a>
 8014b76:	4629      	mov	r1, r5
 8014b78:	4622      	mov	r2, r4
 8014b7a:	4630      	mov	r0, r6
 8014b7c:	f7fe fa50 	bl	8013020 <__swbuf_r>
 8014b80:	4605      	mov	r5, r0
 8014b82:	e7e3      	b.n	8014b4c <_putc_r+0x4c>
 8014b84:	08015768 	.word	0x08015768
 8014b88:	08015788 	.word	0x08015788
 8014b8c:	08015748 	.word	0x08015748

08014b90 <_read_r>:
 8014b90:	b538      	push	{r3, r4, r5, lr}
 8014b92:	4d07      	ldr	r5, [pc, #28]	; (8014bb0 <_read_r+0x20>)
 8014b94:	4604      	mov	r4, r0
 8014b96:	4608      	mov	r0, r1
 8014b98:	4611      	mov	r1, r2
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	602a      	str	r2, [r5, #0]
 8014b9e:	461a      	mov	r2, r3
 8014ba0:	f7ec ffd4 	bl	8001b4c <_read>
 8014ba4:	1c43      	adds	r3, r0, #1
 8014ba6:	d102      	bne.n	8014bae <_read_r+0x1e>
 8014ba8:	682b      	ldr	r3, [r5, #0]
 8014baa:	b103      	cbz	r3, 8014bae <_read_r+0x1e>
 8014bac:	6023      	str	r3, [r4, #0]
 8014bae:	bd38      	pop	{r3, r4, r5, pc}
 8014bb0:	2400d284 	.word	0x2400d284

08014bb4 <__assert_func>:
 8014bb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014bb6:	4614      	mov	r4, r2
 8014bb8:	461a      	mov	r2, r3
 8014bba:	4b09      	ldr	r3, [pc, #36]	; (8014be0 <__assert_func+0x2c>)
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	4605      	mov	r5, r0
 8014bc0:	68d8      	ldr	r0, [r3, #12]
 8014bc2:	b14c      	cbz	r4, 8014bd8 <__assert_func+0x24>
 8014bc4:	4b07      	ldr	r3, [pc, #28]	; (8014be4 <__assert_func+0x30>)
 8014bc6:	9100      	str	r1, [sp, #0]
 8014bc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014bcc:	4906      	ldr	r1, [pc, #24]	; (8014be8 <__assert_func+0x34>)
 8014bce:	462b      	mov	r3, r5
 8014bd0:	f000 f80e 	bl	8014bf0 <fiprintf>
 8014bd4:	f000 f85f 	bl	8014c96 <abort>
 8014bd8:	4b04      	ldr	r3, [pc, #16]	; (8014bec <__assert_func+0x38>)
 8014bda:	461c      	mov	r4, r3
 8014bdc:	e7f3      	b.n	8014bc6 <__assert_func+0x12>
 8014bde:	bf00      	nop
 8014be0:	24000118 	.word	0x24000118
 8014be4:	080159dd 	.word	0x080159dd
 8014be8:	080159ea 	.word	0x080159ea
 8014bec:	08015a18 	.word	0x08015a18

08014bf0 <fiprintf>:
 8014bf0:	b40e      	push	{r1, r2, r3}
 8014bf2:	b503      	push	{r0, r1, lr}
 8014bf4:	4601      	mov	r1, r0
 8014bf6:	ab03      	add	r3, sp, #12
 8014bf8:	4805      	ldr	r0, [pc, #20]	; (8014c10 <fiprintf+0x20>)
 8014bfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bfe:	6800      	ldr	r0, [r0, #0]
 8014c00:	9301      	str	r3, [sp, #4]
 8014c02:	f7ff fe4d 	bl	80148a0 <_vfiprintf_r>
 8014c06:	b002      	add	sp, #8
 8014c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8014c0c:	b003      	add	sp, #12
 8014c0e:	4770      	bx	lr
 8014c10:	24000118 	.word	0x24000118

08014c14 <_fstat_r>:
 8014c14:	b538      	push	{r3, r4, r5, lr}
 8014c16:	4d07      	ldr	r5, [pc, #28]	; (8014c34 <_fstat_r+0x20>)
 8014c18:	2300      	movs	r3, #0
 8014c1a:	4604      	mov	r4, r0
 8014c1c:	4608      	mov	r0, r1
 8014c1e:	4611      	mov	r1, r2
 8014c20:	602b      	str	r3, [r5, #0]
 8014c22:	f7ec ffd8 	bl	8001bd6 <_fstat>
 8014c26:	1c43      	adds	r3, r0, #1
 8014c28:	d102      	bne.n	8014c30 <_fstat_r+0x1c>
 8014c2a:	682b      	ldr	r3, [r5, #0]
 8014c2c:	b103      	cbz	r3, 8014c30 <_fstat_r+0x1c>
 8014c2e:	6023      	str	r3, [r4, #0]
 8014c30:	bd38      	pop	{r3, r4, r5, pc}
 8014c32:	bf00      	nop
 8014c34:	2400d284 	.word	0x2400d284

08014c38 <_isatty_r>:
 8014c38:	b538      	push	{r3, r4, r5, lr}
 8014c3a:	4d06      	ldr	r5, [pc, #24]	; (8014c54 <_isatty_r+0x1c>)
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	4604      	mov	r4, r0
 8014c40:	4608      	mov	r0, r1
 8014c42:	602b      	str	r3, [r5, #0]
 8014c44:	f7ec ffd7 	bl	8001bf6 <_isatty>
 8014c48:	1c43      	adds	r3, r0, #1
 8014c4a:	d102      	bne.n	8014c52 <_isatty_r+0x1a>
 8014c4c:	682b      	ldr	r3, [r5, #0]
 8014c4e:	b103      	cbz	r3, 8014c52 <_isatty_r+0x1a>
 8014c50:	6023      	str	r3, [r4, #0]
 8014c52:	bd38      	pop	{r3, r4, r5, pc}
 8014c54:	2400d284 	.word	0x2400d284

08014c58 <__ascii_mbtowc>:
 8014c58:	b082      	sub	sp, #8
 8014c5a:	b901      	cbnz	r1, 8014c5e <__ascii_mbtowc+0x6>
 8014c5c:	a901      	add	r1, sp, #4
 8014c5e:	b142      	cbz	r2, 8014c72 <__ascii_mbtowc+0x1a>
 8014c60:	b14b      	cbz	r3, 8014c76 <__ascii_mbtowc+0x1e>
 8014c62:	7813      	ldrb	r3, [r2, #0]
 8014c64:	600b      	str	r3, [r1, #0]
 8014c66:	7812      	ldrb	r2, [r2, #0]
 8014c68:	1e10      	subs	r0, r2, #0
 8014c6a:	bf18      	it	ne
 8014c6c:	2001      	movne	r0, #1
 8014c6e:	b002      	add	sp, #8
 8014c70:	4770      	bx	lr
 8014c72:	4610      	mov	r0, r2
 8014c74:	e7fb      	b.n	8014c6e <__ascii_mbtowc+0x16>
 8014c76:	f06f 0001 	mvn.w	r0, #1
 8014c7a:	e7f8      	b.n	8014c6e <__ascii_mbtowc+0x16>

08014c7c <__ascii_wctomb>:
 8014c7c:	b149      	cbz	r1, 8014c92 <__ascii_wctomb+0x16>
 8014c7e:	2aff      	cmp	r2, #255	; 0xff
 8014c80:	bf85      	ittet	hi
 8014c82:	238a      	movhi	r3, #138	; 0x8a
 8014c84:	6003      	strhi	r3, [r0, #0]
 8014c86:	700a      	strbls	r2, [r1, #0]
 8014c88:	f04f 30ff 	movhi.w	r0, #4294967295
 8014c8c:	bf98      	it	ls
 8014c8e:	2001      	movls	r0, #1
 8014c90:	4770      	bx	lr
 8014c92:	4608      	mov	r0, r1
 8014c94:	4770      	bx	lr

08014c96 <abort>:
 8014c96:	b508      	push	{r3, lr}
 8014c98:	2006      	movs	r0, #6
 8014c9a:	f000 f82b 	bl	8014cf4 <raise>
 8014c9e:	2001      	movs	r0, #1
 8014ca0:	f7ec ff4a 	bl	8001b38 <_exit>

08014ca4 <_raise_r>:
 8014ca4:	291f      	cmp	r1, #31
 8014ca6:	b538      	push	{r3, r4, r5, lr}
 8014ca8:	4604      	mov	r4, r0
 8014caa:	460d      	mov	r5, r1
 8014cac:	d904      	bls.n	8014cb8 <_raise_r+0x14>
 8014cae:	2316      	movs	r3, #22
 8014cb0:	6003      	str	r3, [r0, #0]
 8014cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8014cb6:	bd38      	pop	{r3, r4, r5, pc}
 8014cb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014cba:	b112      	cbz	r2, 8014cc2 <_raise_r+0x1e>
 8014cbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014cc0:	b94b      	cbnz	r3, 8014cd6 <_raise_r+0x32>
 8014cc2:	4620      	mov	r0, r4
 8014cc4:	f000 f830 	bl	8014d28 <_getpid_r>
 8014cc8:	462a      	mov	r2, r5
 8014cca:	4601      	mov	r1, r0
 8014ccc:	4620      	mov	r0, r4
 8014cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014cd2:	f000 b817 	b.w	8014d04 <_kill_r>
 8014cd6:	2b01      	cmp	r3, #1
 8014cd8:	d00a      	beq.n	8014cf0 <_raise_r+0x4c>
 8014cda:	1c59      	adds	r1, r3, #1
 8014cdc:	d103      	bne.n	8014ce6 <_raise_r+0x42>
 8014cde:	2316      	movs	r3, #22
 8014ce0:	6003      	str	r3, [r0, #0]
 8014ce2:	2001      	movs	r0, #1
 8014ce4:	e7e7      	b.n	8014cb6 <_raise_r+0x12>
 8014ce6:	2400      	movs	r4, #0
 8014ce8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014cec:	4628      	mov	r0, r5
 8014cee:	4798      	blx	r3
 8014cf0:	2000      	movs	r0, #0
 8014cf2:	e7e0      	b.n	8014cb6 <_raise_r+0x12>

08014cf4 <raise>:
 8014cf4:	4b02      	ldr	r3, [pc, #8]	; (8014d00 <raise+0xc>)
 8014cf6:	4601      	mov	r1, r0
 8014cf8:	6818      	ldr	r0, [r3, #0]
 8014cfa:	f7ff bfd3 	b.w	8014ca4 <_raise_r>
 8014cfe:	bf00      	nop
 8014d00:	24000118 	.word	0x24000118

08014d04 <_kill_r>:
 8014d04:	b538      	push	{r3, r4, r5, lr}
 8014d06:	4d07      	ldr	r5, [pc, #28]	; (8014d24 <_kill_r+0x20>)
 8014d08:	2300      	movs	r3, #0
 8014d0a:	4604      	mov	r4, r0
 8014d0c:	4608      	mov	r0, r1
 8014d0e:	4611      	mov	r1, r2
 8014d10:	602b      	str	r3, [r5, #0]
 8014d12:	f7ec ff01 	bl	8001b18 <_kill>
 8014d16:	1c43      	adds	r3, r0, #1
 8014d18:	d102      	bne.n	8014d20 <_kill_r+0x1c>
 8014d1a:	682b      	ldr	r3, [r5, #0]
 8014d1c:	b103      	cbz	r3, 8014d20 <_kill_r+0x1c>
 8014d1e:	6023      	str	r3, [r4, #0]
 8014d20:	bd38      	pop	{r3, r4, r5, pc}
 8014d22:	bf00      	nop
 8014d24:	2400d284 	.word	0x2400d284

08014d28 <_getpid_r>:
 8014d28:	f7ec beee 	b.w	8001b08 <_getpid>

08014d2c <_init>:
 8014d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d2e:	bf00      	nop
 8014d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d32:	bc08      	pop	{r3}
 8014d34:	469e      	mov	lr, r3
 8014d36:	4770      	bx	lr

08014d38 <_fini>:
 8014d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d3a:	bf00      	nop
 8014d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d3e:	bc08      	pop	{r3}
 8014d40:	469e      	mov	lr, r3
 8014d42:	4770      	bx	lr
