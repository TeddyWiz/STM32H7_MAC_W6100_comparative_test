
Nucleo_H723_Ethernet_Iperf_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ab30  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035ac  0801ae00  0801ae00  0002ae00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e3ac  0801e3ac  0002e3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e3b4  0801e3b4  0002e3b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801e3b8  0801e3b8  0002e3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  24000000  0801e3bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .Rx_PoolSection 00004983  24000090  0801e44c  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .RxDecripSection 00000060  24004a14  08022dcf  00034a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .TxDecripSection 00000060  24004a74  08022e2f  00034a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00010800  24004ad4  08022e8f  00034ad4  2**2
                  ALLOC
 11 ._user_heap_stack 00002004  240152d4  08022e8f  000352d4  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00034ad4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00034b02  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003b20a  00000000  00000000  00034b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000083d1  00000000  00000000  0006fd4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000028d0  00000000  00000000  00078120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000203f  00000000  00000000  0007a9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000446da  00000000  00000000  0007ca2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00041f75  00000000  00000000  000c1109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00173272  00000000  00000000  0010307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000b2f8  00000000  00000000  002762f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000094  00000000  00000000  002815e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24004ad4 	.word	0x24004ad4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801ade8 	.word	0x0801ade8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24004ad8 	.word	0x24004ad8
 800030c:	0801ade8 	.word	0x0801ade8

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
   __BKPT(0);
 80006b6:	be00      	bkpt	0x0000
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <lwiperf_list_add>:


/** Add an iperf session to the 'active' list */
static void
lwiperf_list_add(lwiperf_state_base_t *item)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  item->next = lwiperf_all_connections;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <lwiperf_list_add+0x24>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	601a      	str	r2, [r3, #0]
  lwiperf_all_connections = item;
 80006d4:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <lwiperf_list_add+0x24>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6013      	str	r3, [r2, #0]
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	24004af0 	.word	0x24004af0

080006ec <lwiperf_list_remove>:

/** Remove an iperf session from the 'active' list */
static void
lwiperf_list_remove(lwiperf_state_base_t *item)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *prev = NULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <lwiperf_list_remove+0x78>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	e029      	b.n	8000754 <lwiperf_list_remove+0x68>
    if (iter == item) {
 8000700:	68ba      	ldr	r2, [r7, #8]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	429a      	cmp	r2, r3
 8000706:	d120      	bne.n	800074a <lwiperf_list_remove+0x5e>
      if (prev == NULL) {
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d104      	bne.n	8000718 <lwiperf_list_remove+0x2c>
        lwiperf_all_connections = iter->next;
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a14      	ldr	r2, [pc, #80]	; (8000764 <lwiperf_list_remove+0x78>)
 8000714:	6013      	str	r3, [r2, #0]
 8000716:	e003      	b.n	8000720 <lwiperf_list_remove+0x34>
      } else {
        prev->next = iter->next;
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	601a      	str	r2, [r3, #0]
      }
      /* @debug: ensure this item is listed only once */
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	e00c      	b.n	8000742 <lwiperf_list_remove+0x56>
        LWIP_ASSERT("duplicate entry", iter != item);
 8000728:	68ba      	ldr	r2, [r7, #8]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	429a      	cmp	r2, r3
 800072e:	d105      	bne.n	800073c <lwiperf_list_remove+0x50>
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <lwiperf_list_remove+0x7c>)
 8000732:	22d0      	movs	r2, #208	; 0xd0
 8000734:	490d      	ldr	r1, [pc, #52]	; (800076c <lwiperf_list_remove+0x80>)
 8000736:	480e      	ldr	r0, [pc, #56]	; (8000770 <lwiperf_list_remove+0x84>)
 8000738:	f019 fb96 	bl	8019e68 <iprintf>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1ef      	bne.n	8000728 <lwiperf_list_remove+0x3c>
      }
      break;
 8000748:	e008      	b.n	800075c <lwiperf_list_remove+0x70>
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d1d2      	bne.n	8000700 <lwiperf_list_remove+0x14>
    }
  }
}
 800075a:	bf00      	nop
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	24004af0 	.word	0x24004af0
 8000768:	0801ae00 	.word	0x0801ae00
 800076c:	0801ae18 	.word	0x0801ae18
 8000770:	0801ae28 	.word	0x0801ae28

08000774 <lwiperf_list_find>:

static lwiperf_state_base_t *
lwiperf_list_find(lwiperf_state_base_t *item)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <lwiperf_list_find+0x38>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	e008      	b.n	8000796 <lwiperf_list_find+0x22>
    if (iter == item) {
 8000784:	68fa      	ldr	r2, [r7, #12]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	429a      	cmp	r2, r3
 800078a:	d101      	bne.n	8000790 <lwiperf_list_find+0x1c>
      return item;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	e006      	b.n	800079e <lwiperf_list_find+0x2a>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d1f3      	bne.n	8000784 <lwiperf_list_find+0x10>
    }
  }
  return NULL;
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	24004af0 	.word	0x24004af0

080007b0 <lwip_tcp_conn_report>:

/** Call the report function of an iperf tcp session */
static void
lwip_tcp_conn_report(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 80007b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b2:	b08d      	sub	sp, #52	; 0x34
 80007b4:	af06      	add	r7, sp, #24
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d038      	beq.n	8000834 <lwip_tcp_conn_report+0x84>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d034      	beq.n	8000834 <lwip_tcp_conn_report+0x84>
    u32_t now, duration_ms, bandwidth_kbitpsec;
    now = sys_now();
 80007ca:	f009 fef9 	bl	800a5c0 <sys_now>
 80007ce:	6138      	str	r0, [r7, #16]
    duration_ms = now - conn->time_started;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	695b      	ldr	r3, [r3, #20]
 80007d4:	693a      	ldr	r2, [r7, #16]
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	60fb      	str	r3, [r7, #12]
    if (duration_ms == 0) {
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d102      	bne.n	80007e6 <lwip_tcp_conn_report+0x36>
      bandwidth_kbitpsec = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	e006      	b.n	80007f4 <lwip_tcp_conn_report+0x44>
    } else {
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f0:	00db      	lsls	r3, r3, #3
 80007f2:	617b      	str	r3, [r7, #20]
    }
    conn->report_fn(conn->report_arg, report_type,
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	699c      	ldr	r4, [r3, #24]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	69dd      	ldr	r5, [r3, #28]
                    &conn->conn_pcb->local_ip, conn->conn_pcb->local_port,
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	691b      	ldr	r3, [r3, #16]
 8000800:	469e      	mov	lr, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	691b      	ldr	r3, [r3, #16]
    conn->report_fn(conn->report_arg, report_type,
 8000806:	f8b3 c016 	ldrh.w	ip, [r3, #22]
                    &conn->conn_pcb->remote_ip, conn->conn_pcb->remote_port,
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	691b      	ldr	r3, [r3, #16]
 800080e:	3304      	adds	r3, #4
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	6912      	ldr	r2, [r2, #16]
    conn->report_fn(conn->report_arg, report_type,
 8000814:	8b12      	ldrh	r2, [r2, #24]
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800081a:	78fe      	ldrb	r6, [r7, #3]
 800081c:	6978      	ldr	r0, [r7, #20]
 800081e:	9004      	str	r0, [sp, #16]
 8000820:	68f8      	ldr	r0, [r7, #12]
 8000822:	9003      	str	r0, [sp, #12]
 8000824:	9102      	str	r1, [sp, #8]
 8000826:	9201      	str	r2, [sp, #4]
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	4663      	mov	r3, ip
 800082c:	4672      	mov	r2, lr
 800082e:	4631      	mov	r1, r6
 8000830:	4628      	mov	r0, r5
 8000832:	47a0      	blx	r4
                    conn->bytes_transferred, duration_ms, bandwidth_kbitpsec);
  }
}
 8000834:	bf00      	nop
 8000836:	371c      	adds	r7, #28
 8000838:	46bd      	mov	sp, r7
 800083a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800083c <lwiperf_tcp_close>:

/** Close an iperf tcp session */
static void
lwiperf_tcp_close(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	70fb      	strb	r3, [r7, #3]
  err_t err;

  lwiperf_list_remove(&conn->base);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ff4e 	bl	80006ec <lwiperf_list_remove>
  lwip_tcp_conn_report(conn, report_type);
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	4619      	mov	r1, r3
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ffab 	bl	80007b0 <lwip_tcp_conn_report>
  if (conn->conn_pcb != NULL) {
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	691b      	ldr	r3, [r3, #16]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d02f      	beq.n	80008c2 <lwiperf_tcp_close+0x86>
    tcp_arg(conn->conn_pcb, NULL);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	691b      	ldr	r3, [r3, #16]
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f011 fe37 	bl	80124dc <tcp_arg>
    tcp_poll(conn->conn_pcb, NULL, 0);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	691b      	ldr	r3, [r3, #16]
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f011 fec6 	bl	8012608 <tcp_poll>
    tcp_sent(conn->conn_pcb, NULL);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	691b      	ldr	r3, [r3, #16]
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f011 fe60 	bl	8012548 <tcp_sent>
    tcp_recv(conn->conn_pcb, NULL);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	691b      	ldr	r3, [r3, #16]
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f011 fe36 	bl	8012500 <tcp_recv>
    tcp_err(conn->conn_pcb, NULL);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	691b      	ldr	r3, [r3, #16]
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f011 fe78 	bl	8012590 <tcp_err>
    err = tcp_close(conn->conn_pcb);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	691b      	ldr	r3, [r3, #16]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f010 fb63 	bl	8010f70 <tcp_close>
 80008aa:	4603      	mov	r3, r0
 80008ac:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80008ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d017      	beq.n	80008e6 <lwiperf_tcp_close+0xaa>
      /* don't want to wait for free memory here... */
      tcp_abort(conn->conn_pcb);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	691b      	ldr	r3, [r3, #16]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f010 fc46 	bl	801114c <tcp_abort>
 80008c0:	e011      	b.n	80008e6 <lwiperf_tcp_close+0xaa>
    }
  } else {
    /* no conn pcb, this is the listener pcb */
    err = tcp_close(conn->server_pcb);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f010 fb52 	bl	8010f70 <tcp_close>
 80008cc:	4603      	mov	r3, r0
 80008ce:	73fb      	strb	r3, [r7, #15]
    LWIP_ASSERT("error", err == ERR_OK);
 80008d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d006      	beq.n	80008e6 <lwiperf_tcp_close+0xaa>
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <lwiperf_tcp_close+0xb8>)
 80008da:	f240 120d 	movw	r2, #269	; 0x10d
 80008de:	4906      	ldr	r1, [pc, #24]	; (80008f8 <lwiperf_tcp_close+0xbc>)
 80008e0:	4806      	ldr	r0, [pc, #24]	; (80008fc <lwiperf_tcp_close+0xc0>)
 80008e2:	f019 fac1 	bl	8019e68 <iprintf>
  }
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f00e fb6e 	bl	800efc8 <mem_free>
}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	0801ae00 	.word	0x0801ae00
 80008f8:	0801ae50 	.word	0x0801ae50
 80008fc:	0801ae28 	.word	0x0801ae28

08000900 <lwiperf_tcp_client_send_more>:

/** Try to send more data on an iperf tcp session */
static err_t
lwiperf_tcp_client_send_more(lwiperf_state_tcp_t *conn)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08c      	sub	sp, #48	; 0x30
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  u16_t txlen;
  u16_t txlen_max;
  void *txptr;
  u8_t apiflags;

  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d007      	beq.n	800091e <lwiperf_tcp_client_send_more+0x1e>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	791b      	ldrb	r3, [r3, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d003      	beq.n	800091e <lwiperf_tcp_client_send_more+0x1e>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	795b      	ldrb	r3, [r3, #5]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d006      	beq.n	800092c <lwiperf_tcp_client_send_more+0x2c>
 800091e:	4b61      	ldr	r3, [pc, #388]	; (8000aa4 <lwiperf_tcp_client_send_more+0x1a4>)
 8000920:	f240 121d 	movw	r2, #285	; 0x11d
 8000924:	4960      	ldr	r1, [pc, #384]	; (8000aa8 <lwiperf_tcp_client_send_more+0x1a8>)
 8000926:	4861      	ldr	r0, [pc, #388]	; (8000aac <lwiperf_tcp_client_send_more+0x1ac>)
 8000928:	f019 fa9e 	bl	8019e68 <iprintf>

  do {
    send_more = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (conn->settings.amount & PP_HTONL(0x80000000)) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000938:	2b00      	cmp	r3, #0
 800093a:	d01f      	beq.n	800097c <lwiperf_tcp_client_send_more+0x7c>
      /* this session is time-limited */
      u32_t now = sys_now();
 800093c:	f009 fe40 	bl	800a5c0 <sys_now>
 8000940:	61b8      	str	r0, [r7, #24]
      u32_t diff_ms = now - conn->time_started;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	69ba      	ldr	r2, [r7, #24]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	617b      	str	r3, [r7, #20]
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000950:	4618      	mov	r0, r3
 8000952:	f00e f8f6 	bl	800eb42 <lwip_htonl>
 8000956:	4603      	mov	r3, r0
 8000958:	425b      	negs	r3, r3
 800095a:	613b      	str	r3, [r7, #16]
      u32_t time_ms = time * 10;
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	4613      	mov	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	4413      	add	r3, r2
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
      if (diff_ms >= time_ms) {
 8000968:	697a      	ldr	r2, [r7, #20]
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	429a      	cmp	r2, r3
 800096e:	d316      	bcc.n	800099e <lwiperf_tcp_client_send_more+0x9e>
        /* time specified by the client is over -> close the connection */
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 8000970:	2101      	movs	r1, #1
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ff62 	bl	800083c <lwiperf_tcp_close>
        return ERR_OK;
 8000978:	2300      	movs	r3, #0
 800097a:	e08f      	b.n	8000a9c <lwiperf_tcp_client_send_more+0x19c>
      }
    } else {
      /* this session is byte-limited */
      u32_t amount_bytes = lwip_htonl(conn->settings.amount);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000980:	4618      	mov	r0, r3
 8000982:	f00e f8de 	bl	800eb42 <lwip_htonl>
 8000986:	61f8      	str	r0, [r7, #28]
      /* @todo: this can send up to 1*MSS more than requested... */
      if (amount_bytes >= conn->bytes_transferred) {
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098c:	69fa      	ldr	r2, [r7, #28]
 800098e:	429a      	cmp	r2, r3
 8000990:	d305      	bcc.n	800099e <lwiperf_tcp_client_send_more+0x9e>
        /* all requested bytes transferred -> close the connection */
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 8000992:	2101      	movs	r1, #1
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff ff51 	bl	800083c <lwiperf_tcp_close>
        return ERR_OK;
 800099a:	2300      	movs	r3, #0
 800099c:	e07e      	b.n	8000a9c <lwiperf_tcp_client_send_more+0x19c>
      }
    }

    if (conn->bytes_transferred < 24) {
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a2:	2b17      	cmp	r3, #23
 80009a4:	d810      	bhi.n	80009c8 <lwiperf_tcp_client_send_more+0xc8>
      /* transmit the settings a first time */
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b0:	4413      	add	r3, r2
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	f1c3 0318 	rsb	r3, r3, #24
 80009be:	853b      	strh	r3, [r7, #40]	; 0x28
      apiflags = TCP_WRITE_FLAG_COPY;
 80009c0:	2301      	movs	r3, #1
 80009c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80009c6:	e034      	b.n	8000a32 <lwiperf_tcp_client_send_more+0x132>
    } else if (conn->bytes_transferred < 48) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009cc:	2b2f      	cmp	r3, #47	; 0x2f
 80009ce:	d813      	bhi.n	80009f8 <lwiperf_tcp_client_send_more+0xf8>
      /* transmit the settings a second time */
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009da:	3b18      	subs	r3, #24
 80009dc:	4413      	add	r3, r2
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 80009ea:	853b      	strh	r3, [r7, #40]	; 0x28
      apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
 80009ec:	2303      	movs	r3, #3
 80009ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      send_more = 1;
 80009f2:	2301      	movs	r3, #1
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009f6:	e01c      	b.n	8000a32 <lwiperf_tcp_client_send_more+0x132>
    } else {
      /* transmit data */
      /* @todo: every x bytes, transmit the settings again */
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80009fc:	4b2c      	ldr	r3, [pc, #176]	; (8000ab0 <lwiperf_tcp_client_send_more+0x1b0>)
 80009fe:	fba3 2301 	umull	r2, r3, r3, r1
 8000a02:	08da      	lsrs	r2, r3, #3
 8000a04:	4613      	mov	r3, r2
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	4413      	add	r3, r2
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	1aca      	subs	r2, r1, r3
 8000a0e:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <lwiperf_tcp_client_send_more+0x1b4>)
 8000a10:	4413      	add	r3, r2
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = TCP_MSS;
 8000a14:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8000a18:	853b      	strh	r3, [r7, #40]	; 0x28
      if (conn->bytes_transferred == 48) { /* @todo: fix this for intermediate settings, too */
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1e:	2b30      	cmp	r3, #48	; 0x30
 8000a20:	d102      	bne.n	8000a28 <lwiperf_tcp_client_send_more+0x128>
        txlen_max = TCP_MSS - 24;
 8000a22:	f240 539c 	movw	r3, #1436	; 0x59c
 8000a26:	853b      	strh	r3, [r7, #40]	; 0x28
      }
      apiflags = 0; /* no copying needed */
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      send_more = 1;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    txlen = txlen_max;
 8000a32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000a34:	857b      	strh	r3, [r7, #42]	; 0x2a
    do {
      err = tcp_write(conn->conn_pcb, txptr, txlen, apiflags);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6918      	ldr	r0, [r3, #16]
 8000a3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a3e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8000a40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a42:	f014 fc97 	bl	8015374 <tcp_write>
 8000a46:	4603      	mov	r3, r0
 8000a48:	72fb      	strb	r3, [r7, #11]
      if (err ==  ERR_MEM) {
 8000a4a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a52:	d102      	bne.n	8000a5a <lwiperf_tcp_client_send_more+0x15a>
        txlen /= 2;
 8000a54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000a56:	085b      	lsrs	r3, r3, #1
 8000a58:	857b      	strh	r3, [r7, #42]	; 0x2a
      }
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 8000a5a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a62:	d104      	bne.n	8000a6e <lwiperf_tcp_client_send_more+0x16e>
 8000a64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000a66:	f240 22d9 	movw	r2, #729	; 0x2d9
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d8e3      	bhi.n	8000a36 <lwiperf_tcp_client_send_more+0x136>

    if (err == ERR_OK) {
 8000a6e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d106      	bne.n	8000a84 <lwiperf_tcp_client_send_more+0x184>
      conn->bytes_transferred += txlen;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000a7c:	441a      	add	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
 8000a82:	e001      	b.n	8000a88 <lwiperf_tcp_client_send_more+0x188>
    } else {
      send_more = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  } while (send_more);
 8000a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	f47f af4e 	bne.w	800092c <lwiperf_tcp_client_send_more+0x2c>

  tcp_output(conn->conn_pcb);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f015 fa59 	bl	8015f4c <tcp_output>
  return ERR_OK;
 8000a9a:	2300      	movs	r3, #0
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3730      	adds	r7, #48	; 0x30
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	0801ae00 	.word	0x0801ae00
 8000aa8:	0801ae58 	.word	0x0801ae58
 8000aac:	0801ae28 	.word	0x0801ae28
 8000ab0:	cccccccd 	.word	0xcccccccd
 8000ab4:	0801db04 	.word	0x0801db04

08000ab8 <lwiperf_tcp_client_sent>:

/** TCP sent callback, try to send more data */
static err_t
lwiperf_tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	80fb      	strh	r3, [r7, #6]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	617b      	str	r3, [r7, #20]
  /* @todo: check 'len' (e.g. to time ACK of all data)? for now, we just send more... */
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	691b      	ldr	r3, [r3, #16]
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d006      	beq.n	8000ae2 <lwiperf_tcp_client_sent+0x2a>
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <lwiperf_tcp_client_sent+0x44>)
 8000ad6:	f44f 72b3 	mov.w	r2, #358	; 0x166
 8000ada:	4909      	ldr	r1, [pc, #36]	; (8000b00 <lwiperf_tcp_client_sent+0x48>)
 8000adc:	4809      	ldr	r0, [pc, #36]	; (8000b04 <lwiperf_tcp_client_sent+0x4c>)
 8000ade:	f019 f9c3 	bl	8019e68 <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  conn->poll_count = 0;
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f883 2020 	strb.w	r2, [r3, #32]

  return lwiperf_tcp_client_send_more(conn);
 8000aea:	6978      	ldr	r0, [r7, #20]
 8000aec:	f7ff ff08 	bl	8000900 <lwiperf_tcp_client_send_more>
 8000af0:	4603      	mov	r3, r0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	0801ae00 	.word	0x0801ae00
 8000b00:	0801ae68 	.word	0x0801ae68
 8000b04:	0801ae28 	.word	0x0801ae28

08000b08 <lwiperf_tcp_client_connected>:

/** TCP connected callback (active connection), send data now */
static err_t
lwiperf_tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	4613      	mov	r3, r2
 8000b14:	71fb      	strb	r3, [r7, #7]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	691b      	ldr	r3, [r3, #16]
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d006      	beq.n	8000b32 <lwiperf_tcp_client_connected+0x2a>
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <lwiperf_tcp_client_connected+0x60>)
 8000b26:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8000b2a:	4910      	ldr	r1, [pc, #64]	; (8000b6c <lwiperf_tcp_client_connected+0x64>)
 8000b2c:	4810      	ldr	r0, [pc, #64]	; (8000b70 <lwiperf_tcp_client_connected+0x68>)
 8000b2e:	f019 f99b 	bl	8019e68 <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  if (err != ERR_OK) {
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d005      	beq.n	8000b46 <lwiperf_tcp_client_connected+0x3e>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8000b3a:	2105      	movs	r1, #5
 8000b3c:	6978      	ldr	r0, [r7, #20]
 8000b3e:	f7ff fe7d 	bl	800083c <lwiperf_tcp_close>
    return ERR_OK;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e00c      	b.n	8000b60 <lwiperf_tcp_client_connected+0x58>
  }
  conn->poll_count = 0;
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f883 2020 	strb.w	r2, [r3, #32]
  conn->time_started = sys_now();
 8000b4e:	f009 fd37 	bl	800a5c0 <sys_now>
 8000b52:	4602      	mov	r2, r0
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	615a      	str	r2, [r3, #20]
  return lwiperf_tcp_client_send_more(conn);
 8000b58:	6978      	ldr	r0, [r7, #20]
 8000b5a:	f7ff fed1 	bl	8000900 <lwiperf_tcp_client_send_more>
 8000b5e:	4603      	mov	r3, r0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	0801ae00 	.word	0x0801ae00
 8000b6c:	0801ae68 	.word	0x0801ae68
 8000b70:	0801ae28 	.word	0x0801ae28

08000b74 <lwiperf_tx_start_impl>:
 * receive test has finished.
 */
static err_t
lwiperf_tx_start_impl(const ip_addr_t *remote_ip, u16_t remote_port, lwiperf_settings_t *settings, lwiperf_report_fn report_fn,
                      void *report_arg, lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **new_conn)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	460b      	mov	r3, r1
 8000b82:	817b      	strh	r3, [r7, #10]
  err_t err;
  lwiperf_state_tcp_t *client_conn;
  struct tcp_pcb *newpcb;
  ip_addr_t remote_addr;

  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d106      	bne.n	8000b98 <lwiperf_tx_start_impl+0x24>
 8000b8a:	4b4a      	ldr	r3, [pc, #296]	; (8000cb4 <lwiperf_tx_start_impl+0x140>)
 8000b8c:	f240 128b 	movw	r2, #395	; 0x18b
 8000b90:	4949      	ldr	r1, [pc, #292]	; (8000cb8 <lwiperf_tx_start_impl+0x144>)
 8000b92:	484a      	ldr	r0, [pc, #296]	; (8000cbc <lwiperf_tx_start_impl+0x148>)
 8000b94:	f019 f968 	bl	8019e68 <iprintf>
  LWIP_ASSERT("remote_ip != NULL", settings != NULL);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d106      	bne.n	8000bac <lwiperf_tx_start_impl+0x38>
 8000b9e:	4b45      	ldr	r3, [pc, #276]	; (8000cb4 <lwiperf_tx_start_impl+0x140>)
 8000ba0:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8000ba4:	4944      	ldr	r1, [pc, #272]	; (8000cb8 <lwiperf_tx_start_impl+0x144>)
 8000ba6:	4845      	ldr	r0, [pc, #276]	; (8000cbc <lwiperf_tx_start_impl+0x148>)
 8000ba8:	f019 f95e 	bl	8019e68 <iprintf>
  LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8000bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d106      	bne.n	8000bc0 <lwiperf_tx_start_impl+0x4c>
 8000bb2:	4b40      	ldr	r3, [pc, #256]	; (8000cb4 <lwiperf_tx_start_impl+0x140>)
 8000bb4:	f240 128d 	movw	r2, #397	; 0x18d
 8000bb8:	4941      	ldr	r1, [pc, #260]	; (8000cc0 <lwiperf_tx_start_impl+0x14c>)
 8000bba:	4840      	ldr	r0, [pc, #256]	; (8000cbc <lwiperf_tx_start_impl+0x148>)
 8000bbc:	f019 f954 	bl	8019e68 <iprintf>
  *new_conn = NULL;
 8000bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]

  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8000bc6:	2048      	movs	r0, #72	; 0x48
 8000bc8:	f00e fb9e 	bl	800f308 <mem_malloc>
 8000bcc:	61f8      	str	r0, [r7, #28]
  if (client_conn == NULL) {
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <lwiperf_tx_start_impl+0x66>
    return ERR_MEM;
 8000bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd8:	e067      	b.n	8000caa <lwiperf_tx_start_impl+0x136>
  }
  newpcb = tcp_new_ip_type(IP_GET_TYPE(remote_ip));
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f011 fc70 	bl	80124c0 <tcp_new_ip_type>
 8000be0:	61b8      	str	r0, [r7, #24]
  if (newpcb == NULL) {
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d105      	bne.n	8000bf4 <lwiperf_tx_start_impl+0x80>
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 8000be8:	69f8      	ldr	r0, [r7, #28]
 8000bea:	f00e f9ed 	bl	800efc8 <mem_free>
    return ERR_MEM;
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf2:	e05a      	b.n	8000caa <lwiperf_tx_start_impl+0x136>
  }
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 8000bf4:	2248      	movs	r2, #72	; 0x48
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	69f8      	ldr	r0, [r7, #28]
 8000bfa:	f019 fa8b 	bl	801a114 <memset>
  client_conn->base.tcp = 1;
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	2201      	movs	r2, #1
 8000c02:	711a      	strb	r2, [r3, #4]
  client_conn->base.related_master_state = related_master_state;
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c08:	609a      	str	r2, [r3, #8]
  client_conn->conn_pcb = newpcb;
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	611a      	str	r2, [r3, #16]
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 8000c10:	f009 fcd6 	bl	800a5c0 <sys_now>
 8000c14:	4602      	mov	r2, r0
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	615a      	str	r2, [r3, #20]
  client_conn->report_fn = report_fn;
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	683a      	ldr	r2, [r7, #0]
 8000c1e:	619a      	str	r2, [r3, #24]
  client_conn->report_arg = report_arg;
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c24:	61da      	str	r2, [r3, #28]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	2204      	movs	r2, #4
 8000c2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  client_conn->bytes_transferred = 0;
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	2200      	movs	r2, #0
 8000c32:	625a      	str	r2, [r3, #36]	; 0x24
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	3328      	adds	r3, #40	; 0x28
 8000c38:	2218      	movs	r2, #24
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f019 fb33 	bl	801a2a8 <memcpy>
  client_conn->have_settings_buf = 1;
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	2201      	movs	r2, #1
 8000c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  tcp_arg(newpcb, client_conn);
 8000c4a:	69f9      	ldr	r1, [r7, #28]
 8000c4c:	69b8      	ldr	r0, [r7, #24]
 8000c4e:	f011 fc45 	bl	80124dc <tcp_arg>
  tcp_sent(newpcb, lwiperf_tcp_client_sent);
 8000c52:	491c      	ldr	r1, [pc, #112]	; (8000cc4 <lwiperf_tx_start_impl+0x150>)
 8000c54:	69b8      	ldr	r0, [r7, #24]
 8000c56:	f011 fc77 	bl	8012548 <tcp_sent>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	491a      	ldr	r1, [pc, #104]	; (8000cc8 <lwiperf_tx_start_impl+0x154>)
 8000c5e:	69b8      	ldr	r0, [r7, #24]
 8000c60:	f011 fcd2 	bl	8012608 <tcp_poll>
  tcp_err(newpcb, lwiperf_tcp_err);
 8000c64:	4919      	ldr	r1, [pc, #100]	; (8000ccc <lwiperf_tx_start_impl+0x158>)
 8000c66:	69b8      	ldr	r0, [r7, #24]
 8000c68:	f011 fc92 	bl	8012590 <tcp_err>

  ip_addr_copy(remote_addr, *remote_ip);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	613b      	str	r3, [r7, #16]

  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 8000c72:	897a      	ldrh	r2, [r7, #10]
 8000c74:	f107 0110 	add.w	r1, r7, #16
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <lwiperf_tx_start_impl+0x15c>)
 8000c7a:	69b8      	ldr	r0, [r7, #24]
 8000c7c:	f010 fce0 	bl	8011640 <tcp_connect>
 8000c80:	4603      	mov	r3, r0
 8000c82:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8000c84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d006      	beq.n	8000c9a <lwiperf_tx_start_impl+0x126>
    lwiperf_tcp_close(client_conn, LWIPERF_TCP_ABORTED_LOCAL);
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	69f8      	ldr	r0, [r7, #28]
 8000c90:	f7ff fdd4 	bl	800083c <lwiperf_tcp_close>
    return err;
 8000c94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c98:	e007      	b.n	8000caa <lwiperf_tx_start_impl+0x136>
  }
  lwiperf_list_add(&client_conn->base);
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fd11 	bl	80006c4 <lwiperf_list_add>
  *new_conn = client_conn;
 8000ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca4:	69fa      	ldr	r2, [r7, #28]
 8000ca6:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3720      	adds	r7, #32
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	0801ae00 	.word	0x0801ae00
 8000cb8:	0801ae78 	.word	0x0801ae78
 8000cbc:	0801ae28 	.word	0x0801ae28
 8000cc0:	0801ae8c 	.word	0x0801ae8c
 8000cc4:	08000ab9 	.word	0x08000ab9
 8000cc8:	08001019 	.word	0x08001019
 8000ccc:	08000ff9 	.word	0x08000ff9
 8000cd0:	08000b09 	.word	0x08000b09

08000cd4 <lwiperf_tx_start_passive>:

static err_t
lwiperf_tx_start_passive(lwiperf_state_tcp_t *conn)
{
 8000cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd6:	b089      	sub	sp, #36	; 0x24
 8000cd8:	af04      	add	r7, sp, #16
 8000cda:	6078      	str	r0, [r7, #4]
  err_t ret;
  lwiperf_state_tcp_t *new_conn = NULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f00d ff2c 	bl	800eb42 <lwip_htonl>
 8000cea:	4603      	mov	r3, r0
 8000cec:	81fb      	strh	r3, [r7, #14]

  ret = lwiperf_tx_start_impl(&conn->conn_pcb->remote_ip, remote_port, &conn->settings, conn->report_fn, conn->report_arg,
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	691b      	ldr	r3, [r3, #16]
 8000cf2:	1d18      	adds	r0, r3, #4
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	699e      	ldr	r6, [r3, #24]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	6892      	ldr	r2, [r2, #8]
 8000d06:	89fc      	ldrh	r4, [r7, #14]
 8000d08:	f107 0108 	add.w	r1, r7, #8
 8000d0c:	9102      	str	r1, [sp, #8]
 8000d0e:	9201      	str	r2, [sp, #4]
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	4633      	mov	r3, r6
 8000d14:	462a      	mov	r2, r5
 8000d16:	4621      	mov	r1, r4
 8000d18:	f7ff ff2c 	bl	8000b74 <lwiperf_tx_start_impl>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	737b      	strb	r3, [r7, #13]
    conn->base.related_master_state, &new_conn);
  if (ret == ERR_OK) {
 8000d20:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d10c      	bne.n	8000d42 <lwiperf_tx_start_passive+0x6e>
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d106      	bne.n	8000d3c <lwiperf_tx_start_passive+0x68>
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <lwiperf_tx_start_passive+0x7c>)
 8000d30:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8000d34:	4907      	ldr	r1, [pc, #28]	; (8000d54 <lwiperf_tx_start_passive+0x80>)
 8000d36:	4808      	ldr	r0, [pc, #32]	; (8000d58 <lwiperf_tx_start_passive+0x84>)
 8000d38:	f019 f896 	bl	8019e68 <iprintf>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	629a      	str	r2, [r3, #40]	; 0x28
  }
  return ret;
 8000d42:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	0801ae00 	.word	0x0801ae00
 8000d54:	0801ae8c 	.word	0x0801ae8c
 8000d58:	0801ae28 	.word	0x0801ae28

08000d5c <lwiperf_tcp_recv>:

/** Receive data on an iperf tcp session */
static err_t
lwiperf_tcp_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	; 0x30
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	70fb      	strb	r3, [r7, #3]
  u8_t tmp;
  u16_t tot_len;
  u32_t packet_idx;
  struct pbuf *q;
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	623b      	str	r3, [r7, #32]

  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000d6e:	6a3b      	ldr	r3, [r7, #32]
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d006      	beq.n	8000d86 <lwiperf_tcp_recv+0x2a>
 8000d78:	4b9a      	ldr	r3, [pc, #616]	; (8000fe4 <lwiperf_tcp_recv+0x288>)
 8000d7a:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
 8000d7e:	499a      	ldr	r1, [pc, #616]	; (8000fe8 <lwiperf_tcp_recv+0x28c>)
 8000d80:	489a      	ldr	r0, [pc, #616]	; (8000fec <lwiperf_tcp_recv+0x290>)
 8000d82:	f019 f871 	bl	8019e68 <iprintf>
  LWIP_UNUSED_ARG(tpcb);

  if (err != ERR_OK) {
 8000d86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d005      	beq.n	8000d9a <lwiperf_tcp_recv+0x3e>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8000d8e:	2105      	movs	r1, #5
 8000d90:	6a38      	ldr	r0, [r7, #32]
 8000d92:	f7ff fd53 	bl	800083c <lwiperf_tcp_close>
    return ERR_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	e11f      	b.n	8000fda <lwiperf_tcp_recv+0x27e>
  }
  if (p == NULL) {
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d114      	bne.n	8000dca <lwiperf_tcp_recv+0x6e>
    /* connection closed -> test done */
    if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000da0:	6a3b      	ldr	r3, [r7, #32]
 8000da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d008      	beq.n	8000dbe <lwiperf_tcp_recv+0x62>
      if ((conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) == 0) {
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <lwiperf_tcp_recv+0x62>
        /* client requested transmission after end of test */
        lwiperf_tx_start_passive(conn);
 8000db8:	6a38      	ldr	r0, [r7, #32]
 8000dba:	f7ff ff8b 	bl	8000cd4 <lwiperf_tx_start_passive>
      }
    }
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	6a38      	ldr	r0, [r7, #32]
 8000dc2:	f7ff fd3b 	bl	800083c <lwiperf_tcp_close>
    return ERR_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e107      	b.n	8000fda <lwiperf_tcp_recv+0x27e>
  }
  tot_len = p->tot_len;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	891b      	ldrh	r3, [r3, #8]
 8000dce:	83fb      	strh	r3, [r7, #30]

  conn->poll_count = 0;
 8000dd0:	6a3b      	ldr	r3, [r7, #32]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2020 	strb.w	r2, [r3, #32]

  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8000dd8:	6a3b      	ldr	r3, [r7, #32]
 8000dda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d007      	beq.n	8000df2 <lwiperf_tcp_recv+0x96>
 8000de2:	6a3b      	ldr	r3, [r7, #32]
 8000de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de6:	3b18      	subs	r3, #24
 8000de8:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f040 8090 	bne.w	8000f12 <lwiperf_tcp_recv+0x1b6>
    /* wait for 24-byte header */
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	891b      	ldrh	r3, [r3, #8]
 8000df6:	2b17      	cmp	r3, #23
 8000df8:	d808      	bhi.n	8000e0c <lwiperf_tcp_recv+0xb0>
      lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	6a38      	ldr	r0, [r7, #32]
 8000dfe:	f7ff fd1d 	bl	800083c <lwiperf_tcp_close>
      pbuf_free(p);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f00f fb52 	bl	80104ac <pbuf_free>
      return ERR_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	e0e6      	b.n	8000fda <lwiperf_tcp_recv+0x27e>
    }
    if (!conn->have_settings_buf) {
 8000e0c:	6a3b      	ldr	r3, [r7, #32]
 8000e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d135      	bne.n	8000e82 <lwiperf_tcp_recv+0x126>
      if (pbuf_copy_partial(p, &conn->settings, sizeof(lwiperf_settings_t), 0) != sizeof(lwiperf_settings_t)) {
 8000e16:	6a3b      	ldr	r3, [r7, #32]
 8000e18:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	2218      	movs	r2, #24
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f00f fd39 	bl	8010898 <pbuf_copy_partial>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b18      	cmp	r3, #24
 8000e2a:	d008      	beq.n	8000e3e <lwiperf_tcp_recv+0xe2>
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8000e2c:	2102      	movs	r1, #2
 8000e2e:	6a38      	ldr	r0, [r7, #32]
 8000e30:	f7ff fd04 	bl	800083c <lwiperf_tcp_close>
        pbuf_free(p);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f00f fb39 	bl	80104ac <pbuf_free>
        return ERR_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e0cd      	b.n	8000fda <lwiperf_tcp_recv+0x27e>
      }
      conn->have_settings_buf = 1;
 8000e3e:	6a3b      	ldr	r3, [r7, #32]
 8000e40:	2201      	movs	r2, #1
 8000e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000e46:	6a3b      	ldr	r3, [r7, #32]
 8000e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d031      	beq.n	8000eb6 <lwiperf_tcp_recv+0x15a>
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 8000e52:	6a3b      	ldr	r3, [r7, #32]
 8000e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d02b      	beq.n	8000eb6 <lwiperf_tcp_recv+0x15a>
          /* client requested parallel transmission test */
          err_t err2 = lwiperf_tx_start_passive(conn);
 8000e5e:	6a38      	ldr	r0, [r7, #32]
 8000e60:	f7ff ff38 	bl	8000cd4 <lwiperf_tx_start_passive>
 8000e64:	4603      	mov	r3, r0
 8000e66:	777b      	strb	r3, [r7, #29]
          if (err2 != ERR_OK) {
 8000e68:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d022      	beq.n	8000eb6 <lwiperf_tcp_recv+0x15a>
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 8000e70:	2104      	movs	r1, #4
 8000e72:	6a38      	ldr	r0, [r7, #32]
 8000e74:	f7ff fce2 	bl	800083c <lwiperf_tcp_close>
            pbuf_free(p);
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f00f fb17 	bl	80104ac <pbuf_free>
            return ERR_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e0ab      	b.n	8000fda <lwiperf_tcp_recv+0x27e>
          }
        }
      }
    } else {
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000e82:	6a3b      	ldr	r3, [r7, #32]
 8000e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d013      	beq.n	8000eb6 <lwiperf_tcp_recv+0x15a>
        if (pbuf_memcmp(p, 0, &conn->settings, sizeof(lwiperf_settings_t)) != 0) {
 8000e8e:	6a3b      	ldr	r3, [r7, #32]
 8000e90:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000e94:	2318      	movs	r3, #24
 8000e96:	2100      	movs	r1, #0
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f00f fe04 	bl	8010aa6 <pbuf_memcmp>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d008      	beq.n	8000eb6 <lwiperf_tcp_recv+0x15a>
          lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8000ea4:	2103      	movs	r1, #3
 8000ea6:	6a38      	ldr	r0, [r7, #32]
 8000ea8:	f7ff fcc8 	bl	800083c <lwiperf_tcp_close>
          pbuf_free(p);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f00f fafd 	bl	80104ac <pbuf_free>
          return ERR_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e091      	b.n	8000fda <lwiperf_tcp_recv+0x27e>
        }
      }
    }
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8000eb6:	6a3b      	ldr	r3, [r7, #32]
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	f103 0218 	add.w	r2, r3, #24
 8000ebe:	6a3b      	ldr	r3, [r7, #32]
 8000ec0:	625a      	str	r2, [r3, #36]	; 0x24
    if (conn->bytes_transferred <= 24) {
 8000ec2:	6a3b      	ldr	r3, [r7, #32]
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	2b18      	cmp	r3, #24
 8000ec8:	d80f      	bhi.n	8000eea <lwiperf_tcp_recv+0x18e>
      conn->time_started = sys_now();
 8000eca:	f009 fb79 	bl	800a5c0 <sys_now>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
 8000ed2:	615a      	str	r2, [r3, #20]
      tcp_recved(tpcb, p->tot_len);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	891b      	ldrh	r3, [r3, #8]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	68b8      	ldr	r0, [r7, #8]
 8000edc:	f010 fb16 	bl	801150c <tcp_recved>
      pbuf_free(p);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f00f fae3 	bl	80104ac <pbuf_free>
      return ERR_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e077      	b.n	8000fda <lwiperf_tcp_recv+0x27e>
    }
    conn->next_num = 4; /* 24 bytes received... */
 8000eea:	6a3b      	ldr	r3, [r7, #32]
 8000eec:	2204      	movs	r2, #4
 8000eee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    tmp = pbuf_remove_header(p, 24);
 8000ef2:	2118      	movs	r1, #24
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f00f fa53 	bl	80103a0 <pbuf_remove_header>
 8000efa:	4603      	mov	r3, r0
 8000efc:	773b      	strb	r3, [r7, #28]
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
 8000efe:	7f3b      	ldrb	r3, [r7, #28]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d006      	beq.n	8000f12 <lwiperf_tcp_recv+0x1b6>
 8000f04:	4b37      	ldr	r3, [pc, #220]	; (8000fe4 <lwiperf_tcp_recv+0x288>)
 8000f06:	f240 2211 	movw	r2, #529	; 0x211
 8000f0a:	4939      	ldr	r1, [pc, #228]	; (8000ff0 <lwiperf_tcp_recv+0x294>)
 8000f0c:	4837      	ldr	r0, [pc, #220]	; (8000fec <lwiperf_tcp_recv+0x290>)
 8000f0e:	f018 ffab 	bl	8019e68 <iprintf>
    LWIP_UNUSED_ARG(tmp); /* for LWIP_NOASSERT */
  }

  packet_idx = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (q = p; q != NULL; q = q->next) {
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f1a:	e03f      	b.n	8000f9c <lwiperf_tcp_recv+0x240>
#if LWIPERF_CHECK_RX_DATA
    const u8_t *payload = (const u8_t *)q->payload;
 8000f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	61bb      	str	r3, [r7, #24]
    u16_t i;
    for (i = 0; i < q->len; i++) {
 8000f22:	2300      	movs	r3, #0
 8000f24:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000f26:	e02b      	b.n	8000f80 <lwiperf_tcp_recv+0x224>
      u8_t val = payload[i];
 8000f28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	75fb      	strb	r3, [r7, #23]
      u8_t num = val - '0';
 8000f32:	7dfb      	ldrb	r3, [r7, #23]
 8000f34:	3b30      	subs	r3, #48	; 0x30
 8000f36:	75bb      	strb	r3, [r7, #22]
      if (num == conn->next_num) {
 8000f38:	6a3b      	ldr	r3, [r7, #32]
 8000f3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f3e:	7dba      	ldrb	r2, [r7, #22]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d111      	bne.n	8000f68 <lwiperf_tcp_recv+0x20c>
        conn->next_num++;
 8000f44:	6a3b      	ldr	r3, [r7, #32]
 8000f46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	6a3b      	ldr	r3, [r7, #32]
 8000f50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        if (conn->next_num == 10) {
 8000f54:	6a3b      	ldr	r3, [r7, #32]
 8000f56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f5a:	2b0a      	cmp	r3, #10
 8000f5c:	d10d      	bne.n	8000f7a <lwiperf_tcp_recv+0x21e>
          conn->next_num = 0;
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8000f66:	e008      	b.n	8000f7a <lwiperf_tcp_recv+0x21e>
        }
      } else {
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8000f68:	2103      	movs	r1, #3
 8000f6a:	6a38      	ldr	r0, [r7, #32]
 8000f6c:	f7ff fc66 	bl	800083c <lwiperf_tcp_close>
        pbuf_free(p);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f00f fa9b 	bl	80104ac <pbuf_free>
        return ERR_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e02f      	b.n	8000fda <lwiperf_tcp_recv+0x27e>
    for (i = 0; i < q->len; i++) {
 8000f7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f82:	895b      	ldrh	r3, [r3, #10]
 8000f84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d3ce      	bcc.n	8000f28 <lwiperf_tcp_recv+0x1cc>
      }
    }
#endif
    packet_idx += q->len;
 8000f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8c:	895b      	ldrh	r3, [r3, #10]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f92:	4413      	add	r3, r2
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (q = p; q != NULL; q = q->next) {
 8000f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1bc      	bne.n	8000f1c <lwiperf_tcp_recv+0x1c0>
  }
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	891b      	ldrh	r3, [r3, #8]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d006      	beq.n	8000fbc <lwiperf_tcp_recv+0x260>
 8000fae:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <lwiperf_tcp_recv+0x288>)
 8000fb0:	f240 222b 	movw	r2, #555	; 0x22b
 8000fb4:	490f      	ldr	r1, [pc, #60]	; (8000ff4 <lwiperf_tcp_recv+0x298>)
 8000fb6:	480d      	ldr	r0, [pc, #52]	; (8000fec <lwiperf_tcp_recv+0x290>)
 8000fb8:	f018 ff56 	bl	8019e68 <iprintf>
  conn->bytes_transferred += packet_idx;
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
 8000fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc2:	441a      	add	r2, r3
 8000fc4:	6a3b      	ldr	r3, [r7, #32]
 8000fc6:	625a      	str	r2, [r3, #36]	; 0x24
  tcp_recved(tpcb, tot_len);
 8000fc8:	8bfb      	ldrh	r3, [r7, #30]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	68b8      	ldr	r0, [r7, #8]
 8000fce:	f010 fa9d 	bl	801150c <tcp_recved>
  pbuf_free(p);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f00f fa6a 	bl	80104ac <pbuf_free>
  return ERR_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3730      	adds	r7, #48	; 0x30
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	0801ae00 	.word	0x0801ae00
 8000fe8:	0801aea0 	.word	0x0801aea0
 8000fec:	0801ae28 	.word	0x0801ae28
 8000ff0:	0801aeb0 	.word	0x0801aeb0
 8000ff4:	0801aecc 	.word	0x0801aecc

08000ff8 <lwiperf_tcp_err>:

/** Error callback, iperf tcp session aborted */
static void
lwiperf_tcp_err(void *arg, err_t err)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	70fb      	strb	r3, [r7, #3]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8001008:	2105      	movs	r1, #5
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f7ff fc16 	bl	800083c <lwiperf_tcp_close>
}
 8001010:	bf00      	nop
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <lwiperf_tcp_poll>:

/** TCP poll callback, try to send more data */
static err_t
lwiperf_tcp_poll(void *arg, struct tcp_pcb *tpcb)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	429a      	cmp	r2, r3
 800102e:	d006      	beq.n	800103e <lwiperf_tcp_poll+0x26>
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <lwiperf_tcp_poll+0x64>)
 8001032:	f44f 7210 	mov.w	r2, #576	; 0x240
 8001036:	4912      	ldr	r1, [pc, #72]	; (8001080 <lwiperf_tcp_poll+0x68>)
 8001038:	4812      	ldr	r0, [pc, #72]	; (8001084 <lwiperf_tcp_poll+0x6c>)
 800103a:	f018 ff15 	bl	8019e68 <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  if (++conn->poll_count >= LWIPERF_TCP_MAX_IDLE_SEC) {
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001044:	3301      	adds	r3, #1
 8001046:	b2da      	uxtb	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f883 2020 	strb.w	r2, [r3, #32]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001054:	2b09      	cmp	r3, #9
 8001056:	d905      	bls.n	8001064 <lwiperf_tcp_poll+0x4c>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8001058:	2102      	movs	r1, #2
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f7ff fbee 	bl	800083c <lwiperf_tcp_close>
    return ERR_OK; /* lwiperf_tcp_close frees conn */
 8001060:	2300      	movs	r3, #0
 8001062:	e007      	b.n	8001074 <lwiperf_tcp_poll+0x5c>
  }

  if (!conn->base.server) {
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	795b      	ldrb	r3, [r3, #5]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <lwiperf_tcp_poll+0x5a>
    lwiperf_tcp_client_send_more(conn);
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f7ff fc47 	bl	8000900 <lwiperf_tcp_client_send_more>
  }

  return ERR_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	0801ae00 	.word	0x0801ae00
 8001080:	0801aea0 	.word	0x0801aea0
 8001084:	0801ae28 	.word	0x0801ae28

08001088 <lwiperf_tcp_accept>:

/** This is called when a new client connects for an iperf tcp session */
static err_t
lwiperf_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	4613      	mov	r3, r2
 8001094:	71fb      	strb	r3, [r7, #7]
  lwiperf_state_tcp_t *s, *conn;
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d105      	bne.n	80010aa <lwiperf_tcp_accept+0x22>
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <lwiperf_tcp_accept+0x22>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d102      	bne.n	80010b0 <lwiperf_tcp_accept+0x28>
    return ERR_VAL;
 80010aa:	f06f 0305 	mvn.w	r3, #5
 80010ae:	e0a3      	b.n	80011f8 <lwiperf_tcp_accept+0x170>
  }

  s = (lwiperf_state_tcp_t *)arg;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("invalid session", s->base.server);
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	795b      	ldrb	r3, [r3, #5]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d106      	bne.n	80010ca <lwiperf_tcp_accept+0x42>
 80010bc:	4b50      	ldr	r3, [pc, #320]	; (8001200 <lwiperf_tcp_accept+0x178>)
 80010be:	f44f 7216 	mov.w	r2, #600	; 0x258
 80010c2:	4950      	ldr	r1, [pc, #320]	; (8001204 <lwiperf_tcp_accept+0x17c>)
 80010c4:	4850      	ldr	r0, [pc, #320]	; (8001208 <lwiperf_tcp_accept+0x180>)
 80010c6:	f018 fecf 	bl	8019e68 <iprintf>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d106      	bne.n	80010e0 <lwiperf_tcp_accept+0x58>
 80010d2:	4b4b      	ldr	r3, [pc, #300]	; (8001200 <lwiperf_tcp_accept+0x178>)
 80010d4:	f240 2259 	movw	r2, #601	; 0x259
 80010d8:	494c      	ldr	r1, [pc, #304]	; (800120c <lwiperf_tcp_accept+0x184>)
 80010da:	484b      	ldr	r0, [pc, #300]	; (8001208 <lwiperf_tcp_accept+0x180>)
 80010dc:	f018 fec4 	bl	8019e68 <iprintf>
  LWIP_ASSERT("invalid conn pcb", s->conn_pcb == NULL);
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d006      	beq.n	80010f6 <lwiperf_tcp_accept+0x6e>
 80010e8:	4b45      	ldr	r3, [pc, #276]	; (8001200 <lwiperf_tcp_accept+0x178>)
 80010ea:	f240 225a 	movw	r2, #602	; 0x25a
 80010ee:	4948      	ldr	r1, [pc, #288]	; (8001210 <lwiperf_tcp_accept+0x188>)
 80010f0:	4845      	ldr	r0, [pc, #276]	; (8001208 <lwiperf_tcp_accept+0x180>)
 80010f2:	f018 feb9 	bl	8019e68 <iprintf>
  if (s->specific_remote) {
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d013      	beq.n	8001128 <lwiperf_tcp_accept+0xa0>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d106      	bne.n	8001116 <lwiperf_tcp_accept+0x8e>
 8001108:	4b3d      	ldr	r3, [pc, #244]	; (8001200 <lwiperf_tcp_accept+0x178>)
 800110a:	f44f 7217 	mov.w	r2, #604	; 0x25c
 800110e:	4941      	ldr	r1, [pc, #260]	; (8001214 <lwiperf_tcp_accept+0x18c>)
 8001110:	483d      	ldr	r0, [pc, #244]	; (8001208 <lwiperf_tcp_accept+0x180>)
 8001112:	f018 fea9 	bl	8019e68 <iprintf>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	429a      	cmp	r2, r3
 8001120:	d00d      	beq.n	800113e <lwiperf_tcp_accept+0xb6>
      /* this listener belongs to a client session, and this is not the correct remote */
      return ERR_VAL;
 8001122:	f06f 0305 	mvn.w	r3, #5
 8001126:	e067      	b.n	80011f8 <lwiperf_tcp_accept+0x170>
    }
  } else {
    LWIP_ASSERT("s->base.related_master_state == NULL", s->base.related_master_state == NULL);
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d006      	beq.n	800113e <lwiperf_tcp_accept+0xb6>
 8001130:	4b33      	ldr	r3, [pc, #204]	; (8001200 <lwiperf_tcp_accept+0x178>)
 8001132:	f240 2262 	movw	r2, #610	; 0x262
 8001136:	4938      	ldr	r1, [pc, #224]	; (8001218 <lwiperf_tcp_accept+0x190>)
 8001138:	4833      	ldr	r0, [pc, #204]	; (8001208 <lwiperf_tcp_accept+0x180>)
 800113a:	f018 fe95 	bl	8019e68 <iprintf>
  }

  conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 800113e:	2048      	movs	r0, #72	; 0x48
 8001140:	f00e f8e2 	bl	800f308 <mem_malloc>
 8001144:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d102      	bne.n	8001152 <lwiperf_tcp_accept+0xca>
    return ERR_MEM;
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	e052      	b.n	80011f8 <lwiperf_tcp_accept+0x170>
  }
  memset(conn, 0, sizeof(lwiperf_state_tcp_t));
 8001152:	2248      	movs	r2, #72	; 0x48
 8001154:	2100      	movs	r1, #0
 8001156:	6938      	ldr	r0, [r7, #16]
 8001158:	f018 ffdc 	bl	801a114 <memset>
  conn->base.tcp = 1;
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	2201      	movs	r2, #1
 8001160:	711a      	strb	r2, [r3, #4]
  conn->base.server = 1;
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	2201      	movs	r2, #1
 8001166:	715a      	strb	r2, [r3, #5]
  conn->base.related_master_state = &s->base;
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	609a      	str	r2, [r3, #8]
  conn->conn_pcb = newpcb;
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	68ba      	ldr	r2, [r7, #8]
 8001172:	611a      	str	r2, [r3, #16]
  conn->time_started = sys_now();
 8001174:	f009 fa24 	bl	800a5c0 <sys_now>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	615a      	str	r2, [r3, #20]
  conn->report_fn = s->report_fn;
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	699a      	ldr	r2, [r3, #24]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	619a      	str	r2, [r3, #24]
  conn->report_arg = s->report_arg;
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	69da      	ldr	r2, [r3, #28]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	61da      	str	r2, [r3, #28]

  /* setup the tcp rx connection */
  tcp_arg(newpcb, conn);
 800118e:	6939      	ldr	r1, [r7, #16]
 8001190:	68b8      	ldr	r0, [r7, #8]
 8001192:	f011 f9a3 	bl	80124dc <tcp_arg>
  tcp_recv(newpcb, lwiperf_tcp_recv);
 8001196:	4921      	ldr	r1, [pc, #132]	; (800121c <lwiperf_tcp_accept+0x194>)
 8001198:	68b8      	ldr	r0, [r7, #8]
 800119a:	f011 f9b1 	bl	8012500 <tcp_recv>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 800119e:	2202      	movs	r2, #2
 80011a0:	491f      	ldr	r1, [pc, #124]	; (8001220 <lwiperf_tcp_accept+0x198>)
 80011a2:	68b8      	ldr	r0, [r7, #8]
 80011a4:	f011 fa30 	bl	8012608 <tcp_poll>
  tcp_err(conn->conn_pcb, lwiperf_tcp_err);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	491d      	ldr	r1, [pc, #116]	; (8001224 <lwiperf_tcp_accept+0x19c>)
 80011ae:	4618      	mov	r0, r3
 80011b0:	f011 f9ee 	bl	8012590 <tcp_err>

  if (s->specific_remote) {
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d017      	beq.n	80011ee <lwiperf_tcp_accept+0x166>
    /* this listener belongs to a client, so make the client the master of the newly created connection */
    conn->base.related_master_state = s->base.related_master_state;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	609a      	str	r2, [r3, #8]
    /* if dual mode or (tradeoff mode AND client is done): close the listener */
    if (!s->client_tradeoff_mode || !lwiperf_list_find(s->base.related_master_state)) {
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d007      	beq.n	80011e0 <lwiperf_tcp_accept+0x158>
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff facd 	bl	8000774 <lwiperf_list_find>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d106      	bne.n	80011ee <lwiperf_tcp_accept+0x166>
      /* prevent report when closing: this is expected */
      s->report_fn = NULL;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 80011e6:	2102      	movs	r1, #2
 80011e8:	6978      	ldr	r0, [r7, #20]
 80011ea:	f7ff fb27 	bl	800083c <lwiperf_tcp_close>
    }
  }
  lwiperf_list_add(&conn->base);
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fa67 	bl	80006c4 <lwiperf_list_add>
  return ERR_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	0801ae00 	.word	0x0801ae00
 8001204:	0801aedc 	.word	0x0801aedc
 8001208:	0801ae28 	.word	0x0801ae28
 800120c:	0801aeec 	.word	0x0801aeec
 8001210:	0801af00 	.word	0x0801af00
 8001214:	0801af14 	.word	0x0801af14
 8001218:	0801af3c 	.word	0x0801af3c
 800121c:	08000d5d 	.word	0x08000d5d
 8001220:	08001019 	.word	0x08001019
 8001224:	08000ff9 	.word	0x08000ff9

08001228 <lwiperf_start_tcp_server_default>:
 * @returns a connection handle that can be used to abort the server
 *          by calling @ref lwiperf_abort()
 */
void *
lwiperf_start_tcp_server_default(lwiperf_report_fn report_fn, void *report_arg)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  return lwiperf_start_tcp_server(IP_ADDR_ANY, LWIPERF_TCP_PORT_DEFAULT,
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	f241 3189 	movw	r1, #5001	; 0x1389
 800123a:	4804      	ldr	r0, [pc, #16]	; (800124c <lwiperf_start_tcp_server_default+0x24>)
 800123c:	f000 f808 	bl	8001250 <lwiperf_start_tcp_server>
 8001240:	4603      	mov	r3, r0
                                  report_fn, report_arg);
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	0801e2bc 	.word	0x0801e2bc

08001250 <lwiperf_start_tcp_server>:
 *          by calling @ref lwiperf_abort()
 */
void *
lwiperf_start_tcp_server(const ip_addr_t *local_addr, u16_t local_port,
                         lwiperf_report_fn report_fn, void *report_arg)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af02      	add	r7, sp, #8
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	460b      	mov	r3, r1
 800125e:	817b      	strh	r3, [r7, #10]
  err_t err;
  lwiperf_state_tcp_t *state = NULL;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]

  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 8001264:	8979      	ldrh	r1, [r7, #10]
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	2300      	movs	r3, #0
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f000 f80d 	bl	8001294 <lwiperf_start_tcp_server_impl>
 800127a:	4603      	mov	r3, r0
 800127c:	75fb      	strb	r3, [r7, #23]
    NULL, &state);
  if (err == ERR_OK) {
 800127e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <lwiperf_start_tcp_server+0x3a>
    return state;
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	e000      	b.n	800128c <lwiperf_start_tcp_server+0x3c>
  }
  return NULL;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <lwiperf_start_tcp_server_impl>:

static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,
                                           lwiperf_report_fn report_fn, void *report_arg,
                                           lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **state)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	460b      	mov	r3, r1
 80012a2:	817b      	strh	r3, [r7, #10]
  err_t err;
  struct tcp_pcb *pcb;
  lwiperf_state_tcp_t *s;

  LWIP_ASSERT_CORE_LOCKED();
 80012a4:	f009 fc0e 	bl	800aac4 <sys_check_core_locking>

  LWIP_ASSERT("state != NULL", state != NULL);
 80012a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d106      	bne.n	80012bc <lwiperf_start_tcp_server_impl+0x28>
 80012ae:	4b3a      	ldr	r3, [pc, #232]	; (8001398 <lwiperf_start_tcp_server_impl+0x104>)
 80012b0:	f240 22b6 	movw	r2, #694	; 0x2b6
 80012b4:	4939      	ldr	r1, [pc, #228]	; (800139c <lwiperf_start_tcp_server_impl+0x108>)
 80012b6:	483a      	ldr	r0, [pc, #232]	; (80013a0 <lwiperf_start_tcp_server_impl+0x10c>)
 80012b8:	f018 fdd6 	bl	8019e68 <iprintf>

  if (local_addr == NULL) {
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <lwiperf_start_tcp_server_impl+0x34>
    return ERR_ARG;
 80012c2:	f06f 030f 	mvn.w	r3, #15
 80012c6:	e063      	b.n	8001390 <lwiperf_start_tcp_server_impl+0xfc>
  }

  s = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 80012c8:	2048      	movs	r0, #72	; 0x48
 80012ca:	f00e f81d 	bl	800f308 <mem_malloc>
 80012ce:	61f8      	str	r0, [r7, #28]
  if (s == NULL) {
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <lwiperf_start_tcp_server_impl+0x48>
    return ERR_MEM;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	e059      	b.n	8001390 <lwiperf_start_tcp_server_impl+0xfc>
  }
  memset(s, 0, sizeof(lwiperf_state_tcp_t));
 80012dc:	2248      	movs	r2, #72	; 0x48
 80012de:	2100      	movs	r1, #0
 80012e0:	69f8      	ldr	r0, [r7, #28]
 80012e2:	f018 ff17 	bl	801a114 <memset>
  s->base.tcp = 1;
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	2201      	movs	r2, #1
 80012ea:	711a      	strb	r2, [r3, #4]
  s->base.server = 1;
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	2201      	movs	r2, #1
 80012f0:	715a      	strb	r2, [r3, #5]
  s->base.related_master_state = related_master_state;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012f6:	609a      	str	r2, [r3, #8]
  s->report_fn = report_fn;
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	619a      	str	r2, [r3, #24]
  s->report_arg = report_arg;
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	61da      	str	r2, [r3, #28]

  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 8001304:	202e      	movs	r0, #46	; 0x2e
 8001306:	f011 f8db 	bl	80124c0 <tcp_new_ip_type>
 800130a:	61b8      	str	r0, [r7, #24]
  if (pcb == NULL) {
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d102      	bne.n	8001318 <lwiperf_start_tcp_server_impl+0x84>
    return ERR_MEM;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	e03b      	b.n	8001390 <lwiperf_start_tcp_server_impl+0xfc>
  }
  err = tcp_bind(pcb, local_addr, local_port);
 8001318:	897b      	ldrh	r3, [r7, #10]
 800131a:	461a      	mov	r2, r3
 800131c:	68f9      	ldr	r1, [r7, #12]
 800131e:	69b8      	ldr	r0, [r7, #24]
 8001320:	f00f ff20 	bl	8011164 <tcp_bind>
 8001324:	4603      	mov	r3, r0
 8001326:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8001328:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <lwiperf_start_tcp_server_impl+0xa2>
    return err;
 8001330:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001334:	e02c      	b.n	8001390 <lwiperf_start_tcp_server_impl+0xfc>
  }
  s->server_pcb = tcp_listen_with_backlog(pcb, 1);
 8001336:	2101      	movs	r1, #1
 8001338:	69b8      	ldr	r0, [r7, #24]
 800133a:	f00f ffcd 	bl	80112d8 <tcp_listen_with_backlog>
 800133e:	4602      	mov	r2, r0
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	60da      	str	r2, [r3, #12]
  if (s->server_pcb == NULL) {
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d10b      	bne.n	8001364 <lwiperf_start_tcp_server_impl+0xd0>
    if (pcb != NULL) {
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d002      	beq.n	8001358 <lwiperf_start_tcp_server_impl+0xc4>
      tcp_close(pcb);
 8001352:	69b8      	ldr	r0, [r7, #24]
 8001354:	f00f fe0c 	bl	8010f70 <tcp_close>
    }
    LWIPERF_FREE(lwiperf_state_tcp_t, s);
 8001358:	69f8      	ldr	r0, [r7, #28]
 800135a:	f00d fe35 	bl	800efc8 <mem_free>
    return ERR_MEM;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e015      	b.n	8001390 <lwiperf_start_tcp_server_impl+0xfc>
  }
  pcb = NULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]

  tcp_arg(s->server_pcb, s);
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	69f9      	ldr	r1, [r7, #28]
 800136e:	4618      	mov	r0, r3
 8001370:	f011 f8b4 	bl	80124dc <tcp_arg>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	490a      	ldr	r1, [pc, #40]	; (80013a4 <lwiperf_start_tcp_server_impl+0x110>)
 800137a:	4618      	mov	r0, r3
 800137c:	f011 f92c 	bl	80125d8 <tcp_accept>

  lwiperf_list_add(&s->base);
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f99e 	bl	80006c4 <lwiperf_list_add>
  *state = s;
 8001388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138a:	69fa      	ldr	r2, [r7, #28]
 800138c:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3720      	adds	r7, #32
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	0801ae00 	.word	0x0801ae00
 800139c:	0801af64 	.word	0x0801af64
 80013a0:	0801ae28 	.word	0x0801ae28
 80013a4:	08001089 	.word	0x08001089

080013a8 <lwiperf_start_tcp_client_default>:
 * @returns a connection handle that can be used to abort the client
 *          by calling @ref lwiperf_abort()
 */
void* lwiperf_start_tcp_client_default(const ip_addr_t* remote_addr,
                               lwiperf_report_fn report_fn, void* report_arg)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  return lwiperf_start_tcp_client(remote_addr, LWIPERF_TCP_PORT_DEFAULT, LWIPERF_CLIENT,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f241 3189 	movw	r1, #5001	; 0x1389
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f000 f805 	bl	80013d0 <lwiperf_start_tcp_client>
 80013c6:	4603      	mov	r3, r0
                                  report_fn, report_arg);
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <lwiperf_start_tcp_client>:
 * @returns a connection handle that can be used to abort the client
 *          by calling @ref lwiperf_abort()
 */
void* lwiperf_start_tcp_client(const ip_addr_t* remote_addr, u16_t remote_port,
  enum lwiperf_client_type type, lwiperf_report_fn report_fn, void* report_arg)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b092      	sub	sp, #72	; 0x48
 80013d4:	af04      	add	r7, sp, #16
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	460b      	mov	r3, r1
 80013dc:	817b      	strh	r3, [r7, #10]
 80013de:	4613      	mov	r3, r2
 80013e0:	727b      	strb	r3, [r7, #9]
  err_t ret;
  lwiperf_settings_t settings;
  lwiperf_state_tcp_t *state = NULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]

  memset(&settings, 0, sizeof(settings));
 80013e6:	f107 031c 	add.w	r3, r7, #28
 80013ea:	2218      	movs	r2, #24
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f018 fe90 	bl	801a114 <memset>
  switch (type) {
 80013f4:	7a7b      	ldrb	r3, [r7, #9]
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d00f      	beq.n	800141a <lwiperf_start_tcp_client+0x4a>
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	dc14      	bgt.n	8001428 <lwiperf_start_tcp_client+0x58>
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d002      	beq.n	8001408 <lwiperf_start_tcp_client+0x38>
 8001402:	2b01      	cmp	r3, #1
 8001404:	d003      	beq.n	800140e <lwiperf_start_tcp_client+0x3e>
 8001406:	e00f      	b.n	8001428 <lwiperf_start_tcp_client+0x58>
  case LWIPERF_CLIENT:
    /* Unidirectional tx only test */
    settings.flags = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
    break;
 800140c:	e00e      	b.n	800142c <lwiperf_start_tcp_client+0x5c>
  case LWIPERF_DUAL:
    /* Do a bidirectional test simultaneously */
    settings.flags = htonl(LWIPERF_FLAGS_ANSWER_TEST | LWIPERF_FLAGS_ANSWER_NOW);
 800140e:	483a      	ldr	r0, [pc, #232]	; (80014f8 <lwiperf_start_tcp_client+0x128>)
 8001410:	f00d fb97 	bl	800eb42 <lwip_htonl>
 8001414:	4603      	mov	r3, r0
 8001416:	61fb      	str	r3, [r7, #28]
    break;
 8001418:	e008      	b.n	800142c <lwiperf_start_tcp_client+0x5c>
  case LWIPERF_TRADEOFF:
    /* Do a bidirectional test individually */
    settings.flags = htonl(LWIPERF_FLAGS_ANSWER_TEST);
 800141a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800141e:	f00d fb90 	bl	800eb42 <lwip_htonl>
 8001422:	4603      	mov	r3, r0
 8001424:	61fb      	str	r3, [r7, #28]
    break;
 8001426:	e001      	b.n	800142c <lwiperf_start_tcp_client+0x5c>
  default:
    /* invalid argument */
    return NULL;
 8001428:	2300      	movs	r3, #0
 800142a:	e061      	b.n	80014f0 <lwiperf_start_tcp_client+0x120>
  }
  settings.num_threads = htonl(1);
 800142c:	2001      	movs	r0, #1
 800142e:	f00d fb88 	bl	800eb42 <lwip_htonl>
 8001432:	4603      	mov	r3, r0
 8001434:	623b      	str	r3, [r7, #32]
  settings.remote_port = htonl(LWIPERF_TCP_PORT_DEFAULT);
 8001436:	f241 3089 	movw	r0, #5001	; 0x1389
 800143a:	f00d fb82 	bl	800eb42 <lwip_htonl>
 800143e:	4603      	mov	r3, r0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  /* TODO: implement passing duration/amount of bytes to transfer */
  settings.amount = htonl((u32_t)-1000);
 8001442:	482e      	ldr	r0, [pc, #184]	; (80014fc <lwiperf_start_tcp_client+0x12c>)
 8001444:	f00d fb7d 	bl	800eb42 <lwip_htonl>
 8001448:	4603      	mov	r3, r0
 800144a:	633b      	str	r3, [r7, #48]	; 0x30

  ret = lwiperf_tx_start_impl(remote_addr, remote_port, &settings, report_fn, report_arg, NULL, &state);
 800144c:	f107 021c 	add.w	r2, r7, #28
 8001450:	8979      	ldrh	r1, [r7, #10]
 8001452:	f107 0318 	add.w	r3, r7, #24
 8001456:	9302      	str	r3, [sp, #8]
 8001458:	2300      	movs	r3, #0
 800145a:	9301      	str	r3, [sp, #4]
 800145c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f7ff fb86 	bl	8000b74 <lwiperf_tx_start_impl>
 8001468:	4603      	mov	r3, r0
 800146a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (ret == ERR_OK) {
 800146e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001472:	2b00      	cmp	r3, #0
 8001474:	d13b      	bne.n	80014ee <lwiperf_start_tcp_client+0x11e>
    LWIP_ASSERT("state != NULL", state != NULL);
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d106      	bne.n	800148a <lwiperf_start_tcp_client+0xba>
 800147c:	4b20      	ldr	r3, [pc, #128]	; (8001500 <lwiperf_start_tcp_client+0x130>)
 800147e:	f240 3216 	movw	r2, #790	; 0x316
 8001482:	4920      	ldr	r1, [pc, #128]	; (8001504 <lwiperf_start_tcp_client+0x134>)
 8001484:	4820      	ldr	r0, [pc, #128]	; (8001508 <lwiperf_start_tcp_client+0x138>)
 8001486:	f018 fcef 	bl	8019e68 <iprintf>
    if (type != LWIPERF_CLIENT) {
 800148a:	7a7b      	ldrb	r3, [r7, #9]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d02c      	beq.n	80014ea <lwiperf_start_tcp_client+0x11a>
      /* start corresponding server now */
      lwiperf_state_tcp_t *server = NULL;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
      ret = lwiperf_start_tcp_server_impl(&state->conn_pcb->local_ip, LWIPERF_TCP_PORT_DEFAULT,
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	4618      	mov	r0, r3
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	f107 0214 	add.w	r2, r7, #20
 80014a0:	9201      	str	r2, [sp, #4]
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	f241 3189 	movw	r1, #5001	; 0x1389
 80014ac:	f7ff fef2 	bl	8001294 <lwiperf_start_tcp_server_impl>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        report_fn, report_arg, (lwiperf_state_base_t *)state, &server);
      if (ret != ERR_OK) {
 80014b6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d005      	beq.n	80014ca <lwiperf_start_tcp_client+0xfa>
        /* starting server failed, abort client */
        lwiperf_abort(state);
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 f823 	bl	800150c <lwiperf_abort>
        return NULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	e012      	b.n	80014f0 <lwiperf_start_tcp_client+0x120>
      }
      /* make this server accept one connection only */
      server->specific_remote = 1;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      server->remote_addr = state->conn_pcb->remote_ip;
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	691a      	ldr	r2, [r3, #16]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	6852      	ldr	r2, [r2, #4]
 80014da:	645a      	str	r2, [r3, #68]	; 0x44
      if (type == LWIPERF_TRADEOFF) {
 80014dc:	7a7b      	ldrb	r3, [r7, #9]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d103      	bne.n	80014ea <lwiperf_start_tcp_client+0x11a>
        /* tradeoff means that the remote host connects only after the client is done,
           so keep the listen pcb open until the client is done */
        server->client_tradeoff_mode = 1;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      }
    }
    return state;
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	e000      	b.n	80014f0 <lwiperf_start_tcp_client+0x120>
  }
  return NULL;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3738      	adds	r7, #56	; 0x38
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	80000001 	.word	0x80000001
 80014fc:	fffffc18 	.word	0xfffffc18
 8001500:	0801ae00 	.word	0x0801ae00
 8001504:	0801af64 	.word	0x0801af64
 8001508:	0801ae28 	.word	0x0801ae28

0800150c <lwiperf_abort>:
 * @ingroup iperf
 * Abort an iperf session (handle returned by lwiperf_start_tcp_server*())
 */
void
lwiperf_abort(void *lwiperf_session)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *i, *dealloc, *last = NULL;
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]

  LWIP_ASSERT_CORE_LOCKED();
 8001518:	f009 fad4 	bl	800aac4 <sys_check_core_locking>

  for (i = lwiperf_all_connections; i != NULL; ) {
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <lwiperf_abort+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	e01c      	b.n	800155e <lwiperf_abort+0x52>
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	429a      	cmp	r2, r3
 800152a:	d004      	beq.n	8001536 <lwiperf_abort+0x2a>
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	429a      	cmp	r2, r3
 8001534:	d10e      	bne.n	8001554 <lwiperf_abort+0x48>
      dealloc = i;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	60fb      	str	r3, [r7, #12]
      i = i->next;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	617b      	str	r3, [r7, #20]
      if (last != NULL) {
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d002      	beq.n	800154c <lwiperf_abort+0x40>
        last->next = i;
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	601a      	str	r2, [r3, #0]
      }
      LWIPERF_FREE(lwiperf_state_tcp_t, dealloc); /* @todo: type? */
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f00d fd3b 	bl	800efc8 <mem_free>
 8001552:	e004      	b.n	800155e <lwiperf_abort+0x52>
    } else {
      last = i;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	613b      	str	r3, [r7, #16]
      i = i->next;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	617b      	str	r3, [r7, #20]
  for (i = lwiperf_all_connections; i != NULL; ) {
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1df      	bne.n	8001524 <lwiperf_abort+0x18>
    }
  }
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	24004af0 	.word	0x24004af0

08001574 <_write>:
		#endif /* __GNUC__*/
#endif

#ifdef True_STD
	int _write(int fd, char *str, int len)
	{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
		for(int i=0; i<len; i++)
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	e00b      	b.n	800159e <_write+0x2a>
		{
			HAL_UART_Transmit(&huart3, (uint8_t *)&str[i], 1, 0xFFFF);
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	18d1      	adds	r1, r2, r3
 800158c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001590:	2201      	movs	r2, #1
 8001592:	4807      	ldr	r0, [pc, #28]	; (80015b0 <_write+0x3c>)
 8001594:	f006 fdc4 	bl	8008120 <HAL_UART_Transmit>
		for(int i=0; i<len; i++)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	3301      	adds	r3, #1
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	dbef      	blt.n	8001586 <_write+0x12>
		}
		return len;
 80015a6:	687b      	ldr	r3, [r7, #4]
	}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	24004af4 	.word	0x24004af4

080015b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015ba:	4b3e      	ldr	r3, [pc, #248]	; (80016b4 <main+0x100>)
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d11b      	bne.n	80015fe <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015c6:	f3bf 8f4f 	dsb	sy
}
 80015ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015cc:	f3bf 8f6f 	isb	sy
}
 80015d0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015d2:	4b38      	ldr	r3, [pc, #224]	; (80016b4 <main+0x100>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015da:	f3bf 8f4f 	dsb	sy
}
 80015de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015e0:	f3bf 8f6f 	isb	sy
}
 80015e4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80015e6:	4b33      	ldr	r3, [pc, #204]	; (80016b4 <main+0x100>)
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	4a32      	ldr	r2, [pc, #200]	; (80016b4 <main+0x100>)
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80015f2:	f3bf 8f4f 	dsb	sy
}
 80015f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f8:	f3bf 8f6f 	isb	sy
}
 80015fc:	e000      	b.n	8001600 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015fe:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001600:	4b2c      	ldr	r3, [pc, #176]	; (80016b4 <main+0x100>)
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d138      	bne.n	800167e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800160c:	4b29      	ldr	r3, [pc, #164]	; (80016b4 <main+0x100>)
 800160e:	2200      	movs	r2, #0
 8001610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001614:	f3bf 8f4f 	dsb	sy
}
 8001618:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800161a:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <main+0x100>)
 800161c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001620:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	0b5b      	lsrs	r3, r3, #13
 8001626:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800162a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	08db      	lsrs	r3, r3, #3
 8001630:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001634:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	015a      	lsls	r2, r3, #5
 800163a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800163e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001644:	491b      	ldr	r1, [pc, #108]	; (80016b4 <main+0x100>)
 8001646:	4313      	orrs	r3, r2
 8001648:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	1e5a      	subs	r2, r3, #1
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1ef      	bne.n	8001636 <main+0x82>
    } while(sets-- != 0U);
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	1e5a      	subs	r2, r3, #1
 800165a:	60ba      	str	r2, [r7, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1e5      	bne.n	800162c <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001660:	f3bf 8f4f 	dsb	sy
}
 8001664:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <main+0x100>)
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	4a12      	ldr	r2, [pc, #72]	; (80016b4 <main+0x100>)
 800166c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001670:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001672:	f3bf 8f4f 	dsb	sy
}
 8001676:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001678:	f3bf 8f6f 	isb	sy
}
 800167c:	e000      	b.n	8001680 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800167e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001680:	f000 fe12 	bl	80022a8 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001684:	f000 f9c6 	bl	8001a14 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001688:	f000 f81e 	bl	80016c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800168c:	f000 f8d8 	bl	8001840 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001690:	f000 f88a 	bl	80017a8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
printf("STM32H723 Ethernet Test\r\n");
 8001694:	4808      	ldr	r0, [pc, #32]	; (80016b8 <main+0x104>)
 8001696:	f018 fc4d 	bl	8019f34 <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800169a:	f009 fa9f 	bl	800abdc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800169e:	4a07      	ldr	r2, [pc, #28]	; (80016bc <main+0x108>)
 80016a0:	2100      	movs	r1, #0
 80016a2:	4807      	ldr	r0, [pc, #28]	; (80016c0 <main+0x10c>)
 80016a4:	f009 faf9 	bl	800ac9a <osThreadNew>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4a06      	ldr	r2, [pc, #24]	; (80016c4 <main+0x110>)
 80016ac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80016ae:	f009 fab9 	bl	800ac24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <main+0xfe>
 80016b4:	e000ed00 	.word	0xe000ed00
 80016b8:	0801af98 	.word	0x0801af98
 80016bc:	0801e144 	.word	0x0801e144
 80016c0:	080019d9 	.word	0x080019d9
 80016c4:	24004b88 	.word	0x24004b88

080016c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b09c      	sub	sp, #112	; 0x70
 80016cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d2:	224c      	movs	r2, #76	; 0x4c
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f018 fd1c 	bl	801a114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	2220      	movs	r2, #32
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f018 fd16 	bl	801a114 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80016e8:	2002      	movs	r0, #2
 80016ea:	f003 fc31 	bl	8004f50 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80016ee:	2300      	movs	r3, #0
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	4b2c      	ldr	r3, [pc, #176]	; (80017a4 <SystemClock_Config+0xdc>)
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	4a2b      	ldr	r2, [pc, #172]	; (80017a4 <SystemClock_Config+0xdc>)
 80016f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016fc:	6193      	str	r3, [r2, #24]
 80016fe:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <SystemClock_Config+0xdc>)
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800170a:	bf00      	nop
 800170c:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <SystemClock_Config+0xdc>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001718:	d1f8      	bne.n	800170c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800171a:	2302      	movs	r3, #2
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800171e:	2301      	movs	r3, #1
 8001720:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001722:	2340      	movs	r3, #64	; 0x40
 8001724:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001726:	2302      	movs	r3, #2
 8001728:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800172a:	2300      	movs	r3, #0
 800172c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 800172e:	2320      	movs	r3, #32
 8001730:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8001732:	f240 1313 	movw	r3, #275	; 0x113
 8001736:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001738:	2301      	movs	r3, #1
 800173a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800173c:	2304      	movs	r3, #4
 800173e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001740:	2302      	movs	r3, #2
 8001742:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001744:	2304      	movs	r3, #4
 8001746:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001748:	2300      	movs	r3, #0
 800174a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001754:	4618      	mov	r0, r3
 8001756:	f003 fc35 	bl	8004fc4 <HAL_RCC_OscConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001760:	f000 f9bc 	bl	8001adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001764:	233f      	movs	r3, #63	; 0x3f
 8001766:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001768:	2303      	movs	r3, #3
 800176a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001770:	2308      	movs	r3, #8
 8001772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001774:	2340      	movs	r3, #64	; 0x40
 8001776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001778:	2340      	movs	r3, #64	; 0x40
 800177a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800177c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001780:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001782:	2340      	movs	r3, #64	; 0x40
 8001784:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	2103      	movs	r1, #3
 800178a:	4618      	mov	r0, r3
 800178c:	f003 fff4 	bl	8005778 <HAL_RCC_ClockConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001796:	f000 f9a1 	bl	8001adc <Error_Handler>
  }
}
 800179a:	bf00      	nop
 800179c:	3770      	adds	r7, #112	; 0x70
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	58024800 	.word	0x58024800

080017a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <MX_USART3_UART_Init+0x90>)
 80017ae:	4a23      	ldr	r2, [pc, #140]	; (800183c <MX_USART3_UART_Init+0x94>)
 80017b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017b2:	4b21      	ldr	r3, [pc, #132]	; (8001838 <MX_USART3_UART_Init+0x90>)
 80017b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017ba:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <MX_USART3_UART_Init+0x90>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <MX_USART3_UART_Init+0x90>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017c6:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <MX_USART3_UART_Init+0x90>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017cc:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <MX_USART3_UART_Init+0x90>)
 80017ce:	220c      	movs	r2, #12
 80017d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d2:	4b19      	ldr	r3, [pc, #100]	; (8001838 <MX_USART3_UART_Init+0x90>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d8:	4b17      	ldr	r3, [pc, #92]	; (8001838 <MX_USART3_UART_Init+0x90>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <MX_USART3_UART_Init+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017e4:	4b14      	ldr	r3, [pc, #80]	; (8001838 <MX_USART3_UART_Init+0x90>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ea:	4b13      	ldr	r3, [pc, #76]	; (8001838 <MX_USART3_UART_Init+0x90>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017f0:	4811      	ldr	r0, [pc, #68]	; (8001838 <MX_USART3_UART_Init+0x90>)
 80017f2:	f006 fc45 	bl	8008080 <HAL_UART_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80017fc:	f000 f96e 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001800:	2100      	movs	r1, #0
 8001802:	480d      	ldr	r0, [pc, #52]	; (8001838 <MX_USART3_UART_Init+0x90>)
 8001804:	f008 fa12 	bl	8009c2c <HAL_UARTEx_SetTxFifoThreshold>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800180e:	f000 f965 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001812:	2100      	movs	r1, #0
 8001814:	4808      	ldr	r0, [pc, #32]	; (8001838 <MX_USART3_UART_Init+0x90>)
 8001816:	f008 fa47 	bl	8009ca8 <HAL_UARTEx_SetRxFifoThreshold>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001820:	f000 f95c 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001824:	4804      	ldr	r0, [pc, #16]	; (8001838 <MX_USART3_UART_Init+0x90>)
 8001826:	f008 f9c8 	bl	8009bba <HAL_UARTEx_DisableFifoMode>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001830:	f000 f954 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	24004af4 	.word	0x24004af4
 800183c:	40004800 	.word	0x40004800

08001840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08c      	sub	sp, #48	; 0x30
 8001844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001846:	f107 031c 	add.w	r3, r7, #28
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001856:	4b5a      	ldr	r3, [pc, #360]	; (80019c0 <MX_GPIO_Init+0x180>)
 8001858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185c:	4a58      	ldr	r2, [pc, #352]	; (80019c0 <MX_GPIO_Init+0x180>)
 800185e:	f043 0304 	orr.w	r3, r3, #4
 8001862:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001866:	4b56      	ldr	r3, [pc, #344]	; (80019c0 <MX_GPIO_Init+0x180>)
 8001868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
 8001872:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001874:	4b52      	ldr	r3, [pc, #328]	; (80019c0 <MX_GPIO_Init+0x180>)
 8001876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187a:	4a51      	ldr	r2, [pc, #324]	; (80019c0 <MX_GPIO_Init+0x180>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001884:	4b4e      	ldr	r3, [pc, #312]	; (80019c0 <MX_GPIO_Init+0x180>)
 8001886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001892:	4b4b      	ldr	r3, [pc, #300]	; (80019c0 <MX_GPIO_Init+0x180>)
 8001894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001898:	4a49      	ldr	r2, [pc, #292]	; (80019c0 <MX_GPIO_Init+0x180>)
 800189a:	f043 0302 	orr.w	r3, r3, #2
 800189e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018a2:	4b47      	ldr	r3, [pc, #284]	; (80019c0 <MX_GPIO_Init+0x180>)
 80018a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b0:	4b43      	ldr	r3, [pc, #268]	; (80019c0 <MX_GPIO_Init+0x180>)
 80018b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b6:	4a42      	ldr	r2, [pc, #264]	; (80019c0 <MX_GPIO_Init+0x180>)
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018c0:	4b3f      	ldr	r3, [pc, #252]	; (80019c0 <MX_GPIO_Init+0x180>)
 80018c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018ce:	4b3c      	ldr	r3, [pc, #240]	; (80019c0 <MX_GPIO_Init+0x180>)
 80018d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d4:	4a3a      	ldr	r2, [pc, #232]	; (80019c0 <MX_GPIO_Init+0x180>)
 80018d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018de:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <MX_GPIO_Init+0x180>)
 80018e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ec:	4b34      	ldr	r3, [pc, #208]	; (80019c0 <MX_GPIO_Init+0x180>)
 80018ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f2:	4a33      	ldr	r2, [pc, #204]	; (80019c0 <MX_GPIO_Init+0x180>)
 80018f4:	f043 0310 	orr.w	r3, r3, #16
 80018f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018fc:	4b30      	ldr	r3, [pc, #192]	; (80019c0 <MX_GPIO_Init+0x180>)
 80018fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	f244 0101 	movw	r1, #16385	; 0x4001
 8001910:	482c      	ldr	r0, [pc, #176]	; (80019c4 <MX_GPIO_Init+0x184>)
 8001912:	f003 fb03 	bl	8004f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800191c:	482a      	ldr	r0, [pc, #168]	; (80019c8 <MX_GPIO_Init+0x188>)
 800191e:	f003 fafd 	bl	8004f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001922:	2200      	movs	r2, #0
 8001924:	2102      	movs	r1, #2
 8001926:	4829      	ldr	r0, [pc, #164]	; (80019cc <MX_GPIO_Init+0x18c>)
 8001928:	f003 faf8 	bl	8004f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800192c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001932:	2300      	movs	r3, #0
 8001934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800193a:	f107 031c 	add.w	r3, r7, #28
 800193e:	4619      	mov	r1, r3
 8001940:	4823      	ldr	r0, [pc, #140]	; (80019d0 <MX_GPIO_Init+0x190>)
 8001942:	f003 f943 	bl	8004bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001946:	f244 0301 	movw	r3, #16385	; 0x4001
 800194a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194c:	2301      	movs	r3, #1
 800194e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	4619      	mov	r1, r3
 800195e:	4819      	ldr	r0, [pc, #100]	; (80019c4 <MX_GPIO_Init+0x184>)
 8001960:	f003 f934 	bl	8004bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196a:	2301      	movs	r3, #1
 800196c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 031c 	add.w	r3, r7, #28
 800197a:	4619      	mov	r1, r3
 800197c:	4812      	ldr	r0, [pc, #72]	; (80019c8 <MX_GPIO_Init+0x188>)
 800197e:	f003 f925 	bl	8004bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001986:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800198a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001990:	f107 031c 	add.w	r3, r7, #28
 8001994:	4619      	mov	r1, r3
 8001996:	480f      	ldr	r0, [pc, #60]	; (80019d4 <MX_GPIO_Init+0x194>)
 8001998:	f003 f918 	bl	8004bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800199c:	2302      	movs	r3, #2
 800199e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a0:	2301      	movs	r3, #1
 80019a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	4619      	mov	r1, r3
 80019b2:	4806      	ldr	r0, [pc, #24]	; (80019cc <MX_GPIO_Init+0x18c>)
 80019b4:	f003 f90a 	bl	8004bcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019b8:	bf00      	nop
 80019ba:	3730      	adds	r7, #48	; 0x30
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	58024400 	.word	0x58024400
 80019c4:	58020400 	.word	0x58020400
 80019c8:	58020c00 	.word	0x58020c00
 80019cc:	58021000 	.word	0x58021000
 80019d0:	58020800 	.word	0x58020800
 80019d4:	58021800 	.word	0x58021800

080019d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80019e0:	f008 f9fe 	bl	8009de0 <MX_LWIP_Init>
     * iperf3 is not compatible at all.
     * Adding lwiperf.c file to the project is necessary.
     * The default include path should already contain
     * 'lwip/apps/lwiperf.h'
     */
  	LOCK_TCPIP_CORE();
 80019e4:	f009 f850 	bl	800aa88 <sys_lock_tcpip_core>
    lwiperf_start_tcp_server_default(NULL, NULL);
 80019e8:	2100      	movs	r1, #0
 80019ea:	2000      	movs	r0, #0
 80019ec:	f7ff fc1c 	bl	8001228 <lwiperf_start_tcp_server_default>

    ip4_addr_t remote_addr;
    IP4_ADDR(&remote_addr, 192, 168, 15, 7);
 80019f0:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <StartDefaultTask+0x38>)
 80019f2:	60fb      	str	r3, [r7, #12]
    lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	2200      	movs	r2, #0
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fcd3 	bl	80013a8 <lwiperf_start_tcp_client_default>
    UNLOCK_TCPIP_CORE();
 8001a02:	f009 f851 	bl	800aaa8 <sys_unlock_tcpip_core>
  /* Infinite loop */
  for(;;)
  {
      osDelay(1000);
 8001a06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a0a:	f009 f9e4 	bl	800add6 <osDelay>
 8001a0e:	e7fa      	b.n	8001a06 <StartDefaultTask+0x2e>
 8001a10:	070fa8c0 	.word	0x070fa8c0

08001a14 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001a26:	f000 fd8f 	bl	8002548 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001a36:	231f      	movs	r3, #31
 8001a38:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001a3a:	2387      	movs	r3, #135	; 0x87
 8001a3c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001a42:	2300      	movs	r3, #0
 8001a44:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001a46:	2301      	movs	r3, #1
 8001a48:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a56:	463b      	mov	r3, r7
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f000 fdad 	bl	80025b8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000200;
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <MPU_Config+0xa0>)
 8001a64:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8001a66:	230e      	movs	r3, #14
 8001a68:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001a72:	2303      	movs	r3, #3
 8001a74:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 fd9b 	bl	80025b8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001a82:	2302      	movs	r3, #2
 8001a84:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001a86:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001a8a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001a94:	2301      	movs	r3, #1
 8001a96:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 fd8a 	bl	80025b8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001aa4:	2004      	movs	r0, #4
 8001aa6:	f000 fd67 	bl	8002578 <HAL_MPU_Enable>

}
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	30000200 	.word	0x30000200

08001ab8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d101      	bne.n	8001ace <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001aca:	f000 fc29 	bl	8002320 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40001000 	.word	0x40001000

08001adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae0:	b672      	cpsid	i
}
 8001ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <Error_Handler+0x8>
	...

08001ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <HAL_MspInit+0x38>)
 8001af0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001af4:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <HAL_MspInit+0x38>)
 8001af6:	f043 0302 	orr.w	r3, r3, #2
 8001afa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_MspInit+0x38>)
 8001b00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	210f      	movs	r1, #15
 8001b10:	f06f 0001 	mvn.w	r0, #1
 8001b14:	f000 fcf0 	bl	80024f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	58024400 	.word	0x58024400

08001b24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b0b8      	sub	sp, #224	; 0xe0
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b3c:	f107 0310 	add.w	r3, r7, #16
 8001b40:	22b8      	movs	r2, #184	; 0xb8
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f018 fae5 	bl	801a114 <memset>
  if(huart->Instance==USART3)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a2b      	ldr	r2, [pc, #172]	; (8001bfc <HAL_UART_MspInit+0xd8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d14e      	bne.n	8001bf2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b54:	f04f 0202 	mov.w	r2, #2
 8001b58:	f04f 0300 	mov.w	r3, #0
 8001b5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b66:	f107 0310 	add.w	r3, r7, #16
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f004 f9d2 	bl	8005f14 <HAL_RCCEx_PeriphCLKConfig>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001b76:	f7ff ffb1 	bl	8001adc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b7a:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <HAL_UART_MspInit+0xdc>)
 8001b7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b80:	4a1f      	ldr	r2, [pc, #124]	; (8001c00 <HAL_UART_MspInit+0xdc>)
 8001b82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <HAL_UART_MspInit+0xdc>)
 8001b8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_UART_MspInit+0xdc>)
 8001b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9e:	4a18      	ldr	r2, [pc, #96]	; (8001c00 <HAL_UART_MspInit+0xdc>)
 8001ba0:	f043 0308 	orr.w	r3, r3, #8
 8001ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba8:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <HAL_UART_MspInit+0xdc>)
 8001baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001bb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bd0:	2307      	movs	r3, #7
 8001bd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4809      	ldr	r0, [pc, #36]	; (8001c04 <HAL_UART_MspInit+0xe0>)
 8001bde:	f002 fff5 	bl	8004bcc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2105      	movs	r1, #5
 8001be6:	2027      	movs	r0, #39	; 0x27
 8001be8:	f000 fc86 	bl	80024f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001bec:	2027      	movs	r0, #39	; 0x27
 8001bee:	f000 fc9d 	bl	800252c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bf2:	bf00      	nop
 8001bf4:	37e0      	adds	r7, #224	; 0xe0
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40004800 	.word	0x40004800
 8001c00:	58024400 	.word	0x58024400
 8001c04:	58020c00 	.word	0x58020c00

08001c08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b090      	sub	sp, #64	; 0x40
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b0f      	cmp	r3, #15
 8001c14:	d827      	bhi.n	8001c66 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001c16:	2200      	movs	r2, #0
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	2036      	movs	r0, #54	; 0x36
 8001c1c:	f000 fc6c 	bl	80024f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c20:	2036      	movs	r0, #54	; 0x36
 8001c22:	f000 fc83 	bl	800252c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001c26:	4a29      	ldr	r2, [pc, #164]	; (8001ccc <HAL_InitTick+0xc4>)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c2c:	4b28      	ldr	r3, [pc, #160]	; (8001cd0 <HAL_InitTick+0xc8>)
 8001c2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c32:	4a27      	ldr	r2, [pc, #156]	; (8001cd0 <HAL_InitTick+0xc8>)
 8001c34:	f043 0310 	orr.w	r3, r3, #16
 8001c38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c3c:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <HAL_InitTick+0xc8>)
 8001c3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c4a:	f107 0210 	add.w	r2, r7, #16
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f004 f91b 	bl	8005e90 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d106      	bne.n	8001c72 <HAL_InitTick+0x6a>
 8001c64:	e001      	b.n	8001c6a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e02b      	b.n	8001cc2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c6a:	f004 f8e5 	bl	8005e38 <HAL_RCC_GetPCLK1Freq>
 8001c6e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001c70:	e004      	b.n	8001c7c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c72:	f004 f8e1 	bl	8005e38 <HAL_RCC_GetPCLK1Freq>
 8001c76:	4603      	mov	r3, r0
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c7e:	4a15      	ldr	r2, [pc, #84]	; (8001cd4 <HAL_InitTick+0xcc>)
 8001c80:	fba2 2303 	umull	r2, r3, r2, r3
 8001c84:	0c9b      	lsrs	r3, r3, #18
 8001c86:	3b01      	subs	r3, #1
 8001c88:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <HAL_InitTick+0xd0>)
 8001c8c:	4a13      	ldr	r2, [pc, #76]	; (8001cdc <HAL_InitTick+0xd4>)
 8001c8e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_InitTick+0xd0>)
 8001c92:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c96:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c98:	4a0f      	ldr	r2, [pc, #60]	; (8001cd8 <HAL_InitTick+0xd0>)
 8001c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <HAL_InitTick+0xd0>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <HAL_InitTick+0xd0>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001caa:	480b      	ldr	r0, [pc, #44]	; (8001cd8 <HAL_InitTick+0xd0>)
 8001cac:	f005 fef4 	bl	8007a98 <HAL_TIM_Base_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d104      	bne.n	8001cc0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001cb6:	4808      	ldr	r0, [pc, #32]	; (8001cd8 <HAL_InitTick+0xd0>)
 8001cb8:	f005 ff50 	bl	8007b5c <HAL_TIM_Base_Start_IT>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	e000      	b.n	8001cc2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3740      	adds	r7, #64	; 0x40
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	24000008 	.word	0x24000008
 8001cd0:	58024400 	.word	0x58024400
 8001cd4:	431bde83 	.word	0x431bde83
 8001cd8:	24004b8c 	.word	0x24004b8c
 8001cdc:	40001000 	.word	0x40001000

08001ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <NMI_Handler+0x4>

08001ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cea:	e7fe      	b.n	8001cea <HardFault_Handler+0x4>

08001cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <MemManage_Handler+0x4>

08001cf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf6:	e7fe      	b.n	8001cf6 <BusFault_Handler+0x4>

08001cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <UsageFault_Handler+0x4>

08001cfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d10:	4802      	ldr	r0, [pc, #8]	; (8001d1c <USART3_IRQHandler+0x10>)
 8001d12:	f006 fa93 	bl	800823c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	24004af4 	.word	0x24004af4

08001d20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <TIM6_DAC_IRQHandler+0x10>)
 8001d26:	f005 ff9f 	bl	8007c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	24004b8c 	.word	0x24004b8c

08001d34 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <ETH_IRQHandler+0x10>)
 8001d3a:	f001 fda9 	bl	8003890 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	24004c60 	.word	0x24004c60

08001d48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return 1;
 8001d4c:	2301      	movs	r3, #1
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <_kill>:

int _kill(int pid, int sig)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d62:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <_kill+0x20>)
 8001d64:	2216      	movs	r2, #22
 8001d66:	601a      	str	r2, [r3, #0]
  return -1;
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	240152c4 	.word	0x240152c4

08001d7c <_exit>:

void _exit (int status)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ffe5 	bl	8001d58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d8e:	e7fe      	b.n	8001d8e <_exit+0x12>

08001d90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	e00a      	b.n	8001db8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001da2:	f3af 8000 	nop.w
 8001da6:	4601      	mov	r1, r0
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	60ba      	str	r2, [r7, #8]
 8001dae:	b2ca      	uxtb	r2, r1
 8001db0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	3301      	adds	r3, #1
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	dbf0      	blt.n	8001da2 <_read+0x12>
  }

  return len;
 8001dc0:	687b      	ldr	r3, [r7, #4]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <_close>:
  }
  return len;
}

int _close(int file)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001df2:	605a      	str	r2, [r3, #4]
  return 0;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <_isatty>:

int _isatty(int file)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e0a:	2301      	movs	r3, #1
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b087      	sub	sp, #28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e3c:	4a14      	ldr	r2, [pc, #80]	; (8001e90 <_sbrk+0x5c>)
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <_sbrk+0x60>)
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e48:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <_sbrk+0x64>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d102      	bne.n	8001e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <_sbrk+0x64>)
 8001e52:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <_sbrk+0x68>)
 8001e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <_sbrk+0x64>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d205      	bcs.n	8001e70 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001e64:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <_sbrk+0x6c>)
 8001e66:	220c      	movs	r2, #12
 8001e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6e:	e009      	b.n	8001e84 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e76:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	4a06      	ldr	r2, [pc, #24]	; (8001e98 <_sbrk+0x64>)
 8001e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	371c      	adds	r7, #28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	24050000 	.word	0x24050000
 8001e94:	00001000 	.word	0x00001000
 8001e98:	24004bd8 	.word	0x24004bd8
 8001e9c:	240152d8 	.word	0x240152d8
 8001ea0:	240152c4 	.word	0x240152c4

08001ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ea8:	4b32      	ldr	r3, [pc, #200]	; (8001f74 <SystemInit+0xd0>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	4a31      	ldr	r2, [pc, #196]	; (8001f74 <SystemInit+0xd0>)
 8001eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001eb8:	4b2f      	ldr	r3, [pc, #188]	; (8001f78 <SystemInit+0xd4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	2b06      	cmp	r3, #6
 8001ec2:	d807      	bhi.n	8001ed4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ec4:	4b2c      	ldr	r3, [pc, #176]	; (8001f78 <SystemInit+0xd4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f023 030f 	bic.w	r3, r3, #15
 8001ecc:	4a2a      	ldr	r2, [pc, #168]	; (8001f78 <SystemInit+0xd4>)
 8001ece:	f043 0307 	orr.w	r3, r3, #7
 8001ed2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ed4:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <SystemInit+0xd8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a28      	ldr	r2, [pc, #160]	; (8001f7c <SystemInit+0xd8>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ee0:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <SystemInit+0xd8>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ee6:	4b25      	ldr	r3, [pc, #148]	; (8001f7c <SystemInit+0xd8>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	4924      	ldr	r1, [pc, #144]	; (8001f7c <SystemInit+0xd8>)
 8001eec:	4b24      	ldr	r3, [pc, #144]	; (8001f80 <SystemInit+0xdc>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ef2:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <SystemInit+0xd4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d007      	beq.n	8001f0e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001efe:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <SystemInit+0xd4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 030f 	bic.w	r3, r3, #15
 8001f06:	4a1c      	ldr	r2, [pc, #112]	; (8001f78 <SystemInit+0xd4>)
 8001f08:	f043 0307 	orr.w	r3, r3, #7
 8001f0c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <SystemInit+0xd8>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <SystemInit+0xd8>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <SystemInit+0xd8>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f20:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <SystemInit+0xd8>)
 8001f22:	4a18      	ldr	r2, [pc, #96]	; (8001f84 <SystemInit+0xe0>)
 8001f24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <SystemInit+0xd8>)
 8001f28:	4a17      	ldr	r2, [pc, #92]	; (8001f88 <SystemInit+0xe4>)
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f2c:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <SystemInit+0xd8>)
 8001f2e:	4a17      	ldr	r2, [pc, #92]	; (8001f8c <SystemInit+0xe8>)
 8001f30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <SystemInit+0xd8>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f38:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <SystemInit+0xd8>)
 8001f3a:	4a14      	ldr	r2, [pc, #80]	; (8001f8c <SystemInit+0xe8>)
 8001f3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f3e:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <SystemInit+0xd8>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f44:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <SystemInit+0xd8>)
 8001f46:	4a11      	ldr	r2, [pc, #68]	; (8001f8c <SystemInit+0xe8>)
 8001f48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <SystemInit+0xd8>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f50:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <SystemInit+0xd8>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <SystemInit+0xd8>)
 8001f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <SystemInit+0xd8>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f62:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <SystemInit+0xec>)
 8001f64:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001f68:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00
 8001f78:	52002000 	.word	0x52002000
 8001f7c:	58024400 	.word	0x58024400
 8001f80:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f84:	02020200 	.word	0x02020200
 8001f88:	01ff0000 	.word	0x01ff0000
 8001f8c:	01010280 	.word	0x01010280
 8001f90:	52004000 	.word	0x52004000

08001f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f98:	f7ff ff84 	bl	8001ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f9c:	480c      	ldr	r0, [pc, #48]	; (8001fd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f9e:	490d      	ldr	r1, [pc, #52]	; (8001fd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa4:	e002      	b.n	8001fac <LoopCopyDataInit>

08001fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001faa:	3304      	adds	r3, #4

08001fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb0:	d3f9      	bcc.n	8001fa6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fb4:	4c0a      	ldr	r4, [pc, #40]	; (8001fe0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb8:	e001      	b.n	8001fbe <LoopFillZerobss>

08001fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fbc:	3204      	adds	r2, #4

08001fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc0:	d3fb      	bcc.n	8001fba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fc2:	f018 f94b 	bl	801a25c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fc6:	f7ff faf5 	bl	80015b4 <main>
  bx  lr
 8001fca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fcc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001fd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001fd4:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8001fd8:	0801e3bc 	.word	0x0801e3bc
  ldr r2, =_sbss
 8001fdc:	24004ad4 	.word	0x24004ad4
  ldr r4, =_ebss
 8001fe0:	240152d4 	.word	0x240152d4

08001fe4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe4:	e7fe      	b.n	8001fe4 <ADC3_IRQHandler>

08001fe6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00b      	beq.n	800200e <LAN8742_RegisterBusIO+0x28>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d007      	beq.n	800200e <LAN8742_RegisterBusIO+0x28>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <LAN8742_RegisterBusIO+0x28>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d102      	bne.n	8002014 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295
 8002012:	e014      	b.n	800203e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d17c      	bne.n	8002164 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2220      	movs	r2, #32
 800207c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	e01c      	b.n	80020be <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	f107 0208 	add.w	r2, r7, #8
 800208c:	2112      	movs	r1, #18
 800208e:	6978      	ldr	r0, [r7, #20]
 8002090:	4798      	blx	r3
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	da03      	bge.n	80020a0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002098:	f06f 0304 	mvn.w	r3, #4
 800209c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800209e:	e00b      	b.n	80020b8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f003 031f 	and.w	r3, r3, #31
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d105      	bne.n	80020b8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
         break;
 80020b6:	e005      	b.n	80020c4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	3301      	adds	r3, #1
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b1f      	cmp	r3, #31
 80020c2:	d9df      	bls.n	8002084 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b1f      	cmp	r3, #31
 80020ca:	d902      	bls.n	80020d2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80020cc:	f06f 0302 	mvn.w	r3, #2
 80020d0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d145      	bne.n	8002164 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6810      	ldr	r0, [r2, #0]
 80020e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020e4:	2100      	movs	r1, #0
 80020e6:	4798      	blx	r3
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	db37      	blt.n	800215e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6810      	ldr	r0, [r2, #0]
 80020f6:	f107 0208 	add.w	r2, r7, #8
 80020fa:	2100      	movs	r1, #0
 80020fc:	4798      	blx	r3
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	db28      	blt.n	8002156 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	4798      	blx	r3
 800210a:	4603      	mov	r3, r0
 800210c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800210e:	e01c      	b.n	800214a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	4798      	blx	r3
 8002116:	4603      	mov	r3, r0
 8002118:	461a      	mov	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002122:	d80e      	bhi.n	8002142 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6810      	ldr	r0, [r2, #0]
 800212c:	f107 0208 	add.w	r2, r7, #8
 8002130:	2100      	movs	r1, #0
 8002132:	4798      	blx	r3
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	da07      	bge.n	800214a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800213a:	f06f 0304 	mvn.w	r3, #4
 800213e:	613b      	str	r3, [r7, #16]
                 break;
 8002140:	e010      	b.n	8002164 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002142:	f06f 0301 	mvn.w	r3, #1
 8002146:	613b      	str	r3, [r7, #16]
               break;
 8002148:	e00c      	b.n	8002164 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1dd      	bne.n	8002110 <LAN8742_Init+0xc6>
 8002154:	e006      	b.n	8002164 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002156:	f06f 0304 	mvn.w	r3, #4
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	e002      	b.n	8002164 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800215e:	f06f 0303 	mvn.w	r3, #3
 8002162:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d112      	bne.n	8002190 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	4798      	blx	r3
 8002170:	4603      	mov	r3, r0
 8002172:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002174:	bf00      	nop
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	4798      	blx	r3
 800217c:	4603      	mov	r3, r0
 800217e:	461a      	mov	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002188:	d9f5      	bls.n	8002176 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002190:	693b      	ldr	r3, [r7, #16]
 }
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6810      	ldr	r0, [r2, #0]
 80021ae:	f107 020c 	add.w	r2, r7, #12
 80021b2:	2101      	movs	r1, #1
 80021b4:	4798      	blx	r3
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	da02      	bge.n	80021c2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80021bc:	f06f 0304 	mvn.w	r3, #4
 80021c0:	e06e      	b.n	80022a0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6810      	ldr	r0, [r2, #0]
 80021ca:	f107 020c 	add.w	r2, r7, #12
 80021ce:	2101      	movs	r1, #1
 80021d0:	4798      	blx	r3
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	da02      	bge.n	80021de <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80021d8:	f06f 0304 	mvn.w	r3, #4
 80021dc:	e060      	b.n	80022a0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80021e8:	2301      	movs	r3, #1
 80021ea:	e059      	b.n	80022a0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6810      	ldr	r0, [r2, #0]
 80021f4:	f107 020c 	add.w	r2, r7, #12
 80021f8:	2100      	movs	r1, #0
 80021fa:	4798      	blx	r3
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	da02      	bge.n	8002208 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002202:	f06f 0304 	mvn.w	r3, #4
 8002206:	e04b      	b.n	80022a0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d11b      	bne.n	800224a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d006      	beq.n	800222a <LAN8742_GetLinkState+0x90>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002226:	2302      	movs	r3, #2
 8002228:	e03a      	b.n	80022a0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002234:	2303      	movs	r3, #3
 8002236:	e033      	b.n	80022a0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002242:	2304      	movs	r3, #4
 8002244:	e02c      	b.n	80022a0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002246:	2305      	movs	r3, #5
 8002248:	e02a      	b.n	80022a0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6810      	ldr	r0, [r2, #0]
 8002252:	f107 020c 	add.w	r2, r7, #12
 8002256:	211f      	movs	r1, #31
 8002258:	4798      	blx	r3
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	da02      	bge.n	8002266 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002260:	f06f 0304 	mvn.w	r3, #4
 8002264:	e01c      	b.n	80022a0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002270:	2306      	movs	r3, #6
 8002272:	e015      	b.n	80022a0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f003 031c 	and.w	r3, r3, #28
 800227a:	2b18      	cmp	r3, #24
 800227c:	d101      	bne.n	8002282 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800227e:	2302      	movs	r3, #2
 8002280:	e00e      	b.n	80022a0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f003 031c 	and.w	r3, r3, #28
 8002288:	2b08      	cmp	r3, #8
 800228a:	d101      	bne.n	8002290 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800228c:	2303      	movs	r3, #3
 800228e:	e007      	b.n	80022a0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 031c 	and.w	r3, r3, #28
 8002296:	2b14      	cmp	r3, #20
 8002298:	d101      	bne.n	800229e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800229a:	2304      	movs	r3, #4
 800229c:	e000      	b.n	80022a0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800229e:	2305      	movs	r3, #5
    }				
  }
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ae:	2003      	movs	r0, #3
 80022b0:	f000 f917 	bl	80024e2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022b4:	f003 fc16 	bl	8005ae4 <HAL_RCC_GetSysClockFreq>
 80022b8:	4602      	mov	r2, r0
 80022ba:	4b15      	ldr	r3, [pc, #84]	; (8002310 <HAL_Init+0x68>)
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	0a1b      	lsrs	r3, r3, #8
 80022c0:	f003 030f 	and.w	r3, r3, #15
 80022c4:	4913      	ldr	r1, [pc, #76]	; (8002314 <HAL_Init+0x6c>)
 80022c6:	5ccb      	ldrb	r3, [r1, r3]
 80022c8:	f003 031f 	and.w	r3, r3, #31
 80022cc:	fa22 f303 	lsr.w	r3, r2, r3
 80022d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <HAL_Init+0x68>)
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	4a0e      	ldr	r2, [pc, #56]	; (8002314 <HAL_Init+0x6c>)
 80022dc:	5cd3      	ldrb	r3, [r2, r3]
 80022de:	f003 031f 	and.w	r3, r3, #31
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	fa22 f303 	lsr.w	r3, r2, r3
 80022e8:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <HAL_Init+0x70>)
 80022ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022ec:	4a0b      	ldr	r2, [pc, #44]	; (800231c <HAL_Init+0x74>)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022f2:	200f      	movs	r0, #15
 80022f4:	f7ff fc88 	bl	8001c08 <HAL_InitTick>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e002      	b.n	8002308 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002302:	f7ff fbf1 	bl	8001ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	58024400 	.word	0x58024400
 8002314:	0801e168 	.word	0x0801e168
 8002318:	24000004 	.word	0x24000004
 800231c:	24000000 	.word	0x24000000

08002320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_IncTick+0x20>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_IncTick+0x24>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4413      	add	r3, r2
 8002330:	4a04      	ldr	r2, [pc, #16]	; (8002344 <HAL_IncTick+0x24>)
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	2400000c 	.word	0x2400000c
 8002344:	24004bdc 	.word	0x24004bdc

08002348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return uwTick;
 800234c:	4b03      	ldr	r3, [pc, #12]	; (800235c <HAL_GetTick+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	24004bdc 	.word	0x24004bdc

08002360 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002370:	4904      	ldr	r1, [pc, #16]	; (8002384 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4313      	orrs	r3, r2
 8002376:	604b      	str	r3, [r1, #4]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	58000400 	.word	0x58000400

08002388 <__NVIC_SetPriorityGrouping>:
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <__NVIC_SetPriorityGrouping+0x40>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a4:	4013      	ands	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b6:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <__NVIC_SetPriorityGrouping+0x40>)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	60d3      	str	r3, [r2, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00
 80023cc:	05fa0000 	.word	0x05fa0000

080023d0 <__NVIC_GetPriorityGrouping>:
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <__NVIC_GetPriorityGrouping+0x18>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	f003 0307 	and.w	r3, r3, #7
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_EnableIRQ>:
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	db0b      	blt.n	8002416 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fe:	88fb      	ldrh	r3, [r7, #6]
 8002400:	f003 021f 	and.w	r2, r3, #31
 8002404:	4907      	ldr	r1, [pc, #28]	; (8002424 <__NVIC_EnableIRQ+0x38>)
 8002406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	2001      	movs	r0, #1
 800240e:	fa00 f202 	lsl.w	r2, r0, r2
 8002412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	e000e100 	.word	0xe000e100

08002428 <__NVIC_SetPriority>:
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	6039      	str	r1, [r7, #0]
 8002432:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002434:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002438:	2b00      	cmp	r3, #0
 800243a:	db0a      	blt.n	8002452 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	b2da      	uxtb	r2, r3
 8002440:	490c      	ldr	r1, [pc, #48]	; (8002474 <__NVIC_SetPriority+0x4c>)
 8002442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002446:	0112      	lsls	r2, r2, #4
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	440b      	add	r3, r1
 800244c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002450:	e00a      	b.n	8002468 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4908      	ldr	r1, [pc, #32]	; (8002478 <__NVIC_SetPriority+0x50>)
 8002458:	88fb      	ldrh	r3, [r7, #6]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	3b04      	subs	r3, #4
 8002460:	0112      	lsls	r2, r2, #4
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	440b      	add	r3, r1
 8002466:	761a      	strb	r2, [r3, #24]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000e100 	.word	0xe000e100
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <NVIC_EncodePriority>:
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	; 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f1c3 0307 	rsb	r3, r3, #7
 8002496:	2b04      	cmp	r3, #4
 8002498:	bf28      	it	cs
 800249a:	2304      	movcs	r3, #4
 800249c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3304      	adds	r3, #4
 80024a2:	2b06      	cmp	r3, #6
 80024a4:	d902      	bls.n	80024ac <NVIC_EncodePriority+0x30>
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3b03      	subs	r3, #3
 80024aa:	e000      	b.n	80024ae <NVIC_EncodePriority+0x32>
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	f04f 32ff 	mov.w	r2, #4294967295
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43da      	mvns	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	401a      	ands	r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c4:	f04f 31ff 	mov.w	r1, #4294967295
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	43d9      	mvns	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	4313      	orrs	r3, r2
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3724      	adds	r7, #36	; 0x24
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff ff4c 	bl	8002388 <__NVIC_SetPriorityGrouping>
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002506:	f7ff ff63 	bl	80023d0 <__NVIC_GetPriorityGrouping>
 800250a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	68b9      	ldr	r1, [r7, #8]
 8002510:	6978      	ldr	r0, [r7, #20]
 8002512:	f7ff ffb3 	bl	800247c <NVIC_EncodePriority>
 8002516:	4602      	mov	r2, r0
 8002518:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800251c:	4611      	mov	r1, r2
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ff82 	bl	8002428 <__NVIC_SetPriority>
}
 8002524:	bf00      	nop
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff ff56 	bl	80023ec <__NVIC_EnableIRQ>
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800254c:	f3bf 8f5f 	dmb	sy
}
 8002550:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002552:	4b07      	ldr	r3, [pc, #28]	; (8002570 <HAL_MPU_Disable+0x28>)
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	4a06      	ldr	r2, [pc, #24]	; (8002570 <HAL_MPU_Disable+0x28>)
 8002558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800255e:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_MPU_Disable+0x2c>)
 8002560:	2200      	movs	r2, #0
 8002562:	605a      	str	r2, [r3, #4]
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	e000ed00 	.word	0xe000ed00
 8002574:	e000ed90 	.word	0xe000ed90

08002578 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002580:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <HAL_MPU_Enable+0x38>)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800258a:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <HAL_MPU_Enable+0x3c>)
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	4a09      	ldr	r2, [pc, #36]	; (80025b4 <HAL_MPU_Enable+0x3c>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002594:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002596:	f3bf 8f4f 	dsb	sy
}
 800259a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800259c:	f3bf 8f6f 	isb	sy
}
 80025a0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000ed90 	.word	0xe000ed90
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	785a      	ldrb	r2, [r3, #1]
 80025c4:	4b1d      	ldr	r3, [pc, #116]	; (800263c <HAL_MPU_ConfigRegion+0x84>)
 80025c6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d029      	beq.n	8002624 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80025d0:	4a1a      	ldr	r2, [pc, #104]	; (800263c <HAL_MPU_ConfigRegion+0x84>)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	7b1b      	ldrb	r3, [r3, #12]
 80025dc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	7adb      	ldrb	r3, [r3, #11]
 80025e2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	7a9b      	ldrb	r3, [r3, #10]
 80025ea:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80025ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	7b5b      	ldrb	r3, [r3, #13]
 80025f2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80025f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	7b9b      	ldrb	r3, [r3, #14]
 80025fa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80025fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	7bdb      	ldrb	r3, [r3, #15]
 8002602:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002604:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	7a5b      	ldrb	r3, [r3, #9]
 800260a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800260c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7a1b      	ldrb	r3, [r3, #8]
 8002612:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002614:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	7812      	ldrb	r2, [r2, #0]
 800261a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800261c:	4a07      	ldr	r2, [pc, #28]	; (800263c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800261e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002620:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002622:	e005      	b.n	8002630 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_MPU_ConfigRegion+0x84>)
 8002626:	2200      	movs	r2, #0
 8002628:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800262a:	4b04      	ldr	r3, [pc, #16]	; (800263c <HAL_MPU_ConfigRegion+0x84>)
 800262c:	2200      	movs	r2, #0
 800262e:	611a      	str	r2, [r3, #16]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000ed90 	.word	0xe000ed90

08002640 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002648:	f7ff fe7e 	bl	8002348 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e2dc      	b.n	8002c12 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d008      	beq.n	8002676 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2280      	movs	r2, #128	; 0x80
 8002668:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e2cd      	b.n	8002c12 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a76      	ldr	r2, [pc, #472]	; (8002854 <HAL_DMA_Abort+0x214>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d04a      	beq.n	8002716 <HAL_DMA_Abort+0xd6>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a74      	ldr	r2, [pc, #464]	; (8002858 <HAL_DMA_Abort+0x218>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d045      	beq.n	8002716 <HAL_DMA_Abort+0xd6>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a73      	ldr	r2, [pc, #460]	; (800285c <HAL_DMA_Abort+0x21c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d040      	beq.n	8002716 <HAL_DMA_Abort+0xd6>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a71      	ldr	r2, [pc, #452]	; (8002860 <HAL_DMA_Abort+0x220>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d03b      	beq.n	8002716 <HAL_DMA_Abort+0xd6>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a70      	ldr	r2, [pc, #448]	; (8002864 <HAL_DMA_Abort+0x224>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d036      	beq.n	8002716 <HAL_DMA_Abort+0xd6>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a6e      	ldr	r2, [pc, #440]	; (8002868 <HAL_DMA_Abort+0x228>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d031      	beq.n	8002716 <HAL_DMA_Abort+0xd6>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a6d      	ldr	r2, [pc, #436]	; (800286c <HAL_DMA_Abort+0x22c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d02c      	beq.n	8002716 <HAL_DMA_Abort+0xd6>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a6b      	ldr	r2, [pc, #428]	; (8002870 <HAL_DMA_Abort+0x230>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d027      	beq.n	8002716 <HAL_DMA_Abort+0xd6>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a6a      	ldr	r2, [pc, #424]	; (8002874 <HAL_DMA_Abort+0x234>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d022      	beq.n	8002716 <HAL_DMA_Abort+0xd6>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a68      	ldr	r2, [pc, #416]	; (8002878 <HAL_DMA_Abort+0x238>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d01d      	beq.n	8002716 <HAL_DMA_Abort+0xd6>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a67      	ldr	r2, [pc, #412]	; (800287c <HAL_DMA_Abort+0x23c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d018      	beq.n	8002716 <HAL_DMA_Abort+0xd6>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a65      	ldr	r2, [pc, #404]	; (8002880 <HAL_DMA_Abort+0x240>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d013      	beq.n	8002716 <HAL_DMA_Abort+0xd6>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a64      	ldr	r2, [pc, #400]	; (8002884 <HAL_DMA_Abort+0x244>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00e      	beq.n	8002716 <HAL_DMA_Abort+0xd6>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a62      	ldr	r2, [pc, #392]	; (8002888 <HAL_DMA_Abort+0x248>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d009      	beq.n	8002716 <HAL_DMA_Abort+0xd6>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a61      	ldr	r2, [pc, #388]	; (800288c <HAL_DMA_Abort+0x24c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d004      	beq.n	8002716 <HAL_DMA_Abort+0xd6>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a5f      	ldr	r2, [pc, #380]	; (8002890 <HAL_DMA_Abort+0x250>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <HAL_DMA_Abort+0xda>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <HAL_DMA_Abort+0xdc>
 800271a:	2300      	movs	r3, #0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d013      	beq.n	8002748 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 021e 	bic.w	r2, r2, #30
 800272e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800273e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	e00a      	b.n	800275e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 020e 	bic.w	r2, r2, #14
 8002756:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a3c      	ldr	r2, [pc, #240]	; (8002854 <HAL_DMA_Abort+0x214>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d072      	beq.n	800284e <HAL_DMA_Abort+0x20e>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a3a      	ldr	r2, [pc, #232]	; (8002858 <HAL_DMA_Abort+0x218>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d06d      	beq.n	800284e <HAL_DMA_Abort+0x20e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a39      	ldr	r2, [pc, #228]	; (800285c <HAL_DMA_Abort+0x21c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d068      	beq.n	800284e <HAL_DMA_Abort+0x20e>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a37      	ldr	r2, [pc, #220]	; (8002860 <HAL_DMA_Abort+0x220>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d063      	beq.n	800284e <HAL_DMA_Abort+0x20e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a36      	ldr	r2, [pc, #216]	; (8002864 <HAL_DMA_Abort+0x224>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d05e      	beq.n	800284e <HAL_DMA_Abort+0x20e>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a34      	ldr	r2, [pc, #208]	; (8002868 <HAL_DMA_Abort+0x228>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d059      	beq.n	800284e <HAL_DMA_Abort+0x20e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a33      	ldr	r2, [pc, #204]	; (800286c <HAL_DMA_Abort+0x22c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d054      	beq.n	800284e <HAL_DMA_Abort+0x20e>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a31      	ldr	r2, [pc, #196]	; (8002870 <HAL_DMA_Abort+0x230>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d04f      	beq.n	800284e <HAL_DMA_Abort+0x20e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a30      	ldr	r2, [pc, #192]	; (8002874 <HAL_DMA_Abort+0x234>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d04a      	beq.n	800284e <HAL_DMA_Abort+0x20e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a2e      	ldr	r2, [pc, #184]	; (8002878 <HAL_DMA_Abort+0x238>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d045      	beq.n	800284e <HAL_DMA_Abort+0x20e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a2d      	ldr	r2, [pc, #180]	; (800287c <HAL_DMA_Abort+0x23c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d040      	beq.n	800284e <HAL_DMA_Abort+0x20e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a2b      	ldr	r2, [pc, #172]	; (8002880 <HAL_DMA_Abort+0x240>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d03b      	beq.n	800284e <HAL_DMA_Abort+0x20e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a2a      	ldr	r2, [pc, #168]	; (8002884 <HAL_DMA_Abort+0x244>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d036      	beq.n	800284e <HAL_DMA_Abort+0x20e>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a28      	ldr	r2, [pc, #160]	; (8002888 <HAL_DMA_Abort+0x248>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d031      	beq.n	800284e <HAL_DMA_Abort+0x20e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a27      	ldr	r2, [pc, #156]	; (800288c <HAL_DMA_Abort+0x24c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d02c      	beq.n	800284e <HAL_DMA_Abort+0x20e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a25      	ldr	r2, [pc, #148]	; (8002890 <HAL_DMA_Abort+0x250>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d027      	beq.n	800284e <HAL_DMA_Abort+0x20e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a24      	ldr	r2, [pc, #144]	; (8002894 <HAL_DMA_Abort+0x254>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d022      	beq.n	800284e <HAL_DMA_Abort+0x20e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a22      	ldr	r2, [pc, #136]	; (8002898 <HAL_DMA_Abort+0x258>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d01d      	beq.n	800284e <HAL_DMA_Abort+0x20e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a21      	ldr	r2, [pc, #132]	; (800289c <HAL_DMA_Abort+0x25c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d018      	beq.n	800284e <HAL_DMA_Abort+0x20e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a1f      	ldr	r2, [pc, #124]	; (80028a0 <HAL_DMA_Abort+0x260>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d013      	beq.n	800284e <HAL_DMA_Abort+0x20e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a1e      	ldr	r2, [pc, #120]	; (80028a4 <HAL_DMA_Abort+0x264>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00e      	beq.n	800284e <HAL_DMA_Abort+0x20e>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1c      	ldr	r2, [pc, #112]	; (80028a8 <HAL_DMA_Abort+0x268>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d009      	beq.n	800284e <HAL_DMA_Abort+0x20e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a1b      	ldr	r2, [pc, #108]	; (80028ac <HAL_DMA_Abort+0x26c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d004      	beq.n	800284e <HAL_DMA_Abort+0x20e>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a19      	ldr	r2, [pc, #100]	; (80028b0 <HAL_DMA_Abort+0x270>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d132      	bne.n	80028b4 <HAL_DMA_Abort+0x274>
 800284e:	2301      	movs	r3, #1
 8002850:	e031      	b.n	80028b6 <HAL_DMA_Abort+0x276>
 8002852:	bf00      	nop
 8002854:	40020010 	.word	0x40020010
 8002858:	40020028 	.word	0x40020028
 800285c:	40020040 	.word	0x40020040
 8002860:	40020058 	.word	0x40020058
 8002864:	40020070 	.word	0x40020070
 8002868:	40020088 	.word	0x40020088
 800286c:	400200a0 	.word	0x400200a0
 8002870:	400200b8 	.word	0x400200b8
 8002874:	40020410 	.word	0x40020410
 8002878:	40020428 	.word	0x40020428
 800287c:	40020440 	.word	0x40020440
 8002880:	40020458 	.word	0x40020458
 8002884:	40020470 	.word	0x40020470
 8002888:	40020488 	.word	0x40020488
 800288c:	400204a0 	.word	0x400204a0
 8002890:	400204b8 	.word	0x400204b8
 8002894:	58025408 	.word	0x58025408
 8002898:	5802541c 	.word	0x5802541c
 800289c:	58025430 	.word	0x58025430
 80028a0:	58025444 	.word	0x58025444
 80028a4:	58025458 	.word	0x58025458
 80028a8:	5802546c 	.word	0x5802546c
 80028ac:	58025480 	.word	0x58025480
 80028b0:	58025494 	.word	0x58025494
 80028b4:	2300      	movs	r3, #0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d007      	beq.n	80028ca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a6d      	ldr	r2, [pc, #436]	; (8002a84 <HAL_DMA_Abort+0x444>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d04a      	beq.n	800296a <HAL_DMA_Abort+0x32a>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a6b      	ldr	r2, [pc, #428]	; (8002a88 <HAL_DMA_Abort+0x448>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d045      	beq.n	800296a <HAL_DMA_Abort+0x32a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a6a      	ldr	r2, [pc, #424]	; (8002a8c <HAL_DMA_Abort+0x44c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d040      	beq.n	800296a <HAL_DMA_Abort+0x32a>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a68      	ldr	r2, [pc, #416]	; (8002a90 <HAL_DMA_Abort+0x450>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d03b      	beq.n	800296a <HAL_DMA_Abort+0x32a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a67      	ldr	r2, [pc, #412]	; (8002a94 <HAL_DMA_Abort+0x454>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d036      	beq.n	800296a <HAL_DMA_Abort+0x32a>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a65      	ldr	r2, [pc, #404]	; (8002a98 <HAL_DMA_Abort+0x458>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d031      	beq.n	800296a <HAL_DMA_Abort+0x32a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a64      	ldr	r2, [pc, #400]	; (8002a9c <HAL_DMA_Abort+0x45c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d02c      	beq.n	800296a <HAL_DMA_Abort+0x32a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a62      	ldr	r2, [pc, #392]	; (8002aa0 <HAL_DMA_Abort+0x460>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d027      	beq.n	800296a <HAL_DMA_Abort+0x32a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a61      	ldr	r2, [pc, #388]	; (8002aa4 <HAL_DMA_Abort+0x464>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d022      	beq.n	800296a <HAL_DMA_Abort+0x32a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a5f      	ldr	r2, [pc, #380]	; (8002aa8 <HAL_DMA_Abort+0x468>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d01d      	beq.n	800296a <HAL_DMA_Abort+0x32a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a5e      	ldr	r2, [pc, #376]	; (8002aac <HAL_DMA_Abort+0x46c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d018      	beq.n	800296a <HAL_DMA_Abort+0x32a>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a5c      	ldr	r2, [pc, #368]	; (8002ab0 <HAL_DMA_Abort+0x470>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d013      	beq.n	800296a <HAL_DMA_Abort+0x32a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a5b      	ldr	r2, [pc, #364]	; (8002ab4 <HAL_DMA_Abort+0x474>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d00e      	beq.n	800296a <HAL_DMA_Abort+0x32a>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a59      	ldr	r2, [pc, #356]	; (8002ab8 <HAL_DMA_Abort+0x478>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d009      	beq.n	800296a <HAL_DMA_Abort+0x32a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a58      	ldr	r2, [pc, #352]	; (8002abc <HAL_DMA_Abort+0x47c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d004      	beq.n	800296a <HAL_DMA_Abort+0x32a>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a56      	ldr	r2, [pc, #344]	; (8002ac0 <HAL_DMA_Abort+0x480>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d108      	bne.n	800297c <HAL_DMA_Abort+0x33c>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0201 	bic.w	r2, r2, #1
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	e007      	b.n	800298c <HAL_DMA_Abort+0x34c>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800298c:	e013      	b.n	80029b6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800298e:	f7ff fcdb 	bl	8002348 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b05      	cmp	r3, #5
 800299a:	d90c      	bls.n	80029b6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2203      	movs	r2, #3
 80029a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e12d      	b.n	8002c12 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1e5      	bne.n	800298e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a2f      	ldr	r2, [pc, #188]	; (8002a84 <HAL_DMA_Abort+0x444>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d04a      	beq.n	8002a62 <HAL_DMA_Abort+0x422>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a2d      	ldr	r2, [pc, #180]	; (8002a88 <HAL_DMA_Abort+0x448>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d045      	beq.n	8002a62 <HAL_DMA_Abort+0x422>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a2c      	ldr	r2, [pc, #176]	; (8002a8c <HAL_DMA_Abort+0x44c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d040      	beq.n	8002a62 <HAL_DMA_Abort+0x422>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a2a      	ldr	r2, [pc, #168]	; (8002a90 <HAL_DMA_Abort+0x450>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d03b      	beq.n	8002a62 <HAL_DMA_Abort+0x422>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a29      	ldr	r2, [pc, #164]	; (8002a94 <HAL_DMA_Abort+0x454>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d036      	beq.n	8002a62 <HAL_DMA_Abort+0x422>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a27      	ldr	r2, [pc, #156]	; (8002a98 <HAL_DMA_Abort+0x458>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d031      	beq.n	8002a62 <HAL_DMA_Abort+0x422>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a26      	ldr	r2, [pc, #152]	; (8002a9c <HAL_DMA_Abort+0x45c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d02c      	beq.n	8002a62 <HAL_DMA_Abort+0x422>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a24      	ldr	r2, [pc, #144]	; (8002aa0 <HAL_DMA_Abort+0x460>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d027      	beq.n	8002a62 <HAL_DMA_Abort+0x422>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a23      	ldr	r2, [pc, #140]	; (8002aa4 <HAL_DMA_Abort+0x464>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d022      	beq.n	8002a62 <HAL_DMA_Abort+0x422>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a21      	ldr	r2, [pc, #132]	; (8002aa8 <HAL_DMA_Abort+0x468>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d01d      	beq.n	8002a62 <HAL_DMA_Abort+0x422>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a20      	ldr	r2, [pc, #128]	; (8002aac <HAL_DMA_Abort+0x46c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d018      	beq.n	8002a62 <HAL_DMA_Abort+0x422>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1e      	ldr	r2, [pc, #120]	; (8002ab0 <HAL_DMA_Abort+0x470>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d013      	beq.n	8002a62 <HAL_DMA_Abort+0x422>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1d      	ldr	r2, [pc, #116]	; (8002ab4 <HAL_DMA_Abort+0x474>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d00e      	beq.n	8002a62 <HAL_DMA_Abort+0x422>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1b      	ldr	r2, [pc, #108]	; (8002ab8 <HAL_DMA_Abort+0x478>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d009      	beq.n	8002a62 <HAL_DMA_Abort+0x422>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1a      	ldr	r2, [pc, #104]	; (8002abc <HAL_DMA_Abort+0x47c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d004      	beq.n	8002a62 <HAL_DMA_Abort+0x422>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a18      	ldr	r2, [pc, #96]	; (8002ac0 <HAL_DMA_Abort+0x480>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d101      	bne.n	8002a66 <HAL_DMA_Abort+0x426>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <HAL_DMA_Abort+0x428>
 8002a66:	2300      	movs	r3, #0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d02b      	beq.n	8002ac4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a70:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	223f      	movs	r2, #63	; 0x3f
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	609a      	str	r2, [r3, #8]
 8002a82:	e02a      	b.n	8002ada <HAL_DMA_Abort+0x49a>
 8002a84:	40020010 	.word	0x40020010
 8002a88:	40020028 	.word	0x40020028
 8002a8c:	40020040 	.word	0x40020040
 8002a90:	40020058 	.word	0x40020058
 8002a94:	40020070 	.word	0x40020070
 8002a98:	40020088 	.word	0x40020088
 8002a9c:	400200a0 	.word	0x400200a0
 8002aa0:	400200b8 	.word	0x400200b8
 8002aa4:	40020410 	.word	0x40020410
 8002aa8:	40020428 	.word	0x40020428
 8002aac:	40020440 	.word	0x40020440
 8002ab0:	40020458 	.word	0x40020458
 8002ab4:	40020470 	.word	0x40020470
 8002ab8:	40020488 	.word	0x40020488
 8002abc:	400204a0 	.word	0x400204a0
 8002ac0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a4f      	ldr	r2, [pc, #316]	; (8002c1c <HAL_DMA_Abort+0x5dc>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d072      	beq.n	8002bca <HAL_DMA_Abort+0x58a>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a4d      	ldr	r2, [pc, #308]	; (8002c20 <HAL_DMA_Abort+0x5e0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d06d      	beq.n	8002bca <HAL_DMA_Abort+0x58a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a4c      	ldr	r2, [pc, #304]	; (8002c24 <HAL_DMA_Abort+0x5e4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d068      	beq.n	8002bca <HAL_DMA_Abort+0x58a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a4a      	ldr	r2, [pc, #296]	; (8002c28 <HAL_DMA_Abort+0x5e8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d063      	beq.n	8002bca <HAL_DMA_Abort+0x58a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a49      	ldr	r2, [pc, #292]	; (8002c2c <HAL_DMA_Abort+0x5ec>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d05e      	beq.n	8002bca <HAL_DMA_Abort+0x58a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a47      	ldr	r2, [pc, #284]	; (8002c30 <HAL_DMA_Abort+0x5f0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d059      	beq.n	8002bca <HAL_DMA_Abort+0x58a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a46      	ldr	r2, [pc, #280]	; (8002c34 <HAL_DMA_Abort+0x5f4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d054      	beq.n	8002bca <HAL_DMA_Abort+0x58a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a44      	ldr	r2, [pc, #272]	; (8002c38 <HAL_DMA_Abort+0x5f8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d04f      	beq.n	8002bca <HAL_DMA_Abort+0x58a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a43      	ldr	r2, [pc, #268]	; (8002c3c <HAL_DMA_Abort+0x5fc>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d04a      	beq.n	8002bca <HAL_DMA_Abort+0x58a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a41      	ldr	r2, [pc, #260]	; (8002c40 <HAL_DMA_Abort+0x600>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d045      	beq.n	8002bca <HAL_DMA_Abort+0x58a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a40      	ldr	r2, [pc, #256]	; (8002c44 <HAL_DMA_Abort+0x604>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d040      	beq.n	8002bca <HAL_DMA_Abort+0x58a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a3e      	ldr	r2, [pc, #248]	; (8002c48 <HAL_DMA_Abort+0x608>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d03b      	beq.n	8002bca <HAL_DMA_Abort+0x58a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a3d      	ldr	r2, [pc, #244]	; (8002c4c <HAL_DMA_Abort+0x60c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d036      	beq.n	8002bca <HAL_DMA_Abort+0x58a>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a3b      	ldr	r2, [pc, #236]	; (8002c50 <HAL_DMA_Abort+0x610>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d031      	beq.n	8002bca <HAL_DMA_Abort+0x58a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a3a      	ldr	r2, [pc, #232]	; (8002c54 <HAL_DMA_Abort+0x614>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d02c      	beq.n	8002bca <HAL_DMA_Abort+0x58a>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a38      	ldr	r2, [pc, #224]	; (8002c58 <HAL_DMA_Abort+0x618>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d027      	beq.n	8002bca <HAL_DMA_Abort+0x58a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a37      	ldr	r2, [pc, #220]	; (8002c5c <HAL_DMA_Abort+0x61c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d022      	beq.n	8002bca <HAL_DMA_Abort+0x58a>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a35      	ldr	r2, [pc, #212]	; (8002c60 <HAL_DMA_Abort+0x620>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d01d      	beq.n	8002bca <HAL_DMA_Abort+0x58a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a34      	ldr	r2, [pc, #208]	; (8002c64 <HAL_DMA_Abort+0x624>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d018      	beq.n	8002bca <HAL_DMA_Abort+0x58a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a32      	ldr	r2, [pc, #200]	; (8002c68 <HAL_DMA_Abort+0x628>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d013      	beq.n	8002bca <HAL_DMA_Abort+0x58a>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a31      	ldr	r2, [pc, #196]	; (8002c6c <HAL_DMA_Abort+0x62c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d00e      	beq.n	8002bca <HAL_DMA_Abort+0x58a>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a2f      	ldr	r2, [pc, #188]	; (8002c70 <HAL_DMA_Abort+0x630>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d009      	beq.n	8002bca <HAL_DMA_Abort+0x58a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a2e      	ldr	r2, [pc, #184]	; (8002c74 <HAL_DMA_Abort+0x634>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d004      	beq.n	8002bca <HAL_DMA_Abort+0x58a>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a2c      	ldr	r2, [pc, #176]	; (8002c78 <HAL_DMA_Abort+0x638>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d101      	bne.n	8002bce <HAL_DMA_Abort+0x58e>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <HAL_DMA_Abort+0x590>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d015      	beq.n	8002c00 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002bdc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00c      	beq.n	8002c00 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bf4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002bfe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40020010 	.word	0x40020010
 8002c20:	40020028 	.word	0x40020028
 8002c24:	40020040 	.word	0x40020040
 8002c28:	40020058 	.word	0x40020058
 8002c2c:	40020070 	.word	0x40020070
 8002c30:	40020088 	.word	0x40020088
 8002c34:	400200a0 	.word	0x400200a0
 8002c38:	400200b8 	.word	0x400200b8
 8002c3c:	40020410 	.word	0x40020410
 8002c40:	40020428 	.word	0x40020428
 8002c44:	40020440 	.word	0x40020440
 8002c48:	40020458 	.word	0x40020458
 8002c4c:	40020470 	.word	0x40020470
 8002c50:	40020488 	.word	0x40020488
 8002c54:	400204a0 	.word	0x400204a0
 8002c58:	400204b8 	.word	0x400204b8
 8002c5c:	58025408 	.word	0x58025408
 8002c60:	5802541c 	.word	0x5802541c
 8002c64:	58025430 	.word	0x58025430
 8002c68:	58025444 	.word	0x58025444
 8002c6c:	58025458 	.word	0x58025458
 8002c70:	5802546c 	.word	0x5802546c
 8002c74:	58025480 	.word	0x58025480
 8002c78:	58025494 	.word	0x58025494

08002c7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e237      	b.n	80030fe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d004      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2280      	movs	r2, #128	; 0x80
 8002c9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e22c      	b.n	80030fe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a5c      	ldr	r2, [pc, #368]	; (8002e1c <HAL_DMA_Abort_IT+0x1a0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d04a      	beq.n	8002d44 <HAL_DMA_Abort_IT+0xc8>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a5b      	ldr	r2, [pc, #364]	; (8002e20 <HAL_DMA_Abort_IT+0x1a4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d045      	beq.n	8002d44 <HAL_DMA_Abort_IT+0xc8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a59      	ldr	r2, [pc, #356]	; (8002e24 <HAL_DMA_Abort_IT+0x1a8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d040      	beq.n	8002d44 <HAL_DMA_Abort_IT+0xc8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a58      	ldr	r2, [pc, #352]	; (8002e28 <HAL_DMA_Abort_IT+0x1ac>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d03b      	beq.n	8002d44 <HAL_DMA_Abort_IT+0xc8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a56      	ldr	r2, [pc, #344]	; (8002e2c <HAL_DMA_Abort_IT+0x1b0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d036      	beq.n	8002d44 <HAL_DMA_Abort_IT+0xc8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a55      	ldr	r2, [pc, #340]	; (8002e30 <HAL_DMA_Abort_IT+0x1b4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d031      	beq.n	8002d44 <HAL_DMA_Abort_IT+0xc8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a53      	ldr	r2, [pc, #332]	; (8002e34 <HAL_DMA_Abort_IT+0x1b8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d02c      	beq.n	8002d44 <HAL_DMA_Abort_IT+0xc8>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a52      	ldr	r2, [pc, #328]	; (8002e38 <HAL_DMA_Abort_IT+0x1bc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d027      	beq.n	8002d44 <HAL_DMA_Abort_IT+0xc8>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a50      	ldr	r2, [pc, #320]	; (8002e3c <HAL_DMA_Abort_IT+0x1c0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d022      	beq.n	8002d44 <HAL_DMA_Abort_IT+0xc8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a4f      	ldr	r2, [pc, #316]	; (8002e40 <HAL_DMA_Abort_IT+0x1c4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d01d      	beq.n	8002d44 <HAL_DMA_Abort_IT+0xc8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a4d      	ldr	r2, [pc, #308]	; (8002e44 <HAL_DMA_Abort_IT+0x1c8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d018      	beq.n	8002d44 <HAL_DMA_Abort_IT+0xc8>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a4c      	ldr	r2, [pc, #304]	; (8002e48 <HAL_DMA_Abort_IT+0x1cc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d013      	beq.n	8002d44 <HAL_DMA_Abort_IT+0xc8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a4a      	ldr	r2, [pc, #296]	; (8002e4c <HAL_DMA_Abort_IT+0x1d0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00e      	beq.n	8002d44 <HAL_DMA_Abort_IT+0xc8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a49      	ldr	r2, [pc, #292]	; (8002e50 <HAL_DMA_Abort_IT+0x1d4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d009      	beq.n	8002d44 <HAL_DMA_Abort_IT+0xc8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a47      	ldr	r2, [pc, #284]	; (8002e54 <HAL_DMA_Abort_IT+0x1d8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d004      	beq.n	8002d44 <HAL_DMA_Abort_IT+0xc8>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a46      	ldr	r2, [pc, #280]	; (8002e58 <HAL_DMA_Abort_IT+0x1dc>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d101      	bne.n	8002d48 <HAL_DMA_Abort_IT+0xcc>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <HAL_DMA_Abort_IT+0xce>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8086 	beq.w	8002e5c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2204      	movs	r2, #4
 8002d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a2f      	ldr	r2, [pc, #188]	; (8002e1c <HAL_DMA_Abort_IT+0x1a0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d04a      	beq.n	8002df8 <HAL_DMA_Abort_IT+0x17c>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a2e      	ldr	r2, [pc, #184]	; (8002e20 <HAL_DMA_Abort_IT+0x1a4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d045      	beq.n	8002df8 <HAL_DMA_Abort_IT+0x17c>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a2c      	ldr	r2, [pc, #176]	; (8002e24 <HAL_DMA_Abort_IT+0x1a8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d040      	beq.n	8002df8 <HAL_DMA_Abort_IT+0x17c>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a2b      	ldr	r2, [pc, #172]	; (8002e28 <HAL_DMA_Abort_IT+0x1ac>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d03b      	beq.n	8002df8 <HAL_DMA_Abort_IT+0x17c>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a29      	ldr	r2, [pc, #164]	; (8002e2c <HAL_DMA_Abort_IT+0x1b0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d036      	beq.n	8002df8 <HAL_DMA_Abort_IT+0x17c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a28      	ldr	r2, [pc, #160]	; (8002e30 <HAL_DMA_Abort_IT+0x1b4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d031      	beq.n	8002df8 <HAL_DMA_Abort_IT+0x17c>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a26      	ldr	r2, [pc, #152]	; (8002e34 <HAL_DMA_Abort_IT+0x1b8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d02c      	beq.n	8002df8 <HAL_DMA_Abort_IT+0x17c>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a25      	ldr	r2, [pc, #148]	; (8002e38 <HAL_DMA_Abort_IT+0x1bc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d027      	beq.n	8002df8 <HAL_DMA_Abort_IT+0x17c>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a23      	ldr	r2, [pc, #140]	; (8002e3c <HAL_DMA_Abort_IT+0x1c0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d022      	beq.n	8002df8 <HAL_DMA_Abort_IT+0x17c>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a22      	ldr	r2, [pc, #136]	; (8002e40 <HAL_DMA_Abort_IT+0x1c4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d01d      	beq.n	8002df8 <HAL_DMA_Abort_IT+0x17c>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a20      	ldr	r2, [pc, #128]	; (8002e44 <HAL_DMA_Abort_IT+0x1c8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d018      	beq.n	8002df8 <HAL_DMA_Abort_IT+0x17c>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a1f      	ldr	r2, [pc, #124]	; (8002e48 <HAL_DMA_Abort_IT+0x1cc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d013      	beq.n	8002df8 <HAL_DMA_Abort_IT+0x17c>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a1d      	ldr	r2, [pc, #116]	; (8002e4c <HAL_DMA_Abort_IT+0x1d0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00e      	beq.n	8002df8 <HAL_DMA_Abort_IT+0x17c>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a1c      	ldr	r2, [pc, #112]	; (8002e50 <HAL_DMA_Abort_IT+0x1d4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d009      	beq.n	8002df8 <HAL_DMA_Abort_IT+0x17c>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a1a      	ldr	r2, [pc, #104]	; (8002e54 <HAL_DMA_Abort_IT+0x1d8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d004      	beq.n	8002df8 <HAL_DMA_Abort_IT+0x17c>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a19      	ldr	r2, [pc, #100]	; (8002e58 <HAL_DMA_Abort_IT+0x1dc>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d108      	bne.n	8002e0a <HAL_DMA_Abort_IT+0x18e>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0201 	bic.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	e178      	b.n	80030fc <HAL_DMA_Abort_IT+0x480>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0201 	bic.w	r2, r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	e16f      	b.n	80030fc <HAL_DMA_Abort_IT+0x480>
 8002e1c:	40020010 	.word	0x40020010
 8002e20:	40020028 	.word	0x40020028
 8002e24:	40020040 	.word	0x40020040
 8002e28:	40020058 	.word	0x40020058
 8002e2c:	40020070 	.word	0x40020070
 8002e30:	40020088 	.word	0x40020088
 8002e34:	400200a0 	.word	0x400200a0
 8002e38:	400200b8 	.word	0x400200b8
 8002e3c:	40020410 	.word	0x40020410
 8002e40:	40020428 	.word	0x40020428
 8002e44:	40020440 	.word	0x40020440
 8002e48:	40020458 	.word	0x40020458
 8002e4c:	40020470 	.word	0x40020470
 8002e50:	40020488 	.word	0x40020488
 8002e54:	400204a0 	.word	0x400204a0
 8002e58:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 020e 	bic.w	r2, r2, #14
 8002e6a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a6c      	ldr	r2, [pc, #432]	; (8003024 <HAL_DMA_Abort_IT+0x3a8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d04a      	beq.n	8002f0c <HAL_DMA_Abort_IT+0x290>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a6b      	ldr	r2, [pc, #428]	; (8003028 <HAL_DMA_Abort_IT+0x3ac>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d045      	beq.n	8002f0c <HAL_DMA_Abort_IT+0x290>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a69      	ldr	r2, [pc, #420]	; (800302c <HAL_DMA_Abort_IT+0x3b0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d040      	beq.n	8002f0c <HAL_DMA_Abort_IT+0x290>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a68      	ldr	r2, [pc, #416]	; (8003030 <HAL_DMA_Abort_IT+0x3b4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d03b      	beq.n	8002f0c <HAL_DMA_Abort_IT+0x290>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a66      	ldr	r2, [pc, #408]	; (8003034 <HAL_DMA_Abort_IT+0x3b8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d036      	beq.n	8002f0c <HAL_DMA_Abort_IT+0x290>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a65      	ldr	r2, [pc, #404]	; (8003038 <HAL_DMA_Abort_IT+0x3bc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d031      	beq.n	8002f0c <HAL_DMA_Abort_IT+0x290>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a63      	ldr	r2, [pc, #396]	; (800303c <HAL_DMA_Abort_IT+0x3c0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d02c      	beq.n	8002f0c <HAL_DMA_Abort_IT+0x290>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a62      	ldr	r2, [pc, #392]	; (8003040 <HAL_DMA_Abort_IT+0x3c4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d027      	beq.n	8002f0c <HAL_DMA_Abort_IT+0x290>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a60      	ldr	r2, [pc, #384]	; (8003044 <HAL_DMA_Abort_IT+0x3c8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d022      	beq.n	8002f0c <HAL_DMA_Abort_IT+0x290>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a5f      	ldr	r2, [pc, #380]	; (8003048 <HAL_DMA_Abort_IT+0x3cc>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d01d      	beq.n	8002f0c <HAL_DMA_Abort_IT+0x290>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a5d      	ldr	r2, [pc, #372]	; (800304c <HAL_DMA_Abort_IT+0x3d0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d018      	beq.n	8002f0c <HAL_DMA_Abort_IT+0x290>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a5c      	ldr	r2, [pc, #368]	; (8003050 <HAL_DMA_Abort_IT+0x3d4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d013      	beq.n	8002f0c <HAL_DMA_Abort_IT+0x290>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a5a      	ldr	r2, [pc, #360]	; (8003054 <HAL_DMA_Abort_IT+0x3d8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d00e      	beq.n	8002f0c <HAL_DMA_Abort_IT+0x290>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a59      	ldr	r2, [pc, #356]	; (8003058 <HAL_DMA_Abort_IT+0x3dc>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d009      	beq.n	8002f0c <HAL_DMA_Abort_IT+0x290>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a57      	ldr	r2, [pc, #348]	; (800305c <HAL_DMA_Abort_IT+0x3e0>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d004      	beq.n	8002f0c <HAL_DMA_Abort_IT+0x290>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a56      	ldr	r2, [pc, #344]	; (8003060 <HAL_DMA_Abort_IT+0x3e4>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d108      	bne.n	8002f1e <HAL_DMA_Abort_IT+0x2a2>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	e007      	b.n	8002f2e <HAL_DMA_Abort_IT+0x2b2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0201 	bic.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a3c      	ldr	r2, [pc, #240]	; (8003024 <HAL_DMA_Abort_IT+0x3a8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d072      	beq.n	800301e <HAL_DMA_Abort_IT+0x3a2>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a3a      	ldr	r2, [pc, #232]	; (8003028 <HAL_DMA_Abort_IT+0x3ac>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d06d      	beq.n	800301e <HAL_DMA_Abort_IT+0x3a2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a39      	ldr	r2, [pc, #228]	; (800302c <HAL_DMA_Abort_IT+0x3b0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d068      	beq.n	800301e <HAL_DMA_Abort_IT+0x3a2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a37      	ldr	r2, [pc, #220]	; (8003030 <HAL_DMA_Abort_IT+0x3b4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d063      	beq.n	800301e <HAL_DMA_Abort_IT+0x3a2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a36      	ldr	r2, [pc, #216]	; (8003034 <HAL_DMA_Abort_IT+0x3b8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d05e      	beq.n	800301e <HAL_DMA_Abort_IT+0x3a2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a34      	ldr	r2, [pc, #208]	; (8003038 <HAL_DMA_Abort_IT+0x3bc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d059      	beq.n	800301e <HAL_DMA_Abort_IT+0x3a2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a33      	ldr	r2, [pc, #204]	; (800303c <HAL_DMA_Abort_IT+0x3c0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d054      	beq.n	800301e <HAL_DMA_Abort_IT+0x3a2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a31      	ldr	r2, [pc, #196]	; (8003040 <HAL_DMA_Abort_IT+0x3c4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d04f      	beq.n	800301e <HAL_DMA_Abort_IT+0x3a2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a30      	ldr	r2, [pc, #192]	; (8003044 <HAL_DMA_Abort_IT+0x3c8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d04a      	beq.n	800301e <HAL_DMA_Abort_IT+0x3a2>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a2e      	ldr	r2, [pc, #184]	; (8003048 <HAL_DMA_Abort_IT+0x3cc>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d045      	beq.n	800301e <HAL_DMA_Abort_IT+0x3a2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a2d      	ldr	r2, [pc, #180]	; (800304c <HAL_DMA_Abort_IT+0x3d0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d040      	beq.n	800301e <HAL_DMA_Abort_IT+0x3a2>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a2b      	ldr	r2, [pc, #172]	; (8003050 <HAL_DMA_Abort_IT+0x3d4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d03b      	beq.n	800301e <HAL_DMA_Abort_IT+0x3a2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a2a      	ldr	r2, [pc, #168]	; (8003054 <HAL_DMA_Abort_IT+0x3d8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d036      	beq.n	800301e <HAL_DMA_Abort_IT+0x3a2>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a28      	ldr	r2, [pc, #160]	; (8003058 <HAL_DMA_Abort_IT+0x3dc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d031      	beq.n	800301e <HAL_DMA_Abort_IT+0x3a2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a27      	ldr	r2, [pc, #156]	; (800305c <HAL_DMA_Abort_IT+0x3e0>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d02c      	beq.n	800301e <HAL_DMA_Abort_IT+0x3a2>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a25      	ldr	r2, [pc, #148]	; (8003060 <HAL_DMA_Abort_IT+0x3e4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d027      	beq.n	800301e <HAL_DMA_Abort_IT+0x3a2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a24      	ldr	r2, [pc, #144]	; (8003064 <HAL_DMA_Abort_IT+0x3e8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d022      	beq.n	800301e <HAL_DMA_Abort_IT+0x3a2>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a22      	ldr	r2, [pc, #136]	; (8003068 <HAL_DMA_Abort_IT+0x3ec>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d01d      	beq.n	800301e <HAL_DMA_Abort_IT+0x3a2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a21      	ldr	r2, [pc, #132]	; (800306c <HAL_DMA_Abort_IT+0x3f0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d018      	beq.n	800301e <HAL_DMA_Abort_IT+0x3a2>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a1f      	ldr	r2, [pc, #124]	; (8003070 <HAL_DMA_Abort_IT+0x3f4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <HAL_DMA_Abort_IT+0x3a2>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a1e      	ldr	r2, [pc, #120]	; (8003074 <HAL_DMA_Abort_IT+0x3f8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00e      	beq.n	800301e <HAL_DMA_Abort_IT+0x3a2>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a1c      	ldr	r2, [pc, #112]	; (8003078 <HAL_DMA_Abort_IT+0x3fc>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d009      	beq.n	800301e <HAL_DMA_Abort_IT+0x3a2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a1b      	ldr	r2, [pc, #108]	; (800307c <HAL_DMA_Abort_IT+0x400>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d004      	beq.n	800301e <HAL_DMA_Abort_IT+0x3a2>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a19      	ldr	r2, [pc, #100]	; (8003080 <HAL_DMA_Abort_IT+0x404>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d132      	bne.n	8003084 <HAL_DMA_Abort_IT+0x408>
 800301e:	2301      	movs	r3, #1
 8003020:	e031      	b.n	8003086 <HAL_DMA_Abort_IT+0x40a>
 8003022:	bf00      	nop
 8003024:	40020010 	.word	0x40020010
 8003028:	40020028 	.word	0x40020028
 800302c:	40020040 	.word	0x40020040
 8003030:	40020058 	.word	0x40020058
 8003034:	40020070 	.word	0x40020070
 8003038:	40020088 	.word	0x40020088
 800303c:	400200a0 	.word	0x400200a0
 8003040:	400200b8 	.word	0x400200b8
 8003044:	40020410 	.word	0x40020410
 8003048:	40020428 	.word	0x40020428
 800304c:	40020440 	.word	0x40020440
 8003050:	40020458 	.word	0x40020458
 8003054:	40020470 	.word	0x40020470
 8003058:	40020488 	.word	0x40020488
 800305c:	400204a0 	.word	0x400204a0
 8003060:	400204b8 	.word	0x400204b8
 8003064:	58025408 	.word	0x58025408
 8003068:	5802541c 	.word	0x5802541c
 800306c:	58025430 	.word	0x58025430
 8003070:	58025444 	.word	0x58025444
 8003074:	58025458 	.word	0x58025458
 8003078:	5802546c 	.word	0x5802546c
 800307c:	58025480 	.word	0x58025480
 8003080:	58025494 	.word	0x58025494
 8003084:	2300      	movs	r3, #0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d028      	beq.n	80030dc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003094:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003098:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	2201      	movs	r2, #1
 80030aa:	409a      	lsls	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80030b8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00c      	beq.n	80030dc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030d0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030da:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop

08003108 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e0cf      	b.n	80032ba <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003120:	2b00      	cmp	r3, #0
 8003122:	d106      	bne.n	8003132 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2223      	movs	r2, #35	; 0x23
 8003128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f007 fa4f 	bl	800a5d0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003132:	4b64      	ldr	r3, [pc, #400]	; (80032c4 <HAL_ETH_Init+0x1bc>)
 8003134:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003138:	4a62      	ldr	r2, [pc, #392]	; (80032c4 <HAL_ETH_Init+0x1bc>)
 800313a:	f043 0302 	orr.w	r3, r3, #2
 800313e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003142:	4b60      	ldr	r3, [pc, #384]	; (80032c4 <HAL_ETH_Init+0x1bc>)
 8003144:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	7a1b      	ldrb	r3, [r3, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d103      	bne.n	8003160 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003158:	2000      	movs	r0, #0
 800315a:	f7ff f901 	bl	8002360 <HAL_SYSCFG_ETHInterfaceSelect>
 800315e:	e003      	b.n	8003168 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003160:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003164:	f7ff f8fc 	bl	8002360 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003168:	4b57      	ldr	r3, [pc, #348]	; (80032c8 <HAL_ETH_Init+0x1c0>)
 800316a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003182:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003184:	f7ff f8e0 	bl	8002348 <HAL_GetTick>
 8003188:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800318a:	e011      	b.n	80031b0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800318c:	f7ff f8dc 	bl	8002348 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800319a:	d909      	bls.n	80031b0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2204      	movs	r2, #4
 80031a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	22e0      	movs	r2, #224	; 0xe0
 80031a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e084      	b.n	80032ba <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1e4      	bne.n	800318c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 ff28 	bl	8004018 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80031c8:	f002 fe06 	bl	8005dd8 <HAL_RCC_GetHCLKFreq>
 80031cc:	4603      	mov	r3, r0
 80031ce:	4a3f      	ldr	r2, [pc, #252]	; (80032cc <HAL_ETH_Init+0x1c4>)
 80031d0:	fba2 2303 	umull	r2, r3, r2, r3
 80031d4:	0c9a      	lsrs	r2, r3, #18
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3a01      	subs	r2, #1
 80031dc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f001 f921 	bl	8004428 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80031f2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6812      	ldr	r2, [r2, #0]
 80031fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80031fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003202:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	22e0      	movs	r2, #224	; 0xe0
 800321e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e049      	b.n	80032ba <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800322e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003232:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <HAL_ETH_Init+0x1c8>)
 8003234:	4013      	ands	r3, r2
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6952      	ldr	r2, [r2, #20]
 800323a:	0051      	lsls	r1, r2, #1
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	430b      	orrs	r3, r1
 8003242:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003246:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f001 f989 	bl	8004562 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f001 f9cf 	bl	80045f4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	3305      	adds	r3, #5
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	021a      	lsls	r2, r3, #8
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	3304      	adds	r3, #4
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	4619      	mov	r1, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	3303      	adds	r3, #3
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	061a      	lsls	r2, r3, #24
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	3302      	adds	r3, #2
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	041b      	lsls	r3, r3, #16
 8003288:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	3301      	adds	r3, #1
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003294:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80032a2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80032a4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2210      	movs	r2, #16
 80032b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	58024400 	.word	0x58024400
 80032c8:	58000400 	.word	0x58000400
 80032cc:	431bde83 	.word	0x431bde83
 80032d0:	ffff8001 	.word	0xffff8001

080032d4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e2:	2b10      	cmp	r3, #16
 80032e4:	d179      	bne.n	80033da <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2223      	movs	r2, #35	; 0x23
 80032ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b38      	ldr	r3, [pc, #224]	; (80033e4 <HAL_ETH_Start_IT+0x110>)
 8003302:	430b      	orrs	r3, r1
 8003304:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4b34      	ldr	r3, [pc, #208]	; (80033e8 <HAL_ETH_Start_IT+0x114>)
 8003316:	430b      	orrs	r3, r1
 8003318:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2204      	movs	r2, #4
 8003320:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f9eb 	bl	80036fe <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0202 	orr.w	r2, r2, #2
 8003336:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0201 	orr.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f042 0201 	orr.w	r2, r2, #1
 8003358:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003364:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003374:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003380:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003390:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800339c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80033a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033ac:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033b8:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 80033c4:	430b      	orrs	r3, r1
 80033c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033ca:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2223      	movs	r2, #35	; 0x23
 80033d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e000      	b.n	80033dc <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
  }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	0c020060 	.word	0x0c020060
 80033e8:	0c20c000 	.word	0x0c20c000

080033ec <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033fa:	2b23      	cmp	r3, #35	; 0x23
 80033fc:	d165      	bne.n	80034ca <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2223      	movs	r2, #35	; 0x23
 8003402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800340e:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	4b30      	ldr	r3, [pc, #192]	; (80034d8 <HAL_ETH_Stop_IT+0xec>)
 8003418:	400b      	ands	r3, r1
 800341a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800341e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800342a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	f023 0301 	bic.w	r3, r3, #1
 8003436:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800343a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003446:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	f023 0301 	bic.w	r3, r3, #1
 8003452:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003456:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0201 	bic.w	r2, r2, #1
 8003468:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0202 	bic.w	r2, r2, #2
 800348c:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	e00e      	b.n	80034b2 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	3212      	adds	r2, #18
 800349a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800349e:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	3301      	adds	r3, #1
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d9ed      	bls.n	8003494 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2210      	movs	r2, #16
 80034c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e000      	b.n	80034cc <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
  }
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	ffff2f3e 	.word	0xffff2f3e

080034dc <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d109      	bne.n	8003500 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f2:	f043 0201 	orr.w	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e03a      	b.n	8003576 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003506:	2b23      	cmp	r3, #35	; 0x23
 8003508:	d134      	bne.n	8003574 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003512:	2201      	movs	r2, #1
 8003514:	6839      	ldr	r1, [r7, #0]
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f001 f8ca 	bl	80046b0 <ETH_Prepare_Tx_Descriptors>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d009      	beq.n	8003536 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003528:	f043 0202 	orr.w	r2, r3, #2
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e01f      	b.n	8003576 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8003536:	f3bf 8f4f 	dsb	sy
}
 800353a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	629a      	str	r2, [r3, #40]	; 0x28
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	2b03      	cmp	r3, #3
 800354c:	d904      	bls.n	8003558 <HAL_ETH_Transmit_IT+0x7c>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	1f1a      	subs	r2, r3, #4
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3106      	adds	r1, #6
 8003564:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003568:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800356c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	e000      	b.n	8003576 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
  }
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b088      	sub	sp, #32
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359c:	f043 0201 	orr.w	r2, r3, #1
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e0a5      	b.n	80036f6 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035b0:	2b23      	cmp	r3, #35	; 0x23
 80035b2:	d001      	beq.n	80035b8 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e09e      	b.n	80036f6 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035bc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	3212      	adds	r2, #18
 80035c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035c8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ce:	f1c3 0304 	rsb	r3, r3, #4
 80035d2:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80035d4:	e067      	b.n	80036a6 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d007      	beq.n	80035f2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d103      	bne.n	8003606 <HAL_ETH_ReadData+0x88>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003602:	2b00      	cmp	r3, #0
 8003604:	d03d      	beq.n	8003682 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00d      	beq.n	800364c <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8003648:	2301      	movs	r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800365c:	461a      	mov	r2, r3
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	b29b      	uxth	r3, r3
 8003662:	f007 f99d 	bl	800a9a0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	441a      	add	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2200      	movs	r2, #0
 8003680:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3301      	adds	r3, #1
 8003686:	61fb      	str	r3, [r7, #28]
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	2b03      	cmp	r3, #3
 800368c:	d902      	bls.n	8003694 <HAL_ETH_ReadData+0x116>
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	3b04      	subs	r3, #4
 8003692:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69fa      	ldr	r2, [r7, #28]
 8003698:	3212      	adds	r2, #18
 800369a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800369e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	3301      	adds	r3, #1
 80036a4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	db06      	blt.n	80036bc <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d202      	bcs.n	80036bc <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d08c      	beq.n	80035d6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	441a      	add	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f814 	bl	80036fe <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69fa      	ldr	r2, [r7, #28]
 80036da:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d108      	bne.n	80036f4 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	e000      	b.n	80036f6 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3720      	adds	r7, #32
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b088      	sub	sp, #32
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800370a:	2301      	movs	r3, #1
 800370c:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003712:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	3212      	adds	r2, #18
 800371a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800371e:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003724:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003726:	e03b      	b.n	80037a0 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d112      	bne.n	8003756 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003730:	f107 030c 	add.w	r3, r7, #12
 8003734:	4618      	mov	r0, r3
 8003736:	f007 f903 	bl	800a940 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d102      	bne.n	8003746 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	74fb      	strb	r3, [r7, #19]
 8003744:	e007      	b.n	8003756 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	461a      	mov	r2, r3
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	461a      	mov	r2, r3
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8003756:	7cfb      	ldrb	r3, [r7, #19]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d021      	beq.n	80037a0 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 800375c:	f3bf 8f5f 	dmb	sy
}
 8003760:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003766:	2b00      	cmp	r3, #0
 8003768:	d004      	beq.n	8003774 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8003770:	60da      	str	r2, [r3, #12]
 8003772:	e003      	b.n	800377c <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 800377a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	3301      	adds	r3, #1
 8003780:	61fb      	str	r3, [r7, #28]
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d902      	bls.n	800378e <ETH_UpdateDescriptor+0x90>
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	3b04      	subs	r3, #4
 800378c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69fa      	ldr	r2, [r7, #28]
 8003792:	3212      	adds	r2, #18
 8003794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003798:	617b      	str	r3, [r7, #20]
      desccount--;
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	3b01      	subs	r3, #1
 800379e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <ETH_UpdateDescriptor+0xae>
 80037a6:	7cfb      	ldrb	r3, [r7, #19]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1bd      	bne.n	8003728 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d00d      	beq.n	80037d2 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037be:	461a      	mov	r2, r3
 80037c0:	2300      	movs	r3, #0
 80037c2:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69fa      	ldr	r2, [r7, #28]
 80037ca:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80037d2:	bf00      	nop
 80037d4:	3720      	adds	r7, #32
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b086      	sub	sp, #24
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3318      	adds	r3, #24
 80037e6:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ec:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80037f8:	e03f      	b.n	800387a <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	3b01      	subs	r3, #1
 8003802:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	3304      	adds	r3, #4
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d106      	bne.n	8003822 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	3301      	adds	r3, #1
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8003822:	7bbb      	ldrb	r3, [r7, #14]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d028      	beq.n	800387a <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68d9      	ldr	r1, [r3, #12]
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	440b      	add	r3, r1
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	db1b      	blt.n	8003876 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	3304      	adds	r3, #4
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4618      	mov	r0, r3
 800384c:	f007 f910 	bl	800aa70 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	3304      	adds	r3, #4
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	2200      	movs	r2, #0
 800385c:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	3301      	adds	r3, #1
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	62da      	str	r2, [r3, #44]	; 0x2c
 8003874:	e001      	b.n	800387a <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <HAL_ETH_ReleaseTxPacket+0xac>
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1b9      	bne.n	80037fa <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038a0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80038a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a8:	2b40      	cmp	r3, #64	; 0x40
 80038aa:	d115      	bne.n	80038d8 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038b4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80038b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038bc:	2b40      	cmp	r3, #64	; 0x40
 80038be:	d10b      	bne.n	80038d8 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038c8:	461a      	mov	r2, r3
 80038ca:	f248 0340 	movw	r3, #32832	; 0x8040
 80038ce:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f006 fbde 	bl	800a094 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038e0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d115      	bne.n	8003918 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038f4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d10b      	bne.n	8003918 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003908:	461a      	mov	r2, r3
 800390a:	f248 0301 	movw	r3, #32769	; 0x8001
 800390e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f006 fbce 	bl	800a0b4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003920:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8003924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003928:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800392c:	d153      	bne.n	80039d6 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003936:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800393a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800393e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003942:	d148      	bne.n	80039d6 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394a:	f043 0208 	orr.w	r2, r3, #8
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800395c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8003960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003968:	d11e      	bne.n	80039a8 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003972:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8003976:	f241 1302 	movw	r3, #4354	; 0x1102
 800397a:	4013      	ands	r3, r2
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800398a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6812      	ldr	r2, [r2, #0]
 8003992:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003996:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800399a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	22e0      	movs	r2, #224	; 0xe0
 80039a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80039a6:	e013      	b.n	80039d0 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039b0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80039b4:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039c6:	461a      	mov	r2, r3
 80039c8:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 80039cc:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f006 fb7f 	bl	800a0d4 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039de:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d104      	bne.n	80039f4 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d019      	beq.n	8003a28 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fa:	f043 0210 	orr.w	r2, r3, #16
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	22e0      	movs	r2, #224	; 0xe0
 8003a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f006 fb5a 	bl	800a0d4 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b10      	cmp	r3, #16
 8003a36:	d10f      	bne.n	8003a58 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003a40:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f830 	bl	8003ab0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d10f      	bne.n	8003a88 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003a70:	f003 020f 	and.w	r2, r3, #15
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f822 	bl	8003ac4 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* USE_HAL_ETH_REGISTER_CALLBACKS */
  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003a88:	4b08      	ldr	r3, [pc, #32]	; (8003aac <HAL_ETH_IRQHandler+0x21c>)
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d006      	beq.n	8003aa2 <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003a94:	4b05      	ldr	r3, [pc, #20]	; (8003aac <HAL_ETH_IRQHandler+0x21c>)
 8003a96:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003a9a:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f81b 	bl	8003ad8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 8003aa2:	bf00      	nop
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	58000080 	.word	0x58000080

08003ab0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e03e      	b.n	8003b8c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b16:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	055b      	lsls	r3, r3, #21
 8003b22:	4313      	orrs	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	041b      	lsls	r3, r3, #16
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f043 030c 	orr.w	r3, r3, #12
 8003b3a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8003b4e:	f7fe fbfb 	bl	8002348 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003b54:	e009      	b.n	8003b6a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8003b56:	f7fe fbf7 	bl	8002348 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b64:	d901      	bls.n	8003b6a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e010      	b.n	8003b8c <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1ed      	bne.n	8003b56 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e03c      	b.n	8003c30 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003bbe:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	055b      	lsls	r3, r3, #21
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	041b      	lsls	r3, r3, #16
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f023 030c 	bic.w	r3, r3, #12
 8003be2:	f043 0304 	orr.w	r3, r3, #4
 8003be6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f043 0301 	orr.w	r3, r3, #1
 8003bee:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <HAL_ETH_WritePHYRegister+0xa4>)
 8003bf6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8003bfa:	4a0f      	ldr	r2, [pc, #60]	; (8003c38 <HAL_ETH_WritePHYRegister+0xa4>)
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8003c02:	f7fe fba1 	bl	8002348 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003c08:	e009      	b.n	8003c1e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8003c0a:	f7fe fb9d 	bl	8002348 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c18:	d901      	bls.n	8003c1e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e008      	b.n	8003c30 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1ed      	bne.n	8003c0a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40028000 	.word	0x40028000

08003c3c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e1c3      	b.n	8003fd8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 020c 	and.w	r2, r3, #12
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	bf14      	ite	ne
 8003c6c:	2301      	movne	r3, #1
 8003c6e:	2300      	moveq	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	461a      	mov	r2, r3
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	bf0c      	ite	eq
 8003c96:	2301      	moveq	r3, #1
 8003c98:	2300      	movne	r3, #0
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	bf14      	ite	ne
 8003cb2:	2301      	movne	r3, #1
 8003cb4:	2300      	moveq	r3, #0
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8003cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	bf14      	ite	ne
 8003ce6:	2301      	movne	r3, #1
 8003ce8:	2300      	moveq	r3, #0
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	bf14      	ite	ne
 8003d00:	2301      	movne	r3, #1
 8003d02:	2300      	moveq	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	461a      	mov	r2, r3
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	bf14      	ite	ne
 8003d36:	2301      	movne	r3, #1
 8003d38:	2300      	moveq	r3, #0
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	bf0c      	ite	eq
 8003d50:	2301      	moveq	r3, #1
 8003d52:	2300      	movne	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	461a      	mov	r2, r3
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	bf0c      	ite	eq
 8003d6a:	2301      	moveq	r3, #1
 8003d6c:	2300      	movne	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	bf14      	ite	ne
 8003d84:	2301      	movne	r3, #1
 8003d86:	2300      	moveq	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	bf14      	ite	ne
 8003d9e:	2301      	movne	r3, #1
 8003da0:	2300      	moveq	r3, #0
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	461a      	mov	r2, r3
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	bf14      	ite	ne
 8003db8:	2301      	movne	r3, #1
 8003dba:	2300      	moveq	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8003dca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	bf14      	ite	ne
 8003dd2:	2301      	movne	r3, #1
 8003dd4:	2300      	moveq	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	bf14      	ite	ne
 8003dfa:	2301      	movne	r3, #1
 8003dfc:	2300      	moveq	r3, #0
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	461a      	mov	r2, r3
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	bf0c      	ite	eq
 8003e30:	2301      	moveq	r3, #1
 8003e32:	2300      	movne	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	461a      	mov	r2, r3
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf14      	ite	ne
 8003e4c:	2301      	movne	r3, #1
 8003e4e:	2300      	moveq	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8003e60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	bf14      	ite	ne
 8003e68:	2301      	movne	r3, #1
 8003e6a:	2300      	moveq	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	bf14      	ite	ne
 8003e84:	2301      	movne	r3, #1
 8003e86:	2300      	moveq	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	0e5b      	lsrs	r3, r3, #25
 8003e9a:	f003 021f 	and.w	r2, r3, #31
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf14      	ite	ne
 8003eb0:	2301      	movne	r3, #1
 8003eb2:	2300      	moveq	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 020f 	and.w	r2, r3, #15
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	bf14      	ite	ne
 8003eda:	2301      	movne	r3, #1
 8003edc:	2300      	moveq	r3, #0
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	bf0c      	ite	eq
 8003ef6:	2301      	moveq	r3, #1
 8003ef8:	2300      	movne	r3, #0
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	461a      	mov	r2, r3
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f18:	0c1b      	lsrs	r3, r3, #16
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf14      	ite	ne
 8003f30:	2301      	movne	r3, #1
 8003f32:	2300      	moveq	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f46:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	bf14      	ite	ne
 8003f4e:	2301      	movne	r3, #1
 8003f50:	2300      	moveq	r3, #0
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003f64:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003f74:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	bf14      	ite	ne
 8003f8c:	2301      	movne	r3, #1
 8003f8e:	2300      	moveq	r3, #0
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	bf14      	ite	ne
 8003faa:	2301      	movne	r3, #1
 8003fac:	2300      	moveq	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8003fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	bf0c      	ite	eq
 8003fc8:	2301      	moveq	r3, #1
 8003fca:	2300      	movne	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e00b      	b.n	8004010 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ffe:	2b10      	cmp	r3, #16
 8004000:	d105      	bne.n	800400e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004002:	6839      	ldr	r1, [r7, #0]
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f86d 	bl	80040e4 <ETH_SetMACConfig>

    return HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	e000      	b.n	8004010 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
  }
}
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004028:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004030:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004032:	f001 fed1 	bl	8005dd8 <HAL_RCC_GetHCLKFreq>
 8004036:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4a1e      	ldr	r2, [pc, #120]	; (80040b4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d908      	bls.n	8004052 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4a1d      	ldr	r2, [pc, #116]	; (80040b8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d804      	bhi.n	8004052 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	e027      	b.n	80040a2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	4a18      	ldr	r2, [pc, #96]	; (80040b8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d908      	bls.n	800406c <HAL_ETH_SetMDIOClockRange+0x54>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	4a17      	ldr	r2, [pc, #92]	; (80040bc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d204      	bcs.n	800406c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	e01a      	b.n	80040a2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4a13      	ldr	r2, [pc, #76]	; (80040bc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d303      	bcc.n	800407c <HAL_ETH_SetMDIOClockRange+0x64>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4a12      	ldr	r2, [pc, #72]	; (80040c0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d911      	bls.n	80040a0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4a10      	ldr	r2, [pc, #64]	; (80040c0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d908      	bls.n	8004096 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4a0f      	ldr	r2, [pc, #60]	; (80040c4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d804      	bhi.n	8004096 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	e005      	b.n	80040a2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	e000      	b.n	80040a2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80040a0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80040ac:	bf00      	nop
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	01312cff 	.word	0x01312cff
 80040b8:	02160ebf 	.word	0x02160ebf
 80040bc:	03938700 	.word	0x03938700
 80040c0:	05f5e0ff 	.word	0x05f5e0ff
 80040c4:	08f0d17f 	.word	0x08f0d17f

080040c8 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
	...

080040e4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80040f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	791b      	ldrb	r3, [r3, #4]
 80040fc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80040fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	7b1b      	ldrb	r3, [r3, #12]
 8004104:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004106:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	7b5b      	ldrb	r3, [r3, #13]
 800410c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800410e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	7b9b      	ldrb	r3, [r3, #14]
 8004114:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004116:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	7bdb      	ldrb	r3, [r3, #15]
 800411c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800411e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	7c12      	ldrb	r2, [r2, #16]
 8004124:	2a00      	cmp	r2, #0
 8004126:	d102      	bne.n	800412e <ETH_SetMACConfig+0x4a>
 8004128:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800412c:	e000      	b.n	8004130 <ETH_SetMACConfig+0x4c>
 800412e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004130:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	7c52      	ldrb	r2, [r2, #17]
 8004136:	2a00      	cmp	r2, #0
 8004138:	d102      	bne.n	8004140 <ETH_SetMACConfig+0x5c>
 800413a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800413e:	e000      	b.n	8004142 <ETH_SetMACConfig+0x5e>
 8004140:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004142:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	7c9b      	ldrb	r3, [r3, #18]
 8004148:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800414a:	431a      	orrs	r2, r3
               macconf->Speed |
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004150:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004156:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	7f1b      	ldrb	r3, [r3, #28]
 800415c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800415e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	7f5b      	ldrb	r3, [r3, #29]
 8004164:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004166:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	7f92      	ldrb	r2, [r2, #30]
 800416c:	2a00      	cmp	r2, #0
 800416e:	d102      	bne.n	8004176 <ETH_SetMACConfig+0x92>
 8004170:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004174:	e000      	b.n	8004178 <ETH_SetMACConfig+0x94>
 8004176:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004178:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	7fdb      	ldrb	r3, [r3, #31]
 800417e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004180:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004188:	2a00      	cmp	r2, #0
 800418a:	d102      	bne.n	8004192 <ETH_SetMACConfig+0xae>
 800418c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004190:	e000      	b.n	8004194 <ETH_SetMACConfig+0xb0>
 8004192:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004194:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800419a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041a2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80041a4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4b56      	ldr	r3, [pc, #344]	; (8004310 <ETH_SetMACConfig+0x22c>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6812      	ldr	r2, [r2, #0]
 80041bc:	68f9      	ldr	r1, [r7, #12]
 80041be:	430b      	orrs	r3, r1
 80041c0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041ce:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80041d0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80041d8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80041da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80041e2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80041e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80041ec:	2a00      	cmp	r2, #0
 80041ee:	d102      	bne.n	80041f6 <ETH_SetMACConfig+0x112>
 80041f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80041f4:	e000      	b.n	80041f8 <ETH_SetMACConfig+0x114>
 80041f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80041f8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	4b42      	ldr	r3, [pc, #264]	; (8004314 <ETH_SetMACConfig+0x230>)
 800420a:	4013      	ands	r3, r2
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	68f9      	ldr	r1, [r7, #12]
 8004212:	430b      	orrs	r3, r1
 8004214:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800421c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	4b3a      	ldr	r3, [pc, #232]	; (8004318 <ETH_SetMACConfig+0x234>)
 800422e:	4013      	ands	r3, r2
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	68f9      	ldr	r1, [r7, #12]
 8004236:	430b      	orrs	r3, r1
 8004238:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004240:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004246:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800424e:	2a00      	cmp	r2, #0
 8004250:	d101      	bne.n	8004256 <ETH_SetMACConfig+0x172>
 8004252:	2280      	movs	r2, #128	; 0x80
 8004254:	e000      	b.n	8004258 <ETH_SetMACConfig+0x174>
 8004256:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004258:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800425e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800426a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800426e:	4013      	ands	r3, r2
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6812      	ldr	r2, [r2, #0]
 8004274:	68f9      	ldr	r1, [r7, #12]
 8004276:	430b      	orrs	r3, r1
 8004278:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004280:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004288:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004296:	f023 0103 	bic.w	r1, r3, #3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80042ae:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80042ca:	2a00      	cmp	r2, #0
 80042cc:	d101      	bne.n	80042d2 <ETH_SetMACConfig+0x1ee>
 80042ce:	2240      	movs	r2, #64	; 0x40
 80042d0:	e000      	b.n	80042d4 <ETH_SetMACConfig+0x1f0>
 80042d2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80042d4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80042dc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80042de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80042e6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80042f4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	430a      	orrs	r2, r1
 8004300:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004304:	bf00      	nop
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	00048083 	.word	0x00048083
 8004314:	c0f88000 	.word	0xc0f88000
 8004318:	fffffef0 	.word	0xfffffef0

0800431c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b38      	ldr	r3, [pc, #224]	; (8004414 <ETH_SetDMAConfig+0xf8>)
 8004332:	4013      	ands	r3, r2
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	6811      	ldr	r1, [r2, #0]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	430b      	orrs	r3, r1
 800433e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004342:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	791b      	ldrb	r3, [r3, #4]
 8004348:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800434e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	7b1b      	ldrb	r3, [r3, #12]
 8004354:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	4b2c      	ldr	r3, [pc, #176]	; (8004418 <ETH_SetDMAConfig+0xfc>)
 8004366:	4013      	ands	r3, r2
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6812      	ldr	r2, [r2, #0]
 800436c:	68f9      	ldr	r1, [r7, #12]
 800436e:	430b      	orrs	r3, r1
 8004370:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004374:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	7b5b      	ldrb	r3, [r3, #13]
 800437a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800438c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004390:	4b22      	ldr	r3, [pc, #136]	; (800441c <ETH_SetDMAConfig+0x100>)
 8004392:	4013      	ands	r3, r2
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6812      	ldr	r2, [r2, #0]
 8004398:	68f9      	ldr	r1, [r7, #12]
 800439a:	430b      	orrs	r3, r1
 800439c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043a0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	7d1b      	ldrb	r3, [r3, #20]
 80043ac:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80043ae:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	7f5b      	ldrb	r3, [r3, #29]
 80043b4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80043c6:	4b16      	ldr	r3, [pc, #88]	; (8004420 <ETH_SetDMAConfig+0x104>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	68f9      	ldr	r1, [r7, #12]
 80043d0:	430b      	orrs	r3, r1
 80043d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043d6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	7f1b      	ldrb	r3, [r3, #28]
 80043de:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80043f4:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <ETH_SetDMAConfig+0x108>)
 80043f6:	4013      	ands	r3, r2
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	68f9      	ldr	r1, [r7, #12]
 80043fe:	430b      	orrs	r3, r1
 8004400:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004404:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004408:	bf00      	nop
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	ffff87fd 	.word	0xffff87fd
 8004418:	ffff2ffe 	.word	0xffff2ffe
 800441c:	fffec000 	.word	0xfffec000
 8004420:	ffc0efef 	.word	0xffc0efef
 8004424:	7fc0ffff 	.word	0x7fc0ffff

08004428 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b0a4      	sub	sp, #144	; 0x90
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004430:	2301      	movs	r3, #1
 8004432:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004436:	2300      	movs	r3, #0
 8004438:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800443a:	2300      	movs	r3, #0
 800443c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004440:	2300      	movs	r3, #0
 8004442:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004446:	2301      	movs	r3, #1
 8004448:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800444c:	2301      	movs	r3, #1
 800444e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004452:	2301      	movs	r3, #1
 8004454:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004458:	2300      	movs	r3, #0
 800445a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800445e:	2301      	movs	r3, #1
 8004460:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004464:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004468:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800446a:	2300      	movs	r3, #0
 800446c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004470:	2300      	movs	r3, #0
 8004472:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004474:	2300      	movs	r3, #0
 8004476:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800447a:	2300      	movs	r3, #0
 800447c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004480:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004484:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004486:	2300      	movs	r3, #0
 8004488:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800448c:	2300      	movs	r3, #0
 800448e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004490:	2301      	movs	r3, #1
 8004492:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004496:	2300      	movs	r3, #0
 8004498:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800449c:	2300      	movs	r3, #0
 800449e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80044a2:	2300      	movs	r3, #0
 80044a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80044a6:	2300      	movs	r3, #0
 80044a8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80044aa:	2300      	movs	r3, #0
 80044ac:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80044b4:	2300      	movs	r3, #0
 80044b6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80044ba:	2301      	movs	r3, #1
 80044bc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80044c0:	2320      	movs	r3, #32
 80044c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80044c6:	2301      	movs	r3, #1
 80044c8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80044cc:	2300      	movs	r3, #0
 80044ce:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80044d2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80044d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80044d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044dc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80044de:	2300      	movs	r3, #0
 80044e0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80044e4:	2302      	movs	r3, #2
 80044e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80044ea:	2300      	movs	r3, #0
 80044ec:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80044f0:	2300      	movs	r3, #0
 80044f2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80044f6:	2300      	movs	r3, #0
 80044f8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004502:	2300      	movs	r3, #0
 8004504:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004506:	2301      	movs	r3, #1
 8004508:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800450c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004510:	4619      	mov	r1, r3
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7ff fde6 	bl	80040e4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004518:	2301      	movs	r3, #1
 800451a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800451c:	2301      	movs	r3, #1
 800451e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004520:	2300      	movs	r3, #0
 8004522:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004524:	2300      	movs	r3, #0
 8004526:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800452a:	2300      	movs	r3, #0
 800452c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800452e:	2300      	movs	r3, #0
 8004530:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004532:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004536:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004538:	2300      	movs	r3, #0
 800453a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800453c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004540:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004542:	2300      	movs	r3, #0
 8004544:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004548:	f44f 7306 	mov.w	r3, #536	; 0x218
 800454c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800454e:	f107 0308 	add.w	r3, r7, #8
 8004552:	4619      	mov	r1, r3
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7ff fee1 	bl	800431c <ETH_SetDMAConfig>
}
 800455a:	bf00      	nop
 800455c:	3790      	adds	r7, #144	; 0x90
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004562:	b480      	push	{r7}
 8004564:	b085      	sub	sp, #20
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	e01d      	b.n	80045ac <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68d9      	ldr	r1, [r3, #12]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4613      	mov	r3, r2
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	4413      	add	r3, r2
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	440b      	add	r3, r1
 8004580:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2200      	movs	r2, #0
 800458c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2200      	movs	r2, #0
 8004592:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2200      	movs	r2, #0
 8004598:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	3206      	adds	r2, #6
 80045a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	3301      	adds	r3, #1
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d9de      	bls.n	8004570 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c0:	461a      	mov	r2, r3
 80045c2:	2303      	movs	r3, #3
 80045c4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80045e8:	bf00      	nop
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	e023      	b.n	800464a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6919      	ldr	r1, [r3, #16]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4613      	mov	r3, r2
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	4413      	add	r3, r2
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	440b      	add	r3, r1
 8004612:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2200      	movs	r2, #0
 800461e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2200      	movs	r2, #0
 8004624:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2200      	movs	r2, #0
 800462a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2200      	movs	r2, #0
 8004630:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2200      	movs	r2, #0
 8004636:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004638:	68b9      	ldr	r1, [r7, #8]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	3212      	adds	r2, #18
 8004640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3301      	adds	r3, #1
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2b03      	cmp	r3, #3
 800464e:	d9d8      	bls.n	8004602 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004676:	461a      	mov	r2, r3
 8004678:	2303      	movs	r3, #3
 800467a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800468a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800469e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80046a2:	bf00      	nop
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
	...

080046b0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b08d      	sub	sp, #52	; 0x34
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	3318      	adds	r3, #24
 80046c0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046da:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046f2:	d007      	beq.n	8004704 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f8:	3304      	adds	r3, #4
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004704:	2302      	movs	r3, #2
 8004706:	e259      	b.n	8004bbc <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d044      	beq.n	800479e <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	4b75      	ldr	r3, [pc, #468]	; (80048f0 <ETH_Prepare_Tx_Descriptors+0x240>)
 800471a:	4013      	ands	r3, r2
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004720:	431a      	orrs	r2, r3
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004740:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d027      	beq.n	800479e <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	b29a      	uxth	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	041b      	lsls	r3, r3, #16
 800475a:	431a      	orrs	r2, r3
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004778:	431a      	orrs	r2, r3
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800478c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800479c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00e      	beq.n	80047c8 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	4b51      	ldr	r3, [pc, #324]	; (80048f4 <ETH_Prepare_Tx_Descriptors+0x244>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	6992      	ldr	r2, [r2, #24]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d105      	bne.n	80047e0 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0310 	and.w	r3, r3, #16
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d036      	beq.n	800484e <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80047ec:	f3bf 8f5f 	dmb	sy
}
 80047f0:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80047fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004800:	3301      	adds	r3, #1
 8004802:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004806:	2b03      	cmp	r3, #3
 8004808:	d902      	bls.n	8004810 <ETH_Prepare_Tx_Descriptors+0x160>
 800480a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480c:	3b04      	subs	r3, #4
 800480e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004818:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	3301      	adds	r3, #1
 800481e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800482c:	d10f      	bne.n	800484e <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004836:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8004838:	f3bf 8f5f 	dmb	sy
}
 800483c:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800484a:	2302      	movs	r3, #2
 800484c:	e1b6      	b.n	8004bbc <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	3301      	adds	r3, #1
 8004852:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	4b24      	ldr	r3, [pc, #144]	; (80048f4 <ETH_Prepare_Tx_Descriptors+0x244>)
 8004864:	4013      	ands	r3, r2
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	6852      	ldr	r2, [r2, #4]
 800486a:	431a      	orrs	r2, r3
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d012      	beq.n	800489e <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	4b1a      	ldr	r3, [pc, #104]	; (80048f8 <ETH_Prepare_Tx_Descriptors+0x248>)
 800488e:	4013      	ands	r3, r2
 8004890:	69fa      	ldr	r2, [r7, #28]
 8004892:	6852      	ldr	r2, [r2, #4]
 8004894:	0412      	lsls	r2, r2, #16
 8004896:	431a      	orrs	r2, r3
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	609a      	str	r2, [r3, #8]
 800489c:	e008      	b.n	80048b0 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	2200      	movs	r2, #0
 80048a2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <ETH_Prepare_Tx_Descriptors+0x248>)
 80048aa:	4013      	ands	r3, r2
 80048ac:	6a3a      	ldr	r2, [r7, #32]
 80048ae:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0310 	and.w	r3, r3, #16
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d021      	beq.n	8004900 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	04db      	lsls	r3, r3, #19
 80048ca:	431a      	orrs	r2, r3
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	4b09      	ldr	r3, [pc, #36]	; (80048fc <ETH_Prepare_Tx_Descriptors+0x24c>)
 80048d6:	4013      	ands	r3, r2
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	69d2      	ldr	r2, [r2, #28]
 80048dc:	431a      	orrs	r2, r3
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	60da      	str	r2, [r3, #12]
 80048ee:	e02e      	b.n	800494e <ETH_Prepare_Tx_Descriptors+0x29e>
 80048f0:	ffff0000 	.word	0xffff0000
 80048f4:	ffffc000 	.word	0xffffc000
 80048f8:	c000ffff 	.word	0xc000ffff
 80048fc:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	4b7b      	ldr	r3, [pc, #492]	; (8004af4 <ETH_Prepare_Tx_Descriptors+0x444>)
 8004906:	4013      	ands	r3, r2
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	6852      	ldr	r2, [r2, #4]
 800490c:	431a      	orrs	r2, r3
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d008      	beq.n	8004930 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	431a      	orrs	r2, r3
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b00      	cmp	r3, #0
 800493a:	d008      	beq.n	800494e <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	431a      	orrs	r2, r3
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b00      	cmp	r3, #0
 8004958:	d008      	beq.n	800496c <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004966:	431a      	orrs	r2, r3
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004984:	f3bf 8f5f 	dmb	sy
}
 8004988:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 80da 	beq.w	8004b58 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	431a      	orrs	r2, r3
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80049b6:	e0cf      	b.n	8004b58 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80049c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c6:	3301      	adds	r3, #1
 80049c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049cc:	2b03      	cmp	r3, #3
 80049ce:	d902      	bls.n	80049d6 <ETH_Prepare_Tx_Descriptors+0x326>
 80049d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d2:	3b04      	subs	r3, #4
 80049d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049de:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049f8:	d007      	beq.n	8004a0a <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fe:	3304      	adds	r3, #4
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d029      	beq.n	8004a5e <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a16:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004a18:	2300      	movs	r3, #0
 8004a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a1c:	e019      	b.n	8004a52 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8004a1e:	f3bf 8f5f 	dmb	sy
}
 8004a22:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a32:	3301      	adds	r3, #1
 8004a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d902      	bls.n	8004a42 <ETH_Prepare_Tx_Descriptors+0x392>
 8004a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3e:	3b04      	subs	r3, #4
 8004a40:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a4a:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4e:	3301      	adds	r3, #1
 8004a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d3e1      	bcc.n	8004a1e <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	e0ae      	b.n	8004bbc <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	3301      	adds	r3, #1
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	4b1f      	ldr	r3, [pc, #124]	; (8004af8 <ETH_Prepare_Tx_Descriptors+0x448>)
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	69fa      	ldr	r2, [r7, #28]
 8004a7e:	6852      	ldr	r2, [r2, #4]
 8004a80:	431a      	orrs	r2, r3
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d012      	beq.n	8004ab4 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	4b16      	ldr	r3, [pc, #88]	; (8004afc <ETH_Prepare_Tx_Descriptors+0x44c>)
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	69fa      	ldr	r2, [r7, #28]
 8004aa8:	6852      	ldr	r2, [r2, #4]
 8004aaa:	0412      	lsls	r2, r2, #16
 8004aac:	431a      	orrs	r2, r3
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	609a      	str	r2, [r3, #8]
 8004ab2:	e008      	b.n	8004ac6 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	4b0f      	ldr	r3, [pc, #60]	; (8004afc <ETH_Prepare_Tx_Descriptors+0x44c>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	6a3a      	ldr	r2, [r7, #32]
 8004ac4:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0310 	and.w	r3, r3, #16
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d018      	beq.n	8004b04 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	4b0a      	ldr	r3, [pc, #40]	; (8004b00 <ETH_Prepare_Tx_Descriptors+0x450>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	69d2      	ldr	r2, [r2, #28]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	60da      	str	r2, [r3, #12]
 8004af0:	e020      	b.n	8004b34 <ETH_Prepare_Tx_Descriptors+0x484>
 8004af2:	bf00      	nop
 8004af4:	ffff8000 	.word	0xffff8000
 8004af8:	ffffc000 	.word	0xffffc000
 8004afc:	c000ffff 	.word	0xc000ffff
 8004b00:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	4b2f      	ldr	r3, [pc, #188]	; (8004bc8 <ETH_Prepare_Tx_Descriptors+0x518>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	6852      	ldr	r2, [r2, #4]
 8004b10:	431a      	orrs	r2, r3
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d008      	beq.n	8004b34 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	3301      	adds	r3, #1
 8004b38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8004b3a:	f3bf 8f5f 	dmb	sy
}
 8004b3e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f47f af2b 	bne.w	80049b8 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d006      	beq.n	8004b76 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	609a      	str	r2, [r3, #8]
 8004b74:	e005      	b.n	8004b82 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b92:	6979      	ldr	r1, [r7, #20]
 8004b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b96:	3304      	adds	r3, #4
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	440b      	add	r3, r1
 8004b9c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ba2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ba4:	b672      	cpsid	i
}
 8004ba6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	4413      	add	r3, r2
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004bb6:	b662      	cpsie	i
}
 8004bb8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3734      	adds	r7, #52	; 0x34
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	ffff8000 	.word	0xffff8000

08004bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b089      	sub	sp, #36	; 0x24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004bda:	4b86      	ldr	r3, [pc, #536]	; (8004df4 <HAL_GPIO_Init+0x228>)
 8004bdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bde:	e18c      	b.n	8004efa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	2101      	movs	r1, #1
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bec:	4013      	ands	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 817e 	beq.w	8004ef4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f003 0303 	and.w	r3, r3, #3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d005      	beq.n	8004c10 <HAL_GPIO_Init+0x44>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d130      	bne.n	8004c72 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	2203      	movs	r2, #3
 8004c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c20:	43db      	mvns	r3, r3
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	4013      	ands	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c46:	2201      	movs	r2, #1
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	43db      	mvns	r3, r3
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	4013      	ands	r3, r2
 8004c54:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	091b      	lsrs	r3, r3, #4
 8004c5c:	f003 0201 	and.w	r2, r3, #1
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	d017      	beq.n	8004cae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	2203      	movs	r2, #3
 8004c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8e:	43db      	mvns	r3, r3
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	4013      	ands	r3, r2
 8004c94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d123      	bne.n	8004d02 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	08da      	lsrs	r2, r3, #3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3208      	adds	r2, #8
 8004cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	220f      	movs	r2, #15
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	fa02 f303 	lsl.w	r3, r2, r3
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	08da      	lsrs	r2, r3, #3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3208      	adds	r2, #8
 8004cfc:	69b9      	ldr	r1, [r7, #24]
 8004cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	43db      	mvns	r3, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	4013      	ands	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f003 0203 	and.w	r2, r3, #3
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 80d8 	beq.w	8004ef4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d44:	4b2c      	ldr	r3, [pc, #176]	; (8004df8 <HAL_GPIO_Init+0x22c>)
 8004d46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d4a:	4a2b      	ldr	r2, [pc, #172]	; (8004df8 <HAL_GPIO_Init+0x22c>)
 8004d4c:	f043 0302 	orr.w	r3, r3, #2
 8004d50:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d54:	4b28      	ldr	r3, [pc, #160]	; (8004df8 <HAL_GPIO_Init+0x22c>)
 8004d56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d62:	4a26      	ldr	r2, [pc, #152]	; (8004dfc <HAL_GPIO_Init+0x230>)
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	089b      	lsrs	r3, r3, #2
 8004d68:	3302      	adds	r3, #2
 8004d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	220f      	movs	r2, #15
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	4013      	ands	r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a1d      	ldr	r2, [pc, #116]	; (8004e00 <HAL_GPIO_Init+0x234>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d04a      	beq.n	8004e24 <HAL_GPIO_Init+0x258>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a1c      	ldr	r2, [pc, #112]	; (8004e04 <HAL_GPIO_Init+0x238>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d02b      	beq.n	8004dee <HAL_GPIO_Init+0x222>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a1b      	ldr	r2, [pc, #108]	; (8004e08 <HAL_GPIO_Init+0x23c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d025      	beq.n	8004dea <HAL_GPIO_Init+0x21e>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a1a      	ldr	r2, [pc, #104]	; (8004e0c <HAL_GPIO_Init+0x240>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d01f      	beq.n	8004de6 <HAL_GPIO_Init+0x21a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a19      	ldr	r2, [pc, #100]	; (8004e10 <HAL_GPIO_Init+0x244>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d019      	beq.n	8004de2 <HAL_GPIO_Init+0x216>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a18      	ldr	r2, [pc, #96]	; (8004e14 <HAL_GPIO_Init+0x248>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d013      	beq.n	8004dde <HAL_GPIO_Init+0x212>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a17      	ldr	r2, [pc, #92]	; (8004e18 <HAL_GPIO_Init+0x24c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00d      	beq.n	8004dda <HAL_GPIO_Init+0x20e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a16      	ldr	r2, [pc, #88]	; (8004e1c <HAL_GPIO_Init+0x250>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d007      	beq.n	8004dd6 <HAL_GPIO_Init+0x20a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <HAL_GPIO_Init+0x254>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d101      	bne.n	8004dd2 <HAL_GPIO_Init+0x206>
 8004dce:	2309      	movs	r3, #9
 8004dd0:	e029      	b.n	8004e26 <HAL_GPIO_Init+0x25a>
 8004dd2:	230a      	movs	r3, #10
 8004dd4:	e027      	b.n	8004e26 <HAL_GPIO_Init+0x25a>
 8004dd6:	2307      	movs	r3, #7
 8004dd8:	e025      	b.n	8004e26 <HAL_GPIO_Init+0x25a>
 8004dda:	2306      	movs	r3, #6
 8004ddc:	e023      	b.n	8004e26 <HAL_GPIO_Init+0x25a>
 8004dde:	2305      	movs	r3, #5
 8004de0:	e021      	b.n	8004e26 <HAL_GPIO_Init+0x25a>
 8004de2:	2304      	movs	r3, #4
 8004de4:	e01f      	b.n	8004e26 <HAL_GPIO_Init+0x25a>
 8004de6:	2303      	movs	r3, #3
 8004de8:	e01d      	b.n	8004e26 <HAL_GPIO_Init+0x25a>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e01b      	b.n	8004e26 <HAL_GPIO_Init+0x25a>
 8004dee:	2301      	movs	r3, #1
 8004df0:	e019      	b.n	8004e26 <HAL_GPIO_Init+0x25a>
 8004df2:	bf00      	nop
 8004df4:	58000080 	.word	0x58000080
 8004df8:	58024400 	.word	0x58024400
 8004dfc:	58000400 	.word	0x58000400
 8004e00:	58020000 	.word	0x58020000
 8004e04:	58020400 	.word	0x58020400
 8004e08:	58020800 	.word	0x58020800
 8004e0c:	58020c00 	.word	0x58020c00
 8004e10:	58021000 	.word	0x58021000
 8004e14:	58021400 	.word	0x58021400
 8004e18:	58021800 	.word	0x58021800
 8004e1c:	58021c00 	.word	0x58021c00
 8004e20:	58022400 	.word	0x58022400
 8004e24:	2300      	movs	r3, #0
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	f002 0203 	and.w	r2, r2, #3
 8004e2c:	0092      	lsls	r2, r2, #2
 8004e2e:	4093      	lsls	r3, r2
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e36:	4938      	ldr	r1, [pc, #224]	; (8004f18 <HAL_GPIO_Init+0x34c>)
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	089b      	lsrs	r3, r3, #2
 8004e3c:	3302      	adds	r3, #2
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	43db      	mvns	r3, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4013      	ands	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	43db      	mvns	r3, r3
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	4013      	ands	r3, r2
 8004e82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d003      	beq.n	8004e98 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004e98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	4013      	ands	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	43db      	mvns	r3, r3
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	fa22 f303 	lsr.w	r3, r2, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f47f ae6b 	bne.w	8004be0 <HAL_GPIO_Init+0x14>
  }
}
 8004f0a:	bf00      	nop
 8004f0c:	bf00      	nop
 8004f0e:	3724      	adds	r7, #36	; 0x24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	58000400 	.word	0x58000400

08004f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	807b      	strh	r3, [r7, #2]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f2c:	787b      	ldrb	r3, [r7, #1]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f32:	887a      	ldrh	r2, [r7, #2]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f38:	e003      	b.n	8004f42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f3a:	887b      	ldrh	r3, [r7, #2]
 8004f3c:	041a      	lsls	r2, r3, #16
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	619a      	str	r2, [r3, #24]
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
	...

08004f50 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004f58:	4b19      	ldr	r3, [pc, #100]	; (8004fc0 <HAL_PWREx_ConfigSupply+0x70>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d00a      	beq.n	8004f7a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f64:	4b16      	ldr	r3, [pc, #88]	; (8004fc0 <HAL_PWREx_ConfigSupply+0x70>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d001      	beq.n	8004f76 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e01f      	b.n	8004fb6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	e01d      	b.n	8004fb6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f7a:	4b11      	ldr	r3, [pc, #68]	; (8004fc0 <HAL_PWREx_ConfigSupply+0x70>)
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f023 0207 	bic.w	r2, r3, #7
 8004f82:	490f      	ldr	r1, [pc, #60]	; (8004fc0 <HAL_PWREx_ConfigSupply+0x70>)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004f8a:	f7fd f9dd 	bl	8002348 <HAL_GetTick>
 8004f8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f90:	e009      	b.n	8004fa6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f92:	f7fd f9d9 	bl	8002348 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fa0:	d901      	bls.n	8004fa6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e007      	b.n	8004fb6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004fa6:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <HAL_PWREx_ConfigSupply+0x70>)
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fb2:	d1ee      	bne.n	8004f92 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	58024800 	.word	0x58024800

08004fc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08c      	sub	sp, #48	; 0x30
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e3c8      	b.n	8005768 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 8087 	beq.w	80050f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fe4:	4b88      	ldr	r3, [pc, #544]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004fee:	4b86      	ldr	r3, [pc, #536]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff6:	2b10      	cmp	r3, #16
 8004ff8:	d007      	beq.n	800500a <HAL_RCC_OscConfig+0x46>
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	2b18      	cmp	r3, #24
 8004ffe:	d110      	bne.n	8005022 <HAL_RCC_OscConfig+0x5e>
 8005000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d10b      	bne.n	8005022 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800500a:	4b7f      	ldr	r3, [pc, #508]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d06c      	beq.n	80050f0 <HAL_RCC_OscConfig+0x12c>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d168      	bne.n	80050f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e3a2      	b.n	8005768 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800502a:	d106      	bne.n	800503a <HAL_RCC_OscConfig+0x76>
 800502c:	4b76      	ldr	r3, [pc, #472]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a75      	ldr	r2, [pc, #468]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 8005032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	e02e      	b.n	8005098 <HAL_RCC_OscConfig+0xd4>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10c      	bne.n	800505c <HAL_RCC_OscConfig+0x98>
 8005042:	4b71      	ldr	r3, [pc, #452]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a70      	ldr	r2, [pc, #448]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 8005048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	4b6e      	ldr	r3, [pc, #440]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a6d      	ldr	r2, [pc, #436]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 8005054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	e01d      	b.n	8005098 <HAL_RCC_OscConfig+0xd4>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005064:	d10c      	bne.n	8005080 <HAL_RCC_OscConfig+0xbc>
 8005066:	4b68      	ldr	r3, [pc, #416]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a67      	ldr	r2, [pc, #412]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 800506c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	4b65      	ldr	r3, [pc, #404]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a64      	ldr	r2, [pc, #400]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 8005078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	e00b      	b.n	8005098 <HAL_RCC_OscConfig+0xd4>
 8005080:	4b61      	ldr	r3, [pc, #388]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a60      	ldr	r2, [pc, #384]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 8005086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	4b5e      	ldr	r3, [pc, #376]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a5d      	ldr	r2, [pc, #372]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 8005092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d013      	beq.n	80050c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a0:	f7fd f952 	bl	8002348 <HAL_GetTick>
 80050a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050a8:	f7fd f94e 	bl	8002348 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b64      	cmp	r3, #100	; 0x64
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e356      	b.n	8005768 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050ba:	4b53      	ldr	r3, [pc, #332]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0xe4>
 80050c6:	e014      	b.n	80050f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c8:	f7fd f93e 	bl	8002348 <HAL_GetTick>
 80050cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d0:	f7fd f93a 	bl	8002348 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b64      	cmp	r3, #100	; 0x64
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e342      	b.n	8005768 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050e2:	4b49      	ldr	r3, [pc, #292]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x10c>
 80050ee:	e000      	b.n	80050f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 808c 	beq.w	8005218 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005100:	4b41      	ldr	r3, [pc, #260]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005108:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800510a:	4b3f      	ldr	r3, [pc, #252]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 800510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d007      	beq.n	8005126 <HAL_RCC_OscConfig+0x162>
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	2b18      	cmp	r3, #24
 800511a:	d137      	bne.n	800518c <HAL_RCC_OscConfig+0x1c8>
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d132      	bne.n	800518c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005126:	4b38      	ldr	r3, [pc, #224]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b00      	cmp	r3, #0
 8005130:	d005      	beq.n	800513e <HAL_RCC_OscConfig+0x17a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e314      	b.n	8005768 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800513e:	4b32      	ldr	r3, [pc, #200]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f023 0219 	bic.w	r2, r3, #25
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	492f      	ldr	r1, [pc, #188]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 800514c:	4313      	orrs	r3, r2
 800514e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005150:	f7fd f8fa 	bl	8002348 <HAL_GetTick>
 8005154:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005158:	f7fd f8f6 	bl	8002348 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e2fe      	b.n	8005768 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800516a:	4b27      	ldr	r3, [pc, #156]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0f0      	beq.n	8005158 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005176:	4b24      	ldr	r3, [pc, #144]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	061b      	lsls	r3, r3, #24
 8005184:	4920      	ldr	r1, [pc, #128]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 8005186:	4313      	orrs	r3, r2
 8005188:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800518a:	e045      	b.n	8005218 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d026      	beq.n	80051e2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005194:	4b1c      	ldr	r3, [pc, #112]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f023 0219 	bic.w	r2, r3, #25
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	4919      	ldr	r1, [pc, #100]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a6:	f7fd f8cf 	bl	8002348 <HAL_GetTick>
 80051aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051ae:	f7fd f8cb 	bl	8002348 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e2d3      	b.n	8005768 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051c0:	4b11      	ldr	r3, [pc, #68]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0f0      	beq.n	80051ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051cc:	4b0e      	ldr	r3, [pc, #56]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	061b      	lsls	r3, r3, #24
 80051da:	490b      	ldr	r1, [pc, #44]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	604b      	str	r3, [r1, #4]
 80051e0:	e01a      	b.n	8005218 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051e2:	4b09      	ldr	r3, [pc, #36]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a08      	ldr	r2, [pc, #32]	; (8005208 <HAL_RCC_OscConfig+0x244>)
 80051e8:	f023 0301 	bic.w	r3, r3, #1
 80051ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ee:	f7fd f8ab 	bl	8002348 <HAL_GetTick>
 80051f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051f4:	e00a      	b.n	800520c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f6:	f7fd f8a7 	bl	8002348 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d903      	bls.n	800520c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e2af      	b.n	8005768 <HAL_RCC_OscConfig+0x7a4>
 8005208:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800520c:	4b96      	ldr	r3, [pc, #600]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1ee      	bne.n	80051f6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0310 	and.w	r3, r3, #16
 8005220:	2b00      	cmp	r3, #0
 8005222:	d06a      	beq.n	80052fa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005224:	4b90      	ldr	r3, [pc, #576]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800522c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800522e:	4b8e      	ldr	r3, [pc, #568]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 8005230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005232:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	2b08      	cmp	r3, #8
 8005238:	d007      	beq.n	800524a <HAL_RCC_OscConfig+0x286>
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	2b18      	cmp	r3, #24
 800523e:	d11b      	bne.n	8005278 <HAL_RCC_OscConfig+0x2b4>
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	2b01      	cmp	r3, #1
 8005248:	d116      	bne.n	8005278 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800524a:	4b87      	ldr	r3, [pc, #540]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005252:	2b00      	cmp	r3, #0
 8005254:	d005      	beq.n	8005262 <HAL_RCC_OscConfig+0x29e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	2b80      	cmp	r3, #128	; 0x80
 800525c:	d001      	beq.n	8005262 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e282      	b.n	8005768 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005262:	4b81      	ldr	r3, [pc, #516]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	061b      	lsls	r3, r3, #24
 8005270:	497d      	ldr	r1, [pc, #500]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 8005272:	4313      	orrs	r3, r2
 8005274:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005276:	e040      	b.n	80052fa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d023      	beq.n	80052c8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005280:	4b79      	ldr	r3, [pc, #484]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a78      	ldr	r2, [pc, #480]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 8005286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800528a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528c:	f7fd f85c 	bl	8002348 <HAL_GetTick>
 8005290:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005294:	f7fd f858 	bl	8002348 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e260      	b.n	8005768 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052a6:	4b70      	ldr	r3, [pc, #448]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0f0      	beq.n	8005294 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052b2:	4b6d      	ldr	r3, [pc, #436]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	061b      	lsls	r3, r3, #24
 80052c0:	4969      	ldr	r1, [pc, #420]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60cb      	str	r3, [r1, #12]
 80052c6:	e018      	b.n	80052fa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80052c8:	4b67      	ldr	r3, [pc, #412]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a66      	ldr	r2, [pc, #408]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 80052ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d4:	f7fd f838 	bl	8002348 <HAL_GetTick>
 80052d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80052dc:	f7fd f834 	bl	8002348 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e23c      	b.n	8005768 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052ee:	4b5e      	ldr	r3, [pc, #376]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1f0      	bne.n	80052dc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d036      	beq.n	8005374 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d019      	beq.n	8005342 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800530e:	4b56      	ldr	r3, [pc, #344]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 8005310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005312:	4a55      	ldr	r2, [pc, #340]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 8005314:	f043 0301 	orr.w	r3, r3, #1
 8005318:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531a:	f7fd f815 	bl	8002348 <HAL_GetTick>
 800531e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005320:	e008      	b.n	8005334 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005322:	f7fd f811 	bl	8002348 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d901      	bls.n	8005334 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e219      	b.n	8005768 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005334:	4b4c      	ldr	r3, [pc, #304]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 8005336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0f0      	beq.n	8005322 <HAL_RCC_OscConfig+0x35e>
 8005340:	e018      	b.n	8005374 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005342:	4b49      	ldr	r3, [pc, #292]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 8005344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005346:	4a48      	ldr	r2, [pc, #288]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 8005348:	f023 0301 	bic.w	r3, r3, #1
 800534c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800534e:	f7fc fffb 	bl	8002348 <HAL_GetTick>
 8005352:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005356:	f7fc fff7 	bl	8002348 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e1ff      	b.n	8005768 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005368:	4b3f      	ldr	r3, [pc, #252]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 800536a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1f0      	bne.n	8005356 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0320 	and.w	r3, r3, #32
 800537c:	2b00      	cmp	r3, #0
 800537e:	d036      	beq.n	80053ee <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d019      	beq.n	80053bc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005388:	4b37      	ldr	r3, [pc, #220]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a36      	ldr	r2, [pc, #216]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 800538e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005392:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005394:	f7fc ffd8 	bl	8002348 <HAL_GetTick>
 8005398:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800539c:	f7fc ffd4 	bl	8002348 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e1dc      	b.n	8005768 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053ae:	4b2e      	ldr	r3, [pc, #184]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0f0      	beq.n	800539c <HAL_RCC_OscConfig+0x3d8>
 80053ba:	e018      	b.n	80053ee <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053bc:	4b2a      	ldr	r3, [pc, #168]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a29      	ldr	r2, [pc, #164]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 80053c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80053c8:	f7fc ffbe 	bl	8002348 <HAL_GetTick>
 80053cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053d0:	f7fc ffba 	bl	8002348 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e1c2      	b.n	8005768 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053e2:	4b21      	ldr	r3, [pc, #132]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1f0      	bne.n	80053d0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0304 	and.w	r3, r3, #4
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 8086 	beq.w	8005508 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80053fc:	4b1b      	ldr	r3, [pc, #108]	; (800546c <HAL_RCC_OscConfig+0x4a8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a1a      	ldr	r2, [pc, #104]	; (800546c <HAL_RCC_OscConfig+0x4a8>)
 8005402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005406:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005408:	f7fc ff9e 	bl	8002348 <HAL_GetTick>
 800540c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005410:	f7fc ff9a 	bl	8002348 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b64      	cmp	r3, #100	; 0x64
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e1a2      	b.n	8005768 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005422:	4b12      	ldr	r3, [pc, #72]	; (800546c <HAL_RCC_OscConfig+0x4a8>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542a:	2b00      	cmp	r3, #0
 800542c:	d0f0      	beq.n	8005410 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d106      	bne.n	8005444 <HAL_RCC_OscConfig+0x480>
 8005436:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 8005438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543a:	4a0b      	ldr	r2, [pc, #44]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	6713      	str	r3, [r2, #112]	; 0x70
 8005442:	e032      	b.n	80054aa <HAL_RCC_OscConfig+0x4e6>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d111      	bne.n	8005470 <HAL_RCC_OscConfig+0x4ac>
 800544c:	4b06      	ldr	r3, [pc, #24]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 800544e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005450:	4a05      	ldr	r2, [pc, #20]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 8005452:	f023 0301 	bic.w	r3, r3, #1
 8005456:	6713      	str	r3, [r2, #112]	; 0x70
 8005458:	4b03      	ldr	r3, [pc, #12]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 800545a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545c:	4a02      	ldr	r2, [pc, #8]	; (8005468 <HAL_RCC_OscConfig+0x4a4>)
 800545e:	f023 0304 	bic.w	r3, r3, #4
 8005462:	6713      	str	r3, [r2, #112]	; 0x70
 8005464:	e021      	b.n	80054aa <HAL_RCC_OscConfig+0x4e6>
 8005466:	bf00      	nop
 8005468:	58024400 	.word	0x58024400
 800546c:	58024800 	.word	0x58024800
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	2b05      	cmp	r3, #5
 8005476:	d10c      	bne.n	8005492 <HAL_RCC_OscConfig+0x4ce>
 8005478:	4b83      	ldr	r3, [pc, #524]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 800547a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547c:	4a82      	ldr	r2, [pc, #520]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 800547e:	f043 0304 	orr.w	r3, r3, #4
 8005482:	6713      	str	r3, [r2, #112]	; 0x70
 8005484:	4b80      	ldr	r3, [pc, #512]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 8005486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005488:	4a7f      	ldr	r2, [pc, #508]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	6713      	str	r3, [r2, #112]	; 0x70
 8005490:	e00b      	b.n	80054aa <HAL_RCC_OscConfig+0x4e6>
 8005492:	4b7d      	ldr	r3, [pc, #500]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 8005494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005496:	4a7c      	ldr	r2, [pc, #496]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 8005498:	f023 0301 	bic.w	r3, r3, #1
 800549c:	6713      	str	r3, [r2, #112]	; 0x70
 800549e:	4b7a      	ldr	r3, [pc, #488]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 80054a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a2:	4a79      	ldr	r2, [pc, #484]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 80054a4:	f023 0304 	bic.w	r3, r3, #4
 80054a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d015      	beq.n	80054de <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b2:	f7fc ff49 	bl	8002348 <HAL_GetTick>
 80054b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054b8:	e00a      	b.n	80054d0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ba:	f7fc ff45 	bl	8002348 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e14b      	b.n	8005768 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054d0:	4b6d      	ldr	r3, [pc, #436]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 80054d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0ee      	beq.n	80054ba <HAL_RCC_OscConfig+0x4f6>
 80054dc:	e014      	b.n	8005508 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054de:	f7fc ff33 	bl	8002348 <HAL_GetTick>
 80054e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054e4:	e00a      	b.n	80054fc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e6:	f7fc ff2f 	bl	8002348 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d901      	bls.n	80054fc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e135      	b.n	8005768 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054fc:	4b62      	ldr	r3, [pc, #392]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 80054fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1ee      	bne.n	80054e6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 812a 	beq.w	8005766 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005512:	4b5d      	ldr	r3, [pc, #372]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800551a:	2b18      	cmp	r3, #24
 800551c:	f000 80ba 	beq.w	8005694 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	2b02      	cmp	r3, #2
 8005526:	f040 8095 	bne.w	8005654 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800552a:	4b57      	ldr	r3, [pc, #348]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a56      	ldr	r2, [pc, #344]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 8005530:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005536:	f7fc ff07 	bl	8002348 <HAL_GetTick>
 800553a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800553c:	e008      	b.n	8005550 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800553e:	f7fc ff03 	bl	8002348 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d901      	bls.n	8005550 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e10b      	b.n	8005768 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005550:	4b4d      	ldr	r3, [pc, #308]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1f0      	bne.n	800553e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800555c:	4b4a      	ldr	r3, [pc, #296]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 800555e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005560:	4b4a      	ldr	r3, [pc, #296]	; (800568c <HAL_RCC_OscConfig+0x6c8>)
 8005562:	4013      	ands	r3, r2
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800556c:	0112      	lsls	r2, r2, #4
 800556e:	430a      	orrs	r2, r1
 8005570:	4945      	ldr	r1, [pc, #276]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 8005572:	4313      	orrs	r3, r2
 8005574:	628b      	str	r3, [r1, #40]	; 0x28
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557a:	3b01      	subs	r3, #1
 800557c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005584:	3b01      	subs	r3, #1
 8005586:	025b      	lsls	r3, r3, #9
 8005588:	b29b      	uxth	r3, r3
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005590:	3b01      	subs	r3, #1
 8005592:	041b      	lsls	r3, r3, #16
 8005594:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005598:	431a      	orrs	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559e:	3b01      	subs	r3, #1
 80055a0:	061b      	lsls	r3, r3, #24
 80055a2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80055a6:	4938      	ldr	r1, [pc, #224]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80055ac:	4b36      	ldr	r3, [pc, #216]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	4a35      	ldr	r2, [pc, #212]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 80055b2:	f023 0301 	bic.w	r3, r3, #1
 80055b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80055b8:	4b33      	ldr	r3, [pc, #204]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 80055ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055bc:	4b34      	ldr	r3, [pc, #208]	; (8005690 <HAL_RCC_OscConfig+0x6cc>)
 80055be:	4013      	ands	r3, r2
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80055c4:	00d2      	lsls	r2, r2, #3
 80055c6:	4930      	ldr	r1, [pc, #192]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80055cc:	4b2e      	ldr	r3, [pc, #184]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	f023 020c 	bic.w	r2, r3, #12
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d8:	492b      	ldr	r1, [pc, #172]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80055de:	4b2a      	ldr	r3, [pc, #168]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 80055e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e2:	f023 0202 	bic.w	r2, r3, #2
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ea:	4927      	ldr	r1, [pc, #156]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80055f0:	4b25      	ldr	r3, [pc, #148]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 80055f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f4:	4a24      	ldr	r2, [pc, #144]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 80055f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055fc:	4b22      	ldr	r3, [pc, #136]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 80055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005600:	4a21      	ldr	r2, [pc, #132]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 8005602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005606:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005608:	4b1f      	ldr	r3, [pc, #124]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 800560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560c:	4a1e      	ldr	r2, [pc, #120]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 800560e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005612:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005614:	4b1c      	ldr	r3, [pc, #112]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	4a1b      	ldr	r2, [pc, #108]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 800561a:	f043 0301 	orr.w	r3, r3, #1
 800561e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005620:	4b19      	ldr	r3, [pc, #100]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a18      	ldr	r2, [pc, #96]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 8005626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800562a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562c:	f7fc fe8c 	bl	8002348 <HAL_GetTick>
 8005630:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005634:	f7fc fe88 	bl	8002348 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e090      	b.n	8005768 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005646:	4b10      	ldr	r3, [pc, #64]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0f0      	beq.n	8005634 <HAL_RCC_OscConfig+0x670>
 8005652:	e088      	b.n	8005766 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005654:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a0b      	ldr	r2, [pc, #44]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 800565a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800565e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005660:	f7fc fe72 	bl	8002348 <HAL_GetTick>
 8005664:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005668:	f7fc fe6e 	bl	8002348 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e076      	b.n	8005768 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800567a:	4b03      	ldr	r3, [pc, #12]	; (8005688 <HAL_RCC_OscConfig+0x6c4>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1f0      	bne.n	8005668 <HAL_RCC_OscConfig+0x6a4>
 8005686:	e06e      	b.n	8005766 <HAL_RCC_OscConfig+0x7a2>
 8005688:	58024400 	.word	0x58024400
 800568c:	fffffc0c 	.word	0xfffffc0c
 8005690:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005694:	4b36      	ldr	r3, [pc, #216]	; (8005770 <HAL_RCC_OscConfig+0x7ac>)
 8005696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005698:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800569a:	4b35      	ldr	r3, [pc, #212]	; (8005770 <HAL_RCC_OscConfig+0x7ac>)
 800569c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d031      	beq.n	800570c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f003 0203 	and.w	r2, r3, #3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d12a      	bne.n	800570c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	091b      	lsrs	r3, r3, #4
 80056ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d122      	bne.n	800570c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d11a      	bne.n	800570c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	0a5b      	lsrs	r3, r3, #9
 80056da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d111      	bne.n	800570c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	0c1b      	lsrs	r3, r3, #16
 80056ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d108      	bne.n	800570c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	0e1b      	lsrs	r3, r3, #24
 80056fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005706:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005708:	429a      	cmp	r2, r3
 800570a:	d001      	beq.n	8005710 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e02b      	b.n	8005768 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005710:	4b17      	ldr	r3, [pc, #92]	; (8005770 <HAL_RCC_OscConfig+0x7ac>)
 8005712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005714:	08db      	lsrs	r3, r3, #3
 8005716:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800571a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	429a      	cmp	r2, r3
 8005724:	d01f      	beq.n	8005766 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005726:	4b12      	ldr	r3, [pc, #72]	; (8005770 <HAL_RCC_OscConfig+0x7ac>)
 8005728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572a:	4a11      	ldr	r2, [pc, #68]	; (8005770 <HAL_RCC_OscConfig+0x7ac>)
 800572c:	f023 0301 	bic.w	r3, r3, #1
 8005730:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005732:	f7fc fe09 	bl	8002348 <HAL_GetTick>
 8005736:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005738:	bf00      	nop
 800573a:	f7fc fe05 	bl	8002348 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	4293      	cmp	r3, r2
 8005744:	d0f9      	beq.n	800573a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005746:	4b0a      	ldr	r3, [pc, #40]	; (8005770 <HAL_RCC_OscConfig+0x7ac>)
 8005748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800574a:	4b0a      	ldr	r3, [pc, #40]	; (8005774 <HAL_RCC_OscConfig+0x7b0>)
 800574c:	4013      	ands	r3, r2
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005752:	00d2      	lsls	r2, r2, #3
 8005754:	4906      	ldr	r1, [pc, #24]	; (8005770 <HAL_RCC_OscConfig+0x7ac>)
 8005756:	4313      	orrs	r3, r2
 8005758:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800575a:	4b05      	ldr	r3, [pc, #20]	; (8005770 <HAL_RCC_OscConfig+0x7ac>)
 800575c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575e:	4a04      	ldr	r2, [pc, #16]	; (8005770 <HAL_RCC_OscConfig+0x7ac>)
 8005760:	f043 0301 	orr.w	r3, r3, #1
 8005764:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3730      	adds	r7, #48	; 0x30
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	58024400 	.word	0x58024400
 8005774:	ffff0007 	.word	0xffff0007

08005778 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e19c      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800578c:	4b8a      	ldr	r3, [pc, #552]	; (80059b8 <HAL_RCC_ClockConfig+0x240>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 030f 	and.w	r3, r3, #15
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d910      	bls.n	80057bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579a:	4b87      	ldr	r3, [pc, #540]	; (80059b8 <HAL_RCC_ClockConfig+0x240>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f023 020f 	bic.w	r2, r3, #15
 80057a2:	4985      	ldr	r1, [pc, #532]	; (80059b8 <HAL_RCC_ClockConfig+0x240>)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057aa:	4b83      	ldr	r3, [pc, #524]	; (80059b8 <HAL_RCC_ClockConfig+0x240>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d001      	beq.n	80057bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e184      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d010      	beq.n	80057ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691a      	ldr	r2, [r3, #16]
 80057cc:	4b7b      	ldr	r3, [pc, #492]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d908      	bls.n	80057ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057d8:	4b78      	ldr	r3, [pc, #480]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	4975      	ldr	r1, [pc, #468]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0308 	and.w	r3, r3, #8
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d010      	beq.n	8005818 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	695a      	ldr	r2, [r3, #20]
 80057fa:	4b70      	ldr	r3, [pc, #448]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005802:	429a      	cmp	r2, r3
 8005804:	d908      	bls.n	8005818 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005806:	4b6d      	ldr	r3, [pc, #436]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	496a      	ldr	r1, [pc, #424]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005814:	4313      	orrs	r3, r2
 8005816:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b00      	cmp	r3, #0
 8005822:	d010      	beq.n	8005846 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699a      	ldr	r2, [r3, #24]
 8005828:	4b64      	ldr	r3, [pc, #400]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005830:	429a      	cmp	r2, r3
 8005832:	d908      	bls.n	8005846 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005834:	4b61      	ldr	r3, [pc, #388]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	495e      	ldr	r1, [pc, #376]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005842:	4313      	orrs	r3, r2
 8005844:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0320 	and.w	r3, r3, #32
 800584e:	2b00      	cmp	r3, #0
 8005850:	d010      	beq.n	8005874 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	69da      	ldr	r2, [r3, #28]
 8005856:	4b59      	ldr	r3, [pc, #356]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800585e:	429a      	cmp	r2, r3
 8005860:	d908      	bls.n	8005874 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005862:	4b56      	ldr	r3, [pc, #344]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	4953      	ldr	r1, [pc, #332]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005870:	4313      	orrs	r3, r2
 8005872:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d010      	beq.n	80058a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	4b4d      	ldr	r3, [pc, #308]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	f003 030f 	and.w	r3, r3, #15
 800588c:	429a      	cmp	r2, r3
 800588e:	d908      	bls.n	80058a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005890:	4b4a      	ldr	r3, [pc, #296]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	f023 020f 	bic.w	r2, r3, #15
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	4947      	ldr	r1, [pc, #284]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d055      	beq.n	800595a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80058ae:	4b43      	ldr	r3, [pc, #268]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	4940      	ldr	r1, [pc, #256]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d107      	bne.n	80058d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058c8:	4b3c      	ldr	r3, [pc, #240]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d121      	bne.n	8005918 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e0f6      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2b03      	cmp	r3, #3
 80058de:	d107      	bne.n	80058f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058e0:	4b36      	ldr	r3, [pc, #216]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d115      	bne.n	8005918 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e0ea      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d107      	bne.n	8005908 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058f8:	4b30      	ldr	r3, [pc, #192]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005900:	2b00      	cmp	r3, #0
 8005902:	d109      	bne.n	8005918 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e0de      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005908:	4b2c      	ldr	r3, [pc, #176]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e0d6      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005918:	4b28      	ldr	r3, [pc, #160]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	f023 0207 	bic.w	r2, r3, #7
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	4925      	ldr	r1, [pc, #148]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005926:	4313      	orrs	r3, r2
 8005928:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800592a:	f7fc fd0d 	bl	8002348 <HAL_GetTick>
 800592e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005930:	e00a      	b.n	8005948 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005932:	f7fc fd09 	bl	8002348 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005940:	4293      	cmp	r3, r2
 8005942:	d901      	bls.n	8005948 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e0be      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005948:	4b1c      	ldr	r3, [pc, #112]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	429a      	cmp	r2, r3
 8005958:	d1eb      	bne.n	8005932 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d010      	beq.n	8005988 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	4b14      	ldr	r3, [pc, #80]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	429a      	cmp	r2, r3
 8005974:	d208      	bcs.n	8005988 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005976:	4b11      	ldr	r3, [pc, #68]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	f023 020f 	bic.w	r2, r3, #15
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	490e      	ldr	r1, [pc, #56]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005984:	4313      	orrs	r3, r2
 8005986:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005988:	4b0b      	ldr	r3, [pc, #44]	; (80059b8 <HAL_RCC_ClockConfig+0x240>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 030f 	and.w	r3, r3, #15
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	429a      	cmp	r2, r3
 8005994:	d214      	bcs.n	80059c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005996:	4b08      	ldr	r3, [pc, #32]	; (80059b8 <HAL_RCC_ClockConfig+0x240>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f023 020f 	bic.w	r2, r3, #15
 800599e:	4906      	ldr	r1, [pc, #24]	; (80059b8 <HAL_RCC_ClockConfig+0x240>)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a6:	4b04      	ldr	r3, [pc, #16]	; (80059b8 <HAL_RCC_ClockConfig+0x240>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d005      	beq.n	80059c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e086      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>
 80059b8:	52002000 	.word	0x52002000
 80059bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d010      	beq.n	80059ee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	4b3f      	ldr	r3, [pc, #252]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059d8:	429a      	cmp	r2, r3
 80059da:	d208      	bcs.n	80059ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059dc:	4b3c      	ldr	r3, [pc, #240]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	4939      	ldr	r1, [pc, #228]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d010      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	695a      	ldr	r2, [r3, #20]
 80059fe:	4b34      	ldr	r3, [pc, #208]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d208      	bcs.n	8005a1c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a0a:	4b31      	ldr	r3, [pc, #196]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	492e      	ldr	r1, [pc, #184]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0310 	and.w	r3, r3, #16
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d010      	beq.n	8005a4a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	699a      	ldr	r2, [r3, #24]
 8005a2c:	4b28      	ldr	r3, [pc, #160]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a2e:	69db      	ldr	r3, [r3, #28]
 8005a30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d208      	bcs.n	8005a4a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a38:	4b25      	ldr	r3, [pc, #148]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	4922      	ldr	r1, [pc, #136]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d010      	beq.n	8005a78 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	69da      	ldr	r2, [r3, #28]
 8005a5a:	4b1d      	ldr	r3, [pc, #116]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d208      	bcs.n	8005a78 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a66:	4b1a      	ldr	r3, [pc, #104]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	4917      	ldr	r1, [pc, #92]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a78:	f000 f834 	bl	8005ae4 <HAL_RCC_GetSysClockFreq>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	4b14      	ldr	r3, [pc, #80]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	0a1b      	lsrs	r3, r3, #8
 8005a84:	f003 030f 	and.w	r3, r3, #15
 8005a88:	4912      	ldr	r1, [pc, #72]	; (8005ad4 <HAL_RCC_ClockConfig+0x35c>)
 8005a8a:	5ccb      	ldrb	r3, [r1, r3]
 8005a8c:	f003 031f 	and.w	r3, r3, #31
 8005a90:	fa22 f303 	lsr.w	r3, r2, r3
 8005a94:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a96:	4b0e      	ldr	r3, [pc, #56]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	4a0d      	ldr	r2, [pc, #52]	; (8005ad4 <HAL_RCC_ClockConfig+0x35c>)
 8005aa0:	5cd3      	ldrb	r3, [r2, r3]
 8005aa2:	f003 031f 	and.w	r3, r3, #31
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8005aac:	4a0a      	ldr	r2, [pc, #40]	; (8005ad8 <HAL_RCC_ClockConfig+0x360>)
 8005aae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ab0:	4a0a      	ldr	r2, [pc, #40]	; (8005adc <HAL_RCC_ClockConfig+0x364>)
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005ab6:	4b0a      	ldr	r3, [pc, #40]	; (8005ae0 <HAL_RCC_ClockConfig+0x368>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fc f8a4 	bl	8001c08 <HAL_InitTick>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	58024400 	.word	0x58024400
 8005ad4:	0801e168 	.word	0x0801e168
 8005ad8:	24000004 	.word	0x24000004
 8005adc:	24000000 	.word	0x24000000
 8005ae0:	24000008 	.word	0x24000008

08005ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b089      	sub	sp, #36	; 0x24
 8005ae8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005aea:	4bb3      	ldr	r3, [pc, #716]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005af2:	2b18      	cmp	r3, #24
 8005af4:	f200 8155 	bhi.w	8005da2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005af8:	a201      	add	r2, pc, #4	; (adr r2, 8005b00 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afe:	bf00      	nop
 8005b00:	08005b65 	.word	0x08005b65
 8005b04:	08005da3 	.word	0x08005da3
 8005b08:	08005da3 	.word	0x08005da3
 8005b0c:	08005da3 	.word	0x08005da3
 8005b10:	08005da3 	.word	0x08005da3
 8005b14:	08005da3 	.word	0x08005da3
 8005b18:	08005da3 	.word	0x08005da3
 8005b1c:	08005da3 	.word	0x08005da3
 8005b20:	08005b8b 	.word	0x08005b8b
 8005b24:	08005da3 	.word	0x08005da3
 8005b28:	08005da3 	.word	0x08005da3
 8005b2c:	08005da3 	.word	0x08005da3
 8005b30:	08005da3 	.word	0x08005da3
 8005b34:	08005da3 	.word	0x08005da3
 8005b38:	08005da3 	.word	0x08005da3
 8005b3c:	08005da3 	.word	0x08005da3
 8005b40:	08005b91 	.word	0x08005b91
 8005b44:	08005da3 	.word	0x08005da3
 8005b48:	08005da3 	.word	0x08005da3
 8005b4c:	08005da3 	.word	0x08005da3
 8005b50:	08005da3 	.word	0x08005da3
 8005b54:	08005da3 	.word	0x08005da3
 8005b58:	08005da3 	.word	0x08005da3
 8005b5c:	08005da3 	.word	0x08005da3
 8005b60:	08005b97 	.word	0x08005b97
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b64:	4b94      	ldr	r3, [pc, #592]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0320 	and.w	r3, r3, #32
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d009      	beq.n	8005b84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b70:	4b91      	ldr	r3, [pc, #580]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	08db      	lsrs	r3, r3, #3
 8005b76:	f003 0303 	and.w	r3, r3, #3
 8005b7a:	4a90      	ldr	r2, [pc, #576]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005b82:	e111      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005b84:	4b8d      	ldr	r3, [pc, #564]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b86:	61bb      	str	r3, [r7, #24]
      break;
 8005b88:	e10e      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005b8a:	4b8d      	ldr	r3, [pc, #564]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b8c:	61bb      	str	r3, [r7, #24]
      break;
 8005b8e:	e10b      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005b90:	4b8c      	ldr	r3, [pc, #560]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005b92:	61bb      	str	r3, [r7, #24]
      break;
 8005b94:	e108      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b96:	4b88      	ldr	r3, [pc, #544]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005ba0:	4b85      	ldr	r3, [pc, #532]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba4:	091b      	lsrs	r3, r3, #4
 8005ba6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005baa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005bac:	4b82      	ldr	r3, [pc, #520]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005bb6:	4b80      	ldr	r3, [pc, #512]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bba:	08db      	lsrs	r3, r3, #3
 8005bbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	fb02 f303 	mul.w	r3, r2, r3
 8005bc6:	ee07 3a90 	vmov	s15, r3
 8005bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 80e1 	beq.w	8005d9c <HAL_RCC_GetSysClockFreq+0x2b8>
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	f000 8083 	beq.w	8005ce8 <HAL_RCC_GetSysClockFreq+0x204>
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	f200 80a1 	bhi.w	8005d2c <HAL_RCC_GetSysClockFreq+0x248>
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <HAL_RCC_GetSysClockFreq+0x114>
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d056      	beq.n	8005ca4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005bf6:	e099      	b.n	8005d2c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bf8:	4b6f      	ldr	r3, [pc, #444]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0320 	and.w	r3, r3, #32
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d02d      	beq.n	8005c60 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c04:	4b6c      	ldr	r3, [pc, #432]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	08db      	lsrs	r3, r3, #3
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	4a6b      	ldr	r2, [pc, #428]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c10:	fa22 f303 	lsr.w	r3, r2, r3
 8005c14:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	ee07 3a90 	vmov	s15, r3
 8005c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	ee07 3a90 	vmov	s15, r3
 8005c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c2e:	4b62      	ldr	r3, [pc, #392]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c42:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005dc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005c5e:	e087      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	ee07 3a90 	vmov	s15, r3
 8005c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005dcc <HAL_RCC_GetSysClockFreq+0x2e8>
 8005c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c72:	4b51      	ldr	r3, [pc, #324]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c82:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c86:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005dc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ca2:	e065      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	ee07 3a90 	vmov	s15, r3
 8005caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cae:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005dd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cb6:	4b40      	ldr	r3, [pc, #256]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cbe:	ee07 3a90 	vmov	s15, r3
 8005cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005dc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ce6:	e043      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	ee07 3a90 	vmov	s15, r3
 8005cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005dd4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cfa:	4b2f      	ldr	r3, [pc, #188]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d02:	ee07 3a90 	vmov	s15, r3
 8005d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d0e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005dc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d2a:	e021      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	ee07 3a90 	vmov	s15, r3
 8005d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d36:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005dd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d3e:	4b1e      	ldr	r3, [pc, #120]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d52:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005dc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d6e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005d70:	4b11      	ldr	r3, [pc, #68]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d74:	0a5b      	lsrs	r3, r3, #9
 8005d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	ee07 3a90 	vmov	s15, r3
 8005d84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d88:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d94:	ee17 3a90 	vmov	r3, s15
 8005d98:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005d9a:	e005      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61bb      	str	r3, [r7, #24]
      break;
 8005da0:	e002      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005da2:	4b07      	ldr	r3, [pc, #28]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005da4:	61bb      	str	r3, [r7, #24]
      break;
 8005da6:	bf00      	nop
  }

  return sysclockfreq;
 8005da8:	69bb      	ldr	r3, [r7, #24]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3724      	adds	r7, #36	; 0x24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	58024400 	.word	0x58024400
 8005dbc:	03d09000 	.word	0x03d09000
 8005dc0:	003d0900 	.word	0x003d0900
 8005dc4:	007a1200 	.word	0x007a1200
 8005dc8:	46000000 	.word	0x46000000
 8005dcc:	4c742400 	.word	0x4c742400
 8005dd0:	4a742400 	.word	0x4a742400
 8005dd4:	4af42400 	.word	0x4af42400

08005dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005dde:	f7ff fe81 	bl	8005ae4 <HAL_RCC_GetSysClockFreq>
 8005de2:	4602      	mov	r2, r0
 8005de4:	4b10      	ldr	r3, [pc, #64]	; (8005e28 <HAL_RCC_GetHCLKFreq+0x50>)
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	0a1b      	lsrs	r3, r3, #8
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	490f      	ldr	r1, [pc, #60]	; (8005e2c <HAL_RCC_GetHCLKFreq+0x54>)
 8005df0:	5ccb      	ldrb	r3, [r1, r3]
 8005df2:	f003 031f 	and.w	r3, r3, #31
 8005df6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dfa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005dfc:	4b0a      	ldr	r3, [pc, #40]	; (8005e28 <HAL_RCC_GetHCLKFreq+0x50>)
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	f003 030f 	and.w	r3, r3, #15
 8005e04:	4a09      	ldr	r2, [pc, #36]	; (8005e2c <HAL_RCC_GetHCLKFreq+0x54>)
 8005e06:	5cd3      	ldrb	r3, [r2, r3]
 8005e08:	f003 031f 	and.w	r3, r3, #31
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e12:	4a07      	ldr	r2, [pc, #28]	; (8005e30 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e14:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e16:	4a07      	ldr	r2, [pc, #28]	; (8005e34 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005e1c:	4b04      	ldr	r3, [pc, #16]	; (8005e30 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	58024400 	.word	0x58024400
 8005e2c:	0801e168 	.word	0x0801e168
 8005e30:	24000004 	.word	0x24000004
 8005e34:	24000000 	.word	0x24000000

08005e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005e3c:	f7ff ffcc 	bl	8005dd8 <HAL_RCC_GetHCLKFreq>
 8005e40:	4602      	mov	r2, r0
 8005e42:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	091b      	lsrs	r3, r3, #4
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	4904      	ldr	r1, [pc, #16]	; (8005e60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e4e:	5ccb      	ldrb	r3, [r1, r3]
 8005e50:	f003 031f 	and.w	r3, r3, #31
 8005e54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	58024400 	.word	0x58024400
 8005e60:	0801e168 	.word	0x0801e168

08005e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005e68:	f7ff ffb6 	bl	8005dd8 <HAL_RCC_GetHCLKFreq>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	4b06      	ldr	r3, [pc, #24]	; (8005e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	0a1b      	lsrs	r3, r3, #8
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	4904      	ldr	r1, [pc, #16]	; (8005e8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e7a:	5ccb      	ldrb	r3, [r1, r3]
 8005e7c:	f003 031f 	and.w	r3, r3, #31
 8005e80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	58024400 	.word	0x58024400
 8005e8c:	0801e168 	.word	0x0801e168

08005e90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	223f      	movs	r2, #63	; 0x3f
 8005e9e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ea0:	4b1a      	ldr	r3, [pc, #104]	; (8005f0c <HAL_RCC_GetClockConfig+0x7c>)
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	f003 0207 	and.w	r2, r3, #7
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005eac:	4b17      	ldr	r3, [pc, #92]	; (8005f0c <HAL_RCC_GetClockConfig+0x7c>)
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005eb8:	4b14      	ldr	r3, [pc, #80]	; (8005f0c <HAL_RCC_GetClockConfig+0x7c>)
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	f003 020f 	and.w	r2, r3, #15
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005ec4:	4b11      	ldr	r3, [pc, #68]	; (8005f0c <HAL_RCC_GetClockConfig+0x7c>)
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005ed0:	4b0e      	ldr	r3, [pc, #56]	; (8005f0c <HAL_RCC_GetClockConfig+0x7c>)
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005edc:	4b0b      	ldr	r3, [pc, #44]	; (8005f0c <HAL_RCC_GetClockConfig+0x7c>)
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005ee8:	4b08      	ldr	r3, [pc, #32]	; (8005f0c <HAL_RCC_GetClockConfig+0x7c>)
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005ef4:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <HAL_RCC_GetClockConfig+0x80>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 020f 	and.w	r2, r3, #15
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	601a      	str	r2, [r3, #0]
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	58024400 	.word	0x58024400
 8005f10:	52002000 	.word	0x52002000

08005f14 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f18:	b0c6      	sub	sp, #280	; 0x118
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f20:	2300      	movs	r3, #0
 8005f22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f26:	2300      	movs	r3, #0
 8005f28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f34:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005f38:	2500      	movs	r5, #0
 8005f3a:	ea54 0305 	orrs.w	r3, r4, r5
 8005f3e:	d049      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f4a:	d02f      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005f4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f50:	d828      	bhi.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005f52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f56:	d01a      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005f58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f5c:	d822      	bhi.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f66:	d007      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f68:	e01c      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f6a:	4bab      	ldr	r3, [pc, #684]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6e:	4aaa      	ldr	r2, [pc, #680]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f76:	e01a      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7c:	3308      	adds	r3, #8
 8005f7e:	2102      	movs	r1, #2
 8005f80:	4618      	mov	r0, r3
 8005f82:	f001 fc25 	bl	80077d0 <RCCEx_PLL2_Config>
 8005f86:	4603      	mov	r3, r0
 8005f88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f8c:	e00f      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f92:	3328      	adds	r3, #40	; 0x28
 8005f94:	2102      	movs	r1, #2
 8005f96:	4618      	mov	r0, r3
 8005f98:	f001 fccc 	bl	8007934 <RCCEx_PLL3_Config>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005fa2:	e004      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005faa:	e000      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10a      	bne.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005fb6:	4b98      	ldr	r3, [pc, #608]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fc4:	4a94      	ldr	r2, [pc, #592]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005fc6:	430b      	orrs	r3, r1
 8005fc8:	6513      	str	r3, [r2, #80]	; 0x50
 8005fca:	e003      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005fd0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fdc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005fe0:	f04f 0900 	mov.w	r9, #0
 8005fe4:	ea58 0309 	orrs.w	r3, r8, r9
 8005fe8:	d047      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d82a      	bhi.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005ff4:	a201      	add	r2, pc, #4	; (adr r2, 8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffa:	bf00      	nop
 8005ffc:	08006011 	.word	0x08006011
 8006000:	0800601f 	.word	0x0800601f
 8006004:	08006035 	.word	0x08006035
 8006008:	08006053 	.word	0x08006053
 800600c:	08006053 	.word	0x08006053
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006010:	4b81      	ldr	r3, [pc, #516]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006014:	4a80      	ldr	r2, [pc, #512]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800601a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800601c:	e01a      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800601e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006022:	3308      	adds	r3, #8
 8006024:	2100      	movs	r1, #0
 8006026:	4618      	mov	r0, r3
 8006028:	f001 fbd2 	bl	80077d0 <RCCEx_PLL2_Config>
 800602c:	4603      	mov	r3, r0
 800602e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006032:	e00f      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006038:	3328      	adds	r3, #40	; 0x28
 800603a:	2100      	movs	r1, #0
 800603c:	4618      	mov	r0, r3
 800603e:	f001 fc79 	bl	8007934 <RCCEx_PLL3_Config>
 8006042:	4603      	mov	r3, r0
 8006044:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006048:	e004      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006050:	e000      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006052:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006054:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10a      	bne.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800605c:	4b6e      	ldr	r3, [pc, #440]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800605e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006060:	f023 0107 	bic.w	r1, r3, #7
 8006064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606a:	4a6b      	ldr	r2, [pc, #428]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800606c:	430b      	orrs	r3, r1
 800606e:	6513      	str	r3, [r2, #80]	; 0x50
 8006070:	e003      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006072:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006076:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800607a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800607e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006082:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8006086:	f04f 0b00 	mov.w	fp, #0
 800608a:	ea5a 030b 	orrs.w	r3, sl, fp
 800608e:	d05b      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006094:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006098:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800609c:	d03b      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800609e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80060a2:	d834      	bhi.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80060a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060a8:	d037      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80060aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060ae:	d82e      	bhi.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80060b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80060b4:	d033      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80060b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80060ba:	d828      	bhi.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80060bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060c0:	d01a      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80060c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060c6:	d822      	bhi.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80060cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060d0:	d007      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80060d2:	e01c      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060d4:	4b50      	ldr	r3, [pc, #320]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	4a4f      	ldr	r2, [pc, #316]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060e0:	e01e      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060e6:	3308      	adds	r3, #8
 80060e8:	2100      	movs	r1, #0
 80060ea:	4618      	mov	r0, r3
 80060ec:	f001 fb70 	bl	80077d0 <RCCEx_PLL2_Config>
 80060f0:	4603      	mov	r3, r0
 80060f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80060f6:	e013      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060fc:	3328      	adds	r3, #40	; 0x28
 80060fe:	2100      	movs	r1, #0
 8006100:	4618      	mov	r0, r3
 8006102:	f001 fc17 	bl	8007934 <RCCEx_PLL3_Config>
 8006106:	4603      	mov	r3, r0
 8006108:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800610c:	e008      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006114:	e004      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006116:	bf00      	nop
 8006118:	e002      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800611a:	bf00      	nop
 800611c:	e000      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800611e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006120:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10b      	bne.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006128:	4b3b      	ldr	r3, [pc, #236]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800612a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006134:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006138:	4a37      	ldr	r2, [pc, #220]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800613a:	430b      	orrs	r3, r1
 800613c:	6593      	str	r3, [r2, #88]	; 0x58
 800613e:	e003      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006140:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006144:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006150:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006154:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006158:	2300      	movs	r3, #0
 800615a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800615e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006162:	460b      	mov	r3, r1
 8006164:	4313      	orrs	r3, r2
 8006166:	d05d      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800616c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006170:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006174:	d03b      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006176:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800617a:	d834      	bhi.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800617c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006180:	d037      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006182:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006186:	d82e      	bhi.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006188:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800618c:	d033      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800618e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006192:	d828      	bhi.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006194:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006198:	d01a      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800619a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800619e:	d822      	bhi.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x298>
 80061a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061a8:	d007      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80061aa:	e01c      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061ac:	4b1a      	ldr	r3, [pc, #104]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	4a19      	ldr	r2, [pc, #100]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061b8:	e01e      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061be:	3308      	adds	r3, #8
 80061c0:	2100      	movs	r1, #0
 80061c2:	4618      	mov	r0, r3
 80061c4:	f001 fb04 	bl	80077d0 <RCCEx_PLL2_Config>
 80061c8:	4603      	mov	r3, r0
 80061ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80061ce:	e013      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d4:	3328      	adds	r3, #40	; 0x28
 80061d6:	2100      	movs	r1, #0
 80061d8:	4618      	mov	r0, r3
 80061da:	f001 fbab 	bl	8007934 <RCCEx_PLL3_Config>
 80061de:	4603      	mov	r3, r0
 80061e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061e4:	e008      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80061ec:	e004      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80061ee:	bf00      	nop
 80061f0:	e002      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80061f2:	bf00      	nop
 80061f4:	e000      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80061f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10d      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006200:	4b05      	ldr	r3, [pc, #20]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006204:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800620c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006210:	4a01      	ldr	r2, [pc, #4]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006212:	430b      	orrs	r3, r1
 8006214:	6593      	str	r3, [r2, #88]	; 0x58
 8006216:	e005      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006218:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800621c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006220:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006230:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006234:	2300      	movs	r3, #0
 8006236:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800623a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800623e:	460b      	mov	r3, r1
 8006240:	4313      	orrs	r3, r2
 8006242:	d03a      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800624a:	2b30      	cmp	r3, #48	; 0x30
 800624c:	d01f      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800624e:	2b30      	cmp	r3, #48	; 0x30
 8006250:	d819      	bhi.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006252:	2b20      	cmp	r3, #32
 8006254:	d00c      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006256:	2b20      	cmp	r3, #32
 8006258:	d815      	bhi.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800625a:	2b00      	cmp	r3, #0
 800625c:	d019      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800625e:	2b10      	cmp	r3, #16
 8006260:	d111      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006262:	4baa      	ldr	r3, [pc, #680]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006266:	4aa9      	ldr	r2, [pc, #676]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800626c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800626e:	e011      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006274:	3308      	adds	r3, #8
 8006276:	2102      	movs	r1, #2
 8006278:	4618      	mov	r0, r3
 800627a:	f001 faa9 	bl	80077d0 <RCCEx_PLL2_Config>
 800627e:	4603      	mov	r3, r0
 8006280:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006284:	e006      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800628c:	e002      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800628e:	bf00      	nop
 8006290:	e000      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006292:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006294:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10a      	bne.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800629c:	4b9b      	ldr	r3, [pc, #620]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800629e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062a0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80062a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062aa:	4a98      	ldr	r2, [pc, #608]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062ac:	430b      	orrs	r3, r1
 80062ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062b0:	e003      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80062ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80062c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062ca:	2300      	movs	r3, #0
 80062cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062d0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80062d4:	460b      	mov	r3, r1
 80062d6:	4313      	orrs	r3, r2
 80062d8:	d051      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80062da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062e4:	d035      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80062e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062ea:	d82e      	bhi.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80062ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062f0:	d031      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80062f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062f6:	d828      	bhi.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80062f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062fc:	d01a      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80062fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006302:	d822      	bhi.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800630c:	d007      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800630e:	e01c      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006310:	4b7e      	ldr	r3, [pc, #504]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	4a7d      	ldr	r2, [pc, #500]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800631a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800631c:	e01c      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800631e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006322:	3308      	adds	r3, #8
 8006324:	2100      	movs	r1, #0
 8006326:	4618      	mov	r0, r3
 8006328:	f001 fa52 	bl	80077d0 <RCCEx_PLL2_Config>
 800632c:	4603      	mov	r3, r0
 800632e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006332:	e011      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006338:	3328      	adds	r3, #40	; 0x28
 800633a:	2100      	movs	r1, #0
 800633c:	4618      	mov	r0, r3
 800633e:	f001 faf9 	bl	8007934 <RCCEx_PLL3_Config>
 8006342:	4603      	mov	r3, r0
 8006344:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006348:	e006      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006350:	e002      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006352:	bf00      	nop
 8006354:	e000      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006356:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006358:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10a      	bne.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006360:	4b6a      	ldr	r3, [pc, #424]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006364:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800636c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800636e:	4a67      	ldr	r2, [pc, #412]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006370:	430b      	orrs	r3, r1
 8006372:	6513      	str	r3, [r2, #80]	; 0x50
 8006374:	e003      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006376:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800637a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800637e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006386:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800638a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800638e:	2300      	movs	r3, #0
 8006390:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006394:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006398:	460b      	mov	r3, r1
 800639a:	4313      	orrs	r3, r2
 800639c:	d053      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800639e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063a8:	d033      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80063aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063ae:	d82c      	bhi.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80063b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063b4:	d02f      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80063b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063ba:	d826      	bhi.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80063bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063c0:	d02b      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80063c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063c6:	d820      	bhi.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80063c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063cc:	d012      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80063ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063d2:	d81a      	bhi.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d022      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80063d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063dc:	d115      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e2:	3308      	adds	r3, #8
 80063e4:	2101      	movs	r1, #1
 80063e6:	4618      	mov	r0, r3
 80063e8:	f001 f9f2 	bl	80077d0 <RCCEx_PLL2_Config>
 80063ec:	4603      	mov	r3, r0
 80063ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80063f2:	e015      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063f8:	3328      	adds	r3, #40	; 0x28
 80063fa:	2101      	movs	r1, #1
 80063fc:	4618      	mov	r0, r3
 80063fe:	f001 fa99 	bl	8007934 <RCCEx_PLL3_Config>
 8006402:	4603      	mov	r3, r0
 8006404:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006408:	e00a      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006410:	e006      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006412:	bf00      	nop
 8006414:	e004      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006416:	bf00      	nop
 8006418:	e002      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800641a:	bf00      	nop
 800641c:	e000      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800641e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006420:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10a      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006428:	4b38      	ldr	r3, [pc, #224]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800642a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800642c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006436:	4a35      	ldr	r2, [pc, #212]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006438:	430b      	orrs	r3, r1
 800643a:	6513      	str	r3, [r2, #80]	; 0x50
 800643c:	e003      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800643e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006442:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800644a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006452:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006456:	2300      	movs	r3, #0
 8006458:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800645c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006460:	460b      	mov	r3, r1
 8006462:	4313      	orrs	r3, r2
 8006464:	d058      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800646a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800646e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006472:	d033      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006474:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006478:	d82c      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800647a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800647e:	d02f      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006484:	d826      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006486:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800648a:	d02b      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800648c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006490:	d820      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006496:	d012      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800649c:	d81a      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d022      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80064a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064a6:	d115      	bne.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ac:	3308      	adds	r3, #8
 80064ae:	2101      	movs	r1, #1
 80064b0:	4618      	mov	r0, r3
 80064b2:	f001 f98d 	bl	80077d0 <RCCEx_PLL2_Config>
 80064b6:	4603      	mov	r3, r0
 80064b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80064bc:	e015      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c2:	3328      	adds	r3, #40	; 0x28
 80064c4:	2101      	movs	r1, #1
 80064c6:	4618      	mov	r0, r3
 80064c8:	f001 fa34 	bl	8007934 <RCCEx_PLL3_Config>
 80064cc:	4603      	mov	r3, r0
 80064ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80064d2:	e00a      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80064da:	e006      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064dc:	bf00      	nop
 80064de:	e004      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064e0:	bf00      	nop
 80064e2:	e002      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064e4:	bf00      	nop
 80064e6:	e000      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10e      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80064f2:	4b06      	ldr	r3, [pc, #24]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80064fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006502:	4a02      	ldr	r2, [pc, #8]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006504:	430b      	orrs	r3, r1
 8006506:	6593      	str	r3, [r2, #88]	; 0x58
 8006508:	e006      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800650a:	bf00      	nop
 800650c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006510:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006514:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800651c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006520:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006524:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006528:	2300      	movs	r3, #0
 800652a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800652e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006532:	460b      	mov	r3, r1
 8006534:	4313      	orrs	r3, r2
 8006536:	d037      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800653c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800653e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006542:	d00e      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006544:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006548:	d816      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800654a:	2b00      	cmp	r3, #0
 800654c:	d018      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800654e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006552:	d111      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006554:	4bc4      	ldr	r3, [pc, #784]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	4ac3      	ldr	r2, [pc, #780]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800655a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800655e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006560:	e00f      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006566:	3308      	adds	r3, #8
 8006568:	2101      	movs	r1, #1
 800656a:	4618      	mov	r0, r3
 800656c:	f001 f930 	bl	80077d0 <RCCEx_PLL2_Config>
 8006570:	4603      	mov	r3, r0
 8006572:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006576:	e004      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800657e:	e000      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006582:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10a      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800658a:	4bb7      	ldr	r3, [pc, #732]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800658c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800658e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006598:	4ab3      	ldr	r2, [pc, #716]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800659a:	430b      	orrs	r3, r1
 800659c:	6513      	str	r3, [r2, #80]	; 0x50
 800659e:	e003      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80065a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80065b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065b8:	2300      	movs	r3, #0
 80065ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80065c2:	460b      	mov	r3, r1
 80065c4:	4313      	orrs	r3, r2
 80065c6:	d039      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80065c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d81c      	bhi.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80065d2:	a201      	add	r2, pc, #4	; (adr r2, 80065d8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80065d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d8:	08006615 	.word	0x08006615
 80065dc:	080065e9 	.word	0x080065e9
 80065e0:	080065f7 	.word	0x080065f7
 80065e4:	08006615 	.word	0x08006615
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065e8:	4b9f      	ldr	r3, [pc, #636]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ec:	4a9e      	ldr	r2, [pc, #632]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80065f4:	e00f      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065fa:	3308      	adds	r3, #8
 80065fc:	2102      	movs	r1, #2
 80065fe:	4618      	mov	r0, r3
 8006600:	f001 f8e6 	bl	80077d0 <RCCEx_PLL2_Config>
 8006604:	4603      	mov	r3, r0
 8006606:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800660a:	e004      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006612:	e000      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006616:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10a      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800661e:	4b92      	ldr	r3, [pc, #584]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006622:	f023 0103 	bic.w	r1, r3, #3
 8006626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800662a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800662c:	4a8e      	ldr	r2, [pc, #568]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800662e:	430b      	orrs	r3, r1
 8006630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006632:	e003      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006634:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006638:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800663c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006644:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006648:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800664c:	2300      	movs	r3, #0
 800664e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006652:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006656:	460b      	mov	r3, r1
 8006658:	4313      	orrs	r3, r2
 800665a:	f000 8099 	beq.w	8006790 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800665e:	4b83      	ldr	r3, [pc, #524]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a82      	ldr	r2, [pc, #520]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006668:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800666a:	f7fb fe6d 	bl	8002348 <HAL_GetTick>
 800666e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006672:	e00b      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006674:	f7fb fe68 	bl	8002348 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	2b64      	cmp	r3, #100	; 0x64
 8006682:	d903      	bls.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800668a:	e005      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800668c:	4b77      	ldr	r3, [pc, #476]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006694:	2b00      	cmp	r3, #0
 8006696:	d0ed      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006698:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800669c:	2b00      	cmp	r3, #0
 800669e:	d173      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80066a0:	4b71      	ldr	r3, [pc, #452]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066ac:	4053      	eors	r3, r2
 80066ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d015      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066b6:	4b6c      	ldr	r3, [pc, #432]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066c2:	4b69      	ldr	r3, [pc, #420]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c6:	4a68      	ldr	r2, [pc, #416]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066cc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066ce:	4b66      	ldr	r3, [pc, #408]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d2:	4a65      	ldr	r2, [pc, #404]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066d8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80066da:	4a63      	ldr	r2, [pc, #396]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066e0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80066e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ee:	d118      	bne.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f0:	f7fb fe2a 	bl	8002348 <HAL_GetTick>
 80066f4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066f8:	e00d      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066fa:	f7fb fe25 	bl	8002348 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006704:	1ad2      	subs	r2, r2, r3
 8006706:	f241 3388 	movw	r3, #5000	; 0x1388
 800670a:	429a      	cmp	r2, r3
 800670c:	d903      	bls.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8006714:	e005      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006716:	4b54      	ldr	r3, [pc, #336]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d0eb      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006722:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006726:	2b00      	cmp	r3, #0
 8006728:	d129      	bne.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800672a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800672e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800673a:	d10e      	bne.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800673c:	4b4a      	ldr	r3, [pc, #296]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006748:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800674c:	091a      	lsrs	r2, r3, #4
 800674e:	4b48      	ldr	r3, [pc, #288]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006750:	4013      	ands	r3, r2
 8006752:	4a45      	ldr	r2, [pc, #276]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006754:	430b      	orrs	r3, r1
 8006756:	6113      	str	r3, [r2, #16]
 8006758:	e005      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800675a:	4b43      	ldr	r3, [pc, #268]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	4a42      	ldr	r2, [pc, #264]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006760:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006764:	6113      	str	r3, [r2, #16]
 8006766:	4b40      	ldr	r3, [pc, #256]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006768:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800676a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800676e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006776:	4a3c      	ldr	r2, [pc, #240]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006778:	430b      	orrs	r3, r1
 800677a:	6713      	str	r3, [r2, #112]	; 0x70
 800677c:	e008      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800677e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006782:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8006786:	e003      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006788:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800678c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006798:	f002 0301 	and.w	r3, r2, #1
 800679c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067a0:	2300      	movs	r3, #0
 80067a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80067a6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80067aa:	460b      	mov	r3, r1
 80067ac:	4313      	orrs	r3, r2
 80067ae:	f000 808f 	beq.w	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80067b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067b8:	2b28      	cmp	r3, #40	; 0x28
 80067ba:	d871      	bhi.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80067bc:	a201      	add	r2, pc, #4	; (adr r2, 80067c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80067be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c2:	bf00      	nop
 80067c4:	080068a9 	.word	0x080068a9
 80067c8:	080068a1 	.word	0x080068a1
 80067cc:	080068a1 	.word	0x080068a1
 80067d0:	080068a1 	.word	0x080068a1
 80067d4:	080068a1 	.word	0x080068a1
 80067d8:	080068a1 	.word	0x080068a1
 80067dc:	080068a1 	.word	0x080068a1
 80067e0:	080068a1 	.word	0x080068a1
 80067e4:	08006875 	.word	0x08006875
 80067e8:	080068a1 	.word	0x080068a1
 80067ec:	080068a1 	.word	0x080068a1
 80067f0:	080068a1 	.word	0x080068a1
 80067f4:	080068a1 	.word	0x080068a1
 80067f8:	080068a1 	.word	0x080068a1
 80067fc:	080068a1 	.word	0x080068a1
 8006800:	080068a1 	.word	0x080068a1
 8006804:	0800688b 	.word	0x0800688b
 8006808:	080068a1 	.word	0x080068a1
 800680c:	080068a1 	.word	0x080068a1
 8006810:	080068a1 	.word	0x080068a1
 8006814:	080068a1 	.word	0x080068a1
 8006818:	080068a1 	.word	0x080068a1
 800681c:	080068a1 	.word	0x080068a1
 8006820:	080068a1 	.word	0x080068a1
 8006824:	080068a9 	.word	0x080068a9
 8006828:	080068a1 	.word	0x080068a1
 800682c:	080068a1 	.word	0x080068a1
 8006830:	080068a1 	.word	0x080068a1
 8006834:	080068a1 	.word	0x080068a1
 8006838:	080068a1 	.word	0x080068a1
 800683c:	080068a1 	.word	0x080068a1
 8006840:	080068a1 	.word	0x080068a1
 8006844:	080068a9 	.word	0x080068a9
 8006848:	080068a1 	.word	0x080068a1
 800684c:	080068a1 	.word	0x080068a1
 8006850:	080068a1 	.word	0x080068a1
 8006854:	080068a1 	.word	0x080068a1
 8006858:	080068a1 	.word	0x080068a1
 800685c:	080068a1 	.word	0x080068a1
 8006860:	080068a1 	.word	0x080068a1
 8006864:	080068a9 	.word	0x080068a9
 8006868:	58024400 	.word	0x58024400
 800686c:	58024800 	.word	0x58024800
 8006870:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006878:	3308      	adds	r3, #8
 800687a:	2101      	movs	r1, #1
 800687c:	4618      	mov	r0, r3
 800687e:	f000 ffa7 	bl	80077d0 <RCCEx_PLL2_Config>
 8006882:	4603      	mov	r3, r0
 8006884:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006888:	e00f      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800688a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800688e:	3328      	adds	r3, #40	; 0x28
 8006890:	2101      	movs	r1, #1
 8006892:	4618      	mov	r0, r3
 8006894:	f001 f84e 	bl	8007934 <RCCEx_PLL3_Config>
 8006898:	4603      	mov	r3, r0
 800689a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800689e:	e004      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80068a6:	e000      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80068a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10a      	bne.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80068b2:	4bbf      	ldr	r3, [pc, #764]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80068b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80068ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068c0:	4abb      	ldr	r2, [pc, #748]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80068c2:	430b      	orrs	r3, r1
 80068c4:	6553      	str	r3, [r2, #84]	; 0x54
 80068c6:	e003      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80068d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d8:	f002 0302 	and.w	r3, r2, #2
 80068dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068e0:	2300      	movs	r3, #0
 80068e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80068ea:	460b      	mov	r3, r1
 80068ec:	4313      	orrs	r3, r2
 80068ee:	d041      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80068f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f6:	2b05      	cmp	r3, #5
 80068f8:	d824      	bhi.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80068fa:	a201      	add	r2, pc, #4	; (adr r2, 8006900 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80068fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006900:	0800694d 	.word	0x0800694d
 8006904:	08006919 	.word	0x08006919
 8006908:	0800692f 	.word	0x0800692f
 800690c:	0800694d 	.word	0x0800694d
 8006910:	0800694d 	.word	0x0800694d
 8006914:	0800694d 	.word	0x0800694d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800691c:	3308      	adds	r3, #8
 800691e:	2101      	movs	r1, #1
 8006920:	4618      	mov	r0, r3
 8006922:	f000 ff55 	bl	80077d0 <RCCEx_PLL2_Config>
 8006926:	4603      	mov	r3, r0
 8006928:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800692c:	e00f      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800692e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006932:	3328      	adds	r3, #40	; 0x28
 8006934:	2101      	movs	r1, #1
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fffc 	bl	8007934 <RCCEx_PLL3_Config>
 800693c:	4603      	mov	r3, r0
 800693e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006942:	e004      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800694a:	e000      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800694c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800694e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10a      	bne.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006956:	4b96      	ldr	r3, [pc, #600]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695a:	f023 0107 	bic.w	r1, r3, #7
 800695e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006964:	4a92      	ldr	r2, [pc, #584]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006966:	430b      	orrs	r3, r1
 8006968:	6553      	str	r3, [r2, #84]	; 0x54
 800696a:	e003      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800696c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006970:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697c:	f002 0304 	and.w	r3, r2, #4
 8006980:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006984:	2300      	movs	r3, #0
 8006986:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800698a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800698e:	460b      	mov	r3, r1
 8006990:	4313      	orrs	r3, r2
 8006992:	d044      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800699c:	2b05      	cmp	r3, #5
 800699e:	d825      	bhi.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80069a0:	a201      	add	r2, pc, #4	; (adr r2, 80069a8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80069a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a6:	bf00      	nop
 80069a8:	080069f5 	.word	0x080069f5
 80069ac:	080069c1 	.word	0x080069c1
 80069b0:	080069d7 	.word	0x080069d7
 80069b4:	080069f5 	.word	0x080069f5
 80069b8:	080069f5 	.word	0x080069f5
 80069bc:	080069f5 	.word	0x080069f5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069c4:	3308      	adds	r3, #8
 80069c6:	2101      	movs	r1, #1
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 ff01 	bl	80077d0 <RCCEx_PLL2_Config>
 80069ce:	4603      	mov	r3, r0
 80069d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80069d4:	e00f      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069da:	3328      	adds	r3, #40	; 0x28
 80069dc:	2101      	movs	r1, #1
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 ffa8 	bl	8007934 <RCCEx_PLL3_Config>
 80069e4:	4603      	mov	r3, r0
 80069e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80069ea:	e004      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80069f2:	e000      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80069f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10b      	bne.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069fe:	4b6c      	ldr	r3, [pc, #432]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a02:	f023 0107 	bic.w	r1, r3, #7
 8006a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a0e:	4a68      	ldr	r2, [pc, #416]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a10:	430b      	orrs	r3, r1
 8006a12:	6593      	str	r3, [r2, #88]	; 0x58
 8006a14:	e003      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a1a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a26:	f002 0320 	and.w	r3, r2, #32
 8006a2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a34:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	d055      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a4a:	d033      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a50:	d82c      	bhi.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a56:	d02f      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a5c:	d826      	bhi.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006a5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a62:	d02b      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006a64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a68:	d820      	bhi.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006a6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a6e:	d012      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a74:	d81a      	bhi.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d022      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006a7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a7e:	d115      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a84:	3308      	adds	r3, #8
 8006a86:	2100      	movs	r1, #0
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 fea1 	bl	80077d0 <RCCEx_PLL2_Config>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006a94:	e015      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a9a:	3328      	adds	r3, #40	; 0x28
 8006a9c:	2102      	movs	r1, #2
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 ff48 	bl	8007934 <RCCEx_PLL3_Config>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006aaa:	e00a      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006ab2:	e006      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006ab4:	bf00      	nop
 8006ab6:	e004      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006ab8:	bf00      	nop
 8006aba:	e002      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006abc:	bf00      	nop
 8006abe:	e000      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ac2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10b      	bne.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006aca:	4b39      	ldr	r3, [pc, #228]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ace:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ada:	4a35      	ldr	r2, [pc, #212]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006adc:	430b      	orrs	r3, r1
 8006ade:	6553      	str	r3, [r2, #84]	; 0x54
 8006ae0:	e003      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ae6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006af6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006afa:	2300      	movs	r3, #0
 8006afc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b00:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006b04:	460b      	mov	r3, r1
 8006b06:	4313      	orrs	r3, r2
 8006b08:	d058      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b12:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b16:	d033      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006b18:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b1c:	d82c      	bhi.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b22:	d02f      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b28:	d826      	bhi.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006b2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b2e:	d02b      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006b30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b34:	d820      	bhi.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b3a:	d012      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b40:	d81a      	bhi.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d022      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b4a:	d115      	bne.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b50:	3308      	adds	r3, #8
 8006b52:	2100      	movs	r1, #0
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 fe3b 	bl	80077d0 <RCCEx_PLL2_Config>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006b60:	e015      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b66:	3328      	adds	r3, #40	; 0x28
 8006b68:	2102      	movs	r1, #2
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fee2 	bl	8007934 <RCCEx_PLL3_Config>
 8006b70:	4603      	mov	r3, r0
 8006b72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006b76:	e00a      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b7e:	e006      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006b80:	bf00      	nop
 8006b82:	e004      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006b84:	bf00      	nop
 8006b86:	e002      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006b88:	bf00      	nop
 8006b8a:	e000      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10e      	bne.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b96:	4b06      	ldr	r3, [pc, #24]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b9a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ba6:	4a02      	ldr	r2, [pc, #8]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ba8:	430b      	orrs	r3, r1
 8006baa:	6593      	str	r3, [r2, #88]	; 0x58
 8006bac:	e006      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006bae:	bf00      	nop
 8006bb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006bb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006bc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006bcc:	2300      	movs	r3, #0
 8006bce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006bd2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	d055      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006be4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006be8:	d033      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006bea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006bee:	d82c      	bhi.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bf4:	d02f      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bfa:	d826      	bhi.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006bfc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c00:	d02b      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006c02:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c06:	d820      	bhi.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006c08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c0c:	d012      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006c0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c12:	d81a      	bhi.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d022      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c1c:	d115      	bne.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c22:	3308      	adds	r3, #8
 8006c24:	2100      	movs	r1, #0
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 fdd2 	bl	80077d0 <RCCEx_PLL2_Config>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c32:	e015      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c38:	3328      	adds	r3, #40	; 0x28
 8006c3a:	2102      	movs	r1, #2
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 fe79 	bl	8007934 <RCCEx_PLL3_Config>
 8006c42:	4603      	mov	r3, r0
 8006c44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c48:	e00a      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006c50:	e006      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006c52:	bf00      	nop
 8006c54:	e004      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006c56:	bf00      	nop
 8006c58:	e002      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006c5a:	bf00      	nop
 8006c5c:	e000      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006c5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10b      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006c68:	4ba0      	ldr	r3, [pc, #640]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c6c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c78:	4a9c      	ldr	r2, [pc, #624]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c7a:	430b      	orrs	r3, r1
 8006c7c:	6593      	str	r3, [r2, #88]	; 0x58
 8006c7e:	e003      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c90:	f002 0308 	and.w	r3, r2, #8
 8006c94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c98:	2300      	movs	r3, #0
 8006c9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006c9e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	d01e      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb4:	d10c      	bne.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cba:	3328      	adds	r3, #40	; 0x28
 8006cbc:	2102      	movs	r1, #2
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 fe38 	bl	8007934 <RCCEx_PLL3_Config>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d002      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006cd0:	4b86      	ldr	r3, [pc, #536]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ce0:	4a82      	ldr	r2, [pc, #520]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ce2:	430b      	orrs	r3, r1
 8006ce4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	f002 0310 	and.w	r3, r2, #16
 8006cf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006cfc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006d00:	460b      	mov	r3, r1
 8006d02:	4313      	orrs	r3, r2
 8006d04:	d01e      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d12:	d10c      	bne.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d18:	3328      	adds	r3, #40	; 0x28
 8006d1a:	2102      	movs	r1, #2
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 fe09 	bl	8007934 <RCCEx_PLL3_Config>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d002      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d2e:	4b6f      	ldr	r3, [pc, #444]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d3e:	4a6b      	ldr	r2, [pc, #428]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d40:	430b      	orrs	r3, r1
 8006d42:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006d50:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d52:	2300      	movs	r3, #0
 8006d54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d56:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	d03e      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d6c:	d022      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006d6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d72:	d81b      	bhi.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d7c:	d00b      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006d7e:	e015      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d84:	3308      	adds	r3, #8
 8006d86:	2100      	movs	r1, #0
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f000 fd21 	bl	80077d0 <RCCEx_PLL2_Config>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006d94:	e00f      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d9a:	3328      	adds	r3, #40	; 0x28
 8006d9c:	2102      	movs	r1, #2
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 fdc8 	bl	8007934 <RCCEx_PLL3_Config>
 8006da4:	4603      	mov	r3, r0
 8006da6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006daa:	e004      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006db2:	e000      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006db6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10b      	bne.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dbe:	4b4b      	ldr	r3, [pc, #300]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006dce:	4a47      	ldr	r2, [pc, #284]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dd0:	430b      	orrs	r3, r1
 8006dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8006dd4:	e003      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006dda:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006dea:	673b      	str	r3, [r7, #112]	; 0x70
 8006dec:	2300      	movs	r3, #0
 8006dee:	677b      	str	r3, [r7, #116]	; 0x74
 8006df0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006df4:	460b      	mov	r3, r1
 8006df6:	4313      	orrs	r3, r2
 8006df8:	d03b      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e06:	d01f      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006e08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e0c:	d818      	bhi.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e12:	d003      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006e14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e18:	d007      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006e1a:	e011      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e1c:	4b33      	ldr	r3, [pc, #204]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e20:	4a32      	ldr	r2, [pc, #200]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e28:	e00f      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e2e:	3328      	adds	r3, #40	; 0x28
 8006e30:	2101      	movs	r1, #1
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fd7e 	bl	8007934 <RCCEx_PLL3_Config>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e3e:	e004      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006e46:	e000      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e4a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10b      	bne.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e52:	4b26      	ldr	r3, [pc, #152]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e56:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e62:	4a22      	ldr	r2, [pc, #136]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e64:	430b      	orrs	r3, r1
 8006e66:	6553      	str	r3, [r2, #84]	; 0x54
 8006e68:	e003      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e6e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006e7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e80:	2300      	movs	r3, #0
 8006e82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e84:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	d034      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d003      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e9c:	d007      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006e9e:	e011      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ea0:	4b12      	ldr	r3, [pc, #72]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea4:	4a11      	ldr	r2, [pc, #68]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006eac:	e00e      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb2:	3308      	adds	r3, #8
 8006eb4:	2102      	movs	r1, #2
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 fc8a 	bl	80077d0 <RCCEx_PLL2_Config>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ec2:	e003      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10d      	bne.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006ed4:	4b05      	ldr	r3, [pc, #20]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee2:	4a02      	ldr	r2, [pc, #8]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ee4:	430b      	orrs	r3, r1
 8006ee6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ee8:	e006      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006eea:	bf00      	nop
 8006eec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ef4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006f04:	663b      	str	r3, [r7, #96]	; 0x60
 8006f06:	2300      	movs	r3, #0
 8006f08:	667b      	str	r3, [r7, #100]	; 0x64
 8006f0a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4313      	orrs	r3, r2
 8006f12:	d00c      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f18:	3328      	adds	r3, #40	; 0x28
 8006f1a:	2102      	movs	r1, #2
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f000 fd09 	bl	8007934 <RCCEx_PLL3_Config>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f36:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006f3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f40:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006f44:	460b      	mov	r3, r1
 8006f46:	4313      	orrs	r3, r2
 8006f48:	d036      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f54:	d018      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f5a:	d811      	bhi.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f60:	d014      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f66:	d80b      	bhi.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d011      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f70:	d106      	bne.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f72:	4bb7      	ldr	r3, [pc, #732]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f76:	4ab6      	ldr	r2, [pc, #728]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006f7e:	e008      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006f86:	e004      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006f88:	bf00      	nop
 8006f8a:	e002      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006f8c:	bf00      	nop
 8006f8e:	e000      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10a      	bne.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f9a:	4bad      	ldr	r3, [pc, #692]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fa8:	4aa9      	ldr	r2, [pc, #676]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006faa:	430b      	orrs	r3, r1
 8006fac:	6553      	str	r3, [r2, #84]	; 0x54
 8006fae:	e003      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006fb4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006fc4:	653b      	str	r3, [r7, #80]	; 0x50
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	657b      	str	r3, [r7, #84]	; 0x54
 8006fca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006fce:	460b      	mov	r3, r1
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	d009      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006fd4:	4b9e      	ldr	r3, [pc, #632]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fd8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe2:	4a9b      	ldr	r2, [pc, #620]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fe4:	430b      	orrs	r3, r1
 8006fe6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006ff4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ffa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006ffe:	460b      	mov	r3, r1
 8007000:	4313      	orrs	r3, r2
 8007002:	d009      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007004:	4b92      	ldr	r3, [pc, #584]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007008:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800700c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007012:	4a8f      	ldr	r2, [pc, #572]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007014:	430b      	orrs	r3, r1
 8007016:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800701c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007020:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007024:	643b      	str	r3, [r7, #64]	; 0x40
 8007026:	2300      	movs	r3, #0
 8007028:	647b      	str	r3, [r7, #68]	; 0x44
 800702a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800702e:	460b      	mov	r3, r1
 8007030:	4313      	orrs	r3, r2
 8007032:	d00e      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007034:	4b86      	ldr	r3, [pc, #536]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	4a85      	ldr	r2, [pc, #532]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800703a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800703e:	6113      	str	r3, [r2, #16]
 8007040:	4b83      	ldr	r3, [pc, #524]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007042:	6919      	ldr	r1, [r3, #16]
 8007044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007048:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800704c:	4a80      	ldr	r2, [pc, #512]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800704e:	430b      	orrs	r3, r1
 8007050:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800705e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007060:	2300      	movs	r3, #0
 8007062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007064:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007068:	460b      	mov	r3, r1
 800706a:	4313      	orrs	r3, r2
 800706c:	d009      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800706e:	4b78      	ldr	r3, [pc, #480]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007072:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800707a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707c:	4a74      	ldr	r2, [pc, #464]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800707e:	430b      	orrs	r3, r1
 8007080:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800708e:	633b      	str	r3, [r7, #48]	; 0x30
 8007090:	2300      	movs	r3, #0
 8007092:	637b      	str	r3, [r7, #52]	; 0x34
 8007094:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007098:	460b      	mov	r3, r1
 800709a:	4313      	orrs	r3, r2
 800709c:	d00a      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800709e:	4b6c      	ldr	r3, [pc, #432]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80070a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ae:	4a68      	ldr	r2, [pc, #416]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070b0:	430b      	orrs	r3, r1
 80070b2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80070b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070bc:	2100      	movs	r1, #0
 80070be:	62b9      	str	r1, [r7, #40]	; 0x28
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070c6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80070ca:	460b      	mov	r3, r1
 80070cc:	4313      	orrs	r3, r2
 80070ce:	d011      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d4:	3308      	adds	r3, #8
 80070d6:	2100      	movs	r1, #0
 80070d8:	4618      	mov	r0, r3
 80070da:	f000 fb79 	bl	80077d0 <RCCEx_PLL2_Config>
 80070de:	4603      	mov	r3, r0
 80070e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80070e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d003      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80070f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fc:	2100      	movs	r1, #0
 80070fe:	6239      	str	r1, [r7, #32]
 8007100:	f003 0302 	and.w	r3, r3, #2
 8007104:	627b      	str	r3, [r7, #36]	; 0x24
 8007106:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800710a:	460b      	mov	r3, r1
 800710c:	4313      	orrs	r3, r2
 800710e:	d011      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007114:	3308      	adds	r3, #8
 8007116:	2101      	movs	r1, #1
 8007118:	4618      	mov	r0, r3
 800711a:	f000 fb59 	bl	80077d0 <RCCEx_PLL2_Config>
 800711e:	4603      	mov	r3, r0
 8007120:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007124:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800712c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007130:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713c:	2100      	movs	r1, #0
 800713e:	61b9      	str	r1, [r7, #24]
 8007140:	f003 0304 	and.w	r3, r3, #4
 8007144:	61fb      	str	r3, [r7, #28]
 8007146:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800714a:	460b      	mov	r3, r1
 800714c:	4313      	orrs	r3, r2
 800714e:	d011      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007154:	3308      	adds	r3, #8
 8007156:	2102      	movs	r1, #2
 8007158:	4618      	mov	r0, r3
 800715a:	f000 fb39 	bl	80077d0 <RCCEx_PLL2_Config>
 800715e:	4603      	mov	r3, r0
 8007160:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007164:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800716c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007170:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717c:	2100      	movs	r1, #0
 800717e:	6139      	str	r1, [r7, #16]
 8007180:	f003 0308 	and.w	r3, r3, #8
 8007184:	617b      	str	r3, [r7, #20]
 8007186:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800718a:	460b      	mov	r3, r1
 800718c:	4313      	orrs	r3, r2
 800718e:	d011      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007194:	3328      	adds	r3, #40	; 0x28
 8007196:	2100      	movs	r1, #0
 8007198:	4618      	mov	r0, r3
 800719a:	f000 fbcb 	bl	8007934 <RCCEx_PLL3_Config>
 800719e:	4603      	mov	r3, r0
 80071a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80071a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d003      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80071b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071bc:	2100      	movs	r1, #0
 80071be:	60b9      	str	r1, [r7, #8]
 80071c0:	f003 0310 	and.w	r3, r3, #16
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80071ca:	460b      	mov	r3, r1
 80071cc:	4313      	orrs	r3, r2
 80071ce:	d011      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d4:	3328      	adds	r3, #40	; 0x28
 80071d6:	2101      	movs	r1, #1
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 fbab 	bl	8007934 <RCCEx_PLL3_Config>
 80071de:	4603      	mov	r3, r0
 80071e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80071e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80071f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fc:	2100      	movs	r1, #0
 80071fe:	6039      	str	r1, [r7, #0]
 8007200:	f003 0320 	and.w	r3, r3, #32
 8007204:	607b      	str	r3, [r7, #4]
 8007206:	e9d7 1200 	ldrd	r1, r2, [r7]
 800720a:	460b      	mov	r3, r1
 800720c:	4313      	orrs	r3, r2
 800720e:	d011      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007214:	3328      	adds	r3, #40	; 0x28
 8007216:	2102      	movs	r1, #2
 8007218:	4618      	mov	r0, r3
 800721a:	f000 fb8b 	bl	8007934 <RCCEx_PLL3_Config>
 800721e:	4603      	mov	r3, r0
 8007220:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007224:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007230:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8007234:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8007238:	2b00      	cmp	r3, #0
 800723a:	d101      	bne.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800723c:	2300      	movs	r3, #0
 800723e:	e000      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
}
 8007242:	4618      	mov	r0, r3
 8007244:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007248:	46bd      	mov	sp, r7
 800724a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800724e:	bf00      	nop
 8007250:	58024400 	.word	0x58024400

08007254 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007258:	f7fe fdbe 	bl	8005dd8 <HAL_RCC_GetHCLKFreq>
 800725c:	4602      	mov	r2, r0
 800725e:	4b06      	ldr	r3, [pc, #24]	; (8007278 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	091b      	lsrs	r3, r3, #4
 8007264:	f003 0307 	and.w	r3, r3, #7
 8007268:	4904      	ldr	r1, [pc, #16]	; (800727c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800726a:	5ccb      	ldrb	r3, [r1, r3]
 800726c:	f003 031f 	and.w	r3, r3, #31
 8007270:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007274:	4618      	mov	r0, r3
 8007276:	bd80      	pop	{r7, pc}
 8007278:	58024400 	.word	0x58024400
 800727c:	0801e168 	.word	0x0801e168

08007280 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007280:	b480      	push	{r7}
 8007282:	b089      	sub	sp, #36	; 0x24
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007288:	4ba1      	ldr	r3, [pc, #644]	; (8007510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800728a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728c:	f003 0303 	and.w	r3, r3, #3
 8007290:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007292:	4b9f      	ldr	r3, [pc, #636]	; (8007510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007296:	0b1b      	lsrs	r3, r3, #12
 8007298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800729c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800729e:	4b9c      	ldr	r3, [pc, #624]	; (8007510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a2:	091b      	lsrs	r3, r3, #4
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80072aa:	4b99      	ldr	r3, [pc, #612]	; (8007510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ae:	08db      	lsrs	r3, r3, #3
 80072b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	fb02 f303 	mul.w	r3, r2, r3
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 8111 	beq.w	80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	f000 8083 	beq.w	80073dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	2b02      	cmp	r3, #2
 80072da:	f200 80a1 	bhi.w	8007420 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d003      	beq.n	80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d056      	beq.n	8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80072ea:	e099      	b.n	8007420 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072ec:	4b88      	ldr	r3, [pc, #544]	; (8007510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0320 	and.w	r3, r3, #32
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d02d      	beq.n	8007354 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072f8:	4b85      	ldr	r3, [pc, #532]	; (8007510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	08db      	lsrs	r3, r3, #3
 80072fe:	f003 0303 	and.w	r3, r3, #3
 8007302:	4a84      	ldr	r2, [pc, #528]	; (8007514 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007304:	fa22 f303 	lsr.w	r3, r2, r3
 8007308:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	ee07 3a90 	vmov	s15, r3
 8007310:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007322:	4b7b      	ldr	r3, [pc, #492]	; (8007510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732a:	ee07 3a90 	vmov	s15, r3
 800732e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007332:	ed97 6a03 	vldr	s12, [r7, #12]
 8007336:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007518 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800733a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800733e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800734a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800734e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007352:	e087      	b.n	8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	ee07 3a90 	vmov	s15, r3
 800735a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800751c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007366:	4b6a      	ldr	r3, [pc, #424]	; (8007510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007376:	ed97 6a03 	vldr	s12, [r7, #12]
 800737a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007518 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800737e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800738a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800738e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007392:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007396:	e065      	b.n	8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80073a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073aa:	4b59      	ldr	r3, [pc, #356]	; (8007510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b2:	ee07 3a90 	vmov	s15, r3
 80073b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80073be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007518 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073da:	e043      	b.n	8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	ee07 3a90 	vmov	s15, r3
 80073e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007524 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80073ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ee:	4b48      	ldr	r3, [pc, #288]	; (8007510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f6:	ee07 3a90 	vmov	s15, r3
 80073fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007402:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007518 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800740a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800740e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800741a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800741e:	e021      	b.n	8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800742e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007432:	4b37      	ldr	r3, [pc, #220]	; (8007510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800743a:	ee07 3a90 	vmov	s15, r3
 800743e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007442:	ed97 6a03 	vldr	s12, [r7, #12]
 8007446:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007518 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800744a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800744e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800745a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800745e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007462:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007464:	4b2a      	ldr	r3, [pc, #168]	; (8007510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007468:	0a5b      	lsrs	r3, r3, #9
 800746a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800746e:	ee07 3a90 	vmov	s15, r3
 8007472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007476:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800747a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800747e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800748a:	ee17 2a90 	vmov	r2, s15
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007492:	4b1f      	ldr	r3, [pc, #124]	; (8007510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007496:	0c1b      	lsrs	r3, r3, #16
 8007498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800749c:	ee07 3a90 	vmov	s15, r3
 80074a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80074b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074b8:	ee17 2a90 	vmov	r2, s15
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80074c0:	4b13      	ldr	r3, [pc, #76]	; (8007510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c4:	0e1b      	lsrs	r3, r3, #24
 80074c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ca:	ee07 3a90 	vmov	s15, r3
 80074ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074da:	edd7 6a07 	vldr	s13, [r7, #28]
 80074de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074e6:	ee17 2a90 	vmov	r2, s15
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80074ee:	e008      	b.n	8007502 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	609a      	str	r2, [r3, #8]
}
 8007502:	bf00      	nop
 8007504:	3724      	adds	r7, #36	; 0x24
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	58024400 	.word	0x58024400
 8007514:	03d09000 	.word	0x03d09000
 8007518:	46000000 	.word	0x46000000
 800751c:	4c742400 	.word	0x4c742400
 8007520:	4a742400 	.word	0x4a742400
 8007524:	4af42400 	.word	0x4af42400

08007528 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007528:	b480      	push	{r7}
 800752a:	b089      	sub	sp, #36	; 0x24
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007530:	4ba1      	ldr	r3, [pc, #644]	; (80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007534:	f003 0303 	and.w	r3, r3, #3
 8007538:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800753a:	4b9f      	ldr	r3, [pc, #636]	; (80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800753c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753e:	0d1b      	lsrs	r3, r3, #20
 8007540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007544:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007546:	4b9c      	ldr	r3, [pc, #624]	; (80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754a:	0a1b      	lsrs	r3, r3, #8
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007552:	4b99      	ldr	r3, [pc, #612]	; (80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007556:	08db      	lsrs	r3, r3, #3
 8007558:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	fb02 f303 	mul.w	r3, r2, r3
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800756a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 8111 	beq.w	8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	2b02      	cmp	r3, #2
 800757a:	f000 8083 	beq.w	8007684 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	2b02      	cmp	r3, #2
 8007582:	f200 80a1 	bhi.w	80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d003      	beq.n	8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d056      	beq.n	8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007592:	e099      	b.n	80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007594:	4b88      	ldr	r3, [pc, #544]	; (80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0320 	and.w	r3, r3, #32
 800759c:	2b00      	cmp	r3, #0
 800759e:	d02d      	beq.n	80075fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075a0:	4b85      	ldr	r3, [pc, #532]	; (80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	08db      	lsrs	r3, r3, #3
 80075a6:	f003 0303 	and.w	r3, r3, #3
 80075aa:	4a84      	ldr	r2, [pc, #528]	; (80077bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80075ac:	fa22 f303 	lsr.w	r3, r2, r3
 80075b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	ee07 3a90 	vmov	s15, r3
 80075b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	ee07 3a90 	vmov	s15, r3
 80075c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ca:	4b7b      	ldr	r3, [pc, #492]	; (80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075da:	ed97 6a03 	vldr	s12, [r7, #12]
 80075de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80077c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80075fa:	e087      	b.n	800770c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	ee07 3a90 	vmov	s15, r3
 8007602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007606:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80077c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800760a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800760e:	4b6a      	ldr	r3, [pc, #424]	; (80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007616:	ee07 3a90 	vmov	s15, r3
 800761a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800761e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007622:	eddf 5a67 	vldr	s11, [pc, #412]	; 80077c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800762a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800762e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800763a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800763e:	e065      	b.n	800770c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80077c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800764e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007652:	4b59      	ldr	r3, [pc, #356]	; (80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800765a:	ee07 3a90 	vmov	s15, r3
 800765e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007662:	ed97 6a03 	vldr	s12, [r7, #12]
 8007666:	eddf 5a56 	vldr	s11, [pc, #344]	; 80077c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800766a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800766e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800767a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800767e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007682:	e043      	b.n	800770c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	ee07 3a90 	vmov	s15, r3
 800768a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80077cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007696:	4b48      	ldr	r3, [pc, #288]	; (80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80077c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076c6:	e021      	b.n	800770c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	ee07 3a90 	vmov	s15, r3
 80076ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80077c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80076d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076da:	4b37      	ldr	r3, [pc, #220]	; (80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e2:	ee07 3a90 	vmov	s15, r3
 80076e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80077c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007706:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800770a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800770c:	4b2a      	ldr	r3, [pc, #168]	; (80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800770e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007710:	0a5b      	lsrs	r3, r3, #9
 8007712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007716:	ee07 3a90 	vmov	s15, r3
 800771a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800771e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007722:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007726:	edd7 6a07 	vldr	s13, [r7, #28]
 800772a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800772e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007732:	ee17 2a90 	vmov	r2, s15
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800773a:	4b1f      	ldr	r3, [pc, #124]	; (80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800773c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773e:	0c1b      	lsrs	r3, r3, #16
 8007740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007744:	ee07 3a90 	vmov	s15, r3
 8007748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007750:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007754:	edd7 6a07 	vldr	s13, [r7, #28]
 8007758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800775c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007760:	ee17 2a90 	vmov	r2, s15
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007768:	4b13      	ldr	r3, [pc, #76]	; (80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800776a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776c:	0e1b      	lsrs	r3, r3, #24
 800776e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007772:	ee07 3a90 	vmov	s15, r3
 8007776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800777e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007782:	edd7 6a07 	vldr	s13, [r7, #28]
 8007786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800778a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800778e:	ee17 2a90 	vmov	r2, s15
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007796:	e008      	b.n	80077aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	609a      	str	r2, [r3, #8]
}
 80077aa:	bf00      	nop
 80077ac:	3724      	adds	r7, #36	; 0x24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	58024400 	.word	0x58024400
 80077bc:	03d09000 	.word	0x03d09000
 80077c0:	46000000 	.word	0x46000000
 80077c4:	4c742400 	.word	0x4c742400
 80077c8:	4a742400 	.word	0x4a742400
 80077cc:	4af42400 	.word	0x4af42400

080077d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077de:	4b53      	ldr	r3, [pc, #332]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 80077e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e2:	f003 0303 	and.w	r3, r3, #3
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	d101      	bne.n	80077ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e099      	b.n	8007922 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80077ee:	4b4f      	ldr	r3, [pc, #316]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a4e      	ldr	r2, [pc, #312]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 80077f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077fa:	f7fa fda5 	bl	8002348 <HAL_GetTick>
 80077fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007800:	e008      	b.n	8007814 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007802:	f7fa fda1 	bl	8002348 <HAL_GetTick>
 8007806:	4602      	mov	r2, r0
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	2b02      	cmp	r3, #2
 800780e:	d901      	bls.n	8007814 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e086      	b.n	8007922 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007814:	4b45      	ldr	r3, [pc, #276]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1f0      	bne.n	8007802 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007820:	4b42      	ldr	r3, [pc, #264]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 8007822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007824:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	031b      	lsls	r3, r3, #12
 800782e:	493f      	ldr	r1, [pc, #252]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 8007830:	4313      	orrs	r3, r2
 8007832:	628b      	str	r3, [r1, #40]	; 0x28
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	3b01      	subs	r3, #1
 800783a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	3b01      	subs	r3, #1
 8007844:	025b      	lsls	r3, r3, #9
 8007846:	b29b      	uxth	r3, r3
 8007848:	431a      	orrs	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	3b01      	subs	r3, #1
 8007850:	041b      	lsls	r3, r3, #16
 8007852:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007856:	431a      	orrs	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	3b01      	subs	r3, #1
 800785e:	061b      	lsls	r3, r3, #24
 8007860:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007864:	4931      	ldr	r1, [pc, #196]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 8007866:	4313      	orrs	r3, r2
 8007868:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800786a:	4b30      	ldr	r3, [pc, #192]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 800786c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	492d      	ldr	r1, [pc, #180]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 8007878:	4313      	orrs	r3, r2
 800787a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800787c:	4b2b      	ldr	r3, [pc, #172]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 800787e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007880:	f023 0220 	bic.w	r2, r3, #32
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	4928      	ldr	r1, [pc, #160]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 800788a:	4313      	orrs	r3, r2
 800788c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800788e:	4b27      	ldr	r3, [pc, #156]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 8007890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007892:	4a26      	ldr	r2, [pc, #152]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 8007894:	f023 0310 	bic.w	r3, r3, #16
 8007898:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800789a:	4b24      	ldr	r3, [pc, #144]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 800789c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800789e:	4b24      	ldr	r3, [pc, #144]	; (8007930 <RCCEx_PLL2_Config+0x160>)
 80078a0:	4013      	ands	r3, r2
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	69d2      	ldr	r2, [r2, #28]
 80078a6:	00d2      	lsls	r2, r2, #3
 80078a8:	4920      	ldr	r1, [pc, #128]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 80078aa:	4313      	orrs	r3, r2
 80078ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80078ae:	4b1f      	ldr	r3, [pc, #124]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 80078b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b2:	4a1e      	ldr	r2, [pc, #120]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 80078b4:	f043 0310 	orr.w	r3, r3, #16
 80078b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d106      	bne.n	80078ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80078c0:	4b1a      	ldr	r3, [pc, #104]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 80078c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c4:	4a19      	ldr	r2, [pc, #100]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 80078c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078cc:	e00f      	b.n	80078ee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d106      	bne.n	80078e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80078d4:	4b15      	ldr	r3, [pc, #84]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 80078d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d8:	4a14      	ldr	r2, [pc, #80]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 80078da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078e0:	e005      	b.n	80078ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80078e2:	4b12      	ldr	r3, [pc, #72]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 80078e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e6:	4a11      	ldr	r2, [pc, #68]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 80078e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80078ee:	4b0f      	ldr	r3, [pc, #60]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a0e      	ldr	r2, [pc, #56]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 80078f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078fa:	f7fa fd25 	bl	8002348 <HAL_GetTick>
 80078fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007900:	e008      	b.n	8007914 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007902:	f7fa fd21 	bl	8002348 <HAL_GetTick>
 8007906:	4602      	mov	r2, r0
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	2b02      	cmp	r3, #2
 800790e:	d901      	bls.n	8007914 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e006      	b.n	8007922 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007914:	4b05      	ldr	r3, [pc, #20]	; (800792c <RCCEx_PLL2_Config+0x15c>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d0f0      	beq.n	8007902 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007920:	7bfb      	ldrb	r3, [r7, #15]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	58024400 	.word	0x58024400
 8007930:	ffff0007 	.word	0xffff0007

08007934 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007942:	4b53      	ldr	r3, [pc, #332]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007946:	f003 0303 	and.w	r3, r3, #3
 800794a:	2b03      	cmp	r3, #3
 800794c:	d101      	bne.n	8007952 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e099      	b.n	8007a86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007952:	4b4f      	ldr	r3, [pc, #316]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a4e      	ldr	r2, [pc, #312]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800795c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800795e:	f7fa fcf3 	bl	8002348 <HAL_GetTick>
 8007962:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007964:	e008      	b.n	8007978 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007966:	f7fa fcef 	bl	8002348 <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	2b02      	cmp	r3, #2
 8007972:	d901      	bls.n	8007978 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e086      	b.n	8007a86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007978:	4b45      	ldr	r3, [pc, #276]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1f0      	bne.n	8007966 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007984:	4b42      	ldr	r3, [pc, #264]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007988:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	051b      	lsls	r3, r3, #20
 8007992:	493f      	ldr	r1, [pc, #252]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007994:	4313      	orrs	r3, r2
 8007996:	628b      	str	r3, [r1, #40]	; 0x28
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	3b01      	subs	r3, #1
 800799e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	025b      	lsls	r3, r3, #9
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	431a      	orrs	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	3b01      	subs	r3, #1
 80079b4:	041b      	lsls	r3, r3, #16
 80079b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80079ba:	431a      	orrs	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	061b      	lsls	r3, r3, #24
 80079c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80079c8:	4931      	ldr	r1, [pc, #196]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80079ce:	4b30      	ldr	r3, [pc, #192]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 80079d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	492d      	ldr	r1, [pc, #180]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80079e0:	4b2b      	ldr	r3, [pc, #172]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 80079e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	4928      	ldr	r1, [pc, #160]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80079f2:	4b27      	ldr	r3, [pc, #156]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 80079f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f6:	4a26      	ldr	r2, [pc, #152]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 80079f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80079fe:	4b24      	ldr	r3, [pc, #144]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a02:	4b24      	ldr	r3, [pc, #144]	; (8007a94 <RCCEx_PLL3_Config+0x160>)
 8007a04:	4013      	ands	r3, r2
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	69d2      	ldr	r2, [r2, #28]
 8007a0a:	00d2      	lsls	r2, r2, #3
 8007a0c:	4920      	ldr	r1, [pc, #128]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007a12:	4b1f      	ldr	r3, [pc, #124]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a16:	4a1e      	ldr	r2, [pc, #120]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d106      	bne.n	8007a32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007a24:	4b1a      	ldr	r3, [pc, #104]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a28:	4a19      	ldr	r2, [pc, #100]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007a2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a30:	e00f      	b.n	8007a52 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d106      	bne.n	8007a46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007a38:	4b15      	ldr	r3, [pc, #84]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	4a14      	ldr	r2, [pc, #80]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a44:	e005      	b.n	8007a52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007a46:	4b12      	ldr	r3, [pc, #72]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4a:	4a11      	ldr	r2, [pc, #68]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007a52:	4b0f      	ldr	r3, [pc, #60]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a0e      	ldr	r2, [pc, #56]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a5e:	f7fa fc73 	bl	8002348 <HAL_GetTick>
 8007a62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a64:	e008      	b.n	8007a78 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a66:	f7fa fc6f 	bl	8002348 <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d901      	bls.n	8007a78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e006      	b.n	8007a86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a78:	4b05      	ldr	r3, [pc, #20]	; (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d0f0      	beq.n	8007a66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	58024400 	.word	0x58024400
 8007a94:	ffff0007 	.word	0xffff0007

08007a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e049      	b.n	8007b3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d106      	bne.n	8007ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f841 	bl	8007b46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	3304      	adds	r3, #4
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	4610      	mov	r0, r2
 8007ad8:	f000 fa0e 	bl	8007ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007b46:	b480      	push	{r7}
 8007b48:	b083      	sub	sp, #12
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007b4e:	bf00      	nop
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
	...

08007b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d001      	beq.n	8007b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e05e      	b.n	8007c32 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2202      	movs	r2, #2
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68da      	ldr	r2, [r3, #12]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f042 0201 	orr.w	r2, r2, #1
 8007b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a2b      	ldr	r2, [pc, #172]	; (8007c40 <HAL_TIM_Base_Start_IT+0xe4>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d02c      	beq.n	8007bf0 <HAL_TIM_Base_Start_IT+0x94>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b9e:	d027      	beq.n	8007bf0 <HAL_TIM_Base_Start_IT+0x94>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a27      	ldr	r2, [pc, #156]	; (8007c44 <HAL_TIM_Base_Start_IT+0xe8>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d022      	beq.n	8007bf0 <HAL_TIM_Base_Start_IT+0x94>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a26      	ldr	r2, [pc, #152]	; (8007c48 <HAL_TIM_Base_Start_IT+0xec>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d01d      	beq.n	8007bf0 <HAL_TIM_Base_Start_IT+0x94>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a24      	ldr	r2, [pc, #144]	; (8007c4c <HAL_TIM_Base_Start_IT+0xf0>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d018      	beq.n	8007bf0 <HAL_TIM_Base_Start_IT+0x94>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a23      	ldr	r2, [pc, #140]	; (8007c50 <HAL_TIM_Base_Start_IT+0xf4>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d013      	beq.n	8007bf0 <HAL_TIM_Base_Start_IT+0x94>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a21      	ldr	r2, [pc, #132]	; (8007c54 <HAL_TIM_Base_Start_IT+0xf8>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d00e      	beq.n	8007bf0 <HAL_TIM_Base_Start_IT+0x94>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a20      	ldr	r2, [pc, #128]	; (8007c58 <HAL_TIM_Base_Start_IT+0xfc>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d009      	beq.n	8007bf0 <HAL_TIM_Base_Start_IT+0x94>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a1e      	ldr	r2, [pc, #120]	; (8007c5c <HAL_TIM_Base_Start_IT+0x100>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d004      	beq.n	8007bf0 <HAL_TIM_Base_Start_IT+0x94>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a1d      	ldr	r2, [pc, #116]	; (8007c60 <HAL_TIM_Base_Start_IT+0x104>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d115      	bne.n	8007c1c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689a      	ldr	r2, [r3, #8]
 8007bf6:	4b1b      	ldr	r3, [pc, #108]	; (8007c64 <HAL_TIM_Base_Start_IT+0x108>)
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2b06      	cmp	r3, #6
 8007c00:	d015      	beq.n	8007c2e <HAL_TIM_Base_Start_IT+0xd2>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c08:	d011      	beq.n	8007c2e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f042 0201 	orr.w	r2, r2, #1
 8007c18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c1a:	e008      	b.n	8007c2e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f042 0201 	orr.w	r2, r2, #1
 8007c2a:	601a      	str	r2, [r3, #0]
 8007c2c:	e000      	b.n	8007c30 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3714      	adds	r7, #20
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	40010000 	.word	0x40010000
 8007c44:	40000400 	.word	0x40000400
 8007c48:	40000800 	.word	0x40000800
 8007c4c:	40000c00 	.word	0x40000c00
 8007c50:	40010400 	.word	0x40010400
 8007c54:	40001800 	.word	0x40001800
 8007c58:	40014000 	.word	0x40014000
 8007c5c:	4000e000 	.word	0x4000e000
 8007c60:	4000e400 	.word	0x4000e400
 8007c64:	00010007 	.word	0x00010007

08007c68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d122      	bne.n	8007cc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f003 0302 	and.w	r3, r3, #2
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d11b      	bne.n	8007cc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f06f 0202 	mvn.w	r2, #2
 8007c94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	f003 0303 	and.w	r3, r3, #3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f905 	bl	8007eba <HAL_TIM_IC_CaptureCallback>
 8007cb0:	e005      	b.n	8007cbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f8f7 	bl	8007ea6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f908 	bl	8007ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	f003 0304 	and.w	r3, r3, #4
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d122      	bne.n	8007d18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f003 0304 	and.w	r3, r3, #4
 8007cdc:	2b04      	cmp	r3, #4
 8007cde:	d11b      	bne.n	8007d18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f06f 0204 	mvn.w	r2, #4
 8007ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2202      	movs	r2, #2
 8007cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f8db 	bl	8007eba <HAL_TIM_IC_CaptureCallback>
 8007d04:	e005      	b.n	8007d12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f8cd 	bl	8007ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f8de 	bl	8007ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	f003 0308 	and.w	r3, r3, #8
 8007d22:	2b08      	cmp	r3, #8
 8007d24:	d122      	bne.n	8007d6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	f003 0308 	and.w	r3, r3, #8
 8007d30:	2b08      	cmp	r3, #8
 8007d32:	d11b      	bne.n	8007d6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f06f 0208 	mvn.w	r2, #8
 8007d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2204      	movs	r2, #4
 8007d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	f003 0303 	and.w	r3, r3, #3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f8b1 	bl	8007eba <HAL_TIM_IC_CaptureCallback>
 8007d58:	e005      	b.n	8007d66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 f8a3 	bl	8007ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f8b4 	bl	8007ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	f003 0310 	and.w	r3, r3, #16
 8007d76:	2b10      	cmp	r3, #16
 8007d78:	d122      	bne.n	8007dc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f003 0310 	and.w	r3, r3, #16
 8007d84:	2b10      	cmp	r3, #16
 8007d86:	d11b      	bne.n	8007dc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f06f 0210 	mvn.w	r2, #16
 8007d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2208      	movs	r2, #8
 8007d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	69db      	ldr	r3, [r3, #28]
 8007d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f887 	bl	8007eba <HAL_TIM_IC_CaptureCallback>
 8007dac:	e005      	b.n	8007dba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f879 	bl	8007ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f88a 	bl	8007ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d10e      	bne.n	8007dec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d107      	bne.n	8007dec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f06f 0201 	mvn.w	r2, #1
 8007de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7f9 fe66 	bl	8001ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df6:	2b80      	cmp	r3, #128	; 0x80
 8007df8:	d10e      	bne.n	8007e18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e04:	2b80      	cmp	r3, #128	; 0x80
 8007e06:	d107      	bne.n	8007e18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f920 	bl	8008058 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e26:	d10e      	bne.n	8007e46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e32:	2b80      	cmp	r3, #128	; 0x80
 8007e34:	d107      	bne.n	8007e46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f913 	bl	800806c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e50:	2b40      	cmp	r3, #64	; 0x40
 8007e52:	d10e      	bne.n	8007e72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e5e:	2b40      	cmp	r3, #64	; 0x40
 8007e60:	d107      	bne.n	8007e72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f838 	bl	8007ee2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	f003 0320 	and.w	r3, r3, #32
 8007e7c:	2b20      	cmp	r3, #32
 8007e7e:	d10e      	bne.n	8007e9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	f003 0320 	and.w	r3, r3, #32
 8007e8a:	2b20      	cmp	r3, #32
 8007e8c:	d107      	bne.n	8007e9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f06f 0220 	mvn.w	r2, #32
 8007e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f8d3 	bl	8008044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e9e:	bf00      	nop
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b083      	sub	sp, #12
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007eae:	bf00      	nop
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b083      	sub	sp, #12
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ed6:	bf00      	nop
 8007ed8:	370c      	adds	r7, #12
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr

08007ee2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b083      	sub	sp, #12
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
	...

08007ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a44      	ldr	r2, [pc, #272]	; (800801c <TIM_Base_SetConfig+0x124>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d013      	beq.n	8007f38 <TIM_Base_SetConfig+0x40>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f16:	d00f      	beq.n	8007f38 <TIM_Base_SetConfig+0x40>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a41      	ldr	r2, [pc, #260]	; (8008020 <TIM_Base_SetConfig+0x128>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d00b      	beq.n	8007f38 <TIM_Base_SetConfig+0x40>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a40      	ldr	r2, [pc, #256]	; (8008024 <TIM_Base_SetConfig+0x12c>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d007      	beq.n	8007f38 <TIM_Base_SetConfig+0x40>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a3f      	ldr	r2, [pc, #252]	; (8008028 <TIM_Base_SetConfig+0x130>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d003      	beq.n	8007f38 <TIM_Base_SetConfig+0x40>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a3e      	ldr	r2, [pc, #248]	; (800802c <TIM_Base_SetConfig+0x134>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d108      	bne.n	8007f4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a33      	ldr	r2, [pc, #204]	; (800801c <TIM_Base_SetConfig+0x124>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d027      	beq.n	8007fa2 <TIM_Base_SetConfig+0xaa>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f58:	d023      	beq.n	8007fa2 <TIM_Base_SetConfig+0xaa>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a30      	ldr	r2, [pc, #192]	; (8008020 <TIM_Base_SetConfig+0x128>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d01f      	beq.n	8007fa2 <TIM_Base_SetConfig+0xaa>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a2f      	ldr	r2, [pc, #188]	; (8008024 <TIM_Base_SetConfig+0x12c>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d01b      	beq.n	8007fa2 <TIM_Base_SetConfig+0xaa>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a2e      	ldr	r2, [pc, #184]	; (8008028 <TIM_Base_SetConfig+0x130>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d017      	beq.n	8007fa2 <TIM_Base_SetConfig+0xaa>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a2d      	ldr	r2, [pc, #180]	; (800802c <TIM_Base_SetConfig+0x134>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d013      	beq.n	8007fa2 <TIM_Base_SetConfig+0xaa>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a2c      	ldr	r2, [pc, #176]	; (8008030 <TIM_Base_SetConfig+0x138>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d00f      	beq.n	8007fa2 <TIM_Base_SetConfig+0xaa>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a2b      	ldr	r2, [pc, #172]	; (8008034 <TIM_Base_SetConfig+0x13c>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d00b      	beq.n	8007fa2 <TIM_Base_SetConfig+0xaa>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a2a      	ldr	r2, [pc, #168]	; (8008038 <TIM_Base_SetConfig+0x140>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d007      	beq.n	8007fa2 <TIM_Base_SetConfig+0xaa>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a29      	ldr	r2, [pc, #164]	; (800803c <TIM_Base_SetConfig+0x144>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d003      	beq.n	8007fa2 <TIM_Base_SetConfig+0xaa>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a28      	ldr	r2, [pc, #160]	; (8008040 <TIM_Base_SetConfig+0x148>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d108      	bne.n	8007fb4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	695b      	ldr	r3, [r3, #20]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a10      	ldr	r2, [pc, #64]	; (800801c <TIM_Base_SetConfig+0x124>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d00f      	beq.n	8008000 <TIM_Base_SetConfig+0x108>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a12      	ldr	r2, [pc, #72]	; (800802c <TIM_Base_SetConfig+0x134>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d00b      	beq.n	8008000 <TIM_Base_SetConfig+0x108>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a11      	ldr	r2, [pc, #68]	; (8008030 <TIM_Base_SetConfig+0x138>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d007      	beq.n	8008000 <TIM_Base_SetConfig+0x108>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a10      	ldr	r2, [pc, #64]	; (8008034 <TIM_Base_SetConfig+0x13c>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d003      	beq.n	8008000 <TIM_Base_SetConfig+0x108>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a0f      	ldr	r2, [pc, #60]	; (8008038 <TIM_Base_SetConfig+0x140>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d103      	bne.n	8008008 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	691a      	ldr	r2, [r3, #16]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	615a      	str	r2, [r3, #20]
}
 800800e:	bf00      	nop
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	40010000 	.word	0x40010000
 8008020:	40000400 	.word	0x40000400
 8008024:	40000800 	.word	0x40000800
 8008028:	40000c00 	.word	0x40000c00
 800802c:	40010400 	.word	0x40010400
 8008030:	40014000 	.word	0x40014000
 8008034:	40014400 	.word	0x40014400
 8008038:	40014800 	.word	0x40014800
 800803c:	4000e000 	.word	0x4000e000
 8008040:	4000e400 	.word	0x4000e400

08008044 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e042      	b.n	8008118 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008098:	2b00      	cmp	r3, #0
 800809a:	d106      	bne.n	80080aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7f9 fd3d 	bl	8001b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2224      	movs	r2, #36	; 0x24
 80080ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f022 0201 	bic.w	r2, r2, #1
 80080c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fc94 	bl	80089f0 <UART_SetConfig>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d101      	bne.n	80080d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e022      	b.n	8008118 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d002      	beq.n	80080e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f001 faf4 	bl	80096c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689a      	ldr	r2, [r3, #8]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f042 0201 	orr.w	r2, r2, #1
 800810e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f001 fb7b 	bl	800980c <UART_CheckIdleState>
 8008116:	4603      	mov	r3, r0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b08a      	sub	sp, #40	; 0x28
 8008124:	af02      	add	r7, sp, #8
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	603b      	str	r3, [r7, #0]
 800812c:	4613      	mov	r3, r2
 800812e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008136:	2b20      	cmp	r3, #32
 8008138:	d17b      	bne.n	8008232 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d002      	beq.n	8008146 <HAL_UART_Transmit+0x26>
 8008140:	88fb      	ldrh	r3, [r7, #6]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e074      	b.n	8008234 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2221      	movs	r2, #33	; 0x21
 8008156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800815a:	f7fa f8f5 	bl	8002348 <HAL_GetTick>
 800815e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	88fa      	ldrh	r2, [r7, #6]
 8008164:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	88fa      	ldrh	r2, [r7, #6]
 800816c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008178:	d108      	bne.n	800818c <HAL_UART_Transmit+0x6c>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d104      	bne.n	800818c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008182:	2300      	movs	r3, #0
 8008184:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	61bb      	str	r3, [r7, #24]
 800818a:	e003      	b.n	8008194 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008190:	2300      	movs	r3, #0
 8008192:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008194:	e030      	b.n	80081f8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2200      	movs	r2, #0
 800819e:	2180      	movs	r1, #128	; 0x80
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f001 fbdd 	bl	8009960 <UART_WaitOnFlagUntilTimeout>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d005      	beq.n	80081b8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2220      	movs	r2, #32
 80081b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e03d      	b.n	8008234 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d10b      	bne.n	80081d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	881b      	ldrh	r3, [r3, #0]
 80081c2:	461a      	mov	r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	3302      	adds	r3, #2
 80081d2:	61bb      	str	r3, [r7, #24]
 80081d4:	e007      	b.n	80081e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	781a      	ldrb	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	3301      	adds	r3, #1
 80081e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	3b01      	subs	r3, #1
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081fe:	b29b      	uxth	r3, r3
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1c8      	bne.n	8008196 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	2200      	movs	r2, #0
 800820c:	2140      	movs	r1, #64	; 0x40
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f001 fba6 	bl	8009960 <UART_WaitOnFlagUntilTimeout>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d005      	beq.n	8008226 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2220      	movs	r2, #32
 800821e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008222:	2303      	movs	r3, #3
 8008224:	e006      	b.n	8008234 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2220      	movs	r2, #32
 800822a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800822e:	2300      	movs	r3, #0
 8008230:	e000      	b.n	8008234 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008232:	2302      	movs	r3, #2
  }
}
 8008234:	4618      	mov	r0, r3
 8008236:	3720      	adds	r7, #32
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b0ba      	sub	sp, #232	; 0xe8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008262:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008266:	f640 030f 	movw	r3, #2063	; 0x80f
 800826a:	4013      	ands	r3, r2
 800826c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008270:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008274:	2b00      	cmp	r3, #0
 8008276:	d11b      	bne.n	80082b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800827c:	f003 0320 	and.w	r3, r3, #32
 8008280:	2b00      	cmp	r3, #0
 8008282:	d015      	beq.n	80082b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008288:	f003 0320 	and.w	r3, r3, #32
 800828c:	2b00      	cmp	r3, #0
 800828e:	d105      	bne.n	800829c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d009      	beq.n	80082b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 8377 	beq.w	8008994 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	4798      	blx	r3
      }
      return;
 80082ae:	e371      	b.n	8008994 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80082b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 8123 	beq.w	8008500 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80082ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80082be:	4b8d      	ldr	r3, [pc, #564]	; (80084f4 <HAL_UART_IRQHandler+0x2b8>)
 80082c0:	4013      	ands	r3, r2
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d106      	bne.n	80082d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80082c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80082ca:	4b8b      	ldr	r3, [pc, #556]	; (80084f8 <HAL_UART_IRQHandler+0x2bc>)
 80082cc:	4013      	ands	r3, r2
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f000 8116 	beq.w	8008500 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d011      	beq.n	8008304 <HAL_UART_IRQHandler+0xc8>
 80082e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00b      	beq.n	8008304 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2201      	movs	r2, #1
 80082f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082fa:	f043 0201 	orr.w	r2, r3, #1
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008308:	f003 0302 	and.w	r3, r3, #2
 800830c:	2b00      	cmp	r3, #0
 800830e:	d011      	beq.n	8008334 <HAL_UART_IRQHandler+0xf8>
 8008310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00b      	beq.n	8008334 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2202      	movs	r2, #2
 8008322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800832a:	f043 0204 	orr.w	r2, r3, #4
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008338:	f003 0304 	and.w	r3, r3, #4
 800833c:	2b00      	cmp	r3, #0
 800833e:	d011      	beq.n	8008364 <HAL_UART_IRQHandler+0x128>
 8008340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008344:	f003 0301 	and.w	r3, r3, #1
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00b      	beq.n	8008364 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2204      	movs	r2, #4
 8008352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800835a:	f043 0202 	orr.w	r2, r3, #2
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008368:	f003 0308 	and.w	r3, r3, #8
 800836c:	2b00      	cmp	r3, #0
 800836e:	d017      	beq.n	80083a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008374:	f003 0320 	and.w	r3, r3, #32
 8008378:	2b00      	cmp	r3, #0
 800837a:	d105      	bne.n	8008388 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800837c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008380:	4b5c      	ldr	r3, [pc, #368]	; (80084f4 <HAL_UART_IRQHandler+0x2b8>)
 8008382:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00b      	beq.n	80083a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2208      	movs	r2, #8
 800838e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008396:	f043 0208 	orr.w	r2, r3, #8
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80083a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d012      	beq.n	80083d2 <HAL_UART_IRQHandler+0x196>
 80083ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00c      	beq.n	80083d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c8:	f043 0220 	orr.w	r2, r3, #32
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f000 82dd 	beq.w	8008998 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80083de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e2:	f003 0320 	and.w	r3, r3, #32
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d013      	beq.n	8008412 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80083ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083ee:	f003 0320 	and.w	r3, r3, #32
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d105      	bne.n	8008402 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80083f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d007      	beq.n	8008412 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008406:	2b00      	cmp	r3, #0
 8008408:	d003      	beq.n	8008412 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008418:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008426:	2b40      	cmp	r3, #64	; 0x40
 8008428:	d005      	beq.n	8008436 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800842a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800842e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008432:	2b00      	cmp	r3, #0
 8008434:	d054      	beq.n	80084e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f001 fafa 	bl	8009a30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008446:	2b40      	cmp	r3, #64	; 0x40
 8008448:	d146      	bne.n	80084d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	3308      	adds	r3, #8
 8008450:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008454:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008458:	e853 3f00 	ldrex	r3, [r3]
 800845c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008460:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008468:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3308      	adds	r3, #8
 8008472:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008476:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800847a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008482:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008486:	e841 2300 	strex	r3, r2, [r1]
 800848a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800848e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1d9      	bne.n	800844a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800849c:	2b00      	cmp	r3, #0
 800849e:	d017      	beq.n	80084d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084a6:	4a15      	ldr	r2, [pc, #84]	; (80084fc <HAL_UART_IRQHandler+0x2c0>)
 80084a8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7fa fbe3 	bl	8002c7c <HAL_DMA_Abort_IT>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d019      	beq.n	80084f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80084ca:	4610      	mov	r0, r2
 80084cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ce:	e00f      	b.n	80084f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fa77 	bl	80089c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084d6:	e00b      	b.n	80084f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fa73 	bl	80089c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084de:	e007      	b.n	80084f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 fa6f 	bl	80089c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80084ee:	e253      	b.n	8008998 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084f0:	bf00      	nop
    return;
 80084f2:	e251      	b.n	8008998 <HAL_UART_IRQHandler+0x75c>
 80084f4:	10000001 	.word	0x10000001
 80084f8:	04000120 	.word	0x04000120
 80084fc:	08009afd 	.word	0x08009afd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008504:	2b01      	cmp	r3, #1
 8008506:	f040 81e7 	bne.w	80088d8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800850a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800850e:	f003 0310 	and.w	r3, r3, #16
 8008512:	2b00      	cmp	r3, #0
 8008514:	f000 81e0 	beq.w	80088d8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800851c:	f003 0310 	and.w	r3, r3, #16
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 81d9 	beq.w	80088d8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2210      	movs	r2, #16
 800852c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008538:	2b40      	cmp	r3, #64	; 0x40
 800853a:	f040 8151 	bne.w	80087e0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a96      	ldr	r2, [pc, #600]	; (80087a0 <HAL_UART_IRQHandler+0x564>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d068      	beq.n	800861e <HAL_UART_IRQHandler+0x3e2>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a93      	ldr	r2, [pc, #588]	; (80087a4 <HAL_UART_IRQHandler+0x568>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d061      	beq.n	800861e <HAL_UART_IRQHandler+0x3e2>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a91      	ldr	r2, [pc, #580]	; (80087a8 <HAL_UART_IRQHandler+0x56c>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d05a      	beq.n	800861e <HAL_UART_IRQHandler+0x3e2>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a8e      	ldr	r2, [pc, #568]	; (80087ac <HAL_UART_IRQHandler+0x570>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d053      	beq.n	800861e <HAL_UART_IRQHandler+0x3e2>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a8c      	ldr	r2, [pc, #560]	; (80087b0 <HAL_UART_IRQHandler+0x574>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d04c      	beq.n	800861e <HAL_UART_IRQHandler+0x3e2>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a89      	ldr	r2, [pc, #548]	; (80087b4 <HAL_UART_IRQHandler+0x578>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d045      	beq.n	800861e <HAL_UART_IRQHandler+0x3e2>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a87      	ldr	r2, [pc, #540]	; (80087b8 <HAL_UART_IRQHandler+0x57c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d03e      	beq.n	800861e <HAL_UART_IRQHandler+0x3e2>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a84      	ldr	r2, [pc, #528]	; (80087bc <HAL_UART_IRQHandler+0x580>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d037      	beq.n	800861e <HAL_UART_IRQHandler+0x3e2>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a82      	ldr	r2, [pc, #520]	; (80087c0 <HAL_UART_IRQHandler+0x584>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d030      	beq.n	800861e <HAL_UART_IRQHandler+0x3e2>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a7f      	ldr	r2, [pc, #508]	; (80087c4 <HAL_UART_IRQHandler+0x588>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d029      	beq.n	800861e <HAL_UART_IRQHandler+0x3e2>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a7d      	ldr	r2, [pc, #500]	; (80087c8 <HAL_UART_IRQHandler+0x58c>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d022      	beq.n	800861e <HAL_UART_IRQHandler+0x3e2>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a7a      	ldr	r2, [pc, #488]	; (80087cc <HAL_UART_IRQHandler+0x590>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d01b      	beq.n	800861e <HAL_UART_IRQHandler+0x3e2>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a78      	ldr	r2, [pc, #480]	; (80087d0 <HAL_UART_IRQHandler+0x594>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d014      	beq.n	800861e <HAL_UART_IRQHandler+0x3e2>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a75      	ldr	r2, [pc, #468]	; (80087d4 <HAL_UART_IRQHandler+0x598>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d00d      	beq.n	800861e <HAL_UART_IRQHandler+0x3e2>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a73      	ldr	r2, [pc, #460]	; (80087d8 <HAL_UART_IRQHandler+0x59c>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d006      	beq.n	800861e <HAL_UART_IRQHandler+0x3e2>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a70      	ldr	r2, [pc, #448]	; (80087dc <HAL_UART_IRQHandler+0x5a0>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d106      	bne.n	800862c <HAL_UART_IRQHandler+0x3f0>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	b29b      	uxth	r3, r3
 800862a:	e005      	b.n	8008638 <HAL_UART_IRQHandler+0x3fc>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	b29b      	uxth	r3, r3
 8008638:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800863c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 81ab 	beq.w	800899c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800864c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008650:	429a      	cmp	r2, r3
 8008652:	f080 81a3 	bcs.w	800899c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800865c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008666:	69db      	ldr	r3, [r3, #28]
 8008668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800866c:	f000 8087 	beq.w	800877e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008678:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800867c:	e853 3f00 	ldrex	r3, [r3]
 8008680:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008684:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800868c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	461a      	mov	r2, r3
 8008696:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800869a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800869e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80086a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80086aa:	e841 2300 	strex	r3, r2, [r1]
 80086ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80086b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1da      	bne.n	8008670 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3308      	adds	r3, #8
 80086c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086c4:	e853 3f00 	ldrex	r3, [r3]
 80086c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80086ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086cc:	f023 0301 	bic.w	r3, r3, #1
 80086d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	3308      	adds	r3, #8
 80086da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80086de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80086e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80086e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80086ea:	e841 2300 	strex	r3, r2, [r1]
 80086ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80086f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1e1      	bne.n	80086ba <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	3308      	adds	r3, #8
 80086fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008700:	e853 3f00 	ldrex	r3, [r3]
 8008704:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800870c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	3308      	adds	r3, #8
 8008716:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800871a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800871c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008720:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008722:	e841 2300 	strex	r3, r2, [r1]
 8008726:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1e3      	bne.n	80086f6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2220      	movs	r2, #32
 8008732:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008744:	e853 3f00 	ldrex	r3, [r3]
 8008748:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800874a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800874c:	f023 0310 	bic.w	r3, r3, #16
 8008750:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	461a      	mov	r2, r3
 800875a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800875e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008760:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008762:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008764:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008766:	e841 2300 	strex	r3, r2, [r1]
 800876a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800876c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1e4      	bne.n	800873c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008778:	4618      	mov	r0, r3
 800877a:	f7f9 ff61 	bl	8002640 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2202      	movs	r2, #2
 8008782:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008790:	b29b      	uxth	r3, r3
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	b29b      	uxth	r3, r3
 8008796:	4619      	mov	r1, r3
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f91d 	bl	80089d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800879e:	e0fd      	b.n	800899c <HAL_UART_IRQHandler+0x760>
 80087a0:	40020010 	.word	0x40020010
 80087a4:	40020028 	.word	0x40020028
 80087a8:	40020040 	.word	0x40020040
 80087ac:	40020058 	.word	0x40020058
 80087b0:	40020070 	.word	0x40020070
 80087b4:	40020088 	.word	0x40020088
 80087b8:	400200a0 	.word	0x400200a0
 80087bc:	400200b8 	.word	0x400200b8
 80087c0:	40020410 	.word	0x40020410
 80087c4:	40020428 	.word	0x40020428
 80087c8:	40020440 	.word	0x40020440
 80087cc:	40020458 	.word	0x40020458
 80087d0:	40020470 	.word	0x40020470
 80087d4:	40020488 	.word	0x40020488
 80087d8:	400204a0 	.word	0x400204a0
 80087dc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 80cf 	beq.w	80089a0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008802:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008806:	2b00      	cmp	r3, #0
 8008808:	f000 80ca 	beq.w	80089a0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800881a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008820:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	461a      	mov	r2, r3
 800882a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800882e:	647b      	str	r3, [r7, #68]	; 0x44
 8008830:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008834:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800883c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e4      	bne.n	800880c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3308      	adds	r3, #8
 8008848:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	e853 3f00 	ldrex	r3, [r3]
 8008850:	623b      	str	r3, [r7, #32]
   return(result);
 8008852:	6a3a      	ldr	r2, [r7, #32]
 8008854:	4b55      	ldr	r3, [pc, #340]	; (80089ac <HAL_UART_IRQHandler+0x770>)
 8008856:	4013      	ands	r3, r2
 8008858:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	3308      	adds	r3, #8
 8008862:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008866:	633a      	str	r2, [r7, #48]	; 0x30
 8008868:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800886c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800886e:	e841 2300 	strex	r3, r2, [r1]
 8008872:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1e3      	bne.n	8008842 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2220      	movs	r2, #32
 800887e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	e853 3f00 	ldrex	r3, [r3]
 800889a:	60fb      	str	r3, [r7, #12]
   return(result);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f023 0310 	bic.w	r3, r3, #16
 80088a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	461a      	mov	r2, r3
 80088ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80088b0:	61fb      	str	r3, [r7, #28]
 80088b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b4:	69b9      	ldr	r1, [r7, #24]
 80088b6:	69fa      	ldr	r2, [r7, #28]
 80088b8:	e841 2300 	strex	r3, r2, [r1]
 80088bc:	617b      	str	r3, [r7, #20]
   return(result);
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1e4      	bne.n	800888e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2202      	movs	r2, #2
 80088c8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088ce:	4619      	mov	r1, r3
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f881 	bl	80089d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088d6:	e063      	b.n	80089a0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80088d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00e      	beq.n	8008902 <HAL_UART_IRQHandler+0x6c6>
 80088e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d008      	beq.n	8008902 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80088f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f001 f93f 	bl	8009b7e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008900:	e051      	b.n	80089a6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800890a:	2b00      	cmp	r3, #0
 800890c:	d014      	beq.n	8008938 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800890e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008916:	2b00      	cmp	r3, #0
 8008918:	d105      	bne.n	8008926 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800891a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800891e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d008      	beq.n	8008938 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800892a:	2b00      	cmp	r3, #0
 800892c:	d03a      	beq.n	80089a4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	4798      	blx	r3
    }
    return;
 8008936:	e035      	b.n	80089a4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800893c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008940:	2b00      	cmp	r3, #0
 8008942:	d009      	beq.n	8008958 <HAL_UART_IRQHandler+0x71c>
 8008944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800894c:	2b00      	cmp	r3, #0
 800894e:	d003      	beq.n	8008958 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f001 f8e9 	bl	8009b28 <UART_EndTransmit_IT>
    return;
 8008956:	e026      	b.n	80089a6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800895c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d009      	beq.n	8008978 <HAL_UART_IRQHandler+0x73c>
 8008964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008968:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800896c:	2b00      	cmp	r3, #0
 800896e:	d003      	beq.n	8008978 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f001 f918 	bl	8009ba6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008976:	e016      	b.n	80089a6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800897c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008980:	2b00      	cmp	r3, #0
 8008982:	d010      	beq.n	80089a6 <HAL_UART_IRQHandler+0x76a>
 8008984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008988:	2b00      	cmp	r3, #0
 800898a:	da0c      	bge.n	80089a6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f001 f900 	bl	8009b92 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008992:	e008      	b.n	80089a6 <HAL_UART_IRQHandler+0x76a>
      return;
 8008994:	bf00      	nop
 8008996:	e006      	b.n	80089a6 <HAL_UART_IRQHandler+0x76a>
    return;
 8008998:	bf00      	nop
 800899a:	e004      	b.n	80089a6 <HAL_UART_IRQHandler+0x76a>
      return;
 800899c:	bf00      	nop
 800899e:	e002      	b.n	80089a6 <HAL_UART_IRQHandler+0x76a>
      return;
 80089a0:	bf00      	nop
 80089a2:	e000      	b.n	80089a6 <HAL_UART_IRQHandler+0x76a>
    return;
 80089a4:	bf00      	nop
  }
}
 80089a6:	37e8      	adds	r7, #232	; 0xe8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	effffffe 	.word	0xeffffffe

080089b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089f4:	b092      	sub	sp, #72	; 0x48
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	689a      	ldr	r2, [r3, #8]
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	431a      	orrs	r2, r3
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	4bbe      	ldr	r3, [pc, #760]	; (8008d18 <UART_SetConfig+0x328>)
 8008a20:	4013      	ands	r3, r2
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	6812      	ldr	r2, [r2, #0]
 8008a26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a28:	430b      	orrs	r3, r1
 8008a2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	68da      	ldr	r2, [r3, #12]
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4ab3      	ldr	r2, [pc, #716]	; (8008d1c <UART_SetConfig+0x32c>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d004      	beq.n	8008a5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	6a1b      	ldr	r3, [r3, #32]
 8008a56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	689a      	ldr	r2, [r3, #8]
 8008a62:	4baf      	ldr	r3, [pc, #700]	; (8008d20 <UART_SetConfig+0x330>)
 8008a64:	4013      	ands	r3, r2
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	6812      	ldr	r2, [r2, #0]
 8008a6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a6c:	430b      	orrs	r3, r1
 8008a6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a76:	f023 010f 	bic.w	r1, r3, #15
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	430a      	orrs	r2, r1
 8008a84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4aa6      	ldr	r2, [pc, #664]	; (8008d24 <UART_SetConfig+0x334>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d177      	bne.n	8008b80 <UART_SetConfig+0x190>
 8008a90:	4ba5      	ldr	r3, [pc, #660]	; (8008d28 <UART_SetConfig+0x338>)
 8008a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a98:	2b28      	cmp	r3, #40	; 0x28
 8008a9a:	d86d      	bhi.n	8008b78 <UART_SetConfig+0x188>
 8008a9c:	a201      	add	r2, pc, #4	; (adr r2, 8008aa4 <UART_SetConfig+0xb4>)
 8008a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa2:	bf00      	nop
 8008aa4:	08008b49 	.word	0x08008b49
 8008aa8:	08008b79 	.word	0x08008b79
 8008aac:	08008b79 	.word	0x08008b79
 8008ab0:	08008b79 	.word	0x08008b79
 8008ab4:	08008b79 	.word	0x08008b79
 8008ab8:	08008b79 	.word	0x08008b79
 8008abc:	08008b79 	.word	0x08008b79
 8008ac0:	08008b79 	.word	0x08008b79
 8008ac4:	08008b51 	.word	0x08008b51
 8008ac8:	08008b79 	.word	0x08008b79
 8008acc:	08008b79 	.word	0x08008b79
 8008ad0:	08008b79 	.word	0x08008b79
 8008ad4:	08008b79 	.word	0x08008b79
 8008ad8:	08008b79 	.word	0x08008b79
 8008adc:	08008b79 	.word	0x08008b79
 8008ae0:	08008b79 	.word	0x08008b79
 8008ae4:	08008b59 	.word	0x08008b59
 8008ae8:	08008b79 	.word	0x08008b79
 8008aec:	08008b79 	.word	0x08008b79
 8008af0:	08008b79 	.word	0x08008b79
 8008af4:	08008b79 	.word	0x08008b79
 8008af8:	08008b79 	.word	0x08008b79
 8008afc:	08008b79 	.word	0x08008b79
 8008b00:	08008b79 	.word	0x08008b79
 8008b04:	08008b61 	.word	0x08008b61
 8008b08:	08008b79 	.word	0x08008b79
 8008b0c:	08008b79 	.word	0x08008b79
 8008b10:	08008b79 	.word	0x08008b79
 8008b14:	08008b79 	.word	0x08008b79
 8008b18:	08008b79 	.word	0x08008b79
 8008b1c:	08008b79 	.word	0x08008b79
 8008b20:	08008b79 	.word	0x08008b79
 8008b24:	08008b69 	.word	0x08008b69
 8008b28:	08008b79 	.word	0x08008b79
 8008b2c:	08008b79 	.word	0x08008b79
 8008b30:	08008b79 	.word	0x08008b79
 8008b34:	08008b79 	.word	0x08008b79
 8008b38:	08008b79 	.word	0x08008b79
 8008b3c:	08008b79 	.word	0x08008b79
 8008b40:	08008b79 	.word	0x08008b79
 8008b44:	08008b71 	.word	0x08008b71
 8008b48:	2301      	movs	r3, #1
 8008b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b4e:	e326      	b.n	800919e <UART_SetConfig+0x7ae>
 8008b50:	2304      	movs	r3, #4
 8008b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b56:	e322      	b.n	800919e <UART_SetConfig+0x7ae>
 8008b58:	2308      	movs	r3, #8
 8008b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b5e:	e31e      	b.n	800919e <UART_SetConfig+0x7ae>
 8008b60:	2310      	movs	r3, #16
 8008b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b66:	e31a      	b.n	800919e <UART_SetConfig+0x7ae>
 8008b68:	2320      	movs	r3, #32
 8008b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b6e:	e316      	b.n	800919e <UART_SetConfig+0x7ae>
 8008b70:	2340      	movs	r3, #64	; 0x40
 8008b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b76:	e312      	b.n	800919e <UART_SetConfig+0x7ae>
 8008b78:	2380      	movs	r3, #128	; 0x80
 8008b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b7e:	e30e      	b.n	800919e <UART_SetConfig+0x7ae>
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a69      	ldr	r2, [pc, #420]	; (8008d2c <UART_SetConfig+0x33c>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d130      	bne.n	8008bec <UART_SetConfig+0x1fc>
 8008b8a:	4b67      	ldr	r3, [pc, #412]	; (8008d28 <UART_SetConfig+0x338>)
 8008b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b8e:	f003 0307 	and.w	r3, r3, #7
 8008b92:	2b05      	cmp	r3, #5
 8008b94:	d826      	bhi.n	8008be4 <UART_SetConfig+0x1f4>
 8008b96:	a201      	add	r2, pc, #4	; (adr r2, 8008b9c <UART_SetConfig+0x1ac>)
 8008b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9c:	08008bb5 	.word	0x08008bb5
 8008ba0:	08008bbd 	.word	0x08008bbd
 8008ba4:	08008bc5 	.word	0x08008bc5
 8008ba8:	08008bcd 	.word	0x08008bcd
 8008bac:	08008bd5 	.word	0x08008bd5
 8008bb0:	08008bdd 	.word	0x08008bdd
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bba:	e2f0      	b.n	800919e <UART_SetConfig+0x7ae>
 8008bbc:	2304      	movs	r3, #4
 8008bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bc2:	e2ec      	b.n	800919e <UART_SetConfig+0x7ae>
 8008bc4:	2308      	movs	r3, #8
 8008bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bca:	e2e8      	b.n	800919e <UART_SetConfig+0x7ae>
 8008bcc:	2310      	movs	r3, #16
 8008bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bd2:	e2e4      	b.n	800919e <UART_SetConfig+0x7ae>
 8008bd4:	2320      	movs	r3, #32
 8008bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bda:	e2e0      	b.n	800919e <UART_SetConfig+0x7ae>
 8008bdc:	2340      	movs	r3, #64	; 0x40
 8008bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008be2:	e2dc      	b.n	800919e <UART_SetConfig+0x7ae>
 8008be4:	2380      	movs	r3, #128	; 0x80
 8008be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bea:	e2d8      	b.n	800919e <UART_SetConfig+0x7ae>
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a4f      	ldr	r2, [pc, #316]	; (8008d30 <UART_SetConfig+0x340>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d130      	bne.n	8008c58 <UART_SetConfig+0x268>
 8008bf6:	4b4c      	ldr	r3, [pc, #304]	; (8008d28 <UART_SetConfig+0x338>)
 8008bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bfa:	f003 0307 	and.w	r3, r3, #7
 8008bfe:	2b05      	cmp	r3, #5
 8008c00:	d826      	bhi.n	8008c50 <UART_SetConfig+0x260>
 8008c02:	a201      	add	r2, pc, #4	; (adr r2, 8008c08 <UART_SetConfig+0x218>)
 8008c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c08:	08008c21 	.word	0x08008c21
 8008c0c:	08008c29 	.word	0x08008c29
 8008c10:	08008c31 	.word	0x08008c31
 8008c14:	08008c39 	.word	0x08008c39
 8008c18:	08008c41 	.word	0x08008c41
 8008c1c:	08008c49 	.word	0x08008c49
 8008c20:	2300      	movs	r3, #0
 8008c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c26:	e2ba      	b.n	800919e <UART_SetConfig+0x7ae>
 8008c28:	2304      	movs	r3, #4
 8008c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c2e:	e2b6      	b.n	800919e <UART_SetConfig+0x7ae>
 8008c30:	2308      	movs	r3, #8
 8008c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c36:	e2b2      	b.n	800919e <UART_SetConfig+0x7ae>
 8008c38:	2310      	movs	r3, #16
 8008c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c3e:	e2ae      	b.n	800919e <UART_SetConfig+0x7ae>
 8008c40:	2320      	movs	r3, #32
 8008c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c46:	e2aa      	b.n	800919e <UART_SetConfig+0x7ae>
 8008c48:	2340      	movs	r3, #64	; 0x40
 8008c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c4e:	e2a6      	b.n	800919e <UART_SetConfig+0x7ae>
 8008c50:	2380      	movs	r3, #128	; 0x80
 8008c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c56:	e2a2      	b.n	800919e <UART_SetConfig+0x7ae>
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a35      	ldr	r2, [pc, #212]	; (8008d34 <UART_SetConfig+0x344>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d130      	bne.n	8008cc4 <UART_SetConfig+0x2d4>
 8008c62:	4b31      	ldr	r3, [pc, #196]	; (8008d28 <UART_SetConfig+0x338>)
 8008c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c66:	f003 0307 	and.w	r3, r3, #7
 8008c6a:	2b05      	cmp	r3, #5
 8008c6c:	d826      	bhi.n	8008cbc <UART_SetConfig+0x2cc>
 8008c6e:	a201      	add	r2, pc, #4	; (adr r2, 8008c74 <UART_SetConfig+0x284>)
 8008c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c74:	08008c8d 	.word	0x08008c8d
 8008c78:	08008c95 	.word	0x08008c95
 8008c7c:	08008c9d 	.word	0x08008c9d
 8008c80:	08008ca5 	.word	0x08008ca5
 8008c84:	08008cad 	.word	0x08008cad
 8008c88:	08008cb5 	.word	0x08008cb5
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c92:	e284      	b.n	800919e <UART_SetConfig+0x7ae>
 8008c94:	2304      	movs	r3, #4
 8008c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c9a:	e280      	b.n	800919e <UART_SetConfig+0x7ae>
 8008c9c:	2308      	movs	r3, #8
 8008c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ca2:	e27c      	b.n	800919e <UART_SetConfig+0x7ae>
 8008ca4:	2310      	movs	r3, #16
 8008ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008caa:	e278      	b.n	800919e <UART_SetConfig+0x7ae>
 8008cac:	2320      	movs	r3, #32
 8008cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cb2:	e274      	b.n	800919e <UART_SetConfig+0x7ae>
 8008cb4:	2340      	movs	r3, #64	; 0x40
 8008cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cba:	e270      	b.n	800919e <UART_SetConfig+0x7ae>
 8008cbc:	2380      	movs	r3, #128	; 0x80
 8008cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cc2:	e26c      	b.n	800919e <UART_SetConfig+0x7ae>
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a1b      	ldr	r2, [pc, #108]	; (8008d38 <UART_SetConfig+0x348>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d142      	bne.n	8008d54 <UART_SetConfig+0x364>
 8008cce:	4b16      	ldr	r3, [pc, #88]	; (8008d28 <UART_SetConfig+0x338>)
 8008cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cd2:	f003 0307 	and.w	r3, r3, #7
 8008cd6:	2b05      	cmp	r3, #5
 8008cd8:	d838      	bhi.n	8008d4c <UART_SetConfig+0x35c>
 8008cda:	a201      	add	r2, pc, #4	; (adr r2, 8008ce0 <UART_SetConfig+0x2f0>)
 8008cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce0:	08008cf9 	.word	0x08008cf9
 8008ce4:	08008d01 	.word	0x08008d01
 8008ce8:	08008d09 	.word	0x08008d09
 8008cec:	08008d11 	.word	0x08008d11
 8008cf0:	08008d3d 	.word	0x08008d3d
 8008cf4:	08008d45 	.word	0x08008d45
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cfe:	e24e      	b.n	800919e <UART_SetConfig+0x7ae>
 8008d00:	2304      	movs	r3, #4
 8008d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d06:	e24a      	b.n	800919e <UART_SetConfig+0x7ae>
 8008d08:	2308      	movs	r3, #8
 8008d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d0e:	e246      	b.n	800919e <UART_SetConfig+0x7ae>
 8008d10:	2310      	movs	r3, #16
 8008d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d16:	e242      	b.n	800919e <UART_SetConfig+0x7ae>
 8008d18:	cfff69f3 	.word	0xcfff69f3
 8008d1c:	58000c00 	.word	0x58000c00
 8008d20:	11fff4ff 	.word	0x11fff4ff
 8008d24:	40011000 	.word	0x40011000
 8008d28:	58024400 	.word	0x58024400
 8008d2c:	40004400 	.word	0x40004400
 8008d30:	40004800 	.word	0x40004800
 8008d34:	40004c00 	.word	0x40004c00
 8008d38:	40005000 	.word	0x40005000
 8008d3c:	2320      	movs	r3, #32
 8008d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d42:	e22c      	b.n	800919e <UART_SetConfig+0x7ae>
 8008d44:	2340      	movs	r3, #64	; 0x40
 8008d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d4a:	e228      	b.n	800919e <UART_SetConfig+0x7ae>
 8008d4c:	2380      	movs	r3, #128	; 0x80
 8008d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d52:	e224      	b.n	800919e <UART_SetConfig+0x7ae>
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4ab1      	ldr	r2, [pc, #708]	; (8009020 <UART_SetConfig+0x630>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d176      	bne.n	8008e4c <UART_SetConfig+0x45c>
 8008d5e:	4bb1      	ldr	r3, [pc, #708]	; (8009024 <UART_SetConfig+0x634>)
 8008d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d66:	2b28      	cmp	r3, #40	; 0x28
 8008d68:	d86c      	bhi.n	8008e44 <UART_SetConfig+0x454>
 8008d6a:	a201      	add	r2, pc, #4	; (adr r2, 8008d70 <UART_SetConfig+0x380>)
 8008d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d70:	08008e15 	.word	0x08008e15
 8008d74:	08008e45 	.word	0x08008e45
 8008d78:	08008e45 	.word	0x08008e45
 8008d7c:	08008e45 	.word	0x08008e45
 8008d80:	08008e45 	.word	0x08008e45
 8008d84:	08008e45 	.word	0x08008e45
 8008d88:	08008e45 	.word	0x08008e45
 8008d8c:	08008e45 	.word	0x08008e45
 8008d90:	08008e1d 	.word	0x08008e1d
 8008d94:	08008e45 	.word	0x08008e45
 8008d98:	08008e45 	.word	0x08008e45
 8008d9c:	08008e45 	.word	0x08008e45
 8008da0:	08008e45 	.word	0x08008e45
 8008da4:	08008e45 	.word	0x08008e45
 8008da8:	08008e45 	.word	0x08008e45
 8008dac:	08008e45 	.word	0x08008e45
 8008db0:	08008e25 	.word	0x08008e25
 8008db4:	08008e45 	.word	0x08008e45
 8008db8:	08008e45 	.word	0x08008e45
 8008dbc:	08008e45 	.word	0x08008e45
 8008dc0:	08008e45 	.word	0x08008e45
 8008dc4:	08008e45 	.word	0x08008e45
 8008dc8:	08008e45 	.word	0x08008e45
 8008dcc:	08008e45 	.word	0x08008e45
 8008dd0:	08008e2d 	.word	0x08008e2d
 8008dd4:	08008e45 	.word	0x08008e45
 8008dd8:	08008e45 	.word	0x08008e45
 8008ddc:	08008e45 	.word	0x08008e45
 8008de0:	08008e45 	.word	0x08008e45
 8008de4:	08008e45 	.word	0x08008e45
 8008de8:	08008e45 	.word	0x08008e45
 8008dec:	08008e45 	.word	0x08008e45
 8008df0:	08008e35 	.word	0x08008e35
 8008df4:	08008e45 	.word	0x08008e45
 8008df8:	08008e45 	.word	0x08008e45
 8008dfc:	08008e45 	.word	0x08008e45
 8008e00:	08008e45 	.word	0x08008e45
 8008e04:	08008e45 	.word	0x08008e45
 8008e08:	08008e45 	.word	0x08008e45
 8008e0c:	08008e45 	.word	0x08008e45
 8008e10:	08008e3d 	.word	0x08008e3d
 8008e14:	2301      	movs	r3, #1
 8008e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e1a:	e1c0      	b.n	800919e <UART_SetConfig+0x7ae>
 8008e1c:	2304      	movs	r3, #4
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e22:	e1bc      	b.n	800919e <UART_SetConfig+0x7ae>
 8008e24:	2308      	movs	r3, #8
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e2a:	e1b8      	b.n	800919e <UART_SetConfig+0x7ae>
 8008e2c:	2310      	movs	r3, #16
 8008e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e32:	e1b4      	b.n	800919e <UART_SetConfig+0x7ae>
 8008e34:	2320      	movs	r3, #32
 8008e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e3a:	e1b0      	b.n	800919e <UART_SetConfig+0x7ae>
 8008e3c:	2340      	movs	r3, #64	; 0x40
 8008e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e42:	e1ac      	b.n	800919e <UART_SetConfig+0x7ae>
 8008e44:	2380      	movs	r3, #128	; 0x80
 8008e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e4a:	e1a8      	b.n	800919e <UART_SetConfig+0x7ae>
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a75      	ldr	r2, [pc, #468]	; (8009028 <UART_SetConfig+0x638>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d130      	bne.n	8008eb8 <UART_SetConfig+0x4c8>
 8008e56:	4b73      	ldr	r3, [pc, #460]	; (8009024 <UART_SetConfig+0x634>)
 8008e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e5a:	f003 0307 	and.w	r3, r3, #7
 8008e5e:	2b05      	cmp	r3, #5
 8008e60:	d826      	bhi.n	8008eb0 <UART_SetConfig+0x4c0>
 8008e62:	a201      	add	r2, pc, #4	; (adr r2, 8008e68 <UART_SetConfig+0x478>)
 8008e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e68:	08008e81 	.word	0x08008e81
 8008e6c:	08008e89 	.word	0x08008e89
 8008e70:	08008e91 	.word	0x08008e91
 8008e74:	08008e99 	.word	0x08008e99
 8008e78:	08008ea1 	.word	0x08008ea1
 8008e7c:	08008ea9 	.word	0x08008ea9
 8008e80:	2300      	movs	r3, #0
 8008e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e86:	e18a      	b.n	800919e <UART_SetConfig+0x7ae>
 8008e88:	2304      	movs	r3, #4
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e8e:	e186      	b.n	800919e <UART_SetConfig+0x7ae>
 8008e90:	2308      	movs	r3, #8
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e96:	e182      	b.n	800919e <UART_SetConfig+0x7ae>
 8008e98:	2310      	movs	r3, #16
 8008e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e9e:	e17e      	b.n	800919e <UART_SetConfig+0x7ae>
 8008ea0:	2320      	movs	r3, #32
 8008ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ea6:	e17a      	b.n	800919e <UART_SetConfig+0x7ae>
 8008ea8:	2340      	movs	r3, #64	; 0x40
 8008eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eae:	e176      	b.n	800919e <UART_SetConfig+0x7ae>
 8008eb0:	2380      	movs	r3, #128	; 0x80
 8008eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eb6:	e172      	b.n	800919e <UART_SetConfig+0x7ae>
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a5b      	ldr	r2, [pc, #364]	; (800902c <UART_SetConfig+0x63c>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d130      	bne.n	8008f24 <UART_SetConfig+0x534>
 8008ec2:	4b58      	ldr	r3, [pc, #352]	; (8009024 <UART_SetConfig+0x634>)
 8008ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ec6:	f003 0307 	and.w	r3, r3, #7
 8008eca:	2b05      	cmp	r3, #5
 8008ecc:	d826      	bhi.n	8008f1c <UART_SetConfig+0x52c>
 8008ece:	a201      	add	r2, pc, #4	; (adr r2, 8008ed4 <UART_SetConfig+0x4e4>)
 8008ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed4:	08008eed 	.word	0x08008eed
 8008ed8:	08008ef5 	.word	0x08008ef5
 8008edc:	08008efd 	.word	0x08008efd
 8008ee0:	08008f05 	.word	0x08008f05
 8008ee4:	08008f0d 	.word	0x08008f0d
 8008ee8:	08008f15 	.word	0x08008f15
 8008eec:	2300      	movs	r3, #0
 8008eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ef2:	e154      	b.n	800919e <UART_SetConfig+0x7ae>
 8008ef4:	2304      	movs	r3, #4
 8008ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008efa:	e150      	b.n	800919e <UART_SetConfig+0x7ae>
 8008efc:	2308      	movs	r3, #8
 8008efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f02:	e14c      	b.n	800919e <UART_SetConfig+0x7ae>
 8008f04:	2310      	movs	r3, #16
 8008f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f0a:	e148      	b.n	800919e <UART_SetConfig+0x7ae>
 8008f0c:	2320      	movs	r3, #32
 8008f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f12:	e144      	b.n	800919e <UART_SetConfig+0x7ae>
 8008f14:	2340      	movs	r3, #64	; 0x40
 8008f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f1a:	e140      	b.n	800919e <UART_SetConfig+0x7ae>
 8008f1c:	2380      	movs	r3, #128	; 0x80
 8008f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f22:	e13c      	b.n	800919e <UART_SetConfig+0x7ae>
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a41      	ldr	r2, [pc, #260]	; (8009030 <UART_SetConfig+0x640>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	f040 8082 	bne.w	8009034 <UART_SetConfig+0x644>
 8008f30:	4b3c      	ldr	r3, [pc, #240]	; (8009024 <UART_SetConfig+0x634>)
 8008f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f38:	2b28      	cmp	r3, #40	; 0x28
 8008f3a:	d86d      	bhi.n	8009018 <UART_SetConfig+0x628>
 8008f3c:	a201      	add	r2, pc, #4	; (adr r2, 8008f44 <UART_SetConfig+0x554>)
 8008f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f42:	bf00      	nop
 8008f44:	08008fe9 	.word	0x08008fe9
 8008f48:	08009019 	.word	0x08009019
 8008f4c:	08009019 	.word	0x08009019
 8008f50:	08009019 	.word	0x08009019
 8008f54:	08009019 	.word	0x08009019
 8008f58:	08009019 	.word	0x08009019
 8008f5c:	08009019 	.word	0x08009019
 8008f60:	08009019 	.word	0x08009019
 8008f64:	08008ff1 	.word	0x08008ff1
 8008f68:	08009019 	.word	0x08009019
 8008f6c:	08009019 	.word	0x08009019
 8008f70:	08009019 	.word	0x08009019
 8008f74:	08009019 	.word	0x08009019
 8008f78:	08009019 	.word	0x08009019
 8008f7c:	08009019 	.word	0x08009019
 8008f80:	08009019 	.word	0x08009019
 8008f84:	08008ff9 	.word	0x08008ff9
 8008f88:	08009019 	.word	0x08009019
 8008f8c:	08009019 	.word	0x08009019
 8008f90:	08009019 	.word	0x08009019
 8008f94:	08009019 	.word	0x08009019
 8008f98:	08009019 	.word	0x08009019
 8008f9c:	08009019 	.word	0x08009019
 8008fa0:	08009019 	.word	0x08009019
 8008fa4:	08009001 	.word	0x08009001
 8008fa8:	08009019 	.word	0x08009019
 8008fac:	08009019 	.word	0x08009019
 8008fb0:	08009019 	.word	0x08009019
 8008fb4:	08009019 	.word	0x08009019
 8008fb8:	08009019 	.word	0x08009019
 8008fbc:	08009019 	.word	0x08009019
 8008fc0:	08009019 	.word	0x08009019
 8008fc4:	08009009 	.word	0x08009009
 8008fc8:	08009019 	.word	0x08009019
 8008fcc:	08009019 	.word	0x08009019
 8008fd0:	08009019 	.word	0x08009019
 8008fd4:	08009019 	.word	0x08009019
 8008fd8:	08009019 	.word	0x08009019
 8008fdc:	08009019 	.word	0x08009019
 8008fe0:	08009019 	.word	0x08009019
 8008fe4:	08009011 	.word	0x08009011
 8008fe8:	2301      	movs	r3, #1
 8008fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fee:	e0d6      	b.n	800919e <UART_SetConfig+0x7ae>
 8008ff0:	2304      	movs	r3, #4
 8008ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ff6:	e0d2      	b.n	800919e <UART_SetConfig+0x7ae>
 8008ff8:	2308      	movs	r3, #8
 8008ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ffe:	e0ce      	b.n	800919e <UART_SetConfig+0x7ae>
 8009000:	2310      	movs	r3, #16
 8009002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009006:	e0ca      	b.n	800919e <UART_SetConfig+0x7ae>
 8009008:	2320      	movs	r3, #32
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800900e:	e0c6      	b.n	800919e <UART_SetConfig+0x7ae>
 8009010:	2340      	movs	r3, #64	; 0x40
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009016:	e0c2      	b.n	800919e <UART_SetConfig+0x7ae>
 8009018:	2380      	movs	r3, #128	; 0x80
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800901e:	e0be      	b.n	800919e <UART_SetConfig+0x7ae>
 8009020:	40011400 	.word	0x40011400
 8009024:	58024400 	.word	0x58024400
 8009028:	40007800 	.word	0x40007800
 800902c:	40007c00 	.word	0x40007c00
 8009030:	40011800 	.word	0x40011800
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4aad      	ldr	r2, [pc, #692]	; (80092f0 <UART_SetConfig+0x900>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d176      	bne.n	800912c <UART_SetConfig+0x73c>
 800903e:	4bad      	ldr	r3, [pc, #692]	; (80092f4 <UART_SetConfig+0x904>)
 8009040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009042:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009046:	2b28      	cmp	r3, #40	; 0x28
 8009048:	d86c      	bhi.n	8009124 <UART_SetConfig+0x734>
 800904a:	a201      	add	r2, pc, #4	; (adr r2, 8009050 <UART_SetConfig+0x660>)
 800904c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009050:	080090f5 	.word	0x080090f5
 8009054:	08009125 	.word	0x08009125
 8009058:	08009125 	.word	0x08009125
 800905c:	08009125 	.word	0x08009125
 8009060:	08009125 	.word	0x08009125
 8009064:	08009125 	.word	0x08009125
 8009068:	08009125 	.word	0x08009125
 800906c:	08009125 	.word	0x08009125
 8009070:	080090fd 	.word	0x080090fd
 8009074:	08009125 	.word	0x08009125
 8009078:	08009125 	.word	0x08009125
 800907c:	08009125 	.word	0x08009125
 8009080:	08009125 	.word	0x08009125
 8009084:	08009125 	.word	0x08009125
 8009088:	08009125 	.word	0x08009125
 800908c:	08009125 	.word	0x08009125
 8009090:	08009105 	.word	0x08009105
 8009094:	08009125 	.word	0x08009125
 8009098:	08009125 	.word	0x08009125
 800909c:	08009125 	.word	0x08009125
 80090a0:	08009125 	.word	0x08009125
 80090a4:	08009125 	.word	0x08009125
 80090a8:	08009125 	.word	0x08009125
 80090ac:	08009125 	.word	0x08009125
 80090b0:	0800910d 	.word	0x0800910d
 80090b4:	08009125 	.word	0x08009125
 80090b8:	08009125 	.word	0x08009125
 80090bc:	08009125 	.word	0x08009125
 80090c0:	08009125 	.word	0x08009125
 80090c4:	08009125 	.word	0x08009125
 80090c8:	08009125 	.word	0x08009125
 80090cc:	08009125 	.word	0x08009125
 80090d0:	08009115 	.word	0x08009115
 80090d4:	08009125 	.word	0x08009125
 80090d8:	08009125 	.word	0x08009125
 80090dc:	08009125 	.word	0x08009125
 80090e0:	08009125 	.word	0x08009125
 80090e4:	08009125 	.word	0x08009125
 80090e8:	08009125 	.word	0x08009125
 80090ec:	08009125 	.word	0x08009125
 80090f0:	0800911d 	.word	0x0800911d
 80090f4:	2301      	movs	r3, #1
 80090f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090fa:	e050      	b.n	800919e <UART_SetConfig+0x7ae>
 80090fc:	2304      	movs	r3, #4
 80090fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009102:	e04c      	b.n	800919e <UART_SetConfig+0x7ae>
 8009104:	2308      	movs	r3, #8
 8009106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800910a:	e048      	b.n	800919e <UART_SetConfig+0x7ae>
 800910c:	2310      	movs	r3, #16
 800910e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009112:	e044      	b.n	800919e <UART_SetConfig+0x7ae>
 8009114:	2320      	movs	r3, #32
 8009116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800911a:	e040      	b.n	800919e <UART_SetConfig+0x7ae>
 800911c:	2340      	movs	r3, #64	; 0x40
 800911e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009122:	e03c      	b.n	800919e <UART_SetConfig+0x7ae>
 8009124:	2380      	movs	r3, #128	; 0x80
 8009126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800912a:	e038      	b.n	800919e <UART_SetConfig+0x7ae>
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a71      	ldr	r2, [pc, #452]	; (80092f8 <UART_SetConfig+0x908>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d130      	bne.n	8009198 <UART_SetConfig+0x7a8>
 8009136:	4b6f      	ldr	r3, [pc, #444]	; (80092f4 <UART_SetConfig+0x904>)
 8009138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800913a:	f003 0307 	and.w	r3, r3, #7
 800913e:	2b05      	cmp	r3, #5
 8009140:	d826      	bhi.n	8009190 <UART_SetConfig+0x7a0>
 8009142:	a201      	add	r2, pc, #4	; (adr r2, 8009148 <UART_SetConfig+0x758>)
 8009144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009148:	08009161 	.word	0x08009161
 800914c:	08009169 	.word	0x08009169
 8009150:	08009171 	.word	0x08009171
 8009154:	08009179 	.word	0x08009179
 8009158:	08009181 	.word	0x08009181
 800915c:	08009189 	.word	0x08009189
 8009160:	2302      	movs	r3, #2
 8009162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009166:	e01a      	b.n	800919e <UART_SetConfig+0x7ae>
 8009168:	2304      	movs	r3, #4
 800916a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800916e:	e016      	b.n	800919e <UART_SetConfig+0x7ae>
 8009170:	2308      	movs	r3, #8
 8009172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009176:	e012      	b.n	800919e <UART_SetConfig+0x7ae>
 8009178:	2310      	movs	r3, #16
 800917a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800917e:	e00e      	b.n	800919e <UART_SetConfig+0x7ae>
 8009180:	2320      	movs	r3, #32
 8009182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009186:	e00a      	b.n	800919e <UART_SetConfig+0x7ae>
 8009188:	2340      	movs	r3, #64	; 0x40
 800918a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800918e:	e006      	b.n	800919e <UART_SetConfig+0x7ae>
 8009190:	2380      	movs	r3, #128	; 0x80
 8009192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009196:	e002      	b.n	800919e <UART_SetConfig+0x7ae>
 8009198:	2380      	movs	r3, #128	; 0x80
 800919a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a55      	ldr	r2, [pc, #340]	; (80092f8 <UART_SetConfig+0x908>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	f040 80f8 	bne.w	800939a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80091aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80091ae:	2b20      	cmp	r3, #32
 80091b0:	dc46      	bgt.n	8009240 <UART_SetConfig+0x850>
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	db75      	blt.n	80092a2 <UART_SetConfig+0x8b2>
 80091b6:	3b02      	subs	r3, #2
 80091b8:	2b1e      	cmp	r3, #30
 80091ba:	d872      	bhi.n	80092a2 <UART_SetConfig+0x8b2>
 80091bc:	a201      	add	r2, pc, #4	; (adr r2, 80091c4 <UART_SetConfig+0x7d4>)
 80091be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c2:	bf00      	nop
 80091c4:	08009247 	.word	0x08009247
 80091c8:	080092a3 	.word	0x080092a3
 80091cc:	0800924f 	.word	0x0800924f
 80091d0:	080092a3 	.word	0x080092a3
 80091d4:	080092a3 	.word	0x080092a3
 80091d8:	080092a3 	.word	0x080092a3
 80091dc:	0800925f 	.word	0x0800925f
 80091e0:	080092a3 	.word	0x080092a3
 80091e4:	080092a3 	.word	0x080092a3
 80091e8:	080092a3 	.word	0x080092a3
 80091ec:	080092a3 	.word	0x080092a3
 80091f0:	080092a3 	.word	0x080092a3
 80091f4:	080092a3 	.word	0x080092a3
 80091f8:	080092a3 	.word	0x080092a3
 80091fc:	0800926f 	.word	0x0800926f
 8009200:	080092a3 	.word	0x080092a3
 8009204:	080092a3 	.word	0x080092a3
 8009208:	080092a3 	.word	0x080092a3
 800920c:	080092a3 	.word	0x080092a3
 8009210:	080092a3 	.word	0x080092a3
 8009214:	080092a3 	.word	0x080092a3
 8009218:	080092a3 	.word	0x080092a3
 800921c:	080092a3 	.word	0x080092a3
 8009220:	080092a3 	.word	0x080092a3
 8009224:	080092a3 	.word	0x080092a3
 8009228:	080092a3 	.word	0x080092a3
 800922c:	080092a3 	.word	0x080092a3
 8009230:	080092a3 	.word	0x080092a3
 8009234:	080092a3 	.word	0x080092a3
 8009238:	080092a3 	.word	0x080092a3
 800923c:	08009295 	.word	0x08009295
 8009240:	2b40      	cmp	r3, #64	; 0x40
 8009242:	d02a      	beq.n	800929a <UART_SetConfig+0x8aa>
 8009244:	e02d      	b.n	80092a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009246:	f7fe f805 	bl	8007254 <HAL_RCCEx_GetD3PCLK1Freq>
 800924a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800924c:	e02f      	b.n	80092ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800924e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009252:	4618      	mov	r0, r3
 8009254:	f7fe f814 	bl	8007280 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800925c:	e027      	b.n	80092ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800925e:	f107 0318 	add.w	r3, r7, #24
 8009262:	4618      	mov	r0, r3
 8009264:	f7fe f960 	bl	8007528 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800926c:	e01f      	b.n	80092ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800926e:	4b21      	ldr	r3, [pc, #132]	; (80092f4 <UART_SetConfig+0x904>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f003 0320 	and.w	r3, r3, #32
 8009276:	2b00      	cmp	r3, #0
 8009278:	d009      	beq.n	800928e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800927a:	4b1e      	ldr	r3, [pc, #120]	; (80092f4 <UART_SetConfig+0x904>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	08db      	lsrs	r3, r3, #3
 8009280:	f003 0303 	and.w	r3, r3, #3
 8009284:	4a1d      	ldr	r2, [pc, #116]	; (80092fc <UART_SetConfig+0x90c>)
 8009286:	fa22 f303 	lsr.w	r3, r2, r3
 800928a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800928c:	e00f      	b.n	80092ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800928e:	4b1b      	ldr	r3, [pc, #108]	; (80092fc <UART_SetConfig+0x90c>)
 8009290:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009292:	e00c      	b.n	80092ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009294:	4b1a      	ldr	r3, [pc, #104]	; (8009300 <UART_SetConfig+0x910>)
 8009296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009298:	e009      	b.n	80092ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800929a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800929e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092a0:	e005      	b.n	80092ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80092a2:	2300      	movs	r3, #0
 80092a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80092ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80092ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f000 81ee 	beq.w	8009692 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ba:	4a12      	ldr	r2, [pc, #72]	; (8009304 <UART_SetConfig+0x914>)
 80092bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092c0:	461a      	mov	r2, r3
 80092c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80092c8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	685a      	ldr	r2, [r3, #4]
 80092ce:	4613      	mov	r3, r2
 80092d0:	005b      	lsls	r3, r3, #1
 80092d2:	4413      	add	r3, r2
 80092d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d305      	bcc.n	80092e6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d910      	bls.n	8009308 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80092ec:	e1d1      	b.n	8009692 <UART_SetConfig+0xca2>
 80092ee:	bf00      	nop
 80092f0:	40011c00 	.word	0x40011c00
 80092f4:	58024400 	.word	0x58024400
 80092f8:	58000c00 	.word	0x58000c00
 80092fc:	03d09000 	.word	0x03d09000
 8009300:	003d0900 	.word	0x003d0900
 8009304:	0801e178 	.word	0x0801e178
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800930a:	2200      	movs	r2, #0
 800930c:	60bb      	str	r3, [r7, #8]
 800930e:	60fa      	str	r2, [r7, #12]
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009314:	4ac0      	ldr	r2, [pc, #768]	; (8009618 <UART_SetConfig+0xc28>)
 8009316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800931a:	b29b      	uxth	r3, r3
 800931c:	2200      	movs	r2, #0
 800931e:	603b      	str	r3, [r7, #0]
 8009320:	607a      	str	r2, [r7, #4]
 8009322:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009326:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800932a:	f7f7 f841 	bl	80003b0 <__aeabi_uldivmod>
 800932e:	4602      	mov	r2, r0
 8009330:	460b      	mov	r3, r1
 8009332:	4610      	mov	r0, r2
 8009334:	4619      	mov	r1, r3
 8009336:	f04f 0200 	mov.w	r2, #0
 800933a:	f04f 0300 	mov.w	r3, #0
 800933e:	020b      	lsls	r3, r1, #8
 8009340:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009344:	0202      	lsls	r2, r0, #8
 8009346:	6979      	ldr	r1, [r7, #20]
 8009348:	6849      	ldr	r1, [r1, #4]
 800934a:	0849      	lsrs	r1, r1, #1
 800934c:	2000      	movs	r0, #0
 800934e:	460c      	mov	r4, r1
 8009350:	4605      	mov	r5, r0
 8009352:	eb12 0804 	adds.w	r8, r2, r4
 8009356:	eb43 0905 	adc.w	r9, r3, r5
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	469a      	mov	sl, r3
 8009362:	4693      	mov	fp, r2
 8009364:	4652      	mov	r2, sl
 8009366:	465b      	mov	r3, fp
 8009368:	4640      	mov	r0, r8
 800936a:	4649      	mov	r1, r9
 800936c:	f7f7 f820 	bl	80003b0 <__aeabi_uldivmod>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	4613      	mov	r3, r2
 8009376:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800937e:	d308      	bcc.n	8009392 <UART_SetConfig+0x9a2>
 8009380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009386:	d204      	bcs.n	8009392 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800938e:	60da      	str	r2, [r3, #12]
 8009390:	e17f      	b.n	8009692 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009398:	e17b      	b.n	8009692 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	69db      	ldr	r3, [r3, #28]
 800939e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093a2:	f040 80bd 	bne.w	8009520 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80093a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80093aa:	2b20      	cmp	r3, #32
 80093ac:	dc48      	bgt.n	8009440 <UART_SetConfig+0xa50>
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	db7b      	blt.n	80094aa <UART_SetConfig+0xaba>
 80093b2:	2b20      	cmp	r3, #32
 80093b4:	d879      	bhi.n	80094aa <UART_SetConfig+0xaba>
 80093b6:	a201      	add	r2, pc, #4	; (adr r2, 80093bc <UART_SetConfig+0x9cc>)
 80093b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093bc:	08009447 	.word	0x08009447
 80093c0:	0800944f 	.word	0x0800944f
 80093c4:	080094ab 	.word	0x080094ab
 80093c8:	080094ab 	.word	0x080094ab
 80093cc:	08009457 	.word	0x08009457
 80093d0:	080094ab 	.word	0x080094ab
 80093d4:	080094ab 	.word	0x080094ab
 80093d8:	080094ab 	.word	0x080094ab
 80093dc:	08009467 	.word	0x08009467
 80093e0:	080094ab 	.word	0x080094ab
 80093e4:	080094ab 	.word	0x080094ab
 80093e8:	080094ab 	.word	0x080094ab
 80093ec:	080094ab 	.word	0x080094ab
 80093f0:	080094ab 	.word	0x080094ab
 80093f4:	080094ab 	.word	0x080094ab
 80093f8:	080094ab 	.word	0x080094ab
 80093fc:	08009477 	.word	0x08009477
 8009400:	080094ab 	.word	0x080094ab
 8009404:	080094ab 	.word	0x080094ab
 8009408:	080094ab 	.word	0x080094ab
 800940c:	080094ab 	.word	0x080094ab
 8009410:	080094ab 	.word	0x080094ab
 8009414:	080094ab 	.word	0x080094ab
 8009418:	080094ab 	.word	0x080094ab
 800941c:	080094ab 	.word	0x080094ab
 8009420:	080094ab 	.word	0x080094ab
 8009424:	080094ab 	.word	0x080094ab
 8009428:	080094ab 	.word	0x080094ab
 800942c:	080094ab 	.word	0x080094ab
 8009430:	080094ab 	.word	0x080094ab
 8009434:	080094ab 	.word	0x080094ab
 8009438:	080094ab 	.word	0x080094ab
 800943c:	0800949d 	.word	0x0800949d
 8009440:	2b40      	cmp	r3, #64	; 0x40
 8009442:	d02e      	beq.n	80094a2 <UART_SetConfig+0xab2>
 8009444:	e031      	b.n	80094aa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009446:	f7fc fcf7 	bl	8005e38 <HAL_RCC_GetPCLK1Freq>
 800944a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800944c:	e033      	b.n	80094b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800944e:	f7fc fd09 	bl	8005e64 <HAL_RCC_GetPCLK2Freq>
 8009452:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009454:	e02f      	b.n	80094b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800945a:	4618      	mov	r0, r3
 800945c:	f7fd ff10 	bl	8007280 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009464:	e027      	b.n	80094b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009466:	f107 0318 	add.w	r3, r7, #24
 800946a:	4618      	mov	r0, r3
 800946c:	f7fe f85c 	bl	8007528 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009474:	e01f      	b.n	80094b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009476:	4b69      	ldr	r3, [pc, #420]	; (800961c <UART_SetConfig+0xc2c>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f003 0320 	and.w	r3, r3, #32
 800947e:	2b00      	cmp	r3, #0
 8009480:	d009      	beq.n	8009496 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009482:	4b66      	ldr	r3, [pc, #408]	; (800961c <UART_SetConfig+0xc2c>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	08db      	lsrs	r3, r3, #3
 8009488:	f003 0303 	and.w	r3, r3, #3
 800948c:	4a64      	ldr	r2, [pc, #400]	; (8009620 <UART_SetConfig+0xc30>)
 800948e:	fa22 f303 	lsr.w	r3, r2, r3
 8009492:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009494:	e00f      	b.n	80094b6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009496:	4b62      	ldr	r3, [pc, #392]	; (8009620 <UART_SetConfig+0xc30>)
 8009498:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800949a:	e00c      	b.n	80094b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800949c:	4b61      	ldr	r3, [pc, #388]	; (8009624 <UART_SetConfig+0xc34>)
 800949e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094a0:	e009      	b.n	80094b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094a8:	e005      	b.n	80094b6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80094aa:	2300      	movs	r3, #0
 80094ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80094b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80094b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 80ea 	beq.w	8009692 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c2:	4a55      	ldr	r2, [pc, #340]	; (8009618 <UART_SetConfig+0xc28>)
 80094c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094c8:	461a      	mov	r2, r3
 80094ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80094d0:	005a      	lsls	r2, r3, #1
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	085b      	lsrs	r3, r3, #1
 80094d8:	441a      	add	r2, r3
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	fbb2 f3f3 	udiv	r3, r2, r3
 80094e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e6:	2b0f      	cmp	r3, #15
 80094e8:	d916      	bls.n	8009518 <UART_SetConfig+0xb28>
 80094ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094f0:	d212      	bcs.n	8009518 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	f023 030f 	bic.w	r3, r3, #15
 80094fa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fe:	085b      	lsrs	r3, r3, #1
 8009500:	b29b      	uxth	r3, r3
 8009502:	f003 0307 	and.w	r3, r3, #7
 8009506:	b29a      	uxth	r2, r3
 8009508:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800950a:	4313      	orrs	r3, r2
 800950c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009514:	60da      	str	r2, [r3, #12]
 8009516:	e0bc      	b.n	8009692 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800951e:	e0b8      	b.n	8009692 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009520:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009524:	2b20      	cmp	r3, #32
 8009526:	dc4b      	bgt.n	80095c0 <UART_SetConfig+0xbd0>
 8009528:	2b00      	cmp	r3, #0
 800952a:	f2c0 8087 	blt.w	800963c <UART_SetConfig+0xc4c>
 800952e:	2b20      	cmp	r3, #32
 8009530:	f200 8084 	bhi.w	800963c <UART_SetConfig+0xc4c>
 8009534:	a201      	add	r2, pc, #4	; (adr r2, 800953c <UART_SetConfig+0xb4c>)
 8009536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953a:	bf00      	nop
 800953c:	080095c7 	.word	0x080095c7
 8009540:	080095cf 	.word	0x080095cf
 8009544:	0800963d 	.word	0x0800963d
 8009548:	0800963d 	.word	0x0800963d
 800954c:	080095d7 	.word	0x080095d7
 8009550:	0800963d 	.word	0x0800963d
 8009554:	0800963d 	.word	0x0800963d
 8009558:	0800963d 	.word	0x0800963d
 800955c:	080095e7 	.word	0x080095e7
 8009560:	0800963d 	.word	0x0800963d
 8009564:	0800963d 	.word	0x0800963d
 8009568:	0800963d 	.word	0x0800963d
 800956c:	0800963d 	.word	0x0800963d
 8009570:	0800963d 	.word	0x0800963d
 8009574:	0800963d 	.word	0x0800963d
 8009578:	0800963d 	.word	0x0800963d
 800957c:	080095f7 	.word	0x080095f7
 8009580:	0800963d 	.word	0x0800963d
 8009584:	0800963d 	.word	0x0800963d
 8009588:	0800963d 	.word	0x0800963d
 800958c:	0800963d 	.word	0x0800963d
 8009590:	0800963d 	.word	0x0800963d
 8009594:	0800963d 	.word	0x0800963d
 8009598:	0800963d 	.word	0x0800963d
 800959c:	0800963d 	.word	0x0800963d
 80095a0:	0800963d 	.word	0x0800963d
 80095a4:	0800963d 	.word	0x0800963d
 80095a8:	0800963d 	.word	0x0800963d
 80095ac:	0800963d 	.word	0x0800963d
 80095b0:	0800963d 	.word	0x0800963d
 80095b4:	0800963d 	.word	0x0800963d
 80095b8:	0800963d 	.word	0x0800963d
 80095bc:	0800962f 	.word	0x0800962f
 80095c0:	2b40      	cmp	r3, #64	; 0x40
 80095c2:	d037      	beq.n	8009634 <UART_SetConfig+0xc44>
 80095c4:	e03a      	b.n	800963c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095c6:	f7fc fc37 	bl	8005e38 <HAL_RCC_GetPCLK1Freq>
 80095ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80095cc:	e03c      	b.n	8009648 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095ce:	f7fc fc49 	bl	8005e64 <HAL_RCC_GetPCLK2Freq>
 80095d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80095d4:	e038      	b.n	8009648 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fd fe50 	bl	8007280 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095e4:	e030      	b.n	8009648 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095e6:	f107 0318 	add.w	r3, r7, #24
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7fd ff9c 	bl	8007528 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095f4:	e028      	b.n	8009648 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095f6:	4b09      	ldr	r3, [pc, #36]	; (800961c <UART_SetConfig+0xc2c>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f003 0320 	and.w	r3, r3, #32
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d012      	beq.n	8009628 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009602:	4b06      	ldr	r3, [pc, #24]	; (800961c <UART_SetConfig+0xc2c>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	08db      	lsrs	r3, r3, #3
 8009608:	f003 0303 	and.w	r3, r3, #3
 800960c:	4a04      	ldr	r2, [pc, #16]	; (8009620 <UART_SetConfig+0xc30>)
 800960e:	fa22 f303 	lsr.w	r3, r2, r3
 8009612:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009614:	e018      	b.n	8009648 <UART_SetConfig+0xc58>
 8009616:	bf00      	nop
 8009618:	0801e178 	.word	0x0801e178
 800961c:	58024400 	.word	0x58024400
 8009620:	03d09000 	.word	0x03d09000
 8009624:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009628:	4b24      	ldr	r3, [pc, #144]	; (80096bc <UART_SetConfig+0xccc>)
 800962a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800962c:	e00c      	b.n	8009648 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800962e:	4b24      	ldr	r3, [pc, #144]	; (80096c0 <UART_SetConfig+0xcd0>)
 8009630:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009632:	e009      	b.n	8009648 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009634:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009638:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800963a:	e005      	b.n	8009648 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800963c:	2300      	movs	r3, #0
 800963e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009646:	bf00      	nop
    }

    if (pclk != 0U)
 8009648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800964a:	2b00      	cmp	r3, #0
 800964c:	d021      	beq.n	8009692 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009652:	4a1c      	ldr	r2, [pc, #112]	; (80096c4 <UART_SetConfig+0xcd4>)
 8009654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009658:	461a      	mov	r2, r3
 800965a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800965c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	085b      	lsrs	r3, r3, #1
 8009666:	441a      	add	r2, r3
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009670:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009674:	2b0f      	cmp	r3, #15
 8009676:	d909      	bls.n	800968c <UART_SetConfig+0xc9c>
 8009678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800967a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800967e:	d205      	bcs.n	800968c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009682:	b29a      	uxth	r2, r3
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	60da      	str	r2, [r3, #12]
 800968a:	e002      	b.n	8009692 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	2201      	movs	r2, #1
 8009696:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2201      	movs	r2, #1
 800969e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	2200      	movs	r2, #0
 80096a6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	2200      	movs	r2, #0
 80096ac:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80096ae:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3748      	adds	r7, #72	; 0x48
 80096b6:	46bd      	mov	sp, r7
 80096b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096bc:	03d09000 	.word	0x03d09000
 80096c0:	003d0900 	.word	0x003d0900
 80096c4:	0801e178 	.word	0x0801e178

080096c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d4:	f003 0301 	and.w	r3, r3, #1
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d00a      	beq.n	80096f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	430a      	orrs	r2, r1
 80096f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f6:	f003 0302 	and.w	r3, r3, #2
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00a      	beq.n	8009714 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	430a      	orrs	r2, r1
 8009712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009718:	f003 0304 	and.w	r3, r3, #4
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00a      	beq.n	8009736 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	430a      	orrs	r2, r1
 8009734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800973a:	f003 0308 	and.w	r3, r3, #8
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00a      	beq.n	8009758 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	430a      	orrs	r2, r1
 8009756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800975c:	f003 0310 	and.w	r3, r3, #16
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00a      	beq.n	800977a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	430a      	orrs	r2, r1
 8009778:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800977e:	f003 0320 	and.w	r3, r3, #32
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00a      	beq.n	800979c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	430a      	orrs	r2, r1
 800979a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d01a      	beq.n	80097de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	430a      	orrs	r2, r1
 80097bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097c6:	d10a      	bne.n	80097de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	430a      	orrs	r2, r1
 80097dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00a      	beq.n	8009800 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	430a      	orrs	r2, r1
 80097fe:	605a      	str	r2, [r3, #4]
  }
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b098      	sub	sp, #96	; 0x60
 8009810:	af02      	add	r7, sp, #8
 8009812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800981c:	f7f8 fd94 	bl	8002348 <HAL_GetTick>
 8009820:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 0308 	and.w	r3, r3, #8
 800982c:	2b08      	cmp	r3, #8
 800982e:	d12f      	bne.n	8009890 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009830:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009834:	9300      	str	r3, [sp, #0]
 8009836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009838:	2200      	movs	r2, #0
 800983a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 f88e 	bl	8009960 <UART_WaitOnFlagUntilTimeout>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d022      	beq.n	8009890 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009852:	e853 3f00 	ldrex	r3, [r3]
 8009856:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800985a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800985e:	653b      	str	r3, [r7, #80]	; 0x50
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	461a      	mov	r2, r3
 8009866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009868:	647b      	str	r3, [r7, #68]	; 0x44
 800986a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800986e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009870:	e841 2300 	strex	r3, r2, [r1]
 8009874:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009878:	2b00      	cmp	r3, #0
 800987a:	d1e6      	bne.n	800984a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2220      	movs	r2, #32
 8009880:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800988c:	2303      	movs	r3, #3
 800988e:	e063      	b.n	8009958 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 0304 	and.w	r3, r3, #4
 800989a:	2b04      	cmp	r3, #4
 800989c:	d149      	bne.n	8009932 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800989e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098a6:	2200      	movs	r2, #0
 80098a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 f857 	bl	8009960 <UART_WaitOnFlagUntilTimeout>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d03c      	beq.n	8009932 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c0:	e853 3f00 	ldrex	r3, [r3]
 80098c4:	623b      	str	r3, [r7, #32]
   return(result);
 80098c6:	6a3b      	ldr	r3, [r7, #32]
 80098c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	461a      	mov	r2, r3
 80098d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098d6:	633b      	str	r3, [r7, #48]	; 0x30
 80098d8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098de:	e841 2300 	strex	r3, r2, [r1]
 80098e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1e6      	bne.n	80098b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	3308      	adds	r3, #8
 80098f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	e853 3f00 	ldrex	r3, [r3]
 80098f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f023 0301 	bic.w	r3, r3, #1
 8009900:	64bb      	str	r3, [r7, #72]	; 0x48
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3308      	adds	r3, #8
 8009908:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800990a:	61fa      	str	r2, [r7, #28]
 800990c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990e:	69b9      	ldr	r1, [r7, #24]
 8009910:	69fa      	ldr	r2, [r7, #28]
 8009912:	e841 2300 	strex	r3, r2, [r1]
 8009916:	617b      	str	r3, [r7, #20]
   return(result);
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1e5      	bne.n	80098ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2220      	movs	r2, #32
 8009922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800992e:	2303      	movs	r3, #3
 8009930:	e012      	b.n	8009958 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2220      	movs	r2, #32
 8009936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2220      	movs	r2, #32
 800993e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3758      	adds	r7, #88	; 0x58
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	603b      	str	r3, [r7, #0]
 800996c:	4613      	mov	r3, r2
 800996e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009970:	e049      	b.n	8009a06 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009978:	d045      	beq.n	8009a06 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800997a:	f7f8 fce5 	bl	8002348 <HAL_GetTick>
 800997e:	4602      	mov	r2, r0
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	1ad3      	subs	r3, r2, r3
 8009984:	69ba      	ldr	r2, [r7, #24]
 8009986:	429a      	cmp	r2, r3
 8009988:	d302      	bcc.n	8009990 <UART_WaitOnFlagUntilTimeout+0x30>
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d101      	bne.n	8009994 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009990:	2303      	movs	r3, #3
 8009992:	e048      	b.n	8009a26 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 0304 	and.w	r3, r3, #4
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d031      	beq.n	8009a06 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	69db      	ldr	r3, [r3, #28]
 80099a8:	f003 0308 	and.w	r3, r3, #8
 80099ac:	2b08      	cmp	r3, #8
 80099ae:	d110      	bne.n	80099d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2208      	movs	r2, #8
 80099b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f000 f839 	bl	8009a30 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2208      	movs	r2, #8
 80099c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e029      	b.n	8009a26 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	69db      	ldr	r3, [r3, #28]
 80099d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099e0:	d111      	bne.n	8009a06 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80099ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	f000 f81f 	bl	8009a30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2220      	movs	r2, #32
 80099f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009a02:	2303      	movs	r3, #3
 8009a04:	e00f      	b.n	8009a26 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	69da      	ldr	r2, [r3, #28]
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	4013      	ands	r3, r2
 8009a10:	68ba      	ldr	r2, [r7, #8]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	bf0c      	ite	eq
 8009a16:	2301      	moveq	r3, #1
 8009a18:	2300      	movne	r3, #0
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	79fb      	ldrb	r3, [r7, #7]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d0a6      	beq.n	8009972 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
	...

08009a30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b095      	sub	sp, #84	; 0x54
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a40:	e853 3f00 	ldrex	r3, [r3]
 8009a44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	461a      	mov	r2, r3
 8009a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a56:	643b      	str	r3, [r7, #64]	; 0x40
 8009a58:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a5e:	e841 2300 	strex	r3, r2, [r1]
 8009a62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1e6      	bne.n	8009a38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	3308      	adds	r3, #8
 8009a70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a72:	6a3b      	ldr	r3, [r7, #32]
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a7a:	69fa      	ldr	r2, [r7, #28]
 8009a7c:	4b1e      	ldr	r3, [pc, #120]	; (8009af8 <UART_EndRxTransfer+0xc8>)
 8009a7e:	4013      	ands	r3, r2
 8009a80:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	3308      	adds	r3, #8
 8009a88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a92:	e841 2300 	strex	r3, r2, [r1]
 8009a96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1e5      	bne.n	8009a6a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d118      	bne.n	8009ad8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	e853 3f00 	ldrex	r3, [r3]
 8009ab2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	f023 0310 	bic.w	r3, r3, #16
 8009aba:	647b      	str	r3, [r7, #68]	; 0x44
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ac4:	61bb      	str	r3, [r7, #24]
 8009ac6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac8:	6979      	ldr	r1, [r7, #20]
 8009aca:	69ba      	ldr	r2, [r7, #24]
 8009acc:	e841 2300 	strex	r3, r2, [r1]
 8009ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d1e6      	bne.n	8009aa6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2220      	movs	r2, #32
 8009adc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009aec:	bf00      	nop
 8009aee:	3754      	adds	r7, #84	; 0x54
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr
 8009af8:	effffffe 	.word	0xeffffffe

08009afc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f7fe ff52 	bl	80089c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b20:	bf00      	nop
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b088      	sub	sp, #32
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	e853 3f00 	ldrex	r3, [r3]
 8009b3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b44:	61fb      	str	r3, [r7, #28]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	61bb      	str	r3, [r7, #24]
 8009b50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b52:	6979      	ldr	r1, [r7, #20]
 8009b54:	69ba      	ldr	r2, [r7, #24]
 8009b56:	e841 2300 	strex	r3, r2, [r1]
 8009b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1e6      	bne.n	8009b30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2220      	movs	r2, #32
 8009b66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f7fe ff1d 	bl	80089b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b76:	bf00      	nop
 8009b78:	3720      	adds	r7, #32
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b7e:	b480      	push	{r7}
 8009b80:	b083      	sub	sp, #12
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b86:	bf00      	nop
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009b92:	b480      	push	{r7}
 8009b94:	b083      	sub	sp, #12
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009b9a:	bf00      	nop
 8009b9c:	370c      	adds	r7, #12
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b083      	sub	sp, #12
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009bae:	bf00      	nop
 8009bb0:	370c      	adds	r7, #12
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr

08009bba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009bba:	b480      	push	{r7}
 8009bbc:	b085      	sub	sp, #20
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d101      	bne.n	8009bd0 <HAL_UARTEx_DisableFifoMode+0x16>
 8009bcc:	2302      	movs	r3, #2
 8009bce:	e027      	b.n	8009c20 <HAL_UARTEx_DisableFifoMode+0x66>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2224      	movs	r2, #36	; 0x24
 8009bdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f022 0201 	bic.w	r2, r2, #1
 8009bf6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009bfe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2220      	movs	r2, #32
 8009c12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3714      	adds	r7, #20
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d101      	bne.n	8009c44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c40:	2302      	movs	r3, #2
 8009c42:	e02d      	b.n	8009ca0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2224      	movs	r2, #36	; 0x24
 8009c50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f022 0201 	bic.w	r2, r2, #1
 8009c6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	683a      	ldr	r2, [r7, #0]
 8009c7c:	430a      	orrs	r2, r1
 8009c7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f84f 	bl	8009d24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2220      	movs	r2, #32
 8009c92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d101      	bne.n	8009cc0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009cbc:	2302      	movs	r3, #2
 8009cbe:	e02d      	b.n	8009d1c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2224      	movs	r2, #36	; 0x24
 8009ccc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f022 0201 	bic.w	r2, r2, #1
 8009ce6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	683a      	ldr	r2, [r7, #0]
 8009cf8:	430a      	orrs	r2, r1
 8009cfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f811 	bl	8009d24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	68fa      	ldr	r2, [r7, #12]
 8009d08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2220      	movs	r2, #32
 8009d0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3710      	adds	r7, #16
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d108      	bne.n	8009d46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d44:	e031      	b.n	8009daa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d46:	2310      	movs	r3, #16
 8009d48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d4a:	2310      	movs	r3, #16
 8009d4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	0e5b      	lsrs	r3, r3, #25
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	f003 0307 	and.w	r3, r3, #7
 8009d5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	0f5b      	lsrs	r3, r3, #29
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	f003 0307 	and.w	r3, r3, #7
 8009d6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d6e:	7bbb      	ldrb	r3, [r7, #14]
 8009d70:	7b3a      	ldrb	r2, [r7, #12]
 8009d72:	4911      	ldr	r1, [pc, #68]	; (8009db8 <UARTEx_SetNbDataToProcess+0x94>)
 8009d74:	5c8a      	ldrb	r2, [r1, r2]
 8009d76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d7a:	7b3a      	ldrb	r2, [r7, #12]
 8009d7c:	490f      	ldr	r1, [pc, #60]	; (8009dbc <UARTEx_SetNbDataToProcess+0x98>)
 8009d7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d80:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d84:	b29a      	uxth	r2, r3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d8c:	7bfb      	ldrb	r3, [r7, #15]
 8009d8e:	7b7a      	ldrb	r2, [r7, #13]
 8009d90:	4909      	ldr	r1, [pc, #36]	; (8009db8 <UARTEx_SetNbDataToProcess+0x94>)
 8009d92:	5c8a      	ldrb	r2, [r1, r2]
 8009d94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d98:	7b7a      	ldrb	r2, [r7, #13]
 8009d9a:	4908      	ldr	r1, [pc, #32]	; (8009dbc <UARTEx_SetNbDataToProcess+0x98>)
 8009d9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009daa:	bf00      	nop
 8009dac:	3714      	adds	r7, #20
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	0801e190 	.word	0x0801e190
 8009dbc:	0801e198 	.word	0x0801e198

08009dc0 <tcpip_init_wrap>:
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 2 */
/* ETH_CODE: workaround to call LOCK_TCPIP_CORE after tcpip_init in MX_LWIP_Init
 * This is to keep the code after MX code re-generation */
static inline void tcpip_init_wrap(tcpip_init_done_fn tcpip_init_done, void *arg){
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
	tcpip_init(tcpip_init_done, arg);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f004 fe59 	bl	800ea84 <tcpip_init>
	LOCK_TCPIP_CORE();
 8009dd2:	f000 fe59 	bl	800aa88 <sys_lock_tcpip_core>
}
 8009dd6:	bf00      	nop
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
	...

08009de0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009de6:	4b99      	ldr	r3, [pc, #612]	; (800a04c <MX_LWIP_Init+0x26c>)
 8009de8:	22c0      	movs	r2, #192	; 0xc0
 8009dea:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009dec:	4b97      	ldr	r3, [pc, #604]	; (800a04c <MX_LWIP_Init+0x26c>)
 8009dee:	22a8      	movs	r2, #168	; 0xa8
 8009df0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 15;
 8009df2:	4b96      	ldr	r3, [pc, #600]	; (800a04c <MX_LWIP_Init+0x26c>)
 8009df4:	220f      	movs	r2, #15
 8009df6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 110;
 8009df8:	4b94      	ldr	r3, [pc, #592]	; (800a04c <MX_LWIP_Init+0x26c>)
 8009dfa:	226e      	movs	r2, #110	; 0x6e
 8009dfc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009dfe:	4b94      	ldr	r3, [pc, #592]	; (800a050 <MX_LWIP_Init+0x270>)
 8009e00:	22ff      	movs	r2, #255	; 0xff
 8009e02:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009e04:	4b92      	ldr	r3, [pc, #584]	; (800a050 <MX_LWIP_Init+0x270>)
 8009e06:	22ff      	movs	r2, #255	; 0xff
 8009e08:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8009e0a:	4b91      	ldr	r3, [pc, #580]	; (800a050 <MX_LWIP_Init+0x270>)
 8009e0c:	22ff      	movs	r2, #255	; 0xff
 8009e0e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009e10:	4b8f      	ldr	r3, [pc, #572]	; (800a050 <MX_LWIP_Init+0x270>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8009e16:	4b8f      	ldr	r3, [pc, #572]	; (800a054 <MX_LWIP_Init+0x274>)
 8009e18:	22c0      	movs	r2, #192	; 0xc0
 8009e1a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8009e1c:	4b8d      	ldr	r3, [pc, #564]	; (800a054 <MX_LWIP_Init+0x274>)
 8009e1e:	22a8      	movs	r2, #168	; 0xa8
 8009e20:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 15;
 8009e22:	4b8c      	ldr	r3, [pc, #560]	; (800a054 <MX_LWIP_Init+0x274>)
 8009e24:	220f      	movs	r2, #15
 8009e26:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8009e28:	4b8a      	ldr	r3, [pc, #552]	; (800a054 <MX_LWIP_Init+0x274>)
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009e2e:	2100      	movs	r1, #0
 8009e30:	2000      	movs	r0, #0
 8009e32:	f7ff ffc5 	bl	8009dc0 <tcpip_init_wrap>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009e36:	4b85      	ldr	r3, [pc, #532]	; (800a04c <MX_LWIP_Init+0x26c>)
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	061a      	lsls	r2, r3, #24
 8009e3c:	4b83      	ldr	r3, [pc, #524]	; (800a04c <MX_LWIP_Init+0x26c>)
 8009e3e:	785b      	ldrb	r3, [r3, #1]
 8009e40:	041b      	lsls	r3, r3, #16
 8009e42:	431a      	orrs	r2, r3
 8009e44:	4b81      	ldr	r3, [pc, #516]	; (800a04c <MX_LWIP_Init+0x26c>)
 8009e46:	789b      	ldrb	r3, [r3, #2]
 8009e48:	021b      	lsls	r3, r3, #8
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	4a7f      	ldr	r2, [pc, #508]	; (800a04c <MX_LWIP_Init+0x26c>)
 8009e4e:	78d2      	ldrb	r2, [r2, #3]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	061a      	lsls	r2, r3, #24
 8009e54:	4b7d      	ldr	r3, [pc, #500]	; (800a04c <MX_LWIP_Init+0x26c>)
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	0619      	lsls	r1, r3, #24
 8009e5a:	4b7c      	ldr	r3, [pc, #496]	; (800a04c <MX_LWIP_Init+0x26c>)
 8009e5c:	785b      	ldrb	r3, [r3, #1]
 8009e5e:	041b      	lsls	r3, r3, #16
 8009e60:	4319      	orrs	r1, r3
 8009e62:	4b7a      	ldr	r3, [pc, #488]	; (800a04c <MX_LWIP_Init+0x26c>)
 8009e64:	789b      	ldrb	r3, [r3, #2]
 8009e66:	021b      	lsls	r3, r3, #8
 8009e68:	430b      	orrs	r3, r1
 8009e6a:	4978      	ldr	r1, [pc, #480]	; (800a04c <MX_LWIP_Init+0x26c>)
 8009e6c:	78c9      	ldrb	r1, [r1, #3]
 8009e6e:	430b      	orrs	r3, r1
 8009e70:	021b      	lsls	r3, r3, #8
 8009e72:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e76:	431a      	orrs	r2, r3
 8009e78:	4b74      	ldr	r3, [pc, #464]	; (800a04c <MX_LWIP_Init+0x26c>)
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	0619      	lsls	r1, r3, #24
 8009e7e:	4b73      	ldr	r3, [pc, #460]	; (800a04c <MX_LWIP_Init+0x26c>)
 8009e80:	785b      	ldrb	r3, [r3, #1]
 8009e82:	041b      	lsls	r3, r3, #16
 8009e84:	4319      	orrs	r1, r3
 8009e86:	4b71      	ldr	r3, [pc, #452]	; (800a04c <MX_LWIP_Init+0x26c>)
 8009e88:	789b      	ldrb	r3, [r3, #2]
 8009e8a:	021b      	lsls	r3, r3, #8
 8009e8c:	430b      	orrs	r3, r1
 8009e8e:	496f      	ldr	r1, [pc, #444]	; (800a04c <MX_LWIP_Init+0x26c>)
 8009e90:	78c9      	ldrb	r1, [r1, #3]
 8009e92:	430b      	orrs	r3, r1
 8009e94:	0a1b      	lsrs	r3, r3, #8
 8009e96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009e9a:	431a      	orrs	r2, r3
 8009e9c:	4b6b      	ldr	r3, [pc, #428]	; (800a04c <MX_LWIP_Init+0x26c>)
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	0619      	lsls	r1, r3, #24
 8009ea2:	4b6a      	ldr	r3, [pc, #424]	; (800a04c <MX_LWIP_Init+0x26c>)
 8009ea4:	785b      	ldrb	r3, [r3, #1]
 8009ea6:	041b      	lsls	r3, r3, #16
 8009ea8:	4319      	orrs	r1, r3
 8009eaa:	4b68      	ldr	r3, [pc, #416]	; (800a04c <MX_LWIP_Init+0x26c>)
 8009eac:	789b      	ldrb	r3, [r3, #2]
 8009eae:	021b      	lsls	r3, r3, #8
 8009eb0:	430b      	orrs	r3, r1
 8009eb2:	4966      	ldr	r1, [pc, #408]	; (800a04c <MX_LWIP_Init+0x26c>)
 8009eb4:	78c9      	ldrb	r1, [r1, #3]
 8009eb6:	430b      	orrs	r3, r1
 8009eb8:	0e1b      	lsrs	r3, r3, #24
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	4a66      	ldr	r2, [pc, #408]	; (800a058 <MX_LWIP_Init+0x278>)
 8009ebe:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009ec0:	4b63      	ldr	r3, [pc, #396]	; (800a050 <MX_LWIP_Init+0x270>)
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	061a      	lsls	r2, r3, #24
 8009ec6:	4b62      	ldr	r3, [pc, #392]	; (800a050 <MX_LWIP_Init+0x270>)
 8009ec8:	785b      	ldrb	r3, [r3, #1]
 8009eca:	041b      	lsls	r3, r3, #16
 8009ecc:	431a      	orrs	r2, r3
 8009ece:	4b60      	ldr	r3, [pc, #384]	; (800a050 <MX_LWIP_Init+0x270>)
 8009ed0:	789b      	ldrb	r3, [r3, #2]
 8009ed2:	021b      	lsls	r3, r3, #8
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	4a5e      	ldr	r2, [pc, #376]	; (800a050 <MX_LWIP_Init+0x270>)
 8009ed8:	78d2      	ldrb	r2, [r2, #3]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	061a      	lsls	r2, r3, #24
 8009ede:	4b5c      	ldr	r3, [pc, #368]	; (800a050 <MX_LWIP_Init+0x270>)
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	0619      	lsls	r1, r3, #24
 8009ee4:	4b5a      	ldr	r3, [pc, #360]	; (800a050 <MX_LWIP_Init+0x270>)
 8009ee6:	785b      	ldrb	r3, [r3, #1]
 8009ee8:	041b      	lsls	r3, r3, #16
 8009eea:	4319      	orrs	r1, r3
 8009eec:	4b58      	ldr	r3, [pc, #352]	; (800a050 <MX_LWIP_Init+0x270>)
 8009eee:	789b      	ldrb	r3, [r3, #2]
 8009ef0:	021b      	lsls	r3, r3, #8
 8009ef2:	430b      	orrs	r3, r1
 8009ef4:	4956      	ldr	r1, [pc, #344]	; (800a050 <MX_LWIP_Init+0x270>)
 8009ef6:	78c9      	ldrb	r1, [r1, #3]
 8009ef8:	430b      	orrs	r3, r1
 8009efa:	021b      	lsls	r3, r3, #8
 8009efc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f00:	431a      	orrs	r2, r3
 8009f02:	4b53      	ldr	r3, [pc, #332]	; (800a050 <MX_LWIP_Init+0x270>)
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	0619      	lsls	r1, r3, #24
 8009f08:	4b51      	ldr	r3, [pc, #324]	; (800a050 <MX_LWIP_Init+0x270>)
 8009f0a:	785b      	ldrb	r3, [r3, #1]
 8009f0c:	041b      	lsls	r3, r3, #16
 8009f0e:	4319      	orrs	r1, r3
 8009f10:	4b4f      	ldr	r3, [pc, #316]	; (800a050 <MX_LWIP_Init+0x270>)
 8009f12:	789b      	ldrb	r3, [r3, #2]
 8009f14:	021b      	lsls	r3, r3, #8
 8009f16:	430b      	orrs	r3, r1
 8009f18:	494d      	ldr	r1, [pc, #308]	; (800a050 <MX_LWIP_Init+0x270>)
 8009f1a:	78c9      	ldrb	r1, [r1, #3]
 8009f1c:	430b      	orrs	r3, r1
 8009f1e:	0a1b      	lsrs	r3, r3, #8
 8009f20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009f24:	431a      	orrs	r2, r3
 8009f26:	4b4a      	ldr	r3, [pc, #296]	; (800a050 <MX_LWIP_Init+0x270>)
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	0619      	lsls	r1, r3, #24
 8009f2c:	4b48      	ldr	r3, [pc, #288]	; (800a050 <MX_LWIP_Init+0x270>)
 8009f2e:	785b      	ldrb	r3, [r3, #1]
 8009f30:	041b      	lsls	r3, r3, #16
 8009f32:	4319      	orrs	r1, r3
 8009f34:	4b46      	ldr	r3, [pc, #280]	; (800a050 <MX_LWIP_Init+0x270>)
 8009f36:	789b      	ldrb	r3, [r3, #2]
 8009f38:	021b      	lsls	r3, r3, #8
 8009f3a:	430b      	orrs	r3, r1
 8009f3c:	4944      	ldr	r1, [pc, #272]	; (800a050 <MX_LWIP_Init+0x270>)
 8009f3e:	78c9      	ldrb	r1, [r1, #3]
 8009f40:	430b      	orrs	r3, r1
 8009f42:	0e1b      	lsrs	r3, r3, #24
 8009f44:	4313      	orrs	r3, r2
 8009f46:	4a45      	ldr	r2, [pc, #276]	; (800a05c <MX_LWIP_Init+0x27c>)
 8009f48:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009f4a:	4b42      	ldr	r3, [pc, #264]	; (800a054 <MX_LWIP_Init+0x274>)
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	061a      	lsls	r2, r3, #24
 8009f50:	4b40      	ldr	r3, [pc, #256]	; (800a054 <MX_LWIP_Init+0x274>)
 8009f52:	785b      	ldrb	r3, [r3, #1]
 8009f54:	041b      	lsls	r3, r3, #16
 8009f56:	431a      	orrs	r2, r3
 8009f58:	4b3e      	ldr	r3, [pc, #248]	; (800a054 <MX_LWIP_Init+0x274>)
 8009f5a:	789b      	ldrb	r3, [r3, #2]
 8009f5c:	021b      	lsls	r3, r3, #8
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	4a3c      	ldr	r2, [pc, #240]	; (800a054 <MX_LWIP_Init+0x274>)
 8009f62:	78d2      	ldrb	r2, [r2, #3]
 8009f64:	4313      	orrs	r3, r2
 8009f66:	061a      	lsls	r2, r3, #24
 8009f68:	4b3a      	ldr	r3, [pc, #232]	; (800a054 <MX_LWIP_Init+0x274>)
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	0619      	lsls	r1, r3, #24
 8009f6e:	4b39      	ldr	r3, [pc, #228]	; (800a054 <MX_LWIP_Init+0x274>)
 8009f70:	785b      	ldrb	r3, [r3, #1]
 8009f72:	041b      	lsls	r3, r3, #16
 8009f74:	4319      	orrs	r1, r3
 8009f76:	4b37      	ldr	r3, [pc, #220]	; (800a054 <MX_LWIP_Init+0x274>)
 8009f78:	789b      	ldrb	r3, [r3, #2]
 8009f7a:	021b      	lsls	r3, r3, #8
 8009f7c:	430b      	orrs	r3, r1
 8009f7e:	4935      	ldr	r1, [pc, #212]	; (800a054 <MX_LWIP_Init+0x274>)
 8009f80:	78c9      	ldrb	r1, [r1, #3]
 8009f82:	430b      	orrs	r3, r1
 8009f84:	021b      	lsls	r3, r3, #8
 8009f86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f8a:	431a      	orrs	r2, r3
 8009f8c:	4b31      	ldr	r3, [pc, #196]	; (800a054 <MX_LWIP_Init+0x274>)
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	0619      	lsls	r1, r3, #24
 8009f92:	4b30      	ldr	r3, [pc, #192]	; (800a054 <MX_LWIP_Init+0x274>)
 8009f94:	785b      	ldrb	r3, [r3, #1]
 8009f96:	041b      	lsls	r3, r3, #16
 8009f98:	4319      	orrs	r1, r3
 8009f9a:	4b2e      	ldr	r3, [pc, #184]	; (800a054 <MX_LWIP_Init+0x274>)
 8009f9c:	789b      	ldrb	r3, [r3, #2]
 8009f9e:	021b      	lsls	r3, r3, #8
 8009fa0:	430b      	orrs	r3, r1
 8009fa2:	492c      	ldr	r1, [pc, #176]	; (800a054 <MX_LWIP_Init+0x274>)
 8009fa4:	78c9      	ldrb	r1, [r1, #3]
 8009fa6:	430b      	orrs	r3, r1
 8009fa8:	0a1b      	lsrs	r3, r3, #8
 8009faa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009fae:	431a      	orrs	r2, r3
 8009fb0:	4b28      	ldr	r3, [pc, #160]	; (800a054 <MX_LWIP_Init+0x274>)
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	0619      	lsls	r1, r3, #24
 8009fb6:	4b27      	ldr	r3, [pc, #156]	; (800a054 <MX_LWIP_Init+0x274>)
 8009fb8:	785b      	ldrb	r3, [r3, #1]
 8009fba:	041b      	lsls	r3, r3, #16
 8009fbc:	4319      	orrs	r1, r3
 8009fbe:	4b25      	ldr	r3, [pc, #148]	; (800a054 <MX_LWIP_Init+0x274>)
 8009fc0:	789b      	ldrb	r3, [r3, #2]
 8009fc2:	021b      	lsls	r3, r3, #8
 8009fc4:	430b      	orrs	r3, r1
 8009fc6:	4923      	ldr	r1, [pc, #140]	; (800a054 <MX_LWIP_Init+0x274>)
 8009fc8:	78c9      	ldrb	r1, [r1, #3]
 8009fca:	430b      	orrs	r3, r1
 8009fcc:	0e1b      	lsrs	r3, r3, #24
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	4a23      	ldr	r2, [pc, #140]	; (800a060 <MX_LWIP_Init+0x280>)
 8009fd2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009fd4:	4b23      	ldr	r3, [pc, #140]	; (800a064 <MX_LWIP_Init+0x284>)
 8009fd6:	9302      	str	r3, [sp, #8]
 8009fd8:	4b23      	ldr	r3, [pc, #140]	; (800a068 <MX_LWIP_Init+0x288>)
 8009fda:	9301      	str	r3, [sp, #4]
 8009fdc:	2300      	movs	r3, #0
 8009fde:	9300      	str	r3, [sp, #0]
 8009fe0:	4b1f      	ldr	r3, [pc, #124]	; (800a060 <MX_LWIP_Init+0x280>)
 8009fe2:	4a1e      	ldr	r2, [pc, #120]	; (800a05c <MX_LWIP_Init+0x27c>)
 8009fe4:	491c      	ldr	r1, [pc, #112]	; (800a058 <MX_LWIP_Init+0x278>)
 8009fe6:	4821      	ldr	r0, [pc, #132]	; (800a06c <MX_LWIP_Init+0x28c>)
 8009fe8:	f005 fbde 	bl	800f7a8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009fec:	481f      	ldr	r0, [pc, #124]	; (800a06c <MX_LWIP_Init+0x28c>)
 8009fee:	f005 fd91 	bl	800fb14 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009ff2:	4b1e      	ldr	r3, [pc, #120]	; (800a06c <MX_LWIP_Init+0x28c>)
 8009ff4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ff8:	089b      	lsrs	r3, r3, #2
 8009ffa:	f003 0301 	and.w	r3, r3, #1
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	2b00      	cmp	r3, #0
 800a002:	d003      	beq.n	800a00c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a004:	4819      	ldr	r0, [pc, #100]	; (800a06c <MX_LWIP_Init+0x28c>)
 800a006:	f005 fd95 	bl	800fb34 <netif_set_up>
 800a00a:	e002      	b.n	800a012 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800a00c:	4817      	ldr	r0, [pc, #92]	; (800a06c <MX_LWIP_Init+0x28c>)
 800a00e:	f005 fdff 	bl	800fc10 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a012:	4917      	ldr	r1, [pc, #92]	; (800a070 <MX_LWIP_Init+0x290>)
 800a014:	4815      	ldr	r0, [pc, #84]	; (800a06c <MX_LWIP_Init+0x28c>)
 800a016:	f005 fe97 	bl	800fd48 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800a01a:	2224      	movs	r2, #36	; 0x24
 800a01c:	2100      	movs	r1, #0
 800a01e:	4815      	ldr	r0, [pc, #84]	; (800a074 <MX_LWIP_Init+0x294>)
 800a020:	f010 f878 	bl	801a114 <memset>
  attributes.name = "EthLink";
 800a024:	4b13      	ldr	r3, [pc, #76]	; (800a074 <MX_LWIP_Init+0x294>)
 800a026:	4a14      	ldr	r2, [pc, #80]	; (800a078 <MX_LWIP_Init+0x298>)
 800a028:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800a02a:	4b12      	ldr	r3, [pc, #72]	; (800a074 <MX_LWIP_Init+0x294>)
 800a02c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a030:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800a032:	4b10      	ldr	r3, [pc, #64]	; (800a074 <MX_LWIP_Init+0x294>)
 800a034:	2210      	movs	r2, #16
 800a036:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800a038:	4a0e      	ldr	r2, [pc, #56]	; (800a074 <MX_LWIP_Init+0x294>)
 800a03a:	490c      	ldr	r1, [pc, #48]	; (800a06c <MX_LWIP_Init+0x28c>)
 800a03c:	480f      	ldr	r0, [pc, #60]	; (800a07c <MX_LWIP_Init+0x29c>)
 800a03e:	f000 fe2c 	bl	800ac9a <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */
  /* ETH_CODE: call UNLOCK_TCPIP_CORE after we are done */
  UNLOCK_TCPIP_CORE();
 800a042:	f000 fd31 	bl	800aaa8 <sys_unlock_tcpip_core>
/* USER CODE END 3 */
}
 800a046:	bf00      	nop
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	24004c20 	.word	0x24004c20
 800a050:	24004c24 	.word	0x24004c24
 800a054:	24004c28 	.word	0x24004c28
 800a058:	24004c14 	.word	0x24004c14
 800a05c:	24004c18 	.word	0x24004c18
 800a060:	24004c1c 	.word	0x24004c1c
 800a064:	0800e9c1 	.word	0x0800e9c1
 800a068:	0800a525 	.word	0x0800a525
 800a06c:	24004be0 	.word	0x24004be0
 800a070:	0800a081 	.word	0x0800a081
 800a074:	24004c2c 	.word	0x24004c2c
 800a078:	0801afb4 	.word	0x0801afb4
 800a07c:	0800a819 	.word	0x0800a819

0800a080 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800a09c:	4b04      	ldr	r3, [pc, #16]	; (800a0b0 <HAL_ETH_RxCpltCallback+0x1c>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f001 f89d 	bl	800b1e0 <osSemaphoreRelease>
}
 800a0a6:	bf00      	nop
 800a0a8:	3708      	adds	r7, #8
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	24004c58 	.word	0x24004c58

0800a0b4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800a0bc:	4b04      	ldr	r3, [pc, #16]	; (800a0d0 <HAL_ETH_TxCpltCallback+0x1c>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f001 f88d 	bl	800b1e0 <osSemaphoreRelease>
}
 800a0c6:	bf00      	nop
 800a0c8:	3708      	adds	r7, #8
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	24004c5c 	.word	0x24004c5c

0800a0d4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f7f9 fff3 	bl	80040c8 <HAL_ETH_GetDMAError>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0e8:	2b80      	cmp	r3, #128	; 0x80
 800a0ea:	d104      	bne.n	800a0f6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800a0ec:	4b04      	ldr	r3, [pc, #16]	; (800a100 <HAL_ETH_ErrorCallback+0x2c>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f001 f875 	bl	800b1e0 <osSemaphoreRelease>
  }
}
 800a0f6:	bf00      	nop
 800a0f8:	3708      	adds	r7, #8
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	24004c58 	.word	0x24004c58

0800a104 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b0aa      	sub	sp, #168	; 0xa8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a10c:	2300      	movs	r3, #0
 800a10e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800a112:	2300      	movs	r3, #0
 800a114:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 800a118:	2300      	movs	r3, #0
 800a11a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800a11e:	f107 0310 	add.w	r3, r7, #16
 800a122:	2264      	movs	r2, #100	; 0x64
 800a124:	2100      	movs	r1, #0
 800a126:	4618      	mov	r0, r3
 800a128:	f00f fff4 	bl	801a114 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a12c:	4b85      	ldr	r3, [pc, #532]	; (800a344 <low_level_init+0x240>)
 800a12e:	4a86      	ldr	r2, [pc, #536]	; (800a348 <low_level_init+0x244>)
 800a130:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a132:	2300      	movs	r3, #0
 800a134:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800a136:	2380      	movs	r3, #128	; 0x80
 800a138:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800a13a:	23e1      	movs	r3, #225	; 0xe1
 800a13c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800a13e:	2300      	movs	r3, #0
 800a140:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800a142:	2300      	movs	r3, #0
 800a144:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800a146:	2300      	movs	r3, #0
 800a148:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a14a:	4a7e      	ldr	r2, [pc, #504]	; (800a344 <low_level_init+0x240>)
 800a14c:	f107 0308 	add.w	r3, r7, #8
 800a150:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a152:	4b7c      	ldr	r3, [pc, #496]	; (800a344 <low_level_init+0x240>)
 800a154:	2201      	movs	r2, #1
 800a156:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a158:	4b7a      	ldr	r3, [pc, #488]	; (800a344 <low_level_init+0x240>)
 800a15a:	4a7c      	ldr	r2, [pc, #496]	; (800a34c <low_level_init+0x248>)
 800a15c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a15e:	4b79      	ldr	r3, [pc, #484]	; (800a344 <low_level_init+0x240>)
 800a160:	4a7b      	ldr	r2, [pc, #492]	; (800a350 <low_level_init+0x24c>)
 800a162:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800a164:	4b77      	ldr	r3, [pc, #476]	; (800a344 <low_level_init+0x240>)
 800a166:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a16a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a16c:	4875      	ldr	r0, [pc, #468]	; (800a344 <low_level_init+0x240>)
 800a16e:	f7f8 ffcb 	bl	8003108 <HAL_ETH_Init>
 800a172:	4603      	mov	r3, r0
 800a174:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a178:	2238      	movs	r2, #56	; 0x38
 800a17a:	2100      	movs	r1, #0
 800a17c:	4875      	ldr	r0, [pc, #468]	; (800a354 <low_level_init+0x250>)
 800a17e:	f00f ffc9 	bl	801a114 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a182:	4b74      	ldr	r3, [pc, #464]	; (800a354 <low_level_init+0x250>)
 800a184:	2221      	movs	r2, #33	; 0x21
 800a186:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a188:	4b72      	ldr	r3, [pc, #456]	; (800a354 <low_level_init+0x250>)
 800a18a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a18e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a190:	4b70      	ldr	r3, [pc, #448]	; (800a354 <low_level_init+0x250>)
 800a192:	2200      	movs	r2, #0
 800a194:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a196:	4870      	ldr	r0, [pc, #448]	; (800a358 <low_level_init+0x254>)
 800a198:	f005 f9c0 	bl	800f51c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2206      	movs	r2, #6
 800a1a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a1a4:	4b67      	ldr	r3, [pc, #412]	; (800a344 <low_level_init+0x240>)
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	781a      	ldrb	r2, [r3, #0]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a1b0:	4b64      	ldr	r3, [pc, #400]	; (800a344 <low_level_init+0x240>)
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	785a      	ldrb	r2, [r3, #1]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a1bc:	4b61      	ldr	r3, [pc, #388]	; (800a344 <low_level_init+0x240>)
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	789a      	ldrb	r2, [r3, #2]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a1c8:	4b5e      	ldr	r3, [pc, #376]	; (800a344 <low_level_init+0x240>)
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	78da      	ldrb	r2, [r3, #3]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a1d4:	4b5b      	ldr	r3, [pc, #364]	; (800a344 <low_level_init+0x240>)
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	791a      	ldrb	r2, [r3, #4]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a1e0:	4b58      	ldr	r3, [pc, #352]	; (800a344 <low_level_init+0x240>)
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	795a      	ldrb	r2, [r3, #5]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a1f2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a1fa:	f043 030a 	orr.w	r3, r3, #10
 800a1fe:	b2da      	uxtb	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800a206:	2200      	movs	r2, #0
 800a208:	2101      	movs	r1, #1
 800a20a:	2001      	movs	r0, #1
 800a20c:	f000 ff0c 	bl	800b028 <osSemaphoreNew>
 800a210:	4603      	mov	r3, r0
 800a212:	4a52      	ldr	r2, [pc, #328]	; (800a35c <low_level_init+0x258>)
 800a214:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800a216:	2200      	movs	r2, #0
 800a218:	2101      	movs	r1, #1
 800a21a:	2001      	movs	r0, #1
 800a21c:	f000 ff04 	bl	800b028 <osSemaphoreNew>
 800a220:	4603      	mov	r3, r0
 800a222:	4a4f      	ldr	r2, [pc, #316]	; (800a360 <low_level_init+0x25c>)
 800a224:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800a226:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a22a:	2224      	movs	r2, #36	; 0x24
 800a22c:	2100      	movs	r1, #0
 800a22e:	4618      	mov	r0, r3
 800a230:	f00f ff70 	bl	801a114 <memset>
  attributes.name = "EthIf";
 800a234:	4b4b      	ldr	r3, [pc, #300]	; (800a364 <low_level_init+0x260>)
 800a236:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800a238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a23c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 800a240:	2330      	movs	r3, #48	; 0x30
 800a242:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800a246:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a24a:	461a      	mov	r2, r3
 800a24c:	6879      	ldr	r1, [r7, #4]
 800a24e:	4846      	ldr	r0, [pc, #280]	; (800a368 <low_level_init+0x264>)
 800a250:	f000 fd23 	bl	800ac9a <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a254:	4945      	ldr	r1, [pc, #276]	; (800a36c <low_level_init+0x268>)
 800a256:	4846      	ldr	r0, [pc, #280]	; (800a370 <low_level_init+0x26c>)
 800a258:	f7f7 fec5 	bl	8001fe6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a25c:	4844      	ldr	r0, [pc, #272]	; (800a370 <low_level_init+0x26c>)
 800a25e:	f7f7 fef4 	bl	800204a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a262:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800a266:	2b00      	cmp	r3, #0
 800a268:	d165      	bne.n	800a336 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a26a:	4841      	ldr	r0, [pc, #260]	; (800a370 <low_level_init+0x26c>)
 800a26c:	f7f7 ff95 	bl	800219a <LAN8742_GetLinkState>
 800a270:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800a274:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a278:	2b01      	cmp	r3, #1
 800a27a:	dc06      	bgt.n	800a28a <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f005 fd31 	bl	800fce4 <netif_set_link_down>
      netif_set_down(netif);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f005 fcc4 	bl	800fc10 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a288:	e057      	b.n	800a33a <low_level_init+0x236>
      switch (PHYLinkState)
 800a28a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a28e:	3b02      	subs	r3, #2
 800a290:	2b03      	cmp	r3, #3
 800a292:	d82b      	bhi.n	800a2ec <low_level_init+0x1e8>
 800a294:	a201      	add	r2, pc, #4	; (adr r2, 800a29c <low_level_init+0x198>)
 800a296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29a:	bf00      	nop
 800a29c:	0800a2ad 	.word	0x0800a2ad
 800a2a0:	0800a2bf 	.word	0x0800a2bf
 800a2a4:	0800a2cf 	.word	0x0800a2cf
 800a2a8:	0800a2df 	.word	0x0800a2df
        duplex = ETH_FULLDUPLEX_MODE;
 800a2ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800a2b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a2b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800a2bc:	e01f      	b.n	800a2fe <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800a2c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a2c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800a2cc:	e017      	b.n	800a2fe <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800a2ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800a2dc:	e00f      	b.n	800a2fe <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800a2ea:	e008      	b.n	800a2fe <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800a2ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800a2f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a2f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800a2fc:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a2fe:	f107 0310 	add.w	r3, r7, #16
 800a302:	4619      	mov	r1, r3
 800a304:	480f      	ldr	r0, [pc, #60]	; (800a344 <low_level_init+0x240>)
 800a306:	f7f9 fc99 	bl	8003c3c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800a30a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a30e:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 800a310:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a316:	f107 0310 	add.w	r3, r7, #16
 800a31a:	4619      	mov	r1, r3
 800a31c:	4809      	ldr	r0, [pc, #36]	; (800a344 <low_level_init+0x240>)
 800a31e:	f7f9 fe61 	bl	8003fe4 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800a322:	4808      	ldr	r0, [pc, #32]	; (800a344 <low_level_init+0x240>)
 800a324:	f7f8 ffd6 	bl	80032d4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f005 fc03 	bl	800fb34 <netif_set_up>
    netif_set_link_up(netif);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f005 fca2 	bl	800fc78 <netif_set_link_up>
}
 800a334:	e001      	b.n	800a33a <low_level_init+0x236>
    Error_Handler();
 800a336:	f7f7 fbd1 	bl	8001adc <Error_Handler>
}
 800a33a:	bf00      	nop
 800a33c:	37a8      	adds	r7, #168	; 0xa8
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	24004c60 	.word	0x24004c60
 800a348:	40028000 	.word	0x40028000
 800a34c:	24004a74 	.word	0x24004a74
 800a350:	24004a14 	.word	0x24004a14
 800a354:	24004d10 	.word	0x24004d10
 800a358:	0801e1a0 	.word	0x0801e1a0
 800a35c:	24004c58 	.word	0x24004c58
 800a360:	24004c5c 	.word	0x24004c5c
 800a364:	0801afbc 	.word	0x0801afbc
 800a368:	0800a4d1 	.word	0x0800a4d1
 800a36c:	24000010 	.word	0x24000010
 800a370:	24004d48 	.word	0x24004d48

0800a374 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b092      	sub	sp, #72	; 0x48
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800a37e:	2300      	movs	r3, #0
 800a380:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800a382:	2300      	movs	r3, #0
 800a384:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800a386:	2300      	movs	r3, #0
 800a388:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800a38c:	f107 030c 	add.w	r3, r7, #12
 800a390:	2230      	movs	r2, #48	; 0x30
 800a392:	2100      	movs	r1, #0
 800a394:	4618      	mov	r0, r3
 800a396:	f00f febd 	bl	801a114 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a39a:	f107 030c 	add.w	r3, r7, #12
 800a39e:	2230      	movs	r2, #48	; 0x30
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f00f feb6 	bl	801a114 <memset>

  for(q = p; q != NULL; q = q->next)
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	643b      	str	r3, [r7, #64]	; 0x40
 800a3ac:	e045      	b.n	800a43a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a3ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3b0:	2b03      	cmp	r3, #3
 800a3b2:	d902      	bls.n	800a3ba <low_level_output+0x46>
      return ERR_IF;
 800a3b4:	f06f 030b 	mvn.w	r3, #11
 800a3b8:	e065      	b.n	800a486 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800a3ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3bc:	6859      	ldr	r1, [r3, #4]
 800a3be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	005b      	lsls	r3, r3, #1
 800a3c4:	4413      	add	r3, r2
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	3348      	adds	r3, #72	; 0x48
 800a3ca:	443b      	add	r3, r7
 800a3cc:	3b3c      	subs	r3, #60	; 0x3c
 800a3ce:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a3d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3d2:	895b      	ldrh	r3, [r3, #10]
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3d8:	4613      	mov	r3, r2
 800a3da:	005b      	lsls	r3, r3, #1
 800a3dc:	4413      	add	r3, r2
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	3348      	adds	r3, #72	; 0x48
 800a3e2:	443b      	add	r3, r7
 800a3e4:	3b38      	subs	r3, #56	; 0x38
 800a3e6:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a3e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d011      	beq.n	800a412 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a3ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3f0:	1e5a      	subs	r2, r3, #1
 800a3f2:	f107 000c 	add.w	r0, r7, #12
 800a3f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	005b      	lsls	r3, r3, #1
 800a3fc:	440b      	add	r3, r1
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	18c1      	adds	r1, r0, r3
 800a402:	4613      	mov	r3, r2
 800a404:	005b      	lsls	r3, r3, #1
 800a406:	4413      	add	r3, r2
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	3348      	adds	r3, #72	; 0x48
 800a40c:	443b      	add	r3, r7
 800a40e:	3b34      	subs	r3, #52	; 0x34
 800a410:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d109      	bne.n	800a42e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800a41a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a41c:	4613      	mov	r3, r2
 800a41e:	005b      	lsls	r3, r3, #1
 800a420:	4413      	add	r3, r2
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	3348      	adds	r3, #72	; 0x48
 800a426:	443b      	add	r3, r7
 800a428:	3b34      	subs	r3, #52	; 0x34
 800a42a:	2200      	movs	r2, #0
 800a42c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a42e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a430:	3301      	adds	r3, #1
 800a432:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800a434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	643b      	str	r3, [r7, #64]	; 0x40
 800a43a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d1b6      	bne.n	800a3ae <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	891b      	ldrh	r3, [r3, #8]
 800a444:	461a      	mov	r2, r3
 800a446:	4b12      	ldr	r3, [pc, #72]	; (800a490 <low_level_output+0x11c>)
 800a448:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a44a:	4a11      	ldr	r2, [pc, #68]	; (800a490 <low_level_output+0x11c>)
 800a44c:	f107 030c 	add.w	r3, r7, #12
 800a450:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800a452:	4a0f      	ldr	r2, [pc, #60]	; (800a490 <low_level_output+0x11c>)
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800a458:	6838      	ldr	r0, [r7, #0]
 800a45a:	f006 f8cd 	bl	80105f8 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800a45e:	490c      	ldr	r1, [pc, #48]	; (800a490 <low_level_output+0x11c>)
 800a460:	480c      	ldr	r0, [pc, #48]	; (800a494 <low_level_output+0x120>)
 800a462:	f7f9 f83b 	bl	80034dc <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800a466:	bf00      	nop
 800a468:	4b0b      	ldr	r3, [pc, #44]	; (800a498 <low_level_output+0x124>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f04f 31ff 	mov.w	r1, #4294967295
 800a470:	4618      	mov	r0, r3
 800a472:	f000 fe63 	bl	800b13c <osSemaphoreAcquire>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d1f5      	bne.n	800a468 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800a47c:	4805      	ldr	r0, [pc, #20]	; (800a494 <low_level_output+0x120>)
 800a47e:	f7f9 f9ac 	bl	80037da <HAL_ETH_ReleaseTxPacket>

  return errval;
 800a482:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a486:	4618      	mov	r0, r3
 800a488:	3748      	adds	r7, #72	; 0x48
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	24004d10 	.word	0x24004d10
 800a494:	24004c60 	.word	0x24004c60
 800a498:	24004c5c 	.word	0x24004c5c

0800a49c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800a4a8:	4b07      	ldr	r3, [pc, #28]	; (800a4c8 <low_level_input+0x2c>)
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d105      	bne.n	800a4bc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800a4b0:	f107 030c 	add.w	r3, r7, #12
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	4805      	ldr	r0, [pc, #20]	; (800a4cc <low_level_input+0x30>)
 800a4b8:	f7f9 f861 	bl	800357e <HAL_ETH_ReadData>
  }

  return p;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	24004c54 	.word	0x24004c54
 800a4cc:	24004c60 	.word	0x24004c60

0800a4d0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a4e0:	4b0f      	ldr	r3, [pc, #60]	; (800a520 <ethernetif_input+0x50>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f04f 31ff 	mov.w	r1, #4294967295
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f000 fe27 	bl	800b13c <osSemaphoreAcquire>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1f5      	bne.n	800a4e0 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800a4f4:	68b8      	ldr	r0, [r7, #8]
 800a4f6:	f7ff ffd1 	bl	800a49c <low_level_input>
 800a4fa:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00a      	beq.n	800a518 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	68b9      	ldr	r1, [r7, #8]
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	4798      	blx	r3
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d002      	beq.n	800a518 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f005 ffca 	bl	80104ac <pbuf_free>
          }
        }
      } while(p!=NULL);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d1ea      	bne.n	800a4f4 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a51e:	e7df      	b.n	800a4e0 <ethernetif_input+0x10>
 800a520:	24004c58 	.word	0x24004c58

0800a524 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d106      	bne.n	800a540 <ethernetif_init+0x1c>
 800a532:	4b0e      	ldr	r3, [pc, #56]	; (800a56c <ethernetif_init+0x48>)
 800a534:	f240 220f 	movw	r2, #527	; 0x20f
 800a538:	490d      	ldr	r1, [pc, #52]	; (800a570 <ethernetif_init+0x4c>)
 800a53a:	480e      	ldr	r0, [pc, #56]	; (800a574 <ethernetif_init+0x50>)
 800a53c:	f00f fc94 	bl	8019e68 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2273      	movs	r2, #115	; 0x73
 800a544:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2274      	movs	r2, #116	; 0x74
 800a54c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4a09      	ldr	r2, [pc, #36]	; (800a578 <ethernetif_init+0x54>)
 800a554:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4a08      	ldr	r2, [pc, #32]	; (800a57c <ethernetif_init+0x58>)
 800a55a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f7ff fdd1 	bl	800a104 <low_level_init>

  return ERR_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3708      	adds	r7, #8
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	0801afc4 	.word	0x0801afc4
 800a570:	0801afe0 	.word	0x0801afe0
 800a574:	0801aff0 	.word	0x0801aff0
 800a578:	08017d55 	.word	0x08017d55
 800a57c:	0800a375 	.word	0x0800a375

0800a580 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a58c:	68f9      	ldr	r1, [r7, #12]
 800a58e:	4809      	ldr	r0, [pc, #36]	; (800a5b4 <pbuf_free_custom+0x34>)
 800a590:	f005 f8b4 	bl	800f6fc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800a594:	4b08      	ldr	r3, [pc, #32]	; (800a5b8 <pbuf_free_custom+0x38>)
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d107      	bne.n	800a5ac <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800a59c:	4b06      	ldr	r3, [pc, #24]	; (800a5b8 <pbuf_free_custom+0x38>)
 800a59e:	2200      	movs	r2, #0
 800a5a0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800a5a2:	4b06      	ldr	r3, [pc, #24]	; (800a5bc <pbuf_free_custom+0x3c>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f000 fe1a 	bl	800b1e0 <osSemaphoreRelease>
  }
}
 800a5ac:	bf00      	nop
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	0801e1a0 	.word	0x0801e1a0
 800a5b8:	24004c54 	.word	0x24004c54
 800a5bc:	24004c58 	.word	0x24004c58

0800a5c0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a5c4:	f7f7 fec0 	bl	8002348 <HAL_GetTick>
 800a5c8:	4603      	mov	r3, r0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	bd80      	pop	{r7, pc}
	...

0800a5d0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b08e      	sub	sp, #56	; 0x38
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5dc:	2200      	movs	r2, #0
 800a5de:	601a      	str	r2, [r3, #0]
 800a5e0:	605a      	str	r2, [r3, #4]
 800a5e2:	609a      	str	r2, [r3, #8]
 800a5e4:	60da      	str	r2, [r3, #12]
 800a5e6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a5d      	ldr	r2, [pc, #372]	; (800a764 <HAL_ETH_MspInit+0x194>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	f040 80b3 	bne.w	800a75a <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800a5f4:	4b5c      	ldr	r3, [pc, #368]	; (800a768 <HAL_ETH_MspInit+0x198>)
 800a5f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a5fa:	4a5b      	ldr	r2, [pc, #364]	; (800a768 <HAL_ETH_MspInit+0x198>)
 800a5fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a600:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a604:	4b58      	ldr	r3, [pc, #352]	; (800a768 <HAL_ETH_MspInit+0x198>)
 800a606:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a60a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a60e:	623b      	str	r3, [r7, #32]
 800a610:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800a612:	4b55      	ldr	r3, [pc, #340]	; (800a768 <HAL_ETH_MspInit+0x198>)
 800a614:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a618:	4a53      	ldr	r2, [pc, #332]	; (800a768 <HAL_ETH_MspInit+0x198>)
 800a61a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a61e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a622:	4b51      	ldr	r3, [pc, #324]	; (800a768 <HAL_ETH_MspInit+0x198>)
 800a624:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a62c:	61fb      	str	r3, [r7, #28]
 800a62e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800a630:	4b4d      	ldr	r3, [pc, #308]	; (800a768 <HAL_ETH_MspInit+0x198>)
 800a632:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a636:	4a4c      	ldr	r2, [pc, #304]	; (800a768 <HAL_ETH_MspInit+0x198>)
 800a638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a63c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a640:	4b49      	ldr	r3, [pc, #292]	; (800a768 <HAL_ETH_MspInit+0x198>)
 800a642:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a64a:	61bb      	str	r3, [r7, #24]
 800a64c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a64e:	4b46      	ldr	r3, [pc, #280]	; (800a768 <HAL_ETH_MspInit+0x198>)
 800a650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a654:	4a44      	ldr	r2, [pc, #272]	; (800a768 <HAL_ETH_MspInit+0x198>)
 800a656:	f043 0304 	orr.w	r3, r3, #4
 800a65a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a65e:	4b42      	ldr	r3, [pc, #264]	; (800a768 <HAL_ETH_MspInit+0x198>)
 800a660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a664:	f003 0304 	and.w	r3, r3, #4
 800a668:	617b      	str	r3, [r7, #20]
 800a66a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a66c:	4b3e      	ldr	r3, [pc, #248]	; (800a768 <HAL_ETH_MspInit+0x198>)
 800a66e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a672:	4a3d      	ldr	r2, [pc, #244]	; (800a768 <HAL_ETH_MspInit+0x198>)
 800a674:	f043 0301 	orr.w	r3, r3, #1
 800a678:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a67c:	4b3a      	ldr	r3, [pc, #232]	; (800a768 <HAL_ETH_MspInit+0x198>)
 800a67e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a682:	f003 0301 	and.w	r3, r3, #1
 800a686:	613b      	str	r3, [r7, #16]
 800a688:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a68a:	4b37      	ldr	r3, [pc, #220]	; (800a768 <HAL_ETH_MspInit+0x198>)
 800a68c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a690:	4a35      	ldr	r2, [pc, #212]	; (800a768 <HAL_ETH_MspInit+0x198>)
 800a692:	f043 0302 	orr.w	r3, r3, #2
 800a696:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a69a:	4b33      	ldr	r3, [pc, #204]	; (800a768 <HAL_ETH_MspInit+0x198>)
 800a69c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6a0:	f003 0302 	and.w	r3, r3, #2
 800a6a4:	60fb      	str	r3, [r7, #12]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a6a8:	4b2f      	ldr	r3, [pc, #188]	; (800a768 <HAL_ETH_MspInit+0x198>)
 800a6aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6ae:	4a2e      	ldr	r2, [pc, #184]	; (800a768 <HAL_ETH_MspInit+0x198>)
 800a6b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a6b8:	4b2b      	ldr	r3, [pc, #172]	; (800a768 <HAL_ETH_MspInit+0x198>)
 800a6ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6c2:	60bb      	str	r3, [r7, #8]
 800a6c4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a6c6:	2332      	movs	r3, #50	; 0x32
 800a6c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6ca:	2302      	movs	r3, #2
 800a6cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a6d6:	230b      	movs	r3, #11
 800a6d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a6da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6de:	4619      	mov	r1, r3
 800a6e0:	4822      	ldr	r0, [pc, #136]	; (800a76c <HAL_ETH_MspInit+0x19c>)
 800a6e2:	f7fa fa73 	bl	8004bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a6e6:	2386      	movs	r3, #134	; 0x86
 800a6e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6ea:	2302      	movs	r3, #2
 800a6ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6f2:	2303      	movs	r3, #3
 800a6f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a6f6:	230b      	movs	r3, #11
 800a6f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6fe:	4619      	mov	r1, r3
 800a700:	481b      	ldr	r0, [pc, #108]	; (800a770 <HAL_ETH_MspInit+0x1a0>)
 800a702:	f7fa fa63 	bl	8004bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a706:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a70a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a70c:	2302      	movs	r3, #2
 800a70e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a710:	2300      	movs	r3, #0
 800a712:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a714:	2303      	movs	r3, #3
 800a716:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a718:	230b      	movs	r3, #11
 800a71a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a71c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a720:	4619      	mov	r1, r3
 800a722:	4814      	ldr	r0, [pc, #80]	; (800a774 <HAL_ETH_MspInit+0x1a4>)
 800a724:	f7fa fa52 	bl	8004bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a728:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a72c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a72e:	2302      	movs	r3, #2
 800a730:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a732:	2300      	movs	r3, #0
 800a734:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a736:	2303      	movs	r3, #3
 800a738:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a73a:	230b      	movs	r3, #11
 800a73c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a73e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a742:	4619      	mov	r1, r3
 800a744:	480c      	ldr	r0, [pc, #48]	; (800a778 <HAL_ETH_MspInit+0x1a8>)
 800a746:	f7fa fa41 	bl	8004bcc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800a74a:	2200      	movs	r2, #0
 800a74c:	2105      	movs	r1, #5
 800a74e:	203d      	movs	r0, #61	; 0x3d
 800a750:	f7f7 fed2 	bl	80024f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a754:	203d      	movs	r0, #61	; 0x3d
 800a756:	f7f7 fee9 	bl	800252c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a75a:	bf00      	nop
 800a75c:	3738      	adds	r7, #56	; 0x38
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	40028000 	.word	0x40028000
 800a768:	58024400 	.word	0x58024400
 800a76c:	58020800 	.word	0x58020800
 800a770:	58020000 	.word	0x58020000
 800a774:	58020400 	.word	0x58020400
 800a778:	58021800 	.word	0x58021800

0800a77c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a780:	4802      	ldr	r0, [pc, #8]	; (800a78c <ETH_PHY_IO_Init+0x10>)
 800a782:	f7f9 fc49 	bl	8004018 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a786:	2300      	movs	r3, #0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	24004c60 	.word	0x24004c60

0800a790 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a790:	b480      	push	{r7}
 800a792:	af00      	add	r7, sp, #0
  return 0;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	68ba      	ldr	r2, [r7, #8]
 800a7b0:	68f9      	ldr	r1, [r7, #12]
 800a7b2:	4807      	ldr	r0, [pc, #28]	; (800a7d0 <ETH_PHY_IO_ReadReg+0x30>)
 800a7b4:	f7f9 f99a 	bl	8003aec <HAL_ETH_ReadPHYRegister>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d002      	beq.n	800a7c4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a7be:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c2:	e000      	b.n	800a7c6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	24004c60 	.word	0x24004c60

0800a7d4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	68ba      	ldr	r2, [r7, #8]
 800a7e4:	68f9      	ldr	r1, [r7, #12]
 800a7e6:	4807      	ldr	r0, [pc, #28]	; (800a804 <ETH_PHY_IO_WriteReg+0x30>)
 800a7e8:	f7f9 f9d4 	bl	8003b94 <HAL_ETH_WritePHYRegister>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d002      	beq.n	800a7f8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a7f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a7f6:	e000      	b.n	800a7fa <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3710      	adds	r7, #16
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	24004c60 	.word	0x24004c60

0800a808 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a80c:	f7f7 fd9c 	bl	8002348 <HAL_GetTick>
 800a810:	4603      	mov	r3, r0
}
 800a812:	4618      	mov	r0, r3
 800a814:	bd80      	pop	{r7, pc}
	...

0800a818 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b0a0      	sub	sp, #128	; 0x80
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800a820:	f107 0308 	add.w	r3, r7, #8
 800a824:	2264      	movs	r2, #100	; 0x64
 800a826:	2100      	movs	r1, #0
 800a828:	4618      	mov	r0, r3
 800a82a:	f00f fc73 	bl	801a114 <memset>
  int32_t PHYLinkState = 0;
 800a82e:	2300      	movs	r3, #0
 800a830:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800a832:	2300      	movs	r3, #0
 800a834:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a836:	2300      	movs	r3, #0
 800a838:	67bb      	str	r3, [r7, #120]	; 0x78
 800a83a:	2300      	movs	r3, #0
 800a83c:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	66fb      	str	r3, [r7, #108]	; 0x6c
   * This trick allows to keep this change through
   * code re-generation by STM32CubeMX
   */
#define HAL_ETH_Start HAL_ETH_Start_IT
  /* ETH_CODE: workaround to call LOCK_TCPIP_CORE when accessing netif link functions*/
  LOCK_TCPIP_CORE();
 800a842:	f000 f921 	bl	800aa88 <sys_lock_tcpip_core>
/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a846:	483c      	ldr	r0, [pc, #240]	; (800a938 <ethernet_link_thread+0x120>)
 800a848:	f7f7 fca7 	bl	800219a <LAN8742_GetLinkState>
 800a84c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a84e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a850:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a854:	089b      	lsrs	r3, r3, #2
 800a856:	f003 0301 	and.w	r3, r3, #1
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d00c      	beq.n	800a87a <ethernet_link_thread+0x62>
 800a860:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a862:	2b01      	cmp	r3, #1
 800a864:	dc09      	bgt.n	800a87a <ethernet_link_thread+0x62>
  {
    HAL_ETH_Stop_IT(&heth);
 800a866:	4835      	ldr	r0, [pc, #212]	; (800a93c <ethernet_link_thread+0x124>)
 800a868:	f7f8 fdc0 	bl	80033ec <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800a86c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a86e:	f005 f9cf 	bl	800fc10 <netif_set_down>
    netif_set_link_down(netif);
 800a872:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a874:	f005 fa36 	bl	800fce4 <netif_set_link_down>
 800a878:	e055      	b.n	800a926 <ethernet_link_thread+0x10e>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a87a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a87c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a880:	f003 0304 	and.w	r3, r3, #4
 800a884:	2b00      	cmp	r3, #0
 800a886:	d14e      	bne.n	800a926 <ethernet_link_thread+0x10e>
 800a888:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	dd4b      	ble.n	800a926 <ethernet_link_thread+0x10e>
  {
    switch (PHYLinkState)
 800a88e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a890:	3b02      	subs	r3, #2
 800a892:	2b03      	cmp	r3, #3
 800a894:	d82a      	bhi.n	800a8ec <ethernet_link_thread+0xd4>
 800a896:	a201      	add	r2, pc, #4	; (adr r2, 800a89c <ethernet_link_thread+0x84>)
 800a898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a89c:	0800a8ad 	.word	0x0800a8ad
 800a8a0:	0800a8bf 	.word	0x0800a8bf
 800a8a4:	0800a8cf 	.word	0x0800a8cf
 800a8a8:	0800a8df 	.word	0x0800a8df
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a8ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a8b0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a8b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a8b6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a8bc:	e017      	b.n	800a8ee <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a8c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a8c6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a8cc:	e00f      	b.n	800a8ee <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a8ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a8d2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a8dc:	e007      	b.n	800a8ee <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a8ea:	e000      	b.n	800a8ee <ethernet_link_thread+0xd6>
    default:
      break;
 800a8ec:	bf00      	nop
    }

    if(linkchanged)
 800a8ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d018      	beq.n	800a926 <ethernet_link_thread+0x10e>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a8f4:	f107 0308 	add.w	r3, r7, #8
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	4810      	ldr	r0, [pc, #64]	; (800a93c <ethernet_link_thread+0x124>)
 800a8fc:	f7f9 f99e 	bl	8003c3c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a902:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800a904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a906:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a908:	f107 0308 	add.w	r3, r7, #8
 800a90c:	4619      	mov	r1, r3
 800a90e:	480b      	ldr	r0, [pc, #44]	; (800a93c <ethernet_link_thread+0x124>)
 800a910:	f7f9 fb68 	bl	8003fe4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800a914:	4809      	ldr	r0, [pc, #36]	; (800a93c <ethernet_link_thread+0x124>)
 800a916:	f7f8 fcdd 	bl	80032d4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800a91a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a91c:	f005 f90a 	bl	800fb34 <netif_set_up>
      netif_set_link_up(netif);
 800a920:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a922:	f005 f9a9 	bl	800fc78 <netif_set_link_up>
    }
  }

/* USER CODE BEGIN ETH link Thread core code for User BSP */
  /* ETH_CODE: workaround to call LOCK_TCPIP_CORE when accessing netif link functions*/
  UNLOCK_TCPIP_CORE();
 800a926:	f000 f8bf 	bl	800aaa8 <sys_unlock_tcpip_core>
  osDelay(100);
 800a92a:	2064      	movs	r0, #100	; 0x64
 800a92c:	f000 fa53 	bl	800add6 <osDelay>
  LOCK_TCPIP_CORE();
 800a930:	f000 f8aa 	bl	800aa88 <sys_lock_tcpip_core>
  continue; /* skip next osDelay */
 800a934:	bf00      	nop
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a936:	e786      	b.n	800a846 <ethernet_link_thread+0x2e>
 800a938:	24004d48 	.word	0x24004d48
 800a93c:	24004c60 	.word	0x24004c60

0800a940 <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b086      	sub	sp, #24
 800a944:	af02      	add	r7, sp, #8
 800a946:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a948:	4812      	ldr	r0, [pc, #72]	; (800a994 <HAL_ETH_RxAllocateCallback+0x54>)
 800a94a:	f004 fe63 	bl	800f614 <memp_malloc_pool>
 800a94e:	60f8      	str	r0, [r7, #12]
  if (p)
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d014      	beq.n	800a980 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f103 0220 	add.w	r2, r3, #32
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	4a0d      	ldr	r2, [pc, #52]	; (800a998 <HAL_ETH_RxAllocateCallback+0x58>)
 800a964:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a96e:	9201      	str	r2, [sp, #4]
 800a970:	9300      	str	r3, [sp, #0]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2241      	movs	r2, #65	; 0x41
 800a976:	2100      	movs	r1, #0
 800a978:	2000      	movs	r0, #0
 800a97a:	f005 fbdd 	bl	8010138 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800a97e:	e005      	b.n	800a98c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800a980:	4b06      	ldr	r3, [pc, #24]	; (800a99c <HAL_ETH_RxAllocateCallback+0x5c>)
 800a982:	2201      	movs	r2, #1
 800a984:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	601a      	str	r2, [r3, #0]
}
 800a98c:	bf00      	nop
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	0801e1a0 	.word	0x0801e1a0
 800a998:	0800a581 	.word	0x0800a581
 800a99c:	24004c54 	.word	0x24004c54

0800a9a0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b08d      	sub	sp, #52	; 0x34
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	607a      	str	r2, [r7, #4]
 800a9ac:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	3b20      	subs	r3, #32
 800a9be:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 800a9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800a9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800a9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ce:	887a      	ldrh	r2, [r7, #2]
 800a9d0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800a9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d103      	bne.n	800a9e2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800a9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9de:	601a      	str	r2, [r3, #0]
 800a9e0:	e003      	b.n	800a9ea <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9e8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800a9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9ee:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800a9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9f6:	e009      	b.n	800aa0c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800a9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9fa:	891a      	ldrh	r2, [r3, #8]
 800a9fc:	887b      	ldrh	r3, [r7, #2]
 800a9fe:	4413      	add	r3, r2
 800aa00:	b29a      	uxth	r2, r3
 800aa02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa04:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800aa06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d1f2      	bne.n	800a9f8 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800aa12:	887b      	ldrh	r3, [r7, #2]
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	623a      	str	r2, [r7, #32]
 800aa18:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	dd1d      	ble.n	800aa5c <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800aa20:	6a3b      	ldr	r3, [r7, #32]
 800aa22:	f003 021f 	and.w	r2, r3, #31
 800aa26:	69fb      	ldr	r3, [r7, #28]
 800aa28:	4413      	add	r3, r2
 800aa2a:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800aa2c:	6a3b      	ldr	r3, [r7, #32]
 800aa2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800aa30:	f3bf 8f4f 	dsb	sy
}
 800aa34:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800aa36:	4a0d      	ldr	r2, [pc, #52]	; (800aa6c <HAL_ETH_RxLinkCallback+0xcc>)
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	3320      	adds	r3, #32
 800aa42:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	3b20      	subs	r3, #32
 800aa48:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	dcf2      	bgt.n	800aa36 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800aa50:	f3bf 8f4f 	dsb	sy
}
 800aa54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800aa56:	f3bf 8f6f 	isb	sy
}
 800aa5a:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800aa5c:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800aa5e:	bf00      	nop
 800aa60:	3734      	adds	r7, #52	; 0x34
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	e000ed00 	.word	0xe000ed00

0800aa70 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f005 fd17 	bl	80104ac <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800aa7e:	bf00      	nop
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
	...

0800aa88 <sys_lock_tcpip_core>:
/* ETH_CODE: add functions needed for proper multithreading support and check */

static osThreadId_t lwip_core_lock_holder_thread_id;
static osThreadId_t lwip_tcpip_thread_id;

void sys_lock_tcpip_core(void){
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	af00      	add	r7, sp, #0
	sys_mutex_lock(&lock_tcpip_core);
 800aa8c:	4804      	ldr	r0, [pc, #16]	; (800aaa0 <sys_lock_tcpip_core+0x18>)
 800aa8e:	f00f f8a3 	bl	8019bd8 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 800aa92:	f000 f995 	bl	800adc0 <osThreadGetId>
 800aa96:	4603      	mov	r3, r0
 800aa98:	4a02      	ldr	r2, [pc, #8]	; (800aaa4 <sys_lock_tcpip_core+0x1c>)
 800aa9a:	6013      	str	r3, [r2, #0]
}
 800aa9c:	bf00      	nop
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	2400e564 	.word	0x2400e564
 800aaa4:	24004d68 	.word	0x24004d68

0800aaa8 <sys_unlock_tcpip_core>:

void sys_unlock_tcpip_core(void){
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	af00      	add	r7, sp, #0
	lwip_core_lock_holder_thread_id = 0;
 800aaac:	4b03      	ldr	r3, [pc, #12]	; (800aabc <sys_unlock_tcpip_core+0x14>)
 800aaae:	2200      	movs	r2, #0
 800aab0:	601a      	str	r2, [r3, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 800aab2:	4803      	ldr	r0, [pc, #12]	; (800aac0 <sys_unlock_tcpip_core+0x18>)
 800aab4:	f00f f89f 	bl	8019bf6 <sys_mutex_unlock>
}
 800aab8:	bf00      	nop
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	24004d68 	.word	0x24004d68
 800aac0:	2400e564 	.word	0x2400e564

0800aac4 <sys_check_core_locking>:

void sys_check_core_locking(void){
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
  /* Embedded systems should check we are NOT in an interrupt context here */

  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 800aaca:	4b15      	ldr	r3, [pc, #84]	; (800ab20 <sys_check_core_locking+0x5c>)
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d006      	beq.n	800aae4 <sys_check_core_locking+0x20>
 800aad6:	4b13      	ldr	r3, [pc, #76]	; (800ab24 <sys_check_core_locking+0x60>)
 800aad8:	f240 32c6 	movw	r2, #966	; 0x3c6
 800aadc:	4912      	ldr	r1, [pc, #72]	; (800ab28 <sys_check_core_locking+0x64>)
 800aade:	4813      	ldr	r0, [pc, #76]	; (800ab2c <sys_check_core_locking+0x68>)
 800aae0:	f00f f9c2 	bl	8019e68 <iprintf>

  if (lwip_tcpip_thread_id != 0) {
 800aae4:	4b12      	ldr	r3, [pc, #72]	; (800ab30 <sys_check_core_locking+0x6c>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d014      	beq.n	800ab16 <sys_check_core_locking+0x52>
	  osThreadId_t current_thread_id = osThreadGetId();
 800aaec:	f000 f968 	bl	800adc0 <osThreadGetId>
 800aaf0:	6078      	str	r0, [r7, #4]

#if LWIP_TCPIP_CORE_LOCKING
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 800aaf2:	4b10      	ldr	r3, [pc, #64]	; (800ab34 <sys_check_core_locking+0x70>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d006      	beq.n	800ab0a <sys_check_core_locking+0x46>
 800aafc:	4b09      	ldr	r3, [pc, #36]	; (800ab24 <sys_check_core_locking+0x60>)
 800aafe:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 800ab02:	490d      	ldr	r1, [pc, #52]	; (800ab38 <sys_check_core_locking+0x74>)
 800ab04:	4809      	ldr	r0, [pc, #36]	; (800ab2c <sys_check_core_locking+0x68>)
 800ab06:	f00f f9af 	bl	8019e68 <iprintf>
	/* ETH_CODE: to easily check that example has correct handling of core lock
	 * This will trigger breakpoint (__BKPT)
	 */
#warning Below check should be removed in production code
	if(current_thread_id != lwip_core_lock_holder_thread_id) __BKPT(0);
 800ab0a:	4b0a      	ldr	r3, [pc, #40]	; (800ab34 <sys_check_core_locking+0x70>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d000      	beq.n	800ab16 <sys_check_core_locking+0x52>
 800ab14:	be00      	bkpt	0x0000
#else /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_ASSERT("Function called from wrong thread", current_thread_id == lwip_tcpip_thread_id);
#endif /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_UNUSED_ARG(current_thread_id); /* for LWIP_NOASSERT */
  }
}
 800ab16:	bf00      	nop
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	e000ed00 	.word	0xe000ed00
 800ab24:	0801afc4 	.word	0x0801afc4
 800ab28:	0801b018 	.word	0x0801b018
 800ab2c:	0801aff0 	.word	0x0801aff0
 800ab30:	24004d6c 	.word	0x24004d6c
 800ab34:	24004d68 	.word	0x24004d68
 800ab38:	0801b040 	.word	0x0801b040

0800ab3c <sys_mark_tcpip_thread>:
void sys_mark_tcpip_thread(void){
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	af00      	add	r7, sp, #0
	lwip_tcpip_thread_id = osThreadGetId();
 800ab40:	f000 f93e 	bl	800adc0 <osThreadGetId>
 800ab44:	4603      	mov	r3, r0
 800ab46:	4a02      	ldr	r2, [pc, #8]	; (800ab50 <sys_mark_tcpip_thread+0x14>)
 800ab48:	6013      	str	r3, [r2, #0]
}
 800ab4a:	bf00      	nop
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	24004d6c 	.word	0x24004d6c

0800ab54 <__NVIC_SetPriority>:
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	6039      	str	r1, [r7, #0]
 800ab5e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ab60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	db0a      	blt.n	800ab7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	b2da      	uxtb	r2, r3
 800ab6c:	490c      	ldr	r1, [pc, #48]	; (800aba0 <__NVIC_SetPriority+0x4c>)
 800ab6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ab72:	0112      	lsls	r2, r2, #4
 800ab74:	b2d2      	uxtb	r2, r2
 800ab76:	440b      	add	r3, r1
 800ab78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ab7c:	e00a      	b.n	800ab94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	b2da      	uxtb	r2, r3
 800ab82:	4908      	ldr	r1, [pc, #32]	; (800aba4 <__NVIC_SetPriority+0x50>)
 800ab84:	88fb      	ldrh	r3, [r7, #6]
 800ab86:	f003 030f 	and.w	r3, r3, #15
 800ab8a:	3b04      	subs	r3, #4
 800ab8c:	0112      	lsls	r2, r2, #4
 800ab8e:	b2d2      	uxtb	r2, r2
 800ab90:	440b      	add	r3, r1
 800ab92:	761a      	strb	r2, [r3, #24]
}
 800ab94:	bf00      	nop
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr
 800aba0:	e000e100 	.word	0xe000e100
 800aba4:	e000ed00 	.word	0xe000ed00

0800aba8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800aba8:	b580      	push	{r7, lr}
 800abaa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800abac:	4b05      	ldr	r3, [pc, #20]	; (800abc4 <SysTick_Handler+0x1c>)
 800abae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800abb0:	f002 fcb2 	bl	800d518 <xTaskGetSchedulerState>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d001      	beq.n	800abbe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800abba:	f003 fb95 	bl	800e2e8 <xPortSysTickHandler>
  }
}
 800abbe:	bf00      	nop
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	e000e010 	.word	0xe000e010

0800abc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800abc8:	b580      	push	{r7, lr}
 800abca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800abcc:	2100      	movs	r1, #0
 800abce:	f06f 0004 	mvn.w	r0, #4
 800abd2:	f7ff ffbf 	bl	800ab54 <__NVIC_SetPriority>
#endif
}
 800abd6:	bf00      	nop
 800abd8:	bd80      	pop	{r7, pc}
	...

0800abdc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abe2:	f3ef 8305 	mrs	r3, IPSR
 800abe6:	603b      	str	r3, [r7, #0]
  return(result);
 800abe8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800abea:	2b00      	cmp	r3, #0
 800abec:	d003      	beq.n	800abf6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800abee:	f06f 0305 	mvn.w	r3, #5
 800abf2:	607b      	str	r3, [r7, #4]
 800abf4:	e00c      	b.n	800ac10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800abf6:	4b0a      	ldr	r3, [pc, #40]	; (800ac20 <osKernelInitialize+0x44>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d105      	bne.n	800ac0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800abfe:	4b08      	ldr	r3, [pc, #32]	; (800ac20 <osKernelInitialize+0x44>)
 800ac00:	2201      	movs	r2, #1
 800ac02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ac04:	2300      	movs	r3, #0
 800ac06:	607b      	str	r3, [r7, #4]
 800ac08:	e002      	b.n	800ac10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ac0a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ac10:	687b      	ldr	r3, [r7, #4]
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	370c      	adds	r7, #12
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	24004d70 	.word	0x24004d70

0800ac24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac2a:	f3ef 8305 	mrs	r3, IPSR
 800ac2e:	603b      	str	r3, [r7, #0]
  return(result);
 800ac30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d003      	beq.n	800ac3e <osKernelStart+0x1a>
    stat = osErrorISR;
 800ac36:	f06f 0305 	mvn.w	r3, #5
 800ac3a:	607b      	str	r3, [r7, #4]
 800ac3c:	e010      	b.n	800ac60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ac3e:	4b0b      	ldr	r3, [pc, #44]	; (800ac6c <osKernelStart+0x48>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d109      	bne.n	800ac5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ac46:	f7ff ffbf 	bl	800abc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ac4a:	4b08      	ldr	r3, [pc, #32]	; (800ac6c <osKernelStart+0x48>)
 800ac4c:	2202      	movs	r2, #2
 800ac4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ac50:	f001 ffd4 	bl	800cbfc <vTaskStartScheduler>
      stat = osOK;
 800ac54:	2300      	movs	r3, #0
 800ac56:	607b      	str	r3, [r7, #4]
 800ac58:	e002      	b.n	800ac60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ac5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ac60:	687b      	ldr	r3, [r7, #4]
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3708      	adds	r7, #8
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	24004d70 	.word	0x24004d70

0800ac70 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac76:	f3ef 8305 	mrs	r3, IPSR
 800ac7a:	603b      	str	r3, [r7, #0]
  return(result);
 800ac7c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d003      	beq.n	800ac8a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800ac82:	f002 f8e7 	bl	800ce54 <xTaskGetTickCountFromISR>
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	e002      	b.n	800ac90 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800ac8a:	f002 f8d3 	bl	800ce34 <xTaskGetTickCount>
 800ac8e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800ac90:	687b      	ldr	r3, [r7, #4]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b08e      	sub	sp, #56	; 0x38
 800ac9e:	af04      	add	r7, sp, #16
 800aca0:	60f8      	str	r0, [r7, #12]
 800aca2:	60b9      	str	r1, [r7, #8]
 800aca4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aca6:	2300      	movs	r3, #0
 800aca8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acaa:	f3ef 8305 	mrs	r3, IPSR
 800acae:	617b      	str	r3, [r7, #20]
  return(result);
 800acb0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d17f      	bne.n	800adb6 <osThreadNew+0x11c>
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d07c      	beq.n	800adb6 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800acbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acc0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800acc2:	2318      	movs	r3, #24
 800acc4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800acc6:	2300      	movs	r3, #0
 800acc8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800acca:	f04f 33ff 	mov.w	r3, #4294967295
 800acce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d045      	beq.n	800ad62 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d002      	beq.n	800ace4 <osThreadNew+0x4a>
        name = attr->name;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	699b      	ldr	r3, [r3, #24]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d002      	beq.n	800acf2 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	699b      	ldr	r3, [r3, #24]
 800acf0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800acf2:	69fb      	ldr	r3, [r7, #28]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d008      	beq.n	800ad0a <osThreadNew+0x70>
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	2b38      	cmp	r3, #56	; 0x38
 800acfc:	d805      	bhi.n	800ad0a <osThreadNew+0x70>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	f003 0301 	and.w	r3, r3, #1
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d001      	beq.n	800ad0e <osThreadNew+0x74>
        return (NULL);
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	e054      	b.n	800adb8 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	695b      	ldr	r3, [r3, #20]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d003      	beq.n	800ad1e <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	089b      	lsrs	r3, r3, #2
 800ad1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00e      	beq.n	800ad44 <osThreadNew+0xaa>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	68db      	ldr	r3, [r3, #12]
 800ad2a:	2ba7      	cmp	r3, #167	; 0xa7
 800ad2c:	d90a      	bls.n	800ad44 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d006      	beq.n	800ad44 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	695b      	ldr	r3, [r3, #20]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d002      	beq.n	800ad44 <osThreadNew+0xaa>
        mem = 1;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	61bb      	str	r3, [r7, #24]
 800ad42:	e010      	b.n	800ad66 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d10c      	bne.n	800ad66 <osThreadNew+0xcc>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	68db      	ldr	r3, [r3, #12]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d108      	bne.n	800ad66 <osThreadNew+0xcc>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	691b      	ldr	r3, [r3, #16]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d104      	bne.n	800ad66 <osThreadNew+0xcc>
          mem = 0;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	61bb      	str	r3, [r7, #24]
 800ad60:	e001      	b.n	800ad66 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800ad62:	2300      	movs	r3, #0
 800ad64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d110      	bne.n	800ad8e <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ad74:	9202      	str	r2, [sp, #8]
 800ad76:	9301      	str	r3, [sp, #4]
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	6a3a      	ldr	r2, [r7, #32]
 800ad80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad82:	68f8      	ldr	r0, [r7, #12]
 800ad84:	f001 fd4e 	bl	800c824 <xTaskCreateStatic>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	613b      	str	r3, [r7, #16]
 800ad8c:	e013      	b.n	800adb6 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800ad8e:	69bb      	ldr	r3, [r7, #24]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d110      	bne.n	800adb6 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ad94:	6a3b      	ldr	r3, [r7, #32]
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	f107 0310 	add.w	r3, r7, #16
 800ad9c:	9301      	str	r3, [sp, #4]
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	9300      	str	r3, [sp, #0]
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f001 fd99 	bl	800c8de <xTaskCreate>
 800adac:	4603      	mov	r3, r0
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d001      	beq.n	800adb6 <osThreadNew+0x11c>
            hTask = NULL;
 800adb2:	2300      	movs	r3, #0
 800adb4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800adb6:	693b      	ldr	r3, [r7, #16]
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3728      	adds	r7, #40	; 0x28
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800adc6:	f002 fb97 	bl	800d4f8 <xTaskGetCurrentTaskHandle>
 800adca:	6078      	str	r0, [r7, #4]

  return (id);
 800adcc:	687b      	ldr	r3, [r7, #4]
}
 800adce:	4618      	mov	r0, r3
 800add0:	3708      	adds	r7, #8
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}

0800add6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800add6:	b580      	push	{r7, lr}
 800add8:	b084      	sub	sp, #16
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adde:	f3ef 8305 	mrs	r3, IPSR
 800ade2:	60bb      	str	r3, [r7, #8]
  return(result);
 800ade4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d003      	beq.n	800adf2 <osDelay+0x1c>
    stat = osErrorISR;
 800adea:	f06f 0305 	mvn.w	r3, #5
 800adee:	60fb      	str	r3, [r7, #12]
 800adf0:	e007      	b.n	800ae02 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800adf2:	2300      	movs	r3, #0
 800adf4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d002      	beq.n	800ae02 <osDelay+0x2c>
      vTaskDelay(ticks);
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f001 fec9 	bl	800cb94 <vTaskDelay>
    }
  }

  return (stat);
 800ae02:	68fb      	ldr	r3, [r7, #12]
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3710      	adds	r7, #16
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b088      	sub	sp, #32
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ae14:	2300      	movs	r3, #0
 800ae16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae18:	f3ef 8305 	mrs	r3, IPSR
 800ae1c:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae1e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d174      	bne.n	800af0e <osMutexNew+0x102>
    if (attr != NULL) {
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d003      	beq.n	800ae32 <osMutexNew+0x26>
      type = attr->attr_bits;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	61bb      	str	r3, [r7, #24]
 800ae30:	e001      	b.n	800ae36 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800ae32:	2300      	movs	r3, #0
 800ae34:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	f003 0301 	and.w	r3, r3, #1
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d002      	beq.n	800ae46 <osMutexNew+0x3a>
      rmtx = 1U;
 800ae40:	2301      	movs	r3, #1
 800ae42:	617b      	str	r3, [r7, #20]
 800ae44:	e001      	b.n	800ae4a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800ae46:	2300      	movs	r3, #0
 800ae48:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	f003 0308 	and.w	r3, r3, #8
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d15c      	bne.n	800af0e <osMutexNew+0x102>
      mem = -1;
 800ae54:	f04f 33ff 	mov.w	r3, #4294967295
 800ae58:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d015      	beq.n	800ae8c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d006      	beq.n	800ae76 <osMutexNew+0x6a>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	2b4f      	cmp	r3, #79	; 0x4f
 800ae6e:	d902      	bls.n	800ae76 <osMutexNew+0x6a>
          mem = 1;
 800ae70:	2301      	movs	r3, #1
 800ae72:	613b      	str	r3, [r7, #16]
 800ae74:	e00c      	b.n	800ae90 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d108      	bne.n	800ae90 <osMutexNew+0x84>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d104      	bne.n	800ae90 <osMutexNew+0x84>
            mem = 0;
 800ae86:	2300      	movs	r3, #0
 800ae88:	613b      	str	r3, [r7, #16]
 800ae8a:	e001      	b.n	800ae90 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d112      	bne.n	800aebc <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d007      	beq.n	800aeac <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	4619      	mov	r1, r3
 800aea2:	2004      	movs	r0, #4
 800aea4:	f000 fd69 	bl	800b97a <xQueueCreateMutexStatic>
 800aea8:	61f8      	str	r0, [r7, #28]
 800aeaa:	e016      	b.n	800aeda <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	2001      	movs	r0, #1
 800aeb4:	f000 fd61 	bl	800b97a <xQueueCreateMutexStatic>
 800aeb8:	61f8      	str	r0, [r7, #28]
 800aeba:	e00e      	b.n	800aeda <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d10b      	bne.n	800aeda <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d004      	beq.n	800aed2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800aec8:	2004      	movs	r0, #4
 800aeca:	f000 fd3e 	bl	800b94a <xQueueCreateMutex>
 800aece:	61f8      	str	r0, [r7, #28]
 800aed0:	e003      	b.n	800aeda <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800aed2:	2001      	movs	r0, #1
 800aed4:	f000 fd39 	bl	800b94a <xQueueCreateMutex>
 800aed8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00c      	beq.n	800aefa <osMutexNew+0xee>
        if (attr != NULL) {
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d003      	beq.n	800aeee <osMutexNew+0xe2>
          name = attr->name;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	60fb      	str	r3, [r7, #12]
 800aeec:	e001      	b.n	800aef2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800aeee:	2300      	movs	r3, #0
 800aef0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800aef2:	68f9      	ldr	r1, [r7, #12]
 800aef4:	69f8      	ldr	r0, [r7, #28]
 800aef6:	f001 fc0d 	bl	800c714 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d006      	beq.n	800af0e <osMutexNew+0x102>
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d003      	beq.n	800af0e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	f043 0301 	orr.w	r3, r3, #1
 800af0c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800af0e:	69fb      	ldr	r3, [r7, #28]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3720      	adds	r7, #32
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800af18:	b580      	push	{r7, lr}
 800af1a:	b086      	sub	sp, #24
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f023 0301 	bic.w	r3, r3, #1
 800af28:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f003 0301 	and.w	r3, r3, #1
 800af30:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800af32:	2300      	movs	r3, #0
 800af34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af36:	f3ef 8305 	mrs	r3, IPSR
 800af3a:	60bb      	str	r3, [r7, #8]
  return(result);
 800af3c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d003      	beq.n	800af4a <osMutexAcquire+0x32>
    stat = osErrorISR;
 800af42:	f06f 0305 	mvn.w	r3, #5
 800af46:	617b      	str	r3, [r7, #20]
 800af48:	e02c      	b.n	800afa4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d103      	bne.n	800af58 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800af50:	f06f 0303 	mvn.w	r3, #3
 800af54:	617b      	str	r3, [r7, #20]
 800af56:	e025      	b.n	800afa4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d011      	beq.n	800af82 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800af5e:	6839      	ldr	r1, [r7, #0]
 800af60:	6938      	ldr	r0, [r7, #16]
 800af62:	f000 fd59 	bl	800ba18 <xQueueTakeMutexRecursive>
 800af66:	4603      	mov	r3, r0
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d01b      	beq.n	800afa4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d003      	beq.n	800af7a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800af72:	f06f 0301 	mvn.w	r3, #1
 800af76:	617b      	str	r3, [r7, #20]
 800af78:	e014      	b.n	800afa4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800af7a:	f06f 0302 	mvn.w	r3, #2
 800af7e:	617b      	str	r3, [r7, #20]
 800af80:	e010      	b.n	800afa4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800af82:	6839      	ldr	r1, [r7, #0]
 800af84:	6938      	ldr	r0, [r7, #16]
 800af86:	f001 f8ed 	bl	800c164 <xQueueSemaphoreTake>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d009      	beq.n	800afa4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d003      	beq.n	800af9e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800af96:	f06f 0301 	mvn.w	r3, #1
 800af9a:	617b      	str	r3, [r7, #20]
 800af9c:	e002      	b.n	800afa4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800af9e:	f06f 0302 	mvn.w	r3, #2
 800afa2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800afa4:	697b      	ldr	r3, [r7, #20]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3718      	adds	r7, #24
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800afae:	b580      	push	{r7, lr}
 800afb0:	b086      	sub	sp, #24
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f023 0301 	bic.w	r3, r3, #1
 800afbc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f003 0301 	and.w	r3, r3, #1
 800afc4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800afc6:	2300      	movs	r3, #0
 800afc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afca:	f3ef 8305 	mrs	r3, IPSR
 800afce:	60bb      	str	r3, [r7, #8]
  return(result);
 800afd0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d003      	beq.n	800afde <osMutexRelease+0x30>
    stat = osErrorISR;
 800afd6:	f06f 0305 	mvn.w	r3, #5
 800afda:	617b      	str	r3, [r7, #20]
 800afdc:	e01f      	b.n	800b01e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d103      	bne.n	800afec <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800afe4:	f06f 0303 	mvn.w	r3, #3
 800afe8:	617b      	str	r3, [r7, #20]
 800afea:	e018      	b.n	800b01e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d009      	beq.n	800b006 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800aff2:	6938      	ldr	r0, [r7, #16]
 800aff4:	f000 fcdc 	bl	800b9b0 <xQueueGiveMutexRecursive>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b01      	cmp	r3, #1
 800affc:	d00f      	beq.n	800b01e <osMutexRelease+0x70>
        stat = osErrorResource;
 800affe:	f06f 0302 	mvn.w	r3, #2
 800b002:	617b      	str	r3, [r7, #20]
 800b004:	e00b      	b.n	800b01e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b006:	2300      	movs	r3, #0
 800b008:	2200      	movs	r2, #0
 800b00a:	2100      	movs	r1, #0
 800b00c:	6938      	ldr	r0, [r7, #16]
 800b00e:	f000 fda3 	bl	800bb58 <xQueueGenericSend>
 800b012:	4603      	mov	r3, r0
 800b014:	2b01      	cmp	r3, #1
 800b016:	d002      	beq.n	800b01e <osMutexRelease+0x70>
        stat = osErrorResource;
 800b018:	f06f 0302 	mvn.w	r3, #2
 800b01c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b01e:	697b      	ldr	r3, [r7, #20]
}
 800b020:	4618      	mov	r0, r3
 800b022:	3718      	adds	r7, #24
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b028:	b580      	push	{r7, lr}
 800b02a:	b08a      	sub	sp, #40	; 0x28
 800b02c:	af02      	add	r7, sp, #8
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b034:	2300      	movs	r3, #0
 800b036:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b038:	f3ef 8305 	mrs	r3, IPSR
 800b03c:	613b      	str	r3, [r7, #16]
  return(result);
 800b03e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b040:	2b00      	cmp	r3, #0
 800b042:	d175      	bne.n	800b130 <osSemaphoreNew+0x108>
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d072      	beq.n	800b130 <osSemaphoreNew+0x108>
 800b04a:	68ba      	ldr	r2, [r7, #8]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d86e      	bhi.n	800b130 <osSemaphoreNew+0x108>
    mem = -1;
 800b052:	f04f 33ff 	mov.w	r3, #4294967295
 800b056:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d015      	beq.n	800b08a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	689b      	ldr	r3, [r3, #8]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d006      	beq.n	800b074 <osSemaphoreNew+0x4c>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	2b4f      	cmp	r3, #79	; 0x4f
 800b06c:	d902      	bls.n	800b074 <osSemaphoreNew+0x4c>
        mem = 1;
 800b06e:	2301      	movs	r3, #1
 800b070:	61bb      	str	r3, [r7, #24]
 800b072:	e00c      	b.n	800b08e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d108      	bne.n	800b08e <osSemaphoreNew+0x66>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d104      	bne.n	800b08e <osSemaphoreNew+0x66>
          mem = 0;
 800b084:	2300      	movs	r3, #0
 800b086:	61bb      	str	r3, [r7, #24]
 800b088:	e001      	b.n	800b08e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b08a:	2300      	movs	r3, #0
 800b08c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b094:	d04c      	beq.n	800b130 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d128      	bne.n	800b0ee <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b09c:	69bb      	ldr	r3, [r7, #24]
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d10a      	bne.n	800b0b8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	2203      	movs	r2, #3
 800b0a8:	9200      	str	r2, [sp, #0]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	2001      	movs	r0, #1
 800b0b0:	f000 fb5c 	bl	800b76c <xQueueGenericCreateStatic>
 800b0b4:	61f8      	str	r0, [r7, #28]
 800b0b6:	e005      	b.n	800b0c4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b0b8:	2203      	movs	r2, #3
 800b0ba:	2100      	movs	r1, #0
 800b0bc:	2001      	movs	r0, #1
 800b0be:	f000 fbcd 	bl	800b85c <xQueueGenericCreate>
 800b0c2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d022      	beq.n	800b110 <osSemaphoreNew+0xe8>
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d01f      	beq.n	800b110 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	69f8      	ldr	r0, [r7, #28]
 800b0d8:	f000 fd3e 	bl	800bb58 <xQueueGenericSend>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d016      	beq.n	800b110 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b0e2:	69f8      	ldr	r0, [r7, #28]
 800b0e4:	f001 f9ca 	bl	800c47c <vQueueDelete>
            hSemaphore = NULL;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	61fb      	str	r3, [r7, #28]
 800b0ec:	e010      	b.n	800b110 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d108      	bne.n	800b106 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	68b9      	ldr	r1, [r7, #8]
 800b0fc:	68f8      	ldr	r0, [r7, #12]
 800b0fe:	f000 fcc1 	bl	800ba84 <xQueueCreateCountingSemaphoreStatic>
 800b102:	61f8      	str	r0, [r7, #28]
 800b104:	e004      	b.n	800b110 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b106:	68b9      	ldr	r1, [r7, #8]
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f000 fcf2 	bl	800baf2 <xQueueCreateCountingSemaphore>
 800b10e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b110:	69fb      	ldr	r3, [r7, #28]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00c      	beq.n	800b130 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d003      	beq.n	800b124 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	617b      	str	r3, [r7, #20]
 800b122:	e001      	b.n	800b128 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b124:	2300      	movs	r3, #0
 800b126:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b128:	6979      	ldr	r1, [r7, #20]
 800b12a:	69f8      	ldr	r0, [r7, #28]
 800b12c:	f001 faf2 	bl	800c714 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b130:	69fb      	ldr	r3, [r7, #28]
}
 800b132:	4618      	mov	r0, r3
 800b134:	3720      	adds	r7, #32
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
	...

0800b13c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b086      	sub	sp, #24
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b14a:	2300      	movs	r3, #0
 800b14c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d103      	bne.n	800b15c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b154:	f06f 0303 	mvn.w	r3, #3
 800b158:	617b      	str	r3, [r7, #20]
 800b15a:	e039      	b.n	800b1d0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b15c:	f3ef 8305 	mrs	r3, IPSR
 800b160:	60fb      	str	r3, [r7, #12]
  return(result);
 800b162:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b164:	2b00      	cmp	r3, #0
 800b166:	d022      	beq.n	800b1ae <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d003      	beq.n	800b176 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b16e:	f06f 0303 	mvn.w	r3, #3
 800b172:	617b      	str	r3, [r7, #20]
 800b174:	e02c      	b.n	800b1d0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b176:	2300      	movs	r3, #0
 800b178:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b17a:	f107 0308 	add.w	r3, r7, #8
 800b17e:	461a      	mov	r2, r3
 800b180:	2100      	movs	r1, #0
 800b182:	6938      	ldr	r0, [r7, #16]
 800b184:	f001 f8fa 	bl	800c37c <xQueueReceiveFromISR>
 800b188:	4603      	mov	r3, r0
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d003      	beq.n	800b196 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b18e:	f06f 0302 	mvn.w	r3, #2
 800b192:	617b      	str	r3, [r7, #20]
 800b194:	e01c      	b.n	800b1d0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d019      	beq.n	800b1d0 <osSemaphoreAcquire+0x94>
 800b19c:	4b0f      	ldr	r3, [pc, #60]	; (800b1dc <osSemaphoreAcquire+0xa0>)
 800b19e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1a2:	601a      	str	r2, [r3, #0]
 800b1a4:	f3bf 8f4f 	dsb	sy
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	e010      	b.n	800b1d0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b1ae:	6839      	ldr	r1, [r7, #0]
 800b1b0:	6938      	ldr	r0, [r7, #16]
 800b1b2:	f000 ffd7 	bl	800c164 <xQueueSemaphoreTake>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d009      	beq.n	800b1d0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d003      	beq.n	800b1ca <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b1c2:	f06f 0301 	mvn.w	r3, #1
 800b1c6:	617b      	str	r3, [r7, #20]
 800b1c8:	e002      	b.n	800b1d0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b1ca:	f06f 0302 	mvn.w	r3, #2
 800b1ce:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b1d0:	697b      	ldr	r3, [r7, #20]
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3718      	adds	r7, #24
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	e000ed04 	.word	0xe000ed04

0800b1e0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b086      	sub	sp, #24
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d103      	bne.n	800b1fe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b1f6:	f06f 0303 	mvn.w	r3, #3
 800b1fa:	617b      	str	r3, [r7, #20]
 800b1fc:	e02c      	b.n	800b258 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1fe:	f3ef 8305 	mrs	r3, IPSR
 800b202:	60fb      	str	r3, [r7, #12]
  return(result);
 800b204:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b206:	2b00      	cmp	r3, #0
 800b208:	d01a      	beq.n	800b240 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b20a:	2300      	movs	r3, #0
 800b20c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b20e:	f107 0308 	add.w	r3, r7, #8
 800b212:	4619      	mov	r1, r3
 800b214:	6938      	ldr	r0, [r7, #16]
 800b216:	f000 fe38 	bl	800be8a <xQueueGiveFromISR>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d003      	beq.n	800b228 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b220:	f06f 0302 	mvn.w	r3, #2
 800b224:	617b      	str	r3, [r7, #20]
 800b226:	e017      	b.n	800b258 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d014      	beq.n	800b258 <osSemaphoreRelease+0x78>
 800b22e:	4b0d      	ldr	r3, [pc, #52]	; (800b264 <osSemaphoreRelease+0x84>)
 800b230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b234:	601a      	str	r2, [r3, #0]
 800b236:	f3bf 8f4f 	dsb	sy
 800b23a:	f3bf 8f6f 	isb	sy
 800b23e:	e00b      	b.n	800b258 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b240:	2300      	movs	r3, #0
 800b242:	2200      	movs	r2, #0
 800b244:	2100      	movs	r1, #0
 800b246:	6938      	ldr	r0, [r7, #16]
 800b248:	f000 fc86 	bl	800bb58 <xQueueGenericSend>
 800b24c:	4603      	mov	r3, r0
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d002      	beq.n	800b258 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b252:	f06f 0302 	mvn.w	r3, #2
 800b256:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b258:	697b      	ldr	r3, [r7, #20]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3718      	adds	r7, #24
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	e000ed04 	.word	0xe000ed04

0800b268 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b268:	b580      	push	{r7, lr}
 800b26a:	b08a      	sub	sp, #40	; 0x28
 800b26c:	af02      	add	r7, sp, #8
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b274:	2300      	movs	r3, #0
 800b276:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b278:	f3ef 8305 	mrs	r3, IPSR
 800b27c:	613b      	str	r3, [r7, #16]
  return(result);
 800b27e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b280:	2b00      	cmp	r3, #0
 800b282:	d15f      	bne.n	800b344 <osMessageQueueNew+0xdc>
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d05c      	beq.n	800b344 <osMessageQueueNew+0xdc>
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d059      	beq.n	800b344 <osMessageQueueNew+0xdc>
    mem = -1;
 800b290:	f04f 33ff 	mov.w	r3, #4294967295
 800b294:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d029      	beq.n	800b2f0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d012      	beq.n	800b2ca <osMessageQueueNew+0x62>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	2b4f      	cmp	r3, #79	; 0x4f
 800b2aa:	d90e      	bls.n	800b2ca <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00a      	beq.n	800b2ca <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	695a      	ldr	r2, [r3, #20]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	68b9      	ldr	r1, [r7, #8]
 800b2bc:	fb01 f303 	mul.w	r3, r1, r3
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d302      	bcc.n	800b2ca <osMessageQueueNew+0x62>
        mem = 1;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	61bb      	str	r3, [r7, #24]
 800b2c8:	e014      	b.n	800b2f4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d110      	bne.n	800b2f4 <osMessageQueueNew+0x8c>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d10c      	bne.n	800b2f4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d108      	bne.n	800b2f4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	695b      	ldr	r3, [r3, #20]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d104      	bne.n	800b2f4 <osMessageQueueNew+0x8c>
          mem = 0;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	61bb      	str	r3, [r7, #24]
 800b2ee:	e001      	b.n	800b2f4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b2f4:	69bb      	ldr	r3, [r7, #24]
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d10b      	bne.n	800b312 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	691a      	ldr	r2, [r3, #16]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	689b      	ldr	r3, [r3, #8]
 800b302:	2100      	movs	r1, #0
 800b304:	9100      	str	r1, [sp, #0]
 800b306:	68b9      	ldr	r1, [r7, #8]
 800b308:	68f8      	ldr	r0, [r7, #12]
 800b30a:	f000 fa2f 	bl	800b76c <xQueueGenericCreateStatic>
 800b30e:	61f8      	str	r0, [r7, #28]
 800b310:	e008      	b.n	800b324 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d105      	bne.n	800b324 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b318:	2200      	movs	r2, #0
 800b31a:	68b9      	ldr	r1, [r7, #8]
 800b31c:	68f8      	ldr	r0, [r7, #12]
 800b31e:	f000 fa9d 	bl	800b85c <xQueueGenericCreate>
 800b322:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b324:	69fb      	ldr	r3, [r7, #28]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d00c      	beq.n	800b344 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d003      	beq.n	800b338 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	617b      	str	r3, [r7, #20]
 800b336:	e001      	b.n	800b33c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b338:	2300      	movs	r3, #0
 800b33a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b33c:	6979      	ldr	r1, [r7, #20]
 800b33e:	69f8      	ldr	r0, [r7, #28]
 800b340:	f001 f9e8 	bl	800c714 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b344:	69fb      	ldr	r3, [r7, #28]
}
 800b346:	4618      	mov	r0, r3
 800b348:	3720      	adds	r7, #32
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
	...

0800b350 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b350:	b580      	push	{r7, lr}
 800b352:	b088      	sub	sp, #32
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	603b      	str	r3, [r7, #0]
 800b35c:	4613      	mov	r3, r2
 800b35e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b364:	2300      	movs	r3, #0
 800b366:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b368:	f3ef 8305 	mrs	r3, IPSR
 800b36c:	617b      	str	r3, [r7, #20]
  return(result);
 800b36e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b370:	2b00      	cmp	r3, #0
 800b372:	d028      	beq.n	800b3c6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b374:	69bb      	ldr	r3, [r7, #24]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d005      	beq.n	800b386 <osMessageQueuePut+0x36>
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d002      	beq.n	800b386 <osMessageQueuePut+0x36>
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d003      	beq.n	800b38e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b386:	f06f 0303 	mvn.w	r3, #3
 800b38a:	61fb      	str	r3, [r7, #28]
 800b38c:	e038      	b.n	800b400 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b38e:	2300      	movs	r3, #0
 800b390:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b392:	f107 0210 	add.w	r2, r7, #16
 800b396:	2300      	movs	r3, #0
 800b398:	68b9      	ldr	r1, [r7, #8]
 800b39a:	69b8      	ldr	r0, [r7, #24]
 800b39c:	f000 fcda 	bl	800bd54 <xQueueGenericSendFromISR>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d003      	beq.n	800b3ae <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b3a6:	f06f 0302 	mvn.w	r3, #2
 800b3aa:	61fb      	str	r3, [r7, #28]
 800b3ac:	e028      	b.n	800b400 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d025      	beq.n	800b400 <osMessageQueuePut+0xb0>
 800b3b4:	4b15      	ldr	r3, [pc, #84]	; (800b40c <osMessageQueuePut+0xbc>)
 800b3b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3ba:	601a      	str	r2, [r3, #0]
 800b3bc:	f3bf 8f4f 	dsb	sy
 800b3c0:	f3bf 8f6f 	isb	sy
 800b3c4:	e01c      	b.n	800b400 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d002      	beq.n	800b3d2 <osMessageQueuePut+0x82>
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d103      	bne.n	800b3da <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b3d2:	f06f 0303 	mvn.w	r3, #3
 800b3d6:	61fb      	str	r3, [r7, #28]
 800b3d8:	e012      	b.n	800b400 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b3da:	2300      	movs	r3, #0
 800b3dc:	683a      	ldr	r2, [r7, #0]
 800b3de:	68b9      	ldr	r1, [r7, #8]
 800b3e0:	69b8      	ldr	r0, [r7, #24]
 800b3e2:	f000 fbb9 	bl	800bb58 <xQueueGenericSend>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d009      	beq.n	800b400 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d003      	beq.n	800b3fa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b3f2:	f06f 0301 	mvn.w	r3, #1
 800b3f6:	61fb      	str	r3, [r7, #28]
 800b3f8:	e002      	b.n	800b400 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b3fa:	f06f 0302 	mvn.w	r3, #2
 800b3fe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b400:	69fb      	ldr	r3, [r7, #28]
}
 800b402:	4618      	mov	r0, r3
 800b404:	3720      	adds	r7, #32
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	e000ed04 	.word	0xe000ed04

0800b410 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b410:	b580      	push	{r7, lr}
 800b412:	b088      	sub	sp, #32
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
 800b41c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b422:	2300      	movs	r3, #0
 800b424:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b426:	f3ef 8305 	mrs	r3, IPSR
 800b42a:	617b      	str	r3, [r7, #20]
  return(result);
 800b42c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d028      	beq.n	800b484 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b432:	69bb      	ldr	r3, [r7, #24]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d005      	beq.n	800b444 <osMessageQueueGet+0x34>
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d002      	beq.n	800b444 <osMessageQueueGet+0x34>
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d003      	beq.n	800b44c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b444:	f06f 0303 	mvn.w	r3, #3
 800b448:	61fb      	str	r3, [r7, #28]
 800b44a:	e037      	b.n	800b4bc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b44c:	2300      	movs	r3, #0
 800b44e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b450:	f107 0310 	add.w	r3, r7, #16
 800b454:	461a      	mov	r2, r3
 800b456:	68b9      	ldr	r1, [r7, #8]
 800b458:	69b8      	ldr	r0, [r7, #24]
 800b45a:	f000 ff8f 	bl	800c37c <xQueueReceiveFromISR>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b01      	cmp	r3, #1
 800b462:	d003      	beq.n	800b46c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b464:	f06f 0302 	mvn.w	r3, #2
 800b468:	61fb      	str	r3, [r7, #28]
 800b46a:	e027      	b.n	800b4bc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d024      	beq.n	800b4bc <osMessageQueueGet+0xac>
 800b472:	4b15      	ldr	r3, [pc, #84]	; (800b4c8 <osMessageQueueGet+0xb8>)
 800b474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b478:	601a      	str	r2, [r3, #0]
 800b47a:	f3bf 8f4f 	dsb	sy
 800b47e:	f3bf 8f6f 	isb	sy
 800b482:	e01b      	b.n	800b4bc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d002      	beq.n	800b490 <osMessageQueueGet+0x80>
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d103      	bne.n	800b498 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b490:	f06f 0303 	mvn.w	r3, #3
 800b494:	61fb      	str	r3, [r7, #28]
 800b496:	e011      	b.n	800b4bc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b498:	683a      	ldr	r2, [r7, #0]
 800b49a:	68b9      	ldr	r1, [r7, #8]
 800b49c:	69b8      	ldr	r0, [r7, #24]
 800b49e:	f000 fd81 	bl	800bfa4 <xQueueReceive>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d009      	beq.n	800b4bc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d003      	beq.n	800b4b6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b4ae:	f06f 0301 	mvn.w	r3, #1
 800b4b2:	61fb      	str	r3, [r7, #28]
 800b4b4:	e002      	b.n	800b4bc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b4b6:	f06f 0302 	mvn.w	r3, #2
 800b4ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b4bc:	69fb      	ldr	r3, [r7, #28]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3720      	adds	r7, #32
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	e000ed04 	.word	0xe000ed04

0800b4cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b4cc:	b480      	push	{r7}
 800b4ce:	b085      	sub	sp, #20
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	4a07      	ldr	r2, [pc, #28]	; (800b4f8 <vApplicationGetIdleTaskMemory+0x2c>)
 800b4dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	4a06      	ldr	r2, [pc, #24]	; (800b4fc <vApplicationGetIdleTaskMemory+0x30>)
 800b4e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4ea:	601a      	str	r2, [r3, #0]
}
 800b4ec:	bf00      	nop
 800b4ee:	3714      	adds	r7, #20
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr
 800b4f8:	24004d74 	.word	0x24004d74
 800b4fc:	24004e1c 	.word	0x24004e1c

0800b500 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	4a07      	ldr	r2, [pc, #28]	; (800b52c <vApplicationGetTimerTaskMemory+0x2c>)
 800b510:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	4a06      	ldr	r2, [pc, #24]	; (800b530 <vApplicationGetTimerTaskMemory+0x30>)
 800b516:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b51e:	601a      	str	r2, [r3, #0]
}
 800b520:	bf00      	nop
 800b522:	3714      	adds	r7, #20
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr
 800b52c:	2400561c 	.word	0x2400561c
 800b530:	240056c4 	.word	0x240056c4

0800b534 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f103 0208 	add.w	r2, r3, #8
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f04f 32ff 	mov.w	r2, #4294967295
 800b54c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f103 0208 	add.w	r2, r3, #8
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f103 0208 	add.w	r2, r3, #8
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b568:	bf00      	nop
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b582:	bf00      	nop
 800b584:	370c      	adds	r7, #12
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr

0800b58e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b58e:	b480      	push	{r7}
 800b590:	b085      	sub	sp, #20
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
 800b596:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	689a      	ldr	r2, [r3, #8]
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	689b      	ldr	r3, [r3, #8]
 800b5b0:	683a      	ldr	r2, [r7, #0]
 800b5b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	683a      	ldr	r2, [r7, #0]
 800b5b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	687a      	ldr	r2, [r7, #4]
 800b5be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	1c5a      	adds	r2, r3, #1
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	601a      	str	r2, [r3, #0]
}
 800b5ca:	bf00      	nop
 800b5cc:	3714      	adds	r7, #20
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr

0800b5d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b5d6:	b480      	push	{r7}
 800b5d8:	b085      	sub	sp, #20
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
 800b5de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ec:	d103      	bne.n	800b5f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	691b      	ldr	r3, [r3, #16]
 800b5f2:	60fb      	str	r3, [r7, #12]
 800b5f4:	e00c      	b.n	800b610 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	3308      	adds	r3, #8
 800b5fa:	60fb      	str	r3, [r7, #12]
 800b5fc:	e002      	b.n	800b604 <vListInsert+0x2e>
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	60fb      	str	r3, [r7, #12]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	68ba      	ldr	r2, [r7, #8]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d2f6      	bcs.n	800b5fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	685a      	ldr	r2, [r3, #4]
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	683a      	ldr	r2, [r7, #0]
 800b61e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	68fa      	ldr	r2, [r7, #12]
 800b624:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	683a      	ldr	r2, [r7, #0]
 800b62a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	1c5a      	adds	r2, r3, #1
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	601a      	str	r2, [r3, #0]
}
 800b63c:	bf00      	nop
 800b63e:	3714      	adds	r7, #20
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b648:	b480      	push	{r7}
 800b64a:	b085      	sub	sp, #20
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	691b      	ldr	r3, [r3, #16]
 800b654:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	6892      	ldr	r2, [r2, #8]
 800b65e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	6852      	ldr	r2, [r2, #4]
 800b668:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	429a      	cmp	r2, r3
 800b672:	d103      	bne.n	800b67c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	689a      	ldr	r2, [r3, #8]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	1e5a      	subs	r2, r3, #1
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
}
 800b690:	4618      	mov	r0, r3
 800b692:	3714      	adds	r7, #20
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d10a      	bne.n	800b6c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b4:	f383 8811 	msr	BASEPRI, r3
 800b6b8:	f3bf 8f6f 	isb	sy
 800b6bc:	f3bf 8f4f 	dsb	sy
 800b6c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b6c2:	bf00      	nop
 800b6c4:	e7fe      	b.n	800b6c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b6c6:	f002 fd7d 	bl	800e1c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6d2:	68f9      	ldr	r1, [r7, #12]
 800b6d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b6d6:	fb01 f303 	mul.w	r3, r1, r3
 800b6da:	441a      	add	r2, r3
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6f6:	3b01      	subs	r3, #1
 800b6f8:	68f9      	ldr	r1, [r7, #12]
 800b6fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b6fc:	fb01 f303 	mul.w	r3, r1, r3
 800b700:	441a      	add	r2, r3
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	22ff      	movs	r2, #255	; 0xff
 800b70a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	22ff      	movs	r2, #255	; 0xff
 800b712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d114      	bne.n	800b746 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	691b      	ldr	r3, [r3, #16]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d01a      	beq.n	800b75a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	3310      	adds	r3, #16
 800b728:	4618      	mov	r0, r3
 800b72a:	f001 fd23 	bl	800d174 <xTaskRemoveFromEventList>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d012      	beq.n	800b75a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b734:	4b0c      	ldr	r3, [pc, #48]	; (800b768 <xQueueGenericReset+0xcc>)
 800b736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b73a:	601a      	str	r2, [r3, #0]
 800b73c:	f3bf 8f4f 	dsb	sy
 800b740:	f3bf 8f6f 	isb	sy
 800b744:	e009      	b.n	800b75a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	3310      	adds	r3, #16
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7ff fef2 	bl	800b534 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	3324      	adds	r3, #36	; 0x24
 800b754:	4618      	mov	r0, r3
 800b756:	f7ff feed 	bl	800b534 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b75a:	f002 fd63 	bl	800e224 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b75e:	2301      	movs	r3, #1
}
 800b760:	4618      	mov	r0, r3
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}
 800b768:	e000ed04 	.word	0xe000ed04

0800b76c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b08e      	sub	sp, #56	; 0x38
 800b770:	af02      	add	r7, sp, #8
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	607a      	str	r2, [r7, #4]
 800b778:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d10a      	bne.n	800b796 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b784:	f383 8811 	msr	BASEPRI, r3
 800b788:	f3bf 8f6f 	isb	sy
 800b78c:	f3bf 8f4f 	dsb	sy
 800b790:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b792:	bf00      	nop
 800b794:	e7fe      	b.n	800b794 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d10a      	bne.n	800b7b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a0:	f383 8811 	msr	BASEPRI, r3
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b7ae:	bf00      	nop
 800b7b0:	e7fe      	b.n	800b7b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d002      	beq.n	800b7be <xQueueGenericCreateStatic+0x52>
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d001      	beq.n	800b7c2 <xQueueGenericCreateStatic+0x56>
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e000      	b.n	800b7c4 <xQueueGenericCreateStatic+0x58>
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d10a      	bne.n	800b7de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7cc:	f383 8811 	msr	BASEPRI, r3
 800b7d0:	f3bf 8f6f 	isb	sy
 800b7d4:	f3bf 8f4f 	dsb	sy
 800b7d8:	623b      	str	r3, [r7, #32]
}
 800b7da:	bf00      	nop
 800b7dc:	e7fe      	b.n	800b7dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d102      	bne.n	800b7ea <xQueueGenericCreateStatic+0x7e>
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d101      	bne.n	800b7ee <xQueueGenericCreateStatic+0x82>
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e000      	b.n	800b7f0 <xQueueGenericCreateStatic+0x84>
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d10a      	bne.n	800b80a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f8:	f383 8811 	msr	BASEPRI, r3
 800b7fc:	f3bf 8f6f 	isb	sy
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	61fb      	str	r3, [r7, #28]
}
 800b806:	bf00      	nop
 800b808:	e7fe      	b.n	800b808 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b80a:	2350      	movs	r3, #80	; 0x50
 800b80c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	2b50      	cmp	r3, #80	; 0x50
 800b812:	d00a      	beq.n	800b82a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b818:	f383 8811 	msr	BASEPRI, r3
 800b81c:	f3bf 8f6f 	isb	sy
 800b820:	f3bf 8f4f 	dsb	sy
 800b824:	61bb      	str	r3, [r7, #24]
}
 800b826:	bf00      	nop
 800b828:	e7fe      	b.n	800b828 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b82a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00d      	beq.n	800b852 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b838:	2201      	movs	r2, #1
 800b83a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b83e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b844:	9300      	str	r3, [sp, #0]
 800b846:	4613      	mov	r3, r2
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	68b9      	ldr	r1, [r7, #8]
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	f000 f83f 	bl	800b8d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b854:	4618      	mov	r0, r3
 800b856:	3730      	adds	r7, #48	; 0x30
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b08a      	sub	sp, #40	; 0x28
 800b860:	af02      	add	r7, sp, #8
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	4613      	mov	r3, r2
 800b868:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d10a      	bne.n	800b886 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b874:	f383 8811 	msr	BASEPRI, r3
 800b878:	f3bf 8f6f 	isb	sy
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	613b      	str	r3, [r7, #16]
}
 800b882:	bf00      	nop
 800b884:	e7fe      	b.n	800b884 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	68ba      	ldr	r2, [r7, #8]
 800b88a:	fb02 f303 	mul.w	r3, r2, r3
 800b88e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	3350      	adds	r3, #80	; 0x50
 800b894:	4618      	mov	r0, r3
 800b896:	f002 fdb7 	bl	800e408 <pvPortMalloc>
 800b89a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b89c:	69bb      	ldr	r3, [r7, #24]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d011      	beq.n	800b8c6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b8a2:	69bb      	ldr	r3, [r7, #24]
 800b8a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	3350      	adds	r3, #80	; 0x50
 800b8aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b8ac:	69bb      	ldr	r3, [r7, #24]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b8b4:	79fa      	ldrb	r2, [r7, #7]
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	9300      	str	r3, [sp, #0]
 800b8ba:	4613      	mov	r3, r2
 800b8bc:	697a      	ldr	r2, [r7, #20]
 800b8be:	68b9      	ldr	r1, [r7, #8]
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f000 f805 	bl	800b8d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b8c6:	69bb      	ldr	r3, [r7, #24]
	}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3720      	adds	r7, #32
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]
 800b8dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d103      	bne.n	800b8ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	69ba      	ldr	r2, [r7, #24]
 800b8e8:	601a      	str	r2, [r3, #0]
 800b8ea:	e002      	b.n	800b8f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b8ec:	69bb      	ldr	r3, [r7, #24]
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b8f2:	69bb      	ldr	r3, [r7, #24]
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b8f8:	69bb      	ldr	r3, [r7, #24]
 800b8fa:	68ba      	ldr	r2, [r7, #8]
 800b8fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b8fe:	2101      	movs	r1, #1
 800b900:	69b8      	ldr	r0, [r7, #24]
 800b902:	f7ff fecb 	bl	800b69c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b906:	69bb      	ldr	r3, [r7, #24]
 800b908:	78fa      	ldrb	r2, [r7, #3]
 800b90a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b90e:	bf00      	nop
 800b910:	3710      	adds	r7, #16
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b916:	b580      	push	{r7, lr}
 800b918:	b082      	sub	sp, #8
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00e      	beq.n	800b942 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2200      	movs	r2, #0
 800b934:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b936:	2300      	movs	r3, #0
 800b938:	2200      	movs	r2, #0
 800b93a:	2100      	movs	r1, #0
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 f90b 	bl	800bb58 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b942:	bf00      	nop
 800b944:	3708      	adds	r7, #8
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b086      	sub	sp, #24
 800b94e:	af00      	add	r7, sp, #0
 800b950:	4603      	mov	r3, r0
 800b952:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b954:	2301      	movs	r3, #1
 800b956:	617b      	str	r3, [r7, #20]
 800b958:	2300      	movs	r3, #0
 800b95a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b95c:	79fb      	ldrb	r3, [r7, #7]
 800b95e:	461a      	mov	r2, r3
 800b960:	6939      	ldr	r1, [r7, #16]
 800b962:	6978      	ldr	r0, [r7, #20]
 800b964:	f7ff ff7a 	bl	800b85c <xQueueGenericCreate>
 800b968:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	f7ff ffd3 	bl	800b916 <prvInitialiseMutex>

		return xNewQueue;
 800b970:	68fb      	ldr	r3, [r7, #12]
	}
 800b972:	4618      	mov	r0, r3
 800b974:	3718      	adds	r7, #24
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b088      	sub	sp, #32
 800b97e:	af02      	add	r7, sp, #8
 800b980:	4603      	mov	r3, r0
 800b982:	6039      	str	r1, [r7, #0]
 800b984:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b986:	2301      	movs	r3, #1
 800b988:	617b      	str	r3, [r7, #20]
 800b98a:	2300      	movs	r3, #0
 800b98c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b98e:	79fb      	ldrb	r3, [r7, #7]
 800b990:	9300      	str	r3, [sp, #0]
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	2200      	movs	r2, #0
 800b996:	6939      	ldr	r1, [r7, #16]
 800b998:	6978      	ldr	r0, [r7, #20]
 800b99a:	f7ff fee7 	bl	800b76c <xQueueGenericCreateStatic>
 800b99e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f7ff ffb8 	bl	800b916 <prvInitialiseMutex>

		return xNewQueue;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
	}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3718      	adds	r7, #24
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b9b0:	b590      	push	{r4, r7, lr}
 800b9b2:	b087      	sub	sp, #28
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d10a      	bne.n	800b9d8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800b9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c6:	f383 8811 	msr	BASEPRI, r3
 800b9ca:	f3bf 8f6f 	isb	sy
 800b9ce:	f3bf 8f4f 	dsb	sy
 800b9d2:	60fb      	str	r3, [r7, #12]
}
 800b9d4:	bf00      	nop
 800b9d6:	e7fe      	b.n	800b9d6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	689c      	ldr	r4, [r3, #8]
 800b9dc:	f001 fd8c 	bl	800d4f8 <xTaskGetCurrentTaskHandle>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	429c      	cmp	r4, r3
 800b9e4:	d111      	bne.n	800ba0a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	68db      	ldr	r3, [r3, #12]
 800b9ea:	1e5a      	subs	r2, r3, #1
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d105      	bne.n	800ba04 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	2100      	movs	r1, #0
 800b9fe:	6938      	ldr	r0, [r7, #16]
 800ba00:	f000 f8aa 	bl	800bb58 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800ba04:	2301      	movs	r3, #1
 800ba06:	617b      	str	r3, [r7, #20]
 800ba08:	e001      	b.n	800ba0e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800ba0e:	697b      	ldr	r3, [r7, #20]
	}
 800ba10:	4618      	mov	r0, r3
 800ba12:	371c      	adds	r7, #28
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd90      	pop	{r4, r7, pc}

0800ba18 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800ba18:	b590      	push	{r4, r7, lr}
 800ba1a:	b087      	sub	sp, #28
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d10a      	bne.n	800ba42 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800ba2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba30:	f383 8811 	msr	BASEPRI, r3
 800ba34:	f3bf 8f6f 	isb	sy
 800ba38:	f3bf 8f4f 	dsb	sy
 800ba3c:	60fb      	str	r3, [r7, #12]
}
 800ba3e:	bf00      	nop
 800ba40:	e7fe      	b.n	800ba40 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	689c      	ldr	r4, [r3, #8]
 800ba46:	f001 fd57 	bl	800d4f8 <xTaskGetCurrentTaskHandle>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	429c      	cmp	r4, r3
 800ba4e:	d107      	bne.n	800ba60 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	1c5a      	adds	r2, r3, #1
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	617b      	str	r3, [r7, #20]
 800ba5e:	e00c      	b.n	800ba7a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800ba60:	6839      	ldr	r1, [r7, #0]
 800ba62:	6938      	ldr	r0, [r7, #16]
 800ba64:	f000 fb7e 	bl	800c164 <xQueueSemaphoreTake>
 800ba68:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d004      	beq.n	800ba7a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	1c5a      	adds	r2, r3, #1
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800ba7a:	697b      	ldr	r3, [r7, #20]
	}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	371c      	adds	r7, #28
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd90      	pop	{r4, r7, pc}

0800ba84 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b08a      	sub	sp, #40	; 0x28
 800ba88:	af02      	add	r7, sp, #8
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d10a      	bne.n	800baac <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800ba96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9a:	f383 8811 	msr	BASEPRI, r3
 800ba9e:	f3bf 8f6f 	isb	sy
 800baa2:	f3bf 8f4f 	dsb	sy
 800baa6:	61bb      	str	r3, [r7, #24]
}
 800baa8:	bf00      	nop
 800baaa:	e7fe      	b.n	800baaa <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800baac:	68ba      	ldr	r2, [r7, #8]
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d90a      	bls.n	800baca <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800bab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab8:	f383 8811 	msr	BASEPRI, r3
 800babc:	f3bf 8f6f 	isb	sy
 800bac0:	f3bf 8f4f 	dsb	sy
 800bac4:	617b      	str	r3, [r7, #20]
}
 800bac6:	bf00      	nop
 800bac8:	e7fe      	b.n	800bac8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800baca:	2302      	movs	r3, #2
 800bacc:	9300      	str	r3, [sp, #0]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	2100      	movs	r1, #0
 800bad4:	68f8      	ldr	r0, [r7, #12]
 800bad6:	f7ff fe49 	bl	800b76c <xQueueGenericCreateStatic>
 800bada:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d002      	beq.n	800bae8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bae2:	69fb      	ldr	r3, [r7, #28]
 800bae4:	68ba      	ldr	r2, [r7, #8]
 800bae6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bae8:	69fb      	ldr	r3, [r7, #28]
	}
 800baea:	4618      	mov	r0, r3
 800baec:	3720      	adds	r7, #32
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}

0800baf2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b086      	sub	sp, #24
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
 800bafa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d10a      	bne.n	800bb18 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800bb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb06:	f383 8811 	msr	BASEPRI, r3
 800bb0a:	f3bf 8f6f 	isb	sy
 800bb0e:	f3bf 8f4f 	dsb	sy
 800bb12:	613b      	str	r3, [r7, #16]
}
 800bb14:	bf00      	nop
 800bb16:	e7fe      	b.n	800bb16 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bb18:	683a      	ldr	r2, [r7, #0]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d90a      	bls.n	800bb36 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800bb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb24:	f383 8811 	msr	BASEPRI, r3
 800bb28:	f3bf 8f6f 	isb	sy
 800bb2c:	f3bf 8f4f 	dsb	sy
 800bb30:	60fb      	str	r3, [r7, #12]
}
 800bb32:	bf00      	nop
 800bb34:	e7fe      	b.n	800bb34 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bb36:	2202      	movs	r2, #2
 800bb38:	2100      	movs	r1, #0
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f7ff fe8e 	bl	800b85c <xQueueGenericCreate>
 800bb40:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d002      	beq.n	800bb4e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	683a      	ldr	r2, [r7, #0]
 800bb4c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bb4e:	697b      	ldr	r3, [r7, #20]
	}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3718      	adds	r7, #24
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b08e      	sub	sp, #56	; 0x38
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	607a      	str	r2, [r7, #4]
 800bb64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bb66:	2300      	movs	r3, #0
 800bb68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d10a      	bne.n	800bb8a <xQueueGenericSend+0x32>
	__asm volatile
 800bb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb78:	f383 8811 	msr	BASEPRI, r3
 800bb7c:	f3bf 8f6f 	isb	sy
 800bb80:	f3bf 8f4f 	dsb	sy
 800bb84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb86:	bf00      	nop
 800bb88:	e7fe      	b.n	800bb88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d103      	bne.n	800bb98 <xQueueGenericSend+0x40>
 800bb90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d101      	bne.n	800bb9c <xQueueGenericSend+0x44>
 800bb98:	2301      	movs	r3, #1
 800bb9a:	e000      	b.n	800bb9e <xQueueGenericSend+0x46>
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d10a      	bne.n	800bbb8 <xQueueGenericSend+0x60>
	__asm volatile
 800bba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba6:	f383 8811 	msr	BASEPRI, r3
 800bbaa:	f3bf 8f6f 	isb	sy
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bbb4:	bf00      	nop
 800bbb6:	e7fe      	b.n	800bbb6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	2b02      	cmp	r3, #2
 800bbbc:	d103      	bne.n	800bbc6 <xQueueGenericSend+0x6e>
 800bbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d101      	bne.n	800bbca <xQueueGenericSend+0x72>
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e000      	b.n	800bbcc <xQueueGenericSend+0x74>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d10a      	bne.n	800bbe6 <xQueueGenericSend+0x8e>
	__asm volatile
 800bbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd4:	f383 8811 	msr	BASEPRI, r3
 800bbd8:	f3bf 8f6f 	isb	sy
 800bbdc:	f3bf 8f4f 	dsb	sy
 800bbe0:	623b      	str	r3, [r7, #32]
}
 800bbe2:	bf00      	nop
 800bbe4:	e7fe      	b.n	800bbe4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bbe6:	f001 fc97 	bl	800d518 <xTaskGetSchedulerState>
 800bbea:	4603      	mov	r3, r0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d102      	bne.n	800bbf6 <xQueueGenericSend+0x9e>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d101      	bne.n	800bbfa <xQueueGenericSend+0xa2>
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e000      	b.n	800bbfc <xQueueGenericSend+0xa4>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d10a      	bne.n	800bc16 <xQueueGenericSend+0xbe>
	__asm volatile
 800bc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc04:	f383 8811 	msr	BASEPRI, r3
 800bc08:	f3bf 8f6f 	isb	sy
 800bc0c:	f3bf 8f4f 	dsb	sy
 800bc10:	61fb      	str	r3, [r7, #28]
}
 800bc12:	bf00      	nop
 800bc14:	e7fe      	b.n	800bc14 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc16:	f002 fad5 	bl	800e1c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d302      	bcc.n	800bc2c <xQueueGenericSend+0xd4>
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	2b02      	cmp	r3, #2
 800bc2a:	d129      	bne.n	800bc80 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc2c:	683a      	ldr	r2, [r7, #0]
 800bc2e:	68b9      	ldr	r1, [r7, #8]
 800bc30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc32:	f000 fc5e 	bl	800c4f2 <prvCopyDataToQueue>
 800bc36:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d010      	beq.n	800bc62 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc42:	3324      	adds	r3, #36	; 0x24
 800bc44:	4618      	mov	r0, r3
 800bc46:	f001 fa95 	bl	800d174 <xTaskRemoveFromEventList>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d013      	beq.n	800bc78 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bc50:	4b3f      	ldr	r3, [pc, #252]	; (800bd50 <xQueueGenericSend+0x1f8>)
 800bc52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc56:	601a      	str	r2, [r3, #0]
 800bc58:	f3bf 8f4f 	dsb	sy
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	e00a      	b.n	800bc78 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d007      	beq.n	800bc78 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bc68:	4b39      	ldr	r3, [pc, #228]	; (800bd50 <xQueueGenericSend+0x1f8>)
 800bc6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc6e:	601a      	str	r2, [r3, #0]
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bc78:	f002 fad4 	bl	800e224 <vPortExitCritical>
				return pdPASS;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	e063      	b.n	800bd48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d103      	bne.n	800bc8e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bc86:	f002 facd 	bl	800e224 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	e05c      	b.n	800bd48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d106      	bne.n	800bca2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc94:	f107 0314 	add.w	r3, r7, #20
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f001 facf 	bl	800d23c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bca2:	f002 fabf 	bl	800e224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bca6:	f001 f819 	bl	800ccdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bcaa:	f002 fa8b 	bl	800e1c4 <vPortEnterCritical>
 800bcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcb4:	b25b      	sxtb	r3, r3
 800bcb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcba:	d103      	bne.n	800bcc4 <xQueueGenericSend+0x16c>
 800bcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcca:	b25b      	sxtb	r3, r3
 800bccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcd0:	d103      	bne.n	800bcda <xQueueGenericSend+0x182>
 800bcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcda:	f002 faa3 	bl	800e224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bcde:	1d3a      	adds	r2, r7, #4
 800bce0:	f107 0314 	add.w	r3, r7, #20
 800bce4:	4611      	mov	r1, r2
 800bce6:	4618      	mov	r0, r3
 800bce8:	f001 fabe 	bl	800d268 <xTaskCheckForTimeOut>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d124      	bne.n	800bd3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bcf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcf4:	f000 fcf5 	bl	800c6e2 <prvIsQueueFull>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d018      	beq.n	800bd30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd00:	3310      	adds	r3, #16
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	4611      	mov	r1, r2
 800bd06:	4618      	mov	r0, r3
 800bd08:	f001 f9e4 	bl	800d0d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bd0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd0e:	f000 fc80 	bl	800c612 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bd12:	f000 fff1 	bl	800ccf8 <xTaskResumeAll>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	f47f af7c 	bne.w	800bc16 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bd1e:	4b0c      	ldr	r3, [pc, #48]	; (800bd50 <xQueueGenericSend+0x1f8>)
 800bd20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd24:	601a      	str	r2, [r3, #0]
 800bd26:	f3bf 8f4f 	dsb	sy
 800bd2a:	f3bf 8f6f 	isb	sy
 800bd2e:	e772      	b.n	800bc16 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bd30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd32:	f000 fc6e 	bl	800c612 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd36:	f000 ffdf 	bl	800ccf8 <xTaskResumeAll>
 800bd3a:	e76c      	b.n	800bc16 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bd3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd3e:	f000 fc68 	bl	800c612 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd42:	f000 ffd9 	bl	800ccf8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bd46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3738      	adds	r7, #56	; 0x38
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}
 800bd50:	e000ed04 	.word	0xe000ed04

0800bd54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b090      	sub	sp, #64	; 0x40
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	607a      	str	r2, [r7, #4]
 800bd60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d10a      	bne.n	800bd82 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd70:	f383 8811 	msr	BASEPRI, r3
 800bd74:	f3bf 8f6f 	isb	sy
 800bd78:	f3bf 8f4f 	dsb	sy
 800bd7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bd7e:	bf00      	nop
 800bd80:	e7fe      	b.n	800bd80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d103      	bne.n	800bd90 <xQueueGenericSendFromISR+0x3c>
 800bd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d101      	bne.n	800bd94 <xQueueGenericSendFromISR+0x40>
 800bd90:	2301      	movs	r3, #1
 800bd92:	e000      	b.n	800bd96 <xQueueGenericSendFromISR+0x42>
 800bd94:	2300      	movs	r3, #0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d10a      	bne.n	800bdb0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bd9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9e:	f383 8811 	msr	BASEPRI, r3
 800bda2:	f3bf 8f6f 	isb	sy
 800bda6:	f3bf 8f4f 	dsb	sy
 800bdaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bdac:	bf00      	nop
 800bdae:	e7fe      	b.n	800bdae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	2b02      	cmp	r3, #2
 800bdb4:	d103      	bne.n	800bdbe <xQueueGenericSendFromISR+0x6a>
 800bdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d101      	bne.n	800bdc2 <xQueueGenericSendFromISR+0x6e>
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e000      	b.n	800bdc4 <xQueueGenericSendFromISR+0x70>
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d10a      	bne.n	800bdde <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bdc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdcc:	f383 8811 	msr	BASEPRI, r3
 800bdd0:	f3bf 8f6f 	isb	sy
 800bdd4:	f3bf 8f4f 	dsb	sy
 800bdd8:	623b      	str	r3, [r7, #32]
}
 800bdda:	bf00      	nop
 800bddc:	e7fe      	b.n	800bddc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bdde:	f002 fad3 	bl	800e388 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bde2:	f3ef 8211 	mrs	r2, BASEPRI
 800bde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdea:	f383 8811 	msr	BASEPRI, r3
 800bdee:	f3bf 8f6f 	isb	sy
 800bdf2:	f3bf 8f4f 	dsb	sy
 800bdf6:	61fa      	str	r2, [r7, #28]
 800bdf8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bdfa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bdfc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be06:	429a      	cmp	r2, r3
 800be08:	d302      	bcc.n	800be10 <xQueueGenericSendFromISR+0xbc>
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	2b02      	cmp	r3, #2
 800be0e:	d12f      	bne.n	800be70 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800be10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be1e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be20:	683a      	ldr	r2, [r7, #0]
 800be22:	68b9      	ldr	r1, [r7, #8]
 800be24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be26:	f000 fb64 	bl	800c4f2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800be2a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800be2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be32:	d112      	bne.n	800be5a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d016      	beq.n	800be6a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be3e:	3324      	adds	r3, #36	; 0x24
 800be40:	4618      	mov	r0, r3
 800be42:	f001 f997 	bl	800d174 <xTaskRemoveFromEventList>
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d00e      	beq.n	800be6a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d00b      	beq.n	800be6a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2201      	movs	r2, #1
 800be56:	601a      	str	r2, [r3, #0]
 800be58:	e007      	b.n	800be6a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800be5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800be5e:	3301      	adds	r3, #1
 800be60:	b2db      	uxtb	r3, r3
 800be62:	b25a      	sxtb	r2, r3
 800be64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800be6a:	2301      	movs	r3, #1
 800be6c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800be6e:	e001      	b.n	800be74 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800be70:	2300      	movs	r3, #0
 800be72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be76:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800be7e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800be82:	4618      	mov	r0, r3
 800be84:	3740      	adds	r7, #64	; 0x40
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}

0800be8a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800be8a:	b580      	push	{r7, lr}
 800be8c:	b08e      	sub	sp, #56	; 0x38
 800be8e:	af00      	add	r7, sp, #0
 800be90:	6078      	str	r0, [r7, #4]
 800be92:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800be98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d10a      	bne.n	800beb4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800be9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	623b      	str	r3, [r7, #32]
}
 800beb0:	bf00      	nop
 800beb2:	e7fe      	b.n	800beb2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800beb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00a      	beq.n	800bed2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800bebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec0:	f383 8811 	msr	BASEPRI, r3
 800bec4:	f3bf 8f6f 	isb	sy
 800bec8:	f3bf 8f4f 	dsb	sy
 800becc:	61fb      	str	r3, [r7, #28]
}
 800bece:	bf00      	nop
 800bed0:	e7fe      	b.n	800bed0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d103      	bne.n	800bee2 <xQueueGiveFromISR+0x58>
 800beda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d101      	bne.n	800bee6 <xQueueGiveFromISR+0x5c>
 800bee2:	2301      	movs	r3, #1
 800bee4:	e000      	b.n	800bee8 <xQueueGiveFromISR+0x5e>
 800bee6:	2300      	movs	r3, #0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d10a      	bne.n	800bf02 <xQueueGiveFromISR+0x78>
	__asm volatile
 800beec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef0:	f383 8811 	msr	BASEPRI, r3
 800bef4:	f3bf 8f6f 	isb	sy
 800bef8:	f3bf 8f4f 	dsb	sy
 800befc:	61bb      	str	r3, [r7, #24]
}
 800befe:	bf00      	nop
 800bf00:	e7fe      	b.n	800bf00 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf02:	f002 fa41 	bl	800e388 <vPortValidateInterruptPriority>
	__asm volatile
 800bf06:	f3ef 8211 	mrs	r2, BASEPRI
 800bf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0e:	f383 8811 	msr	BASEPRI, r3
 800bf12:	f3bf 8f6f 	isb	sy
 800bf16:	f3bf 8f4f 	dsb	sy
 800bf1a:	617a      	str	r2, [r7, #20]
 800bf1c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bf1e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bf28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d22b      	bcs.n	800bf8a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bf3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3e:	1c5a      	adds	r2, r3, #1
 800bf40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf42:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bf44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bf48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf4c:	d112      	bne.n	800bf74 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d016      	beq.n	800bf84 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf58:	3324      	adds	r3, #36	; 0x24
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f001 f90a 	bl	800d174 <xTaskRemoveFromEventList>
 800bf60:	4603      	mov	r3, r0
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d00e      	beq.n	800bf84 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00b      	beq.n	800bf84 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	2201      	movs	r2, #1
 800bf70:	601a      	str	r2, [r3, #0]
 800bf72:	e007      	b.n	800bf84 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bf74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf78:	3301      	adds	r3, #1
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	b25a      	sxtb	r2, r3
 800bf7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bf84:	2301      	movs	r3, #1
 800bf86:	637b      	str	r3, [r7, #52]	; 0x34
 800bf88:	e001      	b.n	800bf8e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	637b      	str	r3, [r7, #52]	; 0x34
 800bf8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf90:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f383 8811 	msr	BASEPRI, r3
}
 800bf98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3738      	adds	r7, #56	; 0x38
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b08c      	sub	sp, #48	; 0x30
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d10a      	bne.n	800bfd4 <xQueueReceive+0x30>
	__asm volatile
 800bfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc2:	f383 8811 	msr	BASEPRI, r3
 800bfc6:	f3bf 8f6f 	isb	sy
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	623b      	str	r3, [r7, #32]
}
 800bfd0:	bf00      	nop
 800bfd2:	e7fe      	b.n	800bfd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d103      	bne.n	800bfe2 <xQueueReceive+0x3e>
 800bfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d101      	bne.n	800bfe6 <xQueueReceive+0x42>
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e000      	b.n	800bfe8 <xQueueReceive+0x44>
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d10a      	bne.n	800c002 <xQueueReceive+0x5e>
	__asm volatile
 800bfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff0:	f383 8811 	msr	BASEPRI, r3
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	61fb      	str	r3, [r7, #28]
}
 800bffe:	bf00      	nop
 800c000:	e7fe      	b.n	800c000 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c002:	f001 fa89 	bl	800d518 <xTaskGetSchedulerState>
 800c006:	4603      	mov	r3, r0
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d102      	bne.n	800c012 <xQueueReceive+0x6e>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d101      	bne.n	800c016 <xQueueReceive+0x72>
 800c012:	2301      	movs	r3, #1
 800c014:	e000      	b.n	800c018 <xQueueReceive+0x74>
 800c016:	2300      	movs	r3, #0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d10a      	bne.n	800c032 <xQueueReceive+0x8e>
	__asm volatile
 800c01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c020:	f383 8811 	msr	BASEPRI, r3
 800c024:	f3bf 8f6f 	isb	sy
 800c028:	f3bf 8f4f 	dsb	sy
 800c02c:	61bb      	str	r3, [r7, #24]
}
 800c02e:	bf00      	nop
 800c030:	e7fe      	b.n	800c030 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c032:	f002 f8c7 	bl	800e1c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c03a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d01f      	beq.n	800c082 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c042:	68b9      	ldr	r1, [r7, #8]
 800c044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c046:	f000 fabe 	bl	800c5c6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04c:	1e5a      	subs	r2, r3, #1
 800c04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c050:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c054:	691b      	ldr	r3, [r3, #16]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d00f      	beq.n	800c07a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c05c:	3310      	adds	r3, #16
 800c05e:	4618      	mov	r0, r3
 800c060:	f001 f888 	bl	800d174 <xTaskRemoveFromEventList>
 800c064:	4603      	mov	r3, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	d007      	beq.n	800c07a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c06a:	4b3d      	ldr	r3, [pc, #244]	; (800c160 <xQueueReceive+0x1bc>)
 800c06c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c070:	601a      	str	r2, [r3, #0]
 800c072:	f3bf 8f4f 	dsb	sy
 800c076:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c07a:	f002 f8d3 	bl	800e224 <vPortExitCritical>
				return pdPASS;
 800c07e:	2301      	movs	r3, #1
 800c080:	e069      	b.n	800c156 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d103      	bne.n	800c090 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c088:	f002 f8cc 	bl	800e224 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c08c:	2300      	movs	r3, #0
 800c08e:	e062      	b.n	800c156 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c092:	2b00      	cmp	r3, #0
 800c094:	d106      	bne.n	800c0a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c096:	f107 0310 	add.w	r3, r7, #16
 800c09a:	4618      	mov	r0, r3
 800c09c:	f001 f8ce 	bl	800d23c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c0a4:	f002 f8be 	bl	800e224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c0a8:	f000 fe18 	bl	800ccdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c0ac:	f002 f88a 	bl	800e1c4 <vPortEnterCritical>
 800c0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0b6:	b25b      	sxtb	r3, r3
 800c0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0bc:	d103      	bne.n	800c0c6 <xQueueReceive+0x122>
 800c0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0cc:	b25b      	sxtb	r3, r3
 800c0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0d2:	d103      	bne.n	800c0dc <xQueueReceive+0x138>
 800c0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0dc:	f002 f8a2 	bl	800e224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0e0:	1d3a      	adds	r2, r7, #4
 800c0e2:	f107 0310 	add.w	r3, r7, #16
 800c0e6:	4611      	mov	r1, r2
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f001 f8bd 	bl	800d268 <xTaskCheckForTimeOut>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d123      	bne.n	800c13c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0f6:	f000 fade 	bl	800c6b6 <prvIsQueueEmpty>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d017      	beq.n	800c130 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c102:	3324      	adds	r3, #36	; 0x24
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	4611      	mov	r1, r2
 800c108:	4618      	mov	r0, r3
 800c10a:	f000 ffe3 	bl	800d0d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c10e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c110:	f000 fa7f 	bl	800c612 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c114:	f000 fdf0 	bl	800ccf8 <xTaskResumeAll>
 800c118:	4603      	mov	r3, r0
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d189      	bne.n	800c032 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c11e:	4b10      	ldr	r3, [pc, #64]	; (800c160 <xQueueReceive+0x1bc>)
 800c120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c124:	601a      	str	r2, [r3, #0]
 800c126:	f3bf 8f4f 	dsb	sy
 800c12a:	f3bf 8f6f 	isb	sy
 800c12e:	e780      	b.n	800c032 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c132:	f000 fa6e 	bl	800c612 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c136:	f000 fddf 	bl	800ccf8 <xTaskResumeAll>
 800c13a:	e77a      	b.n	800c032 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c13c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c13e:	f000 fa68 	bl	800c612 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c142:	f000 fdd9 	bl	800ccf8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c148:	f000 fab5 	bl	800c6b6 <prvIsQueueEmpty>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	f43f af6f 	beq.w	800c032 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c154:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c156:	4618      	mov	r0, r3
 800c158:	3730      	adds	r7, #48	; 0x30
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	e000ed04 	.word	0xe000ed04

0800c164 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b08e      	sub	sp, #56	; 0x38
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c16e:	2300      	movs	r3, #0
 800c170:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c176:	2300      	movs	r3, #0
 800c178:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10a      	bne.n	800c196 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	623b      	str	r3, [r7, #32]
}
 800c192:	bf00      	nop
 800c194:	e7fe      	b.n	800c194 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d00a      	beq.n	800c1b4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a2:	f383 8811 	msr	BASEPRI, r3
 800c1a6:	f3bf 8f6f 	isb	sy
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	61fb      	str	r3, [r7, #28]
}
 800c1b0:	bf00      	nop
 800c1b2:	e7fe      	b.n	800c1b2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1b4:	f001 f9b0 	bl	800d518 <xTaskGetSchedulerState>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d102      	bne.n	800c1c4 <xQueueSemaphoreTake+0x60>
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d101      	bne.n	800c1c8 <xQueueSemaphoreTake+0x64>
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	e000      	b.n	800c1ca <xQueueSemaphoreTake+0x66>
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d10a      	bne.n	800c1e4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d2:	f383 8811 	msr	BASEPRI, r3
 800c1d6:	f3bf 8f6f 	isb	sy
 800c1da:	f3bf 8f4f 	dsb	sy
 800c1de:	61bb      	str	r3, [r7, #24]
}
 800c1e0:	bf00      	nop
 800c1e2:	e7fe      	b.n	800c1e2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c1e4:	f001 ffee 	bl	800e1c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d024      	beq.n	800c23e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f6:	1e5a      	subs	r2, r3, #1
 800c1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1fa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d104      	bne.n	800c20e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c204:	f001 fafe 	bl	800d804 <pvTaskIncrementMutexHeldCount>
 800c208:	4602      	mov	r2, r0
 800c20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c20c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c210:	691b      	ldr	r3, [r3, #16]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d00f      	beq.n	800c236 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c218:	3310      	adds	r3, #16
 800c21a:	4618      	mov	r0, r3
 800c21c:	f000 ffaa 	bl	800d174 <xTaskRemoveFromEventList>
 800c220:	4603      	mov	r3, r0
 800c222:	2b00      	cmp	r3, #0
 800c224:	d007      	beq.n	800c236 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c226:	4b54      	ldr	r3, [pc, #336]	; (800c378 <xQueueSemaphoreTake+0x214>)
 800c228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c22c:	601a      	str	r2, [r3, #0]
 800c22e:	f3bf 8f4f 	dsb	sy
 800c232:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c236:	f001 fff5 	bl	800e224 <vPortExitCritical>
				return pdPASS;
 800c23a:	2301      	movs	r3, #1
 800c23c:	e097      	b.n	800c36e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d111      	bne.n	800c268 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c246:	2b00      	cmp	r3, #0
 800c248:	d00a      	beq.n	800c260 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24e:	f383 8811 	msr	BASEPRI, r3
 800c252:	f3bf 8f6f 	isb	sy
 800c256:	f3bf 8f4f 	dsb	sy
 800c25a:	617b      	str	r3, [r7, #20]
}
 800c25c:	bf00      	nop
 800c25e:	e7fe      	b.n	800c25e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c260:	f001 ffe0 	bl	800e224 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c264:	2300      	movs	r3, #0
 800c266:	e082      	b.n	800c36e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d106      	bne.n	800c27c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c26e:	f107 030c 	add.w	r3, r7, #12
 800c272:	4618      	mov	r0, r3
 800c274:	f000 ffe2 	bl	800d23c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c278:	2301      	movs	r3, #1
 800c27a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c27c:	f001 ffd2 	bl	800e224 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c280:	f000 fd2c 	bl	800ccdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c284:	f001 ff9e 	bl	800e1c4 <vPortEnterCritical>
 800c288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c28a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c28e:	b25b      	sxtb	r3, r3
 800c290:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c294:	d103      	bne.n	800c29e <xQueueSemaphoreTake+0x13a>
 800c296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c298:	2200      	movs	r2, #0
 800c29a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2a4:	b25b      	sxtb	r3, r3
 800c2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2aa:	d103      	bne.n	800c2b4 <xQueueSemaphoreTake+0x150>
 800c2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2b4:	f001 ffb6 	bl	800e224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2b8:	463a      	mov	r2, r7
 800c2ba:	f107 030c 	add.w	r3, r7, #12
 800c2be:	4611      	mov	r1, r2
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f000 ffd1 	bl	800d268 <xTaskCheckForTimeOut>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d132      	bne.n	800c332 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2ce:	f000 f9f2 	bl	800c6b6 <prvIsQueueEmpty>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d026      	beq.n	800c326 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d109      	bne.n	800c2f4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c2e0:	f001 ff70 	bl	800e1c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f001 f933 	bl	800d554 <xTaskPriorityInherit>
 800c2ee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c2f0:	f001 ff98 	bl	800e224 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f6:	3324      	adds	r3, #36	; 0x24
 800c2f8:	683a      	ldr	r2, [r7, #0]
 800c2fa:	4611      	mov	r1, r2
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f000 fee9 	bl	800d0d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c302:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c304:	f000 f985 	bl	800c612 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c308:	f000 fcf6 	bl	800ccf8 <xTaskResumeAll>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b00      	cmp	r3, #0
 800c310:	f47f af68 	bne.w	800c1e4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c314:	4b18      	ldr	r3, [pc, #96]	; (800c378 <xQueueSemaphoreTake+0x214>)
 800c316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c31a:	601a      	str	r2, [r3, #0]
 800c31c:	f3bf 8f4f 	dsb	sy
 800c320:	f3bf 8f6f 	isb	sy
 800c324:	e75e      	b.n	800c1e4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c326:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c328:	f000 f973 	bl	800c612 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c32c:	f000 fce4 	bl	800ccf8 <xTaskResumeAll>
 800c330:	e758      	b.n	800c1e4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c332:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c334:	f000 f96d 	bl	800c612 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c338:	f000 fcde 	bl	800ccf8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c33c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c33e:	f000 f9ba 	bl	800c6b6 <prvIsQueueEmpty>
 800c342:	4603      	mov	r3, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	f43f af4d 	beq.w	800c1e4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d00d      	beq.n	800c36c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c350:	f001 ff38 	bl	800e1c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c354:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c356:	f000 f8b4 	bl	800c4c2 <prvGetDisinheritPriorityAfterTimeout>
 800c35a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c35e:	689b      	ldr	r3, [r3, #8]
 800c360:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c362:	4618      	mov	r0, r3
 800c364:	f001 f9cc 	bl	800d700 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c368:	f001 ff5c 	bl	800e224 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c36c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3738      	adds	r7, #56	; 0x38
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	e000ed04 	.word	0xe000ed04

0800c37c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b08e      	sub	sp, #56	; 0x38
 800c380:	af00      	add	r7, sp, #0
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	60b9      	str	r1, [r7, #8]
 800c386:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d10a      	bne.n	800c3a8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c396:	f383 8811 	msr	BASEPRI, r3
 800c39a:	f3bf 8f6f 	isb	sy
 800c39e:	f3bf 8f4f 	dsb	sy
 800c3a2:	623b      	str	r3, [r7, #32]
}
 800c3a4:	bf00      	nop
 800c3a6:	e7fe      	b.n	800c3a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d103      	bne.n	800c3b6 <xQueueReceiveFromISR+0x3a>
 800c3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d101      	bne.n	800c3ba <xQueueReceiveFromISR+0x3e>
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	e000      	b.n	800c3bc <xQueueReceiveFromISR+0x40>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d10a      	bne.n	800c3d6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c4:	f383 8811 	msr	BASEPRI, r3
 800c3c8:	f3bf 8f6f 	isb	sy
 800c3cc:	f3bf 8f4f 	dsb	sy
 800c3d0:	61fb      	str	r3, [r7, #28]
}
 800c3d2:	bf00      	nop
 800c3d4:	e7fe      	b.n	800c3d4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c3d6:	f001 ffd7 	bl	800e388 <vPortValidateInterruptPriority>
	__asm volatile
 800c3da:	f3ef 8211 	mrs	r2, BASEPRI
 800c3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e2:	f383 8811 	msr	BASEPRI, r3
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	61ba      	str	r2, [r7, #24]
 800c3f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c3f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c3f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d02f      	beq.n	800c462 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c404:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c40c:	68b9      	ldr	r1, [r7, #8]
 800c40e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c410:	f000 f8d9 	bl	800c5c6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c416:	1e5a      	subs	r2, r3, #1
 800c418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c41c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c424:	d112      	bne.n	800c44c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c428:	691b      	ldr	r3, [r3, #16]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d016      	beq.n	800c45c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c430:	3310      	adds	r3, #16
 800c432:	4618      	mov	r0, r3
 800c434:	f000 fe9e 	bl	800d174 <xTaskRemoveFromEventList>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d00e      	beq.n	800c45c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d00b      	beq.n	800c45c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2201      	movs	r2, #1
 800c448:	601a      	str	r2, [r3, #0]
 800c44a:	e007      	b.n	800c45c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c44c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c450:	3301      	adds	r3, #1
 800c452:	b2db      	uxtb	r3, r3
 800c454:	b25a      	sxtb	r2, r3
 800c456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c45c:	2301      	movs	r3, #1
 800c45e:	637b      	str	r3, [r7, #52]	; 0x34
 800c460:	e001      	b.n	800c466 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c462:	2300      	movs	r3, #0
 800c464:	637b      	str	r3, [r7, #52]	; 0x34
 800c466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c468:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	f383 8811 	msr	BASEPRI, r3
}
 800c470:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c474:	4618      	mov	r0, r3
 800c476:	3738      	adds	r7, #56	; 0x38
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d10a      	bne.n	800c4a4 <vQueueDelete+0x28>
	__asm volatile
 800c48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c492:	f383 8811 	msr	BASEPRI, r3
 800c496:	f3bf 8f6f 	isb	sy
 800c49a:	f3bf 8f4f 	dsb	sy
 800c49e:	60bb      	str	r3, [r7, #8]
}
 800c4a0:	bf00      	nop
 800c4a2:	e7fe      	b.n	800c4a2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c4a4:	68f8      	ldr	r0, [r7, #12]
 800c4a6:	f000 f95f 	bl	800c768 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d102      	bne.n	800c4ba <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c4b4:	68f8      	ldr	r0, [r7, #12]
 800c4b6:	f002 f873 	bl	800e5a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c4ba:	bf00      	nop
 800c4bc:	3710      	adds	r7, #16
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}

0800c4c2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c4c2:	b480      	push	{r7}
 800c4c4:	b085      	sub	sp, #20
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d006      	beq.n	800c4e0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c4dc:	60fb      	str	r3, [r7, #12]
 800c4de:	e001      	b.n	800c4e4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
	}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3714      	adds	r7, #20
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr

0800c4f2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b086      	sub	sp, #24
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	60f8      	str	r0, [r7, #12]
 800c4fa:	60b9      	str	r1, [r7, #8]
 800c4fc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c4fe:	2300      	movs	r3, #0
 800c500:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c506:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d10d      	bne.n	800c52c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d14d      	bne.n	800c5b4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	689b      	ldr	r3, [r3, #8]
 800c51c:	4618      	mov	r0, r3
 800c51e:	f001 f881 	bl	800d624 <xTaskPriorityDisinherit>
 800c522:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2200      	movs	r2, #0
 800c528:	609a      	str	r2, [r3, #8]
 800c52a:	e043      	b.n	800c5b4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d119      	bne.n	800c566 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	6858      	ldr	r0, [r3, #4]
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c53a:	461a      	mov	r2, r3
 800c53c:	68b9      	ldr	r1, [r7, #8]
 800c53e:	f00d feb3 	bl	801a2a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	685a      	ldr	r2, [r3, #4]
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c54a:	441a      	add	r2, r3
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	685a      	ldr	r2, [r3, #4]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	689b      	ldr	r3, [r3, #8]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d32b      	bcc.n	800c5b4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	605a      	str	r2, [r3, #4]
 800c564:	e026      	b.n	800c5b4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	68d8      	ldr	r0, [r3, #12]
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c56e:	461a      	mov	r2, r3
 800c570:	68b9      	ldr	r1, [r7, #8]
 800c572:	f00d fe99 	bl	801a2a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	68da      	ldr	r2, [r3, #12]
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c57e:	425b      	negs	r3, r3
 800c580:	441a      	add	r2, r3
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	68da      	ldr	r2, [r3, #12]
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	429a      	cmp	r2, r3
 800c590:	d207      	bcs.n	800c5a2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	689a      	ldr	r2, [r3, #8]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c59a:	425b      	negs	r3, r3
 800c59c:	441a      	add	r2, r3
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2b02      	cmp	r3, #2
 800c5a6:	d105      	bne.n	800c5b4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d002      	beq.n	800c5b4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	3b01      	subs	r3, #1
 800c5b2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	1c5a      	adds	r2, r3, #1
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c5bc:	697b      	ldr	r3, [r7, #20]
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3718      	adds	r7, #24
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b082      	sub	sp, #8
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
 800c5ce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d018      	beq.n	800c60a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	68da      	ldr	r2, [r3, #12]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5e0:	441a      	add	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	68da      	ldr	r2, [r3, #12]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	689b      	ldr	r3, [r3, #8]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d303      	bcc.n	800c5fa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	68d9      	ldr	r1, [r3, #12]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c602:	461a      	mov	r2, r3
 800c604:	6838      	ldr	r0, [r7, #0]
 800c606:	f00d fe4f 	bl	801a2a8 <memcpy>
	}
}
 800c60a:	bf00      	nop
 800c60c:	3708      	adds	r7, #8
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}

0800c612 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c612:	b580      	push	{r7, lr}
 800c614:	b084      	sub	sp, #16
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c61a:	f001 fdd3 	bl	800e1c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c624:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c626:	e011      	b.n	800c64c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d012      	beq.n	800c656 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	3324      	adds	r3, #36	; 0x24
 800c634:	4618      	mov	r0, r3
 800c636:	f000 fd9d 	bl	800d174 <xTaskRemoveFromEventList>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d001      	beq.n	800c644 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c640:	f000 fe74 	bl	800d32c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c644:	7bfb      	ldrb	r3, [r7, #15]
 800c646:	3b01      	subs	r3, #1
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c64c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c650:	2b00      	cmp	r3, #0
 800c652:	dce9      	bgt.n	800c628 <prvUnlockQueue+0x16>
 800c654:	e000      	b.n	800c658 <prvUnlockQueue+0x46>
					break;
 800c656:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	22ff      	movs	r2, #255	; 0xff
 800c65c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c660:	f001 fde0 	bl	800e224 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c664:	f001 fdae 	bl	800e1c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c66e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c670:	e011      	b.n	800c696 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	691b      	ldr	r3, [r3, #16]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d012      	beq.n	800c6a0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	3310      	adds	r3, #16
 800c67e:	4618      	mov	r0, r3
 800c680:	f000 fd78 	bl	800d174 <xTaskRemoveFromEventList>
 800c684:	4603      	mov	r3, r0
 800c686:	2b00      	cmp	r3, #0
 800c688:	d001      	beq.n	800c68e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c68a:	f000 fe4f 	bl	800d32c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c68e:	7bbb      	ldrb	r3, [r7, #14]
 800c690:	3b01      	subs	r3, #1
 800c692:	b2db      	uxtb	r3, r3
 800c694:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c696:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	dce9      	bgt.n	800c672 <prvUnlockQueue+0x60>
 800c69e:	e000      	b.n	800c6a2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c6a0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	22ff      	movs	r2, #255	; 0xff
 800c6a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c6aa:	f001 fdbb 	bl	800e224 <vPortExitCritical>
}
 800c6ae:	bf00      	nop
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b084      	sub	sp, #16
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c6be:	f001 fd81 	bl	800e1c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d102      	bne.n	800c6d0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	60fb      	str	r3, [r7, #12]
 800c6ce:	e001      	b.n	800c6d4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c6d4:	f001 fda6 	bl	800e224 <vPortExitCritical>

	return xReturn;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3710      	adds	r7, #16
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}

0800c6e2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c6e2:	b580      	push	{r7, lr}
 800c6e4:	b084      	sub	sp, #16
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c6ea:	f001 fd6b 	bl	800e1c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d102      	bne.n	800c700 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	60fb      	str	r3, [r7, #12]
 800c6fe:	e001      	b.n	800c704 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c700:	2300      	movs	r3, #0
 800c702:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c704:	f001 fd8e 	bl	800e224 <vPortExitCritical>

	return xReturn;
 800c708:	68fb      	ldr	r3, [r7, #12]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
	...

0800c714 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c714:	b480      	push	{r7}
 800c716:	b085      	sub	sp, #20
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c71e:	2300      	movs	r3, #0
 800c720:	60fb      	str	r3, [r7, #12]
 800c722:	e014      	b.n	800c74e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c724:	4a0f      	ldr	r2, [pc, #60]	; (800c764 <vQueueAddToRegistry+0x50>)
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d10b      	bne.n	800c748 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c730:	490c      	ldr	r1, [pc, #48]	; (800c764 <vQueueAddToRegistry+0x50>)
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	683a      	ldr	r2, [r7, #0]
 800c736:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c73a:	4a0a      	ldr	r2, [pc, #40]	; (800c764 <vQueueAddToRegistry+0x50>)
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	00db      	lsls	r3, r3, #3
 800c740:	4413      	add	r3, r2
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c746:	e006      	b.n	800c756 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	3301      	adds	r3, #1
 800c74c:	60fb      	str	r3, [r7, #12]
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2b07      	cmp	r3, #7
 800c752:	d9e7      	bls.n	800c724 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c754:	bf00      	nop
 800c756:	bf00      	nop
 800c758:	3714      	adds	r7, #20
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr
 800c762:	bf00      	nop
 800c764:	240066c4 	.word	0x240066c4

0800c768 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c768:	b480      	push	{r7}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c770:	2300      	movs	r3, #0
 800c772:	60fb      	str	r3, [r7, #12]
 800c774:	e016      	b.n	800c7a4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c776:	4a10      	ldr	r2, [pc, #64]	; (800c7b8 <vQueueUnregisterQueue+0x50>)
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	00db      	lsls	r3, r3, #3
 800c77c:	4413      	add	r3, r2
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	429a      	cmp	r2, r3
 800c784:	d10b      	bne.n	800c79e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c786:	4a0c      	ldr	r2, [pc, #48]	; (800c7b8 <vQueueUnregisterQueue+0x50>)
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	2100      	movs	r1, #0
 800c78c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c790:	4a09      	ldr	r2, [pc, #36]	; (800c7b8 <vQueueUnregisterQueue+0x50>)
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	00db      	lsls	r3, r3, #3
 800c796:	4413      	add	r3, r2
 800c798:	2200      	movs	r2, #0
 800c79a:	605a      	str	r2, [r3, #4]
				break;
 800c79c:	e006      	b.n	800c7ac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	60fb      	str	r3, [r7, #12]
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2b07      	cmp	r3, #7
 800c7a8:	d9e5      	bls.n	800c776 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c7aa:	bf00      	nop
 800c7ac:	bf00      	nop
 800c7ae:	3714      	adds	r7, #20
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr
 800c7b8:	240066c4 	.word	0x240066c4

0800c7bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b086      	sub	sp, #24
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c7cc:	f001 fcfa 	bl	800e1c4 <vPortEnterCritical>
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7d6:	b25b      	sxtb	r3, r3
 800c7d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7dc:	d103      	bne.n	800c7e6 <vQueueWaitForMessageRestricted+0x2a>
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7ec:	b25b      	sxtb	r3, r3
 800c7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f2:	d103      	bne.n	800c7fc <vQueueWaitForMessageRestricted+0x40>
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7fc:	f001 fd12 	bl	800e224 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c804:	2b00      	cmp	r3, #0
 800c806:	d106      	bne.n	800c816 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	3324      	adds	r3, #36	; 0x24
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	68b9      	ldr	r1, [r7, #8]
 800c810:	4618      	mov	r0, r3
 800c812:	f000 fc83 	bl	800d11c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c816:	6978      	ldr	r0, [r7, #20]
 800c818:	f7ff fefb 	bl	800c612 <prvUnlockQueue>
	}
 800c81c:	bf00      	nop
 800c81e:	3718      	adds	r7, #24
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c824:	b580      	push	{r7, lr}
 800c826:	b08e      	sub	sp, #56	; 0x38
 800c828:	af04      	add	r7, sp, #16
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	607a      	str	r2, [r7, #4]
 800c830:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c834:	2b00      	cmp	r3, #0
 800c836:	d10a      	bne.n	800c84e <xTaskCreateStatic+0x2a>
	__asm volatile
 800c838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c83c:	f383 8811 	msr	BASEPRI, r3
 800c840:	f3bf 8f6f 	isb	sy
 800c844:	f3bf 8f4f 	dsb	sy
 800c848:	623b      	str	r3, [r7, #32]
}
 800c84a:	bf00      	nop
 800c84c:	e7fe      	b.n	800c84c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c850:	2b00      	cmp	r3, #0
 800c852:	d10a      	bne.n	800c86a <xTaskCreateStatic+0x46>
	__asm volatile
 800c854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c858:	f383 8811 	msr	BASEPRI, r3
 800c85c:	f3bf 8f6f 	isb	sy
 800c860:	f3bf 8f4f 	dsb	sy
 800c864:	61fb      	str	r3, [r7, #28]
}
 800c866:	bf00      	nop
 800c868:	e7fe      	b.n	800c868 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c86a:	23a8      	movs	r3, #168	; 0xa8
 800c86c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	2ba8      	cmp	r3, #168	; 0xa8
 800c872:	d00a      	beq.n	800c88a <xTaskCreateStatic+0x66>
	__asm volatile
 800c874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c878:	f383 8811 	msr	BASEPRI, r3
 800c87c:	f3bf 8f6f 	isb	sy
 800c880:	f3bf 8f4f 	dsb	sy
 800c884:	61bb      	str	r3, [r7, #24]
}
 800c886:	bf00      	nop
 800c888:	e7fe      	b.n	800c888 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c88a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d01e      	beq.n	800c8d0 <xTaskCreateStatic+0xac>
 800c892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c894:	2b00      	cmp	r3, #0
 800c896:	d01b      	beq.n	800c8d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a4:	2202      	movs	r2, #2
 800c8a6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	9303      	str	r3, [sp, #12]
 800c8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b0:	9302      	str	r3, [sp, #8]
 800c8b2:	f107 0314 	add.w	r3, r7, #20
 800c8b6:	9301      	str	r3, [sp, #4]
 800c8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ba:	9300      	str	r3, [sp, #0]
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	68b9      	ldr	r1, [r7, #8]
 800c8c2:	68f8      	ldr	r0, [r7, #12]
 800c8c4:	f000 f850 	bl	800c968 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c8c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8ca:	f000 f8f3 	bl	800cab4 <prvAddNewTaskToReadyList>
 800c8ce:	e001      	b.n	800c8d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c8d4:	697b      	ldr	r3, [r7, #20]
	}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3728      	adds	r7, #40	; 0x28
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b08c      	sub	sp, #48	; 0x30
 800c8e2:	af04      	add	r7, sp, #16
 800c8e4:	60f8      	str	r0, [r7, #12]
 800c8e6:	60b9      	str	r1, [r7, #8]
 800c8e8:	603b      	str	r3, [r7, #0]
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c8ee:	88fb      	ldrh	r3, [r7, #6]
 800c8f0:	009b      	lsls	r3, r3, #2
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f001 fd88 	bl	800e408 <pvPortMalloc>
 800c8f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d00e      	beq.n	800c91e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c900:	20a8      	movs	r0, #168	; 0xa8
 800c902:	f001 fd81 	bl	800e408 <pvPortMalloc>
 800c906:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d003      	beq.n	800c916 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c90e:	69fb      	ldr	r3, [r7, #28]
 800c910:	697a      	ldr	r2, [r7, #20]
 800c912:	631a      	str	r2, [r3, #48]	; 0x30
 800c914:	e005      	b.n	800c922 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c916:	6978      	ldr	r0, [r7, #20]
 800c918:	f001 fe42 	bl	800e5a0 <vPortFree>
 800c91c:	e001      	b.n	800c922 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c91e:	2300      	movs	r3, #0
 800c920:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c922:	69fb      	ldr	r3, [r7, #28]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d017      	beq.n	800c958 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	2200      	movs	r2, #0
 800c92c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c930:	88fa      	ldrh	r2, [r7, #6]
 800c932:	2300      	movs	r3, #0
 800c934:	9303      	str	r3, [sp, #12]
 800c936:	69fb      	ldr	r3, [r7, #28]
 800c938:	9302      	str	r3, [sp, #8]
 800c93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93c:	9301      	str	r3, [sp, #4]
 800c93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c940:	9300      	str	r3, [sp, #0]
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	68b9      	ldr	r1, [r7, #8]
 800c946:	68f8      	ldr	r0, [r7, #12]
 800c948:	f000 f80e 	bl	800c968 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c94c:	69f8      	ldr	r0, [r7, #28]
 800c94e:	f000 f8b1 	bl	800cab4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c952:	2301      	movs	r3, #1
 800c954:	61bb      	str	r3, [r7, #24]
 800c956:	e002      	b.n	800c95e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c958:	f04f 33ff 	mov.w	r3, #4294967295
 800c95c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c95e:	69bb      	ldr	r3, [r7, #24]
	}
 800c960:	4618      	mov	r0, r3
 800c962:	3720      	adds	r7, #32
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b088      	sub	sp, #32
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	60b9      	str	r1, [r7, #8]
 800c972:	607a      	str	r2, [r7, #4]
 800c974:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c978:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	009b      	lsls	r3, r3, #2
 800c97e:	461a      	mov	r2, r3
 800c980:	21a5      	movs	r1, #165	; 0xa5
 800c982:	f00d fbc7 	bl	801a114 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c98a:	6879      	ldr	r1, [r7, #4]
 800c98c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c990:	440b      	add	r3, r1
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	4413      	add	r3, r2
 800c996:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c998:	69bb      	ldr	r3, [r7, #24]
 800c99a:	f023 0307 	bic.w	r3, r3, #7
 800c99e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c9a0:	69bb      	ldr	r3, [r7, #24]
 800c9a2:	f003 0307 	and.w	r3, r3, #7
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d00a      	beq.n	800c9c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ae:	f383 8811 	msr	BASEPRI, r3
 800c9b2:	f3bf 8f6f 	isb	sy
 800c9b6:	f3bf 8f4f 	dsb	sy
 800c9ba:	617b      	str	r3, [r7, #20]
}
 800c9bc:	bf00      	nop
 800c9be:	e7fe      	b.n	800c9be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d01f      	beq.n	800ca06 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	61fb      	str	r3, [r7, #28]
 800c9ca:	e012      	b.n	800c9f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c9cc:	68ba      	ldr	r2, [r7, #8]
 800c9ce:	69fb      	ldr	r3, [r7, #28]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	7819      	ldrb	r1, [r3, #0]
 800c9d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9d6:	69fb      	ldr	r3, [r7, #28]
 800c9d8:	4413      	add	r3, r2
 800c9da:	3334      	adds	r3, #52	; 0x34
 800c9dc:	460a      	mov	r2, r1
 800c9de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c9e0:	68ba      	ldr	r2, [r7, #8]
 800c9e2:	69fb      	ldr	r3, [r7, #28]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d006      	beq.n	800c9fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c9ec:	69fb      	ldr	r3, [r7, #28]
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	61fb      	str	r3, [r7, #28]
 800c9f2:	69fb      	ldr	r3, [r7, #28]
 800c9f4:	2b0f      	cmp	r3, #15
 800c9f6:	d9e9      	bls.n	800c9cc <prvInitialiseNewTask+0x64>
 800c9f8:	e000      	b.n	800c9fc <prvInitialiseNewTask+0x94>
			{
				break;
 800c9fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9fe:	2200      	movs	r2, #0
 800ca00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ca04:	e003      	b.n	800ca0e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ca06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca08:	2200      	movs	r2, #0
 800ca0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ca0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca10:	2b37      	cmp	r3, #55	; 0x37
 800ca12:	d901      	bls.n	800ca18 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ca14:	2337      	movs	r3, #55	; 0x37
 800ca16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ca18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ca1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca22:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ca24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca26:	2200      	movs	r2, #0
 800ca28:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ca2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca2c:	3304      	adds	r3, #4
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7fe fda0 	bl	800b574 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ca34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca36:	3318      	adds	r3, #24
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f7fe fd9b 	bl	800b574 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ca3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ca4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ca4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ca54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca56:	2200      	movs	r2, #0
 800ca58:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ca5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5e:	2200      	movs	r2, #0
 800ca60:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ca64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca66:	3354      	adds	r3, #84	; 0x54
 800ca68:	224c      	movs	r2, #76	; 0x4c
 800ca6a:	2100      	movs	r1, #0
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f00d fb51 	bl	801a114 <memset>
 800ca72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca74:	4a0c      	ldr	r2, [pc, #48]	; (800caa8 <prvInitialiseNewTask+0x140>)
 800ca76:	659a      	str	r2, [r3, #88]	; 0x58
 800ca78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7a:	4a0c      	ldr	r2, [pc, #48]	; (800caac <prvInitialiseNewTask+0x144>)
 800ca7c:	65da      	str	r2, [r3, #92]	; 0x5c
 800ca7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca80:	4a0b      	ldr	r2, [pc, #44]	; (800cab0 <prvInitialiseNewTask+0x148>)
 800ca82:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ca84:	683a      	ldr	r2, [r7, #0]
 800ca86:	68f9      	ldr	r1, [r7, #12]
 800ca88:	69b8      	ldr	r0, [r7, #24]
 800ca8a:	f001 fa71 	bl	800df70 <pxPortInitialiseStack>
 800ca8e:	4602      	mov	r2, r0
 800ca90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca92:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ca94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d002      	beq.n	800caa0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ca9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca9e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800caa0:	bf00      	nop
 800caa2:	3720      	adds	r7, #32
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}
 800caa8:	24015188 	.word	0x24015188
 800caac:	240151f0 	.word	0x240151f0
 800cab0:	24015258 	.word	0x24015258

0800cab4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cabc:	f001 fb82 	bl	800e1c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cac0:	4b2d      	ldr	r3, [pc, #180]	; (800cb78 <prvAddNewTaskToReadyList+0xc4>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	3301      	adds	r3, #1
 800cac6:	4a2c      	ldr	r2, [pc, #176]	; (800cb78 <prvAddNewTaskToReadyList+0xc4>)
 800cac8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800caca:	4b2c      	ldr	r3, [pc, #176]	; (800cb7c <prvAddNewTaskToReadyList+0xc8>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d109      	bne.n	800cae6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cad2:	4a2a      	ldr	r2, [pc, #168]	; (800cb7c <prvAddNewTaskToReadyList+0xc8>)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cad8:	4b27      	ldr	r3, [pc, #156]	; (800cb78 <prvAddNewTaskToReadyList+0xc4>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d110      	bne.n	800cb02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cae0:	f000 fc48 	bl	800d374 <prvInitialiseTaskLists>
 800cae4:	e00d      	b.n	800cb02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cae6:	4b26      	ldr	r3, [pc, #152]	; (800cb80 <prvAddNewTaskToReadyList+0xcc>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d109      	bne.n	800cb02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800caee:	4b23      	ldr	r3, [pc, #140]	; (800cb7c <prvAddNewTaskToReadyList+0xc8>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d802      	bhi.n	800cb02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cafc:	4a1f      	ldr	r2, [pc, #124]	; (800cb7c <prvAddNewTaskToReadyList+0xc8>)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cb02:	4b20      	ldr	r3, [pc, #128]	; (800cb84 <prvAddNewTaskToReadyList+0xd0>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	3301      	adds	r3, #1
 800cb08:	4a1e      	ldr	r2, [pc, #120]	; (800cb84 <prvAddNewTaskToReadyList+0xd0>)
 800cb0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cb0c:	4b1d      	ldr	r3, [pc, #116]	; (800cb84 <prvAddNewTaskToReadyList+0xd0>)
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb18:	4b1b      	ldr	r3, [pc, #108]	; (800cb88 <prvAddNewTaskToReadyList+0xd4>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d903      	bls.n	800cb28 <prvAddNewTaskToReadyList+0x74>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb24:	4a18      	ldr	r2, [pc, #96]	; (800cb88 <prvAddNewTaskToReadyList+0xd4>)
 800cb26:	6013      	str	r3, [r2, #0]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	4413      	add	r3, r2
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	4a15      	ldr	r2, [pc, #84]	; (800cb8c <prvAddNewTaskToReadyList+0xd8>)
 800cb36:	441a      	add	r2, r3
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	3304      	adds	r3, #4
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	4610      	mov	r0, r2
 800cb40:	f7fe fd25 	bl	800b58e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cb44:	f001 fb6e 	bl	800e224 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cb48:	4b0d      	ldr	r3, [pc, #52]	; (800cb80 <prvAddNewTaskToReadyList+0xcc>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d00e      	beq.n	800cb6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cb50:	4b0a      	ldr	r3, [pc, #40]	; (800cb7c <prvAddNewTaskToReadyList+0xc8>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d207      	bcs.n	800cb6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cb5e:	4b0c      	ldr	r3, [pc, #48]	; (800cb90 <prvAddNewTaskToReadyList+0xdc>)
 800cb60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb64:	601a      	str	r2, [r3, #0]
 800cb66:	f3bf 8f4f 	dsb	sy
 800cb6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb6e:	bf00      	nop
 800cb70:	3708      	adds	r7, #8
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	24006bd8 	.word	0x24006bd8
 800cb7c:	24006704 	.word	0x24006704
 800cb80:	24006be4 	.word	0x24006be4
 800cb84:	24006bf4 	.word	0x24006bf4
 800cb88:	24006be0 	.word	0x24006be0
 800cb8c:	24006708 	.word	0x24006708
 800cb90:	e000ed04 	.word	0xe000ed04

0800cb94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d017      	beq.n	800cbd6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cba6:	4b13      	ldr	r3, [pc, #76]	; (800cbf4 <vTaskDelay+0x60>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d00a      	beq.n	800cbc4 <vTaskDelay+0x30>
	__asm volatile
 800cbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb2:	f383 8811 	msr	BASEPRI, r3
 800cbb6:	f3bf 8f6f 	isb	sy
 800cbba:	f3bf 8f4f 	dsb	sy
 800cbbe:	60bb      	str	r3, [r7, #8]
}
 800cbc0:	bf00      	nop
 800cbc2:	e7fe      	b.n	800cbc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cbc4:	f000 f88a 	bl	800ccdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cbc8:	2100      	movs	r1, #0
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 fe2e 	bl	800d82c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cbd0:	f000 f892 	bl	800ccf8 <xTaskResumeAll>
 800cbd4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d107      	bne.n	800cbec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cbdc:	4b06      	ldr	r3, [pc, #24]	; (800cbf8 <vTaskDelay+0x64>)
 800cbde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbe2:	601a      	str	r2, [r3, #0]
 800cbe4:	f3bf 8f4f 	dsb	sy
 800cbe8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cbec:	bf00      	nop
 800cbee:	3710      	adds	r7, #16
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	24006c00 	.word	0x24006c00
 800cbf8:	e000ed04 	.word	0xe000ed04

0800cbfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b08a      	sub	sp, #40	; 0x28
 800cc00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cc02:	2300      	movs	r3, #0
 800cc04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cc06:	2300      	movs	r3, #0
 800cc08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cc0a:	463a      	mov	r2, r7
 800cc0c:	1d39      	adds	r1, r7, #4
 800cc0e:	f107 0308 	add.w	r3, r7, #8
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7fe fc5a 	bl	800b4cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cc18:	6839      	ldr	r1, [r7, #0]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	68ba      	ldr	r2, [r7, #8]
 800cc1e:	9202      	str	r2, [sp, #8]
 800cc20:	9301      	str	r3, [sp, #4]
 800cc22:	2300      	movs	r3, #0
 800cc24:	9300      	str	r3, [sp, #0]
 800cc26:	2300      	movs	r3, #0
 800cc28:	460a      	mov	r2, r1
 800cc2a:	4924      	ldr	r1, [pc, #144]	; (800ccbc <vTaskStartScheduler+0xc0>)
 800cc2c:	4824      	ldr	r0, [pc, #144]	; (800ccc0 <vTaskStartScheduler+0xc4>)
 800cc2e:	f7ff fdf9 	bl	800c824 <xTaskCreateStatic>
 800cc32:	4603      	mov	r3, r0
 800cc34:	4a23      	ldr	r2, [pc, #140]	; (800ccc4 <vTaskStartScheduler+0xc8>)
 800cc36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cc38:	4b22      	ldr	r3, [pc, #136]	; (800ccc4 <vTaskStartScheduler+0xc8>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d002      	beq.n	800cc46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cc40:	2301      	movs	r3, #1
 800cc42:	617b      	str	r3, [r7, #20]
 800cc44:	e001      	b.n	800cc4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cc46:	2300      	movs	r3, #0
 800cc48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d102      	bne.n	800cc56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cc50:	f000 fe40 	bl	800d8d4 <xTimerCreateTimerTask>
 800cc54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d11b      	bne.n	800cc94 <vTaskStartScheduler+0x98>
	__asm volatile
 800cc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc60:	f383 8811 	msr	BASEPRI, r3
 800cc64:	f3bf 8f6f 	isb	sy
 800cc68:	f3bf 8f4f 	dsb	sy
 800cc6c:	613b      	str	r3, [r7, #16]
}
 800cc6e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cc70:	4b15      	ldr	r3, [pc, #84]	; (800ccc8 <vTaskStartScheduler+0xcc>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	3354      	adds	r3, #84	; 0x54
 800cc76:	4a15      	ldr	r2, [pc, #84]	; (800cccc <vTaskStartScheduler+0xd0>)
 800cc78:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cc7a:	4b15      	ldr	r3, [pc, #84]	; (800ccd0 <vTaskStartScheduler+0xd4>)
 800cc7c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cc82:	4b14      	ldr	r3, [pc, #80]	; (800ccd4 <vTaskStartScheduler+0xd8>)
 800cc84:	2201      	movs	r2, #1
 800cc86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cc88:	4b13      	ldr	r3, [pc, #76]	; (800ccd8 <vTaskStartScheduler+0xdc>)
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cc8e:	f001 f9f7 	bl	800e080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cc92:	e00e      	b.n	800ccb2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc9a:	d10a      	bne.n	800ccb2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800cc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca0:	f383 8811 	msr	BASEPRI, r3
 800cca4:	f3bf 8f6f 	isb	sy
 800cca8:	f3bf 8f4f 	dsb	sy
 800ccac:	60fb      	str	r3, [r7, #12]
}
 800ccae:	bf00      	nop
 800ccb0:	e7fe      	b.n	800ccb0 <vTaskStartScheduler+0xb4>
}
 800ccb2:	bf00      	nop
 800ccb4:	3718      	adds	r7, #24
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop
 800ccbc:	0801b064 	.word	0x0801b064
 800ccc0:	0800d345 	.word	0x0800d345
 800ccc4:	24006bfc 	.word	0x24006bfc
 800ccc8:	24006704 	.word	0x24006704
 800cccc:	2400008c 	.word	0x2400008c
 800ccd0:	24006bf8 	.word	0x24006bf8
 800ccd4:	24006be4 	.word	0x24006be4
 800ccd8:	24006bdc 	.word	0x24006bdc

0800ccdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ccdc:	b480      	push	{r7}
 800ccde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cce0:	4b04      	ldr	r3, [pc, #16]	; (800ccf4 <vTaskSuspendAll+0x18>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	3301      	adds	r3, #1
 800cce6:	4a03      	ldr	r2, [pc, #12]	; (800ccf4 <vTaskSuspendAll+0x18>)
 800cce8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ccea:	bf00      	nop
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr
 800ccf4:	24006c00 	.word	0x24006c00

0800ccf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cd02:	2300      	movs	r3, #0
 800cd04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cd06:	4b42      	ldr	r3, [pc, #264]	; (800ce10 <xTaskResumeAll+0x118>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d10a      	bne.n	800cd24 <xTaskResumeAll+0x2c>
	__asm volatile
 800cd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd12:	f383 8811 	msr	BASEPRI, r3
 800cd16:	f3bf 8f6f 	isb	sy
 800cd1a:	f3bf 8f4f 	dsb	sy
 800cd1e:	603b      	str	r3, [r7, #0]
}
 800cd20:	bf00      	nop
 800cd22:	e7fe      	b.n	800cd22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cd24:	f001 fa4e 	bl	800e1c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cd28:	4b39      	ldr	r3, [pc, #228]	; (800ce10 <xTaskResumeAll+0x118>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	3b01      	subs	r3, #1
 800cd2e:	4a38      	ldr	r2, [pc, #224]	; (800ce10 <xTaskResumeAll+0x118>)
 800cd30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd32:	4b37      	ldr	r3, [pc, #220]	; (800ce10 <xTaskResumeAll+0x118>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d162      	bne.n	800ce00 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cd3a:	4b36      	ldr	r3, [pc, #216]	; (800ce14 <xTaskResumeAll+0x11c>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d05e      	beq.n	800ce00 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd42:	e02f      	b.n	800cda4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd44:	4b34      	ldr	r3, [pc, #208]	; (800ce18 <xTaskResumeAll+0x120>)
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	68db      	ldr	r3, [r3, #12]
 800cd4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	3318      	adds	r3, #24
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7fe fc79 	bl	800b648 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	3304      	adds	r3, #4
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7fe fc74 	bl	800b648 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd64:	4b2d      	ldr	r3, [pc, #180]	; (800ce1c <xTaskResumeAll+0x124>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d903      	bls.n	800cd74 <xTaskResumeAll+0x7c>
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd70:	4a2a      	ldr	r2, [pc, #168]	; (800ce1c <xTaskResumeAll+0x124>)
 800cd72:	6013      	str	r3, [r2, #0]
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd78:	4613      	mov	r3, r2
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	4413      	add	r3, r2
 800cd7e:	009b      	lsls	r3, r3, #2
 800cd80:	4a27      	ldr	r2, [pc, #156]	; (800ce20 <xTaskResumeAll+0x128>)
 800cd82:	441a      	add	r2, r3
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	3304      	adds	r3, #4
 800cd88:	4619      	mov	r1, r3
 800cd8a:	4610      	mov	r0, r2
 800cd8c:	f7fe fbff 	bl	800b58e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd94:	4b23      	ldr	r3, [pc, #140]	; (800ce24 <xTaskResumeAll+0x12c>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d302      	bcc.n	800cda4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cd9e:	4b22      	ldr	r3, [pc, #136]	; (800ce28 <xTaskResumeAll+0x130>)
 800cda0:	2201      	movs	r2, #1
 800cda2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cda4:	4b1c      	ldr	r3, [pc, #112]	; (800ce18 <xTaskResumeAll+0x120>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d1cb      	bne.n	800cd44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d001      	beq.n	800cdb6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cdb2:	f000 fb81 	bl	800d4b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cdb6:	4b1d      	ldr	r3, [pc, #116]	; (800ce2c <xTaskResumeAll+0x134>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d010      	beq.n	800cde4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cdc2:	f000 f859 	bl	800ce78 <xTaskIncrementTick>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d002      	beq.n	800cdd2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cdcc:	4b16      	ldr	r3, [pc, #88]	; (800ce28 <xTaskResumeAll+0x130>)
 800cdce:	2201      	movs	r2, #1
 800cdd0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	3b01      	subs	r3, #1
 800cdd6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d1f1      	bne.n	800cdc2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cdde:	4b13      	ldr	r3, [pc, #76]	; (800ce2c <xTaskResumeAll+0x134>)
 800cde0:	2200      	movs	r2, #0
 800cde2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cde4:	4b10      	ldr	r3, [pc, #64]	; (800ce28 <xTaskResumeAll+0x130>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d009      	beq.n	800ce00 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cdec:	2301      	movs	r3, #1
 800cdee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cdf0:	4b0f      	ldr	r3, [pc, #60]	; (800ce30 <xTaskResumeAll+0x138>)
 800cdf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdf6:	601a      	str	r2, [r3, #0]
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce00:	f001 fa10 	bl	800e224 <vPortExitCritical>

	return xAlreadyYielded;
 800ce04:	68bb      	ldr	r3, [r7, #8]
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3710      	adds	r7, #16
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	24006c00 	.word	0x24006c00
 800ce14:	24006bd8 	.word	0x24006bd8
 800ce18:	24006b98 	.word	0x24006b98
 800ce1c:	24006be0 	.word	0x24006be0
 800ce20:	24006708 	.word	0x24006708
 800ce24:	24006704 	.word	0x24006704
 800ce28:	24006bec 	.word	0x24006bec
 800ce2c:	24006be8 	.word	0x24006be8
 800ce30:	e000ed04 	.word	0xe000ed04

0800ce34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ce34:	b480      	push	{r7}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ce3a:	4b05      	ldr	r3, [pc, #20]	; (800ce50 <xTaskGetTickCount+0x1c>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ce40:	687b      	ldr	r3, [r7, #4]
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	370c      	adds	r7, #12
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr
 800ce4e:	bf00      	nop
 800ce50:	24006bdc 	.word	0x24006bdc

0800ce54 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce5a:	f001 fa95 	bl	800e388 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ce5e:	2300      	movs	r3, #0
 800ce60:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ce62:	4b04      	ldr	r3, [pc, #16]	; (800ce74 <xTaskGetTickCountFromISR+0x20>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce68:	683b      	ldr	r3, [r7, #0]
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3708      	adds	r7, #8
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	24006bdc 	.word	0x24006bdc

0800ce78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b086      	sub	sp, #24
 800ce7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce82:	4b4f      	ldr	r3, [pc, #316]	; (800cfc0 <xTaskIncrementTick+0x148>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	f040 808f 	bne.w	800cfaa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ce8c:	4b4d      	ldr	r3, [pc, #308]	; (800cfc4 <xTaskIncrementTick+0x14c>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	3301      	adds	r3, #1
 800ce92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ce94:	4a4b      	ldr	r2, [pc, #300]	; (800cfc4 <xTaskIncrementTick+0x14c>)
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d120      	bne.n	800cee2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cea0:	4b49      	ldr	r3, [pc, #292]	; (800cfc8 <xTaskIncrementTick+0x150>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d00a      	beq.n	800cec0 <xTaskIncrementTick+0x48>
	__asm volatile
 800ceaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceae:	f383 8811 	msr	BASEPRI, r3
 800ceb2:	f3bf 8f6f 	isb	sy
 800ceb6:	f3bf 8f4f 	dsb	sy
 800ceba:	603b      	str	r3, [r7, #0]
}
 800cebc:	bf00      	nop
 800cebe:	e7fe      	b.n	800cebe <xTaskIncrementTick+0x46>
 800cec0:	4b41      	ldr	r3, [pc, #260]	; (800cfc8 <xTaskIncrementTick+0x150>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	60fb      	str	r3, [r7, #12]
 800cec6:	4b41      	ldr	r3, [pc, #260]	; (800cfcc <xTaskIncrementTick+0x154>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	4a3f      	ldr	r2, [pc, #252]	; (800cfc8 <xTaskIncrementTick+0x150>)
 800cecc:	6013      	str	r3, [r2, #0]
 800cece:	4a3f      	ldr	r2, [pc, #252]	; (800cfcc <xTaskIncrementTick+0x154>)
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	6013      	str	r3, [r2, #0]
 800ced4:	4b3e      	ldr	r3, [pc, #248]	; (800cfd0 <xTaskIncrementTick+0x158>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	3301      	adds	r3, #1
 800ceda:	4a3d      	ldr	r2, [pc, #244]	; (800cfd0 <xTaskIncrementTick+0x158>)
 800cedc:	6013      	str	r3, [r2, #0]
 800cede:	f000 faeb 	bl	800d4b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cee2:	4b3c      	ldr	r3, [pc, #240]	; (800cfd4 <xTaskIncrementTick+0x15c>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	693a      	ldr	r2, [r7, #16]
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d349      	bcc.n	800cf80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ceec:	4b36      	ldr	r3, [pc, #216]	; (800cfc8 <xTaskIncrementTick+0x150>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d104      	bne.n	800cf00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cef6:	4b37      	ldr	r3, [pc, #220]	; (800cfd4 <xTaskIncrementTick+0x15c>)
 800cef8:	f04f 32ff 	mov.w	r2, #4294967295
 800cefc:	601a      	str	r2, [r3, #0]
					break;
 800cefe:	e03f      	b.n	800cf80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf00:	4b31      	ldr	r3, [pc, #196]	; (800cfc8 <xTaskIncrementTick+0x150>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	68db      	ldr	r3, [r3, #12]
 800cf08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cf10:	693a      	ldr	r2, [r7, #16]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d203      	bcs.n	800cf20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cf18:	4a2e      	ldr	r2, [pc, #184]	; (800cfd4 <xTaskIncrementTick+0x15c>)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cf1e:	e02f      	b.n	800cf80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	3304      	adds	r3, #4
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7fe fb8f 	bl	800b648 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d004      	beq.n	800cf3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	3318      	adds	r3, #24
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7fe fb86 	bl	800b648 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf40:	4b25      	ldr	r3, [pc, #148]	; (800cfd8 <xTaskIncrementTick+0x160>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d903      	bls.n	800cf50 <xTaskIncrementTick+0xd8>
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf4c:	4a22      	ldr	r2, [pc, #136]	; (800cfd8 <xTaskIncrementTick+0x160>)
 800cf4e:	6013      	str	r3, [r2, #0]
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf54:	4613      	mov	r3, r2
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	4413      	add	r3, r2
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	4a1f      	ldr	r2, [pc, #124]	; (800cfdc <xTaskIncrementTick+0x164>)
 800cf5e:	441a      	add	r2, r3
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	3304      	adds	r3, #4
 800cf64:	4619      	mov	r1, r3
 800cf66:	4610      	mov	r0, r2
 800cf68:	f7fe fb11 	bl	800b58e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf70:	4b1b      	ldr	r3, [pc, #108]	; (800cfe0 <xTaskIncrementTick+0x168>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d3b8      	bcc.n	800ceec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf7e:	e7b5      	b.n	800ceec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cf80:	4b17      	ldr	r3, [pc, #92]	; (800cfe0 <xTaskIncrementTick+0x168>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf86:	4915      	ldr	r1, [pc, #84]	; (800cfdc <xTaskIncrementTick+0x164>)
 800cf88:	4613      	mov	r3, r2
 800cf8a:	009b      	lsls	r3, r3, #2
 800cf8c:	4413      	add	r3, r2
 800cf8e:	009b      	lsls	r3, r3, #2
 800cf90:	440b      	add	r3, r1
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d901      	bls.n	800cf9c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cf98:	2301      	movs	r3, #1
 800cf9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cf9c:	4b11      	ldr	r3, [pc, #68]	; (800cfe4 <xTaskIncrementTick+0x16c>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d007      	beq.n	800cfb4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	617b      	str	r3, [r7, #20]
 800cfa8:	e004      	b.n	800cfb4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cfaa:	4b0f      	ldr	r3, [pc, #60]	; (800cfe8 <xTaskIncrementTick+0x170>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	3301      	adds	r3, #1
 800cfb0:	4a0d      	ldr	r2, [pc, #52]	; (800cfe8 <xTaskIncrementTick+0x170>)
 800cfb2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cfb4:	697b      	ldr	r3, [r7, #20]
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3718      	adds	r7, #24
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	24006c00 	.word	0x24006c00
 800cfc4:	24006bdc 	.word	0x24006bdc
 800cfc8:	24006b90 	.word	0x24006b90
 800cfcc:	24006b94 	.word	0x24006b94
 800cfd0:	24006bf0 	.word	0x24006bf0
 800cfd4:	24006bf8 	.word	0x24006bf8
 800cfd8:	24006be0 	.word	0x24006be0
 800cfdc:	24006708 	.word	0x24006708
 800cfe0:	24006704 	.word	0x24006704
 800cfe4:	24006bec 	.word	0x24006bec
 800cfe8:	24006be8 	.word	0x24006be8

0800cfec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b084      	sub	sp, #16
 800cff0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cff2:	4b32      	ldr	r3, [pc, #200]	; (800d0bc <vTaskSwitchContext+0xd0>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d003      	beq.n	800d002 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cffa:	4b31      	ldr	r3, [pc, #196]	; (800d0c0 <vTaskSwitchContext+0xd4>)
 800cffc:	2201      	movs	r2, #1
 800cffe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d000:	e057      	b.n	800d0b2 <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 800d002:	4b2f      	ldr	r3, [pc, #188]	; (800d0c0 <vTaskSwitchContext+0xd4>)
 800d004:	2200      	movs	r2, #0
 800d006:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d008:	4b2e      	ldr	r3, [pc, #184]	; (800d0c4 <vTaskSwitchContext+0xd8>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	681a      	ldr	r2, [r3, #0]
 800d00e:	4b2d      	ldr	r3, [pc, #180]	; (800d0c4 <vTaskSwitchContext+0xd8>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d014:	429a      	cmp	r2, r3
 800d016:	d808      	bhi.n	800d02a <vTaskSwitchContext+0x3e>
 800d018:	4b2a      	ldr	r3, [pc, #168]	; (800d0c4 <vTaskSwitchContext+0xd8>)
 800d01a:	681a      	ldr	r2, [r3, #0]
 800d01c:	4b29      	ldr	r3, [pc, #164]	; (800d0c4 <vTaskSwitchContext+0xd8>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	3334      	adds	r3, #52	; 0x34
 800d022:	4619      	mov	r1, r3
 800d024:	4610      	mov	r0, r2
 800d026:	f7f3 fb41 	bl	80006ac <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d02a:	4b27      	ldr	r3, [pc, #156]	; (800d0c8 <vTaskSwitchContext+0xdc>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	60fb      	str	r3, [r7, #12]
 800d030:	e010      	b.n	800d054 <vTaskSwitchContext+0x68>
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d10a      	bne.n	800d04e <vTaskSwitchContext+0x62>
	__asm volatile
 800d038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d03c:	f383 8811 	msr	BASEPRI, r3
 800d040:	f3bf 8f6f 	isb	sy
 800d044:	f3bf 8f4f 	dsb	sy
 800d048:	607b      	str	r3, [r7, #4]
}
 800d04a:	bf00      	nop
 800d04c:	e7fe      	b.n	800d04c <vTaskSwitchContext+0x60>
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	3b01      	subs	r3, #1
 800d052:	60fb      	str	r3, [r7, #12]
 800d054:	491d      	ldr	r1, [pc, #116]	; (800d0cc <vTaskSwitchContext+0xe0>)
 800d056:	68fa      	ldr	r2, [r7, #12]
 800d058:	4613      	mov	r3, r2
 800d05a:	009b      	lsls	r3, r3, #2
 800d05c:	4413      	add	r3, r2
 800d05e:	009b      	lsls	r3, r3, #2
 800d060:	440b      	add	r3, r1
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d0e4      	beq.n	800d032 <vTaskSwitchContext+0x46>
 800d068:	68fa      	ldr	r2, [r7, #12]
 800d06a:	4613      	mov	r3, r2
 800d06c:	009b      	lsls	r3, r3, #2
 800d06e:	4413      	add	r3, r2
 800d070:	009b      	lsls	r3, r3, #2
 800d072:	4a16      	ldr	r2, [pc, #88]	; (800d0cc <vTaskSwitchContext+0xe0>)
 800d074:	4413      	add	r3, r2
 800d076:	60bb      	str	r3, [r7, #8]
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	685a      	ldr	r2, [r3, #4]
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	605a      	str	r2, [r3, #4]
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	685a      	ldr	r2, [r3, #4]
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	3308      	adds	r3, #8
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d104      	bne.n	800d098 <vTaskSwitchContext+0xac>
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	685a      	ldr	r2, [r3, #4]
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	605a      	str	r2, [r3, #4]
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	685b      	ldr	r3, [r3, #4]
 800d09c:	68db      	ldr	r3, [r3, #12]
 800d09e:	4a09      	ldr	r2, [pc, #36]	; (800d0c4 <vTaskSwitchContext+0xd8>)
 800d0a0:	6013      	str	r3, [r2, #0]
 800d0a2:	4a09      	ldr	r2, [pc, #36]	; (800d0c8 <vTaskSwitchContext+0xdc>)
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d0a8:	4b06      	ldr	r3, [pc, #24]	; (800d0c4 <vTaskSwitchContext+0xd8>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	3354      	adds	r3, #84	; 0x54
 800d0ae:	4a08      	ldr	r2, [pc, #32]	; (800d0d0 <vTaskSwitchContext+0xe4>)
 800d0b0:	6013      	str	r3, [r2, #0]
}
 800d0b2:	bf00      	nop
 800d0b4:	3710      	adds	r7, #16
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	bf00      	nop
 800d0bc:	24006c00 	.word	0x24006c00
 800d0c0:	24006bec 	.word	0x24006bec
 800d0c4:	24006704 	.word	0x24006704
 800d0c8:	24006be0 	.word	0x24006be0
 800d0cc:	24006708 	.word	0x24006708
 800d0d0:	2400008c 	.word	0x2400008c

0800d0d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d10a      	bne.n	800d0fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e8:	f383 8811 	msr	BASEPRI, r3
 800d0ec:	f3bf 8f6f 	isb	sy
 800d0f0:	f3bf 8f4f 	dsb	sy
 800d0f4:	60fb      	str	r3, [r7, #12]
}
 800d0f6:	bf00      	nop
 800d0f8:	e7fe      	b.n	800d0f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d0fa:	4b07      	ldr	r3, [pc, #28]	; (800d118 <vTaskPlaceOnEventList+0x44>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	3318      	adds	r3, #24
 800d100:	4619      	mov	r1, r3
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f7fe fa67 	bl	800b5d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d108:	2101      	movs	r1, #1
 800d10a:	6838      	ldr	r0, [r7, #0]
 800d10c:	f000 fb8e 	bl	800d82c <prvAddCurrentTaskToDelayedList>
}
 800d110:	bf00      	nop
 800d112:	3710      	adds	r7, #16
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}
 800d118:	24006704 	.word	0x24006704

0800d11c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b086      	sub	sp, #24
 800d120:	af00      	add	r7, sp, #0
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	60b9      	str	r1, [r7, #8]
 800d126:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d10a      	bne.n	800d144 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d132:	f383 8811 	msr	BASEPRI, r3
 800d136:	f3bf 8f6f 	isb	sy
 800d13a:	f3bf 8f4f 	dsb	sy
 800d13e:	617b      	str	r3, [r7, #20]
}
 800d140:	bf00      	nop
 800d142:	e7fe      	b.n	800d142 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d144:	4b0a      	ldr	r3, [pc, #40]	; (800d170 <vTaskPlaceOnEventListRestricted+0x54>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	3318      	adds	r3, #24
 800d14a:	4619      	mov	r1, r3
 800d14c:	68f8      	ldr	r0, [r7, #12]
 800d14e:	f7fe fa1e 	bl	800b58e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d002      	beq.n	800d15e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d158:	f04f 33ff 	mov.w	r3, #4294967295
 800d15c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d15e:	6879      	ldr	r1, [r7, #4]
 800d160:	68b8      	ldr	r0, [r7, #8]
 800d162:	f000 fb63 	bl	800d82c <prvAddCurrentTaskToDelayedList>
	}
 800d166:	bf00      	nop
 800d168:	3718      	adds	r7, #24
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	24006704 	.word	0x24006704

0800d174 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b086      	sub	sp, #24
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	68db      	ldr	r3, [r3, #12]
 800d182:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d10a      	bne.n	800d1a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18e:	f383 8811 	msr	BASEPRI, r3
 800d192:	f3bf 8f6f 	isb	sy
 800d196:	f3bf 8f4f 	dsb	sy
 800d19a:	60fb      	str	r3, [r7, #12]
}
 800d19c:	bf00      	nop
 800d19e:	e7fe      	b.n	800d19e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	3318      	adds	r3, #24
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7fe fa4f 	bl	800b648 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1aa:	4b1e      	ldr	r3, [pc, #120]	; (800d224 <xTaskRemoveFromEventList+0xb0>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d11d      	bne.n	800d1ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	3304      	adds	r3, #4
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7fe fa46 	bl	800b648 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1c0:	4b19      	ldr	r3, [pc, #100]	; (800d228 <xTaskRemoveFromEventList+0xb4>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d903      	bls.n	800d1d0 <xTaskRemoveFromEventList+0x5c>
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1cc:	4a16      	ldr	r2, [pc, #88]	; (800d228 <xTaskRemoveFromEventList+0xb4>)
 800d1ce:	6013      	str	r3, [r2, #0]
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1d4:	4613      	mov	r3, r2
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	4413      	add	r3, r2
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	4a13      	ldr	r2, [pc, #76]	; (800d22c <xTaskRemoveFromEventList+0xb8>)
 800d1de:	441a      	add	r2, r3
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	3304      	adds	r3, #4
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	4610      	mov	r0, r2
 800d1e8:	f7fe f9d1 	bl	800b58e <vListInsertEnd>
 800d1ec:	e005      	b.n	800d1fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	3318      	adds	r3, #24
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	480e      	ldr	r0, [pc, #56]	; (800d230 <xTaskRemoveFromEventList+0xbc>)
 800d1f6:	f7fe f9ca 	bl	800b58e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1fe:	4b0d      	ldr	r3, [pc, #52]	; (800d234 <xTaskRemoveFromEventList+0xc0>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d204:	429a      	cmp	r2, r3
 800d206:	d905      	bls.n	800d214 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d208:	2301      	movs	r3, #1
 800d20a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d20c:	4b0a      	ldr	r3, [pc, #40]	; (800d238 <xTaskRemoveFromEventList+0xc4>)
 800d20e:	2201      	movs	r2, #1
 800d210:	601a      	str	r2, [r3, #0]
 800d212:	e001      	b.n	800d218 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d214:	2300      	movs	r3, #0
 800d216:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d218:	697b      	ldr	r3, [r7, #20]
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3718      	adds	r7, #24
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	24006c00 	.word	0x24006c00
 800d228:	24006be0 	.word	0x24006be0
 800d22c:	24006708 	.word	0x24006708
 800d230:	24006b98 	.word	0x24006b98
 800d234:	24006704 	.word	0x24006704
 800d238:	24006bec 	.word	0x24006bec

0800d23c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d23c:	b480      	push	{r7}
 800d23e:	b083      	sub	sp, #12
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d244:	4b06      	ldr	r3, [pc, #24]	; (800d260 <vTaskInternalSetTimeOutState+0x24>)
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d24c:	4b05      	ldr	r3, [pc, #20]	; (800d264 <vTaskInternalSetTimeOutState+0x28>)
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	605a      	str	r2, [r3, #4]
}
 800d254:	bf00      	nop
 800d256:	370c      	adds	r7, #12
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr
 800d260:	24006bf0 	.word	0x24006bf0
 800d264:	24006bdc 	.word	0x24006bdc

0800d268 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b088      	sub	sp, #32
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d10a      	bne.n	800d28e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d27c:	f383 8811 	msr	BASEPRI, r3
 800d280:	f3bf 8f6f 	isb	sy
 800d284:	f3bf 8f4f 	dsb	sy
 800d288:	613b      	str	r3, [r7, #16]
}
 800d28a:	bf00      	nop
 800d28c:	e7fe      	b.n	800d28c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d10a      	bne.n	800d2aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d298:	f383 8811 	msr	BASEPRI, r3
 800d29c:	f3bf 8f6f 	isb	sy
 800d2a0:	f3bf 8f4f 	dsb	sy
 800d2a4:	60fb      	str	r3, [r7, #12]
}
 800d2a6:	bf00      	nop
 800d2a8:	e7fe      	b.n	800d2a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d2aa:	f000 ff8b 	bl	800e1c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d2ae:	4b1d      	ldr	r3, [pc, #116]	; (800d324 <xTaskCheckForTimeOut+0xbc>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	69ba      	ldr	r2, [r7, #24]
 800d2ba:	1ad3      	subs	r3, r2, r3
 800d2bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2c6:	d102      	bne.n	800d2ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	61fb      	str	r3, [r7, #28]
 800d2cc:	e023      	b.n	800d316 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681a      	ldr	r2, [r3, #0]
 800d2d2:	4b15      	ldr	r3, [pc, #84]	; (800d328 <xTaskCheckForTimeOut+0xc0>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	d007      	beq.n	800d2ea <xTaskCheckForTimeOut+0x82>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	69ba      	ldr	r2, [r7, #24]
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d302      	bcc.n	800d2ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	61fb      	str	r3, [r7, #28]
 800d2e8:	e015      	b.n	800d316 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	697a      	ldr	r2, [r7, #20]
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d20b      	bcs.n	800d30c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	681a      	ldr	r2, [r3, #0]
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	1ad2      	subs	r2, r2, r3
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f7ff ff9b 	bl	800d23c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d306:	2300      	movs	r3, #0
 800d308:	61fb      	str	r3, [r7, #28]
 800d30a:	e004      	b.n	800d316 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	2200      	movs	r2, #0
 800d310:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d312:	2301      	movs	r3, #1
 800d314:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d316:	f000 ff85 	bl	800e224 <vPortExitCritical>

	return xReturn;
 800d31a:	69fb      	ldr	r3, [r7, #28]
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3720      	adds	r7, #32
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}
 800d324:	24006bdc 	.word	0x24006bdc
 800d328:	24006bf0 	.word	0x24006bf0

0800d32c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d32c:	b480      	push	{r7}
 800d32e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d330:	4b03      	ldr	r3, [pc, #12]	; (800d340 <vTaskMissedYield+0x14>)
 800d332:	2201      	movs	r2, #1
 800d334:	601a      	str	r2, [r3, #0]
}
 800d336:	bf00      	nop
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr
 800d340:	24006bec 	.word	0x24006bec

0800d344 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b082      	sub	sp, #8
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d34c:	f000 f852 	bl	800d3f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d350:	4b06      	ldr	r3, [pc, #24]	; (800d36c <prvIdleTask+0x28>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2b01      	cmp	r3, #1
 800d356:	d9f9      	bls.n	800d34c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d358:	4b05      	ldr	r3, [pc, #20]	; (800d370 <prvIdleTask+0x2c>)
 800d35a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d35e:	601a      	str	r2, [r3, #0]
 800d360:	f3bf 8f4f 	dsb	sy
 800d364:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d368:	e7f0      	b.n	800d34c <prvIdleTask+0x8>
 800d36a:	bf00      	nop
 800d36c:	24006708 	.word	0x24006708
 800d370:	e000ed04 	.word	0xe000ed04

0800d374 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d37a:	2300      	movs	r3, #0
 800d37c:	607b      	str	r3, [r7, #4]
 800d37e:	e00c      	b.n	800d39a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d380:	687a      	ldr	r2, [r7, #4]
 800d382:	4613      	mov	r3, r2
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	4413      	add	r3, r2
 800d388:	009b      	lsls	r3, r3, #2
 800d38a:	4a12      	ldr	r2, [pc, #72]	; (800d3d4 <prvInitialiseTaskLists+0x60>)
 800d38c:	4413      	add	r3, r2
 800d38e:	4618      	mov	r0, r3
 800d390:	f7fe f8d0 	bl	800b534 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	3301      	adds	r3, #1
 800d398:	607b      	str	r3, [r7, #4]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2b37      	cmp	r3, #55	; 0x37
 800d39e:	d9ef      	bls.n	800d380 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d3a0:	480d      	ldr	r0, [pc, #52]	; (800d3d8 <prvInitialiseTaskLists+0x64>)
 800d3a2:	f7fe f8c7 	bl	800b534 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d3a6:	480d      	ldr	r0, [pc, #52]	; (800d3dc <prvInitialiseTaskLists+0x68>)
 800d3a8:	f7fe f8c4 	bl	800b534 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d3ac:	480c      	ldr	r0, [pc, #48]	; (800d3e0 <prvInitialiseTaskLists+0x6c>)
 800d3ae:	f7fe f8c1 	bl	800b534 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d3b2:	480c      	ldr	r0, [pc, #48]	; (800d3e4 <prvInitialiseTaskLists+0x70>)
 800d3b4:	f7fe f8be 	bl	800b534 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d3b8:	480b      	ldr	r0, [pc, #44]	; (800d3e8 <prvInitialiseTaskLists+0x74>)
 800d3ba:	f7fe f8bb 	bl	800b534 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d3be:	4b0b      	ldr	r3, [pc, #44]	; (800d3ec <prvInitialiseTaskLists+0x78>)
 800d3c0:	4a05      	ldr	r2, [pc, #20]	; (800d3d8 <prvInitialiseTaskLists+0x64>)
 800d3c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d3c4:	4b0a      	ldr	r3, [pc, #40]	; (800d3f0 <prvInitialiseTaskLists+0x7c>)
 800d3c6:	4a05      	ldr	r2, [pc, #20]	; (800d3dc <prvInitialiseTaskLists+0x68>)
 800d3c8:	601a      	str	r2, [r3, #0]
}
 800d3ca:	bf00      	nop
 800d3cc:	3708      	adds	r7, #8
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}
 800d3d2:	bf00      	nop
 800d3d4:	24006708 	.word	0x24006708
 800d3d8:	24006b68 	.word	0x24006b68
 800d3dc:	24006b7c 	.word	0x24006b7c
 800d3e0:	24006b98 	.word	0x24006b98
 800d3e4:	24006bac 	.word	0x24006bac
 800d3e8:	24006bc4 	.word	0x24006bc4
 800d3ec:	24006b90 	.word	0x24006b90
 800d3f0:	24006b94 	.word	0x24006b94

0800d3f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b082      	sub	sp, #8
 800d3f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d3fa:	e019      	b.n	800d430 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d3fc:	f000 fee2 	bl	800e1c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d400:	4b10      	ldr	r3, [pc, #64]	; (800d444 <prvCheckTasksWaitingTermination+0x50>)
 800d402:	68db      	ldr	r3, [r3, #12]
 800d404:	68db      	ldr	r3, [r3, #12]
 800d406:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	3304      	adds	r3, #4
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7fe f91b 	bl	800b648 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d412:	4b0d      	ldr	r3, [pc, #52]	; (800d448 <prvCheckTasksWaitingTermination+0x54>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	3b01      	subs	r3, #1
 800d418:	4a0b      	ldr	r2, [pc, #44]	; (800d448 <prvCheckTasksWaitingTermination+0x54>)
 800d41a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d41c:	4b0b      	ldr	r3, [pc, #44]	; (800d44c <prvCheckTasksWaitingTermination+0x58>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	3b01      	subs	r3, #1
 800d422:	4a0a      	ldr	r2, [pc, #40]	; (800d44c <prvCheckTasksWaitingTermination+0x58>)
 800d424:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d426:	f000 fefd 	bl	800e224 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 f810 	bl	800d450 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d430:	4b06      	ldr	r3, [pc, #24]	; (800d44c <prvCheckTasksWaitingTermination+0x58>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d1e1      	bne.n	800d3fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d438:	bf00      	nop
 800d43a:	bf00      	nop
 800d43c:	3708      	adds	r7, #8
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	24006bac 	.word	0x24006bac
 800d448:	24006bd8 	.word	0x24006bd8
 800d44c:	24006bc0 	.word	0x24006bc0

0800d450 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d450:	b580      	push	{r7, lr}
 800d452:	b084      	sub	sp, #16
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	3354      	adds	r3, #84	; 0x54
 800d45c:	4618      	mov	r0, r3
 800d45e:	f00c fe71 	bl	801a144 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d108      	bne.n	800d47e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d470:	4618      	mov	r0, r3
 800d472:	f001 f895 	bl	800e5a0 <vPortFree>
				vPortFree( pxTCB );
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f001 f892 	bl	800e5a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d47c:	e018      	b.n	800d4b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d484:	2b01      	cmp	r3, #1
 800d486:	d103      	bne.n	800d490 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f001 f889 	bl	800e5a0 <vPortFree>
	}
 800d48e:	e00f      	b.n	800d4b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d496:	2b02      	cmp	r3, #2
 800d498:	d00a      	beq.n	800d4b0 <prvDeleteTCB+0x60>
	__asm volatile
 800d49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49e:	f383 8811 	msr	BASEPRI, r3
 800d4a2:	f3bf 8f6f 	isb	sy
 800d4a6:	f3bf 8f4f 	dsb	sy
 800d4aa:	60fb      	str	r3, [r7, #12]
}
 800d4ac:	bf00      	nop
 800d4ae:	e7fe      	b.n	800d4ae <prvDeleteTCB+0x5e>
	}
 800d4b0:	bf00      	nop
 800d4b2:	3710      	adds	r7, #16
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b083      	sub	sp, #12
 800d4bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4be:	4b0c      	ldr	r3, [pc, #48]	; (800d4f0 <prvResetNextTaskUnblockTime+0x38>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d104      	bne.n	800d4d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d4c8:	4b0a      	ldr	r3, [pc, #40]	; (800d4f4 <prvResetNextTaskUnblockTime+0x3c>)
 800d4ca:	f04f 32ff 	mov.w	r2, #4294967295
 800d4ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d4d0:	e008      	b.n	800d4e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4d2:	4b07      	ldr	r3, [pc, #28]	; (800d4f0 <prvResetNextTaskUnblockTime+0x38>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	68db      	ldr	r3, [r3, #12]
 800d4d8:	68db      	ldr	r3, [r3, #12]
 800d4da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	4a04      	ldr	r2, [pc, #16]	; (800d4f4 <prvResetNextTaskUnblockTime+0x3c>)
 800d4e2:	6013      	str	r3, [r2, #0]
}
 800d4e4:	bf00      	nop
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr
 800d4f0:	24006b90 	.word	0x24006b90
 800d4f4:	24006bf8 	.word	0x24006bf8

0800d4f8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b083      	sub	sp, #12
 800d4fc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d4fe:	4b05      	ldr	r3, [pc, #20]	; (800d514 <xTaskGetCurrentTaskHandle+0x1c>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d504:	687b      	ldr	r3, [r7, #4]
	}
 800d506:	4618      	mov	r0, r3
 800d508:	370c      	adds	r7, #12
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr
 800d512:	bf00      	nop
 800d514:	24006704 	.word	0x24006704

0800d518 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d518:	b480      	push	{r7}
 800d51a:	b083      	sub	sp, #12
 800d51c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d51e:	4b0b      	ldr	r3, [pc, #44]	; (800d54c <xTaskGetSchedulerState+0x34>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d102      	bne.n	800d52c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d526:	2301      	movs	r3, #1
 800d528:	607b      	str	r3, [r7, #4]
 800d52a:	e008      	b.n	800d53e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d52c:	4b08      	ldr	r3, [pc, #32]	; (800d550 <xTaskGetSchedulerState+0x38>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d102      	bne.n	800d53a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d534:	2302      	movs	r3, #2
 800d536:	607b      	str	r3, [r7, #4]
 800d538:	e001      	b.n	800d53e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d53a:	2300      	movs	r3, #0
 800d53c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d53e:	687b      	ldr	r3, [r7, #4]
	}
 800d540:	4618      	mov	r0, r3
 800d542:	370c      	adds	r7, #12
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr
 800d54c:	24006be4 	.word	0x24006be4
 800d550:	24006c00 	.word	0x24006c00

0800d554 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d560:	2300      	movs	r3, #0
 800d562:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d051      	beq.n	800d60e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d56e:	4b2a      	ldr	r3, [pc, #168]	; (800d618 <xTaskPriorityInherit+0xc4>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d574:	429a      	cmp	r2, r3
 800d576:	d241      	bcs.n	800d5fc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	699b      	ldr	r3, [r3, #24]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	db06      	blt.n	800d58e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d580:	4b25      	ldr	r3, [pc, #148]	; (800d618 <xTaskPriorityInherit+0xc4>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d586:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	6959      	ldr	r1, [r3, #20]
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d596:	4613      	mov	r3, r2
 800d598:	009b      	lsls	r3, r3, #2
 800d59a:	4413      	add	r3, r2
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	4a1f      	ldr	r2, [pc, #124]	; (800d61c <xTaskPriorityInherit+0xc8>)
 800d5a0:	4413      	add	r3, r2
 800d5a2:	4299      	cmp	r1, r3
 800d5a4:	d122      	bne.n	800d5ec <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	3304      	adds	r3, #4
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7fe f84c 	bl	800b648 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d5b0:	4b19      	ldr	r3, [pc, #100]	; (800d618 <xTaskPriorityInherit+0xc4>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5be:	4b18      	ldr	r3, [pc, #96]	; (800d620 <xTaskPriorityInherit+0xcc>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d903      	bls.n	800d5ce <xTaskPriorityInherit+0x7a>
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ca:	4a15      	ldr	r2, [pc, #84]	; (800d620 <xTaskPriorityInherit+0xcc>)
 800d5cc:	6013      	str	r3, [r2, #0]
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5d2:	4613      	mov	r3, r2
 800d5d4:	009b      	lsls	r3, r3, #2
 800d5d6:	4413      	add	r3, r2
 800d5d8:	009b      	lsls	r3, r3, #2
 800d5da:	4a10      	ldr	r2, [pc, #64]	; (800d61c <xTaskPriorityInherit+0xc8>)
 800d5dc:	441a      	add	r2, r3
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	3304      	adds	r3, #4
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	4610      	mov	r0, r2
 800d5e6:	f7fd ffd2 	bl	800b58e <vListInsertEnd>
 800d5ea:	e004      	b.n	800d5f6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d5ec:	4b0a      	ldr	r3, [pc, #40]	; (800d618 <xTaskPriorityInherit+0xc4>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	60fb      	str	r3, [r7, #12]
 800d5fa:	e008      	b.n	800d60e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d600:	4b05      	ldr	r3, [pc, #20]	; (800d618 <xTaskPriorityInherit+0xc4>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d606:	429a      	cmp	r2, r3
 800d608:	d201      	bcs.n	800d60e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d60a:	2301      	movs	r3, #1
 800d60c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d60e:	68fb      	ldr	r3, [r7, #12]
	}
 800d610:	4618      	mov	r0, r3
 800d612:	3710      	adds	r7, #16
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}
 800d618:	24006704 	.word	0x24006704
 800d61c:	24006708 	.word	0x24006708
 800d620:	24006be0 	.word	0x24006be0

0800d624 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d624:	b580      	push	{r7, lr}
 800d626:	b086      	sub	sp, #24
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d630:	2300      	movs	r3, #0
 800d632:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d056      	beq.n	800d6e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d63a:	4b2e      	ldr	r3, [pc, #184]	; (800d6f4 <xTaskPriorityDisinherit+0xd0>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	693a      	ldr	r2, [r7, #16]
 800d640:	429a      	cmp	r2, r3
 800d642:	d00a      	beq.n	800d65a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d648:	f383 8811 	msr	BASEPRI, r3
 800d64c:	f3bf 8f6f 	isb	sy
 800d650:	f3bf 8f4f 	dsb	sy
 800d654:	60fb      	str	r3, [r7, #12]
}
 800d656:	bf00      	nop
 800d658:	e7fe      	b.n	800d658 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d10a      	bne.n	800d678 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d666:	f383 8811 	msr	BASEPRI, r3
 800d66a:	f3bf 8f6f 	isb	sy
 800d66e:	f3bf 8f4f 	dsb	sy
 800d672:	60bb      	str	r3, [r7, #8]
}
 800d674:	bf00      	nop
 800d676:	e7fe      	b.n	800d676 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d67c:	1e5a      	subs	r2, r3, #1
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d02c      	beq.n	800d6e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d692:	2b00      	cmp	r3, #0
 800d694:	d128      	bne.n	800d6e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d696:	693b      	ldr	r3, [r7, #16]
 800d698:	3304      	adds	r3, #4
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7fd ffd4 	bl	800b648 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6b8:	4b0f      	ldr	r3, [pc, #60]	; (800d6f8 <xTaskPriorityDisinherit+0xd4>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d903      	bls.n	800d6c8 <xTaskPriorityDisinherit+0xa4>
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c4:	4a0c      	ldr	r2, [pc, #48]	; (800d6f8 <xTaskPriorityDisinherit+0xd4>)
 800d6c6:	6013      	str	r3, [r2, #0]
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6cc:	4613      	mov	r3, r2
 800d6ce:	009b      	lsls	r3, r3, #2
 800d6d0:	4413      	add	r3, r2
 800d6d2:	009b      	lsls	r3, r3, #2
 800d6d4:	4a09      	ldr	r2, [pc, #36]	; (800d6fc <xTaskPriorityDisinherit+0xd8>)
 800d6d6:	441a      	add	r2, r3
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	3304      	adds	r3, #4
 800d6dc:	4619      	mov	r1, r3
 800d6de:	4610      	mov	r0, r2
 800d6e0:	f7fd ff55 	bl	800b58e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d6e8:	697b      	ldr	r3, [r7, #20]
	}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3718      	adds	r7, #24
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	24006704 	.word	0x24006704
 800d6f8:	24006be0 	.word	0x24006be0
 800d6fc:	24006708 	.word	0x24006708

0800d700 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d700:	b580      	push	{r7, lr}
 800d702:	b088      	sub	sp, #32
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d70e:	2301      	movs	r3, #1
 800d710:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d06a      	beq.n	800d7ee <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d718:	69bb      	ldr	r3, [r7, #24]
 800d71a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d10a      	bne.n	800d736 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d724:	f383 8811 	msr	BASEPRI, r3
 800d728:	f3bf 8f6f 	isb	sy
 800d72c:	f3bf 8f4f 	dsb	sy
 800d730:	60fb      	str	r3, [r7, #12]
}
 800d732:	bf00      	nop
 800d734:	e7fe      	b.n	800d734 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d736:	69bb      	ldr	r3, [r7, #24]
 800d738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d73a:	683a      	ldr	r2, [r7, #0]
 800d73c:	429a      	cmp	r2, r3
 800d73e:	d902      	bls.n	800d746 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	61fb      	str	r3, [r7, #28]
 800d744:	e002      	b.n	800d74c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d746:	69bb      	ldr	r3, [r7, #24]
 800d748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d74a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d74c:	69bb      	ldr	r3, [r7, #24]
 800d74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d750:	69fa      	ldr	r2, [r7, #28]
 800d752:	429a      	cmp	r2, r3
 800d754:	d04b      	beq.n	800d7ee <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d75a:	697a      	ldr	r2, [r7, #20]
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d146      	bne.n	800d7ee <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d760:	4b25      	ldr	r3, [pc, #148]	; (800d7f8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	69ba      	ldr	r2, [r7, #24]
 800d766:	429a      	cmp	r2, r3
 800d768:	d10a      	bne.n	800d780 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d76e:	f383 8811 	msr	BASEPRI, r3
 800d772:	f3bf 8f6f 	isb	sy
 800d776:	f3bf 8f4f 	dsb	sy
 800d77a:	60bb      	str	r3, [r7, #8]
}
 800d77c:	bf00      	nop
 800d77e:	e7fe      	b.n	800d77e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d784:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d786:	69bb      	ldr	r3, [r7, #24]
 800d788:	69fa      	ldr	r2, [r7, #28]
 800d78a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	699b      	ldr	r3, [r3, #24]
 800d790:	2b00      	cmp	r3, #0
 800d792:	db04      	blt.n	800d79e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d79a:	69bb      	ldr	r3, [r7, #24]
 800d79c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d79e:	69bb      	ldr	r3, [r7, #24]
 800d7a0:	6959      	ldr	r1, [r3, #20]
 800d7a2:	693a      	ldr	r2, [r7, #16]
 800d7a4:	4613      	mov	r3, r2
 800d7a6:	009b      	lsls	r3, r3, #2
 800d7a8:	4413      	add	r3, r2
 800d7aa:	009b      	lsls	r3, r3, #2
 800d7ac:	4a13      	ldr	r2, [pc, #76]	; (800d7fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d7ae:	4413      	add	r3, r2
 800d7b0:	4299      	cmp	r1, r3
 800d7b2:	d11c      	bne.n	800d7ee <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7b4:	69bb      	ldr	r3, [r7, #24]
 800d7b6:	3304      	adds	r3, #4
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7fd ff45 	bl	800b648 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d7be:	69bb      	ldr	r3, [r7, #24]
 800d7c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7c2:	4b0f      	ldr	r3, [pc, #60]	; (800d800 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d903      	bls.n	800d7d2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d7ca:	69bb      	ldr	r3, [r7, #24]
 800d7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ce:	4a0c      	ldr	r2, [pc, #48]	; (800d800 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d7d0:	6013      	str	r3, [r2, #0]
 800d7d2:	69bb      	ldr	r3, [r7, #24]
 800d7d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7d6:	4613      	mov	r3, r2
 800d7d8:	009b      	lsls	r3, r3, #2
 800d7da:	4413      	add	r3, r2
 800d7dc:	009b      	lsls	r3, r3, #2
 800d7de:	4a07      	ldr	r2, [pc, #28]	; (800d7fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d7e0:	441a      	add	r2, r3
 800d7e2:	69bb      	ldr	r3, [r7, #24]
 800d7e4:	3304      	adds	r3, #4
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	4610      	mov	r0, r2
 800d7ea:	f7fd fed0 	bl	800b58e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d7ee:	bf00      	nop
 800d7f0:	3720      	adds	r7, #32
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}
 800d7f6:	bf00      	nop
 800d7f8:	24006704 	.word	0x24006704
 800d7fc:	24006708 	.word	0x24006708
 800d800:	24006be0 	.word	0x24006be0

0800d804 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d804:	b480      	push	{r7}
 800d806:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d808:	4b07      	ldr	r3, [pc, #28]	; (800d828 <pvTaskIncrementMutexHeldCount+0x24>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d004      	beq.n	800d81a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d810:	4b05      	ldr	r3, [pc, #20]	; (800d828 <pvTaskIncrementMutexHeldCount+0x24>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d816:	3201      	adds	r2, #1
 800d818:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d81a:	4b03      	ldr	r3, [pc, #12]	; (800d828 <pvTaskIncrementMutexHeldCount+0x24>)
 800d81c:	681b      	ldr	r3, [r3, #0]
	}
 800d81e:	4618      	mov	r0, r3
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr
 800d828:	24006704 	.word	0x24006704

0800d82c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d836:	4b21      	ldr	r3, [pc, #132]	; (800d8bc <prvAddCurrentTaskToDelayedList+0x90>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d83c:	4b20      	ldr	r3, [pc, #128]	; (800d8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	3304      	adds	r3, #4
 800d842:	4618      	mov	r0, r3
 800d844:	f7fd ff00 	bl	800b648 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d84e:	d10a      	bne.n	800d866 <prvAddCurrentTaskToDelayedList+0x3a>
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d007      	beq.n	800d866 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d856:	4b1a      	ldr	r3, [pc, #104]	; (800d8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	3304      	adds	r3, #4
 800d85c:	4619      	mov	r1, r3
 800d85e:	4819      	ldr	r0, [pc, #100]	; (800d8c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800d860:	f7fd fe95 	bl	800b58e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d864:	e026      	b.n	800d8b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d866:	68fa      	ldr	r2, [r7, #12]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	4413      	add	r3, r2
 800d86c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d86e:	4b14      	ldr	r3, [pc, #80]	; (800d8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	68ba      	ldr	r2, [r7, #8]
 800d874:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d876:	68ba      	ldr	r2, [r7, #8]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d209      	bcs.n	800d892 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d87e:	4b12      	ldr	r3, [pc, #72]	; (800d8c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	4b0f      	ldr	r3, [pc, #60]	; (800d8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	3304      	adds	r3, #4
 800d888:	4619      	mov	r1, r3
 800d88a:	4610      	mov	r0, r2
 800d88c:	f7fd fea3 	bl	800b5d6 <vListInsert>
}
 800d890:	e010      	b.n	800d8b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d892:	4b0e      	ldr	r3, [pc, #56]	; (800d8cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	4b0a      	ldr	r3, [pc, #40]	; (800d8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	3304      	adds	r3, #4
 800d89c:	4619      	mov	r1, r3
 800d89e:	4610      	mov	r0, r2
 800d8a0:	f7fd fe99 	bl	800b5d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d8a4:	4b0a      	ldr	r3, [pc, #40]	; (800d8d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	68ba      	ldr	r2, [r7, #8]
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d202      	bcs.n	800d8b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d8ae:	4a08      	ldr	r2, [pc, #32]	; (800d8d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	6013      	str	r3, [r2, #0]
}
 800d8b4:	bf00      	nop
 800d8b6:	3710      	adds	r7, #16
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	24006bdc 	.word	0x24006bdc
 800d8c0:	24006704 	.word	0x24006704
 800d8c4:	24006bc4 	.word	0x24006bc4
 800d8c8:	24006b94 	.word	0x24006b94
 800d8cc:	24006b90 	.word	0x24006b90
 800d8d0:	24006bf8 	.word	0x24006bf8

0800d8d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b08a      	sub	sp, #40	; 0x28
 800d8d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d8de:	f000 fb07 	bl	800def0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d8e2:	4b1c      	ldr	r3, [pc, #112]	; (800d954 <xTimerCreateTimerTask+0x80>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d021      	beq.n	800d92e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d8f2:	1d3a      	adds	r2, r7, #4
 800d8f4:	f107 0108 	add.w	r1, r7, #8
 800d8f8:	f107 030c 	add.w	r3, r7, #12
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7fd fdff 	bl	800b500 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d902:	6879      	ldr	r1, [r7, #4]
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	68fa      	ldr	r2, [r7, #12]
 800d908:	9202      	str	r2, [sp, #8]
 800d90a:	9301      	str	r3, [sp, #4]
 800d90c:	2302      	movs	r3, #2
 800d90e:	9300      	str	r3, [sp, #0]
 800d910:	2300      	movs	r3, #0
 800d912:	460a      	mov	r2, r1
 800d914:	4910      	ldr	r1, [pc, #64]	; (800d958 <xTimerCreateTimerTask+0x84>)
 800d916:	4811      	ldr	r0, [pc, #68]	; (800d95c <xTimerCreateTimerTask+0x88>)
 800d918:	f7fe ff84 	bl	800c824 <xTaskCreateStatic>
 800d91c:	4603      	mov	r3, r0
 800d91e:	4a10      	ldr	r2, [pc, #64]	; (800d960 <xTimerCreateTimerTask+0x8c>)
 800d920:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d922:	4b0f      	ldr	r3, [pc, #60]	; (800d960 <xTimerCreateTimerTask+0x8c>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d001      	beq.n	800d92e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d92a:	2301      	movs	r3, #1
 800d92c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d10a      	bne.n	800d94a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d938:	f383 8811 	msr	BASEPRI, r3
 800d93c:	f3bf 8f6f 	isb	sy
 800d940:	f3bf 8f4f 	dsb	sy
 800d944:	613b      	str	r3, [r7, #16]
}
 800d946:	bf00      	nop
 800d948:	e7fe      	b.n	800d948 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d94a:	697b      	ldr	r3, [r7, #20]
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3718      	adds	r7, #24
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}
 800d954:	24006c34 	.word	0x24006c34
 800d958:	0801b06c 	.word	0x0801b06c
 800d95c:	0800da99 	.word	0x0800da99
 800d960:	24006c38 	.word	0x24006c38

0800d964 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b08a      	sub	sp, #40	; 0x28
 800d968:	af00      	add	r7, sp, #0
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	60b9      	str	r1, [r7, #8]
 800d96e:	607a      	str	r2, [r7, #4]
 800d970:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d972:	2300      	movs	r3, #0
 800d974:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d10a      	bne.n	800d992 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d980:	f383 8811 	msr	BASEPRI, r3
 800d984:	f3bf 8f6f 	isb	sy
 800d988:	f3bf 8f4f 	dsb	sy
 800d98c:	623b      	str	r3, [r7, #32]
}
 800d98e:	bf00      	nop
 800d990:	e7fe      	b.n	800d990 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d992:	4b1a      	ldr	r3, [pc, #104]	; (800d9fc <xTimerGenericCommand+0x98>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d02a      	beq.n	800d9f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	2b05      	cmp	r3, #5
 800d9aa:	dc18      	bgt.n	800d9de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d9ac:	f7ff fdb4 	bl	800d518 <xTaskGetSchedulerState>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	2b02      	cmp	r3, #2
 800d9b4:	d109      	bne.n	800d9ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d9b6:	4b11      	ldr	r3, [pc, #68]	; (800d9fc <xTimerGenericCommand+0x98>)
 800d9b8:	6818      	ldr	r0, [r3, #0]
 800d9ba:	f107 0110 	add.w	r1, r7, #16
 800d9be:	2300      	movs	r3, #0
 800d9c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9c2:	f7fe f8c9 	bl	800bb58 <xQueueGenericSend>
 800d9c6:	6278      	str	r0, [r7, #36]	; 0x24
 800d9c8:	e012      	b.n	800d9f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d9ca:	4b0c      	ldr	r3, [pc, #48]	; (800d9fc <xTimerGenericCommand+0x98>)
 800d9cc:	6818      	ldr	r0, [r3, #0]
 800d9ce:	f107 0110 	add.w	r1, r7, #16
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	f7fe f8bf 	bl	800bb58 <xQueueGenericSend>
 800d9da:	6278      	str	r0, [r7, #36]	; 0x24
 800d9dc:	e008      	b.n	800d9f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d9de:	4b07      	ldr	r3, [pc, #28]	; (800d9fc <xTimerGenericCommand+0x98>)
 800d9e0:	6818      	ldr	r0, [r3, #0]
 800d9e2:	f107 0110 	add.w	r1, r7, #16
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	683a      	ldr	r2, [r7, #0]
 800d9ea:	f7fe f9b3 	bl	800bd54 <xQueueGenericSendFromISR>
 800d9ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3728      	adds	r7, #40	; 0x28
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	24006c34 	.word	0x24006c34

0800da00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b088      	sub	sp, #32
 800da04:	af02      	add	r7, sp, #8
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da0a:	4b22      	ldr	r3, [pc, #136]	; (800da94 <prvProcessExpiredTimer+0x94>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	68db      	ldr	r3, [r3, #12]
 800da10:	68db      	ldr	r3, [r3, #12]
 800da12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	3304      	adds	r3, #4
 800da18:	4618      	mov	r0, r3
 800da1a:	f7fd fe15 	bl	800b648 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da24:	f003 0304 	and.w	r3, r3, #4
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d022      	beq.n	800da72 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	699a      	ldr	r2, [r3, #24]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	18d1      	adds	r1, r2, r3
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	683a      	ldr	r2, [r7, #0]
 800da38:	6978      	ldr	r0, [r7, #20]
 800da3a:	f000 f8d1 	bl	800dbe0 <prvInsertTimerInActiveList>
 800da3e:	4603      	mov	r3, r0
 800da40:	2b00      	cmp	r3, #0
 800da42:	d01f      	beq.n	800da84 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800da44:	2300      	movs	r3, #0
 800da46:	9300      	str	r3, [sp, #0]
 800da48:	2300      	movs	r3, #0
 800da4a:	687a      	ldr	r2, [r7, #4]
 800da4c:	2100      	movs	r1, #0
 800da4e:	6978      	ldr	r0, [r7, #20]
 800da50:	f7ff ff88 	bl	800d964 <xTimerGenericCommand>
 800da54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d113      	bne.n	800da84 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800da5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da60:	f383 8811 	msr	BASEPRI, r3
 800da64:	f3bf 8f6f 	isb	sy
 800da68:	f3bf 8f4f 	dsb	sy
 800da6c:	60fb      	str	r3, [r7, #12]
}
 800da6e:	bf00      	nop
 800da70:	e7fe      	b.n	800da70 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da78:	f023 0301 	bic.w	r3, r3, #1
 800da7c:	b2da      	uxtb	r2, r3
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	6a1b      	ldr	r3, [r3, #32]
 800da88:	6978      	ldr	r0, [r7, #20]
 800da8a:	4798      	blx	r3
}
 800da8c:	bf00      	nop
 800da8e:	3718      	adds	r7, #24
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}
 800da94:	24006c2c 	.word	0x24006c2c

0800da98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800daa0:	f107 0308 	add.w	r3, r7, #8
 800daa4:	4618      	mov	r0, r3
 800daa6:	f000 f857 	bl	800db58 <prvGetNextExpireTime>
 800daaa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	4619      	mov	r1, r3
 800dab0:	68f8      	ldr	r0, [r7, #12]
 800dab2:	f000 f803 	bl	800dabc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dab6:	f000 f8d5 	bl	800dc64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800daba:	e7f1      	b.n	800daa0 <prvTimerTask+0x8>

0800dabc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dac6:	f7ff f909 	bl	800ccdc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800daca:	f107 0308 	add.w	r3, r7, #8
 800dace:	4618      	mov	r0, r3
 800dad0:	f000 f866 	bl	800dba0 <prvSampleTimeNow>
 800dad4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d130      	bne.n	800db3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d10a      	bne.n	800daf8 <prvProcessTimerOrBlockTask+0x3c>
 800dae2:	687a      	ldr	r2, [r7, #4]
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d806      	bhi.n	800daf8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800daea:	f7ff f905 	bl	800ccf8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800daee:	68f9      	ldr	r1, [r7, #12]
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f7ff ff85 	bl	800da00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800daf6:	e024      	b.n	800db42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d008      	beq.n	800db10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dafe:	4b13      	ldr	r3, [pc, #76]	; (800db4c <prvProcessTimerOrBlockTask+0x90>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d101      	bne.n	800db0c <prvProcessTimerOrBlockTask+0x50>
 800db08:	2301      	movs	r3, #1
 800db0a:	e000      	b.n	800db0e <prvProcessTimerOrBlockTask+0x52>
 800db0c:	2300      	movs	r3, #0
 800db0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800db10:	4b0f      	ldr	r3, [pc, #60]	; (800db50 <prvProcessTimerOrBlockTask+0x94>)
 800db12:	6818      	ldr	r0, [r3, #0]
 800db14:	687a      	ldr	r2, [r7, #4]
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	1ad3      	subs	r3, r2, r3
 800db1a:	683a      	ldr	r2, [r7, #0]
 800db1c:	4619      	mov	r1, r3
 800db1e:	f7fe fe4d 	bl	800c7bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800db22:	f7ff f8e9 	bl	800ccf8 <xTaskResumeAll>
 800db26:	4603      	mov	r3, r0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d10a      	bne.n	800db42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800db2c:	4b09      	ldr	r3, [pc, #36]	; (800db54 <prvProcessTimerOrBlockTask+0x98>)
 800db2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db32:	601a      	str	r2, [r3, #0]
 800db34:	f3bf 8f4f 	dsb	sy
 800db38:	f3bf 8f6f 	isb	sy
}
 800db3c:	e001      	b.n	800db42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800db3e:	f7ff f8db 	bl	800ccf8 <xTaskResumeAll>
}
 800db42:	bf00      	nop
 800db44:	3710      	adds	r7, #16
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
 800db4a:	bf00      	nop
 800db4c:	24006c30 	.word	0x24006c30
 800db50:	24006c34 	.word	0x24006c34
 800db54:	e000ed04 	.word	0xe000ed04

0800db58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800db58:	b480      	push	{r7}
 800db5a:	b085      	sub	sp, #20
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800db60:	4b0e      	ldr	r3, [pc, #56]	; (800db9c <prvGetNextExpireTime+0x44>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d101      	bne.n	800db6e <prvGetNextExpireTime+0x16>
 800db6a:	2201      	movs	r2, #1
 800db6c:	e000      	b.n	800db70 <prvGetNextExpireTime+0x18>
 800db6e:	2200      	movs	r2, #0
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d105      	bne.n	800db88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db7c:	4b07      	ldr	r3, [pc, #28]	; (800db9c <prvGetNextExpireTime+0x44>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	68db      	ldr	r3, [r3, #12]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	60fb      	str	r3, [r7, #12]
 800db86:	e001      	b.n	800db8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800db88:	2300      	movs	r3, #0
 800db8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800db8c:	68fb      	ldr	r3, [r7, #12]
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3714      	adds	r7, #20
 800db92:	46bd      	mov	sp, r7
 800db94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db98:	4770      	bx	lr
 800db9a:	bf00      	nop
 800db9c:	24006c2c 	.word	0x24006c2c

0800dba0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b084      	sub	sp, #16
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dba8:	f7ff f944 	bl	800ce34 <xTaskGetTickCount>
 800dbac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dbae:	4b0b      	ldr	r3, [pc, #44]	; (800dbdc <prvSampleTimeNow+0x3c>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	68fa      	ldr	r2, [r7, #12]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d205      	bcs.n	800dbc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dbb8:	f000 f936 	bl	800de28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	601a      	str	r2, [r3, #0]
 800dbc2:	e002      	b.n	800dbca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dbca:	4a04      	ldr	r2, [pc, #16]	; (800dbdc <prvSampleTimeNow+0x3c>)
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3710      	adds	r7, #16
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	24006c3c 	.word	0x24006c3c

0800dbe0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b086      	sub	sp, #24
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	60f8      	str	r0, [r7, #12]
 800dbe8:	60b9      	str	r1, [r7, #8]
 800dbea:	607a      	str	r2, [r7, #4]
 800dbec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	68ba      	ldr	r2, [r7, #8]
 800dbf6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	68fa      	ldr	r2, [r7, #12]
 800dbfc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dbfe:	68ba      	ldr	r2, [r7, #8]
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d812      	bhi.n	800dc2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc06:	687a      	ldr	r2, [r7, #4]
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	1ad2      	subs	r2, r2, r3
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	699b      	ldr	r3, [r3, #24]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d302      	bcc.n	800dc1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dc14:	2301      	movs	r3, #1
 800dc16:	617b      	str	r3, [r7, #20]
 800dc18:	e01b      	b.n	800dc52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dc1a:	4b10      	ldr	r3, [pc, #64]	; (800dc5c <prvInsertTimerInActiveList+0x7c>)
 800dc1c:	681a      	ldr	r2, [r3, #0]
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	3304      	adds	r3, #4
 800dc22:	4619      	mov	r1, r3
 800dc24:	4610      	mov	r0, r2
 800dc26:	f7fd fcd6 	bl	800b5d6 <vListInsert>
 800dc2a:	e012      	b.n	800dc52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dc2c:	687a      	ldr	r2, [r7, #4]
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d206      	bcs.n	800dc42 <prvInsertTimerInActiveList+0x62>
 800dc34:	68ba      	ldr	r2, [r7, #8]
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d302      	bcc.n	800dc42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	617b      	str	r3, [r7, #20]
 800dc40:	e007      	b.n	800dc52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dc42:	4b07      	ldr	r3, [pc, #28]	; (800dc60 <prvInsertTimerInActiveList+0x80>)
 800dc44:	681a      	ldr	r2, [r3, #0]
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	3304      	adds	r3, #4
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	4610      	mov	r0, r2
 800dc4e:	f7fd fcc2 	bl	800b5d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dc52:	697b      	ldr	r3, [r7, #20]
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3718      	adds	r7, #24
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}
 800dc5c:	24006c30 	.word	0x24006c30
 800dc60:	24006c2c 	.word	0x24006c2c

0800dc64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b08e      	sub	sp, #56	; 0x38
 800dc68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc6a:	e0ca      	b.n	800de02 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	da18      	bge.n	800dca4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dc72:	1d3b      	adds	r3, r7, #4
 800dc74:	3304      	adds	r3, #4
 800dc76:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d10a      	bne.n	800dc94 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc82:	f383 8811 	msr	BASEPRI, r3
 800dc86:	f3bf 8f6f 	isb	sy
 800dc8a:	f3bf 8f4f 	dsb	sy
 800dc8e:	61fb      	str	r3, [r7, #28]
}
 800dc90:	bf00      	nop
 800dc92:	e7fe      	b.n	800dc92 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc9a:	6850      	ldr	r0, [r2, #4]
 800dc9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc9e:	6892      	ldr	r2, [r2, #8]
 800dca0:	4611      	mov	r1, r2
 800dca2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	f2c0 80ab 	blt.w	800de02 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dcb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb2:	695b      	ldr	r3, [r3, #20]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d004      	beq.n	800dcc2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcba:	3304      	adds	r3, #4
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7fd fcc3 	bl	800b648 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dcc2:	463b      	mov	r3, r7
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7ff ff6b 	bl	800dba0 <prvSampleTimeNow>
 800dcca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2b09      	cmp	r3, #9
 800dcd0:	f200 8096 	bhi.w	800de00 <prvProcessReceivedCommands+0x19c>
 800dcd4:	a201      	add	r2, pc, #4	; (adr r2, 800dcdc <prvProcessReceivedCommands+0x78>)
 800dcd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcda:	bf00      	nop
 800dcdc:	0800dd05 	.word	0x0800dd05
 800dce0:	0800dd05 	.word	0x0800dd05
 800dce4:	0800dd05 	.word	0x0800dd05
 800dce8:	0800dd79 	.word	0x0800dd79
 800dcec:	0800dd8d 	.word	0x0800dd8d
 800dcf0:	0800ddd7 	.word	0x0800ddd7
 800dcf4:	0800dd05 	.word	0x0800dd05
 800dcf8:	0800dd05 	.word	0x0800dd05
 800dcfc:	0800dd79 	.word	0x0800dd79
 800dd00:	0800dd8d 	.word	0x0800dd8d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd0a:	f043 0301 	orr.w	r3, r3, #1
 800dd0e:	b2da      	uxtb	r2, r3
 800dd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dd16:	68ba      	ldr	r2, [r7, #8]
 800dd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd1a:	699b      	ldr	r3, [r3, #24]
 800dd1c:	18d1      	adds	r1, r2, r3
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd24:	f7ff ff5c 	bl	800dbe0 <prvInsertTimerInActiveList>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d069      	beq.n	800de02 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd30:	6a1b      	ldr	r3, [r3, #32]
 800dd32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd3c:	f003 0304 	and.w	r3, r3, #4
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d05e      	beq.n	800de02 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dd44:	68ba      	ldr	r2, [r7, #8]
 800dd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd48:	699b      	ldr	r3, [r3, #24]
 800dd4a:	441a      	add	r2, r3
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	9300      	str	r3, [sp, #0]
 800dd50:	2300      	movs	r3, #0
 800dd52:	2100      	movs	r1, #0
 800dd54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd56:	f7ff fe05 	bl	800d964 <xTimerGenericCommand>
 800dd5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dd5c:	6a3b      	ldr	r3, [r7, #32]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d14f      	bne.n	800de02 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd66:	f383 8811 	msr	BASEPRI, r3
 800dd6a:	f3bf 8f6f 	isb	sy
 800dd6e:	f3bf 8f4f 	dsb	sy
 800dd72:	61bb      	str	r3, [r7, #24]
}
 800dd74:	bf00      	nop
 800dd76:	e7fe      	b.n	800dd76 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd7e:	f023 0301 	bic.w	r3, r3, #1
 800dd82:	b2da      	uxtb	r2, r3
 800dd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dd8a:	e03a      	b.n	800de02 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd92:	f043 0301 	orr.w	r3, r3, #1
 800dd96:	b2da      	uxtb	r2, r3
 800dd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dd9e:	68ba      	ldr	r2, [r7, #8]
 800dda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda6:	699b      	ldr	r3, [r3, #24]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d10a      	bne.n	800ddc2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ddac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb0:	f383 8811 	msr	BASEPRI, r3
 800ddb4:	f3bf 8f6f 	isb	sy
 800ddb8:	f3bf 8f4f 	dsb	sy
 800ddbc:	617b      	str	r3, [r7, #20]
}
 800ddbe:	bf00      	nop
 800ddc0:	e7fe      	b.n	800ddc0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ddc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc4:	699a      	ldr	r2, [r3, #24]
 800ddc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc8:	18d1      	adds	r1, r2, r3
 800ddca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddd0:	f7ff ff06 	bl	800dbe0 <prvInsertTimerInActiveList>
					break;
 800ddd4:	e015      	b.n	800de02 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ddd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dddc:	f003 0302 	and.w	r3, r3, #2
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d103      	bne.n	800ddec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800dde4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dde6:	f000 fbdb 	bl	800e5a0 <vPortFree>
 800ddea:	e00a      	b.n	800de02 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ddec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddf2:	f023 0301 	bic.w	r3, r3, #1
 800ddf6:	b2da      	uxtb	r2, r3
 800ddf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ddfe:	e000      	b.n	800de02 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800de00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800de02:	4b08      	ldr	r3, [pc, #32]	; (800de24 <prvProcessReceivedCommands+0x1c0>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	1d39      	adds	r1, r7, #4
 800de08:	2200      	movs	r2, #0
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7fe f8ca 	bl	800bfa4 <xQueueReceive>
 800de10:	4603      	mov	r3, r0
 800de12:	2b00      	cmp	r3, #0
 800de14:	f47f af2a 	bne.w	800dc6c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800de18:	bf00      	nop
 800de1a:	bf00      	nop
 800de1c:	3730      	adds	r7, #48	; 0x30
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
 800de22:	bf00      	nop
 800de24:	24006c34 	.word	0x24006c34

0800de28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b088      	sub	sp, #32
 800de2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de2e:	e048      	b.n	800dec2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de30:	4b2d      	ldr	r3, [pc, #180]	; (800dee8 <prvSwitchTimerLists+0xc0>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	68db      	ldr	r3, [r3, #12]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de3a:	4b2b      	ldr	r3, [pc, #172]	; (800dee8 <prvSwitchTimerLists+0xc0>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	68db      	ldr	r3, [r3, #12]
 800de42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	3304      	adds	r3, #4
 800de48:	4618      	mov	r0, r3
 800de4a:	f7fd fbfd 	bl	800b648 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	6a1b      	ldr	r3, [r3, #32]
 800de52:	68f8      	ldr	r0, [r7, #12]
 800de54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de5c:	f003 0304 	and.w	r3, r3, #4
 800de60:	2b00      	cmp	r3, #0
 800de62:	d02e      	beq.n	800dec2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	699b      	ldr	r3, [r3, #24]
 800de68:	693a      	ldr	r2, [r7, #16]
 800de6a:	4413      	add	r3, r2
 800de6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800de6e:	68ba      	ldr	r2, [r7, #8]
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	429a      	cmp	r2, r3
 800de74:	d90e      	bls.n	800de94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	68ba      	ldr	r2, [r7, #8]
 800de7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	68fa      	ldr	r2, [r7, #12]
 800de80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800de82:	4b19      	ldr	r3, [pc, #100]	; (800dee8 <prvSwitchTimerLists+0xc0>)
 800de84:	681a      	ldr	r2, [r3, #0]
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	3304      	adds	r3, #4
 800de8a:	4619      	mov	r1, r3
 800de8c:	4610      	mov	r0, r2
 800de8e:	f7fd fba2 	bl	800b5d6 <vListInsert>
 800de92:	e016      	b.n	800dec2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de94:	2300      	movs	r3, #0
 800de96:	9300      	str	r3, [sp, #0]
 800de98:	2300      	movs	r3, #0
 800de9a:	693a      	ldr	r2, [r7, #16]
 800de9c:	2100      	movs	r1, #0
 800de9e:	68f8      	ldr	r0, [r7, #12]
 800dea0:	f7ff fd60 	bl	800d964 <xTimerGenericCommand>
 800dea4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d10a      	bne.n	800dec2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800deac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deb0:	f383 8811 	msr	BASEPRI, r3
 800deb4:	f3bf 8f6f 	isb	sy
 800deb8:	f3bf 8f4f 	dsb	sy
 800debc:	603b      	str	r3, [r7, #0]
}
 800debe:	bf00      	nop
 800dec0:	e7fe      	b.n	800dec0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dec2:	4b09      	ldr	r3, [pc, #36]	; (800dee8 <prvSwitchTimerLists+0xc0>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d1b1      	bne.n	800de30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800decc:	4b06      	ldr	r3, [pc, #24]	; (800dee8 <prvSwitchTimerLists+0xc0>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ded2:	4b06      	ldr	r3, [pc, #24]	; (800deec <prvSwitchTimerLists+0xc4>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	4a04      	ldr	r2, [pc, #16]	; (800dee8 <prvSwitchTimerLists+0xc0>)
 800ded8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800deda:	4a04      	ldr	r2, [pc, #16]	; (800deec <prvSwitchTimerLists+0xc4>)
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	6013      	str	r3, [r2, #0]
}
 800dee0:	bf00      	nop
 800dee2:	3718      	adds	r7, #24
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	24006c2c 	.word	0x24006c2c
 800deec:	24006c30 	.word	0x24006c30

0800def0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b082      	sub	sp, #8
 800def4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800def6:	f000 f965 	bl	800e1c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800defa:	4b15      	ldr	r3, [pc, #84]	; (800df50 <prvCheckForValidListAndQueue+0x60>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d120      	bne.n	800df44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800df02:	4814      	ldr	r0, [pc, #80]	; (800df54 <prvCheckForValidListAndQueue+0x64>)
 800df04:	f7fd fb16 	bl	800b534 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800df08:	4813      	ldr	r0, [pc, #76]	; (800df58 <prvCheckForValidListAndQueue+0x68>)
 800df0a:	f7fd fb13 	bl	800b534 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800df0e:	4b13      	ldr	r3, [pc, #76]	; (800df5c <prvCheckForValidListAndQueue+0x6c>)
 800df10:	4a10      	ldr	r2, [pc, #64]	; (800df54 <prvCheckForValidListAndQueue+0x64>)
 800df12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800df14:	4b12      	ldr	r3, [pc, #72]	; (800df60 <prvCheckForValidListAndQueue+0x70>)
 800df16:	4a10      	ldr	r2, [pc, #64]	; (800df58 <prvCheckForValidListAndQueue+0x68>)
 800df18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800df1a:	2300      	movs	r3, #0
 800df1c:	9300      	str	r3, [sp, #0]
 800df1e:	4b11      	ldr	r3, [pc, #68]	; (800df64 <prvCheckForValidListAndQueue+0x74>)
 800df20:	4a11      	ldr	r2, [pc, #68]	; (800df68 <prvCheckForValidListAndQueue+0x78>)
 800df22:	2110      	movs	r1, #16
 800df24:	200a      	movs	r0, #10
 800df26:	f7fd fc21 	bl	800b76c <xQueueGenericCreateStatic>
 800df2a:	4603      	mov	r3, r0
 800df2c:	4a08      	ldr	r2, [pc, #32]	; (800df50 <prvCheckForValidListAndQueue+0x60>)
 800df2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800df30:	4b07      	ldr	r3, [pc, #28]	; (800df50 <prvCheckForValidListAndQueue+0x60>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d005      	beq.n	800df44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800df38:	4b05      	ldr	r3, [pc, #20]	; (800df50 <prvCheckForValidListAndQueue+0x60>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	490b      	ldr	r1, [pc, #44]	; (800df6c <prvCheckForValidListAndQueue+0x7c>)
 800df3e:	4618      	mov	r0, r3
 800df40:	f7fe fbe8 	bl	800c714 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df44:	f000 f96e 	bl	800e224 <vPortExitCritical>
}
 800df48:	bf00      	nop
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	24006c34 	.word	0x24006c34
 800df54:	24006c04 	.word	0x24006c04
 800df58:	24006c18 	.word	0x24006c18
 800df5c:	24006c2c 	.word	0x24006c2c
 800df60:	24006c30 	.word	0x24006c30
 800df64:	24006ce0 	.word	0x24006ce0
 800df68:	24006c40 	.word	0x24006c40
 800df6c:	0801b074 	.word	0x0801b074

0800df70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800df70:	b480      	push	{r7}
 800df72:	b085      	sub	sp, #20
 800df74:	af00      	add	r7, sp, #0
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	60b9      	str	r1, [r7, #8]
 800df7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	3b04      	subs	r3, #4
 800df80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800df88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	3b04      	subs	r3, #4
 800df8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	f023 0201 	bic.w	r2, r3, #1
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	3b04      	subs	r3, #4
 800df9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dfa0:	4a0c      	ldr	r2, [pc, #48]	; (800dfd4 <pxPortInitialiseStack+0x64>)
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	3b14      	subs	r3, #20
 800dfaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dfac:	687a      	ldr	r2, [r7, #4]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	3b04      	subs	r3, #4
 800dfb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	f06f 0202 	mvn.w	r2, #2
 800dfbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	3b20      	subs	r3, #32
 800dfc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3714      	adds	r7, #20
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd2:	4770      	bx	lr
 800dfd4:	0800dfd9 	.word	0x0800dfd9

0800dfd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b085      	sub	sp, #20
 800dfdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dfe2:	4b12      	ldr	r3, [pc, #72]	; (800e02c <prvTaskExitError+0x54>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfea:	d00a      	beq.n	800e002 <prvTaskExitError+0x2a>
	__asm volatile
 800dfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff0:	f383 8811 	msr	BASEPRI, r3
 800dff4:	f3bf 8f6f 	isb	sy
 800dff8:	f3bf 8f4f 	dsb	sy
 800dffc:	60fb      	str	r3, [r7, #12]
}
 800dffe:	bf00      	nop
 800e000:	e7fe      	b.n	800e000 <prvTaskExitError+0x28>
	__asm volatile
 800e002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e006:	f383 8811 	msr	BASEPRI, r3
 800e00a:	f3bf 8f6f 	isb	sy
 800e00e:	f3bf 8f4f 	dsb	sy
 800e012:	60bb      	str	r3, [r7, #8]
}
 800e014:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e016:	bf00      	nop
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d0fc      	beq.n	800e018 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e01e:	bf00      	nop
 800e020:	bf00      	nop
 800e022:	3714      	adds	r7, #20
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr
 800e02c:	24000024 	.word	0x24000024

0800e030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e030:	4b07      	ldr	r3, [pc, #28]	; (800e050 <pxCurrentTCBConst2>)
 800e032:	6819      	ldr	r1, [r3, #0]
 800e034:	6808      	ldr	r0, [r1, #0]
 800e036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e03a:	f380 8809 	msr	PSP, r0
 800e03e:	f3bf 8f6f 	isb	sy
 800e042:	f04f 0000 	mov.w	r0, #0
 800e046:	f380 8811 	msr	BASEPRI, r0
 800e04a:	4770      	bx	lr
 800e04c:	f3af 8000 	nop.w

0800e050 <pxCurrentTCBConst2>:
 800e050:	24006704 	.word	0x24006704
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e054:	bf00      	nop
 800e056:	bf00      	nop

0800e058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e058:	4808      	ldr	r0, [pc, #32]	; (800e07c <prvPortStartFirstTask+0x24>)
 800e05a:	6800      	ldr	r0, [r0, #0]
 800e05c:	6800      	ldr	r0, [r0, #0]
 800e05e:	f380 8808 	msr	MSP, r0
 800e062:	f04f 0000 	mov.w	r0, #0
 800e066:	f380 8814 	msr	CONTROL, r0
 800e06a:	b662      	cpsie	i
 800e06c:	b661      	cpsie	f
 800e06e:	f3bf 8f4f 	dsb	sy
 800e072:	f3bf 8f6f 	isb	sy
 800e076:	df00      	svc	0
 800e078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e07a:	bf00      	nop
 800e07c:	e000ed08 	.word	0xe000ed08

0800e080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b086      	sub	sp, #24
 800e084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e086:	4b46      	ldr	r3, [pc, #280]	; (800e1a0 <xPortStartScheduler+0x120>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	4a46      	ldr	r2, [pc, #280]	; (800e1a4 <xPortStartScheduler+0x124>)
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d10a      	bne.n	800e0a6 <xPortStartScheduler+0x26>
	__asm volatile
 800e090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e094:	f383 8811 	msr	BASEPRI, r3
 800e098:	f3bf 8f6f 	isb	sy
 800e09c:	f3bf 8f4f 	dsb	sy
 800e0a0:	613b      	str	r3, [r7, #16]
}
 800e0a2:	bf00      	nop
 800e0a4:	e7fe      	b.n	800e0a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e0a6:	4b3e      	ldr	r3, [pc, #248]	; (800e1a0 <xPortStartScheduler+0x120>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	4a3f      	ldr	r2, [pc, #252]	; (800e1a8 <xPortStartScheduler+0x128>)
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d10a      	bne.n	800e0c6 <xPortStartScheduler+0x46>
	__asm volatile
 800e0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b4:	f383 8811 	msr	BASEPRI, r3
 800e0b8:	f3bf 8f6f 	isb	sy
 800e0bc:	f3bf 8f4f 	dsb	sy
 800e0c0:	60fb      	str	r3, [r7, #12]
}
 800e0c2:	bf00      	nop
 800e0c4:	e7fe      	b.n	800e0c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e0c6:	4b39      	ldr	r3, [pc, #228]	; (800e1ac <xPortStartScheduler+0x12c>)
 800e0c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	781b      	ldrb	r3, [r3, #0]
 800e0ce:	b2db      	uxtb	r3, r3
 800e0d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	22ff      	movs	r2, #255	; 0xff
 800e0d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	b2db      	uxtb	r3, r3
 800e0de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e0e0:	78fb      	ldrb	r3, [r7, #3]
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e0e8:	b2da      	uxtb	r2, r3
 800e0ea:	4b31      	ldr	r3, [pc, #196]	; (800e1b0 <xPortStartScheduler+0x130>)
 800e0ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e0ee:	4b31      	ldr	r3, [pc, #196]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e0f0:	2207      	movs	r2, #7
 800e0f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e0f4:	e009      	b.n	800e10a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e0f6:	4b2f      	ldr	r3, [pc, #188]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	3b01      	subs	r3, #1
 800e0fc:	4a2d      	ldr	r2, [pc, #180]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e0fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e100:	78fb      	ldrb	r3, [r7, #3]
 800e102:	b2db      	uxtb	r3, r3
 800e104:	005b      	lsls	r3, r3, #1
 800e106:	b2db      	uxtb	r3, r3
 800e108:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e10a:	78fb      	ldrb	r3, [r7, #3]
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e112:	2b80      	cmp	r3, #128	; 0x80
 800e114:	d0ef      	beq.n	800e0f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e116:	4b27      	ldr	r3, [pc, #156]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f1c3 0307 	rsb	r3, r3, #7
 800e11e:	2b04      	cmp	r3, #4
 800e120:	d00a      	beq.n	800e138 <xPortStartScheduler+0xb8>
	__asm volatile
 800e122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e126:	f383 8811 	msr	BASEPRI, r3
 800e12a:	f3bf 8f6f 	isb	sy
 800e12e:	f3bf 8f4f 	dsb	sy
 800e132:	60bb      	str	r3, [r7, #8]
}
 800e134:	bf00      	nop
 800e136:	e7fe      	b.n	800e136 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e138:	4b1e      	ldr	r3, [pc, #120]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	021b      	lsls	r3, r3, #8
 800e13e:	4a1d      	ldr	r2, [pc, #116]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e140:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e142:	4b1c      	ldr	r3, [pc, #112]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e14a:	4a1a      	ldr	r2, [pc, #104]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e14c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	b2da      	uxtb	r2, r3
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e156:	4b18      	ldr	r3, [pc, #96]	; (800e1b8 <xPortStartScheduler+0x138>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4a17      	ldr	r2, [pc, #92]	; (800e1b8 <xPortStartScheduler+0x138>)
 800e15c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e160:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e162:	4b15      	ldr	r3, [pc, #84]	; (800e1b8 <xPortStartScheduler+0x138>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	4a14      	ldr	r2, [pc, #80]	; (800e1b8 <xPortStartScheduler+0x138>)
 800e168:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e16c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e16e:	f000 f8dd 	bl	800e32c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e172:	4b12      	ldr	r3, [pc, #72]	; (800e1bc <xPortStartScheduler+0x13c>)
 800e174:	2200      	movs	r2, #0
 800e176:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e178:	f000 f8fc 	bl	800e374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e17c:	4b10      	ldr	r3, [pc, #64]	; (800e1c0 <xPortStartScheduler+0x140>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	4a0f      	ldr	r2, [pc, #60]	; (800e1c0 <xPortStartScheduler+0x140>)
 800e182:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e186:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e188:	f7ff ff66 	bl	800e058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e18c:	f7fe ff2e 	bl	800cfec <vTaskSwitchContext>
	prvTaskExitError();
 800e190:	f7ff ff22 	bl	800dfd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e194:	2300      	movs	r3, #0
}
 800e196:	4618      	mov	r0, r3
 800e198:	3718      	adds	r7, #24
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	e000ed00 	.word	0xe000ed00
 800e1a4:	410fc271 	.word	0x410fc271
 800e1a8:	410fc270 	.word	0x410fc270
 800e1ac:	e000e400 	.word	0xe000e400
 800e1b0:	24006d30 	.word	0x24006d30
 800e1b4:	24006d34 	.word	0x24006d34
 800e1b8:	e000ed20 	.word	0xe000ed20
 800e1bc:	24000024 	.word	0x24000024
 800e1c0:	e000ef34 	.word	0xe000ef34

0800e1c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b083      	sub	sp, #12
 800e1c8:	af00      	add	r7, sp, #0
	__asm volatile
 800e1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ce:	f383 8811 	msr	BASEPRI, r3
 800e1d2:	f3bf 8f6f 	isb	sy
 800e1d6:	f3bf 8f4f 	dsb	sy
 800e1da:	607b      	str	r3, [r7, #4]
}
 800e1dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e1de:	4b0f      	ldr	r3, [pc, #60]	; (800e21c <vPortEnterCritical+0x58>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	4a0d      	ldr	r2, [pc, #52]	; (800e21c <vPortEnterCritical+0x58>)
 800e1e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e1e8:	4b0c      	ldr	r3, [pc, #48]	; (800e21c <vPortEnterCritical+0x58>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	2b01      	cmp	r3, #1
 800e1ee:	d10f      	bne.n	800e210 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e1f0:	4b0b      	ldr	r3, [pc, #44]	; (800e220 <vPortEnterCritical+0x5c>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	b2db      	uxtb	r3, r3
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d00a      	beq.n	800e210 <vPortEnterCritical+0x4c>
	__asm volatile
 800e1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1fe:	f383 8811 	msr	BASEPRI, r3
 800e202:	f3bf 8f6f 	isb	sy
 800e206:	f3bf 8f4f 	dsb	sy
 800e20a:	603b      	str	r3, [r7, #0]
}
 800e20c:	bf00      	nop
 800e20e:	e7fe      	b.n	800e20e <vPortEnterCritical+0x4a>
	}
}
 800e210:	bf00      	nop
 800e212:	370c      	adds	r7, #12
 800e214:	46bd      	mov	sp, r7
 800e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21a:	4770      	bx	lr
 800e21c:	24000024 	.word	0x24000024
 800e220:	e000ed04 	.word	0xe000ed04

0800e224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e22a:	4b12      	ldr	r3, [pc, #72]	; (800e274 <vPortExitCritical+0x50>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d10a      	bne.n	800e248 <vPortExitCritical+0x24>
	__asm volatile
 800e232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e236:	f383 8811 	msr	BASEPRI, r3
 800e23a:	f3bf 8f6f 	isb	sy
 800e23e:	f3bf 8f4f 	dsb	sy
 800e242:	607b      	str	r3, [r7, #4]
}
 800e244:	bf00      	nop
 800e246:	e7fe      	b.n	800e246 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e248:	4b0a      	ldr	r3, [pc, #40]	; (800e274 <vPortExitCritical+0x50>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	3b01      	subs	r3, #1
 800e24e:	4a09      	ldr	r2, [pc, #36]	; (800e274 <vPortExitCritical+0x50>)
 800e250:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e252:	4b08      	ldr	r3, [pc, #32]	; (800e274 <vPortExitCritical+0x50>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d105      	bne.n	800e266 <vPortExitCritical+0x42>
 800e25a:	2300      	movs	r3, #0
 800e25c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	f383 8811 	msr	BASEPRI, r3
}
 800e264:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e266:	bf00      	nop
 800e268:	370c      	adds	r7, #12
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr
 800e272:	bf00      	nop
 800e274:	24000024 	.word	0x24000024
	...

0800e280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e280:	f3ef 8009 	mrs	r0, PSP
 800e284:	f3bf 8f6f 	isb	sy
 800e288:	4b15      	ldr	r3, [pc, #84]	; (800e2e0 <pxCurrentTCBConst>)
 800e28a:	681a      	ldr	r2, [r3, #0]
 800e28c:	f01e 0f10 	tst.w	lr, #16
 800e290:	bf08      	it	eq
 800e292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e29a:	6010      	str	r0, [r2, #0]
 800e29c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e2a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e2a4:	f380 8811 	msr	BASEPRI, r0
 800e2a8:	f3bf 8f4f 	dsb	sy
 800e2ac:	f3bf 8f6f 	isb	sy
 800e2b0:	f7fe fe9c 	bl	800cfec <vTaskSwitchContext>
 800e2b4:	f04f 0000 	mov.w	r0, #0
 800e2b8:	f380 8811 	msr	BASEPRI, r0
 800e2bc:	bc09      	pop	{r0, r3}
 800e2be:	6819      	ldr	r1, [r3, #0]
 800e2c0:	6808      	ldr	r0, [r1, #0]
 800e2c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c6:	f01e 0f10 	tst.w	lr, #16
 800e2ca:	bf08      	it	eq
 800e2cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e2d0:	f380 8809 	msr	PSP, r0
 800e2d4:	f3bf 8f6f 	isb	sy
 800e2d8:	4770      	bx	lr
 800e2da:	bf00      	nop
 800e2dc:	f3af 8000 	nop.w

0800e2e0 <pxCurrentTCBConst>:
 800e2e0:	24006704 	.word	0x24006704
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e2e4:	bf00      	nop
 800e2e6:	bf00      	nop

0800e2e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b082      	sub	sp, #8
 800e2ec:	af00      	add	r7, sp, #0
	__asm volatile
 800e2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f2:	f383 8811 	msr	BASEPRI, r3
 800e2f6:	f3bf 8f6f 	isb	sy
 800e2fa:	f3bf 8f4f 	dsb	sy
 800e2fe:	607b      	str	r3, [r7, #4]
}
 800e300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e302:	f7fe fdb9 	bl	800ce78 <xTaskIncrementTick>
 800e306:	4603      	mov	r3, r0
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d003      	beq.n	800e314 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e30c:	4b06      	ldr	r3, [pc, #24]	; (800e328 <xPortSysTickHandler+0x40>)
 800e30e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e312:	601a      	str	r2, [r3, #0]
 800e314:	2300      	movs	r3, #0
 800e316:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	f383 8811 	msr	BASEPRI, r3
}
 800e31e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e320:	bf00      	nop
 800e322:	3708      	adds	r7, #8
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}
 800e328:	e000ed04 	.word	0xe000ed04

0800e32c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e32c:	b480      	push	{r7}
 800e32e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e330:	4b0b      	ldr	r3, [pc, #44]	; (800e360 <vPortSetupTimerInterrupt+0x34>)
 800e332:	2200      	movs	r2, #0
 800e334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e336:	4b0b      	ldr	r3, [pc, #44]	; (800e364 <vPortSetupTimerInterrupt+0x38>)
 800e338:	2200      	movs	r2, #0
 800e33a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e33c:	4b0a      	ldr	r3, [pc, #40]	; (800e368 <vPortSetupTimerInterrupt+0x3c>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a0a      	ldr	r2, [pc, #40]	; (800e36c <vPortSetupTimerInterrupt+0x40>)
 800e342:	fba2 2303 	umull	r2, r3, r2, r3
 800e346:	099b      	lsrs	r3, r3, #6
 800e348:	4a09      	ldr	r2, [pc, #36]	; (800e370 <vPortSetupTimerInterrupt+0x44>)
 800e34a:	3b01      	subs	r3, #1
 800e34c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e34e:	4b04      	ldr	r3, [pc, #16]	; (800e360 <vPortSetupTimerInterrupt+0x34>)
 800e350:	2207      	movs	r2, #7
 800e352:	601a      	str	r2, [r3, #0]
}
 800e354:	bf00      	nop
 800e356:	46bd      	mov	sp, r7
 800e358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35c:	4770      	bx	lr
 800e35e:	bf00      	nop
 800e360:	e000e010 	.word	0xe000e010
 800e364:	e000e018 	.word	0xe000e018
 800e368:	24000000 	.word	0x24000000
 800e36c:	10624dd3 	.word	0x10624dd3
 800e370:	e000e014 	.word	0xe000e014

0800e374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e374:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e384 <vPortEnableVFP+0x10>
 800e378:	6801      	ldr	r1, [r0, #0]
 800e37a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e37e:	6001      	str	r1, [r0, #0]
 800e380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e382:	bf00      	nop
 800e384:	e000ed88 	.word	0xe000ed88

0800e388 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e388:	b480      	push	{r7}
 800e38a:	b085      	sub	sp, #20
 800e38c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e38e:	f3ef 8305 	mrs	r3, IPSR
 800e392:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2b0f      	cmp	r3, #15
 800e398:	d914      	bls.n	800e3c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e39a:	4a17      	ldr	r2, [pc, #92]	; (800e3f8 <vPortValidateInterruptPriority+0x70>)
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	4413      	add	r3, r2
 800e3a0:	781b      	ldrb	r3, [r3, #0]
 800e3a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e3a4:	4b15      	ldr	r3, [pc, #84]	; (800e3fc <vPortValidateInterruptPriority+0x74>)
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	7afa      	ldrb	r2, [r7, #11]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d20a      	bcs.n	800e3c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b2:	f383 8811 	msr	BASEPRI, r3
 800e3b6:	f3bf 8f6f 	isb	sy
 800e3ba:	f3bf 8f4f 	dsb	sy
 800e3be:	607b      	str	r3, [r7, #4]
}
 800e3c0:	bf00      	nop
 800e3c2:	e7fe      	b.n	800e3c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e3c4:	4b0e      	ldr	r3, [pc, #56]	; (800e400 <vPortValidateInterruptPriority+0x78>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e3cc:	4b0d      	ldr	r3, [pc, #52]	; (800e404 <vPortValidateInterruptPriority+0x7c>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d90a      	bls.n	800e3ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d8:	f383 8811 	msr	BASEPRI, r3
 800e3dc:	f3bf 8f6f 	isb	sy
 800e3e0:	f3bf 8f4f 	dsb	sy
 800e3e4:	603b      	str	r3, [r7, #0]
}
 800e3e6:	bf00      	nop
 800e3e8:	e7fe      	b.n	800e3e8 <vPortValidateInterruptPriority+0x60>
	}
 800e3ea:	bf00      	nop
 800e3ec:	3714      	adds	r7, #20
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f4:	4770      	bx	lr
 800e3f6:	bf00      	nop
 800e3f8:	e000e3f0 	.word	0xe000e3f0
 800e3fc:	24006d30 	.word	0x24006d30
 800e400:	e000ed0c 	.word	0xe000ed0c
 800e404:	24006d34 	.word	0x24006d34

0800e408 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b08a      	sub	sp, #40	; 0x28
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e410:	2300      	movs	r3, #0
 800e412:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e414:	f7fe fc62 	bl	800ccdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e418:	4b5b      	ldr	r3, [pc, #364]	; (800e588 <pvPortMalloc+0x180>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d101      	bne.n	800e424 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e420:	f000 f920 	bl	800e664 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e424:	4b59      	ldr	r3, [pc, #356]	; (800e58c <pvPortMalloc+0x184>)
 800e426:	681a      	ldr	r2, [r3, #0]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	4013      	ands	r3, r2
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	f040 8093 	bne.w	800e558 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d01d      	beq.n	800e474 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e438:	2208      	movs	r2, #8
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	4413      	add	r3, r2
 800e43e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f003 0307 	and.w	r3, r3, #7
 800e446:	2b00      	cmp	r3, #0
 800e448:	d014      	beq.n	800e474 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f023 0307 	bic.w	r3, r3, #7
 800e450:	3308      	adds	r3, #8
 800e452:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f003 0307 	and.w	r3, r3, #7
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d00a      	beq.n	800e474 <pvPortMalloc+0x6c>
	__asm volatile
 800e45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e462:	f383 8811 	msr	BASEPRI, r3
 800e466:	f3bf 8f6f 	isb	sy
 800e46a:	f3bf 8f4f 	dsb	sy
 800e46e:	617b      	str	r3, [r7, #20]
}
 800e470:	bf00      	nop
 800e472:	e7fe      	b.n	800e472 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d06e      	beq.n	800e558 <pvPortMalloc+0x150>
 800e47a:	4b45      	ldr	r3, [pc, #276]	; (800e590 <pvPortMalloc+0x188>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	429a      	cmp	r2, r3
 800e482:	d869      	bhi.n	800e558 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e484:	4b43      	ldr	r3, [pc, #268]	; (800e594 <pvPortMalloc+0x18c>)
 800e486:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e488:	4b42      	ldr	r3, [pc, #264]	; (800e594 <pvPortMalloc+0x18c>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e48e:	e004      	b.n	800e49a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e492:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49c:	685b      	ldr	r3, [r3, #4]
 800e49e:	687a      	ldr	r2, [r7, #4]
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d903      	bls.n	800e4ac <pvPortMalloc+0xa4>
 800e4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d1f1      	bne.n	800e490 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e4ac:	4b36      	ldr	r3, [pc, #216]	; (800e588 <pvPortMalloc+0x180>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d050      	beq.n	800e558 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e4b6:	6a3b      	ldr	r3, [r7, #32]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	2208      	movs	r2, #8
 800e4bc:	4413      	add	r3, r2
 800e4be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c2:	681a      	ldr	r2, [r3, #0]
 800e4c4:	6a3b      	ldr	r3, [r7, #32]
 800e4c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ca:	685a      	ldr	r2, [r3, #4]
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	1ad2      	subs	r2, r2, r3
 800e4d0:	2308      	movs	r3, #8
 800e4d2:	005b      	lsls	r3, r3, #1
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	d91f      	bls.n	800e518 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e4d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	4413      	add	r3, r2
 800e4de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4e0:	69bb      	ldr	r3, [r7, #24]
 800e4e2:	f003 0307 	and.w	r3, r3, #7
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d00a      	beq.n	800e500 <pvPortMalloc+0xf8>
	__asm volatile
 800e4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ee:	f383 8811 	msr	BASEPRI, r3
 800e4f2:	f3bf 8f6f 	isb	sy
 800e4f6:	f3bf 8f4f 	dsb	sy
 800e4fa:	613b      	str	r3, [r7, #16]
}
 800e4fc:	bf00      	nop
 800e4fe:	e7fe      	b.n	800e4fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e502:	685a      	ldr	r2, [r3, #4]
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	1ad2      	subs	r2, r2, r3
 800e508:	69bb      	ldr	r3, [r7, #24]
 800e50a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50e:	687a      	ldr	r2, [r7, #4]
 800e510:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e512:	69b8      	ldr	r0, [r7, #24]
 800e514:	f000 f908 	bl	800e728 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e518:	4b1d      	ldr	r3, [pc, #116]	; (800e590 <pvPortMalloc+0x188>)
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51e:	685b      	ldr	r3, [r3, #4]
 800e520:	1ad3      	subs	r3, r2, r3
 800e522:	4a1b      	ldr	r2, [pc, #108]	; (800e590 <pvPortMalloc+0x188>)
 800e524:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e526:	4b1a      	ldr	r3, [pc, #104]	; (800e590 <pvPortMalloc+0x188>)
 800e528:	681a      	ldr	r2, [r3, #0]
 800e52a:	4b1b      	ldr	r3, [pc, #108]	; (800e598 <pvPortMalloc+0x190>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	429a      	cmp	r2, r3
 800e530:	d203      	bcs.n	800e53a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e532:	4b17      	ldr	r3, [pc, #92]	; (800e590 <pvPortMalloc+0x188>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	4a18      	ldr	r2, [pc, #96]	; (800e598 <pvPortMalloc+0x190>)
 800e538:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53c:	685a      	ldr	r2, [r3, #4]
 800e53e:	4b13      	ldr	r3, [pc, #76]	; (800e58c <pvPortMalloc+0x184>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	431a      	orrs	r2, r3
 800e544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e546:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54a:	2200      	movs	r2, #0
 800e54c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e54e:	4b13      	ldr	r3, [pc, #76]	; (800e59c <pvPortMalloc+0x194>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	3301      	adds	r3, #1
 800e554:	4a11      	ldr	r2, [pc, #68]	; (800e59c <pvPortMalloc+0x194>)
 800e556:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e558:	f7fe fbce 	bl	800ccf8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e55c:	69fb      	ldr	r3, [r7, #28]
 800e55e:	f003 0307 	and.w	r3, r3, #7
 800e562:	2b00      	cmp	r3, #0
 800e564:	d00a      	beq.n	800e57c <pvPortMalloc+0x174>
	__asm volatile
 800e566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e56a:	f383 8811 	msr	BASEPRI, r3
 800e56e:	f3bf 8f6f 	isb	sy
 800e572:	f3bf 8f4f 	dsb	sy
 800e576:	60fb      	str	r3, [r7, #12]
}
 800e578:	bf00      	nop
 800e57a:	e7fe      	b.n	800e57a <pvPortMalloc+0x172>
	return pvReturn;
 800e57c:	69fb      	ldr	r3, [r7, #28]
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3728      	adds	r7, #40	; 0x28
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
 800e586:	bf00      	nop
 800e588:	2400e540 	.word	0x2400e540
 800e58c:	2400e554 	.word	0x2400e554
 800e590:	2400e544 	.word	0x2400e544
 800e594:	2400e538 	.word	0x2400e538
 800e598:	2400e548 	.word	0x2400e548
 800e59c:	2400e54c 	.word	0x2400e54c

0800e5a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b086      	sub	sp, #24
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d04d      	beq.n	800e64e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e5b2:	2308      	movs	r3, #8
 800e5b4:	425b      	negs	r3, r3
 800e5b6:	697a      	ldr	r2, [r7, #20]
 800e5b8:	4413      	add	r3, r2
 800e5ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	685a      	ldr	r2, [r3, #4]
 800e5c4:	4b24      	ldr	r3, [pc, #144]	; (800e658 <vPortFree+0xb8>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4013      	ands	r3, r2
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d10a      	bne.n	800e5e4 <vPortFree+0x44>
	__asm volatile
 800e5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d2:	f383 8811 	msr	BASEPRI, r3
 800e5d6:	f3bf 8f6f 	isb	sy
 800e5da:	f3bf 8f4f 	dsb	sy
 800e5de:	60fb      	str	r3, [r7, #12]
}
 800e5e0:	bf00      	nop
 800e5e2:	e7fe      	b.n	800e5e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e5e4:	693b      	ldr	r3, [r7, #16]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d00a      	beq.n	800e602 <vPortFree+0x62>
	__asm volatile
 800e5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f0:	f383 8811 	msr	BASEPRI, r3
 800e5f4:	f3bf 8f6f 	isb	sy
 800e5f8:	f3bf 8f4f 	dsb	sy
 800e5fc:	60bb      	str	r3, [r7, #8]
}
 800e5fe:	bf00      	nop
 800e600:	e7fe      	b.n	800e600 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	685a      	ldr	r2, [r3, #4]
 800e606:	4b14      	ldr	r3, [pc, #80]	; (800e658 <vPortFree+0xb8>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	4013      	ands	r3, r2
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d01e      	beq.n	800e64e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d11a      	bne.n	800e64e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	685a      	ldr	r2, [r3, #4]
 800e61c:	4b0e      	ldr	r3, [pc, #56]	; (800e658 <vPortFree+0xb8>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	43db      	mvns	r3, r3
 800e622:	401a      	ands	r2, r3
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e628:	f7fe fb58 	bl	800ccdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	685a      	ldr	r2, [r3, #4]
 800e630:	4b0a      	ldr	r3, [pc, #40]	; (800e65c <vPortFree+0xbc>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	4413      	add	r3, r2
 800e636:	4a09      	ldr	r2, [pc, #36]	; (800e65c <vPortFree+0xbc>)
 800e638:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e63a:	6938      	ldr	r0, [r7, #16]
 800e63c:	f000 f874 	bl	800e728 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e640:	4b07      	ldr	r3, [pc, #28]	; (800e660 <vPortFree+0xc0>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	3301      	adds	r3, #1
 800e646:	4a06      	ldr	r2, [pc, #24]	; (800e660 <vPortFree+0xc0>)
 800e648:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e64a:	f7fe fb55 	bl	800ccf8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e64e:	bf00      	nop
 800e650:	3718      	adds	r7, #24
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop
 800e658:	2400e554 	.word	0x2400e554
 800e65c:	2400e544 	.word	0x2400e544
 800e660:	2400e550 	.word	0x2400e550

0800e664 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e664:	b480      	push	{r7}
 800e666:	b085      	sub	sp, #20
 800e668:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e66a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800e66e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e670:	4b27      	ldr	r3, [pc, #156]	; (800e710 <prvHeapInit+0xac>)
 800e672:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	f003 0307 	and.w	r3, r3, #7
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d00c      	beq.n	800e698 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	3307      	adds	r3, #7
 800e682:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f023 0307 	bic.w	r3, r3, #7
 800e68a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e68c:	68ba      	ldr	r2, [r7, #8]
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	1ad3      	subs	r3, r2, r3
 800e692:	4a1f      	ldr	r2, [pc, #124]	; (800e710 <prvHeapInit+0xac>)
 800e694:	4413      	add	r3, r2
 800e696:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e69c:	4a1d      	ldr	r2, [pc, #116]	; (800e714 <prvHeapInit+0xb0>)
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e6a2:	4b1c      	ldr	r3, [pc, #112]	; (800e714 <prvHeapInit+0xb0>)
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	68ba      	ldr	r2, [r7, #8]
 800e6ac:	4413      	add	r3, r2
 800e6ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e6b0:	2208      	movs	r2, #8
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	1a9b      	subs	r3, r3, r2
 800e6b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f023 0307 	bic.w	r3, r3, #7
 800e6be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	4a15      	ldr	r2, [pc, #84]	; (800e718 <prvHeapInit+0xb4>)
 800e6c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e6c6:	4b14      	ldr	r3, [pc, #80]	; (800e718 <prvHeapInit+0xb4>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e6ce:	4b12      	ldr	r3, [pc, #72]	; (800e718 <prvHeapInit+0xb4>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	68fa      	ldr	r2, [r7, #12]
 800e6de:	1ad2      	subs	r2, r2, r3
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e6e4:	4b0c      	ldr	r3, [pc, #48]	; (800e718 <prvHeapInit+0xb4>)
 800e6e6:	681a      	ldr	r2, [r3, #0]
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	685b      	ldr	r3, [r3, #4]
 800e6f0:	4a0a      	ldr	r2, [pc, #40]	; (800e71c <prvHeapInit+0xb8>)
 800e6f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	685b      	ldr	r3, [r3, #4]
 800e6f8:	4a09      	ldr	r2, [pc, #36]	; (800e720 <prvHeapInit+0xbc>)
 800e6fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e6fc:	4b09      	ldr	r3, [pc, #36]	; (800e724 <prvHeapInit+0xc0>)
 800e6fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e702:	601a      	str	r2, [r3, #0]
}
 800e704:	bf00      	nop
 800e706:	3714      	adds	r7, #20
 800e708:	46bd      	mov	sp, r7
 800e70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70e:	4770      	bx	lr
 800e710:	24006d38 	.word	0x24006d38
 800e714:	2400e538 	.word	0x2400e538
 800e718:	2400e540 	.word	0x2400e540
 800e71c:	2400e548 	.word	0x2400e548
 800e720:	2400e544 	.word	0x2400e544
 800e724:	2400e554 	.word	0x2400e554

0800e728 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e728:	b480      	push	{r7}
 800e72a:	b085      	sub	sp, #20
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e730:	4b28      	ldr	r3, [pc, #160]	; (800e7d4 <prvInsertBlockIntoFreeList+0xac>)
 800e732:	60fb      	str	r3, [r7, #12]
 800e734:	e002      	b.n	800e73c <prvInsertBlockIntoFreeList+0x14>
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	60fb      	str	r3, [r7, #12]
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	687a      	ldr	r2, [r7, #4]
 800e742:	429a      	cmp	r2, r3
 800e744:	d8f7      	bhi.n	800e736 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	685b      	ldr	r3, [r3, #4]
 800e74e:	68ba      	ldr	r2, [r7, #8]
 800e750:	4413      	add	r3, r2
 800e752:	687a      	ldr	r2, [r7, #4]
 800e754:	429a      	cmp	r2, r3
 800e756:	d108      	bne.n	800e76a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	685a      	ldr	r2, [r3, #4]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	685b      	ldr	r3, [r3, #4]
 800e760:	441a      	add	r2, r3
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	685b      	ldr	r3, [r3, #4]
 800e772:	68ba      	ldr	r2, [r7, #8]
 800e774:	441a      	add	r2, r3
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d118      	bne.n	800e7b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	4b15      	ldr	r3, [pc, #84]	; (800e7d8 <prvInsertBlockIntoFreeList+0xb0>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	429a      	cmp	r2, r3
 800e788:	d00d      	beq.n	800e7a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	685a      	ldr	r2, [r3, #4]
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	441a      	add	r2, r3
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	681a      	ldr	r2, [r3, #0]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	601a      	str	r2, [r3, #0]
 800e7a4:	e008      	b.n	800e7b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e7a6:	4b0c      	ldr	r3, [pc, #48]	; (800e7d8 <prvInsertBlockIntoFreeList+0xb0>)
 800e7a8:	681a      	ldr	r2, [r3, #0]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	601a      	str	r2, [r3, #0]
 800e7ae:	e003      	b.n	800e7b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e7b8:	68fa      	ldr	r2, [r7, #12]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d002      	beq.n	800e7c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e7c6:	bf00      	nop
 800e7c8:	3714      	adds	r7, #20
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr
 800e7d2:	bf00      	nop
 800e7d4:	2400e538 	.word	0x2400e538
 800e7d8:	2400e540 	.word	0x2400e540

0800e7dc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b084      	sub	sp, #16
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();
 800e7e6:	f7fc f96d 	bl	800aac4 <sys_check_core_locking>

  sleeptime = sys_timeouts_sleeptime();
 800e7ea:	f008 fc6f 	bl	80170cc <sys_timeouts_sleeptime>
 800e7ee:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7f6:	d109      	bne.n	800e80c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800e7f8:	f7fc f956 	bl	800aaa8 <sys_unlock_tcpip_core>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	6839      	ldr	r1, [r7, #0]
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f00b f985 	bl	8019b10 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800e806:	f7fc f93f 	bl	800aa88 <sys_lock_tcpip_core>
    return;
 800e80a:	e016      	b.n	800e83a <tcpip_timeouts_mbox_fetch+0x5e>
  } else if (sleeptime == 0) {
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d102      	bne.n	800e818 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800e812:	f008 fc1f 	bl	8017054 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e816:	e7e6      	b.n	800e7e6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800e818:	f7fc f946 	bl	800aaa8 <sys_unlock_tcpip_core>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800e81c:	68fa      	ldr	r2, [r7, #12]
 800e81e:	6839      	ldr	r1, [r7, #0]
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f00b f975 	bl	8019b10 <sys_arch_mbox_fetch>
 800e826:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800e828:	f7fc f92e 	bl	800aa88 <sys_lock_tcpip_core>
  if (res == SYS_ARCH_TIMEOUT) {
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e832:	d102      	bne.n	800e83a <tcpip_timeouts_mbox_fetch+0x5e>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800e834:	f008 fc0e 	bl	8017054 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e838:	e7d5      	b.n	800e7e6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800e83a:	3710      	adds	r7, #16
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b084      	sub	sp, #16
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();
 800e848:	f7fc f978 	bl	800ab3c <sys_mark_tcpip_thread>

  LOCK_TCPIP_CORE();
 800e84c:	f7fc f91c 	bl	800aa88 <sys_lock_tcpip_core>
  if (tcpip_init_done != NULL) {
 800e850:	4b0f      	ldr	r3, [pc, #60]	; (800e890 <tcpip_thread+0x50>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d005      	beq.n	800e864 <tcpip_thread+0x24>
    tcpip_init_done(tcpip_init_done_arg);
 800e858:	4b0d      	ldr	r3, [pc, #52]	; (800e890 <tcpip_thread+0x50>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4a0d      	ldr	r2, [pc, #52]	; (800e894 <tcpip_thread+0x54>)
 800e85e:	6812      	ldr	r2, [r2, #0]
 800e860:	4610      	mov	r0, r2
 800e862:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e864:	f107 030c 	add.w	r3, r7, #12
 800e868:	4619      	mov	r1, r3
 800e86a:	480b      	ldr	r0, [pc, #44]	; (800e898 <tcpip_thread+0x58>)
 800e86c:	f7ff ffb6 	bl	800e7dc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d106      	bne.n	800e884 <tcpip_thread+0x44>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e876:	4b09      	ldr	r3, [pc, #36]	; (800e89c <tcpip_thread+0x5c>)
 800e878:	2291      	movs	r2, #145	; 0x91
 800e87a:	4909      	ldr	r1, [pc, #36]	; (800e8a0 <tcpip_thread+0x60>)
 800e87c:	4809      	ldr	r0, [pc, #36]	; (800e8a4 <tcpip_thread+0x64>)
 800e87e:	f00b faf3 	bl	8019e68 <iprintf>
      continue;
 800e882:	e003      	b.n	800e88c <tcpip_thread+0x4c>
    }
    tcpip_thread_handle_msg(msg);
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	4618      	mov	r0, r3
 800e888:	f000 f80e 	bl	800e8a8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e88c:	e7ea      	b.n	800e864 <tcpip_thread+0x24>
 800e88e:	bf00      	nop
 800e890:	2400e558 	.word	0x2400e558
 800e894:	2400e55c 	.word	0x2400e55c
 800e898:	2400e560 	.word	0x2400e560
 800e89c:	0801b07c 	.word	0x0801b07c
 800e8a0:	0801b0ac 	.word	0x0801b0ac
 800e8a4:	0801b0cc 	.word	0x0801b0cc

0800e8a8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	2b02      	cmp	r3, #2
 800e8b6:	d026      	beq.n	800e906 <tcpip_thread_handle_msg+0x5e>
 800e8b8:	2b02      	cmp	r3, #2
 800e8ba:	dc2b      	bgt.n	800e914 <tcpip_thread_handle_msg+0x6c>
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d002      	beq.n	800e8c6 <tcpip_thread_handle_msg+0x1e>
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d015      	beq.n	800e8f0 <tcpip_thread_handle_msg+0x48>
 800e8c4:	e026      	b.n	800e914 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	68db      	ldr	r3, [r3, #12]
 800e8ca:	687a      	ldr	r2, [r7, #4]
 800e8cc:	6850      	ldr	r0, [r2, #4]
 800e8ce:	687a      	ldr	r2, [r7, #4]
 800e8d0:	6892      	ldr	r2, [r2, #8]
 800e8d2:	4611      	mov	r1, r2
 800e8d4:	4798      	blx	r3
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d004      	beq.n	800e8e6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f001 fde3 	bl	80104ac <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e8e6:	6879      	ldr	r1, [r7, #4]
 800e8e8:	2009      	movs	r0, #9
 800e8ea:	f000 ff2b 	bl	800f744 <memp_free>
      break;
 800e8ee:	e018      	b.n	800e922 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	6892      	ldr	r2, [r2, #8]
 800e8f8:	4610      	mov	r0, r2
 800e8fa:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e8fc:	6879      	ldr	r1, [r7, #4]
 800e8fe:	2008      	movs	r0, #8
 800e900:	f000 ff20 	bl	800f744 <memp_free>
      break;
 800e904:	e00d      	b.n	800e922 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	685b      	ldr	r3, [r3, #4]
 800e90a:	687a      	ldr	r2, [r7, #4]
 800e90c:	6892      	ldr	r2, [r2, #8]
 800e90e:	4610      	mov	r0, r2
 800e910:	4798      	blx	r3
      break;
 800e912:	e006      	b.n	800e922 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e914:	4b05      	ldr	r3, [pc, #20]	; (800e92c <tcpip_thread_handle_msg+0x84>)
 800e916:	22cf      	movs	r2, #207	; 0xcf
 800e918:	4905      	ldr	r1, [pc, #20]	; (800e930 <tcpip_thread_handle_msg+0x88>)
 800e91a:	4806      	ldr	r0, [pc, #24]	; (800e934 <tcpip_thread_handle_msg+0x8c>)
 800e91c:	f00b faa4 	bl	8019e68 <iprintf>
      break;
 800e920:	bf00      	nop
  }
}
 800e922:	bf00      	nop
 800e924:	3708      	adds	r7, #8
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	bf00      	nop
 800e92c:	0801b07c 	.word	0x0801b07c
 800e930:	0801b0ac 	.word	0x0801b0ac
 800e934:	0801b0cc 	.word	0x0801b0cc

0800e938 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b086      	sub	sp, #24
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	60f8      	str	r0, [r7, #12]
 800e940:	60b9      	str	r1, [r7, #8]
 800e942:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e944:	481a      	ldr	r0, [pc, #104]	; (800e9b0 <tcpip_inpkt+0x78>)
 800e946:	f00b f914 	bl	8019b72 <sys_mbox_valid>
 800e94a:	4603      	mov	r3, r0
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d105      	bne.n	800e95c <tcpip_inpkt+0x24>
 800e950:	4b18      	ldr	r3, [pc, #96]	; (800e9b4 <tcpip_inpkt+0x7c>)
 800e952:	22fc      	movs	r2, #252	; 0xfc
 800e954:	4918      	ldr	r1, [pc, #96]	; (800e9b8 <tcpip_inpkt+0x80>)
 800e956:	4819      	ldr	r0, [pc, #100]	; (800e9bc <tcpip_inpkt+0x84>)
 800e958:	f00b fa86 	bl	8019e68 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800e95c:	2009      	movs	r0, #9
 800e95e:	f000 fe7b 	bl	800f658 <memp_malloc>
 800e962:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d102      	bne.n	800e970 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800e96a:	f04f 33ff 	mov.w	r3, #4294967295
 800e96e:	e01a      	b.n	800e9a6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	2200      	movs	r2, #0
 800e974:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	68fa      	ldr	r2, [r7, #12]
 800e97a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	68ba      	ldr	r2, [r7, #8]
 800e980:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	687a      	ldr	r2, [r7, #4]
 800e986:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e988:	6979      	ldr	r1, [r7, #20]
 800e98a:	4809      	ldr	r0, [pc, #36]	; (800e9b0 <tcpip_inpkt+0x78>)
 800e98c:	f00b f8a6 	bl	8019adc <sys_mbox_trypost>
 800e990:	4603      	mov	r3, r0
 800e992:	2b00      	cmp	r3, #0
 800e994:	d006      	beq.n	800e9a4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e996:	6979      	ldr	r1, [r7, #20]
 800e998:	2009      	movs	r0, #9
 800e99a:	f000 fed3 	bl	800f744 <memp_free>
    return ERR_MEM;
 800e99e:	f04f 33ff 	mov.w	r3, #4294967295
 800e9a2:	e000      	b.n	800e9a6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800e9a4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3718      	adds	r7, #24
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	2400e560 	.word	0x2400e560
 800e9b4:	0801b07c 	.word	0x0801b07c
 800e9b8:	0801b0f4 	.word	0x0801b0f4
 800e9bc:	0801b0cc 	.word	0x0801b0cc

0800e9c0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e9d0:	f003 0318 	and.w	r3, r3, #24
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d006      	beq.n	800e9e6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800e9d8:	4a08      	ldr	r2, [pc, #32]	; (800e9fc <tcpip_input+0x3c>)
 800e9da:	6839      	ldr	r1, [r7, #0]
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f7ff ffab 	bl	800e938 <tcpip_inpkt>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	e005      	b.n	800e9f2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800e9e6:	4a06      	ldr	r2, [pc, #24]	; (800ea00 <tcpip_input+0x40>)
 800e9e8:	6839      	ldr	r1, [r7, #0]
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f7ff ffa4 	bl	800e938 <tcpip_inpkt>
 800e9f0:	4603      	mov	r3, r0
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3708      	adds	r7, #8
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	bf00      	nop
 800e9fc:	080198f5 	.word	0x080198f5
 800ea00:	080187f5 	.word	0x080187f5

0800ea04 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b084      	sub	sp, #16
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
 800ea0c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ea0e:	4819      	ldr	r0, [pc, #100]	; (800ea74 <tcpip_try_callback+0x70>)
 800ea10:	f00b f8af 	bl	8019b72 <sys_mbox_valid>
 800ea14:	4603      	mov	r3, r0
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d106      	bne.n	800ea28 <tcpip_try_callback+0x24>
 800ea1a:	4b17      	ldr	r3, [pc, #92]	; (800ea78 <tcpip_try_callback+0x74>)
 800ea1c:	f240 125d 	movw	r2, #349	; 0x15d
 800ea20:	4916      	ldr	r1, [pc, #88]	; (800ea7c <tcpip_try_callback+0x78>)
 800ea22:	4817      	ldr	r0, [pc, #92]	; (800ea80 <tcpip_try_callback+0x7c>)
 800ea24:	f00b fa20 	bl	8019e68 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ea28:	2008      	movs	r0, #8
 800ea2a:	f000 fe15 	bl	800f658 <memp_malloc>
 800ea2e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d102      	bne.n	800ea3c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ea36:	f04f 33ff 	mov.w	r3, #4294967295
 800ea3a:	e017      	b.n	800ea6c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2201      	movs	r2, #1
 800ea40:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	683a      	ldr	r2, [r7, #0]
 800ea4c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ea4e:	68f9      	ldr	r1, [r7, #12]
 800ea50:	4808      	ldr	r0, [pc, #32]	; (800ea74 <tcpip_try_callback+0x70>)
 800ea52:	f00b f843 	bl	8019adc <sys_mbox_trypost>
 800ea56:	4603      	mov	r3, r0
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d006      	beq.n	800ea6a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800ea5c:	68f9      	ldr	r1, [r7, #12]
 800ea5e:	2008      	movs	r0, #8
 800ea60:	f000 fe70 	bl	800f744 <memp_free>
    return ERR_MEM;
 800ea64:	f04f 33ff 	mov.w	r3, #4294967295
 800ea68:	e000      	b.n	800ea6c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ea6a:	2300      	movs	r3, #0
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3710      	adds	r7, #16
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}
 800ea74:	2400e560 	.word	0x2400e560
 800ea78:	0801b07c 	.word	0x0801b07c
 800ea7c:	0801b0f4 	.word	0x0801b0f4
 800ea80:	0801b0cc 	.word	0x0801b0cc

0800ea84 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b084      	sub	sp, #16
 800ea88:	af02      	add	r7, sp, #8
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ea8e:	f000 f92d 	bl	800ecec <lwip_init>

  tcpip_init_done = initfunc;
 800ea92:	4a17      	ldr	r2, [pc, #92]	; (800eaf0 <tcpip_init+0x6c>)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ea98:	4a16      	ldr	r2, [pc, #88]	; (800eaf4 <tcpip_init+0x70>)
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ea9e:	2106      	movs	r1, #6
 800eaa0:	4815      	ldr	r0, [pc, #84]	; (800eaf8 <tcpip_init+0x74>)
 800eaa2:	f00b f801 	bl	8019aa8 <sys_mbox_new>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d006      	beq.n	800eaba <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800eaac:	4b13      	ldr	r3, [pc, #76]	; (800eafc <tcpip_init+0x78>)
 800eaae:	f240 2261 	movw	r2, #609	; 0x261
 800eab2:	4913      	ldr	r1, [pc, #76]	; (800eb00 <tcpip_init+0x7c>)
 800eab4:	4813      	ldr	r0, [pc, #76]	; (800eb04 <tcpip_init+0x80>)
 800eab6:	f00b f9d7 	bl	8019e68 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800eaba:	4813      	ldr	r0, [pc, #76]	; (800eb08 <tcpip_init+0x84>)
 800eabc:	f00b f876 	bl	8019bac <sys_mutex_new>
 800eac0:	4603      	mov	r3, r0
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d006      	beq.n	800ead4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800eac6:	4b0d      	ldr	r3, [pc, #52]	; (800eafc <tcpip_init+0x78>)
 800eac8:	f240 2265 	movw	r2, #613	; 0x265
 800eacc:	490f      	ldr	r1, [pc, #60]	; (800eb0c <tcpip_init+0x88>)
 800eace:	480d      	ldr	r0, [pc, #52]	; (800eb04 <tcpip_init+0x80>)
 800ead0:	f00b f9ca 	bl	8019e68 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ead4:	2318      	movs	r3, #24
 800ead6:	9300      	str	r3, [sp, #0]
 800ead8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eadc:	2200      	movs	r2, #0
 800eade:	490c      	ldr	r1, [pc, #48]	; (800eb10 <tcpip_init+0x8c>)
 800eae0:	480c      	ldr	r0, [pc, #48]	; (800eb14 <tcpip_init+0x90>)
 800eae2:	f00b f895 	bl	8019c10 <sys_thread_new>
}
 800eae6:	bf00      	nop
 800eae8:	3708      	adds	r7, #8
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}
 800eaee:	bf00      	nop
 800eaf0:	2400e558 	.word	0x2400e558
 800eaf4:	2400e55c 	.word	0x2400e55c
 800eaf8:	2400e560 	.word	0x2400e560
 800eafc:	0801b07c 	.word	0x0801b07c
 800eb00:	0801b104 	.word	0x0801b104
 800eb04:	0801b0cc 	.word	0x0801b0cc
 800eb08:	2400e564 	.word	0x2400e564
 800eb0c:	0801b128 	.word	0x0801b128
 800eb10:	0800e841 	.word	0x0800e841
 800eb14:	0801b14c 	.word	0x0801b14c

0800eb18 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b083      	sub	sp, #12
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	4603      	mov	r3, r0
 800eb20:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800eb22:	88fb      	ldrh	r3, [r7, #6]
 800eb24:	021b      	lsls	r3, r3, #8
 800eb26:	b21a      	sxth	r2, r3
 800eb28:	88fb      	ldrh	r3, [r7, #6]
 800eb2a:	0a1b      	lsrs	r3, r3, #8
 800eb2c:	b29b      	uxth	r3, r3
 800eb2e:	b21b      	sxth	r3, r3
 800eb30:	4313      	orrs	r3, r2
 800eb32:	b21b      	sxth	r3, r3
 800eb34:	b29b      	uxth	r3, r3
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	370c      	adds	r7, #12
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb40:	4770      	bx	lr

0800eb42 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800eb42:	b480      	push	{r7}
 800eb44:	b083      	sub	sp, #12
 800eb46:	af00      	add	r7, sp, #0
 800eb48:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	061a      	lsls	r2, r3, #24
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	021b      	lsls	r3, r3, #8
 800eb52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eb56:	431a      	orrs	r2, r3
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	0a1b      	lsrs	r3, r3, #8
 800eb5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eb60:	431a      	orrs	r2, r3
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	0e1b      	lsrs	r3, r3, #24
 800eb66:	4313      	orrs	r3, r2
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	370c      	adds	r7, #12
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb72:	4770      	bx	lr

0800eb74 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800eb74:	b480      	push	{r7}
 800eb76:	b089      	sub	sp, #36	; 0x24
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800eb82:	2300      	movs	r3, #0
 800eb84:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800eb86:	2300      	movs	r3, #0
 800eb88:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800eb8a:	69fb      	ldr	r3, [r7, #28]
 800eb8c:	f003 0301 	and.w	r3, r3, #1
 800eb90:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800eb92:	693b      	ldr	r3, [r7, #16]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d00d      	beq.n	800ebb4 <lwip_standard_chksum+0x40>
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	dd0a      	ble.n	800ebb4 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800eb9e:	69fa      	ldr	r2, [r7, #28]
 800eba0:	1c53      	adds	r3, r2, #1
 800eba2:	61fb      	str	r3, [r7, #28]
 800eba4:	f107 030e 	add.w	r3, r7, #14
 800eba8:	3301      	adds	r3, #1
 800ebaa:	7812      	ldrb	r2, [r2, #0]
 800ebac:	701a      	strb	r2, [r3, #0]
    len--;
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	3b01      	subs	r3, #1
 800ebb2:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800ebb4:	69fb      	ldr	r3, [r7, #28]
 800ebb6:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800ebb8:	e00a      	b.n	800ebd0 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800ebba:	69bb      	ldr	r3, [r7, #24]
 800ebbc:	1c9a      	adds	r2, r3, #2
 800ebbe:	61ba      	str	r2, [r7, #24]
 800ebc0:	881b      	ldrh	r3, [r3, #0]
 800ebc2:	461a      	mov	r2, r3
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	4413      	add	r3, r2
 800ebc8:	617b      	str	r3, [r7, #20]
    len -= 2;
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	3b02      	subs	r3, #2
 800ebce:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	2b01      	cmp	r3, #1
 800ebd4:	dcf1      	bgt.n	800ebba <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	dd04      	ble.n	800ebe6 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800ebdc:	f107 030e 	add.w	r3, r7, #14
 800ebe0:	69ba      	ldr	r2, [r7, #24]
 800ebe2:	7812      	ldrb	r2, [r2, #0]
 800ebe4:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800ebe6:	89fb      	ldrh	r3, [r7, #14]
 800ebe8:	461a      	mov	r2, r3
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	4413      	add	r3, r2
 800ebee:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	0c1a      	lsrs	r2, r3, #16
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	4413      	add	r3, r2
 800ebfa:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	0c1a      	lsrs	r2, r3, #16
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	4413      	add	r3, r2
 800ec06:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d007      	beq.n	800ec1e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	021b      	lsls	r3, r3, #8
 800ec12:	b29a      	uxth	r2, r3
 800ec14:	697b      	ldr	r3, [r7, #20]
 800ec16:	0a1b      	lsrs	r3, r3, #8
 800ec18:	b2db      	uxtb	r3, r3
 800ec1a:	4313      	orrs	r3, r2
 800ec1c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	b29b      	uxth	r3, r3
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	3724      	adds	r7, #36	; 0x24
 800ec26:	46bd      	mov	sp, r7
 800ec28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2c:	4770      	bx	lr

0800ec2e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800ec2e:	b580      	push	{r7, lr}
 800ec30:	b082      	sub	sp, #8
 800ec32:	af00      	add	r7, sp, #0
 800ec34:	6078      	str	r0, [r7, #4]
 800ec36:	460b      	mov	r3, r1
 800ec38:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800ec3a:	887b      	ldrh	r3, [r7, #2]
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f7ff ff98 	bl	800eb74 <lwip_standard_chksum>
 800ec44:	4603      	mov	r3, r0
 800ec46:	43db      	mvns	r3, r3
 800ec48:	b29b      	uxth	r3, r3
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3708      	adds	r7, #8
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}

0800ec52 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800ec52:	b580      	push	{r7, lr}
 800ec54:	b086      	sub	sp, #24
 800ec56:	af00      	add	r7, sp, #0
 800ec58:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	613b      	str	r3, [r7, #16]
 800ec66:	e02b      	b.n	800ecc0 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	685a      	ldr	r2, [r3, #4]
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	895b      	ldrh	r3, [r3, #10]
 800ec70:	4619      	mov	r1, r3
 800ec72:	4610      	mov	r0, r2
 800ec74:	f7ff ff7e 	bl	800eb74 <lwip_standard_chksum>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	4413      	add	r3, r2
 800ec80:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	0c1a      	lsrs	r2, r3, #16
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	b29b      	uxth	r3, r3
 800ec8a:	4413      	add	r3, r2
 800ec8c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	895b      	ldrh	r3, [r3, #10]
 800ec92:	f003 0301 	and.w	r3, r3, #1
 800ec96:	b29b      	uxth	r3, r3
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d00e      	beq.n	800ecba <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	bf0c      	ite	eq
 800eca2:	2301      	moveq	r3, #1
 800eca4:	2300      	movne	r3, #0
 800eca6:	b2db      	uxtb	r3, r3
 800eca8:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	021b      	lsls	r3, r3, #8
 800ecae:	b29a      	uxth	r2, r3
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	0a1b      	lsrs	r3, r3, #8
 800ecb4:	b2db      	uxtb	r3, r3
 800ecb6:	4313      	orrs	r3, r2
 800ecb8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ecba:	693b      	ldr	r3, [r7, #16]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	613b      	str	r3, [r7, #16]
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d1d0      	bne.n	800ec68 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d007      	beq.n	800ecdc <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	021b      	lsls	r3, r3, #8
 800ecd0:	b29a      	uxth	r2, r3
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	0a1b      	lsrs	r3, r3, #8
 800ecd6:	b2db      	uxtb	r3, r3
 800ecd8:	4313      	orrs	r3, r2
 800ecda:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	b29b      	uxth	r3, r3
 800ece0:	43db      	mvns	r3, r3
 800ece2:	b29b      	uxth	r3, r3
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3718      	adds	r7, #24
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b082      	sub	sp, #8
 800ecf0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ecf6:	f00a ff4d 	bl	8019b94 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ecfa:	f000 f8d9 	bl	800eeb0 <mem_init>
  memp_init();
 800ecfe:	f000 fc3d 	bl	800f57c <memp_init>
  pbuf_init();
  netif_init();
 800ed02:	f000 fd49 	bl	800f798 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ed06:	f008 fa1b 	bl	8017140 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ed0a:	f001 ff21 	bl	8010b50 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ed0e:	f008 f957 	bl	8016fc0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ed12:	bf00      	nop
 800ed14:	3708      	adds	r7, #8
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
	...

0800ed1c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b083      	sub	sp, #12
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	4603      	mov	r3, r0
 800ed24:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ed26:	4b05      	ldr	r3, [pc, #20]	; (800ed3c <ptr_to_mem+0x20>)
 800ed28:	681a      	ldr	r2, [r3, #0]
 800ed2a:	88fb      	ldrh	r3, [r7, #6]
 800ed2c:	4413      	add	r3, r2
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	370c      	adds	r7, #12
 800ed32:	46bd      	mov	sp, r7
 800ed34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed38:	4770      	bx	lr
 800ed3a:	bf00      	nop
 800ed3c:	2400e580 	.word	0x2400e580

0800ed40 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ed40:	b480      	push	{r7}
 800ed42:	b083      	sub	sp, #12
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ed48:	4b05      	ldr	r3, [pc, #20]	; (800ed60 <mem_to_ptr+0x20>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	687a      	ldr	r2, [r7, #4]
 800ed4e:	1ad3      	subs	r3, r2, r3
 800ed50:	b29b      	uxth	r3, r3
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	370c      	adds	r7, #12
 800ed56:	46bd      	mov	sp, r7
 800ed58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5c:	4770      	bx	lr
 800ed5e:	bf00      	nop
 800ed60:	2400e580 	.word	0x2400e580

0800ed64 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ed64:	b590      	push	{r4, r7, lr}
 800ed66:	b085      	sub	sp, #20
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ed6c:	4b47      	ldr	r3, [pc, #284]	; (800ee8c <plug_holes+0x128>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	687a      	ldr	r2, [r7, #4]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d206      	bcs.n	800ed84 <plug_holes+0x20>
 800ed76:	4b46      	ldr	r3, [pc, #280]	; (800ee90 <plug_holes+0x12c>)
 800ed78:	f240 12df 	movw	r2, #479	; 0x1df
 800ed7c:	4945      	ldr	r1, [pc, #276]	; (800ee94 <plug_holes+0x130>)
 800ed7e:	4846      	ldr	r0, [pc, #280]	; (800ee98 <plug_holes+0x134>)
 800ed80:	f00b f872 	bl	8019e68 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ed84:	4b45      	ldr	r3, [pc, #276]	; (800ee9c <plug_holes+0x138>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	687a      	ldr	r2, [r7, #4]
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d306      	bcc.n	800ed9c <plug_holes+0x38>
 800ed8e:	4b40      	ldr	r3, [pc, #256]	; (800ee90 <plug_holes+0x12c>)
 800ed90:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ed94:	4942      	ldr	r1, [pc, #264]	; (800eea0 <plug_holes+0x13c>)
 800ed96:	4840      	ldr	r0, [pc, #256]	; (800ee98 <plug_holes+0x134>)
 800ed98:	f00b f866 	bl	8019e68 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	791b      	ldrb	r3, [r3, #4]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d006      	beq.n	800edb2 <plug_holes+0x4e>
 800eda4:	4b3a      	ldr	r3, [pc, #232]	; (800ee90 <plug_holes+0x12c>)
 800eda6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800edaa:	493e      	ldr	r1, [pc, #248]	; (800eea4 <plug_holes+0x140>)
 800edac:	483a      	ldr	r0, [pc, #232]	; (800ee98 <plug_holes+0x134>)
 800edae:	f00b f85b 	bl	8019e68 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	881b      	ldrh	r3, [r3, #0]
 800edb6:	f647 52e8 	movw	r2, #32232	; 0x7de8
 800edba:	4293      	cmp	r3, r2
 800edbc:	d906      	bls.n	800edcc <plug_holes+0x68>
 800edbe:	4b34      	ldr	r3, [pc, #208]	; (800ee90 <plug_holes+0x12c>)
 800edc0:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800edc4:	4938      	ldr	r1, [pc, #224]	; (800eea8 <plug_holes+0x144>)
 800edc6:	4834      	ldr	r0, [pc, #208]	; (800ee98 <plug_holes+0x134>)
 800edc8:	f00b f84e 	bl	8019e68 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	881b      	ldrh	r3, [r3, #0]
 800edd0:	4618      	mov	r0, r3
 800edd2:	f7ff ffa3 	bl	800ed1c <ptr_to_mem>
 800edd6:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800edd8:	687a      	ldr	r2, [r7, #4]
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	429a      	cmp	r2, r3
 800edde:	d025      	beq.n	800ee2c <plug_holes+0xc8>
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	791b      	ldrb	r3, [r3, #4]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d121      	bne.n	800ee2c <plug_holes+0xc8>
 800ede8:	4b2c      	ldr	r3, [pc, #176]	; (800ee9c <plug_holes+0x138>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	68fa      	ldr	r2, [r7, #12]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d01c      	beq.n	800ee2c <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800edf2:	4b2e      	ldr	r3, [pc, #184]	; (800eeac <plug_holes+0x148>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	68fa      	ldr	r2, [r7, #12]
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d102      	bne.n	800ee02 <plug_holes+0x9e>
      lfree = mem;
 800edfc:	4a2b      	ldr	r2, [pc, #172]	; (800eeac <plug_holes+0x148>)
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	881a      	ldrh	r2, [r3, #0]
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	881b      	ldrh	r3, [r3, #0]
 800ee0e:	f647 52e8 	movw	r2, #32232	; 0x7de8
 800ee12:	4293      	cmp	r3, r2
 800ee14:	d00a      	beq.n	800ee2c <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	881b      	ldrh	r3, [r3, #0]
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7ff ff7e 	bl	800ed1c <ptr_to_mem>
 800ee20:	4604      	mov	r4, r0
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f7ff ff8c 	bl	800ed40 <mem_to_ptr>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	885b      	ldrh	r3, [r3, #2]
 800ee30:	4618      	mov	r0, r3
 800ee32:	f7ff ff73 	bl	800ed1c <ptr_to_mem>
 800ee36:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ee38:	68ba      	ldr	r2, [r7, #8]
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	d020      	beq.n	800ee82 <plug_holes+0x11e>
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	791b      	ldrb	r3, [r3, #4]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d11c      	bne.n	800ee82 <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ee48:	4b18      	ldr	r3, [pc, #96]	; (800eeac <plug_holes+0x148>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	687a      	ldr	r2, [r7, #4]
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d102      	bne.n	800ee58 <plug_holes+0xf4>
      lfree = pmem;
 800ee52:	4a16      	ldr	r2, [pc, #88]	; (800eeac <plug_holes+0x148>)
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	881a      	ldrh	r2, [r3, #0]
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	881b      	ldrh	r3, [r3, #0]
 800ee64:	f647 52e8 	movw	r2, #32232	; 0x7de8
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	d00a      	beq.n	800ee82 <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	881b      	ldrh	r3, [r3, #0]
 800ee70:	4618      	mov	r0, r3
 800ee72:	f7ff ff53 	bl	800ed1c <ptr_to_mem>
 800ee76:	4604      	mov	r4, r0
 800ee78:	68b8      	ldr	r0, [r7, #8]
 800ee7a:	f7ff ff61 	bl	800ed40 <mem_to_ptr>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ee82:	bf00      	nop
 800ee84:	3714      	adds	r7, #20
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd90      	pop	{r4, r7, pc}
 800ee8a:	bf00      	nop
 800ee8c:	2400e580 	.word	0x2400e580
 800ee90:	0801b15c 	.word	0x0801b15c
 800ee94:	0801b18c 	.word	0x0801b18c
 800ee98:	0801b1a4 	.word	0x0801b1a4
 800ee9c:	2400e584 	.word	0x2400e584
 800eea0:	0801b1cc 	.word	0x0801b1cc
 800eea4:	0801b1e8 	.word	0x0801b1e8
 800eea8:	0801b204 	.word	0x0801b204
 800eeac:	2400e58c 	.word	0x2400e58c

0800eeb0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b082      	sub	sp, #8
 800eeb4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800eeb6:	4b1d      	ldr	r3, [pc, #116]	; (800ef2c <mem_init+0x7c>)
 800eeb8:	4a1d      	ldr	r2, [pc, #116]	; (800ef30 <mem_init+0x80>)
 800eeba:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800eebc:	4b1b      	ldr	r3, [pc, #108]	; (800ef2c <mem_init+0x7c>)
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f647 52e8 	movw	r2, #32232	; 0x7de8
 800eec8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2200      	movs	r2, #0
 800eece:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2200      	movs	r2, #0
 800eed4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800eed6:	f647 50e8 	movw	r0, #32232	; 0x7de8
 800eeda:	f7ff ff1f 	bl	800ed1c <ptr_to_mem>
 800eede:	4603      	mov	r3, r0
 800eee0:	4a14      	ldr	r2, [pc, #80]	; (800ef34 <mem_init+0x84>)
 800eee2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800eee4:	4b13      	ldr	r3, [pc, #76]	; (800ef34 <mem_init+0x84>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	2201      	movs	r2, #1
 800eeea:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800eeec:	4b11      	ldr	r3, [pc, #68]	; (800ef34 <mem_init+0x84>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	f647 52e8 	movw	r2, #32232	; 0x7de8
 800eef4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800eef6:	4b0f      	ldr	r3, [pc, #60]	; (800ef34 <mem_init+0x84>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	f647 52e8 	movw	r2, #32232	; 0x7de8
 800eefe:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ef00:	4b0a      	ldr	r3, [pc, #40]	; (800ef2c <mem_init+0x7c>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a0c      	ldr	r2, [pc, #48]	; (800ef38 <mem_init+0x88>)
 800ef06:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ef08:	480c      	ldr	r0, [pc, #48]	; (800ef3c <mem_init+0x8c>)
 800ef0a:	f00a fe4f 	bl	8019bac <sys_mutex_new>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d006      	beq.n	800ef22 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ef14:	4b0a      	ldr	r3, [pc, #40]	; (800ef40 <mem_init+0x90>)
 800ef16:	f240 221f 	movw	r2, #543	; 0x21f
 800ef1a:	490a      	ldr	r1, [pc, #40]	; (800ef44 <mem_init+0x94>)
 800ef1c:	480a      	ldr	r0, [pc, #40]	; (800ef48 <mem_init+0x98>)
 800ef1e:	f00a ffa3 	bl	8019e68 <iprintf>
  }
}
 800ef22:	bf00      	nop
 800ef24:	3708      	adds	r7, #8
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	2400e580 	.word	0x2400e580
 800ef30:	30000200 	.word	0x30000200
 800ef34:	2400e584 	.word	0x2400e584
 800ef38:	2400e58c 	.word	0x2400e58c
 800ef3c:	2400e588 	.word	0x2400e588
 800ef40:	0801b15c 	.word	0x0801b15c
 800ef44:	0801b230 	.word	0x0801b230
 800ef48:	0801b1a4 	.word	0x0801b1a4

0800ef4c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b086      	sub	sp, #24
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f7ff fef3 	bl	800ed40 <mem_to_ptr>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	881b      	ldrh	r3, [r3, #0]
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7ff feda 	bl	800ed1c <ptr_to_mem>
 800ef68:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	885b      	ldrh	r3, [r3, #2]
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7ff fed4 	bl	800ed1c <ptr_to_mem>
 800ef74:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	881b      	ldrh	r3, [r3, #0]
 800ef7a:	f647 52e8 	movw	r2, #32232	; 0x7de8
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d819      	bhi.n	800efb6 <mem_link_valid+0x6a>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	885b      	ldrh	r3, [r3, #2]
 800ef86:	f647 52e8 	movw	r2, #32232	; 0x7de8
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d813      	bhi.n	800efb6 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ef92:	8afa      	ldrh	r2, [r7, #22]
 800ef94:	429a      	cmp	r2, r3
 800ef96:	d004      	beq.n	800efa2 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	881b      	ldrh	r3, [r3, #0]
 800ef9c:	8afa      	ldrh	r2, [r7, #22]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d109      	bne.n	800efb6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800efa2:	4b08      	ldr	r3, [pc, #32]	; (800efc4 <mem_link_valid+0x78>)
 800efa4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800efa6:	693a      	ldr	r2, [r7, #16]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d006      	beq.n	800efba <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	885b      	ldrh	r3, [r3, #2]
 800efb0:	8afa      	ldrh	r2, [r7, #22]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d001      	beq.n	800efba <mem_link_valid+0x6e>
    return 0;
 800efb6:	2300      	movs	r3, #0
 800efb8:	e000      	b.n	800efbc <mem_link_valid+0x70>
  }
  return 1;
 800efba:	2301      	movs	r3, #1
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3718      	adds	r7, #24
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	2400e584 	.word	0x2400e584

0800efc8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b088      	sub	sp, #32
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d070      	beq.n	800f0b8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f003 0303 	and.w	r3, r3, #3
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d00d      	beq.n	800effc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800efe0:	4b37      	ldr	r3, [pc, #220]	; (800f0c0 <mem_free+0xf8>)
 800efe2:	f240 2273 	movw	r2, #627	; 0x273
 800efe6:	4937      	ldr	r1, [pc, #220]	; (800f0c4 <mem_free+0xfc>)
 800efe8:	4837      	ldr	r0, [pc, #220]	; (800f0c8 <mem_free+0x100>)
 800efea:	f00a ff3d 	bl	8019e68 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800efee:	f00a fe2f 	bl	8019c50 <sys_arch_protect>
 800eff2:	60f8      	str	r0, [r7, #12]
 800eff4:	68f8      	ldr	r0, [r7, #12]
 800eff6:	f00a fe39 	bl	8019c6c <sys_arch_unprotect>
    return;
 800effa:	e05e      	b.n	800f0ba <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	3b08      	subs	r3, #8
 800f000:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f002:	4b32      	ldr	r3, [pc, #200]	; (800f0cc <mem_free+0x104>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	69fa      	ldr	r2, [r7, #28]
 800f008:	429a      	cmp	r2, r3
 800f00a:	d306      	bcc.n	800f01a <mem_free+0x52>
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f103 020c 	add.w	r2, r3, #12
 800f012:	4b2f      	ldr	r3, [pc, #188]	; (800f0d0 <mem_free+0x108>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	429a      	cmp	r2, r3
 800f018:	d90d      	bls.n	800f036 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f01a:	4b29      	ldr	r3, [pc, #164]	; (800f0c0 <mem_free+0xf8>)
 800f01c:	f240 227f 	movw	r2, #639	; 0x27f
 800f020:	492c      	ldr	r1, [pc, #176]	; (800f0d4 <mem_free+0x10c>)
 800f022:	4829      	ldr	r0, [pc, #164]	; (800f0c8 <mem_free+0x100>)
 800f024:	f00a ff20 	bl	8019e68 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f028:	f00a fe12 	bl	8019c50 <sys_arch_protect>
 800f02c:	6138      	str	r0, [r7, #16]
 800f02e:	6938      	ldr	r0, [r7, #16]
 800f030:	f00a fe1c 	bl	8019c6c <sys_arch_unprotect>
    return;
 800f034:	e041      	b.n	800f0ba <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f036:	4828      	ldr	r0, [pc, #160]	; (800f0d8 <mem_free+0x110>)
 800f038:	f00a fdce 	bl	8019bd8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800f03c:	69fb      	ldr	r3, [r7, #28]
 800f03e:	791b      	ldrb	r3, [r3, #4]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d110      	bne.n	800f066 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f044:	4b1e      	ldr	r3, [pc, #120]	; (800f0c0 <mem_free+0xf8>)
 800f046:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800f04a:	4924      	ldr	r1, [pc, #144]	; (800f0dc <mem_free+0x114>)
 800f04c:	481e      	ldr	r0, [pc, #120]	; (800f0c8 <mem_free+0x100>)
 800f04e:	f00a ff0b 	bl	8019e68 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f052:	4821      	ldr	r0, [pc, #132]	; (800f0d8 <mem_free+0x110>)
 800f054:	f00a fdcf 	bl	8019bf6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f058:	f00a fdfa 	bl	8019c50 <sys_arch_protect>
 800f05c:	6178      	str	r0, [r7, #20]
 800f05e:	6978      	ldr	r0, [r7, #20]
 800f060:	f00a fe04 	bl	8019c6c <sys_arch_unprotect>
    return;
 800f064:	e029      	b.n	800f0ba <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800f066:	69f8      	ldr	r0, [r7, #28]
 800f068:	f7ff ff70 	bl	800ef4c <mem_link_valid>
 800f06c:	4603      	mov	r3, r0
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d110      	bne.n	800f094 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f072:	4b13      	ldr	r3, [pc, #76]	; (800f0c0 <mem_free+0xf8>)
 800f074:	f240 2295 	movw	r2, #661	; 0x295
 800f078:	4919      	ldr	r1, [pc, #100]	; (800f0e0 <mem_free+0x118>)
 800f07a:	4813      	ldr	r0, [pc, #76]	; (800f0c8 <mem_free+0x100>)
 800f07c:	f00a fef4 	bl	8019e68 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f080:	4815      	ldr	r0, [pc, #84]	; (800f0d8 <mem_free+0x110>)
 800f082:	f00a fdb8 	bl	8019bf6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f086:	f00a fde3 	bl	8019c50 <sys_arch_protect>
 800f08a:	61b8      	str	r0, [r7, #24]
 800f08c:	69b8      	ldr	r0, [r7, #24]
 800f08e:	f00a fded 	bl	8019c6c <sys_arch_unprotect>
    return;
 800f092:	e012      	b.n	800f0ba <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f094:	69fb      	ldr	r3, [r7, #28]
 800f096:	2200      	movs	r2, #0
 800f098:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f09a:	4b12      	ldr	r3, [pc, #72]	; (800f0e4 <mem_free+0x11c>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	69fa      	ldr	r2, [r7, #28]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d202      	bcs.n	800f0aa <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f0a4:	4a0f      	ldr	r2, [pc, #60]	; (800f0e4 <mem_free+0x11c>)
 800f0a6:	69fb      	ldr	r3, [r7, #28]
 800f0a8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f0aa:	69f8      	ldr	r0, [r7, #28]
 800f0ac:	f7ff fe5a 	bl	800ed64 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f0b0:	4809      	ldr	r0, [pc, #36]	; (800f0d8 <mem_free+0x110>)
 800f0b2:	f00a fda0 	bl	8019bf6 <sys_mutex_unlock>
 800f0b6:	e000      	b.n	800f0ba <mem_free+0xf2>
    return;
 800f0b8:	bf00      	nop
}
 800f0ba:	3720      	adds	r7, #32
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}
 800f0c0:	0801b15c 	.word	0x0801b15c
 800f0c4:	0801b24c 	.word	0x0801b24c
 800f0c8:	0801b1a4 	.word	0x0801b1a4
 800f0cc:	2400e580 	.word	0x2400e580
 800f0d0:	2400e584 	.word	0x2400e584
 800f0d4:	0801b270 	.word	0x0801b270
 800f0d8:	2400e588 	.word	0x2400e588
 800f0dc:	0801b28c 	.word	0x0801b28c
 800f0e0:	0801b2b4 	.word	0x0801b2b4
 800f0e4:	2400e58c 	.word	0x2400e58c

0800f0e8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b088      	sub	sp, #32
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
 800f0f0:	460b      	mov	r3, r1
 800f0f2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f0f4:	887b      	ldrh	r3, [r7, #2]
 800f0f6:	3303      	adds	r3, #3
 800f0f8:	b29b      	uxth	r3, r3
 800f0fa:	f023 0303 	bic.w	r3, r3, #3
 800f0fe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f100:	8bfb      	ldrh	r3, [r7, #30]
 800f102:	2b0b      	cmp	r3, #11
 800f104:	d801      	bhi.n	800f10a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f106:	230c      	movs	r3, #12
 800f108:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f10a:	8bfb      	ldrh	r3, [r7, #30]
 800f10c:	f647 52e8 	movw	r2, #32232	; 0x7de8
 800f110:	4293      	cmp	r3, r2
 800f112:	d803      	bhi.n	800f11c <mem_trim+0x34>
 800f114:	8bfa      	ldrh	r2, [r7, #30]
 800f116:	887b      	ldrh	r3, [r7, #2]
 800f118:	429a      	cmp	r2, r3
 800f11a:	d201      	bcs.n	800f120 <mem_trim+0x38>
    return NULL;
 800f11c:	2300      	movs	r3, #0
 800f11e:	e0dc      	b.n	800f2da <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f120:	4b70      	ldr	r3, [pc, #448]	; (800f2e4 <mem_trim+0x1fc>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	687a      	ldr	r2, [r7, #4]
 800f126:	429a      	cmp	r2, r3
 800f128:	d304      	bcc.n	800f134 <mem_trim+0x4c>
 800f12a:	4b6f      	ldr	r3, [pc, #444]	; (800f2e8 <mem_trim+0x200>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	687a      	ldr	r2, [r7, #4]
 800f130:	429a      	cmp	r2, r3
 800f132:	d306      	bcc.n	800f142 <mem_trim+0x5a>
 800f134:	4b6d      	ldr	r3, [pc, #436]	; (800f2ec <mem_trim+0x204>)
 800f136:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f13a:	496d      	ldr	r1, [pc, #436]	; (800f2f0 <mem_trim+0x208>)
 800f13c:	486d      	ldr	r0, [pc, #436]	; (800f2f4 <mem_trim+0x20c>)
 800f13e:	f00a fe93 	bl	8019e68 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f142:	4b68      	ldr	r3, [pc, #416]	; (800f2e4 <mem_trim+0x1fc>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	687a      	ldr	r2, [r7, #4]
 800f148:	429a      	cmp	r2, r3
 800f14a:	d304      	bcc.n	800f156 <mem_trim+0x6e>
 800f14c:	4b66      	ldr	r3, [pc, #408]	; (800f2e8 <mem_trim+0x200>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	687a      	ldr	r2, [r7, #4]
 800f152:	429a      	cmp	r2, r3
 800f154:	d307      	bcc.n	800f166 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f156:	f00a fd7b 	bl	8019c50 <sys_arch_protect>
 800f15a:	60b8      	str	r0, [r7, #8]
 800f15c:	68b8      	ldr	r0, [r7, #8]
 800f15e:	f00a fd85 	bl	8019c6c <sys_arch_unprotect>
    return rmem;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	e0b9      	b.n	800f2da <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	3b08      	subs	r3, #8
 800f16a:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f16c:	69b8      	ldr	r0, [r7, #24]
 800f16e:	f7ff fde7 	bl	800ed40 <mem_to_ptr>
 800f172:	4603      	mov	r3, r0
 800f174:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f176:	69bb      	ldr	r3, [r7, #24]
 800f178:	881a      	ldrh	r2, [r3, #0]
 800f17a:	8afb      	ldrh	r3, [r7, #22]
 800f17c:	1ad3      	subs	r3, r2, r3
 800f17e:	b29b      	uxth	r3, r3
 800f180:	3b08      	subs	r3, #8
 800f182:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f184:	8bfa      	ldrh	r2, [r7, #30]
 800f186:	8abb      	ldrh	r3, [r7, #20]
 800f188:	429a      	cmp	r2, r3
 800f18a:	d906      	bls.n	800f19a <mem_trim+0xb2>
 800f18c:	4b57      	ldr	r3, [pc, #348]	; (800f2ec <mem_trim+0x204>)
 800f18e:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800f192:	4959      	ldr	r1, [pc, #356]	; (800f2f8 <mem_trim+0x210>)
 800f194:	4857      	ldr	r0, [pc, #348]	; (800f2f4 <mem_trim+0x20c>)
 800f196:	f00a fe67 	bl	8019e68 <iprintf>
  if (newsize > size) {
 800f19a:	8bfa      	ldrh	r2, [r7, #30]
 800f19c:	8abb      	ldrh	r3, [r7, #20]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d901      	bls.n	800f1a6 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	e099      	b.n	800f2da <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800f1a6:	8bfa      	ldrh	r2, [r7, #30]
 800f1a8:	8abb      	ldrh	r3, [r7, #20]
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d101      	bne.n	800f1b2 <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	e093      	b.n	800f2da <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f1b2:	4852      	ldr	r0, [pc, #328]	; (800f2fc <mem_trim+0x214>)
 800f1b4:	f00a fd10 	bl	8019bd8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800f1b8:	69bb      	ldr	r3, [r7, #24]
 800f1ba:	881b      	ldrh	r3, [r3, #0]
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f7ff fdad 	bl	800ed1c <ptr_to_mem>
 800f1c2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	791b      	ldrb	r3, [r3, #4]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d141      	bne.n	800f250 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f1cc:	69bb      	ldr	r3, [r7, #24]
 800f1ce:	881b      	ldrh	r3, [r3, #0]
 800f1d0:	f647 52e8 	movw	r2, #32232	; 0x7de8
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d106      	bne.n	800f1e6 <mem_trim+0xfe>
 800f1d8:	4b44      	ldr	r3, [pc, #272]	; (800f2ec <mem_trim+0x204>)
 800f1da:	f240 22f5 	movw	r2, #757	; 0x2f5
 800f1de:	4948      	ldr	r1, [pc, #288]	; (800f300 <mem_trim+0x218>)
 800f1e0:	4844      	ldr	r0, [pc, #272]	; (800f2f4 <mem_trim+0x20c>)
 800f1e2:	f00a fe41 	bl	8019e68 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f1e6:	693b      	ldr	r3, [r7, #16]
 800f1e8:	881b      	ldrh	r3, [r3, #0]
 800f1ea:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f1ec:	8afa      	ldrh	r2, [r7, #22]
 800f1ee:	8bfb      	ldrh	r3, [r7, #30]
 800f1f0:	4413      	add	r3, r2
 800f1f2:	b29b      	uxth	r3, r3
 800f1f4:	3308      	adds	r3, #8
 800f1f6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f1f8:	4b42      	ldr	r3, [pc, #264]	; (800f304 <mem_trim+0x21c>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	693a      	ldr	r2, [r7, #16]
 800f1fe:	429a      	cmp	r2, r3
 800f200:	d106      	bne.n	800f210 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800f202:	89fb      	ldrh	r3, [r7, #14]
 800f204:	4618      	mov	r0, r3
 800f206:	f7ff fd89 	bl	800ed1c <ptr_to_mem>
 800f20a:	4603      	mov	r3, r0
 800f20c:	4a3d      	ldr	r2, [pc, #244]	; (800f304 <mem_trim+0x21c>)
 800f20e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f210:	89fb      	ldrh	r3, [r7, #14]
 800f212:	4618      	mov	r0, r3
 800f214:	f7ff fd82 	bl	800ed1c <ptr_to_mem>
 800f218:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f21a:	693b      	ldr	r3, [r7, #16]
 800f21c:	2200      	movs	r2, #0
 800f21e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f220:	693b      	ldr	r3, [r7, #16]
 800f222:	89ba      	ldrh	r2, [r7, #12]
 800f224:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f226:	693b      	ldr	r3, [r7, #16]
 800f228:	8afa      	ldrh	r2, [r7, #22]
 800f22a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f22c:	69bb      	ldr	r3, [r7, #24]
 800f22e:	89fa      	ldrh	r2, [r7, #14]
 800f230:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f232:	693b      	ldr	r3, [r7, #16]
 800f234:	881b      	ldrh	r3, [r3, #0]
 800f236:	f647 52e8 	movw	r2, #32232	; 0x7de8
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d049      	beq.n	800f2d2 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	881b      	ldrh	r3, [r3, #0]
 800f242:	4618      	mov	r0, r3
 800f244:	f7ff fd6a 	bl	800ed1c <ptr_to_mem>
 800f248:	4602      	mov	r2, r0
 800f24a:	89fb      	ldrh	r3, [r7, #14]
 800f24c:	8053      	strh	r3, [r2, #2]
 800f24e:	e040      	b.n	800f2d2 <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f250:	8bfb      	ldrh	r3, [r7, #30]
 800f252:	f103 0214 	add.w	r2, r3, #20
 800f256:	8abb      	ldrh	r3, [r7, #20]
 800f258:	429a      	cmp	r2, r3
 800f25a:	d83a      	bhi.n	800f2d2 <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f25c:	8afa      	ldrh	r2, [r7, #22]
 800f25e:	8bfb      	ldrh	r3, [r7, #30]
 800f260:	4413      	add	r3, r2
 800f262:	b29b      	uxth	r3, r3
 800f264:	3308      	adds	r3, #8
 800f266:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f268:	69bb      	ldr	r3, [r7, #24]
 800f26a:	881b      	ldrh	r3, [r3, #0]
 800f26c:	f647 52e8 	movw	r2, #32232	; 0x7de8
 800f270:	4293      	cmp	r3, r2
 800f272:	d106      	bne.n	800f282 <mem_trim+0x19a>
 800f274:	4b1d      	ldr	r3, [pc, #116]	; (800f2ec <mem_trim+0x204>)
 800f276:	f240 3216 	movw	r2, #790	; 0x316
 800f27a:	4921      	ldr	r1, [pc, #132]	; (800f300 <mem_trim+0x218>)
 800f27c:	481d      	ldr	r0, [pc, #116]	; (800f2f4 <mem_trim+0x20c>)
 800f27e:	f00a fdf3 	bl	8019e68 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f282:	89fb      	ldrh	r3, [r7, #14]
 800f284:	4618      	mov	r0, r3
 800f286:	f7ff fd49 	bl	800ed1c <ptr_to_mem>
 800f28a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f28c:	4b1d      	ldr	r3, [pc, #116]	; (800f304 <mem_trim+0x21c>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	693a      	ldr	r2, [r7, #16]
 800f292:	429a      	cmp	r2, r3
 800f294:	d202      	bcs.n	800f29c <mem_trim+0x1b4>
      lfree = mem2;
 800f296:	4a1b      	ldr	r2, [pc, #108]	; (800f304 <mem_trim+0x21c>)
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f29c:	693b      	ldr	r3, [r7, #16]
 800f29e:	2200      	movs	r2, #0
 800f2a0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f2a2:	69bb      	ldr	r3, [r7, #24]
 800f2a4:	881a      	ldrh	r2, [r3, #0]
 800f2a6:	693b      	ldr	r3, [r7, #16]
 800f2a8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f2aa:	693b      	ldr	r3, [r7, #16]
 800f2ac:	8afa      	ldrh	r2, [r7, #22]
 800f2ae:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f2b0:	69bb      	ldr	r3, [r7, #24]
 800f2b2:	89fa      	ldrh	r2, [r7, #14]
 800f2b4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f2b6:	693b      	ldr	r3, [r7, #16]
 800f2b8:	881b      	ldrh	r3, [r3, #0]
 800f2ba:	f647 52e8 	movw	r2, #32232	; 0x7de8
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	d007      	beq.n	800f2d2 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f2c2:	693b      	ldr	r3, [r7, #16]
 800f2c4:	881b      	ldrh	r3, [r3, #0]
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7ff fd28 	bl	800ed1c <ptr_to_mem>
 800f2cc:	4602      	mov	r2, r0
 800f2ce:	89fb      	ldrh	r3, [r7, #14]
 800f2d0:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f2d2:	480a      	ldr	r0, [pc, #40]	; (800f2fc <mem_trim+0x214>)
 800f2d4:	f00a fc8f 	bl	8019bf6 <sys_mutex_unlock>
  return rmem;
 800f2d8:	687b      	ldr	r3, [r7, #4]
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3720      	adds	r7, #32
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
 800f2e2:	bf00      	nop
 800f2e4:	2400e580 	.word	0x2400e580
 800f2e8:	2400e584 	.word	0x2400e584
 800f2ec:	0801b15c 	.word	0x0801b15c
 800f2f0:	0801b2e8 	.word	0x0801b2e8
 800f2f4:	0801b1a4 	.word	0x0801b1a4
 800f2f8:	0801b300 	.word	0x0801b300
 800f2fc:	2400e588 	.word	0x2400e588
 800f300:	0801b320 	.word	0x0801b320
 800f304:	2400e58c 	.word	0x2400e58c

0800f308 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b088      	sub	sp, #32
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	4603      	mov	r3, r0
 800f310:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f312:	88fb      	ldrh	r3, [r7, #6]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d101      	bne.n	800f31c <mem_malloc+0x14>
    return NULL;
 800f318:	2300      	movs	r3, #0
 800f31a:	e0e6      	b.n	800f4ea <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f31c:	88fb      	ldrh	r3, [r7, #6]
 800f31e:	3303      	adds	r3, #3
 800f320:	b29b      	uxth	r3, r3
 800f322:	f023 0303 	bic.w	r3, r3, #3
 800f326:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f328:	8bbb      	ldrh	r3, [r7, #28]
 800f32a:	2b0b      	cmp	r3, #11
 800f32c:	d801      	bhi.n	800f332 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f32e:	230c      	movs	r3, #12
 800f330:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f332:	8bbb      	ldrh	r3, [r7, #28]
 800f334:	f647 52e8 	movw	r2, #32232	; 0x7de8
 800f338:	4293      	cmp	r3, r2
 800f33a:	d803      	bhi.n	800f344 <mem_malloc+0x3c>
 800f33c:	8bba      	ldrh	r2, [r7, #28]
 800f33e:	88fb      	ldrh	r3, [r7, #6]
 800f340:	429a      	cmp	r2, r3
 800f342:	d201      	bcs.n	800f348 <mem_malloc+0x40>
    return NULL;
 800f344:	2300      	movs	r3, #0
 800f346:	e0d0      	b.n	800f4ea <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f348:	486a      	ldr	r0, [pc, #424]	; (800f4f4 <mem_malloc+0x1ec>)
 800f34a:	f00a fc45 	bl	8019bd8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f34e:	4b6a      	ldr	r3, [pc, #424]	; (800f4f8 <mem_malloc+0x1f0>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	4618      	mov	r0, r3
 800f354:	f7ff fcf4 	bl	800ed40 <mem_to_ptr>
 800f358:	4603      	mov	r3, r0
 800f35a:	83fb      	strh	r3, [r7, #30]
 800f35c:	e0b9      	b.n	800f4d2 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f35e:	8bfb      	ldrh	r3, [r7, #30]
 800f360:	4618      	mov	r0, r3
 800f362:	f7ff fcdb 	bl	800ed1c <ptr_to_mem>
 800f366:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	791b      	ldrb	r3, [r3, #4]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	f040 80a9 	bne.w	800f4c4 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	881b      	ldrh	r3, [r3, #0]
 800f376:	461a      	mov	r2, r3
 800f378:	8bfb      	ldrh	r3, [r7, #30]
 800f37a:	1ad3      	subs	r3, r2, r3
 800f37c:	f1a3 0208 	sub.w	r2, r3, #8
 800f380:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f382:	429a      	cmp	r2, r3
 800f384:	f0c0 809e 	bcc.w	800f4c4 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f388:	697b      	ldr	r3, [r7, #20]
 800f38a:	881b      	ldrh	r3, [r3, #0]
 800f38c:	461a      	mov	r2, r3
 800f38e:	8bfb      	ldrh	r3, [r7, #30]
 800f390:	1ad3      	subs	r3, r2, r3
 800f392:	f1a3 0208 	sub.w	r2, r3, #8
 800f396:	8bbb      	ldrh	r3, [r7, #28]
 800f398:	3314      	adds	r3, #20
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d335      	bcc.n	800f40a <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f39e:	8bfa      	ldrh	r2, [r7, #30]
 800f3a0:	8bbb      	ldrh	r3, [r7, #28]
 800f3a2:	4413      	add	r3, r2
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	3308      	adds	r3, #8
 800f3a8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f3aa:	8a7b      	ldrh	r3, [r7, #18]
 800f3ac:	f647 52e8 	movw	r2, #32232	; 0x7de8
 800f3b0:	4293      	cmp	r3, r2
 800f3b2:	d106      	bne.n	800f3c2 <mem_malloc+0xba>
 800f3b4:	4b51      	ldr	r3, [pc, #324]	; (800f4fc <mem_malloc+0x1f4>)
 800f3b6:	f240 3287 	movw	r2, #903	; 0x387
 800f3ba:	4951      	ldr	r1, [pc, #324]	; (800f500 <mem_malloc+0x1f8>)
 800f3bc:	4851      	ldr	r0, [pc, #324]	; (800f504 <mem_malloc+0x1fc>)
 800f3be:	f00a fd53 	bl	8019e68 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f3c2:	8a7b      	ldrh	r3, [r7, #18]
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7ff fca9 	bl	800ed1c <ptr_to_mem>
 800f3ca:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	881a      	ldrh	r2, [r3, #0]
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	8bfa      	ldrh	r2, [r7, #30]
 800f3de:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	8a7a      	ldrh	r2, [r7, #18]
 800f3e4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	2201      	movs	r2, #1
 800f3ea:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	881b      	ldrh	r3, [r3, #0]
 800f3f0:	f647 52e8 	movw	r2, #32232	; 0x7de8
 800f3f4:	4293      	cmp	r3, r2
 800f3f6:	d00b      	beq.n	800f410 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	881b      	ldrh	r3, [r3, #0]
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f7ff fc8d 	bl	800ed1c <ptr_to_mem>
 800f402:	4602      	mov	r2, r0
 800f404:	8a7b      	ldrh	r3, [r7, #18]
 800f406:	8053      	strh	r3, [r2, #2]
 800f408:	e002      	b.n	800f410 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	2201      	movs	r2, #1
 800f40e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f410:	4b39      	ldr	r3, [pc, #228]	; (800f4f8 <mem_malloc+0x1f0>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	697a      	ldr	r2, [r7, #20]
 800f416:	429a      	cmp	r2, r3
 800f418:	d127      	bne.n	800f46a <mem_malloc+0x162>
          struct mem *cur = lfree;
 800f41a:	4b37      	ldr	r3, [pc, #220]	; (800f4f8 <mem_malloc+0x1f0>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f420:	e005      	b.n	800f42e <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f422:	69bb      	ldr	r3, [r7, #24]
 800f424:	881b      	ldrh	r3, [r3, #0]
 800f426:	4618      	mov	r0, r3
 800f428:	f7ff fc78 	bl	800ed1c <ptr_to_mem>
 800f42c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f42e:	69bb      	ldr	r3, [r7, #24]
 800f430:	791b      	ldrb	r3, [r3, #4]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d004      	beq.n	800f440 <mem_malloc+0x138>
 800f436:	4b34      	ldr	r3, [pc, #208]	; (800f508 <mem_malloc+0x200>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	69ba      	ldr	r2, [r7, #24]
 800f43c:	429a      	cmp	r2, r3
 800f43e:	d1f0      	bne.n	800f422 <mem_malloc+0x11a>
          }
          lfree = cur;
 800f440:	4a2d      	ldr	r2, [pc, #180]	; (800f4f8 <mem_malloc+0x1f0>)
 800f442:	69bb      	ldr	r3, [r7, #24]
 800f444:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f446:	4b2c      	ldr	r3, [pc, #176]	; (800f4f8 <mem_malloc+0x1f0>)
 800f448:	681a      	ldr	r2, [r3, #0]
 800f44a:	4b2f      	ldr	r3, [pc, #188]	; (800f508 <mem_malloc+0x200>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	429a      	cmp	r2, r3
 800f450:	d00b      	beq.n	800f46a <mem_malloc+0x162>
 800f452:	4b29      	ldr	r3, [pc, #164]	; (800f4f8 <mem_malloc+0x1f0>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	791b      	ldrb	r3, [r3, #4]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d006      	beq.n	800f46a <mem_malloc+0x162>
 800f45c:	4b27      	ldr	r3, [pc, #156]	; (800f4fc <mem_malloc+0x1f4>)
 800f45e:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f462:	492a      	ldr	r1, [pc, #168]	; (800f50c <mem_malloc+0x204>)
 800f464:	4827      	ldr	r0, [pc, #156]	; (800f504 <mem_malloc+0x1fc>)
 800f466:	f00a fcff 	bl	8019e68 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f46a:	4822      	ldr	r0, [pc, #136]	; (800f4f4 <mem_malloc+0x1ec>)
 800f46c:	f00a fbc3 	bl	8019bf6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f470:	8bba      	ldrh	r2, [r7, #28]
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	4413      	add	r3, r2
 800f476:	3308      	adds	r3, #8
 800f478:	4a23      	ldr	r2, [pc, #140]	; (800f508 <mem_malloc+0x200>)
 800f47a:	6812      	ldr	r2, [r2, #0]
 800f47c:	4293      	cmp	r3, r2
 800f47e:	d906      	bls.n	800f48e <mem_malloc+0x186>
 800f480:	4b1e      	ldr	r3, [pc, #120]	; (800f4fc <mem_malloc+0x1f4>)
 800f482:	f240 32b9 	movw	r2, #953	; 0x3b9
 800f486:	4922      	ldr	r1, [pc, #136]	; (800f510 <mem_malloc+0x208>)
 800f488:	481e      	ldr	r0, [pc, #120]	; (800f504 <mem_malloc+0x1fc>)
 800f48a:	f00a fced 	bl	8019e68 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	f003 0303 	and.w	r3, r3, #3
 800f494:	2b00      	cmp	r3, #0
 800f496:	d006      	beq.n	800f4a6 <mem_malloc+0x19e>
 800f498:	4b18      	ldr	r3, [pc, #96]	; (800f4fc <mem_malloc+0x1f4>)
 800f49a:	f240 32bb 	movw	r2, #955	; 0x3bb
 800f49e:	491d      	ldr	r1, [pc, #116]	; (800f514 <mem_malloc+0x20c>)
 800f4a0:	4818      	ldr	r0, [pc, #96]	; (800f504 <mem_malloc+0x1fc>)
 800f4a2:	f00a fce1 	bl	8019e68 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	f003 0303 	and.w	r3, r3, #3
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d006      	beq.n	800f4be <mem_malloc+0x1b6>
 800f4b0:	4b12      	ldr	r3, [pc, #72]	; (800f4fc <mem_malloc+0x1f4>)
 800f4b2:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f4b6:	4918      	ldr	r1, [pc, #96]	; (800f518 <mem_malloc+0x210>)
 800f4b8:	4812      	ldr	r0, [pc, #72]	; (800f504 <mem_malloc+0x1fc>)
 800f4ba:	f00a fcd5 	bl	8019e68 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f4be:	697b      	ldr	r3, [r7, #20]
 800f4c0:	3308      	adds	r3, #8
 800f4c2:	e012      	b.n	800f4ea <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 800f4c4:	8bfb      	ldrh	r3, [r7, #30]
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f7ff fc28 	bl	800ed1c <ptr_to_mem>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	881b      	ldrh	r3, [r3, #0]
 800f4d0:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f4d2:	8bfa      	ldrh	r2, [r7, #30]
 800f4d4:	8bb9      	ldrh	r1, [r7, #28]
 800f4d6:	f647 53e8 	movw	r3, #32232	; 0x7de8
 800f4da:	1a5b      	subs	r3, r3, r1
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	f4ff af3e 	bcc.w	800f35e <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f4e2:	4804      	ldr	r0, [pc, #16]	; (800f4f4 <mem_malloc+0x1ec>)
 800f4e4:	f00a fb87 	bl	8019bf6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f4e8:	2300      	movs	r3, #0
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	3720      	adds	r7, #32
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}
 800f4f2:	bf00      	nop
 800f4f4:	2400e588 	.word	0x2400e588
 800f4f8:	2400e58c 	.word	0x2400e58c
 800f4fc:	0801b15c 	.word	0x0801b15c
 800f500:	0801b320 	.word	0x0801b320
 800f504:	0801b1a4 	.word	0x0801b1a4
 800f508:	2400e584 	.word	0x2400e584
 800f50c:	0801b334 	.word	0x0801b334
 800f510:	0801b350 	.word	0x0801b350
 800f514:	0801b380 	.word	0x0801b380
 800f518:	0801b3b0 	.word	0x0801b3b0

0800f51c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b085      	sub	sp, #20
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	689b      	ldr	r3, [r3, #8]
 800f528:	2200      	movs	r2, #0
 800f52a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	685b      	ldr	r3, [r3, #4]
 800f530:	3303      	adds	r3, #3
 800f532:	f023 0303 	bic.w	r3, r3, #3
 800f536:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f538:	2300      	movs	r3, #0
 800f53a:	60fb      	str	r3, [r7, #12]
 800f53c:	e011      	b.n	800f562 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	689b      	ldr	r3, [r3, #8]
 800f542:	681a      	ldr	r2, [r3, #0]
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	689b      	ldr	r3, [r3, #8]
 800f54c:	68ba      	ldr	r2, [r7, #8]
 800f54e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	881b      	ldrh	r3, [r3, #0]
 800f554:	461a      	mov	r2, r3
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	4413      	add	r3, r2
 800f55a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	3301      	adds	r3, #1
 800f560:	60fb      	str	r3, [r7, #12]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	885b      	ldrh	r3, [r3, #2]
 800f566:	461a      	mov	r2, r3
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	4293      	cmp	r3, r2
 800f56c:	dbe7      	blt.n	800f53e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f56e:	bf00      	nop
 800f570:	bf00      	nop
 800f572:	3714      	adds	r7, #20
 800f574:	46bd      	mov	sp, r7
 800f576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57a:	4770      	bx	lr

0800f57c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b082      	sub	sp, #8
 800f580:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f582:	2300      	movs	r3, #0
 800f584:	80fb      	strh	r3, [r7, #6]
 800f586:	e009      	b.n	800f59c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f588:	88fb      	ldrh	r3, [r7, #6]
 800f58a:	4a08      	ldr	r2, [pc, #32]	; (800f5ac <memp_init+0x30>)
 800f58c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f590:	4618      	mov	r0, r3
 800f592:	f7ff ffc3 	bl	800f51c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f596:	88fb      	ldrh	r3, [r7, #6]
 800f598:	3301      	adds	r3, #1
 800f59a:	80fb      	strh	r3, [r7, #6]
 800f59c:	88fb      	ldrh	r3, [r7, #6]
 800f59e:	2b0c      	cmp	r3, #12
 800f5a0:	d9f2      	bls.n	800f588 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f5a2:	bf00      	nop
 800f5a4:	bf00      	nop
 800f5a6:	3708      	adds	r7, #8
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}
 800f5ac:	0801e248 	.word	0x0801e248

0800f5b0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b084      	sub	sp, #16
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f5b8:	f00a fb4a 	bl	8019c50 <sys_arch_protect>
 800f5bc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	689b      	ldr	r3, [r3, #8]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d015      	beq.n	800f5f8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	689b      	ldr	r3, [r3, #8]
 800f5d0:	68ba      	ldr	r2, [r7, #8]
 800f5d2:	6812      	ldr	r2, [r2, #0]
 800f5d4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	f003 0303 	and.w	r3, r3, #3
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d006      	beq.n	800f5ee <do_memp_malloc_pool+0x3e>
 800f5e0:	4b09      	ldr	r3, [pc, #36]	; (800f608 <do_memp_malloc_pool+0x58>)
 800f5e2:	f44f 728c 	mov.w	r2, #280	; 0x118
 800f5e6:	4909      	ldr	r1, [pc, #36]	; (800f60c <do_memp_malloc_pool+0x5c>)
 800f5e8:	4809      	ldr	r0, [pc, #36]	; (800f610 <do_memp_malloc_pool+0x60>)
 800f5ea:	f00a fc3d 	bl	8019e68 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f5ee:	68f8      	ldr	r0, [r7, #12]
 800f5f0:	f00a fb3c 	bl	8019c6c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	e003      	b.n	800f600 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f5f8:	68f8      	ldr	r0, [r7, #12]
 800f5fa:	f00a fb37 	bl	8019c6c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f5fe:	2300      	movs	r3, #0
}
 800f600:	4618      	mov	r0, r3
 800f602:	3710      	adds	r7, #16
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}
 800f608:	0801b3d4 	.word	0x0801b3d4
 800f60c:	0801b404 	.word	0x0801b404
 800f610:	0801b428 	.word	0x0801b428

0800f614 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b082      	sub	sp, #8
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d106      	bne.n	800f630 <memp_malloc_pool+0x1c>
 800f622:	4b0a      	ldr	r3, [pc, #40]	; (800f64c <memp_malloc_pool+0x38>)
 800f624:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800f628:	4909      	ldr	r1, [pc, #36]	; (800f650 <memp_malloc_pool+0x3c>)
 800f62a:	480a      	ldr	r0, [pc, #40]	; (800f654 <memp_malloc_pool+0x40>)
 800f62c:	f00a fc1c 	bl	8019e68 <iprintf>
  if (desc == NULL) {
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d101      	bne.n	800f63a <memp_malloc_pool+0x26>
    return NULL;
 800f636:	2300      	movs	r3, #0
 800f638:	e003      	b.n	800f642 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f7ff ffb8 	bl	800f5b0 <do_memp_malloc_pool>
 800f640:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f642:	4618      	mov	r0, r3
 800f644:	3708      	adds	r7, #8
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	0801b3d4 	.word	0x0801b3d4
 800f650:	0801b450 	.word	0x0801b450
 800f654:	0801b428 	.word	0x0801b428

0800f658 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b084      	sub	sp, #16
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	4603      	mov	r3, r0
 800f660:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f662:	79fb      	ldrb	r3, [r7, #7]
 800f664:	2b0c      	cmp	r3, #12
 800f666:	d908      	bls.n	800f67a <memp_malloc+0x22>
 800f668:	4b0a      	ldr	r3, [pc, #40]	; (800f694 <memp_malloc+0x3c>)
 800f66a:	f240 1257 	movw	r2, #343	; 0x157
 800f66e:	490a      	ldr	r1, [pc, #40]	; (800f698 <memp_malloc+0x40>)
 800f670:	480a      	ldr	r0, [pc, #40]	; (800f69c <memp_malloc+0x44>)
 800f672:	f00a fbf9 	bl	8019e68 <iprintf>
 800f676:	2300      	movs	r3, #0
 800f678:	e008      	b.n	800f68c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f67a:	79fb      	ldrb	r3, [r7, #7]
 800f67c:	4a08      	ldr	r2, [pc, #32]	; (800f6a0 <memp_malloc+0x48>)
 800f67e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f682:	4618      	mov	r0, r3
 800f684:	f7ff ff94 	bl	800f5b0 <do_memp_malloc_pool>
 800f688:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f68a:	68fb      	ldr	r3, [r7, #12]
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3710      	adds	r7, #16
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}
 800f694:	0801b3d4 	.word	0x0801b3d4
 800f698:	0801b464 	.word	0x0801b464
 800f69c:	0801b428 	.word	0x0801b428
 800f6a0:	0801e248 	.word	0x0801e248

0800f6a4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b084      	sub	sp, #16
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	f003 0303 	and.w	r3, r3, #3
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d006      	beq.n	800f6c6 <do_memp_free_pool+0x22>
 800f6b8:	4b0d      	ldr	r3, [pc, #52]	; (800f6f0 <do_memp_free_pool+0x4c>)
 800f6ba:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800f6be:	490d      	ldr	r1, [pc, #52]	; (800f6f4 <do_memp_free_pool+0x50>)
 800f6c0:	480d      	ldr	r0, [pc, #52]	; (800f6f8 <do_memp_free_pool+0x54>)
 800f6c2:	f00a fbd1 	bl	8019e68 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800f6ca:	f00a fac1 	bl	8019c50 <sys_arch_protect>
 800f6ce:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	689b      	ldr	r3, [r3, #8]
 800f6d4:	681a      	ldr	r2, [r3, #0]
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	689b      	ldr	r3, [r3, #8]
 800f6de:	68fa      	ldr	r2, [r7, #12]
 800f6e0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800f6e2:	68b8      	ldr	r0, [r7, #8]
 800f6e4:	f00a fac2 	bl	8019c6c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800f6e8:	bf00      	nop
 800f6ea:	3710      	adds	r7, #16
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}
 800f6f0:	0801b3d4 	.word	0x0801b3d4
 800f6f4:	0801b484 	.word	0x0801b484
 800f6f8:	0801b428 	.word	0x0801b428

0800f6fc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b082      	sub	sp, #8
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d106      	bne.n	800f71a <memp_free_pool+0x1e>
 800f70c:	4b0a      	ldr	r3, [pc, #40]	; (800f738 <memp_free_pool+0x3c>)
 800f70e:	f240 1295 	movw	r2, #405	; 0x195
 800f712:	490a      	ldr	r1, [pc, #40]	; (800f73c <memp_free_pool+0x40>)
 800f714:	480a      	ldr	r0, [pc, #40]	; (800f740 <memp_free_pool+0x44>)
 800f716:	f00a fba7 	bl	8019e68 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d007      	beq.n	800f730 <memp_free_pool+0x34>
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d004      	beq.n	800f730 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800f726:	6839      	ldr	r1, [r7, #0]
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f7ff ffbb 	bl	800f6a4 <do_memp_free_pool>
 800f72e:	e000      	b.n	800f732 <memp_free_pool+0x36>
    return;
 800f730:	bf00      	nop
}
 800f732:	3708      	adds	r7, #8
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}
 800f738:	0801b3d4 	.word	0x0801b3d4
 800f73c:	0801b450 	.word	0x0801b450
 800f740:	0801b428 	.word	0x0801b428

0800f744 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b082      	sub	sp, #8
 800f748:	af00      	add	r7, sp, #0
 800f74a:	4603      	mov	r3, r0
 800f74c:	6039      	str	r1, [r7, #0]
 800f74e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f750:	79fb      	ldrb	r3, [r7, #7]
 800f752:	2b0c      	cmp	r3, #12
 800f754:	d907      	bls.n	800f766 <memp_free+0x22>
 800f756:	4b0c      	ldr	r3, [pc, #48]	; (800f788 <memp_free+0x44>)
 800f758:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800f75c:	490b      	ldr	r1, [pc, #44]	; (800f78c <memp_free+0x48>)
 800f75e:	480c      	ldr	r0, [pc, #48]	; (800f790 <memp_free+0x4c>)
 800f760:	f00a fb82 	bl	8019e68 <iprintf>
 800f764:	e00c      	b.n	800f780 <memp_free+0x3c>

  if (mem == NULL) {
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d008      	beq.n	800f77e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f76c:	79fb      	ldrb	r3, [r7, #7]
 800f76e:	4a09      	ldr	r2, [pc, #36]	; (800f794 <memp_free+0x50>)
 800f770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f774:	6839      	ldr	r1, [r7, #0]
 800f776:	4618      	mov	r0, r3
 800f778:	f7ff ff94 	bl	800f6a4 <do_memp_free_pool>
 800f77c:	e000      	b.n	800f780 <memp_free+0x3c>
    return;
 800f77e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f780:	3708      	adds	r7, #8
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	0801b3d4 	.word	0x0801b3d4
 800f78c:	0801b4a4 	.word	0x0801b4a4
 800f790:	0801b428 	.word	0x0801b428
 800f794:	0801e248 	.word	0x0801e248

0800f798 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f798:	b480      	push	{r7}
 800f79a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f79c:	bf00      	nop
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a4:	4770      	bx	lr
	...

0800f7a8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b086      	sub	sp, #24
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	60f8      	str	r0, [r7, #12]
 800f7b0:	60b9      	str	r1, [r7, #8]
 800f7b2:	607a      	str	r2, [r7, #4]
 800f7b4:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT_CORE_LOCKED();
 800f7b6:	f7fb f985 	bl	800aac4 <sys_check_core_locking>
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d108      	bne.n	800f7d2 <netif_add+0x2a>
 800f7c0:	4b57      	ldr	r3, [pc, #348]	; (800f920 <netif_add+0x178>)
 800f7c2:	f240 1227 	movw	r2, #295	; 0x127
 800f7c6:	4957      	ldr	r1, [pc, #348]	; (800f924 <netif_add+0x17c>)
 800f7c8:	4857      	ldr	r0, [pc, #348]	; (800f928 <netif_add+0x180>)
 800f7ca:	f00a fb4d 	bl	8019e68 <iprintf>
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	e0a2      	b.n	800f918 <netif_add+0x170>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d108      	bne.n	800f7ea <netif_add+0x42>
 800f7d8:	4b51      	ldr	r3, [pc, #324]	; (800f920 <netif_add+0x178>)
 800f7da:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f7de:	4953      	ldr	r1, [pc, #332]	; (800f92c <netif_add+0x184>)
 800f7e0:	4851      	ldr	r0, [pc, #324]	; (800f928 <netif_add+0x180>)
 800f7e2:	f00a fb41 	bl	8019e68 <iprintf>
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	e096      	b.n	800f918 <netif_add+0x170>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d101      	bne.n	800f7f4 <netif_add+0x4c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f7f0:	4b4f      	ldr	r3, [pc, #316]	; (800f930 <netif_add+0x188>)
 800f7f2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d101      	bne.n	800f7fe <netif_add+0x56>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f7fa:	4b4d      	ldr	r3, [pc, #308]	; (800f930 <netif_add+0x188>)
 800f7fc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d101      	bne.n	800f808 <netif_add+0x60>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f804:	4b4a      	ldr	r3, [pc, #296]	; (800f930 <netif_add+0x188>)
 800f806:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	2200      	movs	r2, #0
 800f80c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	2200      	movs	r2, #0
 800f812:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	2200      	movs	r2, #0
 800f818:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	4a45      	ldr	r2, [pc, #276]	; (800f934 <netif_add+0x18c>)
 800f81e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2200      	movs	r2, #0
 800f824:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	2200      	movs	r2, #0
 800f82a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	2200      	movs	r2, #0
 800f832:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	6a3a      	ldr	r2, [r7, #32]
 800f838:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800f83a:	4b3f      	ldr	r3, [pc, #252]	; (800f938 <netif_add+0x190>)
 800f83c:	781a      	ldrb	r2, [r3, #0]
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f848:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	687a      	ldr	r2, [r7, #4]
 800f84e:	68b9      	ldr	r1, [r7, #8]
 800f850:	68f8      	ldr	r0, [r7, #12]
 800f852:	f000 f913 	bl	800fa7c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f858:	68f8      	ldr	r0, [r7, #12]
 800f85a:	4798      	blx	r3
 800f85c:	4603      	mov	r3, r0
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d001      	beq.n	800f866 <netif_add+0xbe>
    return NULL;
 800f862:	2300      	movs	r3, #0
 800f864:	e058      	b.n	800f918 <netif_add+0x170>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f86c:	2bff      	cmp	r3, #255	; 0xff
 800f86e:	d103      	bne.n	800f878 <netif_add+0xd0>
        netif->num = 0;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	2200      	movs	r2, #0
 800f874:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800f878:	2300      	movs	r3, #0
 800f87a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f87c:	4b2f      	ldr	r3, [pc, #188]	; (800f93c <netif_add+0x194>)
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	617b      	str	r3, [r7, #20]
 800f882:	e02b      	b.n	800f8dc <netif_add+0x134>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800f884:	697a      	ldr	r2, [r7, #20]
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d106      	bne.n	800f89a <netif_add+0xf2>
 800f88c:	4b24      	ldr	r3, [pc, #144]	; (800f920 <netif_add+0x178>)
 800f88e:	f240 128b 	movw	r2, #395	; 0x18b
 800f892:	492b      	ldr	r1, [pc, #172]	; (800f940 <netif_add+0x198>)
 800f894:	4824      	ldr	r0, [pc, #144]	; (800f928 <netif_add+0x180>)
 800f896:	f00a fae7 	bl	8019e68 <iprintf>
        num_netifs++;
 800f89a:	693b      	ldr	r3, [r7, #16]
 800f89c:	3301      	adds	r3, #1
 800f89e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	2bff      	cmp	r3, #255	; 0xff
 800f8a4:	dd06      	ble.n	800f8b4 <netif_add+0x10c>
 800f8a6:	4b1e      	ldr	r3, [pc, #120]	; (800f920 <netif_add+0x178>)
 800f8a8:	f240 128d 	movw	r2, #397	; 0x18d
 800f8ac:	4925      	ldr	r1, [pc, #148]	; (800f944 <netif_add+0x19c>)
 800f8ae:	481e      	ldr	r0, [pc, #120]	; (800f928 <netif_add+0x180>)
 800f8b0:	f00a fada 	bl	8019e68 <iprintf>
        if (netif2->num == netif->num) {
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d108      	bne.n	800f8d6 <netif_add+0x12e>
          netif->num++;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	b2da      	uxtb	r2, r3
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800f8d4:	e005      	b.n	800f8e2 <netif_add+0x13a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	617b      	str	r3, [r7, #20]
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d1d0      	bne.n	800f884 <netif_add+0xdc>
        }
      }
    } while (netif2 != NULL);
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d1be      	bne.n	800f866 <netif_add+0xbe>
  }
  if (netif->num == 254) {
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f8ee:	2bfe      	cmp	r3, #254	; 0xfe
 800f8f0:	d103      	bne.n	800f8fa <netif_add+0x152>
    netif_num = 0;
 800f8f2:	4b11      	ldr	r3, [pc, #68]	; (800f938 <netif_add+0x190>)
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	701a      	strb	r2, [r3, #0]
 800f8f8:	e006      	b.n	800f908 <netif_add+0x160>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f900:	3301      	adds	r3, #1
 800f902:	b2da      	uxtb	r2, r3
 800f904:	4b0c      	ldr	r3, [pc, #48]	; (800f938 <netif_add+0x190>)
 800f906:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f908:	4b0c      	ldr	r3, [pc, #48]	; (800f93c <netif_add+0x194>)
 800f90a:	681a      	ldr	r2, [r3, #0]
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f910:	4a0a      	ldr	r2, [pc, #40]	; (800f93c <netif_add+0x194>)
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800f916:	68fb      	ldr	r3, [r7, #12]
}
 800f918:	4618      	mov	r0, r3
 800f91a:	3718      	adds	r7, #24
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}
 800f920:	0801b4c0 	.word	0x0801b4c0
 800f924:	0801b554 	.word	0x0801b554
 800f928:	0801b510 	.word	0x0801b510
 800f92c:	0801b570 	.word	0x0801b570
 800f930:	0801e2bc 	.word	0x0801e2bc
 800f934:	0800fd6b 	.word	0x0800fd6b
 800f938:	24015024 	.word	0x24015024
 800f93c:	2401501c 	.word	0x2401501c
 800f940:	0801b594 	.word	0x0801b594
 800f944:	0801b5a8 	.word	0x0801b5a8

0800f948 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800f952:	6839      	ldr	r1, [r7, #0]
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f002 ffff 	bl	8012958 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800f95a:	6839      	ldr	r1, [r7, #0]
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f007 fd7b 	bl	8017458 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800f962:	bf00      	nop
 800f964:	3708      	adds	r7, #8
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
	...

0800f96c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b086      	sub	sp, #24
 800f970:	af00      	add	r7, sp, #0
 800f972:	60f8      	str	r0, [r7, #12]
 800f974:	60b9      	str	r1, [r7, #8]
 800f976:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d106      	bne.n	800f98c <netif_do_set_ipaddr+0x20>
 800f97e:	4b1d      	ldr	r3, [pc, #116]	; (800f9f4 <netif_do_set_ipaddr+0x88>)
 800f980:	f240 12cb 	movw	r2, #459	; 0x1cb
 800f984:	491c      	ldr	r1, [pc, #112]	; (800f9f8 <netif_do_set_ipaddr+0x8c>)
 800f986:	481d      	ldr	r0, [pc, #116]	; (800f9fc <netif_do_set_ipaddr+0x90>)
 800f988:	f00a fa6e 	bl	8019e68 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d106      	bne.n	800f9a0 <netif_do_set_ipaddr+0x34>
 800f992:	4b18      	ldr	r3, [pc, #96]	; (800f9f4 <netif_do_set_ipaddr+0x88>)
 800f994:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800f998:	4917      	ldr	r1, [pc, #92]	; (800f9f8 <netif_do_set_ipaddr+0x8c>)
 800f99a:	4818      	ldr	r0, [pc, #96]	; (800f9fc <netif_do_set_ipaddr+0x90>)
 800f99c:	f00a fa64 	bl	8019e68 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	681a      	ldr	r2, [r3, #0]
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	3304      	adds	r3, #4
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	429a      	cmp	r2, r3
 800f9ac:	d01c      	beq.n	800f9e8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	3304      	adds	r3, #4
 800f9b8:	681a      	ldr	r2, [r3, #0]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800f9be:	f107 0314 	add.w	r3, r7, #20
 800f9c2:	4619      	mov	r1, r3
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f7ff ffbf 	bl	800f948 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d002      	beq.n	800f9d6 <netif_do_set_ipaddr+0x6a>
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	e000      	b.n	800f9d8 <netif_do_set_ipaddr+0x6c>
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	68fa      	ldr	r2, [r7, #12]
 800f9da:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f9dc:	2101      	movs	r1, #1
 800f9de:	68f8      	ldr	r0, [r7, #12]
 800f9e0:	f000 f8d6 	bl	800fb90 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800f9e4:	2301      	movs	r3, #1
 800f9e6:	e000      	b.n	800f9ea <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800f9e8:	2300      	movs	r3, #0
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	3718      	adds	r7, #24
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
 800f9f2:	bf00      	nop
 800f9f4:	0801b4c0 	.word	0x0801b4c0
 800f9f8:	0801b5d8 	.word	0x0801b5d8
 800f9fc:	0801b510 	.word	0x0801b510

0800fa00 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800fa00:	b480      	push	{r7}
 800fa02:	b085      	sub	sp, #20
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	60f8      	str	r0, [r7, #12]
 800fa08:	60b9      	str	r1, [r7, #8]
 800fa0a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	681a      	ldr	r2, [r3, #0]
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	3308      	adds	r3, #8
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	429a      	cmp	r2, r3
 800fa18:	d00a      	beq.n	800fa30 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d002      	beq.n	800fa26 <netif_do_set_netmask+0x26>
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	e000      	b.n	800fa28 <netif_do_set_netmask+0x28>
 800fa26:	2300      	movs	r3, #0
 800fa28:	68fa      	ldr	r2, [r7, #12]
 800fa2a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	e000      	b.n	800fa32 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800fa30:	2300      	movs	r3, #0
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3714      	adds	r7, #20
 800fa36:	46bd      	mov	sp, r7
 800fa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3c:	4770      	bx	lr

0800fa3e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800fa3e:	b480      	push	{r7}
 800fa40:	b085      	sub	sp, #20
 800fa42:	af00      	add	r7, sp, #0
 800fa44:	60f8      	str	r0, [r7, #12]
 800fa46:	60b9      	str	r1, [r7, #8]
 800fa48:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	681a      	ldr	r2, [r3, #0]
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	330c      	adds	r3, #12
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d00a      	beq.n	800fa6e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d002      	beq.n	800fa64 <netif_do_set_gw+0x26>
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	e000      	b.n	800fa66 <netif_do_set_gw+0x28>
 800fa64:	2300      	movs	r3, #0
 800fa66:	68fa      	ldr	r2, [r7, #12]
 800fa68:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	e000      	b.n	800fa70 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800fa6e:	2300      	movs	r3, #0
}
 800fa70:	4618      	mov	r0, r3
 800fa72:	3714      	adds	r7, #20
 800fa74:	46bd      	mov	sp, r7
 800fa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7a:	4770      	bx	lr

0800fa7c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b088      	sub	sp, #32
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	60f8      	str	r0, [r7, #12]
 800fa84:	60b9      	str	r1, [r7, #8]
 800fa86:	607a      	str	r2, [r7, #4]
 800fa88:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	61bb      	str	r3, [r7, #24]
#endif
  ip_addr_t old_addr;
  int remove;

  LWIP_ASSERT_CORE_LOCKED();
 800fa92:	f7fb f817 	bl	800aac4 <sys_check_core_locking>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d101      	bne.n	800faa0 <netif_set_addr+0x24>
    ipaddr = IP4_ADDR_ANY4;
 800fa9c:	4b1c      	ldr	r3, [pc, #112]	; (800fb10 <netif_set_addr+0x94>)
 800fa9e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d101      	bne.n	800faaa <netif_set_addr+0x2e>
    netmask = IP4_ADDR_ANY4;
 800faa6:	4b1a      	ldr	r3, [pc, #104]	; (800fb10 <netif_set_addr+0x94>)
 800faa8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d101      	bne.n	800fab4 <netif_set_addr+0x38>
    gw = IP4_ADDR_ANY4;
 800fab0:	4b17      	ldr	r3, [pc, #92]	; (800fb10 <netif_set_addr+0x94>)
 800fab2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800fab4:	68bb      	ldr	r3, [r7, #8]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d003      	beq.n	800fac2 <netif_set_addr+0x46>
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d101      	bne.n	800fac6 <netif_set_addr+0x4a>
 800fac2:	2301      	movs	r3, #1
 800fac4:	e000      	b.n	800fac8 <netif_set_addr+0x4c>
 800fac6:	2300      	movs	r3, #0
 800fac8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	2b00      	cmp	r3, #0
 800face:	d006      	beq.n	800fade <netif_set_addr+0x62>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fad0:	f107 0310 	add.w	r3, r7, #16
 800fad4:	461a      	mov	r2, r3
 800fad6:	68b9      	ldr	r1, [r7, #8]
 800fad8:	68f8      	ldr	r0, [r7, #12]
 800fada:	f7ff ff47 	bl	800f96c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800fade:	69fa      	ldr	r2, [r7, #28]
 800fae0:	6879      	ldr	r1, [r7, #4]
 800fae2:	68f8      	ldr	r0, [r7, #12]
 800fae4:	f7ff ff8c 	bl	800fa00 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800fae8:	69ba      	ldr	r2, [r7, #24]
 800faea:	6839      	ldr	r1, [r7, #0]
 800faec:	68f8      	ldr	r0, [r7, #12]
 800faee:	f7ff ffa6 	bl	800fa3e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d106      	bne.n	800fb06 <netif_set_addr+0x8a>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800faf8:	f107 0310 	add.w	r3, r7, #16
 800fafc:	461a      	mov	r2, r3
 800fafe:	68b9      	ldr	r1, [r7, #8]
 800fb00:	68f8      	ldr	r0, [r7, #12]
 800fb02:	f7ff ff33 	bl	800f96c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800fb06:	bf00      	nop
 800fb08:	3720      	adds	r7, #32
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}
 800fb0e:	bf00      	nop
 800fb10:	0801e2bc 	.word	0x0801e2bc

0800fb14 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800fb1c:	f7fa ffd2 	bl	800aac4 <sys_check_core_locking>
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800fb20:	4a03      	ldr	r2, [pc, #12]	; (800fb30 <netif_set_default+0x1c>)
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800fb26:	bf00      	nop
 800fb28:	3708      	adds	r7, #8
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}
 800fb2e:	bf00      	nop
 800fb30:	24015020 	.word	0x24015020

0800fb34 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b082      	sub	sp, #8
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800fb3c:	f7fa ffc2 	bl	800aac4 <sys_check_core_locking>

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d107      	bne.n	800fb56 <netif_set_up+0x22>
 800fb46:	4b0f      	ldr	r3, [pc, #60]	; (800fb84 <netif_set_up+0x50>)
 800fb48:	f44f 7254 	mov.w	r2, #848	; 0x350
 800fb4c:	490e      	ldr	r1, [pc, #56]	; (800fb88 <netif_set_up+0x54>)
 800fb4e:	480f      	ldr	r0, [pc, #60]	; (800fb8c <netif_set_up+0x58>)
 800fb50:	f00a f98a 	bl	8019e68 <iprintf>
 800fb54:	e013      	b.n	800fb7e <netif_set_up+0x4a>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb5c:	f003 0301 	and.w	r3, r3, #1
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d10c      	bne.n	800fb7e <netif_set_up+0x4a>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb6a:	f043 0301 	orr.w	r3, r3, #1
 800fb6e:	b2da      	uxtb	r2, r3
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fb76:	2103      	movs	r1, #3
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f000 f809 	bl	800fb90 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800fb7e:	3708      	adds	r7, #8
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}
 800fb84:	0801b4c0 	.word	0x0801b4c0
 800fb88:	0801b648 	.word	0x0801b648
 800fb8c:	0801b510 	.word	0x0801b510

0800fb90 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b082      	sub	sp, #8
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	460b      	mov	r3, r1
 800fb9a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d106      	bne.n	800fbb0 <netif_issue_reports+0x20>
 800fba2:	4b18      	ldr	r3, [pc, #96]	; (800fc04 <netif_issue_reports+0x74>)
 800fba4:	f240 326d 	movw	r2, #877	; 0x36d
 800fba8:	4917      	ldr	r1, [pc, #92]	; (800fc08 <netif_issue_reports+0x78>)
 800fbaa:	4818      	ldr	r0, [pc, #96]	; (800fc0c <netif_issue_reports+0x7c>)
 800fbac:	f00a f95c 	bl	8019e68 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fbb6:	f003 0304 	and.w	r3, r3, #4
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d01e      	beq.n	800fbfc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fbc4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d017      	beq.n	800fbfc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fbcc:	78fb      	ldrb	r3, [r7, #3]
 800fbce:	f003 0301 	and.w	r3, r3, #1
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d013      	beq.n	800fbfe <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	3304      	adds	r3, #4
 800fbda:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d00e      	beq.n	800fbfe <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fbe6:	f003 0308 	and.w	r3, r3, #8
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d007      	beq.n	800fbfe <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	3304      	adds	r3, #4
 800fbf2:	4619      	mov	r1, r3
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f008 fb9d 	bl	8018334 <etharp_request>
 800fbfa:	e000      	b.n	800fbfe <netif_issue_reports+0x6e>
    return;
 800fbfc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800fbfe:	3708      	adds	r7, #8
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}
 800fc04:	0801b4c0 	.word	0x0801b4c0
 800fc08:	0801b664 	.word	0x0801b664
 800fc0c:	0801b510 	.word	0x0801b510

0800fc10 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b082      	sub	sp, #8
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800fc18:	f7fa ff54 	bl	800aac4 <sys_check_core_locking>

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d107      	bne.n	800fc32 <netif_set_down+0x22>
 800fc22:	4b12      	ldr	r3, [pc, #72]	; (800fc6c <netif_set_down+0x5c>)
 800fc24:	f240 329b 	movw	r2, #923	; 0x39b
 800fc28:	4911      	ldr	r1, [pc, #68]	; (800fc70 <netif_set_down+0x60>)
 800fc2a:	4812      	ldr	r0, [pc, #72]	; (800fc74 <netif_set_down+0x64>)
 800fc2c:	f00a f91c 	bl	8019e68 <iprintf>
 800fc30:	e019      	b.n	800fc66 <netif_set_down+0x56>

  if (netif->flags & NETIF_FLAG_UP) {
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc38:	f003 0301 	and.w	r3, r3, #1
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d012      	beq.n	800fc66 <netif_set_down+0x56>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc46:	f023 0301 	bic.w	r3, r3, #1
 800fc4a:	b2da      	uxtb	r2, r3
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc58:	f003 0308 	and.w	r3, r3, #8
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d002      	beq.n	800fc66 <netif_set_down+0x56>
      etharp_cleanup_netif(netif);
 800fc60:	6878      	ldr	r0, [r7, #4]
 800fc62:	f007 ff21 	bl	8017aa8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800fc66:	3708      	adds	r7, #8
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}
 800fc6c:	0801b4c0 	.word	0x0801b4c0
 800fc70:	0801b688 	.word	0x0801b688
 800fc74:	0801b510 	.word	0x0801b510

0800fc78 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800fc80:	f7fa ff20 	bl	800aac4 <sys_check_core_locking>

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d107      	bne.n	800fc9a <netif_set_link_up+0x22>
 800fc8a:	4b13      	ldr	r3, [pc, #76]	; (800fcd8 <netif_set_link_up+0x60>)
 800fc8c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800fc90:	4912      	ldr	r1, [pc, #72]	; (800fcdc <netif_set_link_up+0x64>)
 800fc92:	4813      	ldr	r0, [pc, #76]	; (800fce0 <netif_set_link_up+0x68>)
 800fc94:	f00a f8e8 	bl	8019e68 <iprintf>
 800fc98:	e01b      	b.n	800fcd2 <netif_set_link_up+0x5a>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fca0:	f003 0304 	and.w	r3, r3, #4
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d114      	bne.n	800fcd2 <netif_set_link_up+0x5a>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fcae:	f043 0304 	orr.w	r3, r3, #4
 800fcb2:	b2da      	uxtb	r2, r3
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fcba:	2103      	movs	r1, #3
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f7ff ff67 	bl	800fb90 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	69db      	ldr	r3, [r3, #28]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d003      	beq.n	800fcd2 <netif_set_link_up+0x5a>
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	69db      	ldr	r3, [r3, #28]
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fcd2:	3708      	adds	r7, #8
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}
 800fcd8:	0801b4c0 	.word	0x0801b4c0
 800fcdc:	0801b6a8 	.word	0x0801b6a8
 800fce0:	0801b510 	.word	0x0801b510

0800fce4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b082      	sub	sp, #8
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800fcec:	f7fa feea 	bl	800aac4 <sys_check_core_locking>

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d107      	bne.n	800fd06 <netif_set_link_down+0x22>
 800fcf6:	4b11      	ldr	r3, [pc, #68]	; (800fd3c <netif_set_link_down+0x58>)
 800fcf8:	f240 4206 	movw	r2, #1030	; 0x406
 800fcfc:	4910      	ldr	r1, [pc, #64]	; (800fd40 <netif_set_link_down+0x5c>)
 800fcfe:	4811      	ldr	r0, [pc, #68]	; (800fd44 <netif_set_link_down+0x60>)
 800fd00:	f00a f8b2 	bl	8019e68 <iprintf>
 800fd04:	e017      	b.n	800fd36 <netif_set_link_down+0x52>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fd0c:	f003 0304 	and.w	r3, r3, #4
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d010      	beq.n	800fd36 <netif_set_link_down+0x52>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fd1a:	f023 0304 	bic.w	r3, r3, #4
 800fd1e:	b2da      	uxtb	r2, r3
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	69db      	ldr	r3, [r3, #28]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d003      	beq.n	800fd36 <netif_set_link_down+0x52>
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	69db      	ldr	r3, [r3, #28]
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fd36:	3708      	adds	r7, #8
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}
 800fd3c:	0801b4c0 	.word	0x0801b4c0
 800fd40:	0801b6cc 	.word	0x0801b6cc
 800fd44:	0801b510 	.word	0x0801b510

0800fd48 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b082      	sub	sp, #8
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
 800fd50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800fd52:	f7fa feb7 	bl	800aac4 <sys_check_core_locking>

  if (netif) {
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d002      	beq.n	800fd62 <netif_set_link_callback+0x1a>
    netif->link_callback = link_callback;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	683a      	ldr	r2, [r7, #0]
 800fd60:	61da      	str	r2, [r3, #28]
  }
}
 800fd62:	bf00      	nop
 800fd64:	3708      	adds	r7, #8
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd80      	pop	{r7, pc}

0800fd6a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800fd6a:	b480      	push	{r7}
 800fd6c:	b085      	sub	sp, #20
 800fd6e:	af00      	add	r7, sp, #0
 800fd70:	60f8      	str	r0, [r7, #12]
 800fd72:	60b9      	str	r1, [r7, #8]
 800fd74:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800fd76:	f06f 030b 	mvn.w	r3, #11
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3714      	adds	r7, #20
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd84:	4770      	bx	lr
	...

0800fd88 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b084      	sub	sp, #16
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	4603      	mov	r3, r0
 800fd90:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800fd92:	f7fa fe97 	bl	800aac4 <sys_check_core_locking>

  if (idx != NETIF_NO_INDEX) {
 800fd96:	79fb      	ldrb	r3, [r7, #7]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d013      	beq.n	800fdc4 <netif_get_by_index+0x3c>
    NETIF_FOREACH(netif) {
 800fd9c:	4b0c      	ldr	r3, [pc, #48]	; (800fdd0 <netif_get_by_index+0x48>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	60fb      	str	r3, [r7, #12]
 800fda2:	e00c      	b.n	800fdbe <netif_get_by_index+0x36>
      if (idx == netif_get_index(netif)) {
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fdaa:	3301      	adds	r3, #1
 800fdac:	b2db      	uxtb	r3, r3
 800fdae:	79fa      	ldrb	r2, [r7, #7]
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	d101      	bne.n	800fdb8 <netif_get_by_index+0x30>
        return netif; /* found! */
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	e006      	b.n	800fdc6 <netif_get_by_index+0x3e>
    NETIF_FOREACH(netif) {
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	60fb      	str	r3, [r7, #12]
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d1ef      	bne.n	800fda4 <netif_get_by_index+0x1c>
      }
    }
  }

  return NULL;
 800fdc4:	2300      	movs	r3, #0
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3710      	adds	r7, #16
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}
 800fdce:	bf00      	nop
 800fdd0:	2401501c 	.word	0x2401501c

0800fdd4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b082      	sub	sp, #8
 800fdd8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800fdda:	f009 ff39 	bl	8019c50 <sys_arch_protect>
 800fdde:	6038      	str	r0, [r7, #0]
 800fde0:	4b0d      	ldr	r3, [pc, #52]	; (800fe18 <pbuf_free_ooseq+0x44>)
 800fde2:	2200      	movs	r2, #0
 800fde4:	701a      	strb	r2, [r3, #0]
 800fde6:	6838      	ldr	r0, [r7, #0]
 800fde8:	f009 ff40 	bl	8019c6c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fdec:	4b0b      	ldr	r3, [pc, #44]	; (800fe1c <pbuf_free_ooseq+0x48>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	607b      	str	r3, [r7, #4]
 800fdf2:	e00a      	b.n	800fe0a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d003      	beq.n	800fe04 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800fdfc:	6878      	ldr	r0, [r7, #4]
 800fdfe:	f002 fde9 	bl	80129d4 <tcp_free_ooseq>
      return;
 800fe02:	e005      	b.n	800fe10 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	68db      	ldr	r3, [r3, #12]
 800fe08:	607b      	str	r3, [r7, #4]
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d1f1      	bne.n	800fdf4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800fe10:	3708      	adds	r7, #8
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}
 800fe16:	bf00      	nop
 800fe18:	24015025 	.word	0x24015025
 800fe1c:	24015034 	.word	0x24015034

0800fe20 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b082      	sub	sp, #8
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800fe28:	f7ff ffd4 	bl	800fdd4 <pbuf_free_ooseq>
}
 800fe2c:	bf00      	nop
 800fe2e:	3708      	adds	r7, #8
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800fe3a:	f009 ff09 	bl	8019c50 <sys_arch_protect>
 800fe3e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800fe40:	4b0f      	ldr	r3, [pc, #60]	; (800fe80 <pbuf_pool_is_empty+0x4c>)
 800fe42:	781b      	ldrb	r3, [r3, #0]
 800fe44:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800fe46:	4b0e      	ldr	r3, [pc, #56]	; (800fe80 <pbuf_pool_is_empty+0x4c>)
 800fe48:	2201      	movs	r2, #1
 800fe4a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f009 ff0d 	bl	8019c6c <sys_arch_unprotect>

  if (!queued) {
 800fe52:	78fb      	ldrb	r3, [r7, #3]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d10f      	bne.n	800fe78 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800fe58:	2100      	movs	r1, #0
 800fe5a:	480a      	ldr	r0, [pc, #40]	; (800fe84 <pbuf_pool_is_empty+0x50>)
 800fe5c:	f7fe fdd2 	bl	800ea04 <tcpip_try_callback>
 800fe60:	4603      	mov	r3, r0
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d008      	beq.n	800fe78 <pbuf_pool_is_empty+0x44>
 800fe66:	f009 fef3 	bl	8019c50 <sys_arch_protect>
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	4b04      	ldr	r3, [pc, #16]	; (800fe80 <pbuf_pool_is_empty+0x4c>)
 800fe6e:	2200      	movs	r2, #0
 800fe70:	701a      	strb	r2, [r3, #0]
 800fe72:	6878      	ldr	r0, [r7, #4]
 800fe74:	f009 fefa 	bl	8019c6c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800fe78:	bf00      	nop
 800fe7a:	3708      	adds	r7, #8
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}
 800fe80:	24015025 	.word	0x24015025
 800fe84:	0800fe21 	.word	0x0800fe21

0800fe88 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b085      	sub	sp, #20
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	60f8      	str	r0, [r7, #12]
 800fe90:	60b9      	str	r1, [r7, #8]
 800fe92:	4611      	mov	r1, r2
 800fe94:	461a      	mov	r2, r3
 800fe96:	460b      	mov	r3, r1
 800fe98:	80fb      	strh	r3, [r7, #6]
 800fe9a:	4613      	mov	r3, r2
 800fe9c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	2200      	movs	r2, #0
 800fea2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	68ba      	ldr	r2, [r7, #8]
 800fea8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	88fa      	ldrh	r2, [r7, #6]
 800feae:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	88ba      	ldrh	r2, [r7, #4]
 800feb4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800feb6:	8b3b      	ldrh	r3, [r7, #24]
 800feb8:	b2da      	uxtb	r2, r3
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	7f3a      	ldrb	r2, [r7, #28]
 800fec2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	2201      	movs	r2, #1
 800fec8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	2200      	movs	r2, #0
 800fece:	73da      	strb	r2, [r3, #15]
}
 800fed0:	bf00      	nop
 800fed2:	3714      	adds	r7, #20
 800fed4:	46bd      	mov	sp, r7
 800fed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feda:	4770      	bx	lr

0800fedc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b08c      	sub	sp, #48	; 0x30
 800fee0:	af02      	add	r7, sp, #8
 800fee2:	4603      	mov	r3, r0
 800fee4:	71fb      	strb	r3, [r7, #7]
 800fee6:	460b      	mov	r3, r1
 800fee8:	80bb      	strh	r3, [r7, #4]
 800feea:	4613      	mov	r3, r2
 800feec:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800feee:	79fb      	ldrb	r3, [r7, #7]
 800fef0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800fef2:	887b      	ldrh	r3, [r7, #2]
 800fef4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fef8:	f000 8082 	beq.w	8010000 <pbuf_alloc+0x124>
 800fefc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ff00:	f300 80ca 	bgt.w	8010098 <pbuf_alloc+0x1bc>
 800ff04:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ff08:	d010      	beq.n	800ff2c <pbuf_alloc+0x50>
 800ff0a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ff0e:	f300 80c3 	bgt.w	8010098 <pbuf_alloc+0x1bc>
 800ff12:	2b01      	cmp	r3, #1
 800ff14:	d002      	beq.n	800ff1c <pbuf_alloc+0x40>
 800ff16:	2b41      	cmp	r3, #65	; 0x41
 800ff18:	f040 80be 	bne.w	8010098 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ff1c:	887a      	ldrh	r2, [r7, #2]
 800ff1e:	88bb      	ldrh	r3, [r7, #4]
 800ff20:	4619      	mov	r1, r3
 800ff22:	2000      	movs	r0, #0
 800ff24:	f000 f8d4 	bl	80100d0 <pbuf_alloc_reference>
 800ff28:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ff2a:	e0bf      	b.n	80100ac <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ff30:	2300      	movs	r3, #0
 800ff32:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ff34:	88bb      	ldrh	r3, [r7, #4]
 800ff36:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ff38:	200c      	movs	r0, #12
 800ff3a:	f7ff fb8d 	bl	800f658 <memp_malloc>
 800ff3e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ff40:	693b      	ldr	r3, [r7, #16]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d109      	bne.n	800ff5a <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800ff46:	f7ff ff75 	bl	800fe34 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ff4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d002      	beq.n	800ff56 <pbuf_alloc+0x7a>
            pbuf_free(p);
 800ff50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff52:	f000 faab 	bl	80104ac <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ff56:	2300      	movs	r3, #0
 800ff58:	e0a9      	b.n	80100ae <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ff5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ff5c:	3303      	adds	r3, #3
 800ff5e:	b29b      	uxth	r3, r3
 800ff60:	f023 0303 	bic.w	r3, r3, #3
 800ff64:	b29a      	uxth	r2, r3
 800ff66:	f240 53ec 	movw	r3, #1516	; 0x5ec
 800ff6a:	1a9b      	subs	r3, r3, r2
 800ff6c:	b29b      	uxth	r3, r3
 800ff6e:	8b7a      	ldrh	r2, [r7, #26]
 800ff70:	4293      	cmp	r3, r2
 800ff72:	bf28      	it	cs
 800ff74:	4613      	movcs	r3, r2
 800ff76:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ff78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ff7a:	3310      	adds	r3, #16
 800ff7c:	693a      	ldr	r2, [r7, #16]
 800ff7e:	4413      	add	r3, r2
 800ff80:	3303      	adds	r3, #3
 800ff82:	f023 0303 	bic.w	r3, r3, #3
 800ff86:	4618      	mov	r0, r3
 800ff88:	89f9      	ldrh	r1, [r7, #14]
 800ff8a:	8b7a      	ldrh	r2, [r7, #26]
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	9301      	str	r3, [sp, #4]
 800ff90:	887b      	ldrh	r3, [r7, #2]
 800ff92:	9300      	str	r3, [sp, #0]
 800ff94:	460b      	mov	r3, r1
 800ff96:	4601      	mov	r1, r0
 800ff98:	6938      	ldr	r0, [r7, #16]
 800ff9a:	f7ff ff75 	bl	800fe88 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	685b      	ldr	r3, [r3, #4]
 800ffa2:	f003 0303 	and.w	r3, r3, #3
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d006      	beq.n	800ffb8 <pbuf_alloc+0xdc>
 800ffaa:	4b43      	ldr	r3, [pc, #268]	; (80100b8 <pbuf_alloc+0x1dc>)
 800ffac:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ffb0:	4942      	ldr	r1, [pc, #264]	; (80100bc <pbuf_alloc+0x1e0>)
 800ffb2:	4843      	ldr	r0, [pc, #268]	; (80100c0 <pbuf_alloc+0x1e4>)
 800ffb4:	f009 ff58 	bl	8019e68 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ffb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ffba:	3303      	adds	r3, #3
 800ffbc:	f023 0303 	bic.w	r3, r3, #3
 800ffc0:	f240 52ec 	movw	r2, #1516	; 0x5ec
 800ffc4:	4293      	cmp	r3, r2
 800ffc6:	d106      	bne.n	800ffd6 <pbuf_alloc+0xfa>
 800ffc8:	4b3b      	ldr	r3, [pc, #236]	; (80100b8 <pbuf_alloc+0x1dc>)
 800ffca:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ffce:	493d      	ldr	r1, [pc, #244]	; (80100c4 <pbuf_alloc+0x1e8>)
 800ffd0:	483b      	ldr	r0, [pc, #236]	; (80100c0 <pbuf_alloc+0x1e4>)
 800ffd2:	f009 ff49 	bl	8019e68 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ffd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d102      	bne.n	800ffe2 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	627b      	str	r3, [r7, #36]	; 0x24
 800ffe0:	e002      	b.n	800ffe8 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ffe2:	69fb      	ldr	r3, [r7, #28]
 800ffe4:	693a      	ldr	r2, [r7, #16]
 800ffe6:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ffe8:	693b      	ldr	r3, [r7, #16]
 800ffea:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ffec:	8b7a      	ldrh	r2, [r7, #26]
 800ffee:	89fb      	ldrh	r3, [r7, #14]
 800fff0:	1ad3      	subs	r3, r2, r3
 800fff2:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800fff4:	2300      	movs	r3, #0
 800fff6:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800fff8:	8b7b      	ldrh	r3, [r7, #26]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d19c      	bne.n	800ff38 <pbuf_alloc+0x5c>
      break;
 800fffe:	e055      	b.n	80100ac <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010000:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010002:	3303      	adds	r3, #3
 8010004:	b29b      	uxth	r3, r3
 8010006:	f023 0303 	bic.w	r3, r3, #3
 801000a:	b29a      	uxth	r2, r3
 801000c:	88bb      	ldrh	r3, [r7, #4]
 801000e:	3303      	adds	r3, #3
 8010010:	b29b      	uxth	r3, r3
 8010012:	f023 0303 	bic.w	r3, r3, #3
 8010016:	b29b      	uxth	r3, r3
 8010018:	4413      	add	r3, r2
 801001a:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801001c:	8b3b      	ldrh	r3, [r7, #24]
 801001e:	3310      	adds	r3, #16
 8010020:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010022:	8b3a      	ldrh	r2, [r7, #24]
 8010024:	88bb      	ldrh	r3, [r7, #4]
 8010026:	3303      	adds	r3, #3
 8010028:	f023 0303 	bic.w	r3, r3, #3
 801002c:	429a      	cmp	r2, r3
 801002e:	d306      	bcc.n	801003e <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010030:	8afa      	ldrh	r2, [r7, #22]
 8010032:	88bb      	ldrh	r3, [r7, #4]
 8010034:	3303      	adds	r3, #3
 8010036:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801003a:	429a      	cmp	r2, r3
 801003c:	d201      	bcs.n	8010042 <pbuf_alloc+0x166>
        return NULL;
 801003e:	2300      	movs	r3, #0
 8010040:	e035      	b.n	80100ae <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010042:	8afb      	ldrh	r3, [r7, #22]
 8010044:	4618      	mov	r0, r3
 8010046:	f7ff f95f 	bl	800f308 <mem_malloc>
 801004a:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801004c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801004e:	2b00      	cmp	r3, #0
 8010050:	d101      	bne.n	8010056 <pbuf_alloc+0x17a>
        return NULL;
 8010052:	2300      	movs	r3, #0
 8010054:	e02b      	b.n	80100ae <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010056:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010058:	3310      	adds	r3, #16
 801005a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801005c:	4413      	add	r3, r2
 801005e:	3303      	adds	r3, #3
 8010060:	f023 0303 	bic.w	r3, r3, #3
 8010064:	4618      	mov	r0, r3
 8010066:	88b9      	ldrh	r1, [r7, #4]
 8010068:	88ba      	ldrh	r2, [r7, #4]
 801006a:	2300      	movs	r3, #0
 801006c:	9301      	str	r3, [sp, #4]
 801006e:	887b      	ldrh	r3, [r7, #2]
 8010070:	9300      	str	r3, [sp, #0]
 8010072:	460b      	mov	r3, r1
 8010074:	4601      	mov	r1, r0
 8010076:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010078:	f7ff ff06 	bl	800fe88 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801007c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801007e:	685b      	ldr	r3, [r3, #4]
 8010080:	f003 0303 	and.w	r3, r3, #3
 8010084:	2b00      	cmp	r3, #0
 8010086:	d010      	beq.n	80100aa <pbuf_alloc+0x1ce>
 8010088:	4b0b      	ldr	r3, [pc, #44]	; (80100b8 <pbuf_alloc+0x1dc>)
 801008a:	f44f 7291 	mov.w	r2, #290	; 0x122
 801008e:	490e      	ldr	r1, [pc, #56]	; (80100c8 <pbuf_alloc+0x1ec>)
 8010090:	480b      	ldr	r0, [pc, #44]	; (80100c0 <pbuf_alloc+0x1e4>)
 8010092:	f009 fee9 	bl	8019e68 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010096:	e008      	b.n	80100aa <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010098:	4b07      	ldr	r3, [pc, #28]	; (80100b8 <pbuf_alloc+0x1dc>)
 801009a:	f240 1227 	movw	r2, #295	; 0x127
 801009e:	490b      	ldr	r1, [pc, #44]	; (80100cc <pbuf_alloc+0x1f0>)
 80100a0:	4807      	ldr	r0, [pc, #28]	; (80100c0 <pbuf_alloc+0x1e4>)
 80100a2:	f009 fee1 	bl	8019e68 <iprintf>
      return NULL;
 80100a6:	2300      	movs	r3, #0
 80100a8:	e001      	b.n	80100ae <pbuf_alloc+0x1d2>
      break;
 80100aa:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80100ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	3728      	adds	r7, #40	; 0x28
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}
 80100b6:	bf00      	nop
 80100b8:	0801b6f0 	.word	0x0801b6f0
 80100bc:	0801b720 	.word	0x0801b720
 80100c0:	0801b750 	.word	0x0801b750
 80100c4:	0801b778 	.word	0x0801b778
 80100c8:	0801b7ac 	.word	0x0801b7ac
 80100cc:	0801b7d8 	.word	0x0801b7d8

080100d0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b086      	sub	sp, #24
 80100d4:	af02      	add	r7, sp, #8
 80100d6:	6078      	str	r0, [r7, #4]
 80100d8:	460b      	mov	r3, r1
 80100da:	807b      	strh	r3, [r7, #2]
 80100dc:	4613      	mov	r3, r2
 80100de:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80100e0:	883b      	ldrh	r3, [r7, #0]
 80100e2:	2b41      	cmp	r3, #65	; 0x41
 80100e4:	d009      	beq.n	80100fa <pbuf_alloc_reference+0x2a>
 80100e6:	883b      	ldrh	r3, [r7, #0]
 80100e8:	2b01      	cmp	r3, #1
 80100ea:	d006      	beq.n	80100fa <pbuf_alloc_reference+0x2a>
 80100ec:	4b0f      	ldr	r3, [pc, #60]	; (801012c <pbuf_alloc_reference+0x5c>)
 80100ee:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80100f2:	490f      	ldr	r1, [pc, #60]	; (8010130 <pbuf_alloc_reference+0x60>)
 80100f4:	480f      	ldr	r0, [pc, #60]	; (8010134 <pbuf_alloc_reference+0x64>)
 80100f6:	f009 feb7 	bl	8019e68 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80100fa:	200b      	movs	r0, #11
 80100fc:	f7ff faac 	bl	800f658 <memp_malloc>
 8010100:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d101      	bne.n	801010c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010108:	2300      	movs	r3, #0
 801010a:	e00b      	b.n	8010124 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801010c:	8879      	ldrh	r1, [r7, #2]
 801010e:	887a      	ldrh	r2, [r7, #2]
 8010110:	2300      	movs	r3, #0
 8010112:	9301      	str	r3, [sp, #4]
 8010114:	883b      	ldrh	r3, [r7, #0]
 8010116:	9300      	str	r3, [sp, #0]
 8010118:	460b      	mov	r3, r1
 801011a:	6879      	ldr	r1, [r7, #4]
 801011c:	68f8      	ldr	r0, [r7, #12]
 801011e:	f7ff feb3 	bl	800fe88 <pbuf_init_alloced_pbuf>
  return p;
 8010122:	68fb      	ldr	r3, [r7, #12]
}
 8010124:	4618      	mov	r0, r3
 8010126:	3710      	adds	r7, #16
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}
 801012c:	0801b6f0 	.word	0x0801b6f0
 8010130:	0801b7f4 	.word	0x0801b7f4
 8010134:	0801b750 	.word	0x0801b750

08010138 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b088      	sub	sp, #32
 801013c:	af02      	add	r7, sp, #8
 801013e:	607b      	str	r3, [r7, #4]
 8010140:	4603      	mov	r3, r0
 8010142:	73fb      	strb	r3, [r7, #15]
 8010144:	460b      	mov	r3, r1
 8010146:	81bb      	strh	r3, [r7, #12]
 8010148:	4613      	mov	r3, r2
 801014a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801014c:	7bfb      	ldrb	r3, [r7, #15]
 801014e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010150:	8a7b      	ldrh	r3, [r7, #18]
 8010152:	3303      	adds	r3, #3
 8010154:	f023 0203 	bic.w	r2, r3, #3
 8010158:	89bb      	ldrh	r3, [r7, #12]
 801015a:	441a      	add	r2, r3
 801015c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801015e:	429a      	cmp	r2, r3
 8010160:	d901      	bls.n	8010166 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010162:	2300      	movs	r3, #0
 8010164:	e018      	b.n	8010198 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010166:	6a3b      	ldr	r3, [r7, #32]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d007      	beq.n	801017c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801016c:	8a7b      	ldrh	r3, [r7, #18]
 801016e:	3303      	adds	r3, #3
 8010170:	f023 0303 	bic.w	r3, r3, #3
 8010174:	6a3a      	ldr	r2, [r7, #32]
 8010176:	4413      	add	r3, r2
 8010178:	617b      	str	r3, [r7, #20]
 801017a:	e001      	b.n	8010180 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801017c:	2300      	movs	r3, #0
 801017e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	89b9      	ldrh	r1, [r7, #12]
 8010184:	89ba      	ldrh	r2, [r7, #12]
 8010186:	2302      	movs	r3, #2
 8010188:	9301      	str	r3, [sp, #4]
 801018a:	897b      	ldrh	r3, [r7, #10]
 801018c:	9300      	str	r3, [sp, #0]
 801018e:	460b      	mov	r3, r1
 8010190:	6979      	ldr	r1, [r7, #20]
 8010192:	f7ff fe79 	bl	800fe88 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010196:	687b      	ldr	r3, [r7, #4]
}
 8010198:	4618      	mov	r0, r3
 801019a:	3718      	adds	r7, #24
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}

080101a0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b084      	sub	sp, #16
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	460b      	mov	r3, r1
 80101aa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d106      	bne.n	80101c0 <pbuf_realloc+0x20>
 80101b2:	4b3a      	ldr	r3, [pc, #232]	; (801029c <pbuf_realloc+0xfc>)
 80101b4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80101b8:	4939      	ldr	r1, [pc, #228]	; (80102a0 <pbuf_realloc+0x100>)
 80101ba:	483a      	ldr	r0, [pc, #232]	; (80102a4 <pbuf_realloc+0x104>)
 80101bc:	f009 fe54 	bl	8019e68 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	891b      	ldrh	r3, [r3, #8]
 80101c4:	887a      	ldrh	r2, [r7, #2]
 80101c6:	429a      	cmp	r2, r3
 80101c8:	d263      	bcs.n	8010292 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	891a      	ldrh	r2, [r3, #8]
 80101ce:	887b      	ldrh	r3, [r7, #2]
 80101d0:	1ad3      	subs	r3, r2, r3
 80101d2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80101d4:	887b      	ldrh	r3, [r7, #2]
 80101d6:	817b      	strh	r3, [r7, #10]
  q = p;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80101dc:	e018      	b.n	8010210 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	895b      	ldrh	r3, [r3, #10]
 80101e2:	897a      	ldrh	r2, [r7, #10]
 80101e4:	1ad3      	subs	r3, r2, r3
 80101e6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	891a      	ldrh	r2, [r3, #8]
 80101ec:	893b      	ldrh	r3, [r7, #8]
 80101ee:	1ad3      	subs	r3, r2, r3
 80101f0:	b29a      	uxth	r2, r3
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d106      	bne.n	8010210 <pbuf_realloc+0x70>
 8010202:	4b26      	ldr	r3, [pc, #152]	; (801029c <pbuf_realloc+0xfc>)
 8010204:	f240 12af 	movw	r2, #431	; 0x1af
 8010208:	4927      	ldr	r1, [pc, #156]	; (80102a8 <pbuf_realloc+0x108>)
 801020a:	4826      	ldr	r0, [pc, #152]	; (80102a4 <pbuf_realloc+0x104>)
 801020c:	f009 fe2c 	bl	8019e68 <iprintf>
  while (rem_len > q->len) {
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	895b      	ldrh	r3, [r3, #10]
 8010214:	897a      	ldrh	r2, [r7, #10]
 8010216:	429a      	cmp	r2, r3
 8010218:	d8e1      	bhi.n	80101de <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	7b1b      	ldrb	r3, [r3, #12]
 801021e:	f003 030f 	and.w	r3, r3, #15
 8010222:	2b00      	cmp	r3, #0
 8010224:	d121      	bne.n	801026a <pbuf_realloc+0xca>
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	895b      	ldrh	r3, [r3, #10]
 801022a:	897a      	ldrh	r2, [r7, #10]
 801022c:	429a      	cmp	r2, r3
 801022e:	d01c      	beq.n	801026a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	7b5b      	ldrb	r3, [r3, #13]
 8010234:	f003 0302 	and.w	r3, r3, #2
 8010238:	2b00      	cmp	r3, #0
 801023a:	d116      	bne.n	801026a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	685a      	ldr	r2, [r3, #4]
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	1ad3      	subs	r3, r2, r3
 8010244:	b29a      	uxth	r2, r3
 8010246:	897b      	ldrh	r3, [r7, #10]
 8010248:	4413      	add	r3, r2
 801024a:	b29b      	uxth	r3, r3
 801024c:	4619      	mov	r1, r3
 801024e:	68f8      	ldr	r0, [r7, #12]
 8010250:	f7fe ff4a 	bl	800f0e8 <mem_trim>
 8010254:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d106      	bne.n	801026a <pbuf_realloc+0xca>
 801025c:	4b0f      	ldr	r3, [pc, #60]	; (801029c <pbuf_realloc+0xfc>)
 801025e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8010262:	4912      	ldr	r1, [pc, #72]	; (80102ac <pbuf_realloc+0x10c>)
 8010264:	480f      	ldr	r0, [pc, #60]	; (80102a4 <pbuf_realloc+0x104>)
 8010266:	f009 fdff 	bl	8019e68 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	897a      	ldrh	r2, [r7, #10]
 801026e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	895a      	ldrh	r2, [r3, #10]
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d004      	beq.n	801028a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	4618      	mov	r0, r3
 8010286:	f000 f911 	bl	80104ac <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	2200      	movs	r2, #0
 801028e:	601a      	str	r2, [r3, #0]
 8010290:	e000      	b.n	8010294 <pbuf_realloc+0xf4>
    return;
 8010292:	bf00      	nop

}
 8010294:	3710      	adds	r7, #16
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
 801029a:	bf00      	nop
 801029c:	0801b6f0 	.word	0x0801b6f0
 80102a0:	0801b808 	.word	0x0801b808
 80102a4:	0801b750 	.word	0x0801b750
 80102a8:	0801b820 	.word	0x0801b820
 80102ac:	0801b838 	.word	0x0801b838

080102b0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b086      	sub	sp, #24
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	60f8      	str	r0, [r7, #12]
 80102b8:	60b9      	str	r1, [r7, #8]
 80102ba:	4613      	mov	r3, r2
 80102bc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d106      	bne.n	80102d2 <pbuf_add_header_impl+0x22>
 80102c4:	4b2b      	ldr	r3, [pc, #172]	; (8010374 <pbuf_add_header_impl+0xc4>)
 80102c6:	f240 12df 	movw	r2, #479	; 0x1df
 80102ca:	492b      	ldr	r1, [pc, #172]	; (8010378 <pbuf_add_header_impl+0xc8>)
 80102cc:	482b      	ldr	r0, [pc, #172]	; (801037c <pbuf_add_header_impl+0xcc>)
 80102ce:	f009 fdcb 	bl	8019e68 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d003      	beq.n	80102e0 <pbuf_add_header_impl+0x30>
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80102de:	d301      	bcc.n	80102e4 <pbuf_add_header_impl+0x34>
    return 1;
 80102e0:	2301      	movs	r3, #1
 80102e2:	e043      	b.n	801036c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d101      	bne.n	80102ee <pbuf_add_header_impl+0x3e>
    return 0;
 80102ea:	2300      	movs	r3, #0
 80102ec:	e03e      	b.n	801036c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80102ee:	68bb      	ldr	r3, [r7, #8]
 80102f0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	891a      	ldrh	r2, [r3, #8]
 80102f6:	8a7b      	ldrh	r3, [r7, #18]
 80102f8:	4413      	add	r3, r2
 80102fa:	b29b      	uxth	r3, r3
 80102fc:	8a7a      	ldrh	r2, [r7, #18]
 80102fe:	429a      	cmp	r2, r3
 8010300:	d901      	bls.n	8010306 <pbuf_add_header_impl+0x56>
    return 1;
 8010302:	2301      	movs	r3, #1
 8010304:	e032      	b.n	801036c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	7b1b      	ldrb	r3, [r3, #12]
 801030a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801030c:	8a3b      	ldrh	r3, [r7, #16]
 801030e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010312:	2b00      	cmp	r3, #0
 8010314:	d00c      	beq.n	8010330 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	685a      	ldr	r2, [r3, #4]
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	425b      	negs	r3, r3
 801031e:	4413      	add	r3, r2
 8010320:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	3310      	adds	r3, #16
 8010326:	697a      	ldr	r2, [r7, #20]
 8010328:	429a      	cmp	r2, r3
 801032a:	d20d      	bcs.n	8010348 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801032c:	2301      	movs	r3, #1
 801032e:	e01d      	b.n	801036c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010330:	79fb      	ldrb	r3, [r7, #7]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d006      	beq.n	8010344 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	685a      	ldr	r2, [r3, #4]
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	425b      	negs	r3, r3
 801033e:	4413      	add	r3, r2
 8010340:	617b      	str	r3, [r7, #20]
 8010342:	e001      	b.n	8010348 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010344:	2301      	movs	r3, #1
 8010346:	e011      	b.n	801036c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	697a      	ldr	r2, [r7, #20]
 801034c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	895a      	ldrh	r2, [r3, #10]
 8010352:	8a7b      	ldrh	r3, [r7, #18]
 8010354:	4413      	add	r3, r2
 8010356:	b29a      	uxth	r2, r3
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	891a      	ldrh	r2, [r3, #8]
 8010360:	8a7b      	ldrh	r3, [r7, #18]
 8010362:	4413      	add	r3, r2
 8010364:	b29a      	uxth	r2, r3
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	811a      	strh	r2, [r3, #8]


  return 0;
 801036a:	2300      	movs	r3, #0
}
 801036c:	4618      	mov	r0, r3
 801036e:	3718      	adds	r7, #24
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}
 8010374:	0801b6f0 	.word	0x0801b6f0
 8010378:	0801b854 	.word	0x0801b854
 801037c:	0801b750 	.word	0x0801b750

08010380 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b082      	sub	sp, #8
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801038a:	2200      	movs	r2, #0
 801038c:	6839      	ldr	r1, [r7, #0]
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f7ff ff8e 	bl	80102b0 <pbuf_add_header_impl>
 8010394:	4603      	mov	r3, r0
}
 8010396:	4618      	mov	r0, r3
 8010398:	3708      	adds	r7, #8
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}
	...

080103a0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b084      	sub	sp, #16
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
 80103a8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d106      	bne.n	80103be <pbuf_remove_header+0x1e>
 80103b0:	4b20      	ldr	r3, [pc, #128]	; (8010434 <pbuf_remove_header+0x94>)
 80103b2:	f240 224b 	movw	r2, #587	; 0x24b
 80103b6:	4920      	ldr	r1, [pc, #128]	; (8010438 <pbuf_remove_header+0x98>)
 80103b8:	4820      	ldr	r0, [pc, #128]	; (801043c <pbuf_remove_header+0x9c>)
 80103ba:	f009 fd55 	bl	8019e68 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d003      	beq.n	80103cc <pbuf_remove_header+0x2c>
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103ca:	d301      	bcc.n	80103d0 <pbuf_remove_header+0x30>
    return 1;
 80103cc:	2301      	movs	r3, #1
 80103ce:	e02c      	b.n	801042a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d101      	bne.n	80103da <pbuf_remove_header+0x3a>
    return 0;
 80103d6:	2300      	movs	r3, #0
 80103d8:	e027      	b.n	801042a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	895b      	ldrh	r3, [r3, #10]
 80103e2:	89fa      	ldrh	r2, [r7, #14]
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d908      	bls.n	80103fa <pbuf_remove_header+0x5a>
 80103e8:	4b12      	ldr	r3, [pc, #72]	; (8010434 <pbuf_remove_header+0x94>)
 80103ea:	f240 2255 	movw	r2, #597	; 0x255
 80103ee:	4914      	ldr	r1, [pc, #80]	; (8010440 <pbuf_remove_header+0xa0>)
 80103f0:	4812      	ldr	r0, [pc, #72]	; (801043c <pbuf_remove_header+0x9c>)
 80103f2:	f009 fd39 	bl	8019e68 <iprintf>
 80103f6:	2301      	movs	r3, #1
 80103f8:	e017      	b.n	801042a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	685b      	ldr	r3, [r3, #4]
 80103fe:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	685a      	ldr	r2, [r3, #4]
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	441a      	add	r2, r3
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	895a      	ldrh	r2, [r3, #10]
 8010410:	89fb      	ldrh	r3, [r7, #14]
 8010412:	1ad3      	subs	r3, r2, r3
 8010414:	b29a      	uxth	r2, r3
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	891a      	ldrh	r2, [r3, #8]
 801041e:	89fb      	ldrh	r3, [r7, #14]
 8010420:	1ad3      	subs	r3, r2, r3
 8010422:	b29a      	uxth	r2, r3
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010428:	2300      	movs	r3, #0
}
 801042a:	4618      	mov	r0, r3
 801042c:	3710      	adds	r7, #16
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}
 8010432:	bf00      	nop
 8010434:	0801b6f0 	.word	0x0801b6f0
 8010438:	0801b854 	.word	0x0801b854
 801043c:	0801b750 	.word	0x0801b750
 8010440:	0801b860 	.word	0x0801b860

08010444 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b082      	sub	sp, #8
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	460b      	mov	r3, r1
 801044e:	807b      	strh	r3, [r7, #2]
 8010450:	4613      	mov	r3, r2
 8010452:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010454:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010458:	2b00      	cmp	r3, #0
 801045a:	da08      	bge.n	801046e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801045c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010460:	425b      	negs	r3, r3
 8010462:	4619      	mov	r1, r3
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f7ff ff9b 	bl	80103a0 <pbuf_remove_header>
 801046a:	4603      	mov	r3, r0
 801046c:	e007      	b.n	801047e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801046e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010472:	787a      	ldrb	r2, [r7, #1]
 8010474:	4619      	mov	r1, r3
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f7ff ff1a 	bl	80102b0 <pbuf_add_header_impl>
 801047c:	4603      	mov	r3, r0
  }
}
 801047e:	4618      	mov	r0, r3
 8010480:	3708      	adds	r7, #8
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}

08010486 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010486:	b580      	push	{r7, lr}
 8010488:	b082      	sub	sp, #8
 801048a:	af00      	add	r7, sp, #0
 801048c:	6078      	str	r0, [r7, #4]
 801048e:	460b      	mov	r3, r1
 8010490:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8010492:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010496:	2201      	movs	r2, #1
 8010498:	4619      	mov	r1, r3
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f7ff ffd2 	bl	8010444 <pbuf_header_impl>
 80104a0:	4603      	mov	r3, r0
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	3708      	adds	r7, #8
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}
	...

080104ac <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b088      	sub	sp, #32
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d10b      	bne.n	80104d2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d106      	bne.n	80104ce <pbuf_free+0x22>
 80104c0:	4b3b      	ldr	r3, [pc, #236]	; (80105b0 <pbuf_free+0x104>)
 80104c2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80104c6:	493b      	ldr	r1, [pc, #236]	; (80105b4 <pbuf_free+0x108>)
 80104c8:	483b      	ldr	r0, [pc, #236]	; (80105b8 <pbuf_free+0x10c>)
 80104ca:	f009 fccd 	bl	8019e68 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80104ce:	2300      	movs	r3, #0
 80104d0:	e069      	b.n	80105a6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80104d2:	2300      	movs	r3, #0
 80104d4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80104d6:	e062      	b.n	801059e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80104d8:	f009 fbba 	bl	8019c50 <sys_arch_protect>
 80104dc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	7b9b      	ldrb	r3, [r3, #14]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d106      	bne.n	80104f4 <pbuf_free+0x48>
 80104e6:	4b32      	ldr	r3, [pc, #200]	; (80105b0 <pbuf_free+0x104>)
 80104e8:	f240 22f1 	movw	r2, #753	; 0x2f1
 80104ec:	4933      	ldr	r1, [pc, #204]	; (80105bc <pbuf_free+0x110>)
 80104ee:	4832      	ldr	r0, [pc, #200]	; (80105b8 <pbuf_free+0x10c>)
 80104f0:	f009 fcba 	bl	8019e68 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	7b9b      	ldrb	r3, [r3, #14]
 80104f8:	3b01      	subs	r3, #1
 80104fa:	b2da      	uxtb	r2, r3
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	739a      	strb	r2, [r3, #14]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	7b9b      	ldrb	r3, [r3, #14]
 8010504:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8010506:	69b8      	ldr	r0, [r7, #24]
 8010508:	f009 fbb0 	bl	8019c6c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801050c:	7dfb      	ldrb	r3, [r7, #23]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d143      	bne.n	801059a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	7b1b      	ldrb	r3, [r3, #12]
 801051c:	f003 030f 	and.w	r3, r3, #15
 8010520:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	7b5b      	ldrb	r3, [r3, #13]
 8010526:	f003 0302 	and.w	r3, r3, #2
 801052a:	2b00      	cmp	r3, #0
 801052c:	d011      	beq.n	8010552 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010532:	68bb      	ldr	r3, [r7, #8]
 8010534:	691b      	ldr	r3, [r3, #16]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d106      	bne.n	8010548 <pbuf_free+0x9c>
 801053a:	4b1d      	ldr	r3, [pc, #116]	; (80105b0 <pbuf_free+0x104>)
 801053c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010540:	491f      	ldr	r1, [pc, #124]	; (80105c0 <pbuf_free+0x114>)
 8010542:	481d      	ldr	r0, [pc, #116]	; (80105b8 <pbuf_free+0x10c>)
 8010544:	f009 fc90 	bl	8019e68 <iprintf>
        pc->custom_free_function(p);
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	691b      	ldr	r3, [r3, #16]
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	4798      	blx	r3
 8010550:	e01d      	b.n	801058e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010552:	7bfb      	ldrb	r3, [r7, #15]
 8010554:	2b02      	cmp	r3, #2
 8010556:	d104      	bne.n	8010562 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8010558:	6879      	ldr	r1, [r7, #4]
 801055a:	200c      	movs	r0, #12
 801055c:	f7ff f8f2 	bl	800f744 <memp_free>
 8010560:	e015      	b.n	801058e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010562:	7bfb      	ldrb	r3, [r7, #15]
 8010564:	2b01      	cmp	r3, #1
 8010566:	d104      	bne.n	8010572 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8010568:	6879      	ldr	r1, [r7, #4]
 801056a:	200b      	movs	r0, #11
 801056c:	f7ff f8ea 	bl	800f744 <memp_free>
 8010570:	e00d      	b.n	801058e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010572:	7bfb      	ldrb	r3, [r7, #15]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d103      	bne.n	8010580 <pbuf_free+0xd4>
          mem_free(p);
 8010578:	6878      	ldr	r0, [r7, #4]
 801057a:	f7fe fd25 	bl	800efc8 <mem_free>
 801057e:	e006      	b.n	801058e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010580:	4b0b      	ldr	r3, [pc, #44]	; (80105b0 <pbuf_free+0x104>)
 8010582:	f240 320f 	movw	r2, #783	; 0x30f
 8010586:	490f      	ldr	r1, [pc, #60]	; (80105c4 <pbuf_free+0x118>)
 8010588:	480b      	ldr	r0, [pc, #44]	; (80105b8 <pbuf_free+0x10c>)
 801058a:	f009 fc6d 	bl	8019e68 <iprintf>
        }
      }
      count++;
 801058e:	7ffb      	ldrb	r3, [r7, #31]
 8010590:	3301      	adds	r3, #1
 8010592:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8010594:	693b      	ldr	r3, [r7, #16]
 8010596:	607b      	str	r3, [r7, #4]
 8010598:	e001      	b.n	801059e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801059a:	2300      	movs	r3, #0
 801059c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d199      	bne.n	80104d8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80105a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	3720      	adds	r7, #32
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}
 80105ae:	bf00      	nop
 80105b0:	0801b6f0 	.word	0x0801b6f0
 80105b4:	0801b854 	.word	0x0801b854
 80105b8:	0801b750 	.word	0x0801b750
 80105bc:	0801b880 	.word	0x0801b880
 80105c0:	0801b898 	.word	0x0801b898
 80105c4:	0801b8bc 	.word	0x0801b8bc

080105c8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80105c8:	b480      	push	{r7}
 80105ca:	b085      	sub	sp, #20
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80105d0:	2300      	movs	r3, #0
 80105d2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80105d4:	e005      	b.n	80105e2 <pbuf_clen+0x1a>
    ++len;
 80105d6:	89fb      	ldrh	r3, [r7, #14]
 80105d8:	3301      	adds	r3, #1
 80105da:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d1f6      	bne.n	80105d6 <pbuf_clen+0xe>
  }
  return len;
 80105e8:	89fb      	ldrh	r3, [r7, #14]
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3714      	adds	r7, #20
 80105ee:	46bd      	mov	sp, r7
 80105f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f4:	4770      	bx	lr
	...

080105f8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b084      	sub	sp, #16
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d016      	beq.n	8010634 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8010606:	f009 fb23 	bl	8019c50 <sys_arch_protect>
 801060a:	60f8      	str	r0, [r7, #12]
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	7b9b      	ldrb	r3, [r3, #14]
 8010610:	3301      	adds	r3, #1
 8010612:	b2da      	uxtb	r2, r3
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	739a      	strb	r2, [r3, #14]
 8010618:	68f8      	ldr	r0, [r7, #12]
 801061a:	f009 fb27 	bl	8019c6c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	7b9b      	ldrb	r3, [r3, #14]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d106      	bne.n	8010634 <pbuf_ref+0x3c>
 8010626:	4b05      	ldr	r3, [pc, #20]	; (801063c <pbuf_ref+0x44>)
 8010628:	f240 3242 	movw	r2, #834	; 0x342
 801062c:	4904      	ldr	r1, [pc, #16]	; (8010640 <pbuf_ref+0x48>)
 801062e:	4805      	ldr	r0, [pc, #20]	; (8010644 <pbuf_ref+0x4c>)
 8010630:	f009 fc1a 	bl	8019e68 <iprintf>
  }
}
 8010634:	bf00      	nop
 8010636:	3710      	adds	r7, #16
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}
 801063c:	0801b6f0 	.word	0x0801b6f0
 8010640:	0801b8d0 	.word	0x0801b8d0
 8010644:	0801b750 	.word	0x0801b750

08010648 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b084      	sub	sp, #16
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
 8010650:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d002      	beq.n	801065e <pbuf_cat+0x16>
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d107      	bne.n	801066e <pbuf_cat+0x26>
 801065e:	4b20      	ldr	r3, [pc, #128]	; (80106e0 <pbuf_cat+0x98>)
 8010660:	f240 3259 	movw	r2, #857	; 0x359
 8010664:	491f      	ldr	r1, [pc, #124]	; (80106e4 <pbuf_cat+0x9c>)
 8010666:	4820      	ldr	r0, [pc, #128]	; (80106e8 <pbuf_cat+0xa0>)
 8010668:	f009 fbfe 	bl	8019e68 <iprintf>
 801066c:	e034      	b.n	80106d8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	60fb      	str	r3, [r7, #12]
 8010672:	e00a      	b.n	801068a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	891a      	ldrh	r2, [r3, #8]
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	891b      	ldrh	r3, [r3, #8]
 801067c:	4413      	add	r3, r2
 801067e:	b29a      	uxth	r2, r3
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	60fb      	str	r3, [r7, #12]
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d1f0      	bne.n	8010674 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	891a      	ldrh	r2, [r3, #8]
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	895b      	ldrh	r3, [r3, #10]
 801069a:	429a      	cmp	r2, r3
 801069c:	d006      	beq.n	80106ac <pbuf_cat+0x64>
 801069e:	4b10      	ldr	r3, [pc, #64]	; (80106e0 <pbuf_cat+0x98>)
 80106a0:	f240 3262 	movw	r2, #866	; 0x362
 80106a4:	4911      	ldr	r1, [pc, #68]	; (80106ec <pbuf_cat+0xa4>)
 80106a6:	4810      	ldr	r0, [pc, #64]	; (80106e8 <pbuf_cat+0xa0>)
 80106a8:	f009 fbde 	bl	8019e68 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d006      	beq.n	80106c2 <pbuf_cat+0x7a>
 80106b4:	4b0a      	ldr	r3, [pc, #40]	; (80106e0 <pbuf_cat+0x98>)
 80106b6:	f240 3263 	movw	r2, #867	; 0x363
 80106ba:	490d      	ldr	r1, [pc, #52]	; (80106f0 <pbuf_cat+0xa8>)
 80106bc:	480a      	ldr	r0, [pc, #40]	; (80106e8 <pbuf_cat+0xa0>)
 80106be:	f009 fbd3 	bl	8019e68 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	891a      	ldrh	r2, [r3, #8]
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	891b      	ldrh	r3, [r3, #8]
 80106ca:	4413      	add	r3, r2
 80106cc:	b29a      	uxth	r2, r3
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	683a      	ldr	r2, [r7, #0]
 80106d6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80106d8:	3710      	adds	r7, #16
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	bf00      	nop
 80106e0:	0801b6f0 	.word	0x0801b6f0
 80106e4:	0801b8e4 	.word	0x0801b8e4
 80106e8:	0801b750 	.word	0x0801b750
 80106ec:	0801b91c 	.word	0x0801b91c
 80106f0:	0801b94c 	.word	0x0801b94c

080106f4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b086      	sub	sp, #24
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
 80106fc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80106fe:	2300      	movs	r3, #0
 8010700:	617b      	str	r3, [r7, #20]
 8010702:	2300      	movs	r3, #0
 8010704:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d008      	beq.n	801071e <pbuf_copy+0x2a>
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d005      	beq.n	801071e <pbuf_copy+0x2a>
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	891a      	ldrh	r2, [r3, #8]
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	891b      	ldrh	r3, [r3, #8]
 801071a:	429a      	cmp	r2, r3
 801071c:	d209      	bcs.n	8010732 <pbuf_copy+0x3e>
 801071e:	4b57      	ldr	r3, [pc, #348]	; (801087c <pbuf_copy+0x188>)
 8010720:	f240 32c9 	movw	r2, #969	; 0x3c9
 8010724:	4956      	ldr	r1, [pc, #344]	; (8010880 <pbuf_copy+0x18c>)
 8010726:	4857      	ldr	r0, [pc, #348]	; (8010884 <pbuf_copy+0x190>)
 8010728:	f009 fb9e 	bl	8019e68 <iprintf>
 801072c:	f06f 030f 	mvn.w	r3, #15
 8010730:	e09f      	b.n	8010872 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	895b      	ldrh	r3, [r3, #10]
 8010736:	461a      	mov	r2, r3
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	1ad2      	subs	r2, r2, r3
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	895b      	ldrh	r3, [r3, #10]
 8010740:	4619      	mov	r1, r3
 8010742:	693b      	ldr	r3, [r7, #16]
 8010744:	1acb      	subs	r3, r1, r3
 8010746:	429a      	cmp	r2, r3
 8010748:	d306      	bcc.n	8010758 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	895b      	ldrh	r3, [r3, #10]
 801074e:	461a      	mov	r2, r3
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	1ad3      	subs	r3, r2, r3
 8010754:	60fb      	str	r3, [r7, #12]
 8010756:	e005      	b.n	8010764 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	895b      	ldrh	r3, [r3, #10]
 801075c:	461a      	mov	r2, r3
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	1ad3      	subs	r3, r2, r3
 8010762:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	685a      	ldr	r2, [r3, #4]
 8010768:	697b      	ldr	r3, [r7, #20]
 801076a:	18d0      	adds	r0, r2, r3
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	685a      	ldr	r2, [r3, #4]
 8010770:	693b      	ldr	r3, [r7, #16]
 8010772:	4413      	add	r3, r2
 8010774:	68fa      	ldr	r2, [r7, #12]
 8010776:	4619      	mov	r1, r3
 8010778:	f009 fd96 	bl	801a2a8 <memcpy>
    offset_to += len;
 801077c:	697a      	ldr	r2, [r7, #20]
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	4413      	add	r3, r2
 8010782:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010784:	693a      	ldr	r2, [r7, #16]
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	4413      	add	r3, r2
 801078a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	895b      	ldrh	r3, [r3, #10]
 8010790:	461a      	mov	r2, r3
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	4293      	cmp	r3, r2
 8010796:	d906      	bls.n	80107a6 <pbuf_copy+0xb2>
 8010798:	4b38      	ldr	r3, [pc, #224]	; (801087c <pbuf_copy+0x188>)
 801079a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801079e:	493a      	ldr	r1, [pc, #232]	; (8010888 <pbuf_copy+0x194>)
 80107a0:	4838      	ldr	r0, [pc, #224]	; (8010884 <pbuf_copy+0x190>)
 80107a2:	f009 fb61 	bl	8019e68 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	895b      	ldrh	r3, [r3, #10]
 80107aa:	461a      	mov	r2, r3
 80107ac:	693b      	ldr	r3, [r7, #16]
 80107ae:	4293      	cmp	r3, r2
 80107b0:	d906      	bls.n	80107c0 <pbuf_copy+0xcc>
 80107b2:	4b32      	ldr	r3, [pc, #200]	; (801087c <pbuf_copy+0x188>)
 80107b4:	f240 32da 	movw	r2, #986	; 0x3da
 80107b8:	4934      	ldr	r1, [pc, #208]	; (801088c <pbuf_copy+0x198>)
 80107ba:	4832      	ldr	r0, [pc, #200]	; (8010884 <pbuf_copy+0x190>)
 80107bc:	f009 fb54 	bl	8019e68 <iprintf>
    if (offset_from >= p_from->len) {
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	895b      	ldrh	r3, [r3, #10]
 80107c4:	461a      	mov	r2, r3
 80107c6:	693b      	ldr	r3, [r7, #16]
 80107c8:	4293      	cmp	r3, r2
 80107ca:	d304      	bcc.n	80107d6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80107cc:	2300      	movs	r3, #0
 80107ce:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	895b      	ldrh	r3, [r3, #10]
 80107da:	461a      	mov	r2, r3
 80107dc:	697b      	ldr	r3, [r7, #20]
 80107de:	4293      	cmp	r3, r2
 80107e0:	d114      	bne.n	801080c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80107e2:	2300      	movs	r3, #0
 80107e4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d10c      	bne.n	801080c <pbuf_copy+0x118>
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d009      	beq.n	801080c <pbuf_copy+0x118>
 80107f8:	4b20      	ldr	r3, [pc, #128]	; (801087c <pbuf_copy+0x188>)
 80107fa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80107fe:	4924      	ldr	r1, [pc, #144]	; (8010890 <pbuf_copy+0x19c>)
 8010800:	4820      	ldr	r0, [pc, #128]	; (8010884 <pbuf_copy+0x190>)
 8010802:	f009 fb31 	bl	8019e68 <iprintf>
 8010806:	f06f 030f 	mvn.w	r3, #15
 801080a:	e032      	b.n	8010872 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801080c:	683b      	ldr	r3, [r7, #0]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d013      	beq.n	801083a <pbuf_copy+0x146>
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	895a      	ldrh	r2, [r3, #10]
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	891b      	ldrh	r3, [r3, #8]
 801081a:	429a      	cmp	r2, r3
 801081c:	d10d      	bne.n	801083a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d009      	beq.n	801083a <pbuf_copy+0x146>
 8010826:	4b15      	ldr	r3, [pc, #84]	; (801087c <pbuf_copy+0x188>)
 8010828:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801082c:	4919      	ldr	r1, [pc, #100]	; (8010894 <pbuf_copy+0x1a0>)
 801082e:	4815      	ldr	r0, [pc, #84]	; (8010884 <pbuf_copy+0x190>)
 8010830:	f009 fb1a 	bl	8019e68 <iprintf>
 8010834:	f06f 0305 	mvn.w	r3, #5
 8010838:	e01b      	b.n	8010872 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d013      	beq.n	8010868 <pbuf_copy+0x174>
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	895a      	ldrh	r2, [r3, #10]
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	891b      	ldrh	r3, [r3, #8]
 8010848:	429a      	cmp	r2, r3
 801084a:	d10d      	bne.n	8010868 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d009      	beq.n	8010868 <pbuf_copy+0x174>
 8010854:	4b09      	ldr	r3, [pc, #36]	; (801087c <pbuf_copy+0x188>)
 8010856:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801085a:	490e      	ldr	r1, [pc, #56]	; (8010894 <pbuf_copy+0x1a0>)
 801085c:	4809      	ldr	r0, [pc, #36]	; (8010884 <pbuf_copy+0x190>)
 801085e:	f009 fb03 	bl	8019e68 <iprintf>
 8010862:	f06f 0305 	mvn.w	r3, #5
 8010866:	e004      	b.n	8010872 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	2b00      	cmp	r3, #0
 801086c:	f47f af61 	bne.w	8010732 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010870:	2300      	movs	r3, #0
}
 8010872:	4618      	mov	r0, r3
 8010874:	3718      	adds	r7, #24
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}
 801087a:	bf00      	nop
 801087c:	0801b6f0 	.word	0x0801b6f0
 8010880:	0801b998 	.word	0x0801b998
 8010884:	0801b750 	.word	0x0801b750
 8010888:	0801b9c8 	.word	0x0801b9c8
 801088c:	0801b9e0 	.word	0x0801b9e0
 8010890:	0801b9fc 	.word	0x0801b9fc
 8010894:	0801ba0c 	.word	0x0801ba0c

08010898 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b088      	sub	sp, #32
 801089c:	af00      	add	r7, sp, #0
 801089e:	60f8      	str	r0, [r7, #12]
 80108a0:	60b9      	str	r1, [r7, #8]
 80108a2:	4611      	mov	r1, r2
 80108a4:	461a      	mov	r2, r3
 80108a6:	460b      	mov	r3, r1
 80108a8:	80fb      	strh	r3, [r7, #6]
 80108aa:	4613      	mov	r3, r2
 80108ac:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80108ae:	2300      	movs	r3, #0
 80108b0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80108b2:	2300      	movs	r3, #0
 80108b4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d108      	bne.n	80108ce <pbuf_copy_partial+0x36>
 80108bc:	4b2b      	ldr	r3, [pc, #172]	; (801096c <pbuf_copy_partial+0xd4>)
 80108be:	f240 420a 	movw	r2, #1034	; 0x40a
 80108c2:	492b      	ldr	r1, [pc, #172]	; (8010970 <pbuf_copy_partial+0xd8>)
 80108c4:	482b      	ldr	r0, [pc, #172]	; (8010974 <pbuf_copy_partial+0xdc>)
 80108c6:	f009 facf 	bl	8019e68 <iprintf>
 80108ca:	2300      	movs	r3, #0
 80108cc:	e04a      	b.n	8010964 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d108      	bne.n	80108e6 <pbuf_copy_partial+0x4e>
 80108d4:	4b25      	ldr	r3, [pc, #148]	; (801096c <pbuf_copy_partial+0xd4>)
 80108d6:	f240 420b 	movw	r2, #1035	; 0x40b
 80108da:	4927      	ldr	r1, [pc, #156]	; (8010978 <pbuf_copy_partial+0xe0>)
 80108dc:	4825      	ldr	r0, [pc, #148]	; (8010974 <pbuf_copy_partial+0xdc>)
 80108de:	f009 fac3 	bl	8019e68 <iprintf>
 80108e2:	2300      	movs	r3, #0
 80108e4:	e03e      	b.n	8010964 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	61fb      	str	r3, [r7, #28]
 80108ea:	e034      	b.n	8010956 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80108ec:	88bb      	ldrh	r3, [r7, #4]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d00a      	beq.n	8010908 <pbuf_copy_partial+0x70>
 80108f2:	69fb      	ldr	r3, [r7, #28]
 80108f4:	895b      	ldrh	r3, [r3, #10]
 80108f6:	88ba      	ldrh	r2, [r7, #4]
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d305      	bcc.n	8010908 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80108fc:	69fb      	ldr	r3, [r7, #28]
 80108fe:	895b      	ldrh	r3, [r3, #10]
 8010900:	88ba      	ldrh	r2, [r7, #4]
 8010902:	1ad3      	subs	r3, r2, r3
 8010904:	80bb      	strh	r3, [r7, #4]
 8010906:	e023      	b.n	8010950 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010908:	69fb      	ldr	r3, [r7, #28]
 801090a:	895a      	ldrh	r2, [r3, #10]
 801090c:	88bb      	ldrh	r3, [r7, #4]
 801090e:	1ad3      	subs	r3, r2, r3
 8010910:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010912:	8b3a      	ldrh	r2, [r7, #24]
 8010914:	88fb      	ldrh	r3, [r7, #6]
 8010916:	429a      	cmp	r2, r3
 8010918:	d901      	bls.n	801091e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801091a:	88fb      	ldrh	r3, [r7, #6]
 801091c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801091e:	8b7b      	ldrh	r3, [r7, #26]
 8010920:	68ba      	ldr	r2, [r7, #8]
 8010922:	18d0      	adds	r0, r2, r3
 8010924:	69fb      	ldr	r3, [r7, #28]
 8010926:	685a      	ldr	r2, [r3, #4]
 8010928:	88bb      	ldrh	r3, [r7, #4]
 801092a:	4413      	add	r3, r2
 801092c:	8b3a      	ldrh	r2, [r7, #24]
 801092e:	4619      	mov	r1, r3
 8010930:	f009 fcba 	bl	801a2a8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010934:	8afa      	ldrh	r2, [r7, #22]
 8010936:	8b3b      	ldrh	r3, [r7, #24]
 8010938:	4413      	add	r3, r2
 801093a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801093c:	8b7a      	ldrh	r2, [r7, #26]
 801093e:	8b3b      	ldrh	r3, [r7, #24]
 8010940:	4413      	add	r3, r2
 8010942:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010944:	88fa      	ldrh	r2, [r7, #6]
 8010946:	8b3b      	ldrh	r3, [r7, #24]
 8010948:	1ad3      	subs	r3, r2, r3
 801094a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801094c:	2300      	movs	r3, #0
 801094e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010950:	69fb      	ldr	r3, [r7, #28]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	61fb      	str	r3, [r7, #28]
 8010956:	88fb      	ldrh	r3, [r7, #6]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d002      	beq.n	8010962 <pbuf_copy_partial+0xca>
 801095c:	69fb      	ldr	r3, [r7, #28]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d1c4      	bne.n	80108ec <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010962:	8afb      	ldrh	r3, [r7, #22]
}
 8010964:	4618      	mov	r0, r3
 8010966:	3720      	adds	r7, #32
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}
 801096c:	0801b6f0 	.word	0x0801b6f0
 8010970:	0801ba38 	.word	0x0801ba38
 8010974:	0801b750 	.word	0x0801b750
 8010978:	0801ba58 	.word	0x0801ba58

0801097c <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 801097c:	b480      	push	{r7}
 801097e:	b087      	sub	sp, #28
 8010980:	af00      	add	r7, sp, #0
 8010982:	60f8      	str	r0, [r7, #12]
 8010984:	460b      	mov	r3, r1
 8010986:	607a      	str	r2, [r7, #4]
 8010988:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 801098a:	897b      	ldrh	r3, [r7, #10]
 801098c:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8010992:	e007      	b.n	80109a4 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8010994:	693b      	ldr	r3, [r7, #16]
 8010996:	895b      	ldrh	r3, [r3, #10]
 8010998:	8afa      	ldrh	r2, [r7, #22]
 801099a:	1ad3      	subs	r3, r2, r3
 801099c:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 801099e:	693b      	ldr	r3, [r7, #16]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 80109a4:	693b      	ldr	r3, [r7, #16]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d004      	beq.n	80109b4 <pbuf_skip_const+0x38>
 80109aa:	693b      	ldr	r3, [r7, #16]
 80109ac:	895b      	ldrh	r3, [r3, #10]
 80109ae:	8afa      	ldrh	r2, [r7, #22]
 80109b0:	429a      	cmp	r2, r3
 80109b2:	d2ef      	bcs.n	8010994 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d002      	beq.n	80109c0 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	8afa      	ldrh	r2, [r7, #22]
 80109be:	801a      	strh	r2, [r3, #0]
  }
  return q;
 80109c0:	693b      	ldr	r3, [r7, #16]
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	371c      	adds	r7, #28
 80109c6:	46bd      	mov	sp, r7
 80109c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109cc:	4770      	bx	lr
	...

080109d0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b084      	sub	sp, #16
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	4603      	mov	r3, r0
 80109d8:	603a      	str	r2, [r7, #0]
 80109da:	71fb      	strb	r3, [r7, #7]
 80109dc:	460b      	mov	r3, r1
 80109de:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80109e0:	683b      	ldr	r3, [r7, #0]
 80109e2:	8919      	ldrh	r1, [r3, #8]
 80109e4:	88ba      	ldrh	r2, [r7, #4]
 80109e6:	79fb      	ldrb	r3, [r7, #7]
 80109e8:	4618      	mov	r0, r3
 80109ea:	f7ff fa77 	bl	800fedc <pbuf_alloc>
 80109ee:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d101      	bne.n	80109fa <pbuf_clone+0x2a>
    return NULL;
 80109f6:	2300      	movs	r3, #0
 80109f8:	e011      	b.n	8010a1e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80109fa:	6839      	ldr	r1, [r7, #0]
 80109fc:	68f8      	ldr	r0, [r7, #12]
 80109fe:	f7ff fe79 	bl	80106f4 <pbuf_copy>
 8010a02:	4603      	mov	r3, r0
 8010a04:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010a06:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d006      	beq.n	8010a1c <pbuf_clone+0x4c>
 8010a0e:	4b06      	ldr	r3, [pc, #24]	; (8010a28 <pbuf_clone+0x58>)
 8010a10:	f240 5224 	movw	r2, #1316	; 0x524
 8010a14:	4905      	ldr	r1, [pc, #20]	; (8010a2c <pbuf_clone+0x5c>)
 8010a16:	4806      	ldr	r0, [pc, #24]	; (8010a30 <pbuf_clone+0x60>)
 8010a18:	f009 fa26 	bl	8019e68 <iprintf>
  return q;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3710      	adds	r7, #16
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd80      	pop	{r7, pc}
 8010a26:	bf00      	nop
 8010a28:	0801b6f0 	.word	0x0801b6f0
 8010a2c:	0801bb64 	.word	0x0801bb64
 8010a30:	0801b750 	.word	0x0801b750

08010a34 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b084      	sub	sp, #16
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	460b      	mov	r3, r1
 8010a3e:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8010a40:	887b      	ldrh	r3, [r7, #2]
 8010a42:	4619      	mov	r1, r3
 8010a44:	6878      	ldr	r0, [r7, #4]
 8010a46:	f000 f80c 	bl	8010a62 <pbuf_try_get_at>
 8010a4a:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	db02      	blt.n	8010a58 <pbuf_get_at+0x24>
    return (u8_t)ret;
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	b2db      	uxtb	r3, r3
 8010a56:	e000      	b.n	8010a5a <pbuf_get_at+0x26>
  }
  return 0;
 8010a58:	2300      	movs	r3, #0
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	3710      	adds	r7, #16
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd80      	pop	{r7, pc}

08010a62 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8010a62:	b580      	push	{r7, lr}
 8010a64:	b084      	sub	sp, #16
 8010a66:	af00      	add	r7, sp, #0
 8010a68:	6078      	str	r0, [r7, #4]
 8010a6a:	460b      	mov	r3, r1
 8010a6c:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8010a6e:	f107 020a 	add.w	r2, r7, #10
 8010a72:	887b      	ldrh	r3, [r7, #2]
 8010a74:	4619      	mov	r1, r3
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f7ff ff80 	bl	801097c <pbuf_skip_const>
 8010a7c:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d00a      	beq.n	8010a9a <pbuf_try_get_at+0x38>
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	895a      	ldrh	r2, [r3, #10]
 8010a88:	897b      	ldrh	r3, [r7, #10]
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d905      	bls.n	8010a9a <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	685b      	ldr	r3, [r3, #4]
 8010a92:	897a      	ldrh	r2, [r7, #10]
 8010a94:	4413      	add	r3, r2
 8010a96:	781b      	ldrb	r3, [r3, #0]
 8010a98:	e001      	b.n	8010a9e <pbuf_try_get_at+0x3c>
  }
  return -1;
 8010a9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	3710      	adds	r7, #16
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}

08010aa6 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 8010aa6:	b580      	push	{r7, lr}
 8010aa8:	b088      	sub	sp, #32
 8010aaa:	af00      	add	r7, sp, #0
 8010aac:	60f8      	str	r0, [r7, #12]
 8010aae:	607a      	str	r2, [r7, #4]
 8010ab0:	461a      	mov	r2, r3
 8010ab2:	460b      	mov	r3, r1
 8010ab4:	817b      	strh	r3, [r7, #10]
 8010ab6:	4613      	mov	r3, r2
 8010ab8:	813b      	strh	r3, [r7, #8]
  u16_t start = offset;
 8010aba:	897b      	ldrh	r3, [r7, #10]
 8010abc:	83fb      	strh	r3, [r7, #30]
  const struct pbuf *q = p;
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	61bb      	str	r3, [r7, #24]
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	891b      	ldrh	r3, [r3, #8]
 8010ac6:	4619      	mov	r1, r3
 8010ac8:	897a      	ldrh	r2, [r7, #10]
 8010aca:	893b      	ldrh	r3, [r7, #8]
 8010acc:	4413      	add	r3, r2
 8010ace:	4299      	cmp	r1, r3
 8010ad0:	da0a      	bge.n	8010ae8 <pbuf_memcmp+0x42>
    return 0xffff;
 8010ad2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010ad6:	e037      	b.n	8010b48 <pbuf_memcmp+0xa2>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 8010ad8:	69bb      	ldr	r3, [r7, #24]
 8010ada:	895b      	ldrh	r3, [r3, #10]
 8010adc:	8bfa      	ldrh	r2, [r7, #30]
 8010ade:	1ad3      	subs	r3, r2, r3
 8010ae0:	83fb      	strh	r3, [r7, #30]
    q = q->next;
 8010ae2:	69bb      	ldr	r3, [r7, #24]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	61bb      	str	r3, [r7, #24]
  while ((q != NULL) && (q->len <= start)) {
 8010ae8:	69bb      	ldr	r3, [r7, #24]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d004      	beq.n	8010af8 <pbuf_memcmp+0x52>
 8010aee:	69bb      	ldr	r3, [r7, #24]
 8010af0:	895b      	ldrh	r3, [r3, #10]
 8010af2:	8bfa      	ldrh	r2, [r7, #30]
 8010af4:	429a      	cmp	r2, r3
 8010af6:	d2ef      	bcs.n	8010ad8 <pbuf_memcmp+0x32>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 8010af8:	2300      	movs	r3, #0
 8010afa:	82fb      	strh	r3, [r7, #22]
 8010afc:	e01f      	b.n	8010b3e <pbuf_memcmp+0x98>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 8010afe:	8bfa      	ldrh	r2, [r7, #30]
 8010b00:	8afb      	ldrh	r3, [r7, #22]
 8010b02:	4413      	add	r3, r2
 8010b04:	b29b      	uxth	r3, r3
 8010b06:	4619      	mov	r1, r3
 8010b08:	69b8      	ldr	r0, [r7, #24]
 8010b0a:	f7ff ff93 	bl	8010a34 <pbuf_get_at>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	757b      	strb	r3, [r7, #21]
    u8_t b = ((const u8_t *)s2)[i];
 8010b12:	8afb      	ldrh	r3, [r7, #22]
 8010b14:	687a      	ldr	r2, [r7, #4]
 8010b16:	4413      	add	r3, r2
 8010b18:	781b      	ldrb	r3, [r3, #0]
 8010b1a:	753b      	strb	r3, [r7, #20]
    if (a != b) {
 8010b1c:	7d7a      	ldrb	r2, [r7, #21]
 8010b1e:	7d3b      	ldrb	r3, [r7, #20]
 8010b20:	429a      	cmp	r2, r3
 8010b22:	d009      	beq.n	8010b38 <pbuf_memcmp+0x92>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 8010b24:	8afb      	ldrh	r3, [r7, #22]
 8010b26:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010b2a:	4293      	cmp	r3, r2
 8010b2c:	bf28      	it	cs
 8010b2e:	4613      	movcs	r3, r2
 8010b30:	b29b      	uxth	r3, r3
 8010b32:	3301      	adds	r3, #1
 8010b34:	b29b      	uxth	r3, r3
 8010b36:	e007      	b.n	8010b48 <pbuf_memcmp+0xa2>
  for (i = 0; i < n; i++) {
 8010b38:	8afb      	ldrh	r3, [r7, #22]
 8010b3a:	3301      	adds	r3, #1
 8010b3c:	82fb      	strh	r3, [r7, #22]
 8010b3e:	8afa      	ldrh	r2, [r7, #22]
 8010b40:	893b      	ldrh	r3, [r7, #8]
 8010b42:	429a      	cmp	r2, r3
 8010b44:	d3db      	bcc.n	8010afe <pbuf_memcmp+0x58>
    }
  }
  return 0;
 8010b46:	2300      	movs	r3, #0
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	3720      	adds	r7, #32
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	bd80      	pop	{r7, pc}

08010b50 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010b54:	f009 f89a 	bl	8019c8c <rand>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	b29b      	uxth	r3, r3
 8010b5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010b60:	b29b      	uxth	r3, r3
 8010b62:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010b66:	b29a      	uxth	r2, r3
 8010b68:	4b01      	ldr	r3, [pc, #4]	; (8010b70 <tcp_init+0x20>)
 8010b6a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010b6c:	bf00      	nop
 8010b6e:	bd80      	pop	{r7, pc}
 8010b70:	24000028 	.word	0x24000028

08010b74 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b082      	sub	sp, #8
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	7d1b      	ldrb	r3, [r3, #20]
 8010b80:	2b01      	cmp	r3, #1
 8010b82:	d105      	bne.n	8010b90 <tcp_free+0x1c>
 8010b84:	4b06      	ldr	r3, [pc, #24]	; (8010ba0 <tcp_free+0x2c>)
 8010b86:	22d4      	movs	r2, #212	; 0xd4
 8010b88:	4906      	ldr	r1, [pc, #24]	; (8010ba4 <tcp_free+0x30>)
 8010b8a:	4807      	ldr	r0, [pc, #28]	; (8010ba8 <tcp_free+0x34>)
 8010b8c:	f009 f96c 	bl	8019e68 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010b90:	6879      	ldr	r1, [r7, #4]
 8010b92:	2001      	movs	r0, #1
 8010b94:	f7fe fdd6 	bl	800f744 <memp_free>
}
 8010b98:	bf00      	nop
 8010b9a:	3708      	adds	r7, #8
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bd80      	pop	{r7, pc}
 8010ba0:	0801bbf0 	.word	0x0801bbf0
 8010ba4:	0801bc20 	.word	0x0801bc20
 8010ba8:	0801bc34 	.word	0x0801bc34

08010bac <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b082      	sub	sp, #8
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	7d1b      	ldrb	r3, [r3, #20]
 8010bb8:	2b01      	cmp	r3, #1
 8010bba:	d105      	bne.n	8010bc8 <tcp_free_listen+0x1c>
 8010bbc:	4b06      	ldr	r3, [pc, #24]	; (8010bd8 <tcp_free_listen+0x2c>)
 8010bbe:	22df      	movs	r2, #223	; 0xdf
 8010bc0:	4906      	ldr	r1, [pc, #24]	; (8010bdc <tcp_free_listen+0x30>)
 8010bc2:	4807      	ldr	r0, [pc, #28]	; (8010be0 <tcp_free_listen+0x34>)
 8010bc4:	f009 f950 	bl	8019e68 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010bc8:	6879      	ldr	r1, [r7, #4]
 8010bca:	2002      	movs	r0, #2
 8010bcc:	f7fe fdba 	bl	800f744 <memp_free>
}
 8010bd0:	bf00      	nop
 8010bd2:	3708      	adds	r7, #8
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bd80      	pop	{r7, pc}
 8010bd8:	0801bbf0 	.word	0x0801bbf0
 8010bdc:	0801bc5c 	.word	0x0801bc5c
 8010be0:	0801bc34 	.word	0x0801bc34

08010be4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010be8:	f001 f984 	bl	8011ef4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010bec:	4b07      	ldr	r3, [pc, #28]	; (8010c0c <tcp_tmr+0x28>)
 8010bee:	781b      	ldrb	r3, [r3, #0]
 8010bf0:	3301      	adds	r3, #1
 8010bf2:	b2da      	uxtb	r2, r3
 8010bf4:	4b05      	ldr	r3, [pc, #20]	; (8010c0c <tcp_tmr+0x28>)
 8010bf6:	701a      	strb	r2, [r3, #0]
 8010bf8:	4b04      	ldr	r3, [pc, #16]	; (8010c0c <tcp_tmr+0x28>)
 8010bfa:	781b      	ldrb	r3, [r3, #0]
 8010bfc:	f003 0301 	and.w	r3, r3, #1
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d001      	beq.n	8010c08 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010c04:	f000 fe36 	bl	8011874 <tcp_slowtmr>
  }
}
 8010c08:	bf00      	nop
 8010c0a:	bd80      	pop	{r7, pc}
 8010c0c:	2401503d 	.word	0x2401503d

08010c10 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b084      	sub	sp, #16
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
 8010c18:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d105      	bne.n	8010c2c <tcp_remove_listener+0x1c>
 8010c20:	4b0d      	ldr	r3, [pc, #52]	; (8010c58 <tcp_remove_listener+0x48>)
 8010c22:	22ff      	movs	r2, #255	; 0xff
 8010c24:	490d      	ldr	r1, [pc, #52]	; (8010c5c <tcp_remove_listener+0x4c>)
 8010c26:	480e      	ldr	r0, [pc, #56]	; (8010c60 <tcp_remove_listener+0x50>)
 8010c28:	f009 f91e 	bl	8019e68 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	60fb      	str	r3, [r7, #12]
 8010c30:	e00a      	b.n	8010c48 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c36:	683a      	ldr	r2, [r7, #0]
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	d102      	bne.n	8010c42 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	2200      	movs	r2, #0
 8010c40:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	68db      	ldr	r3, [r3, #12]
 8010c46:	60fb      	str	r3, [r7, #12]
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d1f1      	bne.n	8010c32 <tcp_remove_listener+0x22>
    }
  }
}
 8010c4e:	bf00      	nop
 8010c50:	bf00      	nop
 8010c52:	3710      	adds	r7, #16
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	0801bbf0 	.word	0x0801bbf0
 8010c5c:	0801bc78 	.word	0x0801bc78
 8010c60:	0801bc34 	.word	0x0801bc34

08010c64 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b084      	sub	sp, #16
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d106      	bne.n	8010c80 <tcp_listen_closed+0x1c>
 8010c72:	4b14      	ldr	r3, [pc, #80]	; (8010cc4 <tcp_listen_closed+0x60>)
 8010c74:	f240 1211 	movw	r2, #273	; 0x111
 8010c78:	4913      	ldr	r1, [pc, #76]	; (8010cc8 <tcp_listen_closed+0x64>)
 8010c7a:	4814      	ldr	r0, [pc, #80]	; (8010ccc <tcp_listen_closed+0x68>)
 8010c7c:	f009 f8f4 	bl	8019e68 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	7d1b      	ldrb	r3, [r3, #20]
 8010c84:	2b01      	cmp	r3, #1
 8010c86:	d006      	beq.n	8010c96 <tcp_listen_closed+0x32>
 8010c88:	4b0e      	ldr	r3, [pc, #56]	; (8010cc4 <tcp_listen_closed+0x60>)
 8010c8a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8010c8e:	4910      	ldr	r1, [pc, #64]	; (8010cd0 <tcp_listen_closed+0x6c>)
 8010c90:	480e      	ldr	r0, [pc, #56]	; (8010ccc <tcp_listen_closed+0x68>)
 8010c92:	f009 f8e9 	bl	8019e68 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010c96:	2301      	movs	r3, #1
 8010c98:	60fb      	str	r3, [r7, #12]
 8010c9a:	e00b      	b.n	8010cb4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010c9c:	4a0d      	ldr	r2, [pc, #52]	; (8010cd4 <tcp_listen_closed+0x70>)
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	6879      	ldr	r1, [r7, #4]
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7ff ffb1 	bl	8010c10 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	60fb      	str	r3, [r7, #12]
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	2b03      	cmp	r3, #3
 8010cb8:	d9f0      	bls.n	8010c9c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010cba:	bf00      	nop
 8010cbc:	bf00      	nop
 8010cbe:	3710      	adds	r7, #16
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}
 8010cc4:	0801bbf0 	.word	0x0801bbf0
 8010cc8:	0801bca0 	.word	0x0801bca0
 8010ccc:	0801bc34 	.word	0x0801bc34
 8010cd0:	0801bcac 	.word	0x0801bcac
 8010cd4:	0801e294 	.word	0x0801e294

08010cd8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010cd8:	b5b0      	push	{r4, r5, r7, lr}
 8010cda:	b088      	sub	sp, #32
 8010cdc:	af04      	add	r7, sp, #16
 8010cde:	6078      	str	r0, [r7, #4]
 8010ce0:	460b      	mov	r3, r1
 8010ce2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d106      	bne.n	8010cf8 <tcp_close_shutdown+0x20>
 8010cea:	4b63      	ldr	r3, [pc, #396]	; (8010e78 <tcp_close_shutdown+0x1a0>)
 8010cec:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010cf0:	4962      	ldr	r1, [pc, #392]	; (8010e7c <tcp_close_shutdown+0x1a4>)
 8010cf2:	4863      	ldr	r0, [pc, #396]	; (8010e80 <tcp_close_shutdown+0x1a8>)
 8010cf4:	f009 f8b8 	bl	8019e68 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010cf8:	78fb      	ldrb	r3, [r7, #3]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d067      	beq.n	8010dce <tcp_close_shutdown+0xf6>
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	7d1b      	ldrb	r3, [r3, #20]
 8010d02:	2b04      	cmp	r3, #4
 8010d04:	d003      	beq.n	8010d0e <tcp_close_shutdown+0x36>
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	7d1b      	ldrb	r3, [r3, #20]
 8010d0a:	2b07      	cmp	r3, #7
 8010d0c:	d15f      	bne.n	8010dce <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d105      	bne.n	8010d22 <tcp_close_shutdown+0x4a>
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d1a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8010d1e:	4293      	cmp	r3, r2
 8010d20:	d055      	beq.n	8010dce <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	8b5b      	ldrh	r3, [r3, #26]
 8010d26:	f003 0310 	and.w	r3, r3, #16
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d106      	bne.n	8010d3c <tcp_close_shutdown+0x64>
 8010d2e:	4b52      	ldr	r3, [pc, #328]	; (8010e78 <tcp_close_shutdown+0x1a0>)
 8010d30:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8010d34:	4953      	ldr	r1, [pc, #332]	; (8010e84 <tcp_close_shutdown+0x1ac>)
 8010d36:	4852      	ldr	r0, [pc, #328]	; (8010e80 <tcp_close_shutdown+0x1a8>)
 8010d38:	f009 f896 	bl	8019e68 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010d44:	687d      	ldr	r5, [r7, #4]
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	3304      	adds	r3, #4
 8010d4a:	687a      	ldr	r2, [r7, #4]
 8010d4c:	8ad2      	ldrh	r2, [r2, #22]
 8010d4e:	6879      	ldr	r1, [r7, #4]
 8010d50:	8b09      	ldrh	r1, [r1, #24]
 8010d52:	9102      	str	r1, [sp, #8]
 8010d54:	9201      	str	r2, [sp, #4]
 8010d56:	9300      	str	r3, [sp, #0]
 8010d58:	462b      	mov	r3, r5
 8010d5a:	4622      	mov	r2, r4
 8010d5c:	4601      	mov	r1, r0
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f005 feaa 	bl	8016ab8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f001 fc81 	bl	801266c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010d6a:	4b47      	ldr	r3, [pc, #284]	; (8010e88 <tcp_close_shutdown+0x1b0>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	687a      	ldr	r2, [r7, #4]
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d105      	bne.n	8010d80 <tcp_close_shutdown+0xa8>
 8010d74:	4b44      	ldr	r3, [pc, #272]	; (8010e88 <tcp_close_shutdown+0x1b0>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	68db      	ldr	r3, [r3, #12]
 8010d7a:	4a43      	ldr	r2, [pc, #268]	; (8010e88 <tcp_close_shutdown+0x1b0>)
 8010d7c:	6013      	str	r3, [r2, #0]
 8010d7e:	e013      	b.n	8010da8 <tcp_close_shutdown+0xd0>
 8010d80:	4b41      	ldr	r3, [pc, #260]	; (8010e88 <tcp_close_shutdown+0x1b0>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	60fb      	str	r3, [r7, #12]
 8010d86:	e00c      	b.n	8010da2 <tcp_close_shutdown+0xca>
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	68db      	ldr	r3, [r3, #12]
 8010d8c:	687a      	ldr	r2, [r7, #4]
 8010d8e:	429a      	cmp	r2, r3
 8010d90:	d104      	bne.n	8010d9c <tcp_close_shutdown+0xc4>
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	68da      	ldr	r2, [r3, #12]
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	60da      	str	r2, [r3, #12]
 8010d9a:	e005      	b.n	8010da8 <tcp_close_shutdown+0xd0>
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	68db      	ldr	r3, [r3, #12]
 8010da0:	60fb      	str	r3, [r7, #12]
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d1ef      	bne.n	8010d88 <tcp_close_shutdown+0xb0>
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2200      	movs	r2, #0
 8010dac:	60da      	str	r2, [r3, #12]
 8010dae:	4b37      	ldr	r3, [pc, #220]	; (8010e8c <tcp_close_shutdown+0x1b4>)
 8010db0:	2201      	movs	r2, #1
 8010db2:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010db4:	4b36      	ldr	r3, [pc, #216]	; (8010e90 <tcp_close_shutdown+0x1b8>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	687a      	ldr	r2, [r7, #4]
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d102      	bne.n	8010dc4 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010dbe:	f004 f91b 	bl	8014ff8 <tcp_trigger_input_pcb_close>
 8010dc2:	e002      	b.n	8010dca <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8010dc4:	6878      	ldr	r0, [r7, #4]
 8010dc6:	f7ff fed5 	bl	8010b74 <tcp_free>
      }
      return ERR_OK;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	e050      	b.n	8010e70 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	7d1b      	ldrb	r3, [r3, #20]
 8010dd2:	2b02      	cmp	r3, #2
 8010dd4:	d03b      	beq.n	8010e4e <tcp_close_shutdown+0x176>
 8010dd6:	2b02      	cmp	r3, #2
 8010dd8:	dc44      	bgt.n	8010e64 <tcp_close_shutdown+0x18c>
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d002      	beq.n	8010de4 <tcp_close_shutdown+0x10c>
 8010dde:	2b01      	cmp	r3, #1
 8010de0:	d02a      	beq.n	8010e38 <tcp_close_shutdown+0x160>
 8010de2:	e03f      	b.n	8010e64 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	8adb      	ldrh	r3, [r3, #22]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d021      	beq.n	8010e30 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010dec:	4b29      	ldr	r3, [pc, #164]	; (8010e94 <tcp_close_shutdown+0x1bc>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	687a      	ldr	r2, [r7, #4]
 8010df2:	429a      	cmp	r2, r3
 8010df4:	d105      	bne.n	8010e02 <tcp_close_shutdown+0x12a>
 8010df6:	4b27      	ldr	r3, [pc, #156]	; (8010e94 <tcp_close_shutdown+0x1bc>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	68db      	ldr	r3, [r3, #12]
 8010dfc:	4a25      	ldr	r2, [pc, #148]	; (8010e94 <tcp_close_shutdown+0x1bc>)
 8010dfe:	6013      	str	r3, [r2, #0]
 8010e00:	e013      	b.n	8010e2a <tcp_close_shutdown+0x152>
 8010e02:	4b24      	ldr	r3, [pc, #144]	; (8010e94 <tcp_close_shutdown+0x1bc>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	60bb      	str	r3, [r7, #8]
 8010e08:	e00c      	b.n	8010e24 <tcp_close_shutdown+0x14c>
 8010e0a:	68bb      	ldr	r3, [r7, #8]
 8010e0c:	68db      	ldr	r3, [r3, #12]
 8010e0e:	687a      	ldr	r2, [r7, #4]
 8010e10:	429a      	cmp	r2, r3
 8010e12:	d104      	bne.n	8010e1e <tcp_close_shutdown+0x146>
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	68da      	ldr	r2, [r3, #12]
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	60da      	str	r2, [r3, #12]
 8010e1c:	e005      	b.n	8010e2a <tcp_close_shutdown+0x152>
 8010e1e:	68bb      	ldr	r3, [r7, #8]
 8010e20:	68db      	ldr	r3, [r3, #12]
 8010e22:	60bb      	str	r3, [r7, #8]
 8010e24:	68bb      	ldr	r3, [r7, #8]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d1ef      	bne.n	8010e0a <tcp_close_shutdown+0x132>
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f7ff fe9f 	bl	8010b74 <tcp_free>
      break;
 8010e36:	e01a      	b.n	8010e6e <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010e38:	6878      	ldr	r0, [r7, #4]
 8010e3a:	f7ff ff13 	bl	8010c64 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010e3e:	6879      	ldr	r1, [r7, #4]
 8010e40:	4815      	ldr	r0, [pc, #84]	; (8010e98 <tcp_close_shutdown+0x1c0>)
 8010e42:	f001 fc63 	bl	801270c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8010e46:	6878      	ldr	r0, [r7, #4]
 8010e48:	f7ff feb0 	bl	8010bac <tcp_free_listen>
      break;
 8010e4c:	e00f      	b.n	8010e6e <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010e4e:	6879      	ldr	r1, [r7, #4]
 8010e50:	480d      	ldr	r0, [pc, #52]	; (8010e88 <tcp_close_shutdown+0x1b0>)
 8010e52:	f001 fc5b 	bl	801270c <tcp_pcb_remove>
 8010e56:	4b0d      	ldr	r3, [pc, #52]	; (8010e8c <tcp_close_shutdown+0x1b4>)
 8010e58:	2201      	movs	r2, #1
 8010e5a:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f7ff fe89 	bl	8010b74 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8010e62:	e004      	b.n	8010e6e <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f000 f819 	bl	8010e9c <tcp_close_shutdown_fin>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	e000      	b.n	8010e70 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8010e6e:	2300      	movs	r3, #0
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	3710      	adds	r7, #16
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bdb0      	pop	{r4, r5, r7, pc}
 8010e78:	0801bbf0 	.word	0x0801bbf0
 8010e7c:	0801bcc4 	.word	0x0801bcc4
 8010e80:	0801bc34 	.word	0x0801bc34
 8010e84:	0801bce4 	.word	0x0801bce4
 8010e88:	24015034 	.word	0x24015034
 8010e8c:	2401503c 	.word	0x2401503c
 8010e90:	24015074 	.word	0x24015074
 8010e94:	2401502c 	.word	0x2401502c
 8010e98:	24015030 	.word	0x24015030

08010e9c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b084      	sub	sp, #16
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d106      	bne.n	8010eb8 <tcp_close_shutdown_fin+0x1c>
 8010eaa:	4b2e      	ldr	r3, [pc, #184]	; (8010f64 <tcp_close_shutdown_fin+0xc8>)
 8010eac:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8010eb0:	492d      	ldr	r1, [pc, #180]	; (8010f68 <tcp_close_shutdown_fin+0xcc>)
 8010eb2:	482e      	ldr	r0, [pc, #184]	; (8010f6c <tcp_close_shutdown_fin+0xd0>)
 8010eb4:	f008 ffd8 	bl	8019e68 <iprintf>

  switch (pcb->state) {
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	7d1b      	ldrb	r3, [r3, #20]
 8010ebc:	2b07      	cmp	r3, #7
 8010ebe:	d020      	beq.n	8010f02 <tcp_close_shutdown_fin+0x66>
 8010ec0:	2b07      	cmp	r3, #7
 8010ec2:	dc2b      	bgt.n	8010f1c <tcp_close_shutdown_fin+0x80>
 8010ec4:	2b03      	cmp	r3, #3
 8010ec6:	d002      	beq.n	8010ece <tcp_close_shutdown_fin+0x32>
 8010ec8:	2b04      	cmp	r3, #4
 8010eca:	d00d      	beq.n	8010ee8 <tcp_close_shutdown_fin+0x4c>
 8010ecc:	e026      	b.n	8010f1c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010ece:	6878      	ldr	r0, [r7, #4]
 8010ed0:	f004 fefe 	bl	8015cd0 <tcp_send_fin>
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d11f      	bne.n	8010f20 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2205      	movs	r2, #5
 8010ee4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010ee6:	e01b      	b.n	8010f20 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f004 fef1 	bl	8015cd0 <tcp_send_fin>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d114      	bne.n	8010f24 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2205      	movs	r2, #5
 8010efe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010f00:	e010      	b.n	8010f24 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	f004 fee4 	bl	8015cd0 <tcp_send_fin>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d109      	bne.n	8010f28 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2209      	movs	r2, #9
 8010f18:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010f1a:	e005      	b.n	8010f28 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	e01c      	b.n	8010f5a <tcp_close_shutdown_fin+0xbe>
      break;
 8010f20:	bf00      	nop
 8010f22:	e002      	b.n	8010f2a <tcp_close_shutdown_fin+0x8e>
      break;
 8010f24:	bf00      	nop
 8010f26:	e000      	b.n	8010f2a <tcp_close_shutdown_fin+0x8e>
      break;
 8010f28:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d103      	bne.n	8010f3a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f005 f80a 	bl	8015f4c <tcp_output>
 8010f38:	e00d      	b.n	8010f56 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8010f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f42:	d108      	bne.n	8010f56 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	8b5b      	ldrh	r3, [r3, #26]
 8010f48:	f043 0308 	orr.w	r3, r3, #8
 8010f4c:	b29a      	uxth	r2, r3
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010f52:	2300      	movs	r3, #0
 8010f54:	e001      	b.n	8010f5a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8010f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	3710      	adds	r7, #16
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}
 8010f62:	bf00      	nop
 8010f64:	0801bbf0 	.word	0x0801bbf0
 8010f68:	0801bca0 	.word	0x0801bca0
 8010f6c:	0801bc34 	.word	0x0801bc34

08010f70 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b082      	sub	sp, #8
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 8010f78:	f7f9 fda4 	bl	800aac4 <sys_check_core_locking>

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d109      	bne.n	8010f96 <tcp_close+0x26>
 8010f82:	4b0f      	ldr	r3, [pc, #60]	; (8010fc0 <tcp_close+0x50>)
 8010f84:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8010f88:	490e      	ldr	r1, [pc, #56]	; (8010fc4 <tcp_close+0x54>)
 8010f8a:	480f      	ldr	r0, [pc, #60]	; (8010fc8 <tcp_close+0x58>)
 8010f8c:	f008 ff6c 	bl	8019e68 <iprintf>
 8010f90:	f06f 030f 	mvn.w	r3, #15
 8010f94:	e00f      	b.n	8010fb6 <tcp_close+0x46>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	7d1b      	ldrb	r3, [r3, #20]
 8010f9a:	2b01      	cmp	r3, #1
 8010f9c:	d006      	beq.n	8010fac <tcp_close+0x3c>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	8b5b      	ldrh	r3, [r3, #26]
 8010fa2:	f043 0310 	orr.w	r3, r3, #16
 8010fa6:	b29a      	uxth	r2, r3
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010fac:	2101      	movs	r1, #1
 8010fae:	6878      	ldr	r0, [r7, #4]
 8010fb0:	f7ff fe92 	bl	8010cd8 <tcp_close_shutdown>
 8010fb4:	4603      	mov	r3, r0
}
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	3708      	adds	r7, #8
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	bd80      	pop	{r7, pc}
 8010fbe:	bf00      	nop
 8010fc0:	0801bbf0 	.word	0x0801bbf0
 8010fc4:	0801bd00 	.word	0x0801bd00
 8010fc8:	0801bc34 	.word	0x0801bc34

08010fcc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b08e      	sub	sp, #56	; 0x38
 8010fd0:	af04      	add	r7, sp, #16
 8010fd2:	6078      	str	r0, [r7, #4]
 8010fd4:	6039      	str	r1, [r7, #0]
#if LWIP_CALLBACK_API
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();
 8010fd6:	f7f9 fd75 	bl	800aac4 <sys_check_core_locking>

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d107      	bne.n	8010ff0 <tcp_abandon+0x24>
 8010fe0:	4b52      	ldr	r3, [pc, #328]	; (801112c <tcp_abandon+0x160>)
 8010fe2:	f240 223d 	movw	r2, #573	; 0x23d
 8010fe6:	4952      	ldr	r1, [pc, #328]	; (8011130 <tcp_abandon+0x164>)
 8010fe8:	4852      	ldr	r0, [pc, #328]	; (8011134 <tcp_abandon+0x168>)
 8010fea:	f008 ff3d 	bl	8019e68 <iprintf>
 8010fee:	e099      	b.n	8011124 <tcp_abandon+0x158>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	7d1b      	ldrb	r3, [r3, #20]
 8010ff4:	2b01      	cmp	r3, #1
 8010ff6:	d106      	bne.n	8011006 <tcp_abandon+0x3a>
 8010ff8:	4b4c      	ldr	r3, [pc, #304]	; (801112c <tcp_abandon+0x160>)
 8010ffa:	f44f 7210 	mov.w	r2, #576	; 0x240
 8010ffe:	494e      	ldr	r1, [pc, #312]	; (8011138 <tcp_abandon+0x16c>)
 8011000:	484c      	ldr	r0, [pc, #304]	; (8011134 <tcp_abandon+0x168>)
 8011002:	f008 ff31 	bl	8019e68 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	7d1b      	ldrb	r3, [r3, #20]
 801100a:	2b0a      	cmp	r3, #10
 801100c:	d107      	bne.n	801101e <tcp_abandon+0x52>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801100e:	6879      	ldr	r1, [r7, #4]
 8011010:	484a      	ldr	r0, [pc, #296]	; (801113c <tcp_abandon+0x170>)
 8011012:	f001 fb7b 	bl	801270c <tcp_pcb_remove>
    tcp_free(pcb);
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f7ff fdac 	bl	8010b74 <tcp_free>
 801101c:	e082      	b.n	8011124 <tcp_abandon+0x158>
  } else {
    int send_rst = 0;
 801101e:	2300      	movs	r3, #0
 8011020:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8011022:	2300      	movs	r3, #0
 8011024:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801102a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011030:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011038:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	691b      	ldr	r3, [r3, #16]
 801103e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	7d1b      	ldrb	r3, [r3, #20]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d126      	bne.n	8011096 <tcp_abandon+0xca>
      if (pcb->local_port != 0) {
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	8adb      	ldrh	r3, [r3, #22]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d02e      	beq.n	80110ae <tcp_abandon+0xe2>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011050:	4b3b      	ldr	r3, [pc, #236]	; (8011140 <tcp_abandon+0x174>)
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	687a      	ldr	r2, [r7, #4]
 8011056:	429a      	cmp	r2, r3
 8011058:	d105      	bne.n	8011066 <tcp_abandon+0x9a>
 801105a:	4b39      	ldr	r3, [pc, #228]	; (8011140 <tcp_abandon+0x174>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	68db      	ldr	r3, [r3, #12]
 8011060:	4a37      	ldr	r2, [pc, #220]	; (8011140 <tcp_abandon+0x174>)
 8011062:	6013      	str	r3, [r2, #0]
 8011064:	e013      	b.n	801108e <tcp_abandon+0xc2>
 8011066:	4b36      	ldr	r3, [pc, #216]	; (8011140 <tcp_abandon+0x174>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	61fb      	str	r3, [r7, #28]
 801106c:	e00c      	b.n	8011088 <tcp_abandon+0xbc>
 801106e:	69fb      	ldr	r3, [r7, #28]
 8011070:	68db      	ldr	r3, [r3, #12]
 8011072:	687a      	ldr	r2, [r7, #4]
 8011074:	429a      	cmp	r2, r3
 8011076:	d104      	bne.n	8011082 <tcp_abandon+0xb6>
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	68da      	ldr	r2, [r3, #12]
 801107c:	69fb      	ldr	r3, [r7, #28]
 801107e:	60da      	str	r2, [r3, #12]
 8011080:	e005      	b.n	801108e <tcp_abandon+0xc2>
 8011082:	69fb      	ldr	r3, [r7, #28]
 8011084:	68db      	ldr	r3, [r3, #12]
 8011086:	61fb      	str	r3, [r7, #28]
 8011088:	69fb      	ldr	r3, [r7, #28]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d1ef      	bne.n	801106e <tcp_abandon+0xa2>
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	2200      	movs	r2, #0
 8011092:	60da      	str	r2, [r3, #12]
 8011094:	e00b      	b.n	80110ae <tcp_abandon+0xe2>
      }
    } else {
      send_rst = reset;
 8011096:	683b      	ldr	r3, [r7, #0]
 8011098:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	8adb      	ldrh	r3, [r3, #22]
 801109e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80110a0:	6879      	ldr	r1, [r7, #4]
 80110a2:	4828      	ldr	r0, [pc, #160]	; (8011144 <tcp_abandon+0x178>)
 80110a4:	f001 fb32 	bl	801270c <tcp_pcb_remove>
 80110a8:	4b27      	ldr	r3, [pc, #156]	; (8011148 <tcp_abandon+0x17c>)
 80110aa:	2201      	movs	r2, #1
 80110ac:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d004      	beq.n	80110c0 <tcp_abandon+0xf4>
      tcp_segs_free(pcb->unacked);
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110ba:	4618      	mov	r0, r3
 80110bc:	f000 fffc 	bl	80120b8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d004      	beq.n	80110d2 <tcp_abandon+0x106>
      tcp_segs_free(pcb->unsent);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110cc:	4618      	mov	r0, r3
 80110ce:	f000 fff3 	bl	80120b8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d004      	beq.n	80110e4 <tcp_abandon+0x118>
      tcp_segs_free(pcb->ooseq);
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110de:	4618      	mov	r0, r3
 80110e0:	f000 ffea 	bl	80120b8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80110e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d00e      	beq.n	8011108 <tcp_abandon+0x13c>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80110ea:	6879      	ldr	r1, [r7, #4]
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	3304      	adds	r3, #4
 80110f0:	687a      	ldr	r2, [r7, #4]
 80110f2:	8b12      	ldrh	r2, [r2, #24]
 80110f4:	9202      	str	r2, [sp, #8]
 80110f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80110f8:	9201      	str	r2, [sp, #4]
 80110fa:	9300      	str	r3, [sp, #0]
 80110fc:	460b      	mov	r3, r1
 80110fe:	697a      	ldr	r2, [r7, #20]
 8011100:	69b9      	ldr	r1, [r7, #24]
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f005 fcd8 	bl	8016ab8 <tcp_rst>
    }
    last_state = pcb->state;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	7d1b      	ldrb	r3, [r3, #20]
 801110c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801110e:	6878      	ldr	r0, [r7, #4]
 8011110:	f7ff fd30 	bl	8010b74 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011114:	693b      	ldr	r3, [r7, #16]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d004      	beq.n	8011124 <tcp_abandon+0x158>
 801111a:	693b      	ldr	r3, [r7, #16]
 801111c:	f06f 010c 	mvn.w	r1, #12
 8011120:	68f8      	ldr	r0, [r7, #12]
 8011122:	4798      	blx	r3
  }
}
 8011124:	3728      	adds	r7, #40	; 0x28
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}
 801112a:	bf00      	nop
 801112c:	0801bbf0 	.word	0x0801bbf0
 8011130:	0801bd34 	.word	0x0801bd34
 8011134:	0801bc34 	.word	0x0801bc34
 8011138:	0801bd50 	.word	0x0801bd50
 801113c:	24015038 	.word	0x24015038
 8011140:	2401502c 	.word	0x2401502c
 8011144:	24015034 	.word	0x24015034
 8011148:	2401503c 	.word	0x2401503c

0801114c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b082      	sub	sp, #8
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011154:	2101      	movs	r1, #1
 8011156:	6878      	ldr	r0, [r7, #4]
 8011158:	f7ff ff38 	bl	8010fcc <tcp_abandon>
}
 801115c:	bf00      	nop
 801115e:	3708      	adds	r7, #8
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}

08011164 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b088      	sub	sp, #32
 8011168:	af00      	add	r7, sp, #0
 801116a:	60f8      	str	r0, [r7, #12]
 801116c:	60b9      	str	r1, [r7, #8]
 801116e:	4613      	mov	r3, r2
 8011170:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8011172:	2304      	movs	r3, #4
 8011174:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 8011176:	f7f9 fca5 	bl	800aac4 <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801117a:	68bb      	ldr	r3, [r7, #8]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d101      	bne.n	8011184 <tcp_bind+0x20>
    ipaddr = IP4_ADDR_ANY;
 8011180:	4b3e      	ldr	r3, [pc, #248]	; (801127c <tcp_bind+0x118>)
 8011182:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d109      	bne.n	801119e <tcp_bind+0x3a>
 801118a:	4b3d      	ldr	r3, [pc, #244]	; (8011280 <tcp_bind+0x11c>)
 801118c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8011190:	493c      	ldr	r1, [pc, #240]	; (8011284 <tcp_bind+0x120>)
 8011192:	483d      	ldr	r0, [pc, #244]	; (8011288 <tcp_bind+0x124>)
 8011194:	f008 fe68 	bl	8019e68 <iprintf>
 8011198:	f06f 030f 	mvn.w	r3, #15
 801119c:	e06a      	b.n	8011274 <tcp_bind+0x110>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	7d1b      	ldrb	r3, [r3, #20]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d009      	beq.n	80111ba <tcp_bind+0x56>
 80111a6:	4b36      	ldr	r3, [pc, #216]	; (8011280 <tcp_bind+0x11c>)
 80111a8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80111ac:	4937      	ldr	r1, [pc, #220]	; (801128c <tcp_bind+0x128>)
 80111ae:	4836      	ldr	r0, [pc, #216]	; (8011288 <tcp_bind+0x124>)
 80111b0:	f008 fe5a 	bl	8019e68 <iprintf>
 80111b4:	f06f 0305 	mvn.w	r3, #5
 80111b8:	e05c      	b.n	8011274 <tcp_bind+0x110>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80111ba:	88fb      	ldrh	r3, [r7, #6]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d109      	bne.n	80111d4 <tcp_bind+0x70>
    port = tcp_new_port();
 80111c0:	f000 f9f8 	bl	80115b4 <tcp_new_port>
 80111c4:	4603      	mov	r3, r0
 80111c6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80111c8:	88fb      	ldrh	r3, [r7, #6]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d135      	bne.n	801123a <tcp_bind+0xd6>
      return ERR_BUF;
 80111ce:	f06f 0301 	mvn.w	r3, #1
 80111d2:	e04f      	b.n	8011274 <tcp_bind+0x110>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80111d4:	2300      	movs	r3, #0
 80111d6:	61fb      	str	r3, [r7, #28]
 80111d8:	e02b      	b.n	8011232 <tcp_bind+0xce>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80111da:	4a2d      	ldr	r2, [pc, #180]	; (8011290 <tcp_bind+0x12c>)
 80111dc:	69fb      	ldr	r3, [r7, #28]
 80111de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	61bb      	str	r3, [r7, #24]
 80111e6:	e01e      	b.n	8011226 <tcp_bind+0xc2>
        if (cpcb->local_port == port) {
 80111e8:	69bb      	ldr	r3, [r7, #24]
 80111ea:	8adb      	ldrh	r3, [r3, #22]
 80111ec:	88fa      	ldrh	r2, [r7, #6]
 80111ee:	429a      	cmp	r2, r3
 80111f0:	d116      	bne.n	8011220 <tcp_bind+0xbc>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80111f2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d010      	beq.n	801121a <tcp_bind+0xb6>
                (ip_addr_isany(&cpcb->local_ip) ||
 80111f8:	69bb      	ldr	r3, [r7, #24]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d00c      	beq.n	801121a <tcp_bind+0xb6>
 8011200:	68bb      	ldr	r3, [r7, #8]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d009      	beq.n	801121a <tcp_bind+0xb6>
                 ip_addr_isany(ipaddr) ||
 8011206:	68bb      	ldr	r3, [r7, #8]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d005      	beq.n	801121a <tcp_bind+0xb6>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801120e:	69bb      	ldr	r3, [r7, #24]
 8011210:	681a      	ldr	r2, [r3, #0]
 8011212:	68bb      	ldr	r3, [r7, #8]
 8011214:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011216:	429a      	cmp	r2, r3
 8011218:	d102      	bne.n	8011220 <tcp_bind+0xbc>
              return ERR_USE;
 801121a:	f06f 0307 	mvn.w	r3, #7
 801121e:	e029      	b.n	8011274 <tcp_bind+0x110>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8011220:	69bb      	ldr	r3, [r7, #24]
 8011222:	68db      	ldr	r3, [r3, #12]
 8011224:	61bb      	str	r3, [r7, #24]
 8011226:	69bb      	ldr	r3, [r7, #24]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d1dd      	bne.n	80111e8 <tcp_bind+0x84>
    for (i = 0; i < max_pcb_list; i++) {
 801122c:	69fb      	ldr	r3, [r7, #28]
 801122e:	3301      	adds	r3, #1
 8011230:	61fb      	str	r3, [r7, #28]
 8011232:	69fa      	ldr	r2, [r7, #28]
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	429a      	cmp	r2, r3
 8011238:	dbcf      	blt.n	80111da <tcp_bind+0x76>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d00c      	beq.n	801125a <tcp_bind+0xf6>
 8011240:	68bb      	ldr	r3, [r7, #8]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d008      	beq.n	801125a <tcp_bind+0xf6>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8011248:	68bb      	ldr	r3, [r7, #8]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d002      	beq.n	8011254 <tcp_bind+0xf0>
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	e000      	b.n	8011256 <tcp_bind+0xf2>
 8011254:	2300      	movs	r3, #0
 8011256:	68fa      	ldr	r2, [r7, #12]
 8011258:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	88fa      	ldrh	r2, [r7, #6]
 801125e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8011260:	4b0c      	ldr	r3, [pc, #48]	; (8011294 <tcp_bind+0x130>)
 8011262:	681a      	ldr	r2, [r3, #0]
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	60da      	str	r2, [r3, #12]
 8011268:	4a0a      	ldr	r2, [pc, #40]	; (8011294 <tcp_bind+0x130>)
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	6013      	str	r3, [r2, #0]
 801126e:	f005 fde5 	bl	8016e3c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8011272:	2300      	movs	r3, #0
}
 8011274:	4618      	mov	r0, r3
 8011276:	3720      	adds	r7, #32
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}
 801127c:	0801e2bc 	.word	0x0801e2bc
 8011280:	0801bbf0 	.word	0x0801bbf0
 8011284:	0801bd84 	.word	0x0801bd84
 8011288:	0801bc34 	.word	0x0801bc34
 801128c:	0801bd9c 	.word	0x0801bd9c
 8011290:	0801e294 	.word	0x0801e294
 8011294:	2401502c 	.word	0x2401502c

08011298 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b084      	sub	sp, #16
 801129c:	af00      	add	r7, sp, #0
 801129e:	60f8      	str	r0, [r7, #12]
 80112a0:	60b9      	str	r1, [r7, #8]
 80112a2:	4613      	mov	r3, r2
 80112a4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d106      	bne.n	80112ba <tcp_accept_null+0x22>
 80112ac:	4b07      	ldr	r3, [pc, #28]	; (80112cc <tcp_accept_null+0x34>)
 80112ae:	f240 320f 	movw	r2, #783	; 0x30f
 80112b2:	4907      	ldr	r1, [pc, #28]	; (80112d0 <tcp_accept_null+0x38>)
 80112b4:	4807      	ldr	r0, [pc, #28]	; (80112d4 <tcp_accept_null+0x3c>)
 80112b6:	f008 fdd7 	bl	8019e68 <iprintf>

  tcp_abort(pcb);
 80112ba:	68b8      	ldr	r0, [r7, #8]
 80112bc:	f7ff ff46 	bl	801114c <tcp_abort>

  return ERR_ABRT;
 80112c0:	f06f 030c 	mvn.w	r3, #12
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	3710      	adds	r7, #16
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bd80      	pop	{r7, pc}
 80112cc:	0801bbf0 	.word	0x0801bbf0
 80112d0:	0801bdc4 	.word	0x0801bdc4
 80112d4:	0801bc34 	.word	0x0801bc34

080112d8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b082      	sub	sp, #8
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
 80112e0:	460b      	mov	r3, r1
 80112e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
 80112e4:	f7f9 fbee 	bl	800aac4 <sys_check_core_locking>
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80112e8:	78fb      	ldrb	r3, [r7, #3]
 80112ea:	2200      	movs	r2, #0
 80112ec:	4619      	mov	r1, r3
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	f000 f806 	bl	8011300 <tcp_listen_with_backlog_and_err>
 80112f4:	4603      	mov	r3, r0
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	3708      	adds	r7, #8
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd80      	pop	{r7, pc}
	...

08011300 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b088      	sub	sp, #32
 8011304:	af00      	add	r7, sp, #0
 8011306:	60f8      	str	r0, [r7, #12]
 8011308:	460b      	mov	r3, r1
 801130a:	607a      	str	r2, [r7, #4]
 801130c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801130e:	2300      	movs	r3, #0
 8011310:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();
 8011312:	f7f9 fbd7 	bl	800aac4 <sys_check_core_locking>

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d109      	bne.n	8011330 <tcp_listen_with_backlog_and_err+0x30>
 801131c:	4b47      	ldr	r3, [pc, #284]	; (801143c <tcp_listen_with_backlog_and_err+0x13c>)
 801131e:	f240 3259 	movw	r2, #857	; 0x359
 8011322:	4947      	ldr	r1, [pc, #284]	; (8011440 <tcp_listen_with_backlog_and_err+0x140>)
 8011324:	4847      	ldr	r0, [pc, #284]	; (8011444 <tcp_listen_with_backlog_and_err+0x144>)
 8011326:	f008 fd9f 	bl	8019e68 <iprintf>
 801132a:	23f0      	movs	r3, #240	; 0xf0
 801132c:	76fb      	strb	r3, [r7, #27]
 801132e:	e079      	b.n	8011424 <tcp_listen_with_backlog_and_err+0x124>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	7d1b      	ldrb	r3, [r3, #20]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d009      	beq.n	801134c <tcp_listen_with_backlog_and_err+0x4c>
 8011338:	4b40      	ldr	r3, [pc, #256]	; (801143c <tcp_listen_with_backlog_and_err+0x13c>)
 801133a:	f240 325a 	movw	r2, #858	; 0x35a
 801133e:	4942      	ldr	r1, [pc, #264]	; (8011448 <tcp_listen_with_backlog_and_err+0x148>)
 8011340:	4840      	ldr	r0, [pc, #256]	; (8011444 <tcp_listen_with_backlog_and_err+0x144>)
 8011342:	f008 fd91 	bl	8019e68 <iprintf>
 8011346:	23f1      	movs	r3, #241	; 0xf1
 8011348:	76fb      	strb	r3, [r7, #27]
 801134a:	e06b      	b.n	8011424 <tcp_listen_with_backlog_and_err+0x124>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	7d1b      	ldrb	r3, [r3, #20]
 8011350:	2b01      	cmp	r3, #1
 8011352:	d104      	bne.n	801135e <tcp_listen_with_backlog_and_err+0x5e>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8011358:	23f7      	movs	r3, #247	; 0xf7
 801135a:	76fb      	strb	r3, [r7, #27]
    goto done;
 801135c:	e062      	b.n	8011424 <tcp_listen_with_backlog_and_err+0x124>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801135e:	2002      	movs	r0, #2
 8011360:	f7fe f97a 	bl	800f658 <memp_malloc>
 8011364:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8011366:	69fb      	ldr	r3, [r7, #28]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d102      	bne.n	8011372 <tcp_listen_with_backlog_and_err+0x72>
    res = ERR_MEM;
 801136c:	23ff      	movs	r3, #255	; 0xff
 801136e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8011370:	e058      	b.n	8011424 <tcp_listen_with_backlog_and_err+0x124>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	691a      	ldr	r2, [r3, #16]
 8011376:	69fb      	ldr	r3, [r7, #28]
 8011378:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	8ada      	ldrh	r2, [r3, #22]
 801137e:	69fb      	ldr	r3, [r7, #28]
 8011380:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8011382:	69fb      	ldr	r3, [r7, #28]
 8011384:	2201      	movs	r2, #1
 8011386:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	7d5a      	ldrb	r2, [r3, #21]
 801138c:	69fb      	ldr	r3, [r7, #28]
 801138e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	7a5a      	ldrb	r2, [r3, #9]
 8011394:	69fb      	ldr	r3, [r7, #28]
 8011396:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8011398:	69fb      	ldr	r3, [r7, #28]
 801139a:	2200      	movs	r2, #0
 801139c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	7ada      	ldrb	r2, [r3, #11]
 80113a2:	69fb      	ldr	r3, [r7, #28]
 80113a4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	7a9a      	ldrb	r2, [r3, #10]
 80113aa:	69fb      	ldr	r3, [r7, #28]
 80113ac:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	681a      	ldr	r2, [r3, #0]
 80113b2:	69fb      	ldr	r3, [r7, #28]
 80113b4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	8adb      	ldrh	r3, [r3, #22]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d021      	beq.n	8011402 <tcp_listen_with_backlog_and_err+0x102>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80113be:	4b23      	ldr	r3, [pc, #140]	; (801144c <tcp_listen_with_backlog_and_err+0x14c>)
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	68fa      	ldr	r2, [r7, #12]
 80113c4:	429a      	cmp	r2, r3
 80113c6:	d105      	bne.n	80113d4 <tcp_listen_with_backlog_and_err+0xd4>
 80113c8:	4b20      	ldr	r3, [pc, #128]	; (801144c <tcp_listen_with_backlog_and_err+0x14c>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	68db      	ldr	r3, [r3, #12]
 80113ce:	4a1f      	ldr	r2, [pc, #124]	; (801144c <tcp_listen_with_backlog_and_err+0x14c>)
 80113d0:	6013      	str	r3, [r2, #0]
 80113d2:	e013      	b.n	80113fc <tcp_listen_with_backlog_and_err+0xfc>
 80113d4:	4b1d      	ldr	r3, [pc, #116]	; (801144c <tcp_listen_with_backlog_and_err+0x14c>)
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	617b      	str	r3, [r7, #20]
 80113da:	e00c      	b.n	80113f6 <tcp_listen_with_backlog_and_err+0xf6>
 80113dc:	697b      	ldr	r3, [r7, #20]
 80113de:	68db      	ldr	r3, [r3, #12]
 80113e0:	68fa      	ldr	r2, [r7, #12]
 80113e2:	429a      	cmp	r2, r3
 80113e4:	d104      	bne.n	80113f0 <tcp_listen_with_backlog_and_err+0xf0>
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	68da      	ldr	r2, [r3, #12]
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	60da      	str	r2, [r3, #12]
 80113ee:	e005      	b.n	80113fc <tcp_listen_with_backlog_and_err+0xfc>
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	68db      	ldr	r3, [r3, #12]
 80113f4:	617b      	str	r3, [r7, #20]
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d1ef      	bne.n	80113dc <tcp_listen_with_backlog_and_err+0xdc>
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	2200      	movs	r2, #0
 8011400:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8011402:	68f8      	ldr	r0, [r7, #12]
 8011404:	f7ff fbb6 	bl	8010b74 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8011408:	69fb      	ldr	r3, [r7, #28]
 801140a:	4a11      	ldr	r2, [pc, #68]	; (8011450 <tcp_listen_with_backlog_and_err+0x150>)
 801140c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801140e:	4b11      	ldr	r3, [pc, #68]	; (8011454 <tcp_listen_with_backlog_and_err+0x154>)
 8011410:	681a      	ldr	r2, [r3, #0]
 8011412:	69fb      	ldr	r3, [r7, #28]
 8011414:	60da      	str	r2, [r3, #12]
 8011416:	4a0f      	ldr	r2, [pc, #60]	; (8011454 <tcp_listen_with_backlog_and_err+0x154>)
 8011418:	69fb      	ldr	r3, [r7, #28]
 801141a:	6013      	str	r3, [r2, #0]
 801141c:	f005 fd0e 	bl	8016e3c <tcp_timer_needed>
  res = ERR_OK;
 8011420:	2300      	movs	r3, #0
 8011422:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d002      	beq.n	8011430 <tcp_listen_with_backlog_and_err+0x130>
    *err = res;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	7efa      	ldrb	r2, [r7, #27]
 801142e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8011430:	69fb      	ldr	r3, [r7, #28]
}
 8011432:	4618      	mov	r0, r3
 8011434:	3720      	adds	r7, #32
 8011436:	46bd      	mov	sp, r7
 8011438:	bd80      	pop	{r7, pc}
 801143a:	bf00      	nop
 801143c:	0801bbf0 	.word	0x0801bbf0
 8011440:	0801bde4 	.word	0x0801bde4
 8011444:	0801bc34 	.word	0x0801bc34
 8011448:	0801be14 	.word	0x0801be14
 801144c:	2401502c 	.word	0x2401502c
 8011450:	08011299 	.word	0x08011299
 8011454:	24015030 	.word	0x24015030

08011458 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b084      	sub	sp, #16
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d106      	bne.n	8011474 <tcp_update_rcv_ann_wnd+0x1c>
 8011466:	4b25      	ldr	r3, [pc, #148]	; (80114fc <tcp_update_rcv_ann_wnd+0xa4>)
 8011468:	f240 32a6 	movw	r2, #934	; 0x3a6
 801146c:	4924      	ldr	r1, [pc, #144]	; (8011500 <tcp_update_rcv_ann_wnd+0xa8>)
 801146e:	4825      	ldr	r0, [pc, #148]	; (8011504 <tcp_update_rcv_ann_wnd+0xac>)
 8011470:	f008 fcfa 	bl	8019e68 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011478:	687a      	ldr	r2, [r7, #4]
 801147a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801147c:	4413      	add	r3, r2
 801147e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011484:	687a      	ldr	r2, [r7, #4]
 8011486:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011488:	f640 3168 	movw	r1, #2920	; 0xb68
 801148c:	428a      	cmp	r2, r1
 801148e:	bf28      	it	cs
 8011490:	460a      	movcs	r2, r1
 8011492:	b292      	uxth	r2, r2
 8011494:	4413      	add	r3, r2
 8011496:	68fa      	ldr	r2, [r7, #12]
 8011498:	1ad3      	subs	r3, r2, r3
 801149a:	2b00      	cmp	r3, #0
 801149c:	db08      	blt.n	80114b0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114aa:	68fa      	ldr	r2, [r7, #12]
 80114ac:	1ad3      	subs	r3, r2, r3
 80114ae:	e020      	b.n	80114f2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114b8:	1ad3      	subs	r3, r2, r3
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	dd03      	ble.n	80114c6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	2200      	movs	r2, #0
 80114c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80114c4:	e014      	b.n	80114f0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114ce:	1ad3      	subs	r3, r2, r3
 80114d0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80114d8:	d306      	bcc.n	80114e8 <tcp_update_rcv_ann_wnd+0x90>
 80114da:	4b08      	ldr	r3, [pc, #32]	; (80114fc <tcp_update_rcv_ann_wnd+0xa4>)
 80114dc:	f240 32b6 	movw	r2, #950	; 0x3b6
 80114e0:	4909      	ldr	r1, [pc, #36]	; (8011508 <tcp_update_rcv_ann_wnd+0xb0>)
 80114e2:	4808      	ldr	r0, [pc, #32]	; (8011504 <tcp_update_rcv_ann_wnd+0xac>)
 80114e4:	f008 fcc0 	bl	8019e68 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	b29a      	uxth	r2, r3
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80114f0:	2300      	movs	r3, #0
  }
}
 80114f2:	4618      	mov	r0, r3
 80114f4:	3710      	adds	r7, #16
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}
 80114fa:	bf00      	nop
 80114fc:	0801bbf0 	.word	0x0801bbf0
 8011500:	0801be4c 	.word	0x0801be4c
 8011504:	0801bc34 	.word	0x0801bc34
 8011508:	0801be70 	.word	0x0801be70

0801150c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b084      	sub	sp, #16
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
 8011514:	460b      	mov	r3, r1
 8011516:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();
 8011518:	f7f9 fad4 	bl	800aac4 <sys_check_core_locking>

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d107      	bne.n	8011532 <tcp_recved+0x26>
 8011522:	4b20      	ldr	r3, [pc, #128]	; (80115a4 <tcp_recved+0x98>)
 8011524:	f240 32cf 	movw	r2, #975	; 0x3cf
 8011528:	491f      	ldr	r1, [pc, #124]	; (80115a8 <tcp_recved+0x9c>)
 801152a:	4820      	ldr	r0, [pc, #128]	; (80115ac <tcp_recved+0xa0>)
 801152c:	f008 fc9c 	bl	8019e68 <iprintf>
 8011530:	e034      	b.n	801159c <tcp_recved+0x90>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	7d1b      	ldrb	r3, [r3, #20]
 8011536:	2b01      	cmp	r3, #1
 8011538:	d106      	bne.n	8011548 <tcp_recved+0x3c>
 801153a:	4b1a      	ldr	r3, [pc, #104]	; (80115a4 <tcp_recved+0x98>)
 801153c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8011540:	491b      	ldr	r1, [pc, #108]	; (80115b0 <tcp_recved+0xa4>)
 8011542:	481a      	ldr	r0, [pc, #104]	; (80115ac <tcp_recved+0xa0>)
 8011544:	f008 fc90 	bl	8019e68 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801154c:	887b      	ldrh	r3, [r7, #2]
 801154e:	4413      	add	r3, r2
 8011550:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8011552:	89fb      	ldrh	r3, [r7, #14]
 8011554:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011558:	4293      	cmp	r3, r2
 801155a:	d804      	bhi.n	8011566 <tcp_recved+0x5a>
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011560:	89fa      	ldrh	r2, [r7, #14]
 8011562:	429a      	cmp	r2, r3
 8011564:	d204      	bcs.n	8011570 <tcp_recved+0x64>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801156c:	851a      	strh	r2, [r3, #40]	; 0x28
 801156e:	e002      	b.n	8011576 <tcp_recved+0x6a>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	89fa      	ldrh	r2, [r7, #14]
 8011574:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f7ff ff6e 	bl	8011458 <tcp_update_rcv_ann_wnd>
 801157c:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801157e:	68bb      	ldr	r3, [r7, #8]
 8011580:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011584:	4293      	cmp	r3, r2
 8011586:	d909      	bls.n	801159c <tcp_recved+0x90>
    tcp_ack_now(pcb);
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	8b5b      	ldrh	r3, [r3, #26]
 801158c:	f043 0302 	orr.w	r3, r3, #2
 8011590:	b29a      	uxth	r2, r3
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011596:	6878      	ldr	r0, [r7, #4]
 8011598:	f004 fcd8 	bl	8015f4c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801159c:	3710      	adds	r7, #16
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}
 80115a2:	bf00      	nop
 80115a4:	0801bbf0 	.word	0x0801bbf0
 80115a8:	0801be8c 	.word	0x0801be8c
 80115ac:	0801bc34 	.word	0x0801bc34
 80115b0:	0801bea4 	.word	0x0801bea4

080115b4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80115b4:	b480      	push	{r7}
 80115b6:	b083      	sub	sp, #12
 80115b8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80115ba:	2300      	movs	r3, #0
 80115bc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80115be:	4b1e      	ldr	r3, [pc, #120]	; (8011638 <tcp_new_port+0x84>)
 80115c0:	881b      	ldrh	r3, [r3, #0]
 80115c2:	3301      	adds	r3, #1
 80115c4:	b29a      	uxth	r2, r3
 80115c6:	4b1c      	ldr	r3, [pc, #112]	; (8011638 <tcp_new_port+0x84>)
 80115c8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80115ca:	4b1b      	ldr	r3, [pc, #108]	; (8011638 <tcp_new_port+0x84>)
 80115cc:	881b      	ldrh	r3, [r3, #0]
 80115ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80115d2:	4293      	cmp	r3, r2
 80115d4:	d103      	bne.n	80115de <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80115d6:	4b18      	ldr	r3, [pc, #96]	; (8011638 <tcp_new_port+0x84>)
 80115d8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80115dc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80115de:	2300      	movs	r3, #0
 80115e0:	71fb      	strb	r3, [r7, #7]
 80115e2:	e01e      	b.n	8011622 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80115e4:	79fb      	ldrb	r3, [r7, #7]
 80115e6:	4a15      	ldr	r2, [pc, #84]	; (801163c <tcp_new_port+0x88>)
 80115e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	603b      	str	r3, [r7, #0]
 80115f0:	e011      	b.n	8011616 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	8ada      	ldrh	r2, [r3, #22]
 80115f6:	4b10      	ldr	r3, [pc, #64]	; (8011638 <tcp_new_port+0x84>)
 80115f8:	881b      	ldrh	r3, [r3, #0]
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d108      	bne.n	8011610 <tcp_new_port+0x5c>
        n++;
 80115fe:	88bb      	ldrh	r3, [r7, #4]
 8011600:	3301      	adds	r3, #1
 8011602:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8011604:	88bb      	ldrh	r3, [r7, #4]
 8011606:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801160a:	d3d8      	bcc.n	80115be <tcp_new_port+0xa>
          return 0;
 801160c:	2300      	movs	r3, #0
 801160e:	e00d      	b.n	801162c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	68db      	ldr	r3, [r3, #12]
 8011614:	603b      	str	r3, [r7, #0]
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d1ea      	bne.n	80115f2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801161c:	79fb      	ldrb	r3, [r7, #7]
 801161e:	3301      	adds	r3, #1
 8011620:	71fb      	strb	r3, [r7, #7]
 8011622:	79fb      	ldrb	r3, [r7, #7]
 8011624:	2b03      	cmp	r3, #3
 8011626:	d9dd      	bls.n	80115e4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8011628:	4b03      	ldr	r3, [pc, #12]	; (8011638 <tcp_new_port+0x84>)
 801162a:	881b      	ldrh	r3, [r3, #0]
}
 801162c:	4618      	mov	r0, r3
 801162e:	370c      	adds	r7, #12
 8011630:	46bd      	mov	sp, r7
 8011632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011636:	4770      	bx	lr
 8011638:	24000028 	.word	0x24000028
 801163c:	0801e294 	.word	0x0801e294

08011640 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8011640:	b580      	push	{r7, lr}
 8011642:	b08a      	sub	sp, #40	; 0x28
 8011644:	af00      	add	r7, sp, #0
 8011646:	60f8      	str	r0, [r7, #12]
 8011648:	60b9      	str	r1, [r7, #8]
 801164a:	603b      	str	r3, [r7, #0]
 801164c:	4613      	mov	r3, r2
 801164e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8011650:	2300      	movs	r3, #0
 8011652:	627b      	str	r3, [r7, #36]	; 0x24
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();
 8011654:	f7f9 fa36 	bl	800aac4 <sys_check_core_locking>

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d109      	bne.n	8011672 <tcp_connect+0x32>
 801165e:	4b7d      	ldr	r3, [pc, #500]	; (8011854 <tcp_connect+0x214>)
 8011660:	f240 4235 	movw	r2, #1077	; 0x435
 8011664:	497c      	ldr	r1, [pc, #496]	; (8011858 <tcp_connect+0x218>)
 8011666:	487d      	ldr	r0, [pc, #500]	; (801185c <tcp_connect+0x21c>)
 8011668:	f008 fbfe 	bl	8019e68 <iprintf>
 801166c:	f06f 030f 	mvn.w	r3, #15
 8011670:	e0ec      	b.n	801184c <tcp_connect+0x20c>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d109      	bne.n	801168c <tcp_connect+0x4c>
 8011678:	4b76      	ldr	r3, [pc, #472]	; (8011854 <tcp_connect+0x214>)
 801167a:	f240 4236 	movw	r2, #1078	; 0x436
 801167e:	4978      	ldr	r1, [pc, #480]	; (8011860 <tcp_connect+0x220>)
 8011680:	4876      	ldr	r0, [pc, #472]	; (801185c <tcp_connect+0x21c>)
 8011682:	f008 fbf1 	bl	8019e68 <iprintf>
 8011686:	f06f 030f 	mvn.w	r3, #15
 801168a:	e0df      	b.n	801184c <tcp_connect+0x20c>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	7d1b      	ldrb	r3, [r3, #20]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d009      	beq.n	80116a8 <tcp_connect+0x68>
 8011694:	4b6f      	ldr	r3, [pc, #444]	; (8011854 <tcp_connect+0x214>)
 8011696:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801169a:	4972      	ldr	r1, [pc, #456]	; (8011864 <tcp_connect+0x224>)
 801169c:	486f      	ldr	r0, [pc, #444]	; (801185c <tcp_connect+0x21c>)
 801169e:	f008 fbe3 	bl	8019e68 <iprintf>
 80116a2:	f06f 0309 	mvn.w	r3, #9
 80116a6:	e0d1      	b.n	801184c <tcp_connect+0x20c>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80116a8:	68bb      	ldr	r3, [r7, #8]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d002      	beq.n	80116b4 <tcp_connect+0x74>
 80116ae:	68bb      	ldr	r3, [r7, #8]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	e000      	b.n	80116b6 <tcp_connect+0x76>
 80116b4:	2300      	movs	r3, #0
 80116b6:	68fa      	ldr	r2, [r7, #12]
 80116b8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	88fa      	ldrh	r2, [r7, #6]
 80116be:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	7a1b      	ldrb	r3, [r3, #8]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d006      	beq.n	80116d6 <tcp_connect+0x96>
    netif = netif_get_by_index(pcb->netif_idx);
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	7a1b      	ldrb	r3, [r3, #8]
 80116cc:	4618      	mov	r0, r3
 80116ce:	f7fe fb5b 	bl	800fd88 <netif_get_by_index>
 80116d2:	6278      	str	r0, [r7, #36]	; 0x24
 80116d4:	e005      	b.n	80116e2 <tcp_connect+0xa2>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	3304      	adds	r3, #4
 80116da:	4618      	mov	r0, r3
 80116dc:	f006 fff0 	bl	80186c0 <ip4_route>
 80116e0:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 80116e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d102      	bne.n	80116ee <tcp_connect+0xae>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 80116e8:	f06f 0303 	mvn.w	r3, #3
 80116ec:	e0ae      	b.n	801184c <tcp_connect+0x20c>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d003      	beq.n	80116fc <tcp_connect+0xbc>
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d111      	bne.n	8011720 <tcp_connect+0xe0>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 80116fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d002      	beq.n	8011708 <tcp_connect+0xc8>
 8011702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011704:	3304      	adds	r3, #4
 8011706:	e000      	b.n	801170a <tcp_connect+0xca>
 8011708:	2300      	movs	r3, #0
 801170a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 801170c:	69fb      	ldr	r3, [r7, #28]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d102      	bne.n	8011718 <tcp_connect+0xd8>
      return ERR_RTE;
 8011712:	f06f 0303 	mvn.w	r3, #3
 8011716:	e099      	b.n	801184c <tcp_connect+0x20c>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011718:	69fb      	ldr	r3, [r7, #28]
 801171a:	681a      	ldr	r2, [r3, #0]
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	8adb      	ldrh	r3, [r3, #22]
 8011724:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	8adb      	ldrh	r3, [r3, #22]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d10c      	bne.n	8011748 <tcp_connect+0x108>
    pcb->local_port = tcp_new_port();
 801172e:	f7ff ff41 	bl	80115b4 <tcp_new_port>
 8011732:	4603      	mov	r3, r0
 8011734:	461a      	mov	r2, r3
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	8adb      	ldrh	r3, [r3, #22]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d102      	bne.n	8011748 <tcp_connect+0x108>
      return ERR_BUF;
 8011742:	f06f 0301 	mvn.w	r3, #1
 8011746:	e081      	b.n	801184c <tcp_connect+0x20c>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8011748:	68f8      	ldr	r0, [r7, #12]
 801174a:	f001 f873 	bl	8012834 <tcp_next_iss>
 801174e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	2200      	movs	r2, #0
 8011754:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	697a      	ldr	r2, [r7, #20]
 801175a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	1e5a      	subs	r2, r3, #1
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	1e5a      	subs	r2, r3, #1
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 801176c:	697b      	ldr	r3, [r7, #20]
 801176e:	1e5a      	subs	r2, r3, #1
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801177a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011792:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	f44f 7206 	mov.w	r2, #536	; 0x218
 801179c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	3304      	adds	r3, #4
 80117a6:	461a      	mov	r2, r3
 80117a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80117aa:	f001 f869 	bl	8012880 <tcp_eff_send_mss_netif>
 80117ae:	4603      	mov	r3, r0
 80117b0:	461a      	mov	r2, r3
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	2201      	movs	r2, #1
 80117ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	683a      	ldr	r2, [r7, #0]
 80117c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80117c6:	2102      	movs	r1, #2
 80117c8:	68f8      	ldr	r0, [r7, #12]
 80117ca:	f004 fad1 	bl	8015d70 <tcp_enqueue_flags>
 80117ce:	4603      	mov	r3, r0
 80117d0:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 80117d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d136      	bne.n	8011848 <tcp_connect+0x208>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	2202      	movs	r2, #2
 80117de:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 80117e0:	8b7b      	ldrh	r3, [r7, #26]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d021      	beq.n	801182a <tcp_connect+0x1ea>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80117e6:	4b20      	ldr	r3, [pc, #128]	; (8011868 <tcp_connect+0x228>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	68fa      	ldr	r2, [r7, #12]
 80117ec:	429a      	cmp	r2, r3
 80117ee:	d105      	bne.n	80117fc <tcp_connect+0x1bc>
 80117f0:	4b1d      	ldr	r3, [pc, #116]	; (8011868 <tcp_connect+0x228>)
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	68db      	ldr	r3, [r3, #12]
 80117f6:	4a1c      	ldr	r2, [pc, #112]	; (8011868 <tcp_connect+0x228>)
 80117f8:	6013      	str	r3, [r2, #0]
 80117fa:	e013      	b.n	8011824 <tcp_connect+0x1e4>
 80117fc:	4b1a      	ldr	r3, [pc, #104]	; (8011868 <tcp_connect+0x228>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	623b      	str	r3, [r7, #32]
 8011802:	e00c      	b.n	801181e <tcp_connect+0x1de>
 8011804:	6a3b      	ldr	r3, [r7, #32]
 8011806:	68db      	ldr	r3, [r3, #12]
 8011808:	68fa      	ldr	r2, [r7, #12]
 801180a:	429a      	cmp	r2, r3
 801180c:	d104      	bne.n	8011818 <tcp_connect+0x1d8>
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	68da      	ldr	r2, [r3, #12]
 8011812:	6a3b      	ldr	r3, [r7, #32]
 8011814:	60da      	str	r2, [r3, #12]
 8011816:	e005      	b.n	8011824 <tcp_connect+0x1e4>
 8011818:	6a3b      	ldr	r3, [r7, #32]
 801181a:	68db      	ldr	r3, [r3, #12]
 801181c:	623b      	str	r3, [r7, #32]
 801181e:	6a3b      	ldr	r3, [r7, #32]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d1ef      	bne.n	8011804 <tcp_connect+0x1c4>
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	2200      	movs	r2, #0
 8011828:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801182a:	4b10      	ldr	r3, [pc, #64]	; (801186c <tcp_connect+0x22c>)
 801182c:	681a      	ldr	r2, [r3, #0]
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	60da      	str	r2, [r3, #12]
 8011832:	4a0e      	ldr	r2, [pc, #56]	; (801186c <tcp_connect+0x22c>)
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	6013      	str	r3, [r2, #0]
 8011838:	f005 fb00 	bl	8016e3c <tcp_timer_needed>
 801183c:	4b0c      	ldr	r3, [pc, #48]	; (8011870 <tcp_connect+0x230>)
 801183e:	2201      	movs	r2, #1
 8011840:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8011842:	68f8      	ldr	r0, [r7, #12]
 8011844:	f004 fb82 	bl	8015f4c <tcp_output>
  }
  return ret;
 8011848:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801184c:	4618      	mov	r0, r3
 801184e:	3728      	adds	r7, #40	; 0x28
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}
 8011854:	0801bbf0 	.word	0x0801bbf0
 8011858:	0801becc 	.word	0x0801becc
 801185c:	0801bc34 	.word	0x0801bc34
 8011860:	0801bee8 	.word	0x0801bee8
 8011864:	0801bf04 	.word	0x0801bf04
 8011868:	2401502c 	.word	0x2401502c
 801186c:	24015034 	.word	0x24015034
 8011870:	2401503c 	.word	0x2401503c

08011874 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011874:	b5b0      	push	{r4, r5, r7, lr}
 8011876:	b090      	sub	sp, #64	; 0x40
 8011878:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801187a:	2300      	movs	r3, #0
 801187c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011880:	4b94      	ldr	r3, [pc, #592]	; (8011ad4 <tcp_slowtmr+0x260>)
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	3301      	adds	r3, #1
 8011886:	4a93      	ldr	r2, [pc, #588]	; (8011ad4 <tcp_slowtmr+0x260>)
 8011888:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801188a:	4b93      	ldr	r3, [pc, #588]	; (8011ad8 <tcp_slowtmr+0x264>)
 801188c:	781b      	ldrb	r3, [r3, #0]
 801188e:	3301      	adds	r3, #1
 8011890:	b2da      	uxtb	r2, r3
 8011892:	4b91      	ldr	r3, [pc, #580]	; (8011ad8 <tcp_slowtmr+0x264>)
 8011894:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8011896:	2300      	movs	r3, #0
 8011898:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801189a:	4b90      	ldr	r3, [pc, #576]	; (8011adc <tcp_slowtmr+0x268>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80118a0:	e29d      	b.n	8011dde <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80118a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118a4:	7d1b      	ldrb	r3, [r3, #20]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d106      	bne.n	80118b8 <tcp_slowtmr+0x44>
 80118aa:	4b8d      	ldr	r3, [pc, #564]	; (8011ae0 <tcp_slowtmr+0x26c>)
 80118ac:	f240 42be 	movw	r2, #1214	; 0x4be
 80118b0:	498c      	ldr	r1, [pc, #560]	; (8011ae4 <tcp_slowtmr+0x270>)
 80118b2:	488d      	ldr	r0, [pc, #564]	; (8011ae8 <tcp_slowtmr+0x274>)
 80118b4:	f008 fad8 	bl	8019e68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80118b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ba:	7d1b      	ldrb	r3, [r3, #20]
 80118bc:	2b01      	cmp	r3, #1
 80118be:	d106      	bne.n	80118ce <tcp_slowtmr+0x5a>
 80118c0:	4b87      	ldr	r3, [pc, #540]	; (8011ae0 <tcp_slowtmr+0x26c>)
 80118c2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80118c6:	4989      	ldr	r1, [pc, #548]	; (8011aec <tcp_slowtmr+0x278>)
 80118c8:	4887      	ldr	r0, [pc, #540]	; (8011ae8 <tcp_slowtmr+0x274>)
 80118ca:	f008 facd 	bl	8019e68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80118ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118d0:	7d1b      	ldrb	r3, [r3, #20]
 80118d2:	2b0a      	cmp	r3, #10
 80118d4:	d106      	bne.n	80118e4 <tcp_slowtmr+0x70>
 80118d6:	4b82      	ldr	r3, [pc, #520]	; (8011ae0 <tcp_slowtmr+0x26c>)
 80118d8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80118dc:	4984      	ldr	r1, [pc, #528]	; (8011af0 <tcp_slowtmr+0x27c>)
 80118de:	4882      	ldr	r0, [pc, #520]	; (8011ae8 <tcp_slowtmr+0x274>)
 80118e0:	f008 fac2 	bl	8019e68 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80118e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118e6:	7f9a      	ldrb	r2, [r3, #30]
 80118e8:	4b7b      	ldr	r3, [pc, #492]	; (8011ad8 <tcp_slowtmr+0x264>)
 80118ea:	781b      	ldrb	r3, [r3, #0]
 80118ec:	429a      	cmp	r2, r3
 80118ee:	d105      	bne.n	80118fc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80118f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118f2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80118f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118f6:	68db      	ldr	r3, [r3, #12]
 80118f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80118fa:	e270      	b.n	8011dde <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80118fc:	4b76      	ldr	r3, [pc, #472]	; (8011ad8 <tcp_slowtmr+0x264>)
 80118fe:	781a      	ldrb	r2, [r3, #0]
 8011900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011902:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8011904:	2300      	movs	r3, #0
 8011906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801190a:	2300      	movs	r3, #0
 801190c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011912:	7d1b      	ldrb	r3, [r3, #20]
 8011914:	2b02      	cmp	r3, #2
 8011916:	d10a      	bne.n	801192e <tcp_slowtmr+0xba>
 8011918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801191a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801191e:	2b05      	cmp	r3, #5
 8011920:	d905      	bls.n	801192e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8011922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011926:	3301      	adds	r3, #1
 8011928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801192c:	e11e      	b.n	8011b6c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801192e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011930:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011934:	2b0b      	cmp	r3, #11
 8011936:	d905      	bls.n	8011944 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8011938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801193c:	3301      	adds	r3, #1
 801193e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011942:	e113      	b.n	8011b6c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011946:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801194a:	2b00      	cmp	r3, #0
 801194c:	d075      	beq.n	8011a3a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801194e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011952:	2b00      	cmp	r3, #0
 8011954:	d006      	beq.n	8011964 <tcp_slowtmr+0xf0>
 8011956:	4b62      	ldr	r3, [pc, #392]	; (8011ae0 <tcp_slowtmr+0x26c>)
 8011958:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801195c:	4965      	ldr	r1, [pc, #404]	; (8011af4 <tcp_slowtmr+0x280>)
 801195e:	4862      	ldr	r0, [pc, #392]	; (8011ae8 <tcp_slowtmr+0x274>)
 8011960:	f008 fa82 	bl	8019e68 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011968:	2b00      	cmp	r3, #0
 801196a:	d106      	bne.n	801197a <tcp_slowtmr+0x106>
 801196c:	4b5c      	ldr	r3, [pc, #368]	; (8011ae0 <tcp_slowtmr+0x26c>)
 801196e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8011972:	4961      	ldr	r1, [pc, #388]	; (8011af8 <tcp_slowtmr+0x284>)
 8011974:	485c      	ldr	r0, [pc, #368]	; (8011ae8 <tcp_slowtmr+0x274>)
 8011976:	f008 fa77 	bl	8019e68 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801197a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801197c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011980:	2b0b      	cmp	r3, #11
 8011982:	d905      	bls.n	8011990 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011988:	3301      	adds	r3, #1
 801198a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801198e:	e0ed      	b.n	8011b6c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011992:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011996:	3b01      	subs	r3, #1
 8011998:	4a58      	ldr	r2, [pc, #352]	; (8011afc <tcp_slowtmr+0x288>)
 801199a:	5cd3      	ldrb	r3, [r2, r3]
 801199c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801199e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80119a4:	7c7a      	ldrb	r2, [r7, #17]
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d907      	bls.n	80119ba <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80119aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80119b0:	3301      	adds	r3, #1
 80119b2:	b2da      	uxtb	r2, r3
 80119b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80119ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80119c0:	7c7a      	ldrb	r2, [r7, #17]
 80119c2:	429a      	cmp	r2, r3
 80119c4:	f200 80d2 	bhi.w	8011b6c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80119c8:	2301      	movs	r3, #1
 80119ca:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80119cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d108      	bne.n	80119e8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80119d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80119d8:	f005 f962 	bl	8016ca0 <tcp_zero_window_probe>
 80119dc:	4603      	mov	r3, r0
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d014      	beq.n	8011a0c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80119e2:	2300      	movs	r3, #0
 80119e4:	623b      	str	r3, [r7, #32]
 80119e6:	e011      	b.n	8011a0c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80119e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80119ee:	4619      	mov	r1, r3
 80119f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80119f2:	f004 f825 	bl	8015a40 <tcp_split_unsent_seg>
 80119f6:	4603      	mov	r3, r0
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d107      	bne.n	8011a0c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80119fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80119fe:	f004 faa5 	bl	8015f4c <tcp_output>
 8011a02:	4603      	mov	r3, r0
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d101      	bne.n	8011a0c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011a08:	2300      	movs	r3, #0
 8011a0a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011a0c:	6a3b      	ldr	r3, [r7, #32]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	f000 80ac 	beq.w	8011b6c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a16:	2200      	movs	r2, #0
 8011a18:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a1e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011a22:	2b06      	cmp	r3, #6
 8011a24:	f200 80a2 	bhi.w	8011b6c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a2a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011a2e:	3301      	adds	r3, #1
 8011a30:	b2da      	uxtb	r2, r3
 8011a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a34:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011a38:	e098      	b.n	8011b6c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a3c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	db0f      	blt.n	8011a64 <tcp_slowtmr+0x1f0>
 8011a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a46:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011a4a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011a4e:	4293      	cmp	r3, r2
 8011a50:	d008      	beq.n	8011a64 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a54:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011a58:	b29b      	uxth	r3, r3
 8011a5a:	3301      	adds	r3, #1
 8011a5c:	b29b      	uxth	r3, r3
 8011a5e:	b21a      	sxth	r2, r3
 8011a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a62:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a66:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a6c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011a70:	429a      	cmp	r2, r3
 8011a72:	db7b      	blt.n	8011b6c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011a74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a76:	f004 fd5f 	bl	8016538 <tcp_rexmit_rto_prepare>
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d007      	beq.n	8011a90 <tcp_slowtmr+0x21c>
 8011a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d171      	bne.n	8011b6c <tcp_slowtmr+0x2f8>
 8011a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d06d      	beq.n	8011b6c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a92:	7d1b      	ldrb	r3, [r3, #20]
 8011a94:	2b02      	cmp	r3, #2
 8011a96:	d03a      	beq.n	8011b0e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011a9e:	2b0c      	cmp	r3, #12
 8011aa0:	bf28      	it	cs
 8011aa2:	230c      	movcs	r3, #12
 8011aa4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011aac:	10db      	asrs	r3, r3, #3
 8011aae:	b21b      	sxth	r3, r3
 8011ab0:	461a      	mov	r2, r3
 8011ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011ab8:	4413      	add	r3, r2
 8011aba:	7efa      	ldrb	r2, [r7, #27]
 8011abc:	4910      	ldr	r1, [pc, #64]	; (8011b00 <tcp_slowtmr+0x28c>)
 8011abe:	5c8a      	ldrb	r2, [r1, r2]
 8011ac0:	4093      	lsls	r3, r2
 8011ac2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011ac4:	697b      	ldr	r3, [r7, #20]
 8011ac6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011aca:	4293      	cmp	r3, r2
 8011acc:	dc1a      	bgt.n	8011b04 <tcp_slowtmr+0x290>
 8011ace:	697b      	ldr	r3, [r7, #20]
 8011ad0:	b21a      	sxth	r2, r3
 8011ad2:	e019      	b.n	8011b08 <tcp_slowtmr+0x294>
 8011ad4:	24015028 	.word	0x24015028
 8011ad8:	2401503e 	.word	0x2401503e
 8011adc:	24015034 	.word	0x24015034
 8011ae0:	0801bbf0 	.word	0x0801bbf0
 8011ae4:	0801bf34 	.word	0x0801bf34
 8011ae8:	0801bc34 	.word	0x0801bc34
 8011aec:	0801bf60 	.word	0x0801bf60
 8011af0:	0801bf8c 	.word	0x0801bf8c
 8011af4:	0801bfbc 	.word	0x0801bfbc
 8011af8:	0801bff0 	.word	0x0801bff0
 8011afc:	0801e28c 	.word	0x0801e28c
 8011b00:	0801e27c 	.word	0x0801e27c
 8011b04:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b10:	2200      	movs	r2, #0
 8011b12:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b16:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b1c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011b20:	4293      	cmp	r3, r2
 8011b22:	bf28      	it	cs
 8011b24:	4613      	movcs	r3, r2
 8011b26:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011b28:	8a7b      	ldrh	r3, [r7, #18]
 8011b2a:	085b      	lsrs	r3, r3, #1
 8011b2c:	b29a      	uxth	r2, r3
 8011b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b30:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b36:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b3e:	005b      	lsls	r3, r3, #1
 8011b40:	b29b      	uxth	r3, r3
 8011b42:	429a      	cmp	r2, r3
 8011b44:	d206      	bcs.n	8011b54 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b4a:	005b      	lsls	r3, r3, #1
 8011b4c:	b29a      	uxth	r2, r3
 8011b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b50:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b56:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b60:	2200      	movs	r2, #0
 8011b62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8011b66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b68:	f004 fd56 	bl	8016618 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b6e:	7d1b      	ldrb	r3, [r3, #20]
 8011b70:	2b06      	cmp	r3, #6
 8011b72:	d111      	bne.n	8011b98 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b76:	8b5b      	ldrh	r3, [r3, #26]
 8011b78:	f003 0310 	and.w	r3, r3, #16
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d00b      	beq.n	8011b98 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011b80:	4b9c      	ldr	r3, [pc, #624]	; (8011df4 <tcp_slowtmr+0x580>)
 8011b82:	681a      	ldr	r2, [r3, #0]
 8011b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b86:	6a1b      	ldr	r3, [r3, #32]
 8011b88:	1ad3      	subs	r3, r2, r3
 8011b8a:	2b28      	cmp	r3, #40	; 0x28
 8011b8c:	d904      	bls.n	8011b98 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b92:	3301      	adds	r3, #1
 8011b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b9a:	7a5b      	ldrb	r3, [r3, #9]
 8011b9c:	f003 0308 	and.w	r3, r3, #8
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d04a      	beq.n	8011c3a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8011ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011ba8:	2b04      	cmp	r3, #4
 8011baa:	d003      	beq.n	8011bb4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bae:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011bb0:	2b07      	cmp	r3, #7
 8011bb2:	d142      	bne.n	8011c3a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011bb4:	4b8f      	ldr	r3, [pc, #572]	; (8011df4 <tcp_slowtmr+0x580>)
 8011bb6:	681a      	ldr	r2, [r3, #0]
 8011bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bba:	6a1b      	ldr	r3, [r3, #32]
 8011bbc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011bc4:	4b8c      	ldr	r3, [pc, #560]	; (8011df8 <tcp_slowtmr+0x584>)
 8011bc6:	440b      	add	r3, r1
 8011bc8:	498c      	ldr	r1, [pc, #560]	; (8011dfc <tcp_slowtmr+0x588>)
 8011bca:	fba1 1303 	umull	r1, r3, r1, r3
 8011bce:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	d90a      	bls.n	8011bea <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011bd8:	3301      	adds	r3, #1
 8011bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011bde:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011be2:	3301      	adds	r3, #1
 8011be4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011be8:	e027      	b.n	8011c3a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011bea:	4b82      	ldr	r3, [pc, #520]	; (8011df4 <tcp_slowtmr+0x580>)
 8011bec:	681a      	ldr	r2, [r3, #0]
 8011bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bf0:	6a1b      	ldr	r3, [r3, #32]
 8011bf2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bf6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bfc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011c00:	4618      	mov	r0, r3
 8011c02:	4b7f      	ldr	r3, [pc, #508]	; (8011e00 <tcp_slowtmr+0x58c>)
 8011c04:	fb00 f303 	mul.w	r3, r0, r3
 8011c08:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011c0a:	497c      	ldr	r1, [pc, #496]	; (8011dfc <tcp_slowtmr+0x588>)
 8011c0c:	fba1 1303 	umull	r1, r3, r1, r3
 8011c10:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d911      	bls.n	8011c3a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8011c16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c18:	f005 f802 	bl	8016c20 <tcp_keepalive>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8011c22:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d107      	bne.n	8011c3a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8011c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c2c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011c30:	3301      	adds	r3, #1
 8011c32:	b2da      	uxtb	r2, r3
 8011c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c36:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d011      	beq.n	8011c66 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011c42:	4b6c      	ldr	r3, [pc, #432]	; (8011df4 <tcp_slowtmr+0x580>)
 8011c44:	681a      	ldr	r2, [r3, #0]
 8011c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c48:	6a1b      	ldr	r3, [r3, #32]
 8011c4a:	1ad2      	subs	r2, r2, r3
 8011c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c4e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011c52:	4619      	mov	r1, r3
 8011c54:	460b      	mov	r3, r1
 8011c56:	005b      	lsls	r3, r3, #1
 8011c58:	440b      	add	r3, r1
 8011c5a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011c5c:	429a      	cmp	r2, r3
 8011c5e:	d302      	bcc.n	8011c66 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011c60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c62:	f000 feb7 	bl	80129d4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c68:	7d1b      	ldrb	r3, [r3, #20]
 8011c6a:	2b03      	cmp	r3, #3
 8011c6c:	d10b      	bne.n	8011c86 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011c6e:	4b61      	ldr	r3, [pc, #388]	; (8011df4 <tcp_slowtmr+0x580>)
 8011c70:	681a      	ldr	r2, [r3, #0]
 8011c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c74:	6a1b      	ldr	r3, [r3, #32]
 8011c76:	1ad3      	subs	r3, r2, r3
 8011c78:	2b28      	cmp	r3, #40	; 0x28
 8011c7a:	d904      	bls.n	8011c86 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c80:	3301      	adds	r3, #1
 8011c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c88:	7d1b      	ldrb	r3, [r3, #20]
 8011c8a:	2b09      	cmp	r3, #9
 8011c8c:	d10b      	bne.n	8011ca6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011c8e:	4b59      	ldr	r3, [pc, #356]	; (8011df4 <tcp_slowtmr+0x580>)
 8011c90:	681a      	ldr	r2, [r3, #0]
 8011c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c94:	6a1b      	ldr	r3, [r3, #32]
 8011c96:	1ad3      	subs	r3, r2, r3
 8011c98:	2bf0      	cmp	r3, #240	; 0xf0
 8011c9a:	d904      	bls.n	8011ca6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8011c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ca0:	3301      	adds	r3, #1
 8011ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d060      	beq.n	8011d70 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011cb4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011cb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cb8:	f000 fcd8 	bl	801266c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d010      	beq.n	8011ce4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011cc2:	4b50      	ldr	r3, [pc, #320]	; (8011e04 <tcp_slowtmr+0x590>)
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011cc8:	429a      	cmp	r2, r3
 8011cca:	d106      	bne.n	8011cda <tcp_slowtmr+0x466>
 8011ccc:	4b4e      	ldr	r3, [pc, #312]	; (8011e08 <tcp_slowtmr+0x594>)
 8011cce:	f240 526d 	movw	r2, #1389	; 0x56d
 8011cd2:	494e      	ldr	r1, [pc, #312]	; (8011e0c <tcp_slowtmr+0x598>)
 8011cd4:	484e      	ldr	r0, [pc, #312]	; (8011e10 <tcp_slowtmr+0x59c>)
 8011cd6:	f008 f8c7 	bl	8019e68 <iprintf>
        prev->next = pcb->next;
 8011cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cdc:	68da      	ldr	r2, [r3, #12]
 8011cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ce0:	60da      	str	r2, [r3, #12]
 8011ce2:	e00f      	b.n	8011d04 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011ce4:	4b47      	ldr	r3, [pc, #284]	; (8011e04 <tcp_slowtmr+0x590>)
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011cea:	429a      	cmp	r2, r3
 8011cec:	d006      	beq.n	8011cfc <tcp_slowtmr+0x488>
 8011cee:	4b46      	ldr	r3, [pc, #280]	; (8011e08 <tcp_slowtmr+0x594>)
 8011cf0:	f240 5271 	movw	r2, #1393	; 0x571
 8011cf4:	4947      	ldr	r1, [pc, #284]	; (8011e14 <tcp_slowtmr+0x5a0>)
 8011cf6:	4846      	ldr	r0, [pc, #280]	; (8011e10 <tcp_slowtmr+0x59c>)
 8011cf8:	f008 f8b6 	bl	8019e68 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cfe:	68db      	ldr	r3, [r3, #12]
 8011d00:	4a40      	ldr	r2, [pc, #256]	; (8011e04 <tcp_slowtmr+0x590>)
 8011d02:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011d04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d013      	beq.n	8011d34 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d0e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d12:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011d14:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8011d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d18:	3304      	adds	r3, #4
 8011d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d1c:	8ad2      	ldrh	r2, [r2, #22]
 8011d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011d20:	8b09      	ldrh	r1, [r1, #24]
 8011d22:	9102      	str	r1, [sp, #8]
 8011d24:	9201      	str	r2, [sp, #4]
 8011d26:	9300      	str	r3, [sp, #0]
 8011d28:	462b      	mov	r3, r5
 8011d2a:	4622      	mov	r2, r4
 8011d2c:	4601      	mov	r1, r0
 8011d2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d30:	f004 fec2 	bl	8016ab8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d36:	691b      	ldr	r3, [r3, #16]
 8011d38:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d3c:	7d1b      	ldrb	r3, [r3, #20]
 8011d3e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d42:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d46:	68db      	ldr	r3, [r3, #12]
 8011d48:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011d4a:	6838      	ldr	r0, [r7, #0]
 8011d4c:	f7fe ff12 	bl	8010b74 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8011d50:	4b31      	ldr	r3, [pc, #196]	; (8011e18 <tcp_slowtmr+0x5a4>)
 8011d52:	2200      	movs	r2, #0
 8011d54:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d004      	beq.n	8011d66 <tcp_slowtmr+0x4f2>
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	f06f 010c 	mvn.w	r1, #12
 8011d62:	68b8      	ldr	r0, [r7, #8]
 8011d64:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011d66:	4b2c      	ldr	r3, [pc, #176]	; (8011e18 <tcp_slowtmr+0x5a4>)
 8011d68:	781b      	ldrb	r3, [r3, #0]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d037      	beq.n	8011dde <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8011d6e:	e592      	b.n	8011896 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d72:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d76:	68db      	ldr	r3, [r3, #12]
 8011d78:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d7c:	7f1b      	ldrb	r3, [r3, #28]
 8011d7e:	3301      	adds	r3, #1
 8011d80:	b2da      	uxtb	r2, r3
 8011d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d84:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d88:	7f1a      	ldrb	r2, [r3, #28]
 8011d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d8c:	7f5b      	ldrb	r3, [r3, #29]
 8011d8e:	429a      	cmp	r2, r3
 8011d90:	d325      	bcc.n	8011dde <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8011d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d94:	2200      	movs	r2, #0
 8011d96:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011d98:	4b1f      	ldr	r3, [pc, #124]	; (8011e18 <tcp_slowtmr+0x5a4>)
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d00b      	beq.n	8011dc0 <tcp_slowtmr+0x54c>
 8011da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011db0:	6912      	ldr	r2, [r2, #16]
 8011db2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011db4:	4610      	mov	r0, r2
 8011db6:	4798      	blx	r3
 8011db8:	4603      	mov	r3, r0
 8011dba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8011dbe:	e002      	b.n	8011dc6 <tcp_slowtmr+0x552>
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8011dc6:	4b14      	ldr	r3, [pc, #80]	; (8011e18 <tcp_slowtmr+0x5a4>)
 8011dc8:	781b      	ldrb	r3, [r3, #0]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d000      	beq.n	8011dd0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8011dce:	e562      	b.n	8011896 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011dd0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d102      	bne.n	8011dde <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8011dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011dda:	f004 f8b7 	bl	8015f4c <tcp_output>
  while (pcb != NULL) {
 8011dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	f47f ad5e 	bne.w	80118a2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011de6:	2300      	movs	r3, #0
 8011de8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8011dea:	4b0c      	ldr	r3, [pc, #48]	; (8011e1c <tcp_slowtmr+0x5a8>)
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011df0:	e069      	b.n	8011ec6 <tcp_slowtmr+0x652>
 8011df2:	bf00      	nop
 8011df4:	24015028 	.word	0x24015028
 8011df8:	000a4cb8 	.word	0x000a4cb8
 8011dfc:	10624dd3 	.word	0x10624dd3
 8011e00:	000124f8 	.word	0x000124f8
 8011e04:	24015034 	.word	0x24015034
 8011e08:	0801bbf0 	.word	0x0801bbf0
 8011e0c:	0801c028 	.word	0x0801c028
 8011e10:	0801bc34 	.word	0x0801bc34
 8011e14:	0801c054 	.word	0x0801c054
 8011e18:	2401503c 	.word	0x2401503c
 8011e1c:	24015038 	.word	0x24015038
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e22:	7d1b      	ldrb	r3, [r3, #20]
 8011e24:	2b0a      	cmp	r3, #10
 8011e26:	d006      	beq.n	8011e36 <tcp_slowtmr+0x5c2>
 8011e28:	4b2b      	ldr	r3, [pc, #172]	; (8011ed8 <tcp_slowtmr+0x664>)
 8011e2a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8011e2e:	492b      	ldr	r1, [pc, #172]	; (8011edc <tcp_slowtmr+0x668>)
 8011e30:	482b      	ldr	r0, [pc, #172]	; (8011ee0 <tcp_slowtmr+0x66c>)
 8011e32:	f008 f819 	bl	8019e68 <iprintf>
    pcb_remove = 0;
 8011e36:	2300      	movs	r3, #0
 8011e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011e3c:	4b29      	ldr	r3, [pc, #164]	; (8011ee4 <tcp_slowtmr+0x670>)
 8011e3e:	681a      	ldr	r2, [r3, #0]
 8011e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e42:	6a1b      	ldr	r3, [r3, #32]
 8011e44:	1ad3      	subs	r3, r2, r3
 8011e46:	2bf0      	cmp	r3, #240	; 0xf0
 8011e48:	d904      	bls.n	8011e54 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8011e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e4e:	3301      	adds	r3, #1
 8011e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011e54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d02f      	beq.n	8011ebc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011e5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e5e:	f000 fc05 	bl	801266c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d010      	beq.n	8011e8a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011e68:	4b1f      	ldr	r3, [pc, #124]	; (8011ee8 <tcp_slowtmr+0x674>)
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e6e:	429a      	cmp	r2, r3
 8011e70:	d106      	bne.n	8011e80 <tcp_slowtmr+0x60c>
 8011e72:	4b19      	ldr	r3, [pc, #100]	; (8011ed8 <tcp_slowtmr+0x664>)
 8011e74:	f240 52af 	movw	r2, #1455	; 0x5af
 8011e78:	491c      	ldr	r1, [pc, #112]	; (8011eec <tcp_slowtmr+0x678>)
 8011e7a:	4819      	ldr	r0, [pc, #100]	; (8011ee0 <tcp_slowtmr+0x66c>)
 8011e7c:	f007 fff4 	bl	8019e68 <iprintf>
        prev->next = pcb->next;
 8011e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e82:	68da      	ldr	r2, [r3, #12]
 8011e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e86:	60da      	str	r2, [r3, #12]
 8011e88:	e00f      	b.n	8011eaa <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011e8a:	4b17      	ldr	r3, [pc, #92]	; (8011ee8 <tcp_slowtmr+0x674>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e90:	429a      	cmp	r2, r3
 8011e92:	d006      	beq.n	8011ea2 <tcp_slowtmr+0x62e>
 8011e94:	4b10      	ldr	r3, [pc, #64]	; (8011ed8 <tcp_slowtmr+0x664>)
 8011e96:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011e9a:	4915      	ldr	r1, [pc, #84]	; (8011ef0 <tcp_slowtmr+0x67c>)
 8011e9c:	4810      	ldr	r0, [pc, #64]	; (8011ee0 <tcp_slowtmr+0x66c>)
 8011e9e:	f007 ffe3 	bl	8019e68 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea4:	68db      	ldr	r3, [r3, #12]
 8011ea6:	4a10      	ldr	r2, [pc, #64]	; (8011ee8 <tcp_slowtmr+0x674>)
 8011ea8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eac:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eb0:	68db      	ldr	r3, [r3, #12]
 8011eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011eb4:	69f8      	ldr	r0, [r7, #28]
 8011eb6:	f7fe fe5d 	bl	8010b74 <tcp_free>
 8011eba:	e004      	b.n	8011ec6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ebe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ec2:	68db      	ldr	r3, [r3, #12]
 8011ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d1a9      	bne.n	8011e20 <tcp_slowtmr+0x5ac>
    }
  }
}
 8011ecc:	bf00      	nop
 8011ece:	bf00      	nop
 8011ed0:	3730      	adds	r7, #48	; 0x30
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8011ed6:	bf00      	nop
 8011ed8:	0801bbf0 	.word	0x0801bbf0
 8011edc:	0801c080 	.word	0x0801c080
 8011ee0:	0801bc34 	.word	0x0801bc34
 8011ee4:	24015028 	.word	0x24015028
 8011ee8:	24015038 	.word	0x24015038
 8011eec:	0801c0b0 	.word	0x0801c0b0
 8011ef0:	0801c0d8 	.word	0x0801c0d8

08011ef4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b082      	sub	sp, #8
 8011ef8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011efa:	4b2d      	ldr	r3, [pc, #180]	; (8011fb0 <tcp_fasttmr+0xbc>)
 8011efc:	781b      	ldrb	r3, [r3, #0]
 8011efe:	3301      	adds	r3, #1
 8011f00:	b2da      	uxtb	r2, r3
 8011f02:	4b2b      	ldr	r3, [pc, #172]	; (8011fb0 <tcp_fasttmr+0xbc>)
 8011f04:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011f06:	4b2b      	ldr	r3, [pc, #172]	; (8011fb4 <tcp_fasttmr+0xc0>)
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011f0c:	e048      	b.n	8011fa0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	7f9a      	ldrb	r2, [r3, #30]
 8011f12:	4b27      	ldr	r3, [pc, #156]	; (8011fb0 <tcp_fasttmr+0xbc>)
 8011f14:	781b      	ldrb	r3, [r3, #0]
 8011f16:	429a      	cmp	r2, r3
 8011f18:	d03f      	beq.n	8011f9a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011f1a:	4b25      	ldr	r3, [pc, #148]	; (8011fb0 <tcp_fasttmr+0xbc>)
 8011f1c:	781a      	ldrb	r2, [r3, #0]
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	8b5b      	ldrh	r3, [r3, #26]
 8011f26:	f003 0301 	and.w	r3, r3, #1
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d010      	beq.n	8011f50 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	8b5b      	ldrh	r3, [r3, #26]
 8011f32:	f043 0302 	orr.w	r3, r3, #2
 8011f36:	b29a      	uxth	r2, r3
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011f3c:	6878      	ldr	r0, [r7, #4]
 8011f3e:	f004 f805 	bl	8015f4c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	8b5b      	ldrh	r3, [r3, #26]
 8011f46:	f023 0303 	bic.w	r3, r3, #3
 8011f4a:	b29a      	uxth	r2, r3
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	8b5b      	ldrh	r3, [r3, #26]
 8011f54:	f003 0308 	and.w	r3, r3, #8
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d009      	beq.n	8011f70 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	8b5b      	ldrh	r3, [r3, #26]
 8011f60:	f023 0308 	bic.w	r3, r3, #8
 8011f64:	b29a      	uxth	r2, r3
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	f7fe ff96 	bl	8010e9c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	68db      	ldr	r3, [r3, #12]
 8011f74:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d00a      	beq.n	8011f94 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011f7e:	4b0e      	ldr	r3, [pc, #56]	; (8011fb8 <tcp_fasttmr+0xc4>)
 8011f80:	2200      	movs	r2, #0
 8011f82:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011f84:	6878      	ldr	r0, [r7, #4]
 8011f86:	f000 f819 	bl	8011fbc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011f8a:	4b0b      	ldr	r3, [pc, #44]	; (8011fb8 <tcp_fasttmr+0xc4>)
 8011f8c:	781b      	ldrb	r3, [r3, #0]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d000      	beq.n	8011f94 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011f92:	e7b8      	b.n	8011f06 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	607b      	str	r3, [r7, #4]
 8011f98:	e002      	b.n	8011fa0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	68db      	ldr	r3, [r3, #12]
 8011f9e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d1b3      	bne.n	8011f0e <tcp_fasttmr+0x1a>
    }
  }
}
 8011fa6:	bf00      	nop
 8011fa8:	bf00      	nop
 8011faa:	3708      	adds	r7, #8
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bd80      	pop	{r7, pc}
 8011fb0:	2401503e 	.word	0x2401503e
 8011fb4:	24015034 	.word	0x24015034
 8011fb8:	2401503c 	.word	0x2401503c

08011fbc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011fbc:	b590      	push	{r4, r7, lr}
 8011fbe:	b085      	sub	sp, #20
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d109      	bne.n	8011fde <tcp_process_refused_data+0x22>
 8011fca:	4b38      	ldr	r3, [pc, #224]	; (80120ac <tcp_process_refused_data+0xf0>)
 8011fcc:	f240 6209 	movw	r2, #1545	; 0x609
 8011fd0:	4937      	ldr	r1, [pc, #220]	; (80120b0 <tcp_process_refused_data+0xf4>)
 8011fd2:	4838      	ldr	r0, [pc, #224]	; (80120b4 <tcp_process_refused_data+0xf8>)
 8011fd4:	f007 ff48 	bl	8019e68 <iprintf>
 8011fd8:	f06f 030f 	mvn.w	r3, #15
 8011fdc:	e061      	b.n	80120a2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011fe2:	7b5b      	ldrb	r3, [r3, #13]
 8011fe4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011fea:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2200      	movs	r2, #0
 8011ff0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d00b      	beq.n	8012014 <tcp_process_refused_data+0x58>
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	6918      	ldr	r0, [r3, #16]
 8012006:	2300      	movs	r3, #0
 8012008:	68ba      	ldr	r2, [r7, #8]
 801200a:	6879      	ldr	r1, [r7, #4]
 801200c:	47a0      	blx	r4
 801200e:	4603      	mov	r3, r0
 8012010:	73fb      	strb	r3, [r7, #15]
 8012012:	e007      	b.n	8012024 <tcp_process_refused_data+0x68>
 8012014:	2300      	movs	r3, #0
 8012016:	68ba      	ldr	r2, [r7, #8]
 8012018:	6879      	ldr	r1, [r7, #4]
 801201a:	2000      	movs	r0, #0
 801201c:	f000 f8a6 	bl	801216c <tcp_recv_null>
 8012020:	4603      	mov	r3, r0
 8012022:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d12b      	bne.n	8012084 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801202c:	7bbb      	ldrb	r3, [r7, #14]
 801202e:	f003 0320 	and.w	r3, r3, #32
 8012032:	2b00      	cmp	r3, #0
 8012034:	d034      	beq.n	80120a0 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801203a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801203e:	4293      	cmp	r3, r2
 8012040:	d005      	beq.n	801204e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012046:	3301      	adds	r3, #1
 8012048:	b29a      	uxth	r2, r3
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012054:	2b00      	cmp	r3, #0
 8012056:	d00b      	beq.n	8012070 <tcp_process_refused_data+0xb4>
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	6918      	ldr	r0, [r3, #16]
 8012062:	2300      	movs	r3, #0
 8012064:	2200      	movs	r2, #0
 8012066:	6879      	ldr	r1, [r7, #4]
 8012068:	47a0      	blx	r4
 801206a:	4603      	mov	r3, r0
 801206c:	73fb      	strb	r3, [r7, #15]
 801206e:	e001      	b.n	8012074 <tcp_process_refused_data+0xb8>
 8012070:	2300      	movs	r3, #0
 8012072:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012078:	f113 0f0d 	cmn.w	r3, #13
 801207c:	d110      	bne.n	80120a0 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 801207e:	f06f 030c 	mvn.w	r3, #12
 8012082:	e00e      	b.n	80120a2 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8012084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012088:	f113 0f0d 	cmn.w	r3, #13
 801208c:	d102      	bne.n	8012094 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801208e:	f06f 030c 	mvn.w	r3, #12
 8012092:	e006      	b.n	80120a2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	68ba      	ldr	r2, [r7, #8]
 8012098:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801209a:	f06f 0304 	mvn.w	r3, #4
 801209e:	e000      	b.n	80120a2 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 80120a0:	2300      	movs	r3, #0
}
 80120a2:	4618      	mov	r0, r3
 80120a4:	3714      	adds	r7, #20
 80120a6:	46bd      	mov	sp, r7
 80120a8:	bd90      	pop	{r4, r7, pc}
 80120aa:	bf00      	nop
 80120ac:	0801bbf0 	.word	0x0801bbf0
 80120b0:	0801c100 	.word	0x0801c100
 80120b4:	0801bc34 	.word	0x0801bc34

080120b8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b084      	sub	sp, #16
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80120c0:	e007      	b.n	80120d2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f000 f80a 	bl	80120e2 <tcp_seg_free>
    seg = next;
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d1f4      	bne.n	80120c2 <tcp_segs_free+0xa>
  }
}
 80120d8:	bf00      	nop
 80120da:	bf00      	nop
 80120dc:	3710      	adds	r7, #16
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}

080120e2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80120e2:	b580      	push	{r7, lr}
 80120e4:	b082      	sub	sp, #8
 80120e6:	af00      	add	r7, sp, #0
 80120e8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d00c      	beq.n	801210a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	685b      	ldr	r3, [r3, #4]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d004      	beq.n	8012102 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	685b      	ldr	r3, [r3, #4]
 80120fc:	4618      	mov	r0, r3
 80120fe:	f7fe f9d5 	bl	80104ac <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012102:	6879      	ldr	r1, [r7, #4]
 8012104:	2003      	movs	r0, #3
 8012106:	f7fd fb1d 	bl	800f744 <memp_free>
  }
}
 801210a:	bf00      	nop
 801210c:	3708      	adds	r7, #8
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}
	...

08012114 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b084      	sub	sp, #16
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d106      	bne.n	8012130 <tcp_seg_copy+0x1c>
 8012122:	4b0f      	ldr	r3, [pc, #60]	; (8012160 <tcp_seg_copy+0x4c>)
 8012124:	f240 6282 	movw	r2, #1666	; 0x682
 8012128:	490e      	ldr	r1, [pc, #56]	; (8012164 <tcp_seg_copy+0x50>)
 801212a:	480f      	ldr	r0, [pc, #60]	; (8012168 <tcp_seg_copy+0x54>)
 801212c:	f007 fe9c 	bl	8019e68 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012130:	2003      	movs	r0, #3
 8012132:	f7fd fa91 	bl	800f658 <memp_malloc>
 8012136:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d101      	bne.n	8012142 <tcp_seg_copy+0x2e>
    return NULL;
 801213e:	2300      	movs	r3, #0
 8012140:	e00a      	b.n	8012158 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012142:	2210      	movs	r2, #16
 8012144:	6879      	ldr	r1, [r7, #4]
 8012146:	68f8      	ldr	r0, [r7, #12]
 8012148:	f008 f8ae 	bl	801a2a8 <memcpy>
  pbuf_ref(cseg->p);
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	685b      	ldr	r3, [r3, #4]
 8012150:	4618      	mov	r0, r3
 8012152:	f7fe fa51 	bl	80105f8 <pbuf_ref>
  return cseg;
 8012156:	68fb      	ldr	r3, [r7, #12]
}
 8012158:	4618      	mov	r0, r3
 801215a:	3710      	adds	r7, #16
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}
 8012160:	0801bbf0 	.word	0x0801bbf0
 8012164:	0801c144 	.word	0x0801c144
 8012168:	0801bc34 	.word	0x0801bc34

0801216c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b084      	sub	sp, #16
 8012170:	af00      	add	r7, sp, #0
 8012172:	60f8      	str	r0, [r7, #12]
 8012174:	60b9      	str	r1, [r7, #8]
 8012176:	607a      	str	r2, [r7, #4]
 8012178:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801217a:	68bb      	ldr	r3, [r7, #8]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d109      	bne.n	8012194 <tcp_recv_null+0x28>
 8012180:	4b12      	ldr	r3, [pc, #72]	; (80121cc <tcp_recv_null+0x60>)
 8012182:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012186:	4912      	ldr	r1, [pc, #72]	; (80121d0 <tcp_recv_null+0x64>)
 8012188:	4812      	ldr	r0, [pc, #72]	; (80121d4 <tcp_recv_null+0x68>)
 801218a:	f007 fe6d 	bl	8019e68 <iprintf>
 801218e:	f06f 030f 	mvn.w	r3, #15
 8012192:	e016      	b.n	80121c2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d009      	beq.n	80121ae <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	891b      	ldrh	r3, [r3, #8]
 801219e:	4619      	mov	r1, r3
 80121a0:	68b8      	ldr	r0, [r7, #8]
 80121a2:	f7ff f9b3 	bl	801150c <tcp_recved>
    pbuf_free(p);
 80121a6:	6878      	ldr	r0, [r7, #4]
 80121a8:	f7fe f980 	bl	80104ac <pbuf_free>
 80121ac:	e008      	b.n	80121c0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80121ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d104      	bne.n	80121c0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80121b6:	68b8      	ldr	r0, [r7, #8]
 80121b8:	f7fe feda 	bl	8010f70 <tcp_close>
 80121bc:	4603      	mov	r3, r0
 80121be:	e000      	b.n	80121c2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80121c0:	2300      	movs	r3, #0
}
 80121c2:	4618      	mov	r0, r3
 80121c4:	3710      	adds	r7, #16
 80121c6:	46bd      	mov	sp, r7
 80121c8:	bd80      	pop	{r7, pc}
 80121ca:	bf00      	nop
 80121cc:	0801bbf0 	.word	0x0801bbf0
 80121d0:	0801c160 	.word	0x0801c160
 80121d4:	0801bc34 	.word	0x0801bc34

080121d8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b086      	sub	sp, #24
 80121dc:	af00      	add	r7, sp, #0
 80121de:	4603      	mov	r3, r0
 80121e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80121e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	db01      	blt.n	80121ee <tcp_kill_prio+0x16>
 80121ea:	79fb      	ldrb	r3, [r7, #7]
 80121ec:	e000      	b.n	80121f0 <tcp_kill_prio+0x18>
 80121ee:	237f      	movs	r3, #127	; 0x7f
 80121f0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80121f2:	7afb      	ldrb	r3, [r7, #11]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d034      	beq.n	8012262 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80121f8:	7afb      	ldrb	r3, [r7, #11]
 80121fa:	3b01      	subs	r3, #1
 80121fc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80121fe:	2300      	movs	r3, #0
 8012200:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012202:	2300      	movs	r3, #0
 8012204:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012206:	4b19      	ldr	r3, [pc, #100]	; (801226c <tcp_kill_prio+0x94>)
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	617b      	str	r3, [r7, #20]
 801220c:	e01f      	b.n	801224e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801220e:	697b      	ldr	r3, [r7, #20]
 8012210:	7d5b      	ldrb	r3, [r3, #21]
 8012212:	7afa      	ldrb	r2, [r7, #11]
 8012214:	429a      	cmp	r2, r3
 8012216:	d80c      	bhi.n	8012232 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012218:	697b      	ldr	r3, [r7, #20]
 801221a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801221c:	7afa      	ldrb	r2, [r7, #11]
 801221e:	429a      	cmp	r2, r3
 8012220:	d112      	bne.n	8012248 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012222:	4b13      	ldr	r3, [pc, #76]	; (8012270 <tcp_kill_prio+0x98>)
 8012224:	681a      	ldr	r2, [r3, #0]
 8012226:	697b      	ldr	r3, [r7, #20]
 8012228:	6a1b      	ldr	r3, [r3, #32]
 801222a:	1ad3      	subs	r3, r2, r3
 801222c:	68fa      	ldr	r2, [r7, #12]
 801222e:	429a      	cmp	r2, r3
 8012230:	d80a      	bhi.n	8012248 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012232:	4b0f      	ldr	r3, [pc, #60]	; (8012270 <tcp_kill_prio+0x98>)
 8012234:	681a      	ldr	r2, [r3, #0]
 8012236:	697b      	ldr	r3, [r7, #20]
 8012238:	6a1b      	ldr	r3, [r3, #32]
 801223a:	1ad3      	subs	r3, r2, r3
 801223c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801223e:	697b      	ldr	r3, [r7, #20]
 8012240:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012242:	697b      	ldr	r3, [r7, #20]
 8012244:	7d5b      	ldrb	r3, [r3, #21]
 8012246:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	68db      	ldr	r3, [r3, #12]
 801224c:	617b      	str	r3, [r7, #20]
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d1dc      	bne.n	801220e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012254:	693b      	ldr	r3, [r7, #16]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d004      	beq.n	8012264 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801225a:	6938      	ldr	r0, [r7, #16]
 801225c:	f7fe ff76 	bl	801114c <tcp_abort>
 8012260:	e000      	b.n	8012264 <tcp_kill_prio+0x8c>
    return;
 8012262:	bf00      	nop
  }
}
 8012264:	3718      	adds	r7, #24
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}
 801226a:	bf00      	nop
 801226c:	24015034 	.word	0x24015034
 8012270:	24015028 	.word	0x24015028

08012274 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b086      	sub	sp, #24
 8012278:	af00      	add	r7, sp, #0
 801227a:	4603      	mov	r3, r0
 801227c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801227e:	79fb      	ldrb	r3, [r7, #7]
 8012280:	2b08      	cmp	r3, #8
 8012282:	d009      	beq.n	8012298 <tcp_kill_state+0x24>
 8012284:	79fb      	ldrb	r3, [r7, #7]
 8012286:	2b09      	cmp	r3, #9
 8012288:	d006      	beq.n	8012298 <tcp_kill_state+0x24>
 801228a:	4b1a      	ldr	r3, [pc, #104]	; (80122f4 <tcp_kill_state+0x80>)
 801228c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8012290:	4919      	ldr	r1, [pc, #100]	; (80122f8 <tcp_kill_state+0x84>)
 8012292:	481a      	ldr	r0, [pc, #104]	; (80122fc <tcp_kill_state+0x88>)
 8012294:	f007 fde8 	bl	8019e68 <iprintf>

  inactivity = 0;
 8012298:	2300      	movs	r3, #0
 801229a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801229c:	2300      	movs	r3, #0
 801229e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80122a0:	4b17      	ldr	r3, [pc, #92]	; (8012300 <tcp_kill_state+0x8c>)
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	617b      	str	r3, [r7, #20]
 80122a6:	e017      	b.n	80122d8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80122a8:	697b      	ldr	r3, [r7, #20]
 80122aa:	7d1b      	ldrb	r3, [r3, #20]
 80122ac:	79fa      	ldrb	r2, [r7, #7]
 80122ae:	429a      	cmp	r2, r3
 80122b0:	d10f      	bne.n	80122d2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80122b2:	4b14      	ldr	r3, [pc, #80]	; (8012304 <tcp_kill_state+0x90>)
 80122b4:	681a      	ldr	r2, [r3, #0]
 80122b6:	697b      	ldr	r3, [r7, #20]
 80122b8:	6a1b      	ldr	r3, [r3, #32]
 80122ba:	1ad3      	subs	r3, r2, r3
 80122bc:	68fa      	ldr	r2, [r7, #12]
 80122be:	429a      	cmp	r2, r3
 80122c0:	d807      	bhi.n	80122d2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80122c2:	4b10      	ldr	r3, [pc, #64]	; (8012304 <tcp_kill_state+0x90>)
 80122c4:	681a      	ldr	r2, [r3, #0]
 80122c6:	697b      	ldr	r3, [r7, #20]
 80122c8:	6a1b      	ldr	r3, [r3, #32]
 80122ca:	1ad3      	subs	r3, r2, r3
 80122cc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80122ce:	697b      	ldr	r3, [r7, #20]
 80122d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	68db      	ldr	r3, [r3, #12]
 80122d6:	617b      	str	r3, [r7, #20]
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d1e4      	bne.n	80122a8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80122de:	693b      	ldr	r3, [r7, #16]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d003      	beq.n	80122ec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80122e4:	2100      	movs	r1, #0
 80122e6:	6938      	ldr	r0, [r7, #16]
 80122e8:	f7fe fe70 	bl	8010fcc <tcp_abandon>
  }
}
 80122ec:	bf00      	nop
 80122ee:	3718      	adds	r7, #24
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bd80      	pop	{r7, pc}
 80122f4:	0801bbf0 	.word	0x0801bbf0
 80122f8:	0801c17c 	.word	0x0801c17c
 80122fc:	0801bc34 	.word	0x0801bc34
 8012300:	24015034 	.word	0x24015034
 8012304:	24015028 	.word	0x24015028

08012308 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b084      	sub	sp, #16
 801230c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801230e:	2300      	movs	r3, #0
 8012310:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012312:	2300      	movs	r3, #0
 8012314:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012316:	4b12      	ldr	r3, [pc, #72]	; (8012360 <tcp_kill_timewait+0x58>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	60fb      	str	r3, [r7, #12]
 801231c:	e012      	b.n	8012344 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801231e:	4b11      	ldr	r3, [pc, #68]	; (8012364 <tcp_kill_timewait+0x5c>)
 8012320:	681a      	ldr	r2, [r3, #0]
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	6a1b      	ldr	r3, [r3, #32]
 8012326:	1ad3      	subs	r3, r2, r3
 8012328:	687a      	ldr	r2, [r7, #4]
 801232a:	429a      	cmp	r2, r3
 801232c:	d807      	bhi.n	801233e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801232e:	4b0d      	ldr	r3, [pc, #52]	; (8012364 <tcp_kill_timewait+0x5c>)
 8012330:	681a      	ldr	r2, [r3, #0]
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	6a1b      	ldr	r3, [r3, #32]
 8012336:	1ad3      	subs	r3, r2, r3
 8012338:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	68db      	ldr	r3, [r3, #12]
 8012342:	60fb      	str	r3, [r7, #12]
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d1e9      	bne.n	801231e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801234a:	68bb      	ldr	r3, [r7, #8]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d002      	beq.n	8012356 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012350:	68b8      	ldr	r0, [r7, #8]
 8012352:	f7fe fefb 	bl	801114c <tcp_abort>
  }
}
 8012356:	bf00      	nop
 8012358:	3710      	adds	r7, #16
 801235a:	46bd      	mov	sp, r7
 801235c:	bd80      	pop	{r7, pc}
 801235e:	bf00      	nop
 8012360:	24015038 	.word	0x24015038
 8012364:	24015028 	.word	0x24015028

08012368 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b082      	sub	sp, #8
 801236c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801236e:	4b10      	ldr	r3, [pc, #64]	; (80123b0 <tcp_handle_closepend+0x48>)
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012374:	e014      	b.n	80123a0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	68db      	ldr	r3, [r3, #12]
 801237a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	8b5b      	ldrh	r3, [r3, #26]
 8012380:	f003 0308 	and.w	r3, r3, #8
 8012384:	2b00      	cmp	r3, #0
 8012386:	d009      	beq.n	801239c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	8b5b      	ldrh	r3, [r3, #26]
 801238c:	f023 0308 	bic.w	r3, r3, #8
 8012390:	b29a      	uxth	r2, r3
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	f7fe fd80 	bl	8010e9c <tcp_close_shutdown_fin>
    }
    pcb = next;
 801239c:	683b      	ldr	r3, [r7, #0]
 801239e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d1e7      	bne.n	8012376 <tcp_handle_closepend+0xe>
  }
}
 80123a6:	bf00      	nop
 80123a8:	bf00      	nop
 80123aa:	3708      	adds	r7, #8
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}
 80123b0:	24015034 	.word	0x24015034

080123b4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b084      	sub	sp, #16
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	4603      	mov	r3, r0
 80123bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 80123be:	f7f8 fb81 	bl	800aac4 <sys_check_core_locking>

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80123c2:	2001      	movs	r0, #1
 80123c4:	f7fd f948 	bl	800f658 <memp_malloc>
 80123c8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d126      	bne.n	801241e <tcp_alloc+0x6a>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80123d0:	f7ff ffca 	bl	8012368 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80123d4:	f7ff ff98 	bl	8012308 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80123d8:	2001      	movs	r0, #1
 80123da:	f7fd f93d 	bl	800f658 <memp_malloc>
 80123de:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d11b      	bne.n	801241e <tcp_alloc+0x6a>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80123e6:	2009      	movs	r0, #9
 80123e8:	f7ff ff44 	bl	8012274 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80123ec:	2001      	movs	r0, #1
 80123ee:	f7fd f933 	bl	800f658 <memp_malloc>
 80123f2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d111      	bne.n	801241e <tcp_alloc+0x6a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80123fa:	2008      	movs	r0, #8
 80123fc:	f7ff ff3a 	bl	8012274 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012400:	2001      	movs	r0, #1
 8012402:	f7fd f929 	bl	800f658 <memp_malloc>
 8012406:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d107      	bne.n	801241e <tcp_alloc+0x6a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801240e:	79fb      	ldrb	r3, [r7, #7]
 8012410:	4618      	mov	r0, r3
 8012412:	f7ff fee1 	bl	80121d8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012416:	2001      	movs	r0, #1
 8012418:	f7fd f91e 	bl	800f658 <memp_malloc>
 801241c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d03f      	beq.n	80124a4 <tcp_alloc+0xf0>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012424:	229c      	movs	r2, #156	; 0x9c
 8012426:	2100      	movs	r1, #0
 8012428:	68f8      	ldr	r0, [r7, #12]
 801242a:	f007 fe73 	bl	801a114 <memset>
    pcb->prio = prio;
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	79fa      	ldrb	r2, [r7, #7]
 8012432:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801243a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012444:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	22ff      	movs	r2, #255	; 0xff
 8012452:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	f44f 7206 	mov.w	r2, #536	; 0x218
 801245a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	2206      	movs	r2, #6
 8012460:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	2206      	movs	r2, #6
 8012468:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012470:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	2201      	movs	r2, #1
 8012476:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801247a:	4b0d      	ldr	r3, [pc, #52]	; (80124b0 <tcp_alloc+0xfc>)
 801247c:	681a      	ldr	r2, [r3, #0]
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8012482:	4b0c      	ldr	r3, [pc, #48]	; (80124b4 <tcp_alloc+0x100>)
 8012484:	781a      	ldrb	r2, [r3, #0]
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012490:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	4a08      	ldr	r2, [pc, #32]	; (80124b8 <tcp_alloc+0x104>)
 8012498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	4a07      	ldr	r2, [pc, #28]	; (80124bc <tcp_alloc+0x108>)
 80124a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80124a4:	68fb      	ldr	r3, [r7, #12]
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	3710      	adds	r7, #16
 80124aa:	46bd      	mov	sp, r7
 80124ac:	bd80      	pop	{r7, pc}
 80124ae:	bf00      	nop
 80124b0:	24015028 	.word	0x24015028
 80124b4:	2401503e 	.word	0x2401503e
 80124b8:	0801216d 	.word	0x0801216d
 80124bc:	006ddd00 	.word	0x006ddd00

080124c0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b084      	sub	sp, #16
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	4603      	mov	r3, r0
 80124c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80124ca:	2040      	movs	r0, #64	; 0x40
 80124cc:	f7ff ff72 	bl	80123b4 <tcp_alloc>
 80124d0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80124d2:	68fb      	ldr	r3, [r7, #12]
}
 80124d4:	4618      	mov	r0, r3
 80124d6:	3710      	adds	r7, #16
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b082      	sub	sp, #8
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 80124e6:	f7f8 faed 	bl	800aac4 <sys_check_core_locking>
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d002      	beq.n	80124f6 <tcp_arg+0x1a>
    pcb->callback_arg = arg;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	683a      	ldr	r2, [r7, #0]
 80124f4:	611a      	str	r2, [r3, #16]
  }
}
 80124f6:	bf00      	nop
 80124f8:	3708      	adds	r7, #8
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}
	...

08012500 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b082      	sub	sp, #8
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
 8012508:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 801250a:	f7f8 fadb 	bl	800aac4 <sys_check_core_locking>
  if (pcb != NULL) {
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d00e      	beq.n	8012532 <tcp_recv+0x32>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	7d1b      	ldrb	r3, [r3, #20]
 8012518:	2b01      	cmp	r3, #1
 801251a:	d106      	bne.n	801252a <tcp_recv+0x2a>
 801251c:	4b07      	ldr	r3, [pc, #28]	; (801253c <tcp_recv+0x3c>)
 801251e:	f240 72df 	movw	r2, #2015	; 0x7df
 8012522:	4907      	ldr	r1, [pc, #28]	; (8012540 <tcp_recv+0x40>)
 8012524:	4807      	ldr	r0, [pc, #28]	; (8012544 <tcp_recv+0x44>)
 8012526:	f007 fc9f 	bl	8019e68 <iprintf>
    pcb->recv = recv;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	683a      	ldr	r2, [r7, #0]
 801252e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8012532:	bf00      	nop
 8012534:	3708      	adds	r7, #8
 8012536:	46bd      	mov	sp, r7
 8012538:	bd80      	pop	{r7, pc}
 801253a:	bf00      	nop
 801253c:	0801bbf0 	.word	0x0801bbf0
 8012540:	0801c18c 	.word	0x0801c18c
 8012544:	0801bc34 	.word	0x0801bc34

08012548 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b082      	sub	sp, #8
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
 8012550:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 8012552:	f7f8 fab7 	bl	800aac4 <sys_check_core_locking>
  if (pcb != NULL) {
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d00e      	beq.n	801257a <tcp_sent+0x32>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	7d1b      	ldrb	r3, [r3, #20]
 8012560:	2b01      	cmp	r3, #1
 8012562:	d106      	bne.n	8012572 <tcp_sent+0x2a>
 8012564:	4b07      	ldr	r3, [pc, #28]	; (8012584 <tcp_sent+0x3c>)
 8012566:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801256a:	4907      	ldr	r1, [pc, #28]	; (8012588 <tcp_sent+0x40>)
 801256c:	4807      	ldr	r0, [pc, #28]	; (801258c <tcp_sent+0x44>)
 801256e:	f007 fc7b 	bl	8019e68 <iprintf>
    pcb->sent = sent;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	683a      	ldr	r2, [r7, #0]
 8012576:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801257a:	bf00      	nop
 801257c:	3708      	adds	r7, #8
 801257e:	46bd      	mov	sp, r7
 8012580:	bd80      	pop	{r7, pc}
 8012582:	bf00      	nop
 8012584:	0801bbf0 	.word	0x0801bbf0
 8012588:	0801c1b4 	.word	0x0801c1b4
 801258c:	0801bc34 	.word	0x0801bc34

08012590 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b082      	sub	sp, #8
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
 8012598:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 801259a:	f7f8 fa93 	bl	800aac4 <sys_check_core_locking>
  if (pcb != NULL) {
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d00e      	beq.n	80125c2 <tcp_err+0x32>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	7d1b      	ldrb	r3, [r3, #20]
 80125a8:	2b01      	cmp	r3, #1
 80125aa:	d106      	bne.n	80125ba <tcp_err+0x2a>
 80125ac:	4b07      	ldr	r3, [pc, #28]	; (80125cc <tcp_err+0x3c>)
 80125ae:	f640 020d 	movw	r2, #2061	; 0x80d
 80125b2:	4907      	ldr	r1, [pc, #28]	; (80125d0 <tcp_err+0x40>)
 80125b4:	4807      	ldr	r0, [pc, #28]	; (80125d4 <tcp_err+0x44>)
 80125b6:	f007 fc57 	bl	8019e68 <iprintf>
    pcb->errf = err;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	683a      	ldr	r2, [r7, #0]
 80125be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80125c2:	bf00      	nop
 80125c4:	3708      	adds	r7, #8
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bd80      	pop	{r7, pc}
 80125ca:	bf00      	nop
 80125cc:	0801bbf0 	.word	0x0801bbf0
 80125d0:	0801c1dc 	.word	0x0801c1dc
 80125d4:	0801bc34 	.word	0x0801bc34

080125d8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b084      	sub	sp, #16
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
 80125e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 80125e2:	f7f8 fa6f 	bl	800aac4 <sys_check_core_locking>
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d008      	beq.n	80125fe <tcp_accept+0x26>
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	7d1b      	ldrb	r3, [r3, #20]
 80125f0:	2b01      	cmp	r3, #1
 80125f2:	d104      	bne.n	80125fe <tcp_accept+0x26>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	683a      	ldr	r2, [r7, #0]
 80125fc:	619a      	str	r2, [r3, #24]
  }
}
 80125fe:	bf00      	nop
 8012600:	3710      	adds	r7, #16
 8012602:	46bd      	mov	sp, r7
 8012604:	bd80      	pop	{r7, pc}
	...

08012608 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b084      	sub	sp, #16
 801260c:	af00      	add	r7, sp, #0
 801260e:	60f8      	str	r0, [r7, #12]
 8012610:	60b9      	str	r1, [r7, #8]
 8012612:	4613      	mov	r3, r2
 8012614:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();
 8012616:	f7f8 fa55 	bl	800aac4 <sys_check_core_locking>

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d107      	bne.n	8012630 <tcp_poll+0x28>
 8012620:	4b0e      	ldr	r3, [pc, #56]	; (801265c <tcp_poll+0x54>)
 8012622:	f640 023d 	movw	r2, #2109	; 0x83d
 8012626:	490e      	ldr	r1, [pc, #56]	; (8012660 <tcp_poll+0x58>)
 8012628:	480e      	ldr	r0, [pc, #56]	; (8012664 <tcp_poll+0x5c>)
 801262a:	f007 fc1d 	bl	8019e68 <iprintf>
 801262e:	e011      	b.n	8012654 <tcp_poll+0x4c>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	7d1b      	ldrb	r3, [r3, #20]
 8012634:	2b01      	cmp	r3, #1
 8012636:	d106      	bne.n	8012646 <tcp_poll+0x3e>
 8012638:	4b08      	ldr	r3, [pc, #32]	; (801265c <tcp_poll+0x54>)
 801263a:	f640 023e 	movw	r2, #2110	; 0x83e
 801263e:	490a      	ldr	r1, [pc, #40]	; (8012668 <tcp_poll+0x60>)
 8012640:	4808      	ldr	r0, [pc, #32]	; (8012664 <tcp_poll+0x5c>)
 8012642:	f007 fc11 	bl	8019e68 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	68ba      	ldr	r2, [r7, #8]
 801264a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	79fa      	ldrb	r2, [r7, #7]
 8012652:	775a      	strb	r2, [r3, #29]
}
 8012654:	3710      	adds	r7, #16
 8012656:	46bd      	mov	sp, r7
 8012658:	bd80      	pop	{r7, pc}
 801265a:	bf00      	nop
 801265c:	0801bbf0 	.word	0x0801bbf0
 8012660:	0801c204 	.word	0x0801c204
 8012664:	0801bc34 	.word	0x0801bc34
 8012668:	0801c21c 	.word	0x0801c21c

0801266c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b082      	sub	sp, #8
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d107      	bne.n	801268a <tcp_pcb_purge+0x1e>
 801267a:	4b21      	ldr	r3, [pc, #132]	; (8012700 <tcp_pcb_purge+0x94>)
 801267c:	f640 0251 	movw	r2, #2129	; 0x851
 8012680:	4920      	ldr	r1, [pc, #128]	; (8012704 <tcp_pcb_purge+0x98>)
 8012682:	4821      	ldr	r0, [pc, #132]	; (8012708 <tcp_pcb_purge+0x9c>)
 8012684:	f007 fbf0 	bl	8019e68 <iprintf>
 8012688:	e037      	b.n	80126fa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	7d1b      	ldrb	r3, [r3, #20]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d033      	beq.n	80126fa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012696:	2b0a      	cmp	r3, #10
 8012698:	d02f      	beq.n	80126fa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801269e:	2b01      	cmp	r3, #1
 80126a0:	d02b      	beq.n	80126fa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d007      	beq.n	80126ba <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80126ae:	4618      	mov	r0, r3
 80126b0:	f7fd fefc 	bl	80104ac <pbuf_free>
      pcb->refused_data = NULL;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2200      	movs	r2, #0
 80126b8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d002      	beq.n	80126c8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80126c2:	6878      	ldr	r0, [r7, #4]
 80126c4:	f000 f986 	bl	80129d4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80126ce:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126d4:	4618      	mov	r0, r3
 80126d6:	f7ff fcef 	bl	80120b8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126de:	4618      	mov	r0, r3
 80126e0:	f7ff fcea 	bl	80120b8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	2200      	movs	r2, #0
 80126e8:	66da      	str	r2, [r3, #108]	; 0x6c
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	2200      	movs	r2, #0
 80126f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80126fa:	3708      	adds	r7, #8
 80126fc:	46bd      	mov	sp, r7
 80126fe:	bd80      	pop	{r7, pc}
 8012700:	0801bbf0 	.word	0x0801bbf0
 8012704:	0801c23c 	.word	0x0801c23c
 8012708:	0801bc34 	.word	0x0801bc34

0801270c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b084      	sub	sp, #16
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
 8012714:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8012716:	683b      	ldr	r3, [r7, #0]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d106      	bne.n	801272a <tcp_pcb_remove+0x1e>
 801271c:	4b3e      	ldr	r3, [pc, #248]	; (8012818 <tcp_pcb_remove+0x10c>)
 801271e:	f640 0283 	movw	r2, #2179	; 0x883
 8012722:	493e      	ldr	r1, [pc, #248]	; (801281c <tcp_pcb_remove+0x110>)
 8012724:	483e      	ldr	r0, [pc, #248]	; (8012820 <tcp_pcb_remove+0x114>)
 8012726:	f007 fb9f 	bl	8019e68 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d106      	bne.n	801273e <tcp_pcb_remove+0x32>
 8012730:	4b39      	ldr	r3, [pc, #228]	; (8012818 <tcp_pcb_remove+0x10c>)
 8012732:	f640 0284 	movw	r2, #2180	; 0x884
 8012736:	493b      	ldr	r1, [pc, #236]	; (8012824 <tcp_pcb_remove+0x118>)
 8012738:	4839      	ldr	r0, [pc, #228]	; (8012820 <tcp_pcb_remove+0x114>)
 801273a:	f007 fb95 	bl	8019e68 <iprintf>

  TCP_RMV(pcblist, pcb);
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	683a      	ldr	r2, [r7, #0]
 8012744:	429a      	cmp	r2, r3
 8012746:	d105      	bne.n	8012754 <tcp_pcb_remove+0x48>
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	68da      	ldr	r2, [r3, #12]
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	601a      	str	r2, [r3, #0]
 8012752:	e013      	b.n	801277c <tcp_pcb_remove+0x70>
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	60fb      	str	r3, [r7, #12]
 801275a:	e00c      	b.n	8012776 <tcp_pcb_remove+0x6a>
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	68db      	ldr	r3, [r3, #12]
 8012760:	683a      	ldr	r2, [r7, #0]
 8012762:	429a      	cmp	r2, r3
 8012764:	d104      	bne.n	8012770 <tcp_pcb_remove+0x64>
 8012766:	683b      	ldr	r3, [r7, #0]
 8012768:	68da      	ldr	r2, [r3, #12]
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	60da      	str	r2, [r3, #12]
 801276e:	e005      	b.n	801277c <tcp_pcb_remove+0x70>
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	68db      	ldr	r3, [r3, #12]
 8012774:	60fb      	str	r3, [r7, #12]
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d1ef      	bne.n	801275c <tcp_pcb_remove+0x50>
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	2200      	movs	r2, #0
 8012780:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8012782:	6838      	ldr	r0, [r7, #0]
 8012784:	f7ff ff72 	bl	801266c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	7d1b      	ldrb	r3, [r3, #20]
 801278c:	2b0a      	cmp	r3, #10
 801278e:	d013      	beq.n	80127b8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8012790:	683b      	ldr	r3, [r7, #0]
 8012792:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012794:	2b01      	cmp	r3, #1
 8012796:	d00f      	beq.n	80127b8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	8b5b      	ldrh	r3, [r3, #26]
 801279c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d009      	beq.n	80127b8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80127a4:	683b      	ldr	r3, [r7, #0]
 80127a6:	8b5b      	ldrh	r3, [r3, #26]
 80127a8:	f043 0302 	orr.w	r3, r3, #2
 80127ac:	b29a      	uxth	r2, r3
 80127ae:	683b      	ldr	r3, [r7, #0]
 80127b0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80127b2:	6838      	ldr	r0, [r7, #0]
 80127b4:	f003 fbca 	bl	8015f4c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	7d1b      	ldrb	r3, [r3, #20]
 80127bc:	2b01      	cmp	r3, #1
 80127be:	d020      	beq.n	8012802 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d006      	beq.n	80127d6 <tcp_pcb_remove+0xca>
 80127c8:	4b13      	ldr	r3, [pc, #76]	; (8012818 <tcp_pcb_remove+0x10c>)
 80127ca:	f640 0293 	movw	r2, #2195	; 0x893
 80127ce:	4916      	ldr	r1, [pc, #88]	; (8012828 <tcp_pcb_remove+0x11c>)
 80127d0:	4813      	ldr	r0, [pc, #76]	; (8012820 <tcp_pcb_remove+0x114>)
 80127d2:	f007 fb49 	bl	8019e68 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80127d6:	683b      	ldr	r3, [r7, #0]
 80127d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d006      	beq.n	80127ec <tcp_pcb_remove+0xe0>
 80127de:	4b0e      	ldr	r3, [pc, #56]	; (8012818 <tcp_pcb_remove+0x10c>)
 80127e0:	f640 0294 	movw	r2, #2196	; 0x894
 80127e4:	4911      	ldr	r1, [pc, #68]	; (801282c <tcp_pcb_remove+0x120>)
 80127e6:	480e      	ldr	r0, [pc, #56]	; (8012820 <tcp_pcb_remove+0x114>)
 80127e8:	f007 fb3e 	bl	8019e68 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80127ec:	683b      	ldr	r3, [r7, #0]
 80127ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d006      	beq.n	8012802 <tcp_pcb_remove+0xf6>
 80127f4:	4b08      	ldr	r3, [pc, #32]	; (8012818 <tcp_pcb_remove+0x10c>)
 80127f6:	f640 0296 	movw	r2, #2198	; 0x896
 80127fa:	490d      	ldr	r1, [pc, #52]	; (8012830 <tcp_pcb_remove+0x124>)
 80127fc:	4808      	ldr	r0, [pc, #32]	; (8012820 <tcp_pcb_remove+0x114>)
 80127fe:	f007 fb33 	bl	8019e68 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	2200      	movs	r2, #0
 8012806:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	2200      	movs	r2, #0
 801280c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801280e:	bf00      	nop
 8012810:	3710      	adds	r7, #16
 8012812:	46bd      	mov	sp, r7
 8012814:	bd80      	pop	{r7, pc}
 8012816:	bf00      	nop
 8012818:	0801bbf0 	.word	0x0801bbf0
 801281c:	0801c258 	.word	0x0801c258
 8012820:	0801bc34 	.word	0x0801bc34
 8012824:	0801c274 	.word	0x0801c274
 8012828:	0801c294 	.word	0x0801c294
 801282c:	0801c2ac 	.word	0x0801c2ac
 8012830:	0801c2c8 	.word	0x0801c2c8

08012834 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b082      	sub	sp, #8
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d106      	bne.n	8012850 <tcp_next_iss+0x1c>
 8012842:	4b0a      	ldr	r3, [pc, #40]	; (801286c <tcp_next_iss+0x38>)
 8012844:	f640 02af 	movw	r2, #2223	; 0x8af
 8012848:	4909      	ldr	r1, [pc, #36]	; (8012870 <tcp_next_iss+0x3c>)
 801284a:	480a      	ldr	r0, [pc, #40]	; (8012874 <tcp_next_iss+0x40>)
 801284c:	f007 fb0c 	bl	8019e68 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8012850:	4b09      	ldr	r3, [pc, #36]	; (8012878 <tcp_next_iss+0x44>)
 8012852:	681a      	ldr	r2, [r3, #0]
 8012854:	4b09      	ldr	r3, [pc, #36]	; (801287c <tcp_next_iss+0x48>)
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	4413      	add	r3, r2
 801285a:	4a07      	ldr	r2, [pc, #28]	; (8012878 <tcp_next_iss+0x44>)
 801285c:	6013      	str	r3, [r2, #0]
  return iss;
 801285e:	4b06      	ldr	r3, [pc, #24]	; (8012878 <tcp_next_iss+0x44>)
 8012860:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8012862:	4618      	mov	r0, r3
 8012864:	3708      	adds	r7, #8
 8012866:	46bd      	mov	sp, r7
 8012868:	bd80      	pop	{r7, pc}
 801286a:	bf00      	nop
 801286c:	0801bbf0 	.word	0x0801bbf0
 8012870:	0801c2e0 	.word	0x0801c2e0
 8012874:	0801bc34 	.word	0x0801bc34
 8012878:	2400002c 	.word	0x2400002c
 801287c:	24015028 	.word	0x24015028

08012880 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b086      	sub	sp, #24
 8012884:	af00      	add	r7, sp, #0
 8012886:	4603      	mov	r3, r0
 8012888:	60b9      	str	r1, [r7, #8]
 801288a:	607a      	str	r2, [r7, #4]
 801288c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d106      	bne.n	80128a2 <tcp_eff_send_mss_netif+0x22>
 8012894:	4b14      	ldr	r3, [pc, #80]	; (80128e8 <tcp_eff_send_mss_netif+0x68>)
 8012896:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801289a:	4914      	ldr	r1, [pc, #80]	; (80128ec <tcp_eff_send_mss_netif+0x6c>)
 801289c:	4814      	ldr	r0, [pc, #80]	; (80128f0 <tcp_eff_send_mss_netif+0x70>)
 801289e:	f007 fae3 	bl	8019e68 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80128a2:	68bb      	ldr	r3, [r7, #8]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d101      	bne.n	80128ac <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80128a8:	89fb      	ldrh	r3, [r7, #14]
 80128aa:	e019      	b.n	80128e0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80128ac:	68bb      	ldr	r3, [r7, #8]
 80128ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80128b0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80128b2:	8afb      	ldrh	r3, [r7, #22]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d012      	beq.n	80128de <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80128b8:	2328      	movs	r3, #40	; 0x28
 80128ba:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80128bc:	8afa      	ldrh	r2, [r7, #22]
 80128be:	8abb      	ldrh	r3, [r7, #20]
 80128c0:	429a      	cmp	r2, r3
 80128c2:	d904      	bls.n	80128ce <tcp_eff_send_mss_netif+0x4e>
 80128c4:	8afa      	ldrh	r2, [r7, #22]
 80128c6:	8abb      	ldrh	r3, [r7, #20]
 80128c8:	1ad3      	subs	r3, r2, r3
 80128ca:	b29b      	uxth	r3, r3
 80128cc:	e000      	b.n	80128d0 <tcp_eff_send_mss_netif+0x50>
 80128ce:	2300      	movs	r3, #0
 80128d0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80128d2:	8a7a      	ldrh	r2, [r7, #18]
 80128d4:	89fb      	ldrh	r3, [r7, #14]
 80128d6:	4293      	cmp	r3, r2
 80128d8:	bf28      	it	cs
 80128da:	4613      	movcs	r3, r2
 80128dc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80128de:	89fb      	ldrh	r3, [r7, #14]
}
 80128e0:	4618      	mov	r0, r3
 80128e2:	3718      	adds	r7, #24
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}
 80128e8:	0801bbf0 	.word	0x0801bbf0
 80128ec:	0801c2fc 	.word	0x0801c2fc
 80128f0:	0801bc34 	.word	0x0801bc34

080128f4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b084      	sub	sp, #16
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
 80128fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d119      	bne.n	801293c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012908:	4b10      	ldr	r3, [pc, #64]	; (801294c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801290a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801290e:	4910      	ldr	r1, [pc, #64]	; (8012950 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012910:	4810      	ldr	r0, [pc, #64]	; (8012954 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8012912:	f007 faa9 	bl	8019e68 <iprintf>

  while (pcb != NULL) {
 8012916:	e011      	b.n	801293c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	681a      	ldr	r2, [r3, #0]
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	429a      	cmp	r2, r3
 8012922:	d108      	bne.n	8012936 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	68db      	ldr	r3, [r3, #12]
 8012928:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801292a:	68f8      	ldr	r0, [r7, #12]
 801292c:	f7fe fc0e 	bl	801114c <tcp_abort>
      pcb = next;
 8012930:	68bb      	ldr	r3, [r7, #8]
 8012932:	60fb      	str	r3, [r7, #12]
 8012934:	e002      	b.n	801293c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	68db      	ldr	r3, [r3, #12]
 801293a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d1ea      	bne.n	8012918 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8012942:	bf00      	nop
 8012944:	bf00      	nop
 8012946:	3710      	adds	r7, #16
 8012948:	46bd      	mov	sp, r7
 801294a:	bd80      	pop	{r7, pc}
 801294c:	0801bbf0 	.word	0x0801bbf0
 8012950:	0801c324 	.word	0x0801c324
 8012954:	0801bc34 	.word	0x0801bc34

08012958 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b084      	sub	sp, #16
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d02a      	beq.n	80129be <tcp_netif_ip_addr_changed+0x66>
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d026      	beq.n	80129be <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8012970:	4b15      	ldr	r3, [pc, #84]	; (80129c8 <tcp_netif_ip_addr_changed+0x70>)
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	4619      	mov	r1, r3
 8012976:	6878      	ldr	r0, [r7, #4]
 8012978:	f7ff ffbc 	bl	80128f4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801297c:	4b13      	ldr	r3, [pc, #76]	; (80129cc <tcp_netif_ip_addr_changed+0x74>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	4619      	mov	r1, r3
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	f7ff ffb6 	bl	80128f4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012988:	683b      	ldr	r3, [r7, #0]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d017      	beq.n	80129be <tcp_netif_ip_addr_changed+0x66>
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d013      	beq.n	80129be <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012996:	4b0e      	ldr	r3, [pc, #56]	; (80129d0 <tcp_netif_ip_addr_changed+0x78>)
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	60fb      	str	r3, [r7, #12]
 801299c:	e00c      	b.n	80129b8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	681a      	ldr	r2, [r3, #0]
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	429a      	cmp	r2, r3
 80129a8:	d103      	bne.n	80129b2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80129aa:	683b      	ldr	r3, [r7, #0]
 80129ac:	681a      	ldr	r2, [r3, #0]
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	68db      	ldr	r3, [r3, #12]
 80129b6:	60fb      	str	r3, [r7, #12]
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d1ef      	bne.n	801299e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80129be:	bf00      	nop
 80129c0:	3710      	adds	r7, #16
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}
 80129c6:	bf00      	nop
 80129c8:	24015034 	.word	0x24015034
 80129cc:	2401502c 	.word	0x2401502c
 80129d0:	24015030 	.word	0x24015030

080129d4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b082      	sub	sp, #8
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d007      	beq.n	80129f4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129e8:	4618      	mov	r0, r3
 80129ea:	f7ff fb65 	bl	80120b8 <tcp_segs_free>
    pcb->ooseq = NULL;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	2200      	movs	r2, #0
 80129f2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80129f4:	bf00      	nop
 80129f6:	3708      	adds	r7, #8
 80129f8:	46bd      	mov	sp, r7
 80129fa:	bd80      	pop	{r7, pc}

080129fc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80129fc:	b590      	push	{r4, r7, lr}
 80129fe:	b08d      	sub	sp, #52	; 0x34
 8012a00:	af04      	add	r7, sp, #16
 8012a02:	6078      	str	r0, [r7, #4]
 8012a04:	6039      	str	r1, [r7, #0]
#endif /* SO_REUSE */
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
 8012a06:	f7f8 f85d 	bl	800aac4 <sys_check_core_locking>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d105      	bne.n	8012a1c <tcp_input+0x20>
 8012a10:	4b9b      	ldr	r3, [pc, #620]	; (8012c80 <tcp_input+0x284>)
 8012a12:	2283      	movs	r2, #131	; 0x83
 8012a14:	499b      	ldr	r1, [pc, #620]	; (8012c84 <tcp_input+0x288>)
 8012a16:	489c      	ldr	r0, [pc, #624]	; (8012c88 <tcp_input+0x28c>)
 8012a18:	f007 fa26 	bl	8019e68 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	685b      	ldr	r3, [r3, #4]
 8012a20:	4a9a      	ldr	r2, [pc, #616]	; (8012c8c <tcp_input+0x290>)
 8012a22:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	895b      	ldrh	r3, [r3, #10]
 8012a28:	2b13      	cmp	r3, #19
 8012a2a:	f240 83d1 	bls.w	80131d0 <tcp_input+0x7d4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012a2e:	4b98      	ldr	r3, [pc, #608]	; (8012c90 <tcp_input+0x294>)
 8012a30:	695b      	ldr	r3, [r3, #20]
 8012a32:	4a97      	ldr	r2, [pc, #604]	; (8012c90 <tcp_input+0x294>)
 8012a34:	6812      	ldr	r2, [r2, #0]
 8012a36:	4611      	mov	r1, r2
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f006 f8db 	bl	8018bf4 <ip4_addr_isbroadcast_u32>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	f040 83c7 	bne.w	80131d4 <tcp_input+0x7d8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012a46:	4b92      	ldr	r3, [pc, #584]	; (8012c90 <tcp_input+0x294>)
 8012a48:	695b      	ldr	r3, [r3, #20]
 8012a4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012a4e:	2be0      	cmp	r3, #224	; 0xe0
 8012a50:	f000 83c0 	beq.w	80131d4 <tcp_input+0x7d8>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012a54:	4b8d      	ldr	r3, [pc, #564]	; (8012c8c <tcp_input+0x290>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	899b      	ldrh	r3, [r3, #12]
 8012a5a:	b29b      	uxth	r3, r3
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f7fc f85b 	bl	800eb18 <lwip_htons>
 8012a62:	4603      	mov	r3, r0
 8012a64:	0b1b      	lsrs	r3, r3, #12
 8012a66:	b29b      	uxth	r3, r3
 8012a68:	b2db      	uxtb	r3, r3
 8012a6a:	009b      	lsls	r3, r3, #2
 8012a6c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012a6e:	7cbb      	ldrb	r3, [r7, #18]
 8012a70:	2b13      	cmp	r3, #19
 8012a72:	f240 83b1 	bls.w	80131d8 <tcp_input+0x7dc>
 8012a76:	7cbb      	ldrb	r3, [r7, #18]
 8012a78:	b29a      	uxth	r2, r3
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	891b      	ldrh	r3, [r3, #8]
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	f200 83aa 	bhi.w	80131d8 <tcp_input+0x7dc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012a84:	7cbb      	ldrb	r3, [r7, #18]
 8012a86:	b29b      	uxth	r3, r3
 8012a88:	3b14      	subs	r3, #20
 8012a8a:	b29a      	uxth	r2, r3
 8012a8c:	4b81      	ldr	r3, [pc, #516]	; (8012c94 <tcp_input+0x298>)
 8012a8e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012a90:	4b81      	ldr	r3, [pc, #516]	; (8012c98 <tcp_input+0x29c>)
 8012a92:	2200      	movs	r2, #0
 8012a94:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	895a      	ldrh	r2, [r3, #10]
 8012a9a:	7cbb      	ldrb	r3, [r7, #18]
 8012a9c:	b29b      	uxth	r3, r3
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	d309      	bcc.n	8012ab6 <tcp_input+0xba>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012aa2:	4b7c      	ldr	r3, [pc, #496]	; (8012c94 <tcp_input+0x298>)
 8012aa4:	881a      	ldrh	r2, [r3, #0]
 8012aa6:	4b7d      	ldr	r3, [pc, #500]	; (8012c9c <tcp_input+0x2a0>)
 8012aa8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012aaa:	7cbb      	ldrb	r3, [r7, #18]
 8012aac:	4619      	mov	r1, r3
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	f7fd fc76 	bl	80103a0 <pbuf_remove_header>
 8012ab4:	e04e      	b.n	8012b54 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d105      	bne.n	8012aca <tcp_input+0xce>
 8012abe:	4b70      	ldr	r3, [pc, #448]	; (8012c80 <tcp_input+0x284>)
 8012ac0:	22c2      	movs	r2, #194	; 0xc2
 8012ac2:	4977      	ldr	r1, [pc, #476]	; (8012ca0 <tcp_input+0x2a4>)
 8012ac4:	4870      	ldr	r0, [pc, #448]	; (8012c88 <tcp_input+0x28c>)
 8012ac6:	f007 f9cf 	bl	8019e68 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012aca:	2114      	movs	r1, #20
 8012acc:	6878      	ldr	r0, [r7, #4]
 8012ace:	f7fd fc67 	bl	80103a0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	895a      	ldrh	r2, [r3, #10]
 8012ad6:	4b71      	ldr	r3, [pc, #452]	; (8012c9c <tcp_input+0x2a0>)
 8012ad8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012ada:	4b6e      	ldr	r3, [pc, #440]	; (8012c94 <tcp_input+0x298>)
 8012adc:	881a      	ldrh	r2, [r3, #0]
 8012ade:	4b6f      	ldr	r3, [pc, #444]	; (8012c9c <tcp_input+0x2a0>)
 8012ae0:	881b      	ldrh	r3, [r3, #0]
 8012ae2:	1ad3      	subs	r3, r2, r3
 8012ae4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012ae6:	4b6d      	ldr	r3, [pc, #436]	; (8012c9c <tcp_input+0x2a0>)
 8012ae8:	881b      	ldrh	r3, [r3, #0]
 8012aea:	4619      	mov	r1, r3
 8012aec:	6878      	ldr	r0, [r7, #4]
 8012aee:	f7fd fc57 	bl	80103a0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	895b      	ldrh	r3, [r3, #10]
 8012af8:	8a3a      	ldrh	r2, [r7, #16]
 8012afa:	429a      	cmp	r2, r3
 8012afc:	f200 836e 	bhi.w	80131dc <tcp_input+0x7e0>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	685b      	ldr	r3, [r3, #4]
 8012b06:	4a64      	ldr	r2, [pc, #400]	; (8012c98 <tcp_input+0x29c>)
 8012b08:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	8a3a      	ldrh	r2, [r7, #16]
 8012b10:	4611      	mov	r1, r2
 8012b12:	4618      	mov	r0, r3
 8012b14:	f7fd fc44 	bl	80103a0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	891a      	ldrh	r2, [r3, #8]
 8012b1c:	8a3b      	ldrh	r3, [r7, #16]
 8012b1e:	1ad3      	subs	r3, r2, r3
 8012b20:	b29a      	uxth	r2, r3
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	895b      	ldrh	r3, [r3, #10]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d005      	beq.n	8012b3a <tcp_input+0x13e>
 8012b2e:	4b54      	ldr	r3, [pc, #336]	; (8012c80 <tcp_input+0x284>)
 8012b30:	22df      	movs	r2, #223	; 0xdf
 8012b32:	495c      	ldr	r1, [pc, #368]	; (8012ca4 <tcp_input+0x2a8>)
 8012b34:	4854      	ldr	r0, [pc, #336]	; (8012c88 <tcp_input+0x28c>)
 8012b36:	f007 f997 	bl	8019e68 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	891a      	ldrh	r2, [r3, #8]
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	891b      	ldrh	r3, [r3, #8]
 8012b44:	429a      	cmp	r2, r3
 8012b46:	d005      	beq.n	8012b54 <tcp_input+0x158>
 8012b48:	4b4d      	ldr	r3, [pc, #308]	; (8012c80 <tcp_input+0x284>)
 8012b4a:	22e0      	movs	r2, #224	; 0xe0
 8012b4c:	4956      	ldr	r1, [pc, #344]	; (8012ca8 <tcp_input+0x2ac>)
 8012b4e:	484e      	ldr	r0, [pc, #312]	; (8012c88 <tcp_input+0x28c>)
 8012b50:	f007 f98a 	bl	8019e68 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012b54:	4b4d      	ldr	r3, [pc, #308]	; (8012c8c <tcp_input+0x290>)
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	881b      	ldrh	r3, [r3, #0]
 8012b5a:	b29b      	uxth	r3, r3
 8012b5c:	4a4b      	ldr	r2, [pc, #300]	; (8012c8c <tcp_input+0x290>)
 8012b5e:	6814      	ldr	r4, [r2, #0]
 8012b60:	4618      	mov	r0, r3
 8012b62:	f7fb ffd9 	bl	800eb18 <lwip_htons>
 8012b66:	4603      	mov	r3, r0
 8012b68:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012b6a:	4b48      	ldr	r3, [pc, #288]	; (8012c8c <tcp_input+0x290>)
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	885b      	ldrh	r3, [r3, #2]
 8012b70:	b29b      	uxth	r3, r3
 8012b72:	4a46      	ldr	r2, [pc, #280]	; (8012c8c <tcp_input+0x290>)
 8012b74:	6814      	ldr	r4, [r2, #0]
 8012b76:	4618      	mov	r0, r3
 8012b78:	f7fb ffce 	bl	800eb18 <lwip_htons>
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012b80:	4b42      	ldr	r3, [pc, #264]	; (8012c8c <tcp_input+0x290>)
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	685b      	ldr	r3, [r3, #4]
 8012b86:	4a41      	ldr	r2, [pc, #260]	; (8012c8c <tcp_input+0x290>)
 8012b88:	6814      	ldr	r4, [r2, #0]
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	f7fb ffd9 	bl	800eb42 <lwip_htonl>
 8012b90:	4603      	mov	r3, r0
 8012b92:	6063      	str	r3, [r4, #4]
 8012b94:	6863      	ldr	r3, [r4, #4]
 8012b96:	4a45      	ldr	r2, [pc, #276]	; (8012cac <tcp_input+0x2b0>)
 8012b98:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012b9a:	4b3c      	ldr	r3, [pc, #240]	; (8012c8c <tcp_input+0x290>)
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	689b      	ldr	r3, [r3, #8]
 8012ba0:	4a3a      	ldr	r2, [pc, #232]	; (8012c8c <tcp_input+0x290>)
 8012ba2:	6814      	ldr	r4, [r2, #0]
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f7fb ffcc 	bl	800eb42 <lwip_htonl>
 8012baa:	4603      	mov	r3, r0
 8012bac:	60a3      	str	r3, [r4, #8]
 8012bae:	68a3      	ldr	r3, [r4, #8]
 8012bb0:	4a3f      	ldr	r2, [pc, #252]	; (8012cb0 <tcp_input+0x2b4>)
 8012bb2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012bb4:	4b35      	ldr	r3, [pc, #212]	; (8012c8c <tcp_input+0x290>)
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	89db      	ldrh	r3, [r3, #14]
 8012bba:	b29b      	uxth	r3, r3
 8012bbc:	4a33      	ldr	r2, [pc, #204]	; (8012c8c <tcp_input+0x290>)
 8012bbe:	6814      	ldr	r4, [r2, #0]
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f7fb ffa9 	bl	800eb18 <lwip_htons>
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012bca:	4b30      	ldr	r3, [pc, #192]	; (8012c8c <tcp_input+0x290>)
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	899b      	ldrh	r3, [r3, #12]
 8012bd0:	b29b      	uxth	r3, r3
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f7fb ffa0 	bl	800eb18 <lwip_htons>
 8012bd8:	4603      	mov	r3, r0
 8012bda:	b2db      	uxtb	r3, r3
 8012bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012be0:	b2da      	uxtb	r2, r3
 8012be2:	4b34      	ldr	r3, [pc, #208]	; (8012cb4 <tcp_input+0x2b8>)
 8012be4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	891a      	ldrh	r2, [r3, #8]
 8012bea:	4b33      	ldr	r3, [pc, #204]	; (8012cb8 <tcp_input+0x2bc>)
 8012bec:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012bee:	4b31      	ldr	r3, [pc, #196]	; (8012cb4 <tcp_input+0x2b8>)
 8012bf0:	781b      	ldrb	r3, [r3, #0]
 8012bf2:	f003 0303 	and.w	r3, r3, #3
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d00c      	beq.n	8012c14 <tcp_input+0x218>
    tcplen++;
 8012bfa:	4b2f      	ldr	r3, [pc, #188]	; (8012cb8 <tcp_input+0x2bc>)
 8012bfc:	881b      	ldrh	r3, [r3, #0]
 8012bfe:	3301      	adds	r3, #1
 8012c00:	b29a      	uxth	r2, r3
 8012c02:	4b2d      	ldr	r3, [pc, #180]	; (8012cb8 <tcp_input+0x2bc>)
 8012c04:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	891a      	ldrh	r2, [r3, #8]
 8012c0a:	4b2b      	ldr	r3, [pc, #172]	; (8012cb8 <tcp_input+0x2bc>)
 8012c0c:	881b      	ldrh	r3, [r3, #0]
 8012c0e:	429a      	cmp	r2, r3
 8012c10:	f200 82e6 	bhi.w	80131e0 <tcp_input+0x7e4>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012c14:	2300      	movs	r3, #0
 8012c16:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c18:	4b28      	ldr	r3, [pc, #160]	; (8012cbc <tcp_input+0x2c0>)
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	61fb      	str	r3, [r7, #28]
 8012c1e:	e09d      	b.n	8012d5c <tcp_input+0x360>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012c20:	69fb      	ldr	r3, [r7, #28]
 8012c22:	7d1b      	ldrb	r3, [r3, #20]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d105      	bne.n	8012c34 <tcp_input+0x238>
 8012c28:	4b15      	ldr	r3, [pc, #84]	; (8012c80 <tcp_input+0x284>)
 8012c2a:	22fb      	movs	r2, #251	; 0xfb
 8012c2c:	4924      	ldr	r1, [pc, #144]	; (8012cc0 <tcp_input+0x2c4>)
 8012c2e:	4816      	ldr	r0, [pc, #88]	; (8012c88 <tcp_input+0x28c>)
 8012c30:	f007 f91a 	bl	8019e68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012c34:	69fb      	ldr	r3, [r7, #28]
 8012c36:	7d1b      	ldrb	r3, [r3, #20]
 8012c38:	2b0a      	cmp	r3, #10
 8012c3a:	d105      	bne.n	8012c48 <tcp_input+0x24c>
 8012c3c:	4b10      	ldr	r3, [pc, #64]	; (8012c80 <tcp_input+0x284>)
 8012c3e:	22fc      	movs	r2, #252	; 0xfc
 8012c40:	4920      	ldr	r1, [pc, #128]	; (8012cc4 <tcp_input+0x2c8>)
 8012c42:	4811      	ldr	r0, [pc, #68]	; (8012c88 <tcp_input+0x28c>)
 8012c44:	f007 f910 	bl	8019e68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012c48:	69fb      	ldr	r3, [r7, #28]
 8012c4a:	7d1b      	ldrb	r3, [r3, #20]
 8012c4c:	2b01      	cmp	r3, #1
 8012c4e:	d105      	bne.n	8012c5c <tcp_input+0x260>
 8012c50:	4b0b      	ldr	r3, [pc, #44]	; (8012c80 <tcp_input+0x284>)
 8012c52:	22fd      	movs	r2, #253	; 0xfd
 8012c54:	491c      	ldr	r1, [pc, #112]	; (8012cc8 <tcp_input+0x2cc>)
 8012c56:	480c      	ldr	r0, [pc, #48]	; (8012c88 <tcp_input+0x28c>)
 8012c58:	f007 f906 	bl	8019e68 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012c5c:	69fb      	ldr	r3, [r7, #28]
 8012c5e:	7a1b      	ldrb	r3, [r3, #8]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d033      	beq.n	8012ccc <tcp_input+0x2d0>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012c64:	69fb      	ldr	r3, [r7, #28]
 8012c66:	7a1a      	ldrb	r2, [r3, #8]
 8012c68:	4b09      	ldr	r3, [pc, #36]	; (8012c90 <tcp_input+0x294>)
 8012c6a:	685b      	ldr	r3, [r3, #4]
 8012c6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012c70:	3301      	adds	r3, #1
 8012c72:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012c74:	429a      	cmp	r2, r3
 8012c76:	d029      	beq.n	8012ccc <tcp_input+0x2d0>
      prev = pcb;
 8012c78:	69fb      	ldr	r3, [r7, #28]
 8012c7a:	61bb      	str	r3, [r7, #24]
      continue;
 8012c7c:	e06b      	b.n	8012d56 <tcp_input+0x35a>
 8012c7e:	bf00      	nop
 8012c80:	0801c358 	.word	0x0801c358
 8012c84:	0801c38c 	.word	0x0801c38c
 8012c88:	0801c3a4 	.word	0x0801c3a4
 8012c8c:	24015050 	.word	0x24015050
 8012c90:	2400e568 	.word	0x2400e568
 8012c94:	24015054 	.word	0x24015054
 8012c98:	24015058 	.word	0x24015058
 8012c9c:	24015056 	.word	0x24015056
 8012ca0:	0801c3cc 	.word	0x0801c3cc
 8012ca4:	0801c3dc 	.word	0x0801c3dc
 8012ca8:	0801c3e8 	.word	0x0801c3e8
 8012cac:	24015060 	.word	0x24015060
 8012cb0:	24015064 	.word	0x24015064
 8012cb4:	2401506c 	.word	0x2401506c
 8012cb8:	2401506a 	.word	0x2401506a
 8012cbc:	24015034 	.word	0x24015034
 8012cc0:	0801c408 	.word	0x0801c408
 8012cc4:	0801c430 	.word	0x0801c430
 8012cc8:	0801c45c 	.word	0x0801c45c
    }

    if (pcb->remote_port == tcphdr->src &&
 8012ccc:	69fb      	ldr	r3, [r7, #28]
 8012cce:	8b1a      	ldrh	r2, [r3, #24]
 8012cd0:	4b72      	ldr	r3, [pc, #456]	; (8012e9c <tcp_input+0x4a0>)
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	881b      	ldrh	r3, [r3, #0]
 8012cd6:	b29b      	uxth	r3, r3
 8012cd8:	429a      	cmp	r2, r3
 8012cda:	d13a      	bne.n	8012d52 <tcp_input+0x356>
        pcb->local_port == tcphdr->dest &&
 8012cdc:	69fb      	ldr	r3, [r7, #28]
 8012cde:	8ada      	ldrh	r2, [r3, #22]
 8012ce0:	4b6e      	ldr	r3, [pc, #440]	; (8012e9c <tcp_input+0x4a0>)
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	885b      	ldrh	r3, [r3, #2]
 8012ce6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012ce8:	429a      	cmp	r2, r3
 8012cea:	d132      	bne.n	8012d52 <tcp_input+0x356>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012cec:	69fb      	ldr	r3, [r7, #28]
 8012cee:	685a      	ldr	r2, [r3, #4]
 8012cf0:	4b6b      	ldr	r3, [pc, #428]	; (8012ea0 <tcp_input+0x4a4>)
 8012cf2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012cf4:	429a      	cmp	r2, r3
 8012cf6:	d12c      	bne.n	8012d52 <tcp_input+0x356>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012cf8:	69fb      	ldr	r3, [r7, #28]
 8012cfa:	681a      	ldr	r2, [r3, #0]
 8012cfc:	4b68      	ldr	r3, [pc, #416]	; (8012ea0 <tcp_input+0x4a4>)
 8012cfe:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012d00:	429a      	cmp	r2, r3
 8012d02:	d126      	bne.n	8012d52 <tcp_input+0x356>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012d04:	69fb      	ldr	r3, [r7, #28]
 8012d06:	68db      	ldr	r3, [r3, #12]
 8012d08:	69fa      	ldr	r2, [r7, #28]
 8012d0a:	429a      	cmp	r2, r3
 8012d0c:	d106      	bne.n	8012d1c <tcp_input+0x320>
 8012d0e:	4b65      	ldr	r3, [pc, #404]	; (8012ea4 <tcp_input+0x4a8>)
 8012d10:	f240 120d 	movw	r2, #269	; 0x10d
 8012d14:	4964      	ldr	r1, [pc, #400]	; (8012ea8 <tcp_input+0x4ac>)
 8012d16:	4865      	ldr	r0, [pc, #404]	; (8012eac <tcp_input+0x4b0>)
 8012d18:	f007 f8a6 	bl	8019e68 <iprintf>
      if (prev != NULL) {
 8012d1c:	69bb      	ldr	r3, [r7, #24]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d00a      	beq.n	8012d38 <tcp_input+0x33c>
        prev->next = pcb->next;
 8012d22:	69fb      	ldr	r3, [r7, #28]
 8012d24:	68da      	ldr	r2, [r3, #12]
 8012d26:	69bb      	ldr	r3, [r7, #24]
 8012d28:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012d2a:	4b61      	ldr	r3, [pc, #388]	; (8012eb0 <tcp_input+0x4b4>)
 8012d2c:	681a      	ldr	r2, [r3, #0]
 8012d2e:	69fb      	ldr	r3, [r7, #28]
 8012d30:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012d32:	4a5f      	ldr	r2, [pc, #380]	; (8012eb0 <tcp_input+0x4b4>)
 8012d34:	69fb      	ldr	r3, [r7, #28]
 8012d36:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012d38:	69fb      	ldr	r3, [r7, #28]
 8012d3a:	68db      	ldr	r3, [r3, #12]
 8012d3c:	69fa      	ldr	r2, [r7, #28]
 8012d3e:	429a      	cmp	r2, r3
 8012d40:	d111      	bne.n	8012d66 <tcp_input+0x36a>
 8012d42:	4b58      	ldr	r3, [pc, #352]	; (8012ea4 <tcp_input+0x4a8>)
 8012d44:	f240 1215 	movw	r2, #277	; 0x115
 8012d48:	495a      	ldr	r1, [pc, #360]	; (8012eb4 <tcp_input+0x4b8>)
 8012d4a:	4858      	ldr	r0, [pc, #352]	; (8012eac <tcp_input+0x4b0>)
 8012d4c:	f007 f88c 	bl	8019e68 <iprintf>
      break;
 8012d50:	e009      	b.n	8012d66 <tcp_input+0x36a>
    }
    prev = pcb;
 8012d52:	69fb      	ldr	r3, [r7, #28]
 8012d54:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d56:	69fb      	ldr	r3, [r7, #28]
 8012d58:	68db      	ldr	r3, [r3, #12]
 8012d5a:	61fb      	str	r3, [r7, #28]
 8012d5c:	69fb      	ldr	r3, [r7, #28]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	f47f af5e 	bne.w	8012c20 <tcp_input+0x224>
 8012d64:	e000      	b.n	8012d68 <tcp_input+0x36c>
      break;
 8012d66:	bf00      	nop
  }

  if (pcb == NULL) {
 8012d68:	69fb      	ldr	r3, [r7, #28]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	f040 80aa 	bne.w	8012ec4 <tcp_input+0x4c8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d70:	4b51      	ldr	r3, [pc, #324]	; (8012eb8 <tcp_input+0x4bc>)
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	61fb      	str	r3, [r7, #28]
 8012d76:	e03f      	b.n	8012df8 <tcp_input+0x3fc>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012d78:	69fb      	ldr	r3, [r7, #28]
 8012d7a:	7d1b      	ldrb	r3, [r3, #20]
 8012d7c:	2b0a      	cmp	r3, #10
 8012d7e:	d006      	beq.n	8012d8e <tcp_input+0x392>
 8012d80:	4b48      	ldr	r3, [pc, #288]	; (8012ea4 <tcp_input+0x4a8>)
 8012d82:	f240 121f 	movw	r2, #287	; 0x11f
 8012d86:	494d      	ldr	r1, [pc, #308]	; (8012ebc <tcp_input+0x4c0>)
 8012d88:	4848      	ldr	r0, [pc, #288]	; (8012eac <tcp_input+0x4b0>)
 8012d8a:	f007 f86d 	bl	8019e68 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012d8e:	69fb      	ldr	r3, [r7, #28]
 8012d90:	7a1b      	ldrb	r3, [r3, #8]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d009      	beq.n	8012daa <tcp_input+0x3ae>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012d96:	69fb      	ldr	r3, [r7, #28]
 8012d98:	7a1a      	ldrb	r2, [r3, #8]
 8012d9a:	4b41      	ldr	r3, [pc, #260]	; (8012ea0 <tcp_input+0x4a4>)
 8012d9c:	685b      	ldr	r3, [r3, #4]
 8012d9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012da2:	3301      	adds	r3, #1
 8012da4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012da6:	429a      	cmp	r2, r3
 8012da8:	d122      	bne.n	8012df0 <tcp_input+0x3f4>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012daa:	69fb      	ldr	r3, [r7, #28]
 8012dac:	8b1a      	ldrh	r2, [r3, #24]
 8012dae:	4b3b      	ldr	r3, [pc, #236]	; (8012e9c <tcp_input+0x4a0>)
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	881b      	ldrh	r3, [r3, #0]
 8012db4:	b29b      	uxth	r3, r3
 8012db6:	429a      	cmp	r2, r3
 8012db8:	d11b      	bne.n	8012df2 <tcp_input+0x3f6>
          pcb->local_port == tcphdr->dest &&
 8012dba:	69fb      	ldr	r3, [r7, #28]
 8012dbc:	8ada      	ldrh	r2, [r3, #22]
 8012dbe:	4b37      	ldr	r3, [pc, #220]	; (8012e9c <tcp_input+0x4a0>)
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	885b      	ldrh	r3, [r3, #2]
 8012dc4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012dc6:	429a      	cmp	r2, r3
 8012dc8:	d113      	bne.n	8012df2 <tcp_input+0x3f6>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012dca:	69fb      	ldr	r3, [r7, #28]
 8012dcc:	685a      	ldr	r2, [r3, #4]
 8012dce:	4b34      	ldr	r3, [pc, #208]	; (8012ea0 <tcp_input+0x4a4>)
 8012dd0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012dd2:	429a      	cmp	r2, r3
 8012dd4:	d10d      	bne.n	8012df2 <tcp_input+0x3f6>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012dd6:	69fb      	ldr	r3, [r7, #28]
 8012dd8:	681a      	ldr	r2, [r3, #0]
 8012dda:	4b31      	ldr	r3, [pc, #196]	; (8012ea0 <tcp_input+0x4a4>)
 8012ddc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012dde:	429a      	cmp	r2, r3
 8012de0:	d107      	bne.n	8012df2 <tcp_input+0x3f6>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012de2:	69f8      	ldr	r0, [r7, #28]
 8012de4:	f000 fb56 	bl	8013494 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012de8:	6878      	ldr	r0, [r7, #4]
 8012dea:	f7fd fb5f 	bl	80104ac <pbuf_free>
        return;
 8012dee:	e1fd      	b.n	80131ec <tcp_input+0x7f0>
        continue;
 8012df0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012df2:	69fb      	ldr	r3, [r7, #28]
 8012df4:	68db      	ldr	r3, [r3, #12]
 8012df6:	61fb      	str	r3, [r7, #28]
 8012df8:	69fb      	ldr	r3, [r7, #28]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d1bc      	bne.n	8012d78 <tcp_input+0x37c>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012dfe:	2300      	movs	r3, #0
 8012e00:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012e02:	4b2f      	ldr	r3, [pc, #188]	; (8012ec0 <tcp_input+0x4c4>)
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	617b      	str	r3, [r7, #20]
 8012e08:	e02a      	b.n	8012e60 <tcp_input+0x464>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012e0a:	697b      	ldr	r3, [r7, #20]
 8012e0c:	7a1b      	ldrb	r3, [r3, #8]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d00c      	beq.n	8012e2c <tcp_input+0x430>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012e12:	697b      	ldr	r3, [r7, #20]
 8012e14:	7a1a      	ldrb	r2, [r3, #8]
 8012e16:	4b22      	ldr	r3, [pc, #136]	; (8012ea0 <tcp_input+0x4a4>)
 8012e18:	685b      	ldr	r3, [r3, #4]
 8012e1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012e1e:	3301      	adds	r3, #1
 8012e20:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012e22:	429a      	cmp	r2, r3
 8012e24:	d002      	beq.n	8012e2c <tcp_input+0x430>
        prev = (struct tcp_pcb *)lpcb;
 8012e26:	697b      	ldr	r3, [r7, #20]
 8012e28:	61bb      	str	r3, [r7, #24]
        continue;
 8012e2a:	e016      	b.n	8012e5a <tcp_input+0x45e>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012e2c:	697b      	ldr	r3, [r7, #20]
 8012e2e:	8ada      	ldrh	r2, [r3, #22]
 8012e30:	4b1a      	ldr	r3, [pc, #104]	; (8012e9c <tcp_input+0x4a0>)
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	885b      	ldrh	r3, [r3, #2]
 8012e36:	b29b      	uxth	r3, r3
 8012e38:	429a      	cmp	r2, r3
 8012e3a:	d10c      	bne.n	8012e56 <tcp_input+0x45a>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012e3c:	697b      	ldr	r3, [r7, #20]
 8012e3e:	681a      	ldr	r2, [r3, #0]
 8012e40:	4b17      	ldr	r3, [pc, #92]	; (8012ea0 <tcp_input+0x4a4>)
 8012e42:	695b      	ldr	r3, [r3, #20]
 8012e44:	429a      	cmp	r2, r3
 8012e46:	d00f      	beq.n	8012e68 <tcp_input+0x46c>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012e48:	697b      	ldr	r3, [r7, #20]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d00d      	beq.n	8012e6a <tcp_input+0x46e>
 8012e4e:	697b      	ldr	r3, [r7, #20]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d009      	beq.n	8012e6a <tcp_input+0x46e>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012e56:	697b      	ldr	r3, [r7, #20]
 8012e58:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012e5a:	697b      	ldr	r3, [r7, #20]
 8012e5c:	68db      	ldr	r3, [r3, #12]
 8012e5e:	617b      	str	r3, [r7, #20]
 8012e60:	697b      	ldr	r3, [r7, #20]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d1d1      	bne.n	8012e0a <tcp_input+0x40e>
 8012e66:	e000      	b.n	8012e6a <tcp_input+0x46e>
            break;
 8012e68:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012e6a:	697b      	ldr	r3, [r7, #20]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d029      	beq.n	8012ec4 <tcp_input+0x4c8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012e70:	69bb      	ldr	r3, [r7, #24]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d00a      	beq.n	8012e8c <tcp_input+0x490>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	68da      	ldr	r2, [r3, #12]
 8012e7a:	69bb      	ldr	r3, [r7, #24]
 8012e7c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012e7e:	4b10      	ldr	r3, [pc, #64]	; (8012ec0 <tcp_input+0x4c4>)
 8012e80:	681a      	ldr	r2, [r3, #0]
 8012e82:	697b      	ldr	r3, [r7, #20]
 8012e84:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012e86:	4a0e      	ldr	r2, [pc, #56]	; (8012ec0 <tcp_input+0x4c4>)
 8012e88:	697b      	ldr	r3, [r7, #20]
 8012e8a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012e8c:	6978      	ldr	r0, [r7, #20]
 8012e8e:	f000 fa03 	bl	8013298 <tcp_listen_input>
      }
      pbuf_free(p);
 8012e92:	6878      	ldr	r0, [r7, #4]
 8012e94:	f7fd fb0a 	bl	80104ac <pbuf_free>
      return;
 8012e98:	e1a8      	b.n	80131ec <tcp_input+0x7f0>
 8012e9a:	bf00      	nop
 8012e9c:	24015050 	.word	0x24015050
 8012ea0:	2400e568 	.word	0x2400e568
 8012ea4:	0801c358 	.word	0x0801c358
 8012ea8:	0801c484 	.word	0x0801c484
 8012eac:	0801c3a4 	.word	0x0801c3a4
 8012eb0:	24015034 	.word	0x24015034
 8012eb4:	0801c4b0 	.word	0x0801c4b0
 8012eb8:	24015038 	.word	0x24015038
 8012ebc:	0801c4dc 	.word	0x0801c4dc
 8012ec0:	24015030 	.word	0x24015030
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012ec4:	69fb      	ldr	r3, [r7, #28]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	f000 8158 	beq.w	801317c <tcp_input+0x780>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012ecc:	4b95      	ldr	r3, [pc, #596]	; (8013124 <tcp_input+0x728>)
 8012ece:	2200      	movs	r2, #0
 8012ed0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	891a      	ldrh	r2, [r3, #8]
 8012ed6:	4b93      	ldr	r3, [pc, #588]	; (8013124 <tcp_input+0x728>)
 8012ed8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012eda:	4a92      	ldr	r2, [pc, #584]	; (8013124 <tcp_input+0x728>)
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012ee0:	4b91      	ldr	r3, [pc, #580]	; (8013128 <tcp_input+0x72c>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	4a8f      	ldr	r2, [pc, #572]	; (8013124 <tcp_input+0x728>)
 8012ee6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012ee8:	4b90      	ldr	r3, [pc, #576]	; (801312c <tcp_input+0x730>)
 8012eea:	2200      	movs	r2, #0
 8012eec:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012eee:	4b90      	ldr	r3, [pc, #576]	; (8013130 <tcp_input+0x734>)
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012ef4:	4b8f      	ldr	r3, [pc, #572]	; (8013134 <tcp_input+0x738>)
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012efa:	4b8f      	ldr	r3, [pc, #572]	; (8013138 <tcp_input+0x73c>)
 8012efc:	781b      	ldrb	r3, [r3, #0]
 8012efe:	f003 0308 	and.w	r3, r3, #8
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d006      	beq.n	8012f14 <tcp_input+0x518>
      p->flags |= PBUF_FLAG_PUSH;
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	7b5b      	ldrb	r3, [r3, #13]
 8012f0a:	f043 0301 	orr.w	r3, r3, #1
 8012f0e:	b2da      	uxtb	r2, r3
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012f14:	69fb      	ldr	r3, [r7, #28]
 8012f16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d017      	beq.n	8012f4c <tcp_input+0x550>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012f1c:	69f8      	ldr	r0, [r7, #28]
 8012f1e:	f7ff f84d 	bl	8011fbc <tcp_process_refused_data>
 8012f22:	4603      	mov	r3, r0
 8012f24:	f113 0f0d 	cmn.w	r3, #13
 8012f28:	d007      	beq.n	8012f3a <tcp_input+0x53e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012f2a:	69fb      	ldr	r3, [r7, #28]
 8012f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d00c      	beq.n	8012f4c <tcp_input+0x550>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012f32:	4b82      	ldr	r3, [pc, #520]	; (801313c <tcp_input+0x740>)
 8012f34:	881b      	ldrh	r3, [r3, #0]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d008      	beq.n	8012f4c <tcp_input+0x550>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012f3a:	69fb      	ldr	r3, [r7, #28]
 8012f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	f040 80e4 	bne.w	801310c <tcp_input+0x710>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012f44:	69f8      	ldr	r0, [r7, #28]
 8012f46:	f003 fe09 	bl	8016b5c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012f4a:	e0df      	b.n	801310c <tcp_input+0x710>
      }
    }
    tcp_input_pcb = pcb;
 8012f4c:	4a7c      	ldr	r2, [pc, #496]	; (8013140 <tcp_input+0x744>)
 8012f4e:	69fb      	ldr	r3, [r7, #28]
 8012f50:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012f52:	69f8      	ldr	r0, [r7, #28]
 8012f54:	f000 fb18 	bl	8013588 <tcp_process>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012f5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f60:	f113 0f0d 	cmn.w	r3, #13
 8012f64:	f000 80d4 	beq.w	8013110 <tcp_input+0x714>
      if (recv_flags & TF_RESET) {
 8012f68:	4b71      	ldr	r3, [pc, #452]	; (8013130 <tcp_input+0x734>)
 8012f6a:	781b      	ldrb	r3, [r3, #0]
 8012f6c:	f003 0308 	and.w	r3, r3, #8
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d015      	beq.n	8012fa0 <tcp_input+0x5a4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012f74:	69fb      	ldr	r3, [r7, #28]
 8012f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d008      	beq.n	8012f90 <tcp_input+0x594>
 8012f7e:	69fb      	ldr	r3, [r7, #28]
 8012f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012f84:	69fa      	ldr	r2, [r7, #28]
 8012f86:	6912      	ldr	r2, [r2, #16]
 8012f88:	f06f 010d 	mvn.w	r1, #13
 8012f8c:	4610      	mov	r0, r2
 8012f8e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012f90:	69f9      	ldr	r1, [r7, #28]
 8012f92:	486c      	ldr	r0, [pc, #432]	; (8013144 <tcp_input+0x748>)
 8012f94:	f7ff fbba 	bl	801270c <tcp_pcb_remove>
        tcp_free(pcb);
 8012f98:	69f8      	ldr	r0, [r7, #28]
 8012f9a:	f7fd fdeb 	bl	8010b74 <tcp_free>
 8012f9e:	e0da      	b.n	8013156 <tcp_input+0x75a>
      } else {
        err = ERR_OK;
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012fa4:	4b63      	ldr	r3, [pc, #396]	; (8013134 <tcp_input+0x738>)
 8012fa6:	881b      	ldrh	r3, [r3, #0]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d01d      	beq.n	8012fe8 <tcp_input+0x5ec>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012fac:	4b61      	ldr	r3, [pc, #388]	; (8013134 <tcp_input+0x738>)
 8012fae:	881b      	ldrh	r3, [r3, #0]
 8012fb0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012fb2:	69fb      	ldr	r3, [r7, #28]
 8012fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d00a      	beq.n	8012fd2 <tcp_input+0x5d6>
 8012fbc:	69fb      	ldr	r3, [r7, #28]
 8012fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012fc2:	69fa      	ldr	r2, [r7, #28]
 8012fc4:	6910      	ldr	r0, [r2, #16]
 8012fc6:	89fa      	ldrh	r2, [r7, #14]
 8012fc8:	69f9      	ldr	r1, [r7, #28]
 8012fca:	4798      	blx	r3
 8012fcc:	4603      	mov	r3, r0
 8012fce:	74fb      	strb	r3, [r7, #19]
 8012fd0:	e001      	b.n	8012fd6 <tcp_input+0x5da>
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012fd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012fda:	f113 0f0d 	cmn.w	r3, #13
 8012fde:	f000 8099 	beq.w	8013114 <tcp_input+0x718>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012fe2:	4b54      	ldr	r3, [pc, #336]	; (8013134 <tcp_input+0x738>)
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012fe8:	69f8      	ldr	r0, [r7, #28]
 8012fea:	f000 f915 	bl	8013218 <tcp_input_delayed_close>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	f040 8091 	bne.w	8013118 <tcp_input+0x71c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012ff6:	4b4d      	ldr	r3, [pc, #308]	; (801312c <tcp_input+0x730>)
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d041      	beq.n	8013082 <tcp_input+0x686>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012ffe:	69fb      	ldr	r3, [r7, #28]
 8013000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013002:	2b00      	cmp	r3, #0
 8013004:	d006      	beq.n	8013014 <tcp_input+0x618>
 8013006:	4b50      	ldr	r3, [pc, #320]	; (8013148 <tcp_input+0x74c>)
 8013008:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801300c:	494f      	ldr	r1, [pc, #316]	; (801314c <tcp_input+0x750>)
 801300e:	4850      	ldr	r0, [pc, #320]	; (8013150 <tcp_input+0x754>)
 8013010:	f006 ff2a 	bl	8019e68 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013014:	69fb      	ldr	r3, [r7, #28]
 8013016:	8b5b      	ldrh	r3, [r3, #26]
 8013018:	f003 0310 	and.w	r3, r3, #16
 801301c:	2b00      	cmp	r3, #0
 801301e:	d008      	beq.n	8013032 <tcp_input+0x636>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013020:	4b42      	ldr	r3, [pc, #264]	; (801312c <tcp_input+0x730>)
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	4618      	mov	r0, r3
 8013026:	f7fd fa41 	bl	80104ac <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801302a:	69f8      	ldr	r0, [r7, #28]
 801302c:	f7fe f88e 	bl	801114c <tcp_abort>
            goto aborted;
 8013030:	e091      	b.n	8013156 <tcp_input+0x75a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013032:	69fb      	ldr	r3, [r7, #28]
 8013034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013038:	2b00      	cmp	r3, #0
 801303a:	d00c      	beq.n	8013056 <tcp_input+0x65a>
 801303c:	69fb      	ldr	r3, [r7, #28]
 801303e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013042:	69fb      	ldr	r3, [r7, #28]
 8013044:	6918      	ldr	r0, [r3, #16]
 8013046:	4b39      	ldr	r3, [pc, #228]	; (801312c <tcp_input+0x730>)
 8013048:	681a      	ldr	r2, [r3, #0]
 801304a:	2300      	movs	r3, #0
 801304c:	69f9      	ldr	r1, [r7, #28]
 801304e:	47a0      	blx	r4
 8013050:	4603      	mov	r3, r0
 8013052:	74fb      	strb	r3, [r7, #19]
 8013054:	e008      	b.n	8013068 <tcp_input+0x66c>
 8013056:	4b35      	ldr	r3, [pc, #212]	; (801312c <tcp_input+0x730>)
 8013058:	681a      	ldr	r2, [r3, #0]
 801305a:	2300      	movs	r3, #0
 801305c:	69f9      	ldr	r1, [r7, #28]
 801305e:	2000      	movs	r0, #0
 8013060:	f7ff f884 	bl	801216c <tcp_recv_null>
 8013064:	4603      	mov	r3, r0
 8013066:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013068:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801306c:	f113 0f0d 	cmn.w	r3, #13
 8013070:	d054      	beq.n	801311c <tcp_input+0x720>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013072:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d003      	beq.n	8013082 <tcp_input+0x686>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801307a:	4b2c      	ldr	r3, [pc, #176]	; (801312c <tcp_input+0x730>)
 801307c:	681a      	ldr	r2, [r3, #0]
 801307e:	69fb      	ldr	r3, [r7, #28]
 8013080:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013082:	4b2b      	ldr	r3, [pc, #172]	; (8013130 <tcp_input+0x734>)
 8013084:	781b      	ldrb	r3, [r3, #0]
 8013086:	f003 0320 	and.w	r3, r3, #32
 801308a:	2b00      	cmp	r3, #0
 801308c:	d031      	beq.n	80130f2 <tcp_input+0x6f6>
          if (pcb->refused_data != NULL) {
 801308e:	69fb      	ldr	r3, [r7, #28]
 8013090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013092:	2b00      	cmp	r3, #0
 8013094:	d009      	beq.n	80130aa <tcp_input+0x6ae>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013096:	69fb      	ldr	r3, [r7, #28]
 8013098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801309a:	7b5a      	ldrb	r2, [r3, #13]
 801309c:	69fb      	ldr	r3, [r7, #28]
 801309e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80130a0:	f042 0220 	orr.w	r2, r2, #32
 80130a4:	b2d2      	uxtb	r2, r2
 80130a6:	735a      	strb	r2, [r3, #13]
 80130a8:	e023      	b.n	80130f2 <tcp_input+0x6f6>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80130aa:	69fb      	ldr	r3, [r7, #28]
 80130ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80130ae:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80130b2:	4293      	cmp	r3, r2
 80130b4:	d005      	beq.n	80130c2 <tcp_input+0x6c6>
              pcb->rcv_wnd++;
 80130b6:	69fb      	ldr	r3, [r7, #28]
 80130b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80130ba:	3301      	adds	r3, #1
 80130bc:	b29a      	uxth	r2, r3
 80130be:	69fb      	ldr	r3, [r7, #28]
 80130c0:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80130c2:	69fb      	ldr	r3, [r7, #28]
 80130c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d00b      	beq.n	80130e4 <tcp_input+0x6e8>
 80130cc:	69fb      	ldr	r3, [r7, #28]
 80130ce:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80130d2:	69fb      	ldr	r3, [r7, #28]
 80130d4:	6918      	ldr	r0, [r3, #16]
 80130d6:	2300      	movs	r3, #0
 80130d8:	2200      	movs	r2, #0
 80130da:	69f9      	ldr	r1, [r7, #28]
 80130dc:	47a0      	blx	r4
 80130de:	4603      	mov	r3, r0
 80130e0:	74fb      	strb	r3, [r7, #19]
 80130e2:	e001      	b.n	80130e8 <tcp_input+0x6ec>
 80130e4:	2300      	movs	r3, #0
 80130e6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80130e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80130ec:	f113 0f0d 	cmn.w	r3, #13
 80130f0:	d016      	beq.n	8013120 <tcp_input+0x724>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80130f2:	4b13      	ldr	r3, [pc, #76]	; (8013140 <tcp_input+0x744>)
 80130f4:	2200      	movs	r2, #0
 80130f6:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80130f8:	69f8      	ldr	r0, [r7, #28]
 80130fa:	f000 f88d 	bl	8013218 <tcp_input_delayed_close>
 80130fe:	4603      	mov	r3, r0
 8013100:	2b00      	cmp	r3, #0
 8013102:	d127      	bne.n	8013154 <tcp_input+0x758>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013104:	69f8      	ldr	r0, [r7, #28]
 8013106:	f002 ff21 	bl	8015f4c <tcp_output>
 801310a:	e024      	b.n	8013156 <tcp_input+0x75a>
        goto aborted;
 801310c:	bf00      	nop
 801310e:	e022      	b.n	8013156 <tcp_input+0x75a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013110:	bf00      	nop
 8013112:	e020      	b.n	8013156 <tcp_input+0x75a>
              goto aborted;
 8013114:	bf00      	nop
 8013116:	e01e      	b.n	8013156 <tcp_input+0x75a>
          goto aborted;
 8013118:	bf00      	nop
 801311a:	e01c      	b.n	8013156 <tcp_input+0x75a>
            goto aborted;
 801311c:	bf00      	nop
 801311e:	e01a      	b.n	8013156 <tcp_input+0x75a>
              goto aborted;
 8013120:	bf00      	nop
 8013122:	e018      	b.n	8013156 <tcp_input+0x75a>
 8013124:	24015040 	.word	0x24015040
 8013128:	24015050 	.word	0x24015050
 801312c:	24015070 	.word	0x24015070
 8013130:	2401506d 	.word	0x2401506d
 8013134:	24015068 	.word	0x24015068
 8013138:	2401506c 	.word	0x2401506c
 801313c:	2401506a 	.word	0x2401506a
 8013140:	24015074 	.word	0x24015074
 8013144:	24015034 	.word	0x24015034
 8013148:	0801c358 	.word	0x0801c358
 801314c:	0801c50c 	.word	0x0801c50c
 8013150:	0801c3a4 	.word	0x0801c3a4
          goto aborted;
 8013154:	bf00      	nop
    tcp_input_pcb = NULL;
 8013156:	4b27      	ldr	r3, [pc, #156]	; (80131f4 <tcp_input+0x7f8>)
 8013158:	2200      	movs	r2, #0
 801315a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801315c:	4b26      	ldr	r3, [pc, #152]	; (80131f8 <tcp_input+0x7fc>)
 801315e:	2200      	movs	r2, #0
 8013160:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013162:	4b26      	ldr	r3, [pc, #152]	; (80131fc <tcp_input+0x800>)
 8013164:	685b      	ldr	r3, [r3, #4]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d03f      	beq.n	80131ea <tcp_input+0x7ee>
      pbuf_free(inseg.p);
 801316a:	4b24      	ldr	r3, [pc, #144]	; (80131fc <tcp_input+0x800>)
 801316c:	685b      	ldr	r3, [r3, #4]
 801316e:	4618      	mov	r0, r3
 8013170:	f7fd f99c 	bl	80104ac <pbuf_free>
      inseg.p = NULL;
 8013174:	4b21      	ldr	r3, [pc, #132]	; (80131fc <tcp_input+0x800>)
 8013176:	2200      	movs	r2, #0
 8013178:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801317a:	e036      	b.n	80131ea <tcp_input+0x7ee>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801317c:	4b20      	ldr	r3, [pc, #128]	; (8013200 <tcp_input+0x804>)
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	899b      	ldrh	r3, [r3, #12]
 8013182:	b29b      	uxth	r3, r3
 8013184:	4618      	mov	r0, r3
 8013186:	f7fb fcc7 	bl	800eb18 <lwip_htons>
 801318a:	4603      	mov	r3, r0
 801318c:	b2db      	uxtb	r3, r3
 801318e:	f003 0304 	and.w	r3, r3, #4
 8013192:	2b00      	cmp	r3, #0
 8013194:	d118      	bne.n	80131c8 <tcp_input+0x7cc>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013196:	4b1b      	ldr	r3, [pc, #108]	; (8013204 <tcp_input+0x808>)
 8013198:	6819      	ldr	r1, [r3, #0]
 801319a:	4b1b      	ldr	r3, [pc, #108]	; (8013208 <tcp_input+0x80c>)
 801319c:	881b      	ldrh	r3, [r3, #0]
 801319e:	461a      	mov	r2, r3
 80131a0:	4b1a      	ldr	r3, [pc, #104]	; (801320c <tcp_input+0x810>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80131a6:	4b16      	ldr	r3, [pc, #88]	; (8013200 <tcp_input+0x804>)
 80131a8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80131aa:	885b      	ldrh	r3, [r3, #2]
 80131ac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80131ae:	4a14      	ldr	r2, [pc, #80]	; (8013200 <tcp_input+0x804>)
 80131b0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80131b2:	8812      	ldrh	r2, [r2, #0]
 80131b4:	b292      	uxth	r2, r2
 80131b6:	9202      	str	r2, [sp, #8]
 80131b8:	9301      	str	r3, [sp, #4]
 80131ba:	4b15      	ldr	r3, [pc, #84]	; (8013210 <tcp_input+0x814>)
 80131bc:	9300      	str	r3, [sp, #0]
 80131be:	4b15      	ldr	r3, [pc, #84]	; (8013214 <tcp_input+0x818>)
 80131c0:	4602      	mov	r2, r0
 80131c2:	2000      	movs	r0, #0
 80131c4:	f003 fc78 	bl	8016ab8 <tcp_rst>
    pbuf_free(p);
 80131c8:	6878      	ldr	r0, [r7, #4]
 80131ca:	f7fd f96f 	bl	80104ac <pbuf_free>
  return;
 80131ce:	e00c      	b.n	80131ea <tcp_input+0x7ee>
    goto dropped;
 80131d0:	bf00      	nop
 80131d2:	e006      	b.n	80131e2 <tcp_input+0x7e6>
    goto dropped;
 80131d4:	bf00      	nop
 80131d6:	e004      	b.n	80131e2 <tcp_input+0x7e6>
    goto dropped;
 80131d8:	bf00      	nop
 80131da:	e002      	b.n	80131e2 <tcp_input+0x7e6>
      goto dropped;
 80131dc:	bf00      	nop
 80131de:	e000      	b.n	80131e2 <tcp_input+0x7e6>
      goto dropped;
 80131e0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80131e2:	6878      	ldr	r0, [r7, #4]
 80131e4:	f7fd f962 	bl	80104ac <pbuf_free>
 80131e8:	e000      	b.n	80131ec <tcp_input+0x7f0>
  return;
 80131ea:	bf00      	nop
}
 80131ec:	3724      	adds	r7, #36	; 0x24
 80131ee:	46bd      	mov	sp, r7
 80131f0:	bd90      	pop	{r4, r7, pc}
 80131f2:	bf00      	nop
 80131f4:	24015074 	.word	0x24015074
 80131f8:	24015070 	.word	0x24015070
 80131fc:	24015040 	.word	0x24015040
 8013200:	24015050 	.word	0x24015050
 8013204:	24015064 	.word	0x24015064
 8013208:	2401506a 	.word	0x2401506a
 801320c:	24015060 	.word	0x24015060
 8013210:	2400e578 	.word	0x2400e578
 8013214:	2400e57c 	.word	0x2400e57c

08013218 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b082      	sub	sp, #8
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d106      	bne.n	8013234 <tcp_input_delayed_close+0x1c>
 8013226:	4b17      	ldr	r3, [pc, #92]	; (8013284 <tcp_input_delayed_close+0x6c>)
 8013228:	f240 225a 	movw	r2, #602	; 0x25a
 801322c:	4916      	ldr	r1, [pc, #88]	; (8013288 <tcp_input_delayed_close+0x70>)
 801322e:	4817      	ldr	r0, [pc, #92]	; (801328c <tcp_input_delayed_close+0x74>)
 8013230:	f006 fe1a 	bl	8019e68 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013234:	4b16      	ldr	r3, [pc, #88]	; (8013290 <tcp_input_delayed_close+0x78>)
 8013236:	781b      	ldrb	r3, [r3, #0]
 8013238:	f003 0310 	and.w	r3, r3, #16
 801323c:	2b00      	cmp	r3, #0
 801323e:	d01c      	beq.n	801327a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	8b5b      	ldrh	r3, [r3, #26]
 8013244:	f003 0310 	and.w	r3, r3, #16
 8013248:	2b00      	cmp	r3, #0
 801324a:	d10d      	bne.n	8013268 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013252:	2b00      	cmp	r3, #0
 8013254:	d008      	beq.n	8013268 <tcp_input_delayed_close+0x50>
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801325c:	687a      	ldr	r2, [r7, #4]
 801325e:	6912      	ldr	r2, [r2, #16]
 8013260:	f06f 010e 	mvn.w	r1, #14
 8013264:	4610      	mov	r0, r2
 8013266:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013268:	6879      	ldr	r1, [r7, #4]
 801326a:	480a      	ldr	r0, [pc, #40]	; (8013294 <tcp_input_delayed_close+0x7c>)
 801326c:	f7ff fa4e 	bl	801270c <tcp_pcb_remove>
    tcp_free(pcb);
 8013270:	6878      	ldr	r0, [r7, #4]
 8013272:	f7fd fc7f 	bl	8010b74 <tcp_free>
    return 1;
 8013276:	2301      	movs	r3, #1
 8013278:	e000      	b.n	801327c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801327a:	2300      	movs	r3, #0
}
 801327c:	4618      	mov	r0, r3
 801327e:	3708      	adds	r7, #8
 8013280:	46bd      	mov	sp, r7
 8013282:	bd80      	pop	{r7, pc}
 8013284:	0801c358 	.word	0x0801c358
 8013288:	0801c528 	.word	0x0801c528
 801328c:	0801c3a4 	.word	0x0801c3a4
 8013290:	2401506d 	.word	0x2401506d
 8013294:	24015034 	.word	0x24015034

08013298 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013298:	b590      	push	{r4, r7, lr}
 801329a:	b08b      	sub	sp, #44	; 0x2c
 801329c:	af04      	add	r7, sp, #16
 801329e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80132a0:	4b6f      	ldr	r3, [pc, #444]	; (8013460 <tcp_listen_input+0x1c8>)
 80132a2:	781b      	ldrb	r3, [r3, #0]
 80132a4:	f003 0304 	and.w	r3, r3, #4
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	f040 80d2 	bne.w	8013452 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d106      	bne.n	80132c2 <tcp_listen_input+0x2a>
 80132b4:	4b6b      	ldr	r3, [pc, #428]	; (8013464 <tcp_listen_input+0x1cc>)
 80132b6:	f240 2281 	movw	r2, #641	; 0x281
 80132ba:	496b      	ldr	r1, [pc, #428]	; (8013468 <tcp_listen_input+0x1d0>)
 80132bc:	486b      	ldr	r0, [pc, #428]	; (801346c <tcp_listen_input+0x1d4>)
 80132be:	f006 fdd3 	bl	8019e68 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80132c2:	4b67      	ldr	r3, [pc, #412]	; (8013460 <tcp_listen_input+0x1c8>)
 80132c4:	781b      	ldrb	r3, [r3, #0]
 80132c6:	f003 0310 	and.w	r3, r3, #16
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d019      	beq.n	8013302 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132ce:	4b68      	ldr	r3, [pc, #416]	; (8013470 <tcp_listen_input+0x1d8>)
 80132d0:	6819      	ldr	r1, [r3, #0]
 80132d2:	4b68      	ldr	r3, [pc, #416]	; (8013474 <tcp_listen_input+0x1dc>)
 80132d4:	881b      	ldrh	r3, [r3, #0]
 80132d6:	461a      	mov	r2, r3
 80132d8:	4b67      	ldr	r3, [pc, #412]	; (8013478 <tcp_listen_input+0x1e0>)
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80132de:	4b67      	ldr	r3, [pc, #412]	; (801347c <tcp_listen_input+0x1e4>)
 80132e0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132e2:	885b      	ldrh	r3, [r3, #2]
 80132e4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80132e6:	4a65      	ldr	r2, [pc, #404]	; (801347c <tcp_listen_input+0x1e4>)
 80132e8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132ea:	8812      	ldrh	r2, [r2, #0]
 80132ec:	b292      	uxth	r2, r2
 80132ee:	9202      	str	r2, [sp, #8]
 80132f0:	9301      	str	r3, [sp, #4]
 80132f2:	4b63      	ldr	r3, [pc, #396]	; (8013480 <tcp_listen_input+0x1e8>)
 80132f4:	9300      	str	r3, [sp, #0]
 80132f6:	4b63      	ldr	r3, [pc, #396]	; (8013484 <tcp_listen_input+0x1ec>)
 80132f8:	4602      	mov	r2, r0
 80132fa:	6878      	ldr	r0, [r7, #4]
 80132fc:	f003 fbdc 	bl	8016ab8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013300:	e0a9      	b.n	8013456 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8013302:	4b57      	ldr	r3, [pc, #348]	; (8013460 <tcp_listen_input+0x1c8>)
 8013304:	781b      	ldrb	r3, [r3, #0]
 8013306:	f003 0302 	and.w	r3, r3, #2
 801330a:	2b00      	cmp	r3, #0
 801330c:	f000 80a3 	beq.w	8013456 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	7d5b      	ldrb	r3, [r3, #21]
 8013314:	4618      	mov	r0, r3
 8013316:	f7ff f84d 	bl	80123b4 <tcp_alloc>
 801331a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d111      	bne.n	8013346 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	699b      	ldr	r3, [r3, #24]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d00a      	beq.n	8013340 <tcp_listen_input+0xa8>
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	699b      	ldr	r3, [r3, #24]
 801332e:	687a      	ldr	r2, [r7, #4]
 8013330:	6910      	ldr	r0, [r2, #16]
 8013332:	f04f 32ff 	mov.w	r2, #4294967295
 8013336:	2100      	movs	r1, #0
 8013338:	4798      	blx	r3
 801333a:	4603      	mov	r3, r0
 801333c:	73bb      	strb	r3, [r7, #14]
      return;
 801333e:	e08b      	b.n	8013458 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013340:	23f0      	movs	r3, #240	; 0xf0
 8013342:	73bb      	strb	r3, [r7, #14]
      return;
 8013344:	e088      	b.n	8013458 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013346:	4b50      	ldr	r3, [pc, #320]	; (8013488 <tcp_listen_input+0x1f0>)
 8013348:	695a      	ldr	r2, [r3, #20]
 801334a:	697b      	ldr	r3, [r7, #20]
 801334c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801334e:	4b4e      	ldr	r3, [pc, #312]	; (8013488 <tcp_listen_input+0x1f0>)
 8013350:	691a      	ldr	r2, [r3, #16]
 8013352:	697b      	ldr	r3, [r7, #20]
 8013354:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	8ada      	ldrh	r2, [r3, #22]
 801335a:	697b      	ldr	r3, [r7, #20]
 801335c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801335e:	4b47      	ldr	r3, [pc, #284]	; (801347c <tcp_listen_input+0x1e4>)
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	881b      	ldrh	r3, [r3, #0]
 8013364:	b29a      	uxth	r2, r3
 8013366:	697b      	ldr	r3, [r7, #20]
 8013368:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801336a:	697b      	ldr	r3, [r7, #20]
 801336c:	2203      	movs	r2, #3
 801336e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013370:	4b41      	ldr	r3, [pc, #260]	; (8013478 <tcp_listen_input+0x1e0>)
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	1c5a      	adds	r2, r3, #1
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801337a:	697b      	ldr	r3, [r7, #20]
 801337c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801337e:	697b      	ldr	r3, [r7, #20]
 8013380:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8013382:	6978      	ldr	r0, [r7, #20]
 8013384:	f7ff fa56 	bl	8012834 <tcp_next_iss>
 8013388:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	693a      	ldr	r2, [r7, #16]
 801338e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8013390:	697b      	ldr	r3, [r7, #20]
 8013392:	693a      	ldr	r2, [r7, #16]
 8013394:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8013396:	697b      	ldr	r3, [r7, #20]
 8013398:	693a      	ldr	r2, [r7, #16]
 801339a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801339c:	697b      	ldr	r3, [r7, #20]
 801339e:	693a      	ldr	r2, [r7, #16]
 80133a0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80133a2:	4b35      	ldr	r3, [pc, #212]	; (8013478 <tcp_listen_input+0x1e0>)
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	1e5a      	subs	r2, r3, #1
 80133a8:	697b      	ldr	r3, [r7, #20]
 80133aa:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	691a      	ldr	r2, [r3, #16]
 80133b0:	697b      	ldr	r3, [r7, #20]
 80133b2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80133b4:	697b      	ldr	r3, [r7, #20]
 80133b6:	687a      	ldr	r2, [r7, #4]
 80133b8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	7a5b      	ldrb	r3, [r3, #9]
 80133be:	f003 030c 	and.w	r3, r3, #12
 80133c2:	b2da      	uxtb	r2, r3
 80133c4:	697b      	ldr	r3, [r7, #20]
 80133c6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	7a1a      	ldrb	r2, [r3, #8]
 80133cc:	697b      	ldr	r3, [r7, #20]
 80133ce:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80133d0:	4b2e      	ldr	r3, [pc, #184]	; (801348c <tcp_listen_input+0x1f4>)
 80133d2:	681a      	ldr	r2, [r3, #0]
 80133d4:	697b      	ldr	r3, [r7, #20]
 80133d6:	60da      	str	r2, [r3, #12]
 80133d8:	4a2c      	ldr	r2, [pc, #176]	; (801348c <tcp_listen_input+0x1f4>)
 80133da:	697b      	ldr	r3, [r7, #20]
 80133dc:	6013      	str	r3, [r2, #0]
 80133de:	f003 fd2d 	bl	8016e3c <tcp_timer_needed>
 80133e2:	4b2b      	ldr	r3, [pc, #172]	; (8013490 <tcp_listen_input+0x1f8>)
 80133e4:	2201      	movs	r2, #1
 80133e6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80133e8:	6978      	ldr	r0, [r7, #20]
 80133ea:	f001 fd8f 	bl	8014f0c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80133ee:	4b23      	ldr	r3, [pc, #140]	; (801347c <tcp_listen_input+0x1e4>)
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	89db      	ldrh	r3, [r3, #14]
 80133f4:	b29a      	uxth	r2, r3
 80133f6:	697b      	ldr	r3, [r7, #20]
 80133f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80133fc:	697b      	ldr	r3, [r7, #20]
 80133fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013402:	697b      	ldr	r3, [r7, #20]
 8013404:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013408:	697b      	ldr	r3, [r7, #20]
 801340a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801340c:	697b      	ldr	r3, [r7, #20]
 801340e:	3304      	adds	r3, #4
 8013410:	4618      	mov	r0, r3
 8013412:	f005 f955 	bl	80186c0 <ip4_route>
 8013416:	4601      	mov	r1, r0
 8013418:	697b      	ldr	r3, [r7, #20]
 801341a:	3304      	adds	r3, #4
 801341c:	461a      	mov	r2, r3
 801341e:	4620      	mov	r0, r4
 8013420:	f7ff fa2e 	bl	8012880 <tcp_eff_send_mss_netif>
 8013424:	4603      	mov	r3, r0
 8013426:	461a      	mov	r2, r3
 8013428:	697b      	ldr	r3, [r7, #20]
 801342a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801342c:	2112      	movs	r1, #18
 801342e:	6978      	ldr	r0, [r7, #20]
 8013430:	f002 fc9e 	bl	8015d70 <tcp_enqueue_flags>
 8013434:	4603      	mov	r3, r0
 8013436:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8013438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d004      	beq.n	801344a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8013440:	2100      	movs	r1, #0
 8013442:	6978      	ldr	r0, [r7, #20]
 8013444:	f7fd fdc2 	bl	8010fcc <tcp_abandon>
      return;
 8013448:	e006      	b.n	8013458 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801344a:	6978      	ldr	r0, [r7, #20]
 801344c:	f002 fd7e 	bl	8015f4c <tcp_output>
  return;
 8013450:	e001      	b.n	8013456 <tcp_listen_input+0x1be>
    return;
 8013452:	bf00      	nop
 8013454:	e000      	b.n	8013458 <tcp_listen_input+0x1c0>
  return;
 8013456:	bf00      	nop
}
 8013458:	371c      	adds	r7, #28
 801345a:	46bd      	mov	sp, r7
 801345c:	bd90      	pop	{r4, r7, pc}
 801345e:	bf00      	nop
 8013460:	2401506c 	.word	0x2401506c
 8013464:	0801c358 	.word	0x0801c358
 8013468:	0801c550 	.word	0x0801c550
 801346c:	0801c3a4 	.word	0x0801c3a4
 8013470:	24015064 	.word	0x24015064
 8013474:	2401506a 	.word	0x2401506a
 8013478:	24015060 	.word	0x24015060
 801347c:	24015050 	.word	0x24015050
 8013480:	2400e578 	.word	0x2400e578
 8013484:	2400e57c 	.word	0x2400e57c
 8013488:	2400e568 	.word	0x2400e568
 801348c:	24015034 	.word	0x24015034
 8013490:	2401503c 	.word	0x2401503c

08013494 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013494:	b580      	push	{r7, lr}
 8013496:	b086      	sub	sp, #24
 8013498:	af04      	add	r7, sp, #16
 801349a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801349c:	4b2f      	ldr	r3, [pc, #188]	; (801355c <tcp_timewait_input+0xc8>)
 801349e:	781b      	ldrb	r3, [r3, #0]
 80134a0:	f003 0304 	and.w	r3, r3, #4
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d153      	bne.n	8013550 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d106      	bne.n	80134bc <tcp_timewait_input+0x28>
 80134ae:	4b2c      	ldr	r3, [pc, #176]	; (8013560 <tcp_timewait_input+0xcc>)
 80134b0:	f240 22ee 	movw	r2, #750	; 0x2ee
 80134b4:	492b      	ldr	r1, [pc, #172]	; (8013564 <tcp_timewait_input+0xd0>)
 80134b6:	482c      	ldr	r0, [pc, #176]	; (8013568 <tcp_timewait_input+0xd4>)
 80134b8:	f006 fcd6 	bl	8019e68 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80134bc:	4b27      	ldr	r3, [pc, #156]	; (801355c <tcp_timewait_input+0xc8>)
 80134be:	781b      	ldrb	r3, [r3, #0]
 80134c0:	f003 0302 	and.w	r3, r3, #2
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d02a      	beq.n	801351e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80134c8:	4b28      	ldr	r3, [pc, #160]	; (801356c <tcp_timewait_input+0xd8>)
 80134ca:	681a      	ldr	r2, [r3, #0]
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134d0:	1ad3      	subs	r3, r2, r3
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	db2d      	blt.n	8013532 <tcp_timewait_input+0x9e>
 80134d6:	4b25      	ldr	r3, [pc, #148]	; (801356c <tcp_timewait_input+0xd8>)
 80134d8:	681a      	ldr	r2, [r3, #0]
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134de:	6879      	ldr	r1, [r7, #4]
 80134e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80134e2:	440b      	add	r3, r1
 80134e4:	1ad3      	subs	r3, r2, r3
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	dc23      	bgt.n	8013532 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80134ea:	4b21      	ldr	r3, [pc, #132]	; (8013570 <tcp_timewait_input+0xdc>)
 80134ec:	6819      	ldr	r1, [r3, #0]
 80134ee:	4b21      	ldr	r3, [pc, #132]	; (8013574 <tcp_timewait_input+0xe0>)
 80134f0:	881b      	ldrh	r3, [r3, #0]
 80134f2:	461a      	mov	r2, r3
 80134f4:	4b1d      	ldr	r3, [pc, #116]	; (801356c <tcp_timewait_input+0xd8>)
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80134fa:	4b1f      	ldr	r3, [pc, #124]	; (8013578 <tcp_timewait_input+0xe4>)
 80134fc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80134fe:	885b      	ldrh	r3, [r3, #2]
 8013500:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013502:	4a1d      	ldr	r2, [pc, #116]	; (8013578 <tcp_timewait_input+0xe4>)
 8013504:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013506:	8812      	ldrh	r2, [r2, #0]
 8013508:	b292      	uxth	r2, r2
 801350a:	9202      	str	r2, [sp, #8]
 801350c:	9301      	str	r3, [sp, #4]
 801350e:	4b1b      	ldr	r3, [pc, #108]	; (801357c <tcp_timewait_input+0xe8>)
 8013510:	9300      	str	r3, [sp, #0]
 8013512:	4b1b      	ldr	r3, [pc, #108]	; (8013580 <tcp_timewait_input+0xec>)
 8013514:	4602      	mov	r2, r0
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	f003 face 	bl	8016ab8 <tcp_rst>
      return;
 801351c:	e01b      	b.n	8013556 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801351e:	4b0f      	ldr	r3, [pc, #60]	; (801355c <tcp_timewait_input+0xc8>)
 8013520:	781b      	ldrb	r3, [r3, #0]
 8013522:	f003 0301 	and.w	r3, r3, #1
 8013526:	2b00      	cmp	r3, #0
 8013528:	d003      	beq.n	8013532 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801352a:	4b16      	ldr	r3, [pc, #88]	; (8013584 <tcp_timewait_input+0xf0>)
 801352c:	681a      	ldr	r2, [r3, #0]
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8013532:	4b10      	ldr	r3, [pc, #64]	; (8013574 <tcp_timewait_input+0xe0>)
 8013534:	881b      	ldrh	r3, [r3, #0]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d00c      	beq.n	8013554 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	8b5b      	ldrh	r3, [r3, #26]
 801353e:	f043 0302 	orr.w	r3, r3, #2
 8013542:	b29a      	uxth	r2, r3
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013548:	6878      	ldr	r0, [r7, #4]
 801354a:	f002 fcff 	bl	8015f4c <tcp_output>
  }
  return;
 801354e:	e001      	b.n	8013554 <tcp_timewait_input+0xc0>
    return;
 8013550:	bf00      	nop
 8013552:	e000      	b.n	8013556 <tcp_timewait_input+0xc2>
  return;
 8013554:	bf00      	nop
}
 8013556:	3708      	adds	r7, #8
 8013558:	46bd      	mov	sp, r7
 801355a:	bd80      	pop	{r7, pc}
 801355c:	2401506c 	.word	0x2401506c
 8013560:	0801c358 	.word	0x0801c358
 8013564:	0801c570 	.word	0x0801c570
 8013568:	0801c3a4 	.word	0x0801c3a4
 801356c:	24015060 	.word	0x24015060
 8013570:	24015064 	.word	0x24015064
 8013574:	2401506a 	.word	0x2401506a
 8013578:	24015050 	.word	0x24015050
 801357c:	2400e578 	.word	0x2400e578
 8013580:	2400e57c 	.word	0x2400e57c
 8013584:	24015028 	.word	0x24015028

08013588 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013588:	b590      	push	{r4, r7, lr}
 801358a:	b08d      	sub	sp, #52	; 0x34
 801358c:	af04      	add	r7, sp, #16
 801358e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013590:	2300      	movs	r3, #0
 8013592:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8013594:	2300      	movs	r3, #0
 8013596:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d106      	bne.n	80135ac <tcp_process+0x24>
 801359e:	4b9d      	ldr	r3, [pc, #628]	; (8013814 <tcp_process+0x28c>)
 80135a0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80135a4:	499c      	ldr	r1, [pc, #624]	; (8013818 <tcp_process+0x290>)
 80135a6:	489d      	ldr	r0, [pc, #628]	; (801381c <tcp_process+0x294>)
 80135a8:	f006 fc5e 	bl	8019e68 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80135ac:	4b9c      	ldr	r3, [pc, #624]	; (8013820 <tcp_process+0x298>)
 80135ae:	781b      	ldrb	r3, [r3, #0]
 80135b0:	f003 0304 	and.w	r3, r3, #4
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d04e      	beq.n	8013656 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	7d1b      	ldrb	r3, [r3, #20]
 80135bc:	2b02      	cmp	r3, #2
 80135be:	d108      	bne.n	80135d2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80135c4:	4b97      	ldr	r3, [pc, #604]	; (8013824 <tcp_process+0x29c>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	429a      	cmp	r2, r3
 80135ca:	d123      	bne.n	8013614 <tcp_process+0x8c>
        acceptable = 1;
 80135cc:	2301      	movs	r3, #1
 80135ce:	76fb      	strb	r3, [r7, #27]
 80135d0:	e020      	b.n	8013614 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80135d6:	4b94      	ldr	r3, [pc, #592]	; (8013828 <tcp_process+0x2a0>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	429a      	cmp	r2, r3
 80135dc:	d102      	bne.n	80135e4 <tcp_process+0x5c>
        acceptable = 1;
 80135de:	2301      	movs	r3, #1
 80135e0:	76fb      	strb	r3, [r7, #27]
 80135e2:	e017      	b.n	8013614 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80135e4:	4b90      	ldr	r3, [pc, #576]	; (8013828 <tcp_process+0x2a0>)
 80135e6:	681a      	ldr	r2, [r3, #0]
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135ec:	1ad3      	subs	r3, r2, r3
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	db10      	blt.n	8013614 <tcp_process+0x8c>
 80135f2:	4b8d      	ldr	r3, [pc, #564]	; (8013828 <tcp_process+0x2a0>)
 80135f4:	681a      	ldr	r2, [r3, #0]
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135fa:	6879      	ldr	r1, [r7, #4]
 80135fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80135fe:	440b      	add	r3, r1
 8013600:	1ad3      	subs	r3, r2, r3
 8013602:	2b00      	cmp	r3, #0
 8013604:	dc06      	bgt.n	8013614 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	8b5b      	ldrh	r3, [r3, #26]
 801360a:	f043 0302 	orr.w	r3, r3, #2
 801360e:	b29a      	uxth	r2, r3
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013614:	7efb      	ldrb	r3, [r7, #27]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d01b      	beq.n	8013652 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	7d1b      	ldrb	r3, [r3, #20]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d106      	bne.n	8013630 <tcp_process+0xa8>
 8013622:	4b7c      	ldr	r3, [pc, #496]	; (8013814 <tcp_process+0x28c>)
 8013624:	f44f 724e 	mov.w	r2, #824	; 0x338
 8013628:	4980      	ldr	r1, [pc, #512]	; (801382c <tcp_process+0x2a4>)
 801362a:	487c      	ldr	r0, [pc, #496]	; (801381c <tcp_process+0x294>)
 801362c:	f006 fc1c 	bl	8019e68 <iprintf>
      recv_flags |= TF_RESET;
 8013630:	4b7f      	ldr	r3, [pc, #508]	; (8013830 <tcp_process+0x2a8>)
 8013632:	781b      	ldrb	r3, [r3, #0]
 8013634:	f043 0308 	orr.w	r3, r3, #8
 8013638:	b2da      	uxtb	r2, r3
 801363a:	4b7d      	ldr	r3, [pc, #500]	; (8013830 <tcp_process+0x2a8>)
 801363c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	8b5b      	ldrh	r3, [r3, #26]
 8013642:	f023 0301 	bic.w	r3, r3, #1
 8013646:	b29a      	uxth	r2, r3
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801364c:	f06f 030d 	mvn.w	r3, #13
 8013650:	e37a      	b.n	8013d48 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8013652:	2300      	movs	r3, #0
 8013654:	e378      	b.n	8013d48 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8013656:	4b72      	ldr	r3, [pc, #456]	; (8013820 <tcp_process+0x298>)
 8013658:	781b      	ldrb	r3, [r3, #0]
 801365a:	f003 0302 	and.w	r3, r3, #2
 801365e:	2b00      	cmp	r3, #0
 8013660:	d010      	beq.n	8013684 <tcp_process+0xfc>
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	7d1b      	ldrb	r3, [r3, #20]
 8013666:	2b02      	cmp	r3, #2
 8013668:	d00c      	beq.n	8013684 <tcp_process+0xfc>
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	7d1b      	ldrb	r3, [r3, #20]
 801366e:	2b03      	cmp	r3, #3
 8013670:	d008      	beq.n	8013684 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	8b5b      	ldrh	r3, [r3, #26]
 8013676:	f043 0302 	orr.w	r3, r3, #2
 801367a:	b29a      	uxth	r2, r3
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8013680:	2300      	movs	r3, #0
 8013682:	e361      	b.n	8013d48 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	8b5b      	ldrh	r3, [r3, #26]
 8013688:	f003 0310 	and.w	r3, r3, #16
 801368c:	2b00      	cmp	r3, #0
 801368e:	d103      	bne.n	8013698 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013690:	4b68      	ldr	r3, [pc, #416]	; (8013834 <tcp_process+0x2ac>)
 8013692:	681a      	ldr	r2, [r3, #0]
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	2200      	movs	r2, #0
 801369c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	2200      	movs	r2, #0
 80136a4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80136a8:	6878      	ldr	r0, [r7, #4]
 80136aa:	f001 fc2f 	bl	8014f0c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	7d1b      	ldrb	r3, [r3, #20]
 80136b2:	3b02      	subs	r3, #2
 80136b4:	2b07      	cmp	r3, #7
 80136b6:	f200 8337 	bhi.w	8013d28 <tcp_process+0x7a0>
 80136ba:	a201      	add	r2, pc, #4	; (adr r2, 80136c0 <tcp_process+0x138>)
 80136bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136c0:	080136e1 	.word	0x080136e1
 80136c4:	08013911 	.word	0x08013911
 80136c8:	08013a89 	.word	0x08013a89
 80136cc:	08013ab3 	.word	0x08013ab3
 80136d0:	08013bd7 	.word	0x08013bd7
 80136d4:	08013a89 	.word	0x08013a89
 80136d8:	08013c63 	.word	0x08013c63
 80136dc:	08013cf3 	.word	0x08013cf3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80136e0:	4b4f      	ldr	r3, [pc, #316]	; (8013820 <tcp_process+0x298>)
 80136e2:	781b      	ldrb	r3, [r3, #0]
 80136e4:	f003 0310 	and.w	r3, r3, #16
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	f000 80e4 	beq.w	80138b6 <tcp_process+0x32e>
 80136ee:	4b4c      	ldr	r3, [pc, #304]	; (8013820 <tcp_process+0x298>)
 80136f0:	781b      	ldrb	r3, [r3, #0]
 80136f2:	f003 0302 	and.w	r3, r3, #2
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	f000 80dd 	beq.w	80138b6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013700:	1c5a      	adds	r2, r3, #1
 8013702:	4b48      	ldr	r3, [pc, #288]	; (8013824 <tcp_process+0x29c>)
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	429a      	cmp	r2, r3
 8013708:	f040 80d5 	bne.w	80138b6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801370c:	4b46      	ldr	r3, [pc, #280]	; (8013828 <tcp_process+0x2a0>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	1c5a      	adds	r2, r3, #1
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801371e:	4b41      	ldr	r3, [pc, #260]	; (8013824 <tcp_process+0x29c>)
 8013720:	681a      	ldr	r2, [r3, #0]
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8013726:	4b44      	ldr	r3, [pc, #272]	; (8013838 <tcp_process+0x2b0>)
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	89db      	ldrh	r3, [r3, #14]
 801372c:	b29a      	uxth	r2, r3
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013740:	4b39      	ldr	r3, [pc, #228]	; (8013828 <tcp_process+0x2a0>)
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	1e5a      	subs	r2, r3, #1
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	2204      	movs	r2, #4
 801374e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	3304      	adds	r3, #4
 8013758:	4618      	mov	r0, r3
 801375a:	f004 ffb1 	bl	80186c0 <ip4_route>
 801375e:	4601      	mov	r1, r0
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	3304      	adds	r3, #4
 8013764:	461a      	mov	r2, r3
 8013766:	4620      	mov	r0, r4
 8013768:	f7ff f88a 	bl	8012880 <tcp_eff_send_mss_netif>
 801376c:	4603      	mov	r3, r0
 801376e:	461a      	mov	r2, r3
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013778:	009a      	lsls	r2, r3, #2
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801377e:	005b      	lsls	r3, r3, #1
 8013780:	f241 111c 	movw	r1, #4380	; 0x111c
 8013784:	428b      	cmp	r3, r1
 8013786:	bf38      	it	cc
 8013788:	460b      	movcc	r3, r1
 801378a:	429a      	cmp	r2, r3
 801378c:	d204      	bcs.n	8013798 <tcp_process+0x210>
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013792:	009b      	lsls	r3, r3, #2
 8013794:	b29b      	uxth	r3, r3
 8013796:	e00d      	b.n	80137b4 <tcp_process+0x22c>
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801379c:	005b      	lsls	r3, r3, #1
 801379e:	f241 121c 	movw	r2, #4380	; 0x111c
 80137a2:	4293      	cmp	r3, r2
 80137a4:	d904      	bls.n	80137b0 <tcp_process+0x228>
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137aa:	005b      	lsls	r3, r3, #1
 80137ac:	b29b      	uxth	r3, r3
 80137ae:	e001      	b.n	80137b4 <tcp_process+0x22c>
 80137b0:	f241 131c 	movw	r3, #4380	; 0x111c
 80137b4:	687a      	ldr	r2, [r7, #4]
 80137b6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d106      	bne.n	80137d2 <tcp_process+0x24a>
 80137c4:	4b13      	ldr	r3, [pc, #76]	; (8013814 <tcp_process+0x28c>)
 80137c6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80137ca:	491c      	ldr	r1, [pc, #112]	; (801383c <tcp_process+0x2b4>)
 80137cc:	4813      	ldr	r0, [pc, #76]	; (801381c <tcp_process+0x294>)
 80137ce:	f006 fb4b 	bl	8019e68 <iprintf>
        --pcb->snd_queuelen;
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80137d8:	3b01      	subs	r3, #1
 80137da:	b29a      	uxth	r2, r3
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137e6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80137e8:	69fb      	ldr	r3, [r7, #28]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d12a      	bne.n	8013844 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137f2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80137f4:	69fb      	ldr	r3, [r7, #28]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d106      	bne.n	8013808 <tcp_process+0x280>
 80137fa:	4b06      	ldr	r3, [pc, #24]	; (8013814 <tcp_process+0x28c>)
 80137fc:	f44f 725d 	mov.w	r2, #884	; 0x374
 8013800:	490f      	ldr	r1, [pc, #60]	; (8013840 <tcp_process+0x2b8>)
 8013802:	4806      	ldr	r0, [pc, #24]	; (801381c <tcp_process+0x294>)
 8013804:	f006 fb30 	bl	8019e68 <iprintf>
          pcb->unsent = rseg->next;
 8013808:	69fb      	ldr	r3, [r7, #28]
 801380a:	681a      	ldr	r2, [r3, #0]
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	66da      	str	r2, [r3, #108]	; 0x6c
 8013810:	e01c      	b.n	801384c <tcp_process+0x2c4>
 8013812:	bf00      	nop
 8013814:	0801c358 	.word	0x0801c358
 8013818:	0801c590 	.word	0x0801c590
 801381c:	0801c3a4 	.word	0x0801c3a4
 8013820:	2401506c 	.word	0x2401506c
 8013824:	24015064 	.word	0x24015064
 8013828:	24015060 	.word	0x24015060
 801382c:	0801c5ac 	.word	0x0801c5ac
 8013830:	2401506d 	.word	0x2401506d
 8013834:	24015028 	.word	0x24015028
 8013838:	24015050 	.word	0x24015050
 801383c:	0801c5cc 	.word	0x0801c5cc
 8013840:	0801c5e4 	.word	0x0801c5e4
        } else {
          pcb->unacked = rseg->next;
 8013844:	69fb      	ldr	r3, [r7, #28]
 8013846:	681a      	ldr	r2, [r3, #0]
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801384c:	69f8      	ldr	r0, [r7, #28]
 801384e:	f7fe fc48 	bl	80120e2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013856:	2b00      	cmp	r3, #0
 8013858:	d104      	bne.n	8013864 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013860:	861a      	strh	r2, [r3, #48]	; 0x30
 8013862:	e006      	b.n	8013872 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	2200      	movs	r2, #0
 8013868:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	2200      	movs	r2, #0
 801386e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013878:	2b00      	cmp	r3, #0
 801387a:	d00a      	beq.n	8013892 <tcp_process+0x30a>
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013882:	687a      	ldr	r2, [r7, #4]
 8013884:	6910      	ldr	r0, [r2, #16]
 8013886:	2200      	movs	r2, #0
 8013888:	6879      	ldr	r1, [r7, #4]
 801388a:	4798      	blx	r3
 801388c:	4603      	mov	r3, r0
 801388e:	76bb      	strb	r3, [r7, #26]
 8013890:	e001      	b.n	8013896 <tcp_process+0x30e>
 8013892:	2300      	movs	r3, #0
 8013894:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8013896:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801389a:	f113 0f0d 	cmn.w	r3, #13
 801389e:	d102      	bne.n	80138a6 <tcp_process+0x31e>
          return ERR_ABRT;
 80138a0:	f06f 030c 	mvn.w	r3, #12
 80138a4:	e250      	b.n	8013d48 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	8b5b      	ldrh	r3, [r3, #26]
 80138aa:	f043 0302 	orr.w	r3, r3, #2
 80138ae:	b29a      	uxth	r2, r3
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80138b4:	e23a      	b.n	8013d2c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80138b6:	4b98      	ldr	r3, [pc, #608]	; (8013b18 <tcp_process+0x590>)
 80138b8:	781b      	ldrb	r3, [r3, #0]
 80138ba:	f003 0310 	and.w	r3, r3, #16
 80138be:	2b00      	cmp	r3, #0
 80138c0:	f000 8234 	beq.w	8013d2c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138c4:	4b95      	ldr	r3, [pc, #596]	; (8013b1c <tcp_process+0x594>)
 80138c6:	6819      	ldr	r1, [r3, #0]
 80138c8:	4b95      	ldr	r3, [pc, #596]	; (8013b20 <tcp_process+0x598>)
 80138ca:	881b      	ldrh	r3, [r3, #0]
 80138cc:	461a      	mov	r2, r3
 80138ce:	4b95      	ldr	r3, [pc, #596]	; (8013b24 <tcp_process+0x59c>)
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80138d4:	4b94      	ldr	r3, [pc, #592]	; (8013b28 <tcp_process+0x5a0>)
 80138d6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138d8:	885b      	ldrh	r3, [r3, #2]
 80138da:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80138dc:	4a92      	ldr	r2, [pc, #584]	; (8013b28 <tcp_process+0x5a0>)
 80138de:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138e0:	8812      	ldrh	r2, [r2, #0]
 80138e2:	b292      	uxth	r2, r2
 80138e4:	9202      	str	r2, [sp, #8]
 80138e6:	9301      	str	r3, [sp, #4]
 80138e8:	4b90      	ldr	r3, [pc, #576]	; (8013b2c <tcp_process+0x5a4>)
 80138ea:	9300      	str	r3, [sp, #0]
 80138ec:	4b90      	ldr	r3, [pc, #576]	; (8013b30 <tcp_process+0x5a8>)
 80138ee:	4602      	mov	r2, r0
 80138f0:	6878      	ldr	r0, [r7, #4]
 80138f2:	f003 f8e1 	bl	8016ab8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80138fc:	2b05      	cmp	r3, #5
 80138fe:	f200 8215 	bhi.w	8013d2c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	2200      	movs	r2, #0
 8013906:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013908:	6878      	ldr	r0, [r7, #4]
 801390a:	f002 fead 	bl	8016668 <tcp_rexmit_rto>
      break;
 801390e:	e20d      	b.n	8013d2c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013910:	4b81      	ldr	r3, [pc, #516]	; (8013b18 <tcp_process+0x590>)
 8013912:	781b      	ldrb	r3, [r3, #0]
 8013914:	f003 0310 	and.w	r3, r3, #16
 8013918:	2b00      	cmp	r3, #0
 801391a:	f000 80a1 	beq.w	8013a60 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801391e:	4b7f      	ldr	r3, [pc, #508]	; (8013b1c <tcp_process+0x594>)
 8013920:	681a      	ldr	r2, [r3, #0]
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013926:	1ad3      	subs	r3, r2, r3
 8013928:	3b01      	subs	r3, #1
 801392a:	2b00      	cmp	r3, #0
 801392c:	db7e      	blt.n	8013a2c <tcp_process+0x4a4>
 801392e:	4b7b      	ldr	r3, [pc, #492]	; (8013b1c <tcp_process+0x594>)
 8013930:	681a      	ldr	r2, [r3, #0]
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013936:	1ad3      	subs	r3, r2, r3
 8013938:	2b00      	cmp	r3, #0
 801393a:	dc77      	bgt.n	8013a2c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	2204      	movs	r2, #4
 8013940:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013946:	2b00      	cmp	r3, #0
 8013948:	d102      	bne.n	8013950 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801394a:	23fa      	movs	r3, #250	; 0xfa
 801394c:	76bb      	strb	r3, [r7, #26]
 801394e:	e01d      	b.n	801398c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013954:	699b      	ldr	r3, [r3, #24]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d106      	bne.n	8013968 <tcp_process+0x3e0>
 801395a:	4b76      	ldr	r3, [pc, #472]	; (8013b34 <tcp_process+0x5ac>)
 801395c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8013960:	4975      	ldr	r1, [pc, #468]	; (8013b38 <tcp_process+0x5b0>)
 8013962:	4876      	ldr	r0, [pc, #472]	; (8013b3c <tcp_process+0x5b4>)
 8013964:	f006 fa80 	bl	8019e68 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801396c:	699b      	ldr	r3, [r3, #24]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d00a      	beq.n	8013988 <tcp_process+0x400>
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013976:	699b      	ldr	r3, [r3, #24]
 8013978:	687a      	ldr	r2, [r7, #4]
 801397a:	6910      	ldr	r0, [r2, #16]
 801397c:	2200      	movs	r2, #0
 801397e:	6879      	ldr	r1, [r7, #4]
 8013980:	4798      	blx	r3
 8013982:	4603      	mov	r3, r0
 8013984:	76bb      	strb	r3, [r7, #26]
 8013986:	e001      	b.n	801398c <tcp_process+0x404>
 8013988:	23f0      	movs	r3, #240	; 0xf0
 801398a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801398c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d00a      	beq.n	80139aa <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8013994:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013998:	f113 0f0d 	cmn.w	r3, #13
 801399c:	d002      	beq.n	80139a4 <tcp_process+0x41c>
              tcp_abort(pcb);
 801399e:	6878      	ldr	r0, [r7, #4]
 80139a0:	f7fd fbd4 	bl	801114c <tcp_abort>
            }
            return ERR_ABRT;
 80139a4:	f06f 030c 	mvn.w	r3, #12
 80139a8:	e1ce      	b.n	8013d48 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80139aa:	6878      	ldr	r0, [r7, #4]
 80139ac:	f000 fae0 	bl	8013f70 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80139b0:	4b63      	ldr	r3, [pc, #396]	; (8013b40 <tcp_process+0x5b8>)
 80139b2:	881b      	ldrh	r3, [r3, #0]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d005      	beq.n	80139c4 <tcp_process+0x43c>
            recv_acked--;
 80139b8:	4b61      	ldr	r3, [pc, #388]	; (8013b40 <tcp_process+0x5b8>)
 80139ba:	881b      	ldrh	r3, [r3, #0]
 80139bc:	3b01      	subs	r3, #1
 80139be:	b29a      	uxth	r2, r3
 80139c0:	4b5f      	ldr	r3, [pc, #380]	; (8013b40 <tcp_process+0x5b8>)
 80139c2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139c8:	009a      	lsls	r2, r3, #2
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139ce:	005b      	lsls	r3, r3, #1
 80139d0:	f241 111c 	movw	r1, #4380	; 0x111c
 80139d4:	428b      	cmp	r3, r1
 80139d6:	bf38      	it	cc
 80139d8:	460b      	movcc	r3, r1
 80139da:	429a      	cmp	r2, r3
 80139dc:	d204      	bcs.n	80139e8 <tcp_process+0x460>
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139e2:	009b      	lsls	r3, r3, #2
 80139e4:	b29b      	uxth	r3, r3
 80139e6:	e00d      	b.n	8013a04 <tcp_process+0x47c>
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139ec:	005b      	lsls	r3, r3, #1
 80139ee:	f241 121c 	movw	r2, #4380	; 0x111c
 80139f2:	4293      	cmp	r3, r2
 80139f4:	d904      	bls.n	8013a00 <tcp_process+0x478>
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139fa:	005b      	lsls	r3, r3, #1
 80139fc:	b29b      	uxth	r3, r3
 80139fe:	e001      	b.n	8013a04 <tcp_process+0x47c>
 8013a00:	f241 131c 	movw	r3, #4380	; 0x111c
 8013a04:	687a      	ldr	r2, [r7, #4]
 8013a06:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013a0a:	4b4e      	ldr	r3, [pc, #312]	; (8013b44 <tcp_process+0x5bc>)
 8013a0c:	781b      	ldrb	r3, [r3, #0]
 8013a0e:	f003 0320 	and.w	r3, r3, #32
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d037      	beq.n	8013a86 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	8b5b      	ldrh	r3, [r3, #26]
 8013a1a:	f043 0302 	orr.w	r3, r3, #2
 8013a1e:	b29a      	uxth	r2, r3
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	2207      	movs	r2, #7
 8013a28:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013a2a:	e02c      	b.n	8013a86 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a2c:	4b3b      	ldr	r3, [pc, #236]	; (8013b1c <tcp_process+0x594>)
 8013a2e:	6819      	ldr	r1, [r3, #0]
 8013a30:	4b3b      	ldr	r3, [pc, #236]	; (8013b20 <tcp_process+0x598>)
 8013a32:	881b      	ldrh	r3, [r3, #0]
 8013a34:	461a      	mov	r2, r3
 8013a36:	4b3b      	ldr	r3, [pc, #236]	; (8013b24 <tcp_process+0x59c>)
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013a3c:	4b3a      	ldr	r3, [pc, #232]	; (8013b28 <tcp_process+0x5a0>)
 8013a3e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a40:	885b      	ldrh	r3, [r3, #2]
 8013a42:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013a44:	4a38      	ldr	r2, [pc, #224]	; (8013b28 <tcp_process+0x5a0>)
 8013a46:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a48:	8812      	ldrh	r2, [r2, #0]
 8013a4a:	b292      	uxth	r2, r2
 8013a4c:	9202      	str	r2, [sp, #8]
 8013a4e:	9301      	str	r3, [sp, #4]
 8013a50:	4b36      	ldr	r3, [pc, #216]	; (8013b2c <tcp_process+0x5a4>)
 8013a52:	9300      	str	r3, [sp, #0]
 8013a54:	4b36      	ldr	r3, [pc, #216]	; (8013b30 <tcp_process+0x5a8>)
 8013a56:	4602      	mov	r2, r0
 8013a58:	6878      	ldr	r0, [r7, #4]
 8013a5a:	f003 f82d 	bl	8016ab8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8013a5e:	e167      	b.n	8013d30 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013a60:	4b2d      	ldr	r3, [pc, #180]	; (8013b18 <tcp_process+0x590>)
 8013a62:	781b      	ldrb	r3, [r3, #0]
 8013a64:	f003 0302 	and.w	r3, r3, #2
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	f000 8161 	beq.w	8013d30 <tcp_process+0x7a8>
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a72:	1e5a      	subs	r2, r3, #1
 8013a74:	4b2b      	ldr	r3, [pc, #172]	; (8013b24 <tcp_process+0x59c>)
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	429a      	cmp	r2, r3
 8013a7a:	f040 8159 	bne.w	8013d30 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013a7e:	6878      	ldr	r0, [r7, #4]
 8013a80:	f002 fe14 	bl	80166ac <tcp_rexmit>
      break;
 8013a84:	e154      	b.n	8013d30 <tcp_process+0x7a8>
 8013a86:	e153      	b.n	8013d30 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013a88:	6878      	ldr	r0, [r7, #4]
 8013a8a:	f000 fa71 	bl	8013f70 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013a8e:	4b2d      	ldr	r3, [pc, #180]	; (8013b44 <tcp_process+0x5bc>)
 8013a90:	781b      	ldrb	r3, [r3, #0]
 8013a92:	f003 0320 	and.w	r3, r3, #32
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	f000 814c 	beq.w	8013d34 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	8b5b      	ldrh	r3, [r3, #26]
 8013aa0:	f043 0302 	orr.w	r3, r3, #2
 8013aa4:	b29a      	uxth	r2, r3
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	2207      	movs	r2, #7
 8013aae:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013ab0:	e140      	b.n	8013d34 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013ab2:	6878      	ldr	r0, [r7, #4]
 8013ab4:	f000 fa5c 	bl	8013f70 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013ab8:	4b22      	ldr	r3, [pc, #136]	; (8013b44 <tcp_process+0x5bc>)
 8013aba:	781b      	ldrb	r3, [r3, #0]
 8013abc:	f003 0320 	and.w	r3, r3, #32
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d071      	beq.n	8013ba8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013ac4:	4b14      	ldr	r3, [pc, #80]	; (8013b18 <tcp_process+0x590>)
 8013ac6:	781b      	ldrb	r3, [r3, #0]
 8013ac8:	f003 0310 	and.w	r3, r3, #16
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d060      	beq.n	8013b92 <tcp_process+0x60a>
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013ad4:	4b11      	ldr	r3, [pc, #68]	; (8013b1c <tcp_process+0x594>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	429a      	cmp	r2, r3
 8013ada:	d15a      	bne.n	8013b92 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d156      	bne.n	8013b92 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	8b5b      	ldrh	r3, [r3, #26]
 8013ae8:	f043 0302 	orr.w	r3, r3, #2
 8013aec:	b29a      	uxth	r2, r3
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013af2:	6878      	ldr	r0, [r7, #4]
 8013af4:	f7fe fdba 	bl	801266c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013af8:	4b13      	ldr	r3, [pc, #76]	; (8013b48 <tcp_process+0x5c0>)
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	687a      	ldr	r2, [r7, #4]
 8013afe:	429a      	cmp	r2, r3
 8013b00:	d105      	bne.n	8013b0e <tcp_process+0x586>
 8013b02:	4b11      	ldr	r3, [pc, #68]	; (8013b48 <tcp_process+0x5c0>)
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	68db      	ldr	r3, [r3, #12]
 8013b08:	4a0f      	ldr	r2, [pc, #60]	; (8013b48 <tcp_process+0x5c0>)
 8013b0a:	6013      	str	r3, [r2, #0]
 8013b0c:	e02e      	b.n	8013b6c <tcp_process+0x5e4>
 8013b0e:	4b0e      	ldr	r3, [pc, #56]	; (8013b48 <tcp_process+0x5c0>)
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	617b      	str	r3, [r7, #20]
 8013b14:	e027      	b.n	8013b66 <tcp_process+0x5de>
 8013b16:	bf00      	nop
 8013b18:	2401506c 	.word	0x2401506c
 8013b1c:	24015064 	.word	0x24015064
 8013b20:	2401506a 	.word	0x2401506a
 8013b24:	24015060 	.word	0x24015060
 8013b28:	24015050 	.word	0x24015050
 8013b2c:	2400e578 	.word	0x2400e578
 8013b30:	2400e57c 	.word	0x2400e57c
 8013b34:	0801c358 	.word	0x0801c358
 8013b38:	0801c5f8 	.word	0x0801c5f8
 8013b3c:	0801c3a4 	.word	0x0801c3a4
 8013b40:	24015068 	.word	0x24015068
 8013b44:	2401506d 	.word	0x2401506d
 8013b48:	24015034 	.word	0x24015034
 8013b4c:	697b      	ldr	r3, [r7, #20]
 8013b4e:	68db      	ldr	r3, [r3, #12]
 8013b50:	687a      	ldr	r2, [r7, #4]
 8013b52:	429a      	cmp	r2, r3
 8013b54:	d104      	bne.n	8013b60 <tcp_process+0x5d8>
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	68da      	ldr	r2, [r3, #12]
 8013b5a:	697b      	ldr	r3, [r7, #20]
 8013b5c:	60da      	str	r2, [r3, #12]
 8013b5e:	e005      	b.n	8013b6c <tcp_process+0x5e4>
 8013b60:	697b      	ldr	r3, [r7, #20]
 8013b62:	68db      	ldr	r3, [r3, #12]
 8013b64:	617b      	str	r3, [r7, #20]
 8013b66:	697b      	ldr	r3, [r7, #20]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d1ef      	bne.n	8013b4c <tcp_process+0x5c4>
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	2200      	movs	r2, #0
 8013b70:	60da      	str	r2, [r3, #12]
 8013b72:	4b77      	ldr	r3, [pc, #476]	; (8013d50 <tcp_process+0x7c8>)
 8013b74:	2201      	movs	r2, #1
 8013b76:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	220a      	movs	r2, #10
 8013b7c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013b7e:	4b75      	ldr	r3, [pc, #468]	; (8013d54 <tcp_process+0x7cc>)
 8013b80:	681a      	ldr	r2, [r3, #0]
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	60da      	str	r2, [r3, #12]
 8013b86:	4a73      	ldr	r2, [pc, #460]	; (8013d54 <tcp_process+0x7cc>)
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	6013      	str	r3, [r2, #0]
 8013b8c:	f003 f956 	bl	8016e3c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013b90:	e0d2      	b.n	8013d38 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	8b5b      	ldrh	r3, [r3, #26]
 8013b96:	f043 0302 	orr.w	r3, r3, #2
 8013b9a:	b29a      	uxth	r2, r3
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	2208      	movs	r2, #8
 8013ba4:	751a      	strb	r2, [r3, #20]
      break;
 8013ba6:	e0c7      	b.n	8013d38 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013ba8:	4b6b      	ldr	r3, [pc, #428]	; (8013d58 <tcp_process+0x7d0>)
 8013baa:	781b      	ldrb	r3, [r3, #0]
 8013bac:	f003 0310 	and.w	r3, r3, #16
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	f000 80c1 	beq.w	8013d38 <tcp_process+0x7b0>
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013bba:	4b68      	ldr	r3, [pc, #416]	; (8013d5c <tcp_process+0x7d4>)
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	f040 80ba 	bne.w	8013d38 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	f040 80b5 	bne.w	8013d38 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	2206      	movs	r2, #6
 8013bd2:	751a      	strb	r2, [r3, #20]
      break;
 8013bd4:	e0b0      	b.n	8013d38 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013bd6:	6878      	ldr	r0, [r7, #4]
 8013bd8:	f000 f9ca 	bl	8013f70 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013bdc:	4b60      	ldr	r3, [pc, #384]	; (8013d60 <tcp_process+0x7d8>)
 8013bde:	781b      	ldrb	r3, [r3, #0]
 8013be0:	f003 0320 	and.w	r3, r3, #32
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	f000 80a9 	beq.w	8013d3c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	8b5b      	ldrh	r3, [r3, #26]
 8013bee:	f043 0302 	orr.w	r3, r3, #2
 8013bf2:	b29a      	uxth	r2, r3
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013bf8:	6878      	ldr	r0, [r7, #4]
 8013bfa:	f7fe fd37 	bl	801266c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013bfe:	4b59      	ldr	r3, [pc, #356]	; (8013d64 <tcp_process+0x7dc>)
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	687a      	ldr	r2, [r7, #4]
 8013c04:	429a      	cmp	r2, r3
 8013c06:	d105      	bne.n	8013c14 <tcp_process+0x68c>
 8013c08:	4b56      	ldr	r3, [pc, #344]	; (8013d64 <tcp_process+0x7dc>)
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	68db      	ldr	r3, [r3, #12]
 8013c0e:	4a55      	ldr	r2, [pc, #340]	; (8013d64 <tcp_process+0x7dc>)
 8013c10:	6013      	str	r3, [r2, #0]
 8013c12:	e013      	b.n	8013c3c <tcp_process+0x6b4>
 8013c14:	4b53      	ldr	r3, [pc, #332]	; (8013d64 <tcp_process+0x7dc>)
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	613b      	str	r3, [r7, #16]
 8013c1a:	e00c      	b.n	8013c36 <tcp_process+0x6ae>
 8013c1c:	693b      	ldr	r3, [r7, #16]
 8013c1e:	68db      	ldr	r3, [r3, #12]
 8013c20:	687a      	ldr	r2, [r7, #4]
 8013c22:	429a      	cmp	r2, r3
 8013c24:	d104      	bne.n	8013c30 <tcp_process+0x6a8>
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	68da      	ldr	r2, [r3, #12]
 8013c2a:	693b      	ldr	r3, [r7, #16]
 8013c2c:	60da      	str	r2, [r3, #12]
 8013c2e:	e005      	b.n	8013c3c <tcp_process+0x6b4>
 8013c30:	693b      	ldr	r3, [r7, #16]
 8013c32:	68db      	ldr	r3, [r3, #12]
 8013c34:	613b      	str	r3, [r7, #16]
 8013c36:	693b      	ldr	r3, [r7, #16]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d1ef      	bne.n	8013c1c <tcp_process+0x694>
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	2200      	movs	r2, #0
 8013c40:	60da      	str	r2, [r3, #12]
 8013c42:	4b43      	ldr	r3, [pc, #268]	; (8013d50 <tcp_process+0x7c8>)
 8013c44:	2201      	movs	r2, #1
 8013c46:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	220a      	movs	r2, #10
 8013c4c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013c4e:	4b41      	ldr	r3, [pc, #260]	; (8013d54 <tcp_process+0x7cc>)
 8013c50:	681a      	ldr	r2, [r3, #0]
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	60da      	str	r2, [r3, #12]
 8013c56:	4a3f      	ldr	r2, [pc, #252]	; (8013d54 <tcp_process+0x7cc>)
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	6013      	str	r3, [r2, #0]
 8013c5c:	f003 f8ee 	bl	8016e3c <tcp_timer_needed>
      }
      break;
 8013c60:	e06c      	b.n	8013d3c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013c62:	6878      	ldr	r0, [r7, #4]
 8013c64:	f000 f984 	bl	8013f70 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013c68:	4b3b      	ldr	r3, [pc, #236]	; (8013d58 <tcp_process+0x7d0>)
 8013c6a:	781b      	ldrb	r3, [r3, #0]
 8013c6c:	f003 0310 	and.w	r3, r3, #16
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d065      	beq.n	8013d40 <tcp_process+0x7b8>
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013c78:	4b38      	ldr	r3, [pc, #224]	; (8013d5c <tcp_process+0x7d4>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	429a      	cmp	r2, r3
 8013c7e:	d15f      	bne.n	8013d40 <tcp_process+0x7b8>
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d15b      	bne.n	8013d40 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013c88:	6878      	ldr	r0, [r7, #4]
 8013c8a:	f7fe fcef 	bl	801266c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013c8e:	4b35      	ldr	r3, [pc, #212]	; (8013d64 <tcp_process+0x7dc>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	687a      	ldr	r2, [r7, #4]
 8013c94:	429a      	cmp	r2, r3
 8013c96:	d105      	bne.n	8013ca4 <tcp_process+0x71c>
 8013c98:	4b32      	ldr	r3, [pc, #200]	; (8013d64 <tcp_process+0x7dc>)
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	68db      	ldr	r3, [r3, #12]
 8013c9e:	4a31      	ldr	r2, [pc, #196]	; (8013d64 <tcp_process+0x7dc>)
 8013ca0:	6013      	str	r3, [r2, #0]
 8013ca2:	e013      	b.n	8013ccc <tcp_process+0x744>
 8013ca4:	4b2f      	ldr	r3, [pc, #188]	; (8013d64 <tcp_process+0x7dc>)
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	60fb      	str	r3, [r7, #12]
 8013caa:	e00c      	b.n	8013cc6 <tcp_process+0x73e>
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	68db      	ldr	r3, [r3, #12]
 8013cb0:	687a      	ldr	r2, [r7, #4]
 8013cb2:	429a      	cmp	r2, r3
 8013cb4:	d104      	bne.n	8013cc0 <tcp_process+0x738>
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	68da      	ldr	r2, [r3, #12]
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	60da      	str	r2, [r3, #12]
 8013cbe:	e005      	b.n	8013ccc <tcp_process+0x744>
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	68db      	ldr	r3, [r3, #12]
 8013cc4:	60fb      	str	r3, [r7, #12]
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d1ef      	bne.n	8013cac <tcp_process+0x724>
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	2200      	movs	r2, #0
 8013cd0:	60da      	str	r2, [r3, #12]
 8013cd2:	4b1f      	ldr	r3, [pc, #124]	; (8013d50 <tcp_process+0x7c8>)
 8013cd4:	2201      	movs	r2, #1
 8013cd6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	220a      	movs	r2, #10
 8013cdc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013cde:	4b1d      	ldr	r3, [pc, #116]	; (8013d54 <tcp_process+0x7cc>)
 8013ce0:	681a      	ldr	r2, [r3, #0]
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	60da      	str	r2, [r3, #12]
 8013ce6:	4a1b      	ldr	r2, [pc, #108]	; (8013d54 <tcp_process+0x7cc>)
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	6013      	str	r3, [r2, #0]
 8013cec:	f003 f8a6 	bl	8016e3c <tcp_timer_needed>
      }
      break;
 8013cf0:	e026      	b.n	8013d40 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013cf2:	6878      	ldr	r0, [r7, #4]
 8013cf4:	f000 f93c 	bl	8013f70 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013cf8:	4b17      	ldr	r3, [pc, #92]	; (8013d58 <tcp_process+0x7d0>)
 8013cfa:	781b      	ldrb	r3, [r3, #0]
 8013cfc:	f003 0310 	and.w	r3, r3, #16
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d01f      	beq.n	8013d44 <tcp_process+0x7bc>
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013d08:	4b14      	ldr	r3, [pc, #80]	; (8013d5c <tcp_process+0x7d4>)
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	429a      	cmp	r2, r3
 8013d0e:	d119      	bne.n	8013d44 <tcp_process+0x7bc>
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d115      	bne.n	8013d44 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013d18:	4b11      	ldr	r3, [pc, #68]	; (8013d60 <tcp_process+0x7d8>)
 8013d1a:	781b      	ldrb	r3, [r3, #0]
 8013d1c:	f043 0310 	orr.w	r3, r3, #16
 8013d20:	b2da      	uxtb	r2, r3
 8013d22:	4b0f      	ldr	r3, [pc, #60]	; (8013d60 <tcp_process+0x7d8>)
 8013d24:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013d26:	e00d      	b.n	8013d44 <tcp_process+0x7bc>
    default:
      break;
 8013d28:	bf00      	nop
 8013d2a:	e00c      	b.n	8013d46 <tcp_process+0x7be>
      break;
 8013d2c:	bf00      	nop
 8013d2e:	e00a      	b.n	8013d46 <tcp_process+0x7be>
      break;
 8013d30:	bf00      	nop
 8013d32:	e008      	b.n	8013d46 <tcp_process+0x7be>
      break;
 8013d34:	bf00      	nop
 8013d36:	e006      	b.n	8013d46 <tcp_process+0x7be>
      break;
 8013d38:	bf00      	nop
 8013d3a:	e004      	b.n	8013d46 <tcp_process+0x7be>
      break;
 8013d3c:	bf00      	nop
 8013d3e:	e002      	b.n	8013d46 <tcp_process+0x7be>
      break;
 8013d40:	bf00      	nop
 8013d42:	e000      	b.n	8013d46 <tcp_process+0x7be>
      break;
 8013d44:	bf00      	nop
  }
  return ERR_OK;
 8013d46:	2300      	movs	r3, #0
}
 8013d48:	4618      	mov	r0, r3
 8013d4a:	3724      	adds	r7, #36	; 0x24
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	bd90      	pop	{r4, r7, pc}
 8013d50:	2401503c 	.word	0x2401503c
 8013d54:	24015038 	.word	0x24015038
 8013d58:	2401506c 	.word	0x2401506c
 8013d5c:	24015064 	.word	0x24015064
 8013d60:	2401506d 	.word	0x2401506d
 8013d64:	24015034 	.word	0x24015034

08013d68 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013d68:	b590      	push	{r4, r7, lr}
 8013d6a:	b085      	sub	sp, #20
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
 8013d70:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d106      	bne.n	8013d86 <tcp_oos_insert_segment+0x1e>
 8013d78:	4b3b      	ldr	r3, [pc, #236]	; (8013e68 <tcp_oos_insert_segment+0x100>)
 8013d7a:	f240 421f 	movw	r2, #1055	; 0x41f
 8013d7e:	493b      	ldr	r1, [pc, #236]	; (8013e6c <tcp_oos_insert_segment+0x104>)
 8013d80:	483b      	ldr	r0, [pc, #236]	; (8013e70 <tcp_oos_insert_segment+0x108>)
 8013d82:	f006 f871 	bl	8019e68 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	68db      	ldr	r3, [r3, #12]
 8013d8a:	899b      	ldrh	r3, [r3, #12]
 8013d8c:	b29b      	uxth	r3, r3
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f7fa fec2 	bl	800eb18 <lwip_htons>
 8013d94:	4603      	mov	r3, r0
 8013d96:	b2db      	uxtb	r3, r3
 8013d98:	f003 0301 	and.w	r3, r3, #1
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d028      	beq.n	8013df2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013da0:	6838      	ldr	r0, [r7, #0]
 8013da2:	f7fe f989 	bl	80120b8 <tcp_segs_free>
    next = NULL;
 8013da6:	2300      	movs	r3, #0
 8013da8:	603b      	str	r3, [r7, #0]
 8013daa:	e056      	b.n	8013e5a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013dac:	683b      	ldr	r3, [r7, #0]
 8013dae:	68db      	ldr	r3, [r3, #12]
 8013db0:	899b      	ldrh	r3, [r3, #12]
 8013db2:	b29b      	uxth	r3, r3
 8013db4:	4618      	mov	r0, r3
 8013db6:	f7fa feaf 	bl	800eb18 <lwip_htons>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	b2db      	uxtb	r3, r3
 8013dbe:	f003 0301 	and.w	r3, r3, #1
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d00d      	beq.n	8013de2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	68db      	ldr	r3, [r3, #12]
 8013dca:	899b      	ldrh	r3, [r3, #12]
 8013dcc:	b29c      	uxth	r4, r3
 8013dce:	2001      	movs	r0, #1
 8013dd0:	f7fa fea2 	bl	800eb18 <lwip_htons>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	461a      	mov	r2, r3
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	68db      	ldr	r3, [r3, #12]
 8013ddc:	4322      	orrs	r2, r4
 8013dde:	b292      	uxth	r2, r2
 8013de0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013de2:	683b      	ldr	r3, [r7, #0]
 8013de4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013de6:	683b      	ldr	r3, [r7, #0]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013dec:	68f8      	ldr	r0, [r7, #12]
 8013dee:	f7fe f978 	bl	80120e2 <tcp_seg_free>
    while (next &&
 8013df2:	683b      	ldr	r3, [r7, #0]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d00e      	beq.n	8013e16 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	891b      	ldrh	r3, [r3, #8]
 8013dfc:	461a      	mov	r2, r3
 8013dfe:	4b1d      	ldr	r3, [pc, #116]	; (8013e74 <tcp_oos_insert_segment+0x10c>)
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	441a      	add	r2, r3
 8013e04:	683b      	ldr	r3, [r7, #0]
 8013e06:	68db      	ldr	r3, [r3, #12]
 8013e08:	685b      	ldr	r3, [r3, #4]
 8013e0a:	6839      	ldr	r1, [r7, #0]
 8013e0c:	8909      	ldrh	r1, [r1, #8]
 8013e0e:	440b      	add	r3, r1
 8013e10:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	daca      	bge.n	8013dac <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013e16:	683b      	ldr	r3, [r7, #0]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d01e      	beq.n	8013e5a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	891b      	ldrh	r3, [r3, #8]
 8013e20:	461a      	mov	r2, r3
 8013e22:	4b14      	ldr	r3, [pc, #80]	; (8013e74 <tcp_oos_insert_segment+0x10c>)
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	441a      	add	r2, r3
 8013e28:	683b      	ldr	r3, [r7, #0]
 8013e2a:	68db      	ldr	r3, [r3, #12]
 8013e2c:	685b      	ldr	r3, [r3, #4]
 8013e2e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	dd12      	ble.n	8013e5a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013e34:	683b      	ldr	r3, [r7, #0]
 8013e36:	68db      	ldr	r3, [r3, #12]
 8013e38:	685b      	ldr	r3, [r3, #4]
 8013e3a:	b29a      	uxth	r2, r3
 8013e3c:	4b0d      	ldr	r3, [pc, #52]	; (8013e74 <tcp_oos_insert_segment+0x10c>)
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	b29b      	uxth	r3, r3
 8013e42:	1ad3      	subs	r3, r2, r3
 8013e44:	b29a      	uxth	r2, r3
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	685a      	ldr	r2, [r3, #4]
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	891b      	ldrh	r3, [r3, #8]
 8013e52:	4619      	mov	r1, r3
 8013e54:	4610      	mov	r0, r2
 8013e56:	f7fc f9a3 	bl	80101a0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	683a      	ldr	r2, [r7, #0]
 8013e5e:	601a      	str	r2, [r3, #0]
}
 8013e60:	bf00      	nop
 8013e62:	3714      	adds	r7, #20
 8013e64:	46bd      	mov	sp, r7
 8013e66:	bd90      	pop	{r4, r7, pc}
 8013e68:	0801c358 	.word	0x0801c358
 8013e6c:	0801c618 	.word	0x0801c618
 8013e70:	0801c3a4 	.word	0x0801c3a4
 8013e74:	24015060 	.word	0x24015060

08013e78 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013e78:	b5b0      	push	{r4, r5, r7, lr}
 8013e7a:	b086      	sub	sp, #24
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	60f8      	str	r0, [r7, #12]
 8013e80:	60b9      	str	r1, [r7, #8]
 8013e82:	607a      	str	r2, [r7, #4]
 8013e84:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013e86:	e03e      	b.n	8013f06 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013e88:	68bb      	ldr	r3, [r7, #8]
 8013e8a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013e8c:	68bb      	ldr	r3, [r7, #8]
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013e92:	697b      	ldr	r3, [r7, #20]
 8013e94:	685b      	ldr	r3, [r3, #4]
 8013e96:	4618      	mov	r0, r3
 8013e98:	f7fc fb96 	bl	80105c8 <pbuf_clen>
 8013e9c:	4603      	mov	r3, r0
 8013e9e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ea6:	8a7a      	ldrh	r2, [r7, #18]
 8013ea8:	429a      	cmp	r2, r3
 8013eaa:	d906      	bls.n	8013eba <tcp_free_acked_segments+0x42>
 8013eac:	4b2a      	ldr	r3, [pc, #168]	; (8013f58 <tcp_free_acked_segments+0xe0>)
 8013eae:	f240 4257 	movw	r2, #1111	; 0x457
 8013eb2:	492a      	ldr	r1, [pc, #168]	; (8013f5c <tcp_free_acked_segments+0xe4>)
 8013eb4:	482a      	ldr	r0, [pc, #168]	; (8013f60 <tcp_free_acked_segments+0xe8>)
 8013eb6:	f005 ffd7 	bl	8019e68 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013ec0:	8a7b      	ldrh	r3, [r7, #18]
 8013ec2:	1ad3      	subs	r3, r2, r3
 8013ec4:	b29a      	uxth	r2, r3
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013ecc:	697b      	ldr	r3, [r7, #20]
 8013ece:	891a      	ldrh	r2, [r3, #8]
 8013ed0:	4b24      	ldr	r3, [pc, #144]	; (8013f64 <tcp_free_acked_segments+0xec>)
 8013ed2:	881b      	ldrh	r3, [r3, #0]
 8013ed4:	4413      	add	r3, r2
 8013ed6:	b29a      	uxth	r2, r3
 8013ed8:	4b22      	ldr	r3, [pc, #136]	; (8013f64 <tcp_free_acked_segments+0xec>)
 8013eda:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013edc:	6978      	ldr	r0, [r7, #20]
 8013ede:	f7fe f900 	bl	80120e2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d00c      	beq.n	8013f06 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013eec:	68bb      	ldr	r3, [r7, #8]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d109      	bne.n	8013f06 <tcp_free_acked_segments+0x8e>
 8013ef2:	683b      	ldr	r3, [r7, #0]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d106      	bne.n	8013f06 <tcp_free_acked_segments+0x8e>
 8013ef8:	4b17      	ldr	r3, [pc, #92]	; (8013f58 <tcp_free_acked_segments+0xe0>)
 8013efa:	f240 4261 	movw	r2, #1121	; 0x461
 8013efe:	491a      	ldr	r1, [pc, #104]	; (8013f68 <tcp_free_acked_segments+0xf0>)
 8013f00:	4817      	ldr	r0, [pc, #92]	; (8013f60 <tcp_free_acked_segments+0xe8>)
 8013f02:	f005 ffb1 	bl	8019e68 <iprintf>
  while (seg_list != NULL &&
 8013f06:	68bb      	ldr	r3, [r7, #8]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d020      	beq.n	8013f4e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013f0c:	68bb      	ldr	r3, [r7, #8]
 8013f0e:	68db      	ldr	r3, [r3, #12]
 8013f10:	685b      	ldr	r3, [r3, #4]
 8013f12:	4618      	mov	r0, r3
 8013f14:	f7fa fe15 	bl	800eb42 <lwip_htonl>
 8013f18:	4604      	mov	r4, r0
 8013f1a:	68bb      	ldr	r3, [r7, #8]
 8013f1c:	891b      	ldrh	r3, [r3, #8]
 8013f1e:	461d      	mov	r5, r3
 8013f20:	68bb      	ldr	r3, [r7, #8]
 8013f22:	68db      	ldr	r3, [r3, #12]
 8013f24:	899b      	ldrh	r3, [r3, #12]
 8013f26:	b29b      	uxth	r3, r3
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7fa fdf5 	bl	800eb18 <lwip_htons>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	b2db      	uxtb	r3, r3
 8013f32:	f003 0303 	and.w	r3, r3, #3
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d001      	beq.n	8013f3e <tcp_free_acked_segments+0xc6>
 8013f3a:	2301      	movs	r3, #1
 8013f3c:	e000      	b.n	8013f40 <tcp_free_acked_segments+0xc8>
 8013f3e:	2300      	movs	r3, #0
 8013f40:	442b      	add	r3, r5
 8013f42:	18e2      	adds	r2, r4, r3
 8013f44:	4b09      	ldr	r3, [pc, #36]	; (8013f6c <tcp_free_acked_segments+0xf4>)
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	dd9c      	ble.n	8013e88 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013f4e:	68bb      	ldr	r3, [r7, #8]
}
 8013f50:	4618      	mov	r0, r3
 8013f52:	3718      	adds	r7, #24
 8013f54:	46bd      	mov	sp, r7
 8013f56:	bdb0      	pop	{r4, r5, r7, pc}
 8013f58:	0801c358 	.word	0x0801c358
 8013f5c:	0801c640 	.word	0x0801c640
 8013f60:	0801c3a4 	.word	0x0801c3a4
 8013f64:	24015068 	.word	0x24015068
 8013f68:	0801c668 	.word	0x0801c668
 8013f6c:	24015064 	.word	0x24015064

08013f70 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013f70:	b5b0      	push	{r4, r5, r7, lr}
 8013f72:	b094      	sub	sp, #80	; 0x50
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013f78:	2300      	movs	r3, #0
 8013f7a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d106      	bne.n	8013f90 <tcp_receive+0x20>
 8013f82:	4b91      	ldr	r3, [pc, #580]	; (80141c8 <tcp_receive+0x258>)
 8013f84:	f240 427b 	movw	r2, #1147	; 0x47b
 8013f88:	4990      	ldr	r1, [pc, #576]	; (80141cc <tcp_receive+0x25c>)
 8013f8a:	4891      	ldr	r0, [pc, #580]	; (80141d0 <tcp_receive+0x260>)
 8013f8c:	f005 ff6c 	bl	8019e68 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	7d1b      	ldrb	r3, [r3, #20]
 8013f94:	2b03      	cmp	r3, #3
 8013f96:	d806      	bhi.n	8013fa6 <tcp_receive+0x36>
 8013f98:	4b8b      	ldr	r3, [pc, #556]	; (80141c8 <tcp_receive+0x258>)
 8013f9a:	f240 427c 	movw	r2, #1148	; 0x47c
 8013f9e:	498d      	ldr	r1, [pc, #564]	; (80141d4 <tcp_receive+0x264>)
 8013fa0:	488b      	ldr	r0, [pc, #556]	; (80141d0 <tcp_receive+0x260>)
 8013fa2:	f005 ff61 	bl	8019e68 <iprintf>

  if (flags & TCP_ACK) {
 8013fa6:	4b8c      	ldr	r3, [pc, #560]	; (80141d8 <tcp_receive+0x268>)
 8013fa8:	781b      	ldrb	r3, [r3, #0]
 8013faa:	f003 0310 	and.w	r3, r3, #16
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	f000 8264 	beq.w	801447c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013fba:	461a      	mov	r2, r3
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013fc0:	4413      	add	r3, r2
 8013fc2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013fc8:	4b84      	ldr	r3, [pc, #528]	; (80141dc <tcp_receive+0x26c>)
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	1ad3      	subs	r3, r2, r3
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	db1b      	blt.n	801400a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013fd6:	4b81      	ldr	r3, [pc, #516]	; (80141dc <tcp_receive+0x26c>)
 8013fd8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013fda:	429a      	cmp	r2, r3
 8013fdc:	d106      	bne.n	8013fec <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013fe2:	4b7f      	ldr	r3, [pc, #508]	; (80141e0 <tcp_receive+0x270>)
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	1ad3      	subs	r3, r2, r3
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	db0e      	blt.n	801400a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013ff0:	4b7b      	ldr	r3, [pc, #492]	; (80141e0 <tcp_receive+0x270>)
 8013ff2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013ff4:	429a      	cmp	r2, r3
 8013ff6:	d125      	bne.n	8014044 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013ff8:	4b7a      	ldr	r3, [pc, #488]	; (80141e4 <tcp_receive+0x274>)
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	89db      	ldrh	r3, [r3, #14]
 8013ffe:	b29a      	uxth	r2, r3
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014006:	429a      	cmp	r2, r3
 8014008:	d91c      	bls.n	8014044 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801400a:	4b76      	ldr	r3, [pc, #472]	; (80141e4 <tcp_receive+0x274>)
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	89db      	ldrh	r3, [r3, #14]
 8014010:	b29a      	uxth	r2, r3
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014024:	429a      	cmp	r2, r3
 8014026:	d205      	bcs.n	8014034 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014034:	4b69      	ldr	r3, [pc, #420]	; (80141dc <tcp_receive+0x26c>)
 8014036:	681a      	ldr	r2, [r3, #0]
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801403c:	4b68      	ldr	r3, [pc, #416]	; (80141e0 <tcp_receive+0x270>)
 801403e:	681a      	ldr	r2, [r3, #0]
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014044:	4b66      	ldr	r3, [pc, #408]	; (80141e0 <tcp_receive+0x270>)
 8014046:	681a      	ldr	r2, [r3, #0]
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801404c:	1ad3      	subs	r3, r2, r3
 801404e:	2b00      	cmp	r3, #0
 8014050:	dc58      	bgt.n	8014104 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014052:	4b65      	ldr	r3, [pc, #404]	; (80141e8 <tcp_receive+0x278>)
 8014054:	881b      	ldrh	r3, [r3, #0]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d14b      	bne.n	80140f2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801405e:	687a      	ldr	r2, [r7, #4]
 8014060:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014064:	4413      	add	r3, r2
 8014066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014068:	429a      	cmp	r2, r3
 801406a:	d142      	bne.n	80140f2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014072:	2b00      	cmp	r3, #0
 8014074:	db3d      	blt.n	80140f2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801407a:	4b59      	ldr	r3, [pc, #356]	; (80141e0 <tcp_receive+0x270>)
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	429a      	cmp	r2, r3
 8014080:	d137      	bne.n	80140f2 <tcp_receive+0x182>
              found_dupack = 1;
 8014082:	2301      	movs	r3, #1
 8014084:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801408c:	2bff      	cmp	r3, #255	; 0xff
 801408e:	d007      	beq.n	80140a0 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014096:	3301      	adds	r3, #1
 8014098:	b2da      	uxtb	r2, r3
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80140a6:	2b03      	cmp	r3, #3
 80140a8:	d91b      	bls.n	80140e2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80140b4:	4413      	add	r3, r2
 80140b6:	b29a      	uxth	r2, r3
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80140be:	429a      	cmp	r2, r3
 80140c0:	d30a      	bcc.n	80140d8 <tcp_receive+0x168>
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80140cc:	4413      	add	r3, r2
 80140ce:	b29a      	uxth	r2, r3
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80140d6:	e004      	b.n	80140e2 <tcp_receive+0x172>
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80140de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80140e8:	2b02      	cmp	r3, #2
 80140ea:	d902      	bls.n	80140f2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80140ec:	6878      	ldr	r0, [r7, #4]
 80140ee:	f002 fb49 	bl	8016784 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80140f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	f040 8161 	bne.w	80143bc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	2200      	movs	r2, #0
 80140fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014102:	e15b      	b.n	80143bc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014104:	4b36      	ldr	r3, [pc, #216]	; (80141e0 <tcp_receive+0x270>)
 8014106:	681a      	ldr	r2, [r3, #0]
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801410c:	1ad3      	subs	r3, r2, r3
 801410e:	3b01      	subs	r3, #1
 8014110:	2b00      	cmp	r3, #0
 8014112:	f2c0 814e 	blt.w	80143b2 <tcp_receive+0x442>
 8014116:	4b32      	ldr	r3, [pc, #200]	; (80141e0 <tcp_receive+0x270>)
 8014118:	681a      	ldr	r2, [r3, #0]
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801411e:	1ad3      	subs	r3, r2, r3
 8014120:	2b00      	cmp	r3, #0
 8014122:	f300 8146 	bgt.w	80143b2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	8b5b      	ldrh	r3, [r3, #26]
 801412a:	f003 0304 	and.w	r3, r3, #4
 801412e:	2b00      	cmp	r3, #0
 8014130:	d010      	beq.n	8014154 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	8b5b      	ldrh	r3, [r3, #26]
 8014136:	f023 0304 	bic.w	r3, r3, #4
 801413a:	b29a      	uxth	r2, r3
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	2200      	movs	r2, #0
 8014150:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	2200      	movs	r2, #0
 8014158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014162:	10db      	asrs	r3, r3, #3
 8014164:	b21b      	sxth	r3, r3
 8014166:	b29a      	uxth	r2, r3
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801416e:	b29b      	uxth	r3, r3
 8014170:	4413      	add	r3, r2
 8014172:	b29b      	uxth	r3, r3
 8014174:	b21a      	sxth	r2, r3
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801417c:	4b18      	ldr	r3, [pc, #96]	; (80141e0 <tcp_receive+0x270>)
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	b29a      	uxth	r2, r3
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014186:	b29b      	uxth	r3, r3
 8014188:	1ad3      	subs	r3, r2, r3
 801418a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	2200      	movs	r2, #0
 8014190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014194:	4b12      	ldr	r3, [pc, #72]	; (80141e0 <tcp_receive+0x270>)
 8014196:	681a      	ldr	r2, [r3, #0]
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	7d1b      	ldrb	r3, [r3, #20]
 80141a0:	2b03      	cmp	r3, #3
 80141a2:	f240 8097 	bls.w	80142d4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80141b2:	429a      	cmp	r2, r3
 80141b4:	d245      	bcs.n	8014242 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	8b5b      	ldrh	r3, [r3, #26]
 80141ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d014      	beq.n	80141ec <tcp_receive+0x27c>
 80141c2:	2301      	movs	r3, #1
 80141c4:	e013      	b.n	80141ee <tcp_receive+0x27e>
 80141c6:	bf00      	nop
 80141c8:	0801c358 	.word	0x0801c358
 80141cc:	0801c688 	.word	0x0801c688
 80141d0:	0801c3a4 	.word	0x0801c3a4
 80141d4:	0801c6a4 	.word	0x0801c6a4
 80141d8:	2401506c 	.word	0x2401506c
 80141dc:	24015060 	.word	0x24015060
 80141e0:	24015064 	.word	0x24015064
 80141e4:	24015050 	.word	0x24015050
 80141e8:	2401506a 	.word	0x2401506a
 80141ec:	2302      	movs	r3, #2
 80141ee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80141f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80141f6:	b29a      	uxth	r2, r3
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80141fc:	fb12 f303 	smulbb	r3, r2, r3
 8014200:	b29b      	uxth	r3, r3
 8014202:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014204:	4293      	cmp	r3, r2
 8014206:	bf28      	it	cs
 8014208:	4613      	movcs	r3, r2
 801420a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014212:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014214:	4413      	add	r3, r2
 8014216:	b29a      	uxth	r2, r3
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801421e:	429a      	cmp	r2, r3
 8014220:	d309      	bcc.n	8014236 <tcp_receive+0x2c6>
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014228:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801422a:	4413      	add	r3, r2
 801422c:	b29a      	uxth	r2, r3
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014234:	e04e      	b.n	80142d4 <tcp_receive+0x364>
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801423c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014240:	e048      	b.n	80142d4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014248:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801424a:	4413      	add	r3, r2
 801424c:	b29a      	uxth	r2, r3
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014254:	429a      	cmp	r2, r3
 8014256:	d309      	bcc.n	801426c <tcp_receive+0x2fc>
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801425e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014260:	4413      	add	r3, r2
 8014262:	b29a      	uxth	r2, r3
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801426a:	e004      	b.n	8014276 <tcp_receive+0x306>
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014272:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014282:	429a      	cmp	r2, r3
 8014284:	d326      	bcc.n	80142d4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014292:	1ad3      	subs	r3, r2, r3
 8014294:	b29a      	uxth	r2, r3
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80142a6:	4413      	add	r3, r2
 80142a8:	b29a      	uxth	r2, r3
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80142b0:	429a      	cmp	r2, r3
 80142b2:	d30a      	bcc.n	80142ca <tcp_receive+0x35a>
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80142be:	4413      	add	r3, r2
 80142c0:	b29a      	uxth	r2, r3
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80142c8:	e004      	b.n	80142d4 <tcp_receive+0x364>
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80142d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142dc:	4a98      	ldr	r2, [pc, #608]	; (8014540 <tcp_receive+0x5d0>)
 80142de:	6878      	ldr	r0, [r7, #4]
 80142e0:	f7ff fdca 	bl	8013e78 <tcp_free_acked_segments>
 80142e4:	4602      	mov	r2, r0
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142f2:	4a94      	ldr	r2, [pc, #592]	; (8014544 <tcp_receive+0x5d4>)
 80142f4:	6878      	ldr	r0, [r7, #4]
 80142f6:	f7ff fdbf 	bl	8013e78 <tcp_free_acked_segments>
 80142fa:	4602      	mov	r2, r0
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014304:	2b00      	cmp	r3, #0
 8014306:	d104      	bne.n	8014312 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801430e:	861a      	strh	r2, [r3, #48]	; 0x30
 8014310:	e002      	b.n	8014318 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	2200      	movs	r2, #0
 8014316:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	2200      	movs	r2, #0
 801431c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014322:	2b00      	cmp	r3, #0
 8014324:	d103      	bne.n	801432e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	2200      	movs	r2, #0
 801432a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014334:	4b84      	ldr	r3, [pc, #528]	; (8014548 <tcp_receive+0x5d8>)
 8014336:	881b      	ldrh	r3, [r3, #0]
 8014338:	4413      	add	r3, r2
 801433a:	b29a      	uxth	r2, r3
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	8b5b      	ldrh	r3, [r3, #26]
 8014346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801434a:	2b00      	cmp	r3, #0
 801434c:	d035      	beq.n	80143ba <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014352:	2b00      	cmp	r3, #0
 8014354:	d118      	bne.n	8014388 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801435a:	2b00      	cmp	r3, #0
 801435c:	d00c      	beq.n	8014378 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014366:	68db      	ldr	r3, [r3, #12]
 8014368:	685b      	ldr	r3, [r3, #4]
 801436a:	4618      	mov	r0, r3
 801436c:	f7fa fbe9 	bl	800eb42 <lwip_htonl>
 8014370:	4603      	mov	r3, r0
 8014372:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014374:	2b00      	cmp	r3, #0
 8014376:	dc20      	bgt.n	80143ba <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	8b5b      	ldrh	r3, [r3, #26]
 801437c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014380:	b29a      	uxth	r2, r3
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014386:	e018      	b.n	80143ba <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014390:	68db      	ldr	r3, [r3, #12]
 8014392:	685b      	ldr	r3, [r3, #4]
 8014394:	4618      	mov	r0, r3
 8014396:	f7fa fbd4 	bl	800eb42 <lwip_htonl>
 801439a:	4603      	mov	r3, r0
 801439c:	1ae3      	subs	r3, r4, r3
 801439e:	2b00      	cmp	r3, #0
 80143a0:	dc0b      	bgt.n	80143ba <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	8b5b      	ldrh	r3, [r3, #26]
 80143a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80143aa:	b29a      	uxth	r2, r3
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80143b0:	e003      	b.n	80143ba <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80143b2:	6878      	ldr	r0, [r7, #4]
 80143b4:	f002 fbd2 	bl	8016b5c <tcp_send_empty_ack>
 80143b8:	e000      	b.n	80143bc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80143ba:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d05b      	beq.n	801447c <tcp_receive+0x50c>
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80143c8:	4b60      	ldr	r3, [pc, #384]	; (801454c <tcp_receive+0x5dc>)
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	1ad3      	subs	r3, r2, r3
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	da54      	bge.n	801447c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80143d2:	4b5f      	ldr	r3, [pc, #380]	; (8014550 <tcp_receive+0x5e0>)
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	b29a      	uxth	r2, r3
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143dc:	b29b      	uxth	r3, r3
 80143de:	1ad3      	subs	r3, r2, r3
 80143e0:	b29b      	uxth	r3, r3
 80143e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80143e6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80143f0:	10db      	asrs	r3, r3, #3
 80143f2:	b21b      	sxth	r3, r3
 80143f4:	b29b      	uxth	r3, r3
 80143f6:	1ad3      	subs	r3, r2, r3
 80143f8:	b29b      	uxth	r3, r3
 80143fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014404:	b29a      	uxth	r2, r3
 8014406:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801440a:	4413      	add	r3, r2
 801440c:	b29b      	uxth	r3, r3
 801440e:	b21a      	sxth	r2, r3
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8014414:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014418:	2b00      	cmp	r3, #0
 801441a:	da05      	bge.n	8014428 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801441c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014420:	425b      	negs	r3, r3
 8014422:	b29b      	uxth	r3, r3
 8014424:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8014428:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014432:	109b      	asrs	r3, r3, #2
 8014434:	b21b      	sxth	r3, r3
 8014436:	b29b      	uxth	r3, r3
 8014438:	1ad3      	subs	r3, r2, r3
 801443a:	b29b      	uxth	r3, r3
 801443c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014446:	b29a      	uxth	r2, r3
 8014448:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801444c:	4413      	add	r3, r2
 801444e:	b29b      	uxth	r3, r3
 8014450:	b21a      	sxth	r2, r3
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801445c:	10db      	asrs	r3, r3, #3
 801445e:	b21b      	sxth	r3, r3
 8014460:	b29a      	uxth	r2, r3
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014468:	b29b      	uxth	r3, r3
 801446a:	4413      	add	r3, r2
 801446c:	b29b      	uxth	r3, r3
 801446e:	b21a      	sxth	r2, r3
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	2200      	movs	r2, #0
 801447a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801447c:	4b35      	ldr	r3, [pc, #212]	; (8014554 <tcp_receive+0x5e4>)
 801447e:	881b      	ldrh	r3, [r3, #0]
 8014480:	2b00      	cmp	r3, #0
 8014482:	f000 84e2 	beq.w	8014e4a <tcp_receive+0xeda>
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	7d1b      	ldrb	r3, [r3, #20]
 801448a:	2b06      	cmp	r3, #6
 801448c:	f200 84dd 	bhi.w	8014e4a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014494:	4b30      	ldr	r3, [pc, #192]	; (8014558 <tcp_receive+0x5e8>)
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	1ad3      	subs	r3, r2, r3
 801449a:	3b01      	subs	r3, #1
 801449c:	2b00      	cmp	r3, #0
 801449e:	f2c0 808f 	blt.w	80145c0 <tcp_receive+0x650>
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80144a6:	4b2b      	ldr	r3, [pc, #172]	; (8014554 <tcp_receive+0x5e4>)
 80144a8:	881b      	ldrh	r3, [r3, #0]
 80144aa:	4619      	mov	r1, r3
 80144ac:	4b2a      	ldr	r3, [pc, #168]	; (8014558 <tcp_receive+0x5e8>)
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	440b      	add	r3, r1
 80144b2:	1ad3      	subs	r3, r2, r3
 80144b4:	3301      	adds	r3, #1
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	f300 8082 	bgt.w	80145c0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80144bc:	4b27      	ldr	r3, [pc, #156]	; (801455c <tcp_receive+0x5ec>)
 80144be:	685b      	ldr	r3, [r3, #4]
 80144c0:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80144c6:	4b24      	ldr	r3, [pc, #144]	; (8014558 <tcp_receive+0x5e8>)
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	1ad3      	subs	r3, r2, r3
 80144cc:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80144ce:	4b23      	ldr	r3, [pc, #140]	; (801455c <tcp_receive+0x5ec>)
 80144d0:	685b      	ldr	r3, [r3, #4]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d106      	bne.n	80144e4 <tcp_receive+0x574>
 80144d6:	4b22      	ldr	r3, [pc, #136]	; (8014560 <tcp_receive+0x5f0>)
 80144d8:	f240 5294 	movw	r2, #1428	; 0x594
 80144dc:	4921      	ldr	r1, [pc, #132]	; (8014564 <tcp_receive+0x5f4>)
 80144de:	4822      	ldr	r0, [pc, #136]	; (8014568 <tcp_receive+0x5f8>)
 80144e0:	f005 fcc2 	bl	8019e68 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80144e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144e6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80144ea:	4293      	cmp	r3, r2
 80144ec:	d906      	bls.n	80144fc <tcp_receive+0x58c>
 80144ee:	4b1c      	ldr	r3, [pc, #112]	; (8014560 <tcp_receive+0x5f0>)
 80144f0:	f240 5295 	movw	r2, #1429	; 0x595
 80144f4:	491d      	ldr	r1, [pc, #116]	; (801456c <tcp_receive+0x5fc>)
 80144f6:	481c      	ldr	r0, [pc, #112]	; (8014568 <tcp_receive+0x5f8>)
 80144f8:	f005 fcb6 	bl	8019e68 <iprintf>
      off = (u16_t)off32;
 80144fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014502:	4b16      	ldr	r3, [pc, #88]	; (801455c <tcp_receive+0x5ec>)
 8014504:	685b      	ldr	r3, [r3, #4]
 8014506:	891b      	ldrh	r3, [r3, #8]
 8014508:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801450c:	429a      	cmp	r2, r3
 801450e:	d906      	bls.n	801451e <tcp_receive+0x5ae>
 8014510:	4b13      	ldr	r3, [pc, #76]	; (8014560 <tcp_receive+0x5f0>)
 8014512:	f240 5297 	movw	r2, #1431	; 0x597
 8014516:	4916      	ldr	r1, [pc, #88]	; (8014570 <tcp_receive+0x600>)
 8014518:	4813      	ldr	r0, [pc, #76]	; (8014568 <tcp_receive+0x5f8>)
 801451a:	f005 fca5 	bl	8019e68 <iprintf>
      inseg.len -= off;
 801451e:	4b0f      	ldr	r3, [pc, #60]	; (801455c <tcp_receive+0x5ec>)
 8014520:	891a      	ldrh	r2, [r3, #8]
 8014522:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014526:	1ad3      	subs	r3, r2, r3
 8014528:	b29a      	uxth	r2, r3
 801452a:	4b0c      	ldr	r3, [pc, #48]	; (801455c <tcp_receive+0x5ec>)
 801452c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801452e:	4b0b      	ldr	r3, [pc, #44]	; (801455c <tcp_receive+0x5ec>)
 8014530:	685b      	ldr	r3, [r3, #4]
 8014532:	891a      	ldrh	r2, [r3, #8]
 8014534:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014538:	1ad3      	subs	r3, r2, r3
 801453a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801453c:	e02a      	b.n	8014594 <tcp_receive+0x624>
 801453e:	bf00      	nop
 8014540:	0801c6c0 	.word	0x0801c6c0
 8014544:	0801c6c8 	.word	0x0801c6c8
 8014548:	24015068 	.word	0x24015068
 801454c:	24015064 	.word	0x24015064
 8014550:	24015028 	.word	0x24015028
 8014554:	2401506a 	.word	0x2401506a
 8014558:	24015060 	.word	0x24015060
 801455c:	24015040 	.word	0x24015040
 8014560:	0801c358 	.word	0x0801c358
 8014564:	0801c6d0 	.word	0x0801c6d0
 8014568:	0801c3a4 	.word	0x0801c3a4
 801456c:	0801c6e0 	.word	0x0801c6e0
 8014570:	0801c6f0 	.word	0x0801c6f0
        off -= p->len;
 8014574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014576:	895b      	ldrh	r3, [r3, #10]
 8014578:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801457c:	1ad3      	subs	r3, r2, r3
 801457e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8014582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014584:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014586:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8014588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801458a:	2200      	movs	r2, #0
 801458c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801458e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8014594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014596:	895b      	ldrh	r3, [r3, #10]
 8014598:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801459c:	429a      	cmp	r2, r3
 801459e:	d8e9      	bhi.n	8014574 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80145a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80145a4:	4619      	mov	r1, r3
 80145a6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80145a8:	f7fb fefa 	bl	80103a0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145b0:	4a91      	ldr	r2, [pc, #580]	; (80147f8 <tcp_receive+0x888>)
 80145b2:	6013      	str	r3, [r2, #0]
 80145b4:	4b91      	ldr	r3, [pc, #580]	; (80147fc <tcp_receive+0x88c>)
 80145b6:	68db      	ldr	r3, [r3, #12]
 80145b8:	4a8f      	ldr	r2, [pc, #572]	; (80147f8 <tcp_receive+0x888>)
 80145ba:	6812      	ldr	r2, [r2, #0]
 80145bc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80145be:	e00d      	b.n	80145dc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80145c0:	4b8d      	ldr	r3, [pc, #564]	; (80147f8 <tcp_receive+0x888>)
 80145c2:	681a      	ldr	r2, [r3, #0]
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145c8:	1ad3      	subs	r3, r2, r3
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	da06      	bge.n	80145dc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	8b5b      	ldrh	r3, [r3, #26]
 80145d2:	f043 0302 	orr.w	r3, r3, #2
 80145d6:	b29a      	uxth	r2, r3
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80145dc:	4b86      	ldr	r3, [pc, #536]	; (80147f8 <tcp_receive+0x888>)
 80145de:	681a      	ldr	r2, [r3, #0]
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145e4:	1ad3      	subs	r3, r2, r3
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	f2c0 842a 	blt.w	8014e40 <tcp_receive+0xed0>
 80145ec:	4b82      	ldr	r3, [pc, #520]	; (80147f8 <tcp_receive+0x888>)
 80145ee:	681a      	ldr	r2, [r3, #0]
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145f4:	6879      	ldr	r1, [r7, #4]
 80145f6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80145f8:	440b      	add	r3, r1
 80145fa:	1ad3      	subs	r3, r2, r3
 80145fc:	3301      	adds	r3, #1
 80145fe:	2b00      	cmp	r3, #0
 8014600:	f300 841e 	bgt.w	8014e40 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014608:	4b7b      	ldr	r3, [pc, #492]	; (80147f8 <tcp_receive+0x888>)
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	429a      	cmp	r2, r3
 801460e:	f040 829a 	bne.w	8014b46 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8014612:	4b7a      	ldr	r3, [pc, #488]	; (80147fc <tcp_receive+0x88c>)
 8014614:	891c      	ldrh	r4, [r3, #8]
 8014616:	4b79      	ldr	r3, [pc, #484]	; (80147fc <tcp_receive+0x88c>)
 8014618:	68db      	ldr	r3, [r3, #12]
 801461a:	899b      	ldrh	r3, [r3, #12]
 801461c:	b29b      	uxth	r3, r3
 801461e:	4618      	mov	r0, r3
 8014620:	f7fa fa7a 	bl	800eb18 <lwip_htons>
 8014624:	4603      	mov	r3, r0
 8014626:	b2db      	uxtb	r3, r3
 8014628:	f003 0303 	and.w	r3, r3, #3
 801462c:	2b00      	cmp	r3, #0
 801462e:	d001      	beq.n	8014634 <tcp_receive+0x6c4>
 8014630:	2301      	movs	r3, #1
 8014632:	e000      	b.n	8014636 <tcp_receive+0x6c6>
 8014634:	2300      	movs	r3, #0
 8014636:	4423      	add	r3, r4
 8014638:	b29a      	uxth	r2, r3
 801463a:	4b71      	ldr	r3, [pc, #452]	; (8014800 <tcp_receive+0x890>)
 801463c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014642:	4b6f      	ldr	r3, [pc, #444]	; (8014800 <tcp_receive+0x890>)
 8014644:	881b      	ldrh	r3, [r3, #0]
 8014646:	429a      	cmp	r2, r3
 8014648:	d275      	bcs.n	8014736 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801464a:	4b6c      	ldr	r3, [pc, #432]	; (80147fc <tcp_receive+0x88c>)
 801464c:	68db      	ldr	r3, [r3, #12]
 801464e:	899b      	ldrh	r3, [r3, #12]
 8014650:	b29b      	uxth	r3, r3
 8014652:	4618      	mov	r0, r3
 8014654:	f7fa fa60 	bl	800eb18 <lwip_htons>
 8014658:	4603      	mov	r3, r0
 801465a:	b2db      	uxtb	r3, r3
 801465c:	f003 0301 	and.w	r3, r3, #1
 8014660:	2b00      	cmp	r3, #0
 8014662:	d01f      	beq.n	80146a4 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8014664:	4b65      	ldr	r3, [pc, #404]	; (80147fc <tcp_receive+0x88c>)
 8014666:	68db      	ldr	r3, [r3, #12]
 8014668:	899b      	ldrh	r3, [r3, #12]
 801466a:	b29b      	uxth	r3, r3
 801466c:	b21b      	sxth	r3, r3
 801466e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014672:	b21c      	sxth	r4, r3
 8014674:	4b61      	ldr	r3, [pc, #388]	; (80147fc <tcp_receive+0x88c>)
 8014676:	68db      	ldr	r3, [r3, #12]
 8014678:	899b      	ldrh	r3, [r3, #12]
 801467a:	b29b      	uxth	r3, r3
 801467c:	4618      	mov	r0, r3
 801467e:	f7fa fa4b 	bl	800eb18 <lwip_htons>
 8014682:	4603      	mov	r3, r0
 8014684:	b2db      	uxtb	r3, r3
 8014686:	b29b      	uxth	r3, r3
 8014688:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801468c:	b29b      	uxth	r3, r3
 801468e:	4618      	mov	r0, r3
 8014690:	f7fa fa42 	bl	800eb18 <lwip_htons>
 8014694:	4603      	mov	r3, r0
 8014696:	b21b      	sxth	r3, r3
 8014698:	4323      	orrs	r3, r4
 801469a:	b21a      	sxth	r2, r3
 801469c:	4b57      	ldr	r3, [pc, #348]	; (80147fc <tcp_receive+0x88c>)
 801469e:	68db      	ldr	r3, [r3, #12]
 80146a0:	b292      	uxth	r2, r2
 80146a2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80146a8:	4b54      	ldr	r3, [pc, #336]	; (80147fc <tcp_receive+0x88c>)
 80146aa:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80146ac:	4b53      	ldr	r3, [pc, #332]	; (80147fc <tcp_receive+0x88c>)
 80146ae:	68db      	ldr	r3, [r3, #12]
 80146b0:	899b      	ldrh	r3, [r3, #12]
 80146b2:	b29b      	uxth	r3, r3
 80146b4:	4618      	mov	r0, r3
 80146b6:	f7fa fa2f 	bl	800eb18 <lwip_htons>
 80146ba:	4603      	mov	r3, r0
 80146bc:	b2db      	uxtb	r3, r3
 80146be:	f003 0302 	and.w	r3, r3, #2
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d005      	beq.n	80146d2 <tcp_receive+0x762>
            inseg.len -= 1;
 80146c6:	4b4d      	ldr	r3, [pc, #308]	; (80147fc <tcp_receive+0x88c>)
 80146c8:	891b      	ldrh	r3, [r3, #8]
 80146ca:	3b01      	subs	r3, #1
 80146cc:	b29a      	uxth	r2, r3
 80146ce:	4b4b      	ldr	r3, [pc, #300]	; (80147fc <tcp_receive+0x88c>)
 80146d0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80146d2:	4b4a      	ldr	r3, [pc, #296]	; (80147fc <tcp_receive+0x88c>)
 80146d4:	685b      	ldr	r3, [r3, #4]
 80146d6:	4a49      	ldr	r2, [pc, #292]	; (80147fc <tcp_receive+0x88c>)
 80146d8:	8912      	ldrh	r2, [r2, #8]
 80146da:	4611      	mov	r1, r2
 80146dc:	4618      	mov	r0, r3
 80146de:	f7fb fd5f 	bl	80101a0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80146e2:	4b46      	ldr	r3, [pc, #280]	; (80147fc <tcp_receive+0x88c>)
 80146e4:	891c      	ldrh	r4, [r3, #8]
 80146e6:	4b45      	ldr	r3, [pc, #276]	; (80147fc <tcp_receive+0x88c>)
 80146e8:	68db      	ldr	r3, [r3, #12]
 80146ea:	899b      	ldrh	r3, [r3, #12]
 80146ec:	b29b      	uxth	r3, r3
 80146ee:	4618      	mov	r0, r3
 80146f0:	f7fa fa12 	bl	800eb18 <lwip_htons>
 80146f4:	4603      	mov	r3, r0
 80146f6:	b2db      	uxtb	r3, r3
 80146f8:	f003 0303 	and.w	r3, r3, #3
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d001      	beq.n	8014704 <tcp_receive+0x794>
 8014700:	2301      	movs	r3, #1
 8014702:	e000      	b.n	8014706 <tcp_receive+0x796>
 8014704:	2300      	movs	r3, #0
 8014706:	4423      	add	r3, r4
 8014708:	b29a      	uxth	r2, r3
 801470a:	4b3d      	ldr	r3, [pc, #244]	; (8014800 <tcp_receive+0x890>)
 801470c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801470e:	4b3c      	ldr	r3, [pc, #240]	; (8014800 <tcp_receive+0x890>)
 8014710:	881b      	ldrh	r3, [r3, #0]
 8014712:	461a      	mov	r2, r3
 8014714:	4b38      	ldr	r3, [pc, #224]	; (80147f8 <tcp_receive+0x888>)
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	441a      	add	r2, r3
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801471e:	6879      	ldr	r1, [r7, #4]
 8014720:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014722:	440b      	add	r3, r1
 8014724:	429a      	cmp	r2, r3
 8014726:	d006      	beq.n	8014736 <tcp_receive+0x7c6>
 8014728:	4b36      	ldr	r3, [pc, #216]	; (8014804 <tcp_receive+0x894>)
 801472a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801472e:	4936      	ldr	r1, [pc, #216]	; (8014808 <tcp_receive+0x898>)
 8014730:	4836      	ldr	r0, [pc, #216]	; (801480c <tcp_receive+0x89c>)
 8014732:	f005 fb99 	bl	8019e68 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801473a:	2b00      	cmp	r3, #0
 801473c:	f000 80e7 	beq.w	801490e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014740:	4b2e      	ldr	r3, [pc, #184]	; (80147fc <tcp_receive+0x88c>)
 8014742:	68db      	ldr	r3, [r3, #12]
 8014744:	899b      	ldrh	r3, [r3, #12]
 8014746:	b29b      	uxth	r3, r3
 8014748:	4618      	mov	r0, r3
 801474a:	f7fa f9e5 	bl	800eb18 <lwip_htons>
 801474e:	4603      	mov	r3, r0
 8014750:	b2db      	uxtb	r3, r3
 8014752:	f003 0301 	and.w	r3, r3, #1
 8014756:	2b00      	cmp	r3, #0
 8014758:	d010      	beq.n	801477c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801475a:	e00a      	b.n	8014772 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014760:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014766:	681a      	ldr	r2, [r3, #0]
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801476c:	68f8      	ldr	r0, [r7, #12]
 801476e:	f7fd fcb8 	bl	80120e2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014776:	2b00      	cmp	r3, #0
 8014778:	d1f0      	bne.n	801475c <tcp_receive+0x7ec>
 801477a:	e0c8      	b.n	801490e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014780:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8014782:	e052      	b.n	801482a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014786:	68db      	ldr	r3, [r3, #12]
 8014788:	899b      	ldrh	r3, [r3, #12]
 801478a:	b29b      	uxth	r3, r3
 801478c:	4618      	mov	r0, r3
 801478e:	f7fa f9c3 	bl	800eb18 <lwip_htons>
 8014792:	4603      	mov	r3, r0
 8014794:	b2db      	uxtb	r3, r3
 8014796:	f003 0301 	and.w	r3, r3, #1
 801479a:	2b00      	cmp	r3, #0
 801479c:	d03d      	beq.n	801481a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801479e:	4b17      	ldr	r3, [pc, #92]	; (80147fc <tcp_receive+0x88c>)
 80147a0:	68db      	ldr	r3, [r3, #12]
 80147a2:	899b      	ldrh	r3, [r3, #12]
 80147a4:	b29b      	uxth	r3, r3
 80147a6:	4618      	mov	r0, r3
 80147a8:	f7fa f9b6 	bl	800eb18 <lwip_htons>
 80147ac:	4603      	mov	r3, r0
 80147ae:	b2db      	uxtb	r3, r3
 80147b0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d130      	bne.n	801481a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80147b8:	4b10      	ldr	r3, [pc, #64]	; (80147fc <tcp_receive+0x88c>)
 80147ba:	68db      	ldr	r3, [r3, #12]
 80147bc:	899b      	ldrh	r3, [r3, #12]
 80147be:	b29c      	uxth	r4, r3
 80147c0:	2001      	movs	r0, #1
 80147c2:	f7fa f9a9 	bl	800eb18 <lwip_htons>
 80147c6:	4603      	mov	r3, r0
 80147c8:	461a      	mov	r2, r3
 80147ca:	4b0c      	ldr	r3, [pc, #48]	; (80147fc <tcp_receive+0x88c>)
 80147cc:	68db      	ldr	r3, [r3, #12]
 80147ce:	4322      	orrs	r2, r4
 80147d0:	b292      	uxth	r2, r2
 80147d2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80147d4:	4b09      	ldr	r3, [pc, #36]	; (80147fc <tcp_receive+0x88c>)
 80147d6:	891c      	ldrh	r4, [r3, #8]
 80147d8:	4b08      	ldr	r3, [pc, #32]	; (80147fc <tcp_receive+0x88c>)
 80147da:	68db      	ldr	r3, [r3, #12]
 80147dc:	899b      	ldrh	r3, [r3, #12]
 80147de:	b29b      	uxth	r3, r3
 80147e0:	4618      	mov	r0, r3
 80147e2:	f7fa f999 	bl	800eb18 <lwip_htons>
 80147e6:	4603      	mov	r3, r0
 80147e8:	b2db      	uxtb	r3, r3
 80147ea:	f003 0303 	and.w	r3, r3, #3
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d00e      	beq.n	8014810 <tcp_receive+0x8a0>
 80147f2:	2301      	movs	r3, #1
 80147f4:	e00d      	b.n	8014812 <tcp_receive+0x8a2>
 80147f6:	bf00      	nop
 80147f8:	24015060 	.word	0x24015060
 80147fc:	24015040 	.word	0x24015040
 8014800:	2401506a 	.word	0x2401506a
 8014804:	0801c358 	.word	0x0801c358
 8014808:	0801c700 	.word	0x0801c700
 801480c:	0801c3a4 	.word	0x0801c3a4
 8014810:	2300      	movs	r3, #0
 8014812:	4423      	add	r3, r4
 8014814:	b29a      	uxth	r2, r3
 8014816:	4b98      	ldr	r3, [pc, #608]	; (8014a78 <tcp_receive+0xb08>)
 8014818:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801481a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801481c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801481e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8014824:	6938      	ldr	r0, [r7, #16]
 8014826:	f7fd fc5c 	bl	80120e2 <tcp_seg_free>
            while (next &&
 801482a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801482c:	2b00      	cmp	r3, #0
 801482e:	d00e      	beq.n	801484e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014830:	4b91      	ldr	r3, [pc, #580]	; (8014a78 <tcp_receive+0xb08>)
 8014832:	881b      	ldrh	r3, [r3, #0]
 8014834:	461a      	mov	r2, r3
 8014836:	4b91      	ldr	r3, [pc, #580]	; (8014a7c <tcp_receive+0xb0c>)
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	441a      	add	r2, r3
 801483c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801483e:	68db      	ldr	r3, [r3, #12]
 8014840:	685b      	ldr	r3, [r3, #4]
 8014842:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014844:	8909      	ldrh	r1, [r1, #8]
 8014846:	440b      	add	r3, r1
 8014848:	1ad3      	subs	r3, r2, r3
            while (next &&
 801484a:	2b00      	cmp	r3, #0
 801484c:	da9a      	bge.n	8014784 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801484e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014850:	2b00      	cmp	r3, #0
 8014852:	d059      	beq.n	8014908 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8014854:	4b88      	ldr	r3, [pc, #544]	; (8014a78 <tcp_receive+0xb08>)
 8014856:	881b      	ldrh	r3, [r3, #0]
 8014858:	461a      	mov	r2, r3
 801485a:	4b88      	ldr	r3, [pc, #544]	; (8014a7c <tcp_receive+0xb0c>)
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	441a      	add	r2, r3
 8014860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014862:	68db      	ldr	r3, [r3, #12]
 8014864:	685b      	ldr	r3, [r3, #4]
 8014866:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014868:	2b00      	cmp	r3, #0
 801486a:	dd4d      	ble.n	8014908 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801486c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801486e:	68db      	ldr	r3, [r3, #12]
 8014870:	685b      	ldr	r3, [r3, #4]
 8014872:	b29a      	uxth	r2, r3
 8014874:	4b81      	ldr	r3, [pc, #516]	; (8014a7c <tcp_receive+0xb0c>)
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	b29b      	uxth	r3, r3
 801487a:	1ad3      	subs	r3, r2, r3
 801487c:	b29a      	uxth	r2, r3
 801487e:	4b80      	ldr	r3, [pc, #512]	; (8014a80 <tcp_receive+0xb10>)
 8014880:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014882:	4b7f      	ldr	r3, [pc, #508]	; (8014a80 <tcp_receive+0xb10>)
 8014884:	68db      	ldr	r3, [r3, #12]
 8014886:	899b      	ldrh	r3, [r3, #12]
 8014888:	b29b      	uxth	r3, r3
 801488a:	4618      	mov	r0, r3
 801488c:	f7fa f944 	bl	800eb18 <lwip_htons>
 8014890:	4603      	mov	r3, r0
 8014892:	b2db      	uxtb	r3, r3
 8014894:	f003 0302 	and.w	r3, r3, #2
 8014898:	2b00      	cmp	r3, #0
 801489a:	d005      	beq.n	80148a8 <tcp_receive+0x938>
                inseg.len -= 1;
 801489c:	4b78      	ldr	r3, [pc, #480]	; (8014a80 <tcp_receive+0xb10>)
 801489e:	891b      	ldrh	r3, [r3, #8]
 80148a0:	3b01      	subs	r3, #1
 80148a2:	b29a      	uxth	r2, r3
 80148a4:	4b76      	ldr	r3, [pc, #472]	; (8014a80 <tcp_receive+0xb10>)
 80148a6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80148a8:	4b75      	ldr	r3, [pc, #468]	; (8014a80 <tcp_receive+0xb10>)
 80148aa:	685b      	ldr	r3, [r3, #4]
 80148ac:	4a74      	ldr	r2, [pc, #464]	; (8014a80 <tcp_receive+0xb10>)
 80148ae:	8912      	ldrh	r2, [r2, #8]
 80148b0:	4611      	mov	r1, r2
 80148b2:	4618      	mov	r0, r3
 80148b4:	f7fb fc74 	bl	80101a0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80148b8:	4b71      	ldr	r3, [pc, #452]	; (8014a80 <tcp_receive+0xb10>)
 80148ba:	891c      	ldrh	r4, [r3, #8]
 80148bc:	4b70      	ldr	r3, [pc, #448]	; (8014a80 <tcp_receive+0xb10>)
 80148be:	68db      	ldr	r3, [r3, #12]
 80148c0:	899b      	ldrh	r3, [r3, #12]
 80148c2:	b29b      	uxth	r3, r3
 80148c4:	4618      	mov	r0, r3
 80148c6:	f7fa f927 	bl	800eb18 <lwip_htons>
 80148ca:	4603      	mov	r3, r0
 80148cc:	b2db      	uxtb	r3, r3
 80148ce:	f003 0303 	and.w	r3, r3, #3
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d001      	beq.n	80148da <tcp_receive+0x96a>
 80148d6:	2301      	movs	r3, #1
 80148d8:	e000      	b.n	80148dc <tcp_receive+0x96c>
 80148da:	2300      	movs	r3, #0
 80148dc:	4423      	add	r3, r4
 80148de:	b29a      	uxth	r2, r3
 80148e0:	4b65      	ldr	r3, [pc, #404]	; (8014a78 <tcp_receive+0xb08>)
 80148e2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80148e4:	4b64      	ldr	r3, [pc, #400]	; (8014a78 <tcp_receive+0xb08>)
 80148e6:	881b      	ldrh	r3, [r3, #0]
 80148e8:	461a      	mov	r2, r3
 80148ea:	4b64      	ldr	r3, [pc, #400]	; (8014a7c <tcp_receive+0xb0c>)
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	441a      	add	r2, r3
 80148f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80148f2:	68db      	ldr	r3, [r3, #12]
 80148f4:	685b      	ldr	r3, [r3, #4]
 80148f6:	429a      	cmp	r2, r3
 80148f8:	d006      	beq.n	8014908 <tcp_receive+0x998>
 80148fa:	4b62      	ldr	r3, [pc, #392]	; (8014a84 <tcp_receive+0xb14>)
 80148fc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8014900:	4961      	ldr	r1, [pc, #388]	; (8014a88 <tcp_receive+0xb18>)
 8014902:	4862      	ldr	r0, [pc, #392]	; (8014a8c <tcp_receive+0xb1c>)
 8014904:	f005 fab0 	bl	8019e68 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801490c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801490e:	4b5a      	ldr	r3, [pc, #360]	; (8014a78 <tcp_receive+0xb08>)
 8014910:	881b      	ldrh	r3, [r3, #0]
 8014912:	461a      	mov	r2, r3
 8014914:	4b59      	ldr	r3, [pc, #356]	; (8014a7c <tcp_receive+0xb0c>)
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	441a      	add	r2, r3
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014922:	4b55      	ldr	r3, [pc, #340]	; (8014a78 <tcp_receive+0xb08>)
 8014924:	881b      	ldrh	r3, [r3, #0]
 8014926:	429a      	cmp	r2, r3
 8014928:	d206      	bcs.n	8014938 <tcp_receive+0x9c8>
 801492a:	4b56      	ldr	r3, [pc, #344]	; (8014a84 <tcp_receive+0xb14>)
 801492c:	f240 6207 	movw	r2, #1543	; 0x607
 8014930:	4957      	ldr	r1, [pc, #348]	; (8014a90 <tcp_receive+0xb20>)
 8014932:	4856      	ldr	r0, [pc, #344]	; (8014a8c <tcp_receive+0xb1c>)
 8014934:	f005 fa98 	bl	8019e68 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801493c:	4b4e      	ldr	r3, [pc, #312]	; (8014a78 <tcp_receive+0xb08>)
 801493e:	881b      	ldrh	r3, [r3, #0]
 8014940:	1ad3      	subs	r3, r2, r3
 8014942:	b29a      	uxth	r2, r3
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014948:	6878      	ldr	r0, [r7, #4]
 801494a:	f7fc fd85 	bl	8011458 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801494e:	4b4c      	ldr	r3, [pc, #304]	; (8014a80 <tcp_receive+0xb10>)
 8014950:	685b      	ldr	r3, [r3, #4]
 8014952:	891b      	ldrh	r3, [r3, #8]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d006      	beq.n	8014966 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8014958:	4b49      	ldr	r3, [pc, #292]	; (8014a80 <tcp_receive+0xb10>)
 801495a:	685b      	ldr	r3, [r3, #4]
 801495c:	4a4d      	ldr	r2, [pc, #308]	; (8014a94 <tcp_receive+0xb24>)
 801495e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014960:	4b47      	ldr	r3, [pc, #284]	; (8014a80 <tcp_receive+0xb10>)
 8014962:	2200      	movs	r2, #0
 8014964:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014966:	4b46      	ldr	r3, [pc, #280]	; (8014a80 <tcp_receive+0xb10>)
 8014968:	68db      	ldr	r3, [r3, #12]
 801496a:	899b      	ldrh	r3, [r3, #12]
 801496c:	b29b      	uxth	r3, r3
 801496e:	4618      	mov	r0, r3
 8014970:	f7fa f8d2 	bl	800eb18 <lwip_htons>
 8014974:	4603      	mov	r3, r0
 8014976:	b2db      	uxtb	r3, r3
 8014978:	f003 0301 	and.w	r3, r3, #1
 801497c:	2b00      	cmp	r3, #0
 801497e:	f000 80b8 	beq.w	8014af2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8014982:	4b45      	ldr	r3, [pc, #276]	; (8014a98 <tcp_receive+0xb28>)
 8014984:	781b      	ldrb	r3, [r3, #0]
 8014986:	f043 0320 	orr.w	r3, r3, #32
 801498a:	b2da      	uxtb	r2, r3
 801498c:	4b42      	ldr	r3, [pc, #264]	; (8014a98 <tcp_receive+0xb28>)
 801498e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014990:	e0af      	b.n	8014af2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014996:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801499c:	68db      	ldr	r3, [r3, #12]
 801499e:	685b      	ldr	r3, [r3, #4]
 80149a0:	4a36      	ldr	r2, [pc, #216]	; (8014a7c <tcp_receive+0xb0c>)
 80149a2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80149a4:	68bb      	ldr	r3, [r7, #8]
 80149a6:	891b      	ldrh	r3, [r3, #8]
 80149a8:	461c      	mov	r4, r3
 80149aa:	68bb      	ldr	r3, [r7, #8]
 80149ac:	68db      	ldr	r3, [r3, #12]
 80149ae:	899b      	ldrh	r3, [r3, #12]
 80149b0:	b29b      	uxth	r3, r3
 80149b2:	4618      	mov	r0, r3
 80149b4:	f7fa f8b0 	bl	800eb18 <lwip_htons>
 80149b8:	4603      	mov	r3, r0
 80149ba:	b2db      	uxtb	r3, r3
 80149bc:	f003 0303 	and.w	r3, r3, #3
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d001      	beq.n	80149c8 <tcp_receive+0xa58>
 80149c4:	2301      	movs	r3, #1
 80149c6:	e000      	b.n	80149ca <tcp_receive+0xa5a>
 80149c8:	2300      	movs	r3, #0
 80149ca:	191a      	adds	r2, r3, r4
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149d0:	441a      	add	r2, r3
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80149da:	461c      	mov	r4, r3
 80149dc:	68bb      	ldr	r3, [r7, #8]
 80149de:	891b      	ldrh	r3, [r3, #8]
 80149e0:	461d      	mov	r5, r3
 80149e2:	68bb      	ldr	r3, [r7, #8]
 80149e4:	68db      	ldr	r3, [r3, #12]
 80149e6:	899b      	ldrh	r3, [r3, #12]
 80149e8:	b29b      	uxth	r3, r3
 80149ea:	4618      	mov	r0, r3
 80149ec:	f7fa f894 	bl	800eb18 <lwip_htons>
 80149f0:	4603      	mov	r3, r0
 80149f2:	b2db      	uxtb	r3, r3
 80149f4:	f003 0303 	and.w	r3, r3, #3
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d001      	beq.n	8014a00 <tcp_receive+0xa90>
 80149fc:	2301      	movs	r3, #1
 80149fe:	e000      	b.n	8014a02 <tcp_receive+0xa92>
 8014a00:	2300      	movs	r3, #0
 8014a02:	442b      	add	r3, r5
 8014a04:	429c      	cmp	r4, r3
 8014a06:	d206      	bcs.n	8014a16 <tcp_receive+0xaa6>
 8014a08:	4b1e      	ldr	r3, [pc, #120]	; (8014a84 <tcp_receive+0xb14>)
 8014a0a:	f240 622b 	movw	r2, #1579	; 0x62b
 8014a0e:	4923      	ldr	r1, [pc, #140]	; (8014a9c <tcp_receive+0xb2c>)
 8014a10:	481e      	ldr	r0, [pc, #120]	; (8014a8c <tcp_receive+0xb1c>)
 8014a12:	f005 fa29 	bl	8019e68 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014a16:	68bb      	ldr	r3, [r7, #8]
 8014a18:	891b      	ldrh	r3, [r3, #8]
 8014a1a:	461c      	mov	r4, r3
 8014a1c:	68bb      	ldr	r3, [r7, #8]
 8014a1e:	68db      	ldr	r3, [r3, #12]
 8014a20:	899b      	ldrh	r3, [r3, #12]
 8014a22:	b29b      	uxth	r3, r3
 8014a24:	4618      	mov	r0, r3
 8014a26:	f7fa f877 	bl	800eb18 <lwip_htons>
 8014a2a:	4603      	mov	r3, r0
 8014a2c:	b2db      	uxtb	r3, r3
 8014a2e:	f003 0303 	and.w	r3, r3, #3
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d001      	beq.n	8014a3a <tcp_receive+0xaca>
 8014a36:	2301      	movs	r3, #1
 8014a38:	e000      	b.n	8014a3c <tcp_receive+0xacc>
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	1919      	adds	r1, r3, r4
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014a42:	b28b      	uxth	r3, r1
 8014a44:	1ad3      	subs	r3, r2, r3
 8014a46:	b29a      	uxth	r2, r3
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014a4c:	6878      	ldr	r0, [r7, #4]
 8014a4e:	f7fc fd03 	bl	8011458 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014a52:	68bb      	ldr	r3, [r7, #8]
 8014a54:	685b      	ldr	r3, [r3, #4]
 8014a56:	891b      	ldrh	r3, [r3, #8]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d028      	beq.n	8014aae <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014a5c:	4b0d      	ldr	r3, [pc, #52]	; (8014a94 <tcp_receive+0xb24>)
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d01d      	beq.n	8014aa0 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8014a64:	4b0b      	ldr	r3, [pc, #44]	; (8014a94 <tcp_receive+0xb24>)
 8014a66:	681a      	ldr	r2, [r3, #0]
 8014a68:	68bb      	ldr	r3, [r7, #8]
 8014a6a:	685b      	ldr	r3, [r3, #4]
 8014a6c:	4619      	mov	r1, r3
 8014a6e:	4610      	mov	r0, r2
 8014a70:	f7fb fdea 	bl	8010648 <pbuf_cat>
 8014a74:	e018      	b.n	8014aa8 <tcp_receive+0xb38>
 8014a76:	bf00      	nop
 8014a78:	2401506a 	.word	0x2401506a
 8014a7c:	24015060 	.word	0x24015060
 8014a80:	24015040 	.word	0x24015040
 8014a84:	0801c358 	.word	0x0801c358
 8014a88:	0801c738 	.word	0x0801c738
 8014a8c:	0801c3a4 	.word	0x0801c3a4
 8014a90:	0801c774 	.word	0x0801c774
 8014a94:	24015070 	.word	0x24015070
 8014a98:	2401506d 	.word	0x2401506d
 8014a9c:	0801c794 	.word	0x0801c794
            } else {
              recv_data = cseg->p;
 8014aa0:	68bb      	ldr	r3, [r7, #8]
 8014aa2:	685b      	ldr	r3, [r3, #4]
 8014aa4:	4a70      	ldr	r2, [pc, #448]	; (8014c68 <tcp_receive+0xcf8>)
 8014aa6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014aa8:	68bb      	ldr	r3, [r7, #8]
 8014aaa:	2200      	movs	r2, #0
 8014aac:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014aae:	68bb      	ldr	r3, [r7, #8]
 8014ab0:	68db      	ldr	r3, [r3, #12]
 8014ab2:	899b      	ldrh	r3, [r3, #12]
 8014ab4:	b29b      	uxth	r3, r3
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	f7fa f82e 	bl	800eb18 <lwip_htons>
 8014abc:	4603      	mov	r3, r0
 8014abe:	b2db      	uxtb	r3, r3
 8014ac0:	f003 0301 	and.w	r3, r3, #1
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d00d      	beq.n	8014ae4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014ac8:	4b68      	ldr	r3, [pc, #416]	; (8014c6c <tcp_receive+0xcfc>)
 8014aca:	781b      	ldrb	r3, [r3, #0]
 8014acc:	f043 0320 	orr.w	r3, r3, #32
 8014ad0:	b2da      	uxtb	r2, r3
 8014ad2:	4b66      	ldr	r3, [pc, #408]	; (8014c6c <tcp_receive+0xcfc>)
 8014ad4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	7d1b      	ldrb	r3, [r3, #20]
 8014ada:	2b04      	cmp	r3, #4
 8014adc:	d102      	bne.n	8014ae4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	2207      	movs	r2, #7
 8014ae2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014ae4:	68bb      	ldr	r3, [r7, #8]
 8014ae6:	681a      	ldr	r2, [r3, #0]
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014aec:	68b8      	ldr	r0, [r7, #8]
 8014aee:	f7fd faf8 	bl	80120e2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d008      	beq.n	8014b0c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014afe:	68db      	ldr	r3, [r3, #12]
 8014b00:	685a      	ldr	r2, [r3, #4]
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014b06:	429a      	cmp	r2, r3
 8014b08:	f43f af43 	beq.w	8014992 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	8b5b      	ldrh	r3, [r3, #26]
 8014b10:	f003 0301 	and.w	r3, r3, #1
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d00e      	beq.n	8014b36 <tcp_receive+0xbc6>
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	8b5b      	ldrh	r3, [r3, #26]
 8014b1c:	f023 0301 	bic.w	r3, r3, #1
 8014b20:	b29a      	uxth	r2, r3
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	835a      	strh	r2, [r3, #26]
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	8b5b      	ldrh	r3, [r3, #26]
 8014b2a:	f043 0302 	orr.w	r3, r3, #2
 8014b2e:	b29a      	uxth	r2, r3
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014b34:	e188      	b.n	8014e48 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	8b5b      	ldrh	r3, [r3, #26]
 8014b3a:	f043 0301 	orr.w	r3, r3, #1
 8014b3e:	b29a      	uxth	r2, r3
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014b44:	e180      	b.n	8014e48 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d106      	bne.n	8014b5c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014b4e:	4848      	ldr	r0, [pc, #288]	; (8014c70 <tcp_receive+0xd00>)
 8014b50:	f7fd fae0 	bl	8012114 <tcp_seg_copy>
 8014b54:	4602      	mov	r2, r0
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	675a      	str	r2, [r3, #116]	; 0x74
 8014b5a:	e16d      	b.n	8014e38 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b64:	63bb      	str	r3, [r7, #56]	; 0x38
 8014b66:	e157      	b.n	8014e18 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8014b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b6a:	68db      	ldr	r3, [r3, #12]
 8014b6c:	685a      	ldr	r2, [r3, #4]
 8014b6e:	4b41      	ldr	r3, [pc, #260]	; (8014c74 <tcp_receive+0xd04>)
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	429a      	cmp	r2, r3
 8014b74:	d11d      	bne.n	8014bb2 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014b76:	4b3e      	ldr	r3, [pc, #248]	; (8014c70 <tcp_receive+0xd00>)
 8014b78:	891a      	ldrh	r2, [r3, #8]
 8014b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b7c:	891b      	ldrh	r3, [r3, #8]
 8014b7e:	429a      	cmp	r2, r3
 8014b80:	f240 814f 	bls.w	8014e22 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014b84:	483a      	ldr	r0, [pc, #232]	; (8014c70 <tcp_receive+0xd00>)
 8014b86:	f7fd fac5 	bl	8012114 <tcp_seg_copy>
 8014b8a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014b8c:	697b      	ldr	r3, [r7, #20]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	f000 8149 	beq.w	8014e26 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8014b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d003      	beq.n	8014ba2 <tcp_receive+0xc32>
                    prev->next = cseg;
 8014b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b9c:	697a      	ldr	r2, [r7, #20]
 8014b9e:	601a      	str	r2, [r3, #0]
 8014ba0:	e002      	b.n	8014ba8 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	697a      	ldr	r2, [r7, #20]
 8014ba6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014ba8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014baa:	6978      	ldr	r0, [r7, #20]
 8014bac:	f7ff f8dc 	bl	8013d68 <tcp_oos_insert_segment>
                }
                break;
 8014bb0:	e139      	b.n	8014e26 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d117      	bne.n	8014be8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014bb8:	4b2e      	ldr	r3, [pc, #184]	; (8014c74 <tcp_receive+0xd04>)
 8014bba:	681a      	ldr	r2, [r3, #0]
 8014bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bbe:	68db      	ldr	r3, [r3, #12]
 8014bc0:	685b      	ldr	r3, [r3, #4]
 8014bc2:	1ad3      	subs	r3, r2, r3
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	da57      	bge.n	8014c78 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014bc8:	4829      	ldr	r0, [pc, #164]	; (8014c70 <tcp_receive+0xd00>)
 8014bca:	f7fd faa3 	bl	8012114 <tcp_seg_copy>
 8014bce:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014bd0:	69bb      	ldr	r3, [r7, #24]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	f000 8129 	beq.w	8014e2a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	69ba      	ldr	r2, [r7, #24]
 8014bdc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014bde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014be0:	69b8      	ldr	r0, [r7, #24]
 8014be2:	f7ff f8c1 	bl	8013d68 <tcp_oos_insert_segment>
                  }
                  break;
 8014be6:	e120      	b.n	8014e2a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014be8:	4b22      	ldr	r3, [pc, #136]	; (8014c74 <tcp_receive+0xd04>)
 8014bea:	681a      	ldr	r2, [r3, #0]
 8014bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bee:	68db      	ldr	r3, [r3, #12]
 8014bf0:	685b      	ldr	r3, [r3, #4]
 8014bf2:	1ad3      	subs	r3, r2, r3
 8014bf4:	3b01      	subs	r3, #1
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	db3e      	blt.n	8014c78 <tcp_receive+0xd08>
 8014bfa:	4b1e      	ldr	r3, [pc, #120]	; (8014c74 <tcp_receive+0xd04>)
 8014bfc:	681a      	ldr	r2, [r3, #0]
 8014bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c00:	68db      	ldr	r3, [r3, #12]
 8014c02:	685b      	ldr	r3, [r3, #4]
 8014c04:	1ad3      	subs	r3, r2, r3
 8014c06:	3301      	adds	r3, #1
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	dc35      	bgt.n	8014c78 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014c0c:	4818      	ldr	r0, [pc, #96]	; (8014c70 <tcp_receive+0xd00>)
 8014c0e:	f7fd fa81 	bl	8012114 <tcp_seg_copy>
 8014c12:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014c14:	69fb      	ldr	r3, [r7, #28]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	f000 8109 	beq.w	8014e2e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c1e:	68db      	ldr	r3, [r3, #12]
 8014c20:	685b      	ldr	r3, [r3, #4]
 8014c22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014c24:	8912      	ldrh	r2, [r2, #8]
 8014c26:	441a      	add	r2, r3
 8014c28:	4b12      	ldr	r3, [pc, #72]	; (8014c74 <tcp_receive+0xd04>)
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	1ad3      	subs	r3, r2, r3
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	dd12      	ble.n	8014c58 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014c32:	4b10      	ldr	r3, [pc, #64]	; (8014c74 <tcp_receive+0xd04>)
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	b29a      	uxth	r2, r3
 8014c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c3a:	68db      	ldr	r3, [r3, #12]
 8014c3c:	685b      	ldr	r3, [r3, #4]
 8014c3e:	b29b      	uxth	r3, r3
 8014c40:	1ad3      	subs	r3, r2, r3
 8014c42:	b29a      	uxth	r2, r3
 8014c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c46:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c4a:	685a      	ldr	r2, [r3, #4]
 8014c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c4e:	891b      	ldrh	r3, [r3, #8]
 8014c50:	4619      	mov	r1, r3
 8014c52:	4610      	mov	r0, r2
 8014c54:	f7fb faa4 	bl	80101a0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c5a:	69fa      	ldr	r2, [r7, #28]
 8014c5c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014c5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014c60:	69f8      	ldr	r0, [r7, #28]
 8014c62:	f7ff f881 	bl	8013d68 <tcp_oos_insert_segment>
                  }
                  break;
 8014c66:	e0e2      	b.n	8014e2e <tcp_receive+0xebe>
 8014c68:	24015070 	.word	0x24015070
 8014c6c:	2401506d 	.word	0x2401506d
 8014c70:	24015040 	.word	0x24015040
 8014c74:	24015060 	.word	0x24015060
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c7a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	f040 80c6 	bne.w	8014e12 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014c86:	4b80      	ldr	r3, [pc, #512]	; (8014e88 <tcp_receive+0xf18>)
 8014c88:	681a      	ldr	r2, [r3, #0]
 8014c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c8c:	68db      	ldr	r3, [r3, #12]
 8014c8e:	685b      	ldr	r3, [r3, #4]
 8014c90:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	f340 80bd 	ble.w	8014e12 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c9a:	68db      	ldr	r3, [r3, #12]
 8014c9c:	899b      	ldrh	r3, [r3, #12]
 8014c9e:	b29b      	uxth	r3, r3
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	f7f9 ff39 	bl	800eb18 <lwip_htons>
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	b2db      	uxtb	r3, r3
 8014caa:	f003 0301 	and.w	r3, r3, #1
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	f040 80bf 	bne.w	8014e32 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014cb4:	4875      	ldr	r0, [pc, #468]	; (8014e8c <tcp_receive+0xf1c>)
 8014cb6:	f7fd fa2d 	bl	8012114 <tcp_seg_copy>
 8014cba:	4602      	mov	r2, r0
 8014cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cbe:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	f000 80b6 	beq.w	8014e36 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ccc:	68db      	ldr	r3, [r3, #12]
 8014cce:	685b      	ldr	r3, [r3, #4]
 8014cd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014cd2:	8912      	ldrh	r2, [r2, #8]
 8014cd4:	441a      	add	r2, r3
 8014cd6:	4b6c      	ldr	r3, [pc, #432]	; (8014e88 <tcp_receive+0xf18>)
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	1ad3      	subs	r3, r2, r3
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	dd12      	ble.n	8014d06 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014ce0:	4b69      	ldr	r3, [pc, #420]	; (8014e88 <tcp_receive+0xf18>)
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	b29a      	uxth	r2, r3
 8014ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ce8:	68db      	ldr	r3, [r3, #12]
 8014cea:	685b      	ldr	r3, [r3, #4]
 8014cec:	b29b      	uxth	r3, r3
 8014cee:	1ad3      	subs	r3, r2, r3
 8014cf0:	b29a      	uxth	r2, r3
 8014cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cf4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cf8:	685a      	ldr	r2, [r3, #4]
 8014cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cfc:	891b      	ldrh	r3, [r3, #8]
 8014cfe:	4619      	mov	r1, r3
 8014d00:	4610      	mov	r0, r2
 8014d02:	f7fb fa4d 	bl	80101a0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014d06:	4b62      	ldr	r3, [pc, #392]	; (8014e90 <tcp_receive+0xf20>)
 8014d08:	881b      	ldrh	r3, [r3, #0]
 8014d0a:	461a      	mov	r2, r3
 8014d0c:	4b5e      	ldr	r3, [pc, #376]	; (8014e88 <tcp_receive+0xf18>)
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	441a      	add	r2, r3
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d16:	6879      	ldr	r1, [r7, #4]
 8014d18:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014d1a:	440b      	add	r3, r1
 8014d1c:	1ad3      	subs	r3, r2, r3
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	f340 8089 	ble.w	8014e36 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	68db      	ldr	r3, [r3, #12]
 8014d2a:	899b      	ldrh	r3, [r3, #12]
 8014d2c:	b29b      	uxth	r3, r3
 8014d2e:	4618      	mov	r0, r3
 8014d30:	f7f9 fef2 	bl	800eb18 <lwip_htons>
 8014d34:	4603      	mov	r3, r0
 8014d36:	b2db      	uxtb	r3, r3
 8014d38:	f003 0301 	and.w	r3, r3, #1
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d022      	beq.n	8014d86 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	68db      	ldr	r3, [r3, #12]
 8014d46:	899b      	ldrh	r3, [r3, #12]
 8014d48:	b29b      	uxth	r3, r3
 8014d4a:	b21b      	sxth	r3, r3
 8014d4c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014d50:	b21c      	sxth	r4, r3
 8014d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	68db      	ldr	r3, [r3, #12]
 8014d58:	899b      	ldrh	r3, [r3, #12]
 8014d5a:	b29b      	uxth	r3, r3
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f7f9 fedb 	bl	800eb18 <lwip_htons>
 8014d62:	4603      	mov	r3, r0
 8014d64:	b2db      	uxtb	r3, r3
 8014d66:	b29b      	uxth	r3, r3
 8014d68:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014d6c:	b29b      	uxth	r3, r3
 8014d6e:	4618      	mov	r0, r3
 8014d70:	f7f9 fed2 	bl	800eb18 <lwip_htons>
 8014d74:	4603      	mov	r3, r0
 8014d76:	b21b      	sxth	r3, r3
 8014d78:	4323      	orrs	r3, r4
 8014d7a:	b21a      	sxth	r2, r3
 8014d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	68db      	ldr	r3, [r3, #12]
 8014d82:	b292      	uxth	r2, r2
 8014d84:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d8a:	b29a      	uxth	r2, r3
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014d90:	4413      	add	r3, r2
 8014d92:	b299      	uxth	r1, r3
 8014d94:	4b3c      	ldr	r3, [pc, #240]	; (8014e88 <tcp_receive+0xf18>)
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	b29a      	uxth	r2, r3
 8014d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	1a8a      	subs	r2, r1, r2
 8014da0:	b292      	uxth	r2, r2
 8014da2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	685a      	ldr	r2, [r3, #4]
 8014daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	891b      	ldrh	r3, [r3, #8]
 8014db0:	4619      	mov	r1, r3
 8014db2:	4610      	mov	r0, r2
 8014db4:	f7fb f9f4 	bl	80101a0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	891c      	ldrh	r4, [r3, #8]
 8014dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	68db      	ldr	r3, [r3, #12]
 8014dc4:	899b      	ldrh	r3, [r3, #12]
 8014dc6:	b29b      	uxth	r3, r3
 8014dc8:	4618      	mov	r0, r3
 8014dca:	f7f9 fea5 	bl	800eb18 <lwip_htons>
 8014dce:	4603      	mov	r3, r0
 8014dd0:	b2db      	uxtb	r3, r3
 8014dd2:	f003 0303 	and.w	r3, r3, #3
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d001      	beq.n	8014dde <tcp_receive+0xe6e>
 8014dda:	2301      	movs	r3, #1
 8014ddc:	e000      	b.n	8014de0 <tcp_receive+0xe70>
 8014dde:	2300      	movs	r3, #0
 8014de0:	4423      	add	r3, r4
 8014de2:	b29a      	uxth	r2, r3
 8014de4:	4b2a      	ldr	r3, [pc, #168]	; (8014e90 <tcp_receive+0xf20>)
 8014de6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014de8:	4b29      	ldr	r3, [pc, #164]	; (8014e90 <tcp_receive+0xf20>)
 8014dea:	881b      	ldrh	r3, [r3, #0]
 8014dec:	461a      	mov	r2, r3
 8014dee:	4b26      	ldr	r3, [pc, #152]	; (8014e88 <tcp_receive+0xf18>)
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	441a      	add	r2, r3
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014df8:	6879      	ldr	r1, [r7, #4]
 8014dfa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014dfc:	440b      	add	r3, r1
 8014dfe:	429a      	cmp	r2, r3
 8014e00:	d019      	beq.n	8014e36 <tcp_receive+0xec6>
 8014e02:	4b24      	ldr	r3, [pc, #144]	; (8014e94 <tcp_receive+0xf24>)
 8014e04:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014e08:	4923      	ldr	r1, [pc, #140]	; (8014e98 <tcp_receive+0xf28>)
 8014e0a:	4824      	ldr	r0, [pc, #144]	; (8014e9c <tcp_receive+0xf2c>)
 8014e0c:	f005 f82c 	bl	8019e68 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014e10:	e011      	b.n	8014e36 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	63bb      	str	r3, [r7, #56]	; 0x38
 8014e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	f47f aea4 	bne.w	8014b68 <tcp_receive+0xbf8>
 8014e20:	e00a      	b.n	8014e38 <tcp_receive+0xec8>
                break;
 8014e22:	bf00      	nop
 8014e24:	e008      	b.n	8014e38 <tcp_receive+0xec8>
                break;
 8014e26:	bf00      	nop
 8014e28:	e006      	b.n	8014e38 <tcp_receive+0xec8>
                  break;
 8014e2a:	bf00      	nop
 8014e2c:	e004      	b.n	8014e38 <tcp_receive+0xec8>
                  break;
 8014e2e:	bf00      	nop
 8014e30:	e002      	b.n	8014e38 <tcp_receive+0xec8>
                  break;
 8014e32:	bf00      	nop
 8014e34:	e000      	b.n	8014e38 <tcp_receive+0xec8>
                break;
 8014e36:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014e38:	6878      	ldr	r0, [r7, #4]
 8014e3a:	f001 fe8f 	bl	8016b5c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014e3e:	e003      	b.n	8014e48 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	f001 fe8b 	bl	8016b5c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014e46:	e01a      	b.n	8014e7e <tcp_receive+0xf0e>
 8014e48:	e019      	b.n	8014e7e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014e4a:	4b0f      	ldr	r3, [pc, #60]	; (8014e88 <tcp_receive+0xf18>)
 8014e4c:	681a      	ldr	r2, [r3, #0]
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e52:	1ad3      	subs	r3, r2, r3
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	db0a      	blt.n	8014e6e <tcp_receive+0xefe>
 8014e58:	4b0b      	ldr	r3, [pc, #44]	; (8014e88 <tcp_receive+0xf18>)
 8014e5a:	681a      	ldr	r2, [r3, #0]
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e60:	6879      	ldr	r1, [r7, #4]
 8014e62:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014e64:	440b      	add	r3, r1
 8014e66:	1ad3      	subs	r3, r2, r3
 8014e68:	3301      	adds	r3, #1
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	dd07      	ble.n	8014e7e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	8b5b      	ldrh	r3, [r3, #26]
 8014e72:	f043 0302 	orr.w	r3, r3, #2
 8014e76:	b29a      	uxth	r2, r3
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014e7c:	e7ff      	b.n	8014e7e <tcp_receive+0xf0e>
 8014e7e:	bf00      	nop
 8014e80:	3750      	adds	r7, #80	; 0x50
 8014e82:	46bd      	mov	sp, r7
 8014e84:	bdb0      	pop	{r4, r5, r7, pc}
 8014e86:	bf00      	nop
 8014e88:	24015060 	.word	0x24015060
 8014e8c:	24015040 	.word	0x24015040
 8014e90:	2401506a 	.word	0x2401506a
 8014e94:	0801c358 	.word	0x0801c358
 8014e98:	0801c700 	.word	0x0801c700
 8014e9c:	0801c3a4 	.word	0x0801c3a4

08014ea0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014ea0:	b480      	push	{r7}
 8014ea2:	b083      	sub	sp, #12
 8014ea4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014ea6:	4b15      	ldr	r3, [pc, #84]	; (8014efc <tcp_get_next_optbyte+0x5c>)
 8014ea8:	881b      	ldrh	r3, [r3, #0]
 8014eaa:	1c5a      	adds	r2, r3, #1
 8014eac:	b291      	uxth	r1, r2
 8014eae:	4a13      	ldr	r2, [pc, #76]	; (8014efc <tcp_get_next_optbyte+0x5c>)
 8014eb0:	8011      	strh	r1, [r2, #0]
 8014eb2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014eb4:	4b12      	ldr	r3, [pc, #72]	; (8014f00 <tcp_get_next_optbyte+0x60>)
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d004      	beq.n	8014ec6 <tcp_get_next_optbyte+0x26>
 8014ebc:	4b11      	ldr	r3, [pc, #68]	; (8014f04 <tcp_get_next_optbyte+0x64>)
 8014ebe:	881b      	ldrh	r3, [r3, #0]
 8014ec0:	88fa      	ldrh	r2, [r7, #6]
 8014ec2:	429a      	cmp	r2, r3
 8014ec4:	d208      	bcs.n	8014ed8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014ec6:	4b10      	ldr	r3, [pc, #64]	; (8014f08 <tcp_get_next_optbyte+0x68>)
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	3314      	adds	r3, #20
 8014ecc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014ece:	88fb      	ldrh	r3, [r7, #6]
 8014ed0:	683a      	ldr	r2, [r7, #0]
 8014ed2:	4413      	add	r3, r2
 8014ed4:	781b      	ldrb	r3, [r3, #0]
 8014ed6:	e00b      	b.n	8014ef0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014ed8:	88fb      	ldrh	r3, [r7, #6]
 8014eda:	b2da      	uxtb	r2, r3
 8014edc:	4b09      	ldr	r3, [pc, #36]	; (8014f04 <tcp_get_next_optbyte+0x64>)
 8014ede:	881b      	ldrh	r3, [r3, #0]
 8014ee0:	b2db      	uxtb	r3, r3
 8014ee2:	1ad3      	subs	r3, r2, r3
 8014ee4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014ee6:	4b06      	ldr	r3, [pc, #24]	; (8014f00 <tcp_get_next_optbyte+0x60>)
 8014ee8:	681a      	ldr	r2, [r3, #0]
 8014eea:	797b      	ldrb	r3, [r7, #5]
 8014eec:	4413      	add	r3, r2
 8014eee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	370c      	adds	r7, #12
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efa:	4770      	bx	lr
 8014efc:	2401505c 	.word	0x2401505c
 8014f00:	24015058 	.word	0x24015058
 8014f04:	24015056 	.word	0x24015056
 8014f08:	24015050 	.word	0x24015050

08014f0c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b084      	sub	sp, #16
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d106      	bne.n	8014f28 <tcp_parseopt+0x1c>
 8014f1a:	4b32      	ldr	r3, [pc, #200]	; (8014fe4 <tcp_parseopt+0xd8>)
 8014f1c:	f240 727d 	movw	r2, #1917	; 0x77d
 8014f20:	4931      	ldr	r1, [pc, #196]	; (8014fe8 <tcp_parseopt+0xdc>)
 8014f22:	4832      	ldr	r0, [pc, #200]	; (8014fec <tcp_parseopt+0xe0>)
 8014f24:	f004 ffa0 	bl	8019e68 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014f28:	4b31      	ldr	r3, [pc, #196]	; (8014ff0 <tcp_parseopt+0xe4>)
 8014f2a:	881b      	ldrh	r3, [r3, #0]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d056      	beq.n	8014fde <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014f30:	4b30      	ldr	r3, [pc, #192]	; (8014ff4 <tcp_parseopt+0xe8>)
 8014f32:	2200      	movs	r2, #0
 8014f34:	801a      	strh	r2, [r3, #0]
 8014f36:	e046      	b.n	8014fc6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8014f38:	f7ff ffb2 	bl	8014ea0 <tcp_get_next_optbyte>
 8014f3c:	4603      	mov	r3, r0
 8014f3e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014f40:	7bfb      	ldrb	r3, [r7, #15]
 8014f42:	2b02      	cmp	r3, #2
 8014f44:	d006      	beq.n	8014f54 <tcp_parseopt+0x48>
 8014f46:	2b02      	cmp	r3, #2
 8014f48:	dc2c      	bgt.n	8014fa4 <tcp_parseopt+0x98>
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d042      	beq.n	8014fd4 <tcp_parseopt+0xc8>
 8014f4e:	2b01      	cmp	r3, #1
 8014f50:	d128      	bne.n	8014fa4 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8014f52:	e038      	b.n	8014fc6 <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014f54:	f7ff ffa4 	bl	8014ea0 <tcp_get_next_optbyte>
 8014f58:	4603      	mov	r3, r0
 8014f5a:	2b04      	cmp	r3, #4
 8014f5c:	d13c      	bne.n	8014fd8 <tcp_parseopt+0xcc>
 8014f5e:	4b25      	ldr	r3, [pc, #148]	; (8014ff4 <tcp_parseopt+0xe8>)
 8014f60:	881b      	ldrh	r3, [r3, #0]
 8014f62:	3301      	adds	r3, #1
 8014f64:	4a22      	ldr	r2, [pc, #136]	; (8014ff0 <tcp_parseopt+0xe4>)
 8014f66:	8812      	ldrh	r2, [r2, #0]
 8014f68:	4293      	cmp	r3, r2
 8014f6a:	da35      	bge.n	8014fd8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014f6c:	f7ff ff98 	bl	8014ea0 <tcp_get_next_optbyte>
 8014f70:	4603      	mov	r3, r0
 8014f72:	b29b      	uxth	r3, r3
 8014f74:	021b      	lsls	r3, r3, #8
 8014f76:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014f78:	f7ff ff92 	bl	8014ea0 <tcp_get_next_optbyte>
 8014f7c:	4603      	mov	r3, r0
 8014f7e:	b29a      	uxth	r2, r3
 8014f80:	89bb      	ldrh	r3, [r7, #12]
 8014f82:	4313      	orrs	r3, r2
 8014f84:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014f86:	89bb      	ldrh	r3, [r7, #12]
 8014f88:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8014f8c:	4293      	cmp	r3, r2
 8014f8e:	d804      	bhi.n	8014f9a <tcp_parseopt+0x8e>
 8014f90:	89bb      	ldrh	r3, [r7, #12]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d001      	beq.n	8014f9a <tcp_parseopt+0x8e>
 8014f96:	89ba      	ldrh	r2, [r7, #12]
 8014f98:	e001      	b.n	8014f9e <tcp_parseopt+0x92>
 8014f9a:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8014fa2:	e010      	b.n	8014fc6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014fa4:	f7ff ff7c 	bl	8014ea0 <tcp_get_next_optbyte>
 8014fa8:	4603      	mov	r3, r0
 8014faa:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014fac:	7afb      	ldrb	r3, [r7, #11]
 8014fae:	2b01      	cmp	r3, #1
 8014fb0:	d914      	bls.n	8014fdc <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014fb2:	7afb      	ldrb	r3, [r7, #11]
 8014fb4:	b29a      	uxth	r2, r3
 8014fb6:	4b0f      	ldr	r3, [pc, #60]	; (8014ff4 <tcp_parseopt+0xe8>)
 8014fb8:	881b      	ldrh	r3, [r3, #0]
 8014fba:	4413      	add	r3, r2
 8014fbc:	b29b      	uxth	r3, r3
 8014fbe:	3b02      	subs	r3, #2
 8014fc0:	b29a      	uxth	r2, r3
 8014fc2:	4b0c      	ldr	r3, [pc, #48]	; (8014ff4 <tcp_parseopt+0xe8>)
 8014fc4:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014fc6:	4b0b      	ldr	r3, [pc, #44]	; (8014ff4 <tcp_parseopt+0xe8>)
 8014fc8:	881a      	ldrh	r2, [r3, #0]
 8014fca:	4b09      	ldr	r3, [pc, #36]	; (8014ff0 <tcp_parseopt+0xe4>)
 8014fcc:	881b      	ldrh	r3, [r3, #0]
 8014fce:	429a      	cmp	r2, r3
 8014fd0:	d3b2      	bcc.n	8014f38 <tcp_parseopt+0x2c>
 8014fd2:	e004      	b.n	8014fde <tcp_parseopt+0xd2>
          return;
 8014fd4:	bf00      	nop
 8014fd6:	e002      	b.n	8014fde <tcp_parseopt+0xd2>
            return;
 8014fd8:	bf00      	nop
 8014fda:	e000      	b.n	8014fde <tcp_parseopt+0xd2>
            return;
 8014fdc:	bf00      	nop
      }
    }
  }
}
 8014fde:	3710      	adds	r7, #16
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	bd80      	pop	{r7, pc}
 8014fe4:	0801c358 	.word	0x0801c358
 8014fe8:	0801c7bc 	.word	0x0801c7bc
 8014fec:	0801c3a4 	.word	0x0801c3a4
 8014ff0:	24015054 	.word	0x24015054
 8014ff4:	2401505c 	.word	0x2401505c

08014ff8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014ff8:	b480      	push	{r7}
 8014ffa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014ffc:	4b05      	ldr	r3, [pc, #20]	; (8015014 <tcp_trigger_input_pcb_close+0x1c>)
 8014ffe:	781b      	ldrb	r3, [r3, #0]
 8015000:	f043 0310 	orr.w	r3, r3, #16
 8015004:	b2da      	uxtb	r2, r3
 8015006:	4b03      	ldr	r3, [pc, #12]	; (8015014 <tcp_trigger_input_pcb_close+0x1c>)
 8015008:	701a      	strb	r2, [r3, #0]
}
 801500a:	bf00      	nop
 801500c:	46bd      	mov	sp, r7
 801500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015012:	4770      	bx	lr
 8015014:	2401506d 	.word	0x2401506d

08015018 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015018:	b580      	push	{r7, lr}
 801501a:	b084      	sub	sp, #16
 801501c:	af00      	add	r7, sp, #0
 801501e:	60f8      	str	r0, [r7, #12]
 8015020:	60b9      	str	r1, [r7, #8]
 8015022:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d00a      	beq.n	8015040 <tcp_route+0x28>
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	7a1b      	ldrb	r3, [r3, #8]
 801502e:	2b00      	cmp	r3, #0
 8015030:	d006      	beq.n	8015040 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	7a1b      	ldrb	r3, [r3, #8]
 8015036:	4618      	mov	r0, r3
 8015038:	f7fa fea6 	bl	800fd88 <netif_get_by_index>
 801503c:	4603      	mov	r3, r0
 801503e:	e003      	b.n	8015048 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015040:	6878      	ldr	r0, [r7, #4]
 8015042:	f003 fb3d 	bl	80186c0 <ip4_route>
 8015046:	4603      	mov	r3, r0
  }
}
 8015048:	4618      	mov	r0, r3
 801504a:	3710      	adds	r7, #16
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}

08015050 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015050:	b590      	push	{r4, r7, lr}
 8015052:	b087      	sub	sp, #28
 8015054:	af00      	add	r7, sp, #0
 8015056:	60f8      	str	r0, [r7, #12]
 8015058:	60b9      	str	r1, [r7, #8]
 801505a:	603b      	str	r3, [r7, #0]
 801505c:	4613      	mov	r3, r2
 801505e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d105      	bne.n	8015072 <tcp_create_segment+0x22>
 8015066:	4b44      	ldr	r3, [pc, #272]	; (8015178 <tcp_create_segment+0x128>)
 8015068:	22a3      	movs	r2, #163	; 0xa3
 801506a:	4944      	ldr	r1, [pc, #272]	; (801517c <tcp_create_segment+0x12c>)
 801506c:	4844      	ldr	r0, [pc, #272]	; (8015180 <tcp_create_segment+0x130>)
 801506e:	f004 fefb 	bl	8019e68 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015072:	68bb      	ldr	r3, [r7, #8]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d105      	bne.n	8015084 <tcp_create_segment+0x34>
 8015078:	4b3f      	ldr	r3, [pc, #252]	; (8015178 <tcp_create_segment+0x128>)
 801507a:	22a4      	movs	r2, #164	; 0xa4
 801507c:	4941      	ldr	r1, [pc, #260]	; (8015184 <tcp_create_segment+0x134>)
 801507e:	4840      	ldr	r0, [pc, #256]	; (8015180 <tcp_create_segment+0x130>)
 8015080:	f004 fef2 	bl	8019e68 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015084:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015088:	009b      	lsls	r3, r3, #2
 801508a:	b2db      	uxtb	r3, r3
 801508c:	f003 0304 	and.w	r3, r3, #4
 8015090:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015092:	2003      	movs	r0, #3
 8015094:	f7fa fae0 	bl	800f658 <memp_malloc>
 8015098:	6138      	str	r0, [r7, #16]
 801509a:	693b      	ldr	r3, [r7, #16]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d104      	bne.n	80150aa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80150a0:	68b8      	ldr	r0, [r7, #8]
 80150a2:	f7fb fa03 	bl	80104ac <pbuf_free>
    return NULL;
 80150a6:	2300      	movs	r3, #0
 80150a8:	e061      	b.n	801516e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80150aa:	693b      	ldr	r3, [r7, #16]
 80150ac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80150b0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80150b2:	693b      	ldr	r3, [r7, #16]
 80150b4:	2200      	movs	r2, #0
 80150b6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80150b8:	693b      	ldr	r3, [r7, #16]
 80150ba:	68ba      	ldr	r2, [r7, #8]
 80150bc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80150be:	68bb      	ldr	r3, [r7, #8]
 80150c0:	891a      	ldrh	r2, [r3, #8]
 80150c2:	7dfb      	ldrb	r3, [r7, #23]
 80150c4:	b29b      	uxth	r3, r3
 80150c6:	429a      	cmp	r2, r3
 80150c8:	d205      	bcs.n	80150d6 <tcp_create_segment+0x86>
 80150ca:	4b2b      	ldr	r3, [pc, #172]	; (8015178 <tcp_create_segment+0x128>)
 80150cc:	22b0      	movs	r2, #176	; 0xb0
 80150ce:	492e      	ldr	r1, [pc, #184]	; (8015188 <tcp_create_segment+0x138>)
 80150d0:	482b      	ldr	r0, [pc, #172]	; (8015180 <tcp_create_segment+0x130>)
 80150d2:	f004 fec9 	bl	8019e68 <iprintf>
  seg->len = p->tot_len - optlen;
 80150d6:	68bb      	ldr	r3, [r7, #8]
 80150d8:	891a      	ldrh	r2, [r3, #8]
 80150da:	7dfb      	ldrb	r3, [r7, #23]
 80150dc:	b29b      	uxth	r3, r3
 80150de:	1ad3      	subs	r3, r2, r3
 80150e0:	b29a      	uxth	r2, r3
 80150e2:	693b      	ldr	r3, [r7, #16]
 80150e4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80150e6:	2114      	movs	r1, #20
 80150e8:	68b8      	ldr	r0, [r7, #8]
 80150ea:	f7fb f949 	bl	8010380 <pbuf_add_header>
 80150ee:	4603      	mov	r3, r0
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d004      	beq.n	80150fe <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80150f4:	6938      	ldr	r0, [r7, #16]
 80150f6:	f7fc fff4 	bl	80120e2 <tcp_seg_free>
    return NULL;
 80150fa:	2300      	movs	r3, #0
 80150fc:	e037      	b.n	801516e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80150fe:	693b      	ldr	r3, [r7, #16]
 8015100:	685b      	ldr	r3, [r3, #4]
 8015102:	685a      	ldr	r2, [r3, #4]
 8015104:	693b      	ldr	r3, [r7, #16]
 8015106:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	8ada      	ldrh	r2, [r3, #22]
 801510c:	693b      	ldr	r3, [r7, #16]
 801510e:	68dc      	ldr	r4, [r3, #12]
 8015110:	4610      	mov	r0, r2
 8015112:	f7f9 fd01 	bl	800eb18 <lwip_htons>
 8015116:	4603      	mov	r3, r0
 8015118:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	8b1a      	ldrh	r2, [r3, #24]
 801511e:	693b      	ldr	r3, [r7, #16]
 8015120:	68dc      	ldr	r4, [r3, #12]
 8015122:	4610      	mov	r0, r2
 8015124:	f7f9 fcf8 	bl	800eb18 <lwip_htons>
 8015128:	4603      	mov	r3, r0
 801512a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801512c:	693b      	ldr	r3, [r7, #16]
 801512e:	68dc      	ldr	r4, [r3, #12]
 8015130:	6838      	ldr	r0, [r7, #0]
 8015132:	f7f9 fd06 	bl	800eb42 <lwip_htonl>
 8015136:	4603      	mov	r3, r0
 8015138:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801513a:	7dfb      	ldrb	r3, [r7, #23]
 801513c:	089b      	lsrs	r3, r3, #2
 801513e:	b2db      	uxtb	r3, r3
 8015140:	b29b      	uxth	r3, r3
 8015142:	3305      	adds	r3, #5
 8015144:	b29b      	uxth	r3, r3
 8015146:	031b      	lsls	r3, r3, #12
 8015148:	b29a      	uxth	r2, r3
 801514a:	79fb      	ldrb	r3, [r7, #7]
 801514c:	b29b      	uxth	r3, r3
 801514e:	4313      	orrs	r3, r2
 8015150:	b29a      	uxth	r2, r3
 8015152:	693b      	ldr	r3, [r7, #16]
 8015154:	68dc      	ldr	r4, [r3, #12]
 8015156:	4610      	mov	r0, r2
 8015158:	f7f9 fcde 	bl	800eb18 <lwip_htons>
 801515c:	4603      	mov	r3, r0
 801515e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015160:	693b      	ldr	r3, [r7, #16]
 8015162:	68db      	ldr	r3, [r3, #12]
 8015164:	2200      	movs	r2, #0
 8015166:	749a      	strb	r2, [r3, #18]
 8015168:	2200      	movs	r2, #0
 801516a:	74da      	strb	r2, [r3, #19]
  return seg;
 801516c:	693b      	ldr	r3, [r7, #16]
}
 801516e:	4618      	mov	r0, r3
 8015170:	371c      	adds	r7, #28
 8015172:	46bd      	mov	sp, r7
 8015174:	bd90      	pop	{r4, r7, pc}
 8015176:	bf00      	nop
 8015178:	0801c7d8 	.word	0x0801c7d8
 801517c:	0801c80c 	.word	0x0801c80c
 8015180:	0801c82c 	.word	0x0801c82c
 8015184:	0801c854 	.word	0x0801c854
 8015188:	0801c878 	.word	0x0801c878

0801518c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801518c:	b580      	push	{r7, lr}
 801518e:	b086      	sub	sp, #24
 8015190:	af00      	add	r7, sp, #0
 8015192:	607b      	str	r3, [r7, #4]
 8015194:	4603      	mov	r3, r0
 8015196:	73fb      	strb	r3, [r7, #15]
 8015198:	460b      	mov	r3, r1
 801519a:	81bb      	strh	r3, [r7, #12]
 801519c:	4613      	mov	r3, r2
 801519e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80151a0:	89bb      	ldrh	r3, [r7, #12]
 80151a2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d105      	bne.n	80151b6 <tcp_pbuf_prealloc+0x2a>
 80151aa:	4b30      	ldr	r3, [pc, #192]	; (801526c <tcp_pbuf_prealloc+0xe0>)
 80151ac:	22e8      	movs	r2, #232	; 0xe8
 80151ae:	4930      	ldr	r1, [pc, #192]	; (8015270 <tcp_pbuf_prealloc+0xe4>)
 80151b0:	4830      	ldr	r0, [pc, #192]	; (8015274 <tcp_pbuf_prealloc+0xe8>)
 80151b2:	f004 fe59 	bl	8019e68 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80151b6:	6a3b      	ldr	r3, [r7, #32]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d105      	bne.n	80151c8 <tcp_pbuf_prealloc+0x3c>
 80151bc:	4b2b      	ldr	r3, [pc, #172]	; (801526c <tcp_pbuf_prealloc+0xe0>)
 80151be:	22e9      	movs	r2, #233	; 0xe9
 80151c0:	492d      	ldr	r1, [pc, #180]	; (8015278 <tcp_pbuf_prealloc+0xec>)
 80151c2:	482c      	ldr	r0, [pc, #176]	; (8015274 <tcp_pbuf_prealloc+0xe8>)
 80151c4:	f004 fe50 	bl	8019e68 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80151c8:	89ba      	ldrh	r2, [r7, #12]
 80151ca:	897b      	ldrh	r3, [r7, #10]
 80151cc:	429a      	cmp	r2, r3
 80151ce:	d221      	bcs.n	8015214 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80151d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80151d4:	f003 0302 	and.w	r3, r3, #2
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d111      	bne.n	8015200 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80151dc:	6a3b      	ldr	r3, [r7, #32]
 80151de:	8b5b      	ldrh	r3, [r3, #26]
 80151e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d115      	bne.n	8015214 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80151e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d007      	beq.n	8015200 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80151f0:	6a3b      	ldr	r3, [r7, #32]
 80151f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d103      	bne.n	8015200 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80151f8:	6a3b      	ldr	r3, [r7, #32]
 80151fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d009      	beq.n	8015214 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015200:	89bb      	ldrh	r3, [r7, #12]
 8015202:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 8015206:	f023 0203 	bic.w	r2, r3, #3
 801520a:	897b      	ldrh	r3, [r7, #10]
 801520c:	4293      	cmp	r3, r2
 801520e:	bf28      	it	cs
 8015210:	4613      	movcs	r3, r2
 8015212:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015214:	8af9      	ldrh	r1, [r7, #22]
 8015216:	7bfb      	ldrb	r3, [r7, #15]
 8015218:	f44f 7220 	mov.w	r2, #640	; 0x280
 801521c:	4618      	mov	r0, r3
 801521e:	f7fa fe5d 	bl	800fedc <pbuf_alloc>
 8015222:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015224:	693b      	ldr	r3, [r7, #16]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d101      	bne.n	801522e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801522a:	2300      	movs	r3, #0
 801522c:	e019      	b.n	8015262 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801522e:	693b      	ldr	r3, [r7, #16]
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d006      	beq.n	8015244 <tcp_pbuf_prealloc+0xb8>
 8015236:	4b0d      	ldr	r3, [pc, #52]	; (801526c <tcp_pbuf_prealloc+0xe0>)
 8015238:	f240 120b 	movw	r2, #267	; 0x10b
 801523c:	490f      	ldr	r1, [pc, #60]	; (801527c <tcp_pbuf_prealloc+0xf0>)
 801523e:	480d      	ldr	r0, [pc, #52]	; (8015274 <tcp_pbuf_prealloc+0xe8>)
 8015240:	f004 fe12 	bl	8019e68 <iprintf>
  *oversize = p->len - length;
 8015244:	693b      	ldr	r3, [r7, #16]
 8015246:	895a      	ldrh	r2, [r3, #10]
 8015248:	89bb      	ldrh	r3, [r7, #12]
 801524a:	1ad3      	subs	r3, r2, r3
 801524c:	b29a      	uxth	r2, r3
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8015252:	693b      	ldr	r3, [r7, #16]
 8015254:	89ba      	ldrh	r2, [r7, #12]
 8015256:	811a      	strh	r2, [r3, #8]
 8015258:	693b      	ldr	r3, [r7, #16]
 801525a:	891a      	ldrh	r2, [r3, #8]
 801525c:	693b      	ldr	r3, [r7, #16]
 801525e:	815a      	strh	r2, [r3, #10]
  return p;
 8015260:	693b      	ldr	r3, [r7, #16]
}
 8015262:	4618      	mov	r0, r3
 8015264:	3718      	adds	r7, #24
 8015266:	46bd      	mov	sp, r7
 8015268:	bd80      	pop	{r7, pc}
 801526a:	bf00      	nop
 801526c:	0801c7d8 	.word	0x0801c7d8
 8015270:	0801c890 	.word	0x0801c890
 8015274:	0801c82c 	.word	0x0801c82c
 8015278:	0801c8b4 	.word	0x0801c8b4
 801527c:	0801c8d4 	.word	0x0801c8d4

08015280 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b082      	sub	sp, #8
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
 8015288:	460b      	mov	r3, r1
 801528a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d106      	bne.n	80152a0 <tcp_write_checks+0x20>
 8015292:	4b33      	ldr	r3, [pc, #204]	; (8015360 <tcp_write_checks+0xe0>)
 8015294:	f240 1233 	movw	r2, #307	; 0x133
 8015298:	4932      	ldr	r1, [pc, #200]	; (8015364 <tcp_write_checks+0xe4>)
 801529a:	4833      	ldr	r0, [pc, #204]	; (8015368 <tcp_write_checks+0xe8>)
 801529c:	f004 fde4 	bl	8019e68 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	7d1b      	ldrb	r3, [r3, #20]
 80152a4:	2b04      	cmp	r3, #4
 80152a6:	d00e      	beq.n	80152c6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80152ac:	2b07      	cmp	r3, #7
 80152ae:	d00a      	beq.n	80152c6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80152b4:	2b02      	cmp	r3, #2
 80152b6:	d006      	beq.n	80152c6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80152bc:	2b03      	cmp	r3, #3
 80152be:	d002      	beq.n	80152c6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80152c0:	f06f 030a 	mvn.w	r3, #10
 80152c4:	e048      	b.n	8015358 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80152c6:	887b      	ldrh	r3, [r7, #2]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d101      	bne.n	80152d0 <tcp_write_checks+0x50>
    return ERR_OK;
 80152cc:	2300      	movs	r3, #0
 80152ce:	e043      	b.n	8015358 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80152d6:	887a      	ldrh	r2, [r7, #2]
 80152d8:	429a      	cmp	r2, r3
 80152da:	d909      	bls.n	80152f0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	8b5b      	ldrh	r3, [r3, #26]
 80152e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80152e4:	b29a      	uxth	r2, r3
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80152ea:	f04f 33ff 	mov.w	r3, #4294967295
 80152ee:	e033      	b.n	8015358 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80152f6:	2b0f      	cmp	r3, #15
 80152f8:	d909      	bls.n	801530e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	8b5b      	ldrh	r3, [r3, #26]
 80152fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015302:	b29a      	uxth	r2, r3
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015308:	f04f 33ff 	mov.w	r3, #4294967295
 801530c:	e024      	b.n	8015358 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015314:	2b00      	cmp	r3, #0
 8015316:	d00f      	beq.n	8015338 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801531c:	2b00      	cmp	r3, #0
 801531e:	d11a      	bne.n	8015356 <tcp_write_checks+0xd6>
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015324:	2b00      	cmp	r3, #0
 8015326:	d116      	bne.n	8015356 <tcp_write_checks+0xd6>
 8015328:	4b0d      	ldr	r3, [pc, #52]	; (8015360 <tcp_write_checks+0xe0>)
 801532a:	f240 1255 	movw	r2, #341	; 0x155
 801532e:	490f      	ldr	r1, [pc, #60]	; (801536c <tcp_write_checks+0xec>)
 8015330:	480d      	ldr	r0, [pc, #52]	; (8015368 <tcp_write_checks+0xe8>)
 8015332:	f004 fd99 	bl	8019e68 <iprintf>
 8015336:	e00e      	b.n	8015356 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801533c:	2b00      	cmp	r3, #0
 801533e:	d103      	bne.n	8015348 <tcp_write_checks+0xc8>
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015344:	2b00      	cmp	r3, #0
 8015346:	d006      	beq.n	8015356 <tcp_write_checks+0xd6>
 8015348:	4b05      	ldr	r3, [pc, #20]	; (8015360 <tcp_write_checks+0xe0>)
 801534a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801534e:	4908      	ldr	r1, [pc, #32]	; (8015370 <tcp_write_checks+0xf0>)
 8015350:	4805      	ldr	r0, [pc, #20]	; (8015368 <tcp_write_checks+0xe8>)
 8015352:	f004 fd89 	bl	8019e68 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8015356:	2300      	movs	r3, #0
}
 8015358:	4618      	mov	r0, r3
 801535a:	3708      	adds	r7, #8
 801535c:	46bd      	mov	sp, r7
 801535e:	bd80      	pop	{r7, pc}
 8015360:	0801c7d8 	.word	0x0801c7d8
 8015364:	0801c8e8 	.word	0x0801c8e8
 8015368:	0801c82c 	.word	0x0801c82c
 801536c:	0801c908 	.word	0x0801c908
 8015370:	0801c944 	.word	0x0801c944

08015374 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8015374:	b590      	push	{r4, r7, lr}
 8015376:	b09b      	sub	sp, #108	; 0x6c
 8015378:	af04      	add	r7, sp, #16
 801537a:	60f8      	str	r0, [r7, #12]
 801537c:	60b9      	str	r1, [r7, #8]
 801537e:	4611      	mov	r1, r2
 8015380:	461a      	mov	r2, r3
 8015382:	460b      	mov	r3, r1
 8015384:	80fb      	strh	r3, [r7, #6]
 8015386:	4613      	mov	r3, r2
 8015388:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801538a:	2300      	movs	r3, #0
 801538c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801538e:	2300      	movs	r3, #0
 8015390:	653b      	str	r3, [r7, #80]	; 0x50
 8015392:	2300      	movs	r3, #0
 8015394:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015396:	2300      	movs	r3, #0
 8015398:	64bb      	str	r3, [r7, #72]	; 0x48
 801539a:	2300      	movs	r3, #0
 801539c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801539e:	2300      	movs	r3, #0
 80153a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80153a4:	2300      	movs	r3, #0
 80153a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80153aa:	2300      	movs	r3, #0
 80153ac:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80153ae:	2300      	movs	r3, #0
 80153b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80153b2:	2300      	movs	r3, #0
 80153b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d109      	bne.n	80153d0 <tcp_write+0x5c>
 80153bc:	4ba5      	ldr	r3, [pc, #660]	; (8015654 <tcp_write+0x2e0>)
 80153be:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80153c2:	49a5      	ldr	r1, [pc, #660]	; (8015658 <tcp_write+0x2e4>)
 80153c4:	48a5      	ldr	r0, [pc, #660]	; (801565c <tcp_write+0x2e8>)
 80153c6:	f004 fd4f 	bl	8019e68 <iprintf>
 80153ca:	f06f 030f 	mvn.w	r3, #15
 80153ce:	e32c      	b.n	8015a2a <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80153d6:	085b      	lsrs	r3, r3, #1
 80153d8:	b29a      	uxth	r2, r3
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80153de:	4293      	cmp	r3, r2
 80153e0:	bf28      	it	cs
 80153e2:	4613      	movcs	r3, r2
 80153e4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80153e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d102      	bne.n	80153f2 <tcp_write+0x7e>
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80153f0:	e000      	b.n	80153f4 <tcp_write+0x80>
 80153f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80153f4:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT_CORE_LOCKED();
 80153f6:	f7f5 fb65 	bl	800aac4 <sys_check_core_locking>
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80153fa:	68bb      	ldr	r3, [r7, #8]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d109      	bne.n	8015414 <tcp_write+0xa0>
 8015400:	4b94      	ldr	r3, [pc, #592]	; (8015654 <tcp_write+0x2e0>)
 8015402:	f240 12ad 	movw	r2, #429	; 0x1ad
 8015406:	4996      	ldr	r1, [pc, #600]	; (8015660 <tcp_write+0x2ec>)
 8015408:	4894      	ldr	r0, [pc, #592]	; (801565c <tcp_write+0x2e8>)
 801540a:	f004 fd2d 	bl	8019e68 <iprintf>
 801540e:	f06f 030f 	mvn.w	r3, #15
 8015412:	e30a      	b.n	8015a2a <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8015414:	88fb      	ldrh	r3, [r7, #6]
 8015416:	4619      	mov	r1, r3
 8015418:	68f8      	ldr	r0, [r7, #12]
 801541a:	f7ff ff31 	bl	8015280 <tcp_write_checks>
 801541e:	4603      	mov	r3, r0
 8015420:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8015424:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015428:	2b00      	cmp	r3, #0
 801542a:	d002      	beq.n	8015432 <tcp_write+0xbe>
    return err;
 801542c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015430:	e2fb      	b.n	8015a2a <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015438:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801543c:	2300      	movs	r3, #0
 801543e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015446:	2b00      	cmp	r3, #0
 8015448:	f000 80f6 	beq.w	8015638 <tcp_write+0x2c4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015450:	653b      	str	r3, [r7, #80]	; 0x50
 8015452:	e002      	b.n	801545a <tcp_write+0xe6>
         last_unsent = last_unsent->next);
 8015454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801545a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d1f8      	bne.n	8015454 <tcp_write+0xe0>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8015462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015464:	7a9b      	ldrb	r3, [r3, #10]
 8015466:	009b      	lsls	r3, r3, #2
 8015468:	b29b      	uxth	r3, r3
 801546a:	f003 0304 	and.w	r3, r3, #4
 801546e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8015470:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015474:	891b      	ldrh	r3, [r3, #8]
 8015476:	4619      	mov	r1, r3
 8015478:	8c3b      	ldrh	r3, [r7, #32]
 801547a:	440b      	add	r3, r1
 801547c:	429a      	cmp	r2, r3
 801547e:	da06      	bge.n	801548e <tcp_write+0x11a>
 8015480:	4b74      	ldr	r3, [pc, #464]	; (8015654 <tcp_write+0x2e0>)
 8015482:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8015486:	4977      	ldr	r1, [pc, #476]	; (8015664 <tcp_write+0x2f0>)
 8015488:	4874      	ldr	r0, [pc, #464]	; (801565c <tcp_write+0x2e8>)
 801548a:	f004 fced 	bl	8019e68 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801548e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015490:	891a      	ldrh	r2, [r3, #8]
 8015492:	8c3b      	ldrh	r3, [r7, #32]
 8015494:	4413      	add	r3, r2
 8015496:	b29b      	uxth	r3, r3
 8015498:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801549a:	1ad3      	subs	r3, r2, r3
 801549c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80154a4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80154a6:	8a7b      	ldrh	r3, [r7, #18]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d026      	beq.n	80154fa <tcp_write+0x186>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80154ac:	8a7b      	ldrh	r3, [r7, #18]
 80154ae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80154b0:	429a      	cmp	r2, r3
 80154b2:	d206      	bcs.n	80154c2 <tcp_write+0x14e>
 80154b4:	4b67      	ldr	r3, [pc, #412]	; (8015654 <tcp_write+0x2e0>)
 80154b6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80154ba:	496b      	ldr	r1, [pc, #428]	; (8015668 <tcp_write+0x2f4>)
 80154bc:	4867      	ldr	r0, [pc, #412]	; (801565c <tcp_write+0x2e8>)
 80154be:	f004 fcd3 	bl	8019e68 <iprintf>
      seg = last_unsent;
 80154c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154c4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80154c6:	8a7b      	ldrh	r3, [r7, #18]
 80154c8:	88fa      	ldrh	r2, [r7, #6]
 80154ca:	4293      	cmp	r3, r2
 80154cc:	bf28      	it	cs
 80154ce:	4613      	movcs	r3, r2
 80154d0:	b29b      	uxth	r3, r3
 80154d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80154d4:	4293      	cmp	r3, r2
 80154d6:	bf28      	it	cs
 80154d8:	4613      	movcs	r3, r2
 80154da:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80154dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80154e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80154e2:	4413      	add	r3, r2
 80154e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80154e8:	8a7a      	ldrh	r2, [r7, #18]
 80154ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80154ec:	1ad3      	subs	r3, r2, r3
 80154ee:	b29b      	uxth	r3, r3
 80154f0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80154f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80154f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80154f6:	1ad3      	subs	r3, r2, r3
 80154f8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80154fa:	8a7b      	ldrh	r3, [r7, #18]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d00b      	beq.n	8015518 <tcp_write+0x1a4>
 8015500:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015504:	88fb      	ldrh	r3, [r7, #6]
 8015506:	429a      	cmp	r2, r3
 8015508:	d006      	beq.n	8015518 <tcp_write+0x1a4>
 801550a:	4b52      	ldr	r3, [pc, #328]	; (8015654 <tcp_write+0x2e0>)
 801550c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015510:	4956      	ldr	r1, [pc, #344]	; (801566c <tcp_write+0x2f8>)
 8015512:	4852      	ldr	r0, [pc, #328]	; (801565c <tcp_write+0x2e8>)
 8015514:	f004 fca8 	bl	8019e68 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8015518:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801551c:	88fb      	ldrh	r3, [r7, #6]
 801551e:	429a      	cmp	r2, r3
 8015520:	f080 8167 	bcs.w	80157f2 <tcp_write+0x47e>
 8015524:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015526:	2b00      	cmp	r3, #0
 8015528:	f000 8163 	beq.w	80157f2 <tcp_write+0x47e>
 801552c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801552e:	891b      	ldrh	r3, [r3, #8]
 8015530:	2b00      	cmp	r3, #0
 8015532:	f000 815e 	beq.w	80157f2 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8015536:	88fa      	ldrh	r2, [r7, #6]
 8015538:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801553c:	1ad2      	subs	r2, r2, r3
 801553e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015540:	4293      	cmp	r3, r2
 8015542:	bfa8      	it	ge
 8015544:	4613      	movge	r3, r2
 8015546:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8015548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801554a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801554c:	797b      	ldrb	r3, [r7, #5]
 801554e:	f003 0301 	and.w	r3, r3, #1
 8015552:	2b00      	cmp	r3, #0
 8015554:	d027      	beq.n	80155a6 <tcp_write+0x232>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8015556:	f107 0012 	add.w	r0, r7, #18
 801555a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801555c:	8bf9      	ldrh	r1, [r7, #30]
 801555e:	2301      	movs	r3, #1
 8015560:	9302      	str	r3, [sp, #8]
 8015562:	797b      	ldrb	r3, [r7, #5]
 8015564:	9301      	str	r3, [sp, #4]
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	9300      	str	r3, [sp, #0]
 801556a:	4603      	mov	r3, r0
 801556c:	2000      	movs	r0, #0
 801556e:	f7ff fe0d 	bl	801518c <tcp_pbuf_prealloc>
 8015572:	6578      	str	r0, [r7, #84]	; 0x54
 8015574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015576:	2b00      	cmp	r3, #0
 8015578:	f000 8225 	beq.w	80159c6 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801557c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801557e:	6858      	ldr	r0, [r3, #4]
 8015580:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015584:	68ba      	ldr	r2, [r7, #8]
 8015586:	4413      	add	r3, r2
 8015588:	8bfa      	ldrh	r2, [r7, #30]
 801558a:	4619      	mov	r1, r3
 801558c:	f004 fe8c 	bl	801a2a8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8015590:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015592:	f7fb f819 	bl	80105c8 <pbuf_clen>
 8015596:	4603      	mov	r3, r0
 8015598:	461a      	mov	r2, r3
 801559a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801559e:	4413      	add	r3, r2
 80155a0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80155a4:	e041      	b.n	801562a <tcp_write+0x2b6>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80155a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80155a8:	685b      	ldr	r3, [r3, #4]
 80155aa:	637b      	str	r3, [r7, #52]	; 0x34
 80155ac:	e002      	b.n	80155b4 <tcp_write+0x240>
 80155ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	637b      	str	r3, [r7, #52]	; 0x34
 80155b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d1f8      	bne.n	80155ae <tcp_write+0x23a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80155bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155be:	7b1b      	ldrb	r3, [r3, #12]
 80155c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d115      	bne.n	80155f4 <tcp_write+0x280>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80155c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155ca:	685b      	ldr	r3, [r3, #4]
 80155cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80155ce:	8952      	ldrh	r2, [r2, #10]
 80155d0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80155d2:	68ba      	ldr	r2, [r7, #8]
 80155d4:	429a      	cmp	r2, r3
 80155d6:	d10d      	bne.n	80155f4 <tcp_write+0x280>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80155d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d006      	beq.n	80155ee <tcp_write+0x27a>
 80155e0:	4b1c      	ldr	r3, [pc, #112]	; (8015654 <tcp_write+0x2e0>)
 80155e2:	f240 2231 	movw	r2, #561	; 0x231
 80155e6:	4922      	ldr	r1, [pc, #136]	; (8015670 <tcp_write+0x2fc>)
 80155e8:	481c      	ldr	r0, [pc, #112]	; (801565c <tcp_write+0x2e8>)
 80155ea:	f004 fc3d 	bl	8019e68 <iprintf>
          extendlen = seglen;
 80155ee:	8bfb      	ldrh	r3, [r7, #30]
 80155f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80155f2:	e01a      	b.n	801562a <tcp_write+0x2b6>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80155f4:	8bfb      	ldrh	r3, [r7, #30]
 80155f6:	2201      	movs	r2, #1
 80155f8:	4619      	mov	r1, r3
 80155fa:	2000      	movs	r0, #0
 80155fc:	f7fa fc6e 	bl	800fedc <pbuf_alloc>
 8015600:	6578      	str	r0, [r7, #84]	; 0x54
 8015602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015604:	2b00      	cmp	r3, #0
 8015606:	f000 81e0 	beq.w	80159ca <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801560a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801560e:	68ba      	ldr	r2, [r7, #8]
 8015610:	441a      	add	r2, r3
 8015612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015614:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8015616:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015618:	f7fa ffd6 	bl	80105c8 <pbuf_clen>
 801561c:	4603      	mov	r3, r0
 801561e:	461a      	mov	r2, r3
 8015620:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015624:	4413      	add	r3, r2
 8015626:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801562a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801562e:	8bfb      	ldrh	r3, [r7, #30]
 8015630:	4413      	add	r3, r2
 8015632:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8015636:	e0dc      	b.n	80157f2 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801563e:	2b00      	cmp	r3, #0
 8015640:	f000 80d7 	beq.w	80157f2 <tcp_write+0x47e>
 8015644:	4b03      	ldr	r3, [pc, #12]	; (8015654 <tcp_write+0x2e0>)
 8015646:	f240 224a 	movw	r2, #586	; 0x24a
 801564a:	490a      	ldr	r1, [pc, #40]	; (8015674 <tcp_write+0x300>)
 801564c:	4803      	ldr	r0, [pc, #12]	; (801565c <tcp_write+0x2e8>)
 801564e:	f004 fc0b 	bl	8019e68 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8015652:	e0ce      	b.n	80157f2 <tcp_write+0x47e>
 8015654:	0801c7d8 	.word	0x0801c7d8
 8015658:	0801c978 	.word	0x0801c978
 801565c:	0801c82c 	.word	0x0801c82c
 8015660:	0801c990 	.word	0x0801c990
 8015664:	0801c9c4 	.word	0x0801c9c4
 8015668:	0801c9dc 	.word	0x0801c9dc
 801566c:	0801c9fc 	.word	0x0801c9fc
 8015670:	0801ca1c 	.word	0x0801ca1c
 8015674:	0801ca48 	.word	0x0801ca48
    struct pbuf *p;
    u16_t left = len - pos;
 8015678:	88fa      	ldrh	r2, [r7, #6]
 801567a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801567e:	1ad3      	subs	r3, r2, r3
 8015680:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8015682:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015686:	b29b      	uxth	r3, r3
 8015688:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801568a:	1ad3      	subs	r3, r2, r3
 801568c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801568e:	8b7a      	ldrh	r2, [r7, #26]
 8015690:	8bbb      	ldrh	r3, [r7, #28]
 8015692:	4293      	cmp	r3, r2
 8015694:	bf28      	it	cs
 8015696:	4613      	movcs	r3, r2
 8015698:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801569a:	797b      	ldrb	r3, [r7, #5]
 801569c:	f003 0301 	and.w	r3, r3, #1
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d036      	beq.n	8015712 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80156a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80156a8:	b29a      	uxth	r2, r3
 80156aa:	8b3b      	ldrh	r3, [r7, #24]
 80156ac:	4413      	add	r3, r2
 80156ae:	b299      	uxth	r1, r3
 80156b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	bf0c      	ite	eq
 80156b6:	2301      	moveq	r3, #1
 80156b8:	2300      	movne	r3, #0
 80156ba:	b2db      	uxtb	r3, r3
 80156bc:	f107 0012 	add.w	r0, r7, #18
 80156c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80156c2:	9302      	str	r3, [sp, #8]
 80156c4:	797b      	ldrb	r3, [r7, #5]
 80156c6:	9301      	str	r3, [sp, #4]
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	9300      	str	r3, [sp, #0]
 80156cc:	4603      	mov	r3, r0
 80156ce:	2036      	movs	r0, #54	; 0x36
 80156d0:	f7ff fd5c 	bl	801518c <tcp_pbuf_prealloc>
 80156d4:	6338      	str	r0, [r7, #48]	; 0x30
 80156d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156d8:	2b00      	cmp	r3, #0
 80156da:	f000 8178 	beq.w	80159ce <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80156de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156e0:	895b      	ldrh	r3, [r3, #10]
 80156e2:	8b3a      	ldrh	r2, [r7, #24]
 80156e4:	429a      	cmp	r2, r3
 80156e6:	d906      	bls.n	80156f6 <tcp_write+0x382>
 80156e8:	4b8c      	ldr	r3, [pc, #560]	; (801591c <tcp_write+0x5a8>)
 80156ea:	f240 2266 	movw	r2, #614	; 0x266
 80156ee:	498c      	ldr	r1, [pc, #560]	; (8015920 <tcp_write+0x5ac>)
 80156f0:	488c      	ldr	r0, [pc, #560]	; (8015924 <tcp_write+0x5b0>)
 80156f2:	f004 fbb9 	bl	8019e68 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80156f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156f8:	685a      	ldr	r2, [r3, #4]
 80156fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80156fe:	18d0      	adds	r0, r2, r3
 8015700:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015704:	68ba      	ldr	r2, [r7, #8]
 8015706:	4413      	add	r3, r2
 8015708:	8b3a      	ldrh	r2, [r7, #24]
 801570a:	4619      	mov	r1, r3
 801570c:	f004 fdcc 	bl	801a2a8 <memcpy>
 8015710:	e02f      	b.n	8015772 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8015712:	8a7b      	ldrh	r3, [r7, #18]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d006      	beq.n	8015726 <tcp_write+0x3b2>
 8015718:	4b80      	ldr	r3, [pc, #512]	; (801591c <tcp_write+0x5a8>)
 801571a:	f240 2271 	movw	r2, #625	; 0x271
 801571e:	4982      	ldr	r1, [pc, #520]	; (8015928 <tcp_write+0x5b4>)
 8015720:	4880      	ldr	r0, [pc, #512]	; (8015924 <tcp_write+0x5b0>)
 8015722:	f004 fba1 	bl	8019e68 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8015726:	8b3b      	ldrh	r3, [r7, #24]
 8015728:	2201      	movs	r2, #1
 801572a:	4619      	mov	r1, r3
 801572c:	2036      	movs	r0, #54	; 0x36
 801572e:	f7fa fbd5 	bl	800fedc <pbuf_alloc>
 8015732:	6178      	str	r0, [r7, #20]
 8015734:	697b      	ldr	r3, [r7, #20]
 8015736:	2b00      	cmp	r3, #0
 8015738:	f000 814b 	beq.w	80159d2 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801573c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015740:	68ba      	ldr	r2, [r7, #8]
 8015742:	441a      	add	r2, r3
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015748:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801574c:	b29b      	uxth	r3, r3
 801574e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015752:	4619      	mov	r1, r3
 8015754:	2036      	movs	r0, #54	; 0x36
 8015756:	f7fa fbc1 	bl	800fedc <pbuf_alloc>
 801575a:	6338      	str	r0, [r7, #48]	; 0x30
 801575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801575e:	2b00      	cmp	r3, #0
 8015760:	d103      	bne.n	801576a <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8015762:	6978      	ldr	r0, [r7, #20]
 8015764:	f7fa fea2 	bl	80104ac <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8015768:	e136      	b.n	80159d8 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801576a:	6979      	ldr	r1, [r7, #20]
 801576c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801576e:	f7fa ff6b 	bl	8010648 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8015772:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015774:	f7fa ff28 	bl	80105c8 <pbuf_clen>
 8015778:	4603      	mov	r3, r0
 801577a:	461a      	mov	r2, r3
 801577c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015780:	4413      	add	r3, r2
 8015782:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8015786:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801578a:	2b10      	cmp	r3, #16
 801578c:	d903      	bls.n	8015796 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801578e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015790:	f7fa fe8c 	bl	80104ac <pbuf_free>
      goto memerr;
 8015794:	e120      	b.n	80159d8 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801579a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801579e:	441a      	add	r2, r3
 80157a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80157a4:	9300      	str	r3, [sp, #0]
 80157a6:	4613      	mov	r3, r2
 80157a8:	2200      	movs	r2, #0
 80157aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80157ac:	68f8      	ldr	r0, [r7, #12]
 80157ae:	f7ff fc4f 	bl	8015050 <tcp_create_segment>
 80157b2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80157b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	f000 810d 	beq.w	80159d6 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80157bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d102      	bne.n	80157c8 <tcp_write+0x454>
      queue = seg;
 80157c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80157c4:	647b      	str	r3, [r7, #68]	; 0x44
 80157c6:	e00c      	b.n	80157e2 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80157c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d106      	bne.n	80157dc <tcp_write+0x468>
 80157ce:	4b53      	ldr	r3, [pc, #332]	; (801591c <tcp_write+0x5a8>)
 80157d0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80157d4:	4955      	ldr	r1, [pc, #340]	; (801592c <tcp_write+0x5b8>)
 80157d6:	4853      	ldr	r0, [pc, #332]	; (8015924 <tcp_write+0x5b0>)
 80157d8:	f004 fb46 	bl	8019e68 <iprintf>
      prev_seg->next = seg;
 80157dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80157de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80157e0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80157e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80157e4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80157e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80157ea:	8b3b      	ldrh	r3, [r7, #24]
 80157ec:	4413      	add	r3, r2
 80157ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80157f2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80157f6:	88fb      	ldrh	r3, [r7, #6]
 80157f8:	429a      	cmp	r2, r3
 80157fa:	f4ff af3d 	bcc.w	8015678 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80157fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015800:	2b00      	cmp	r3, #0
 8015802:	d02c      	beq.n	801585e <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8015804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015806:	685b      	ldr	r3, [r3, #4]
 8015808:	62fb      	str	r3, [r7, #44]	; 0x2c
 801580a:	e01e      	b.n	801584a <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 801580c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801580e:	891a      	ldrh	r2, [r3, #8]
 8015810:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015812:	4413      	add	r3, r2
 8015814:	b29a      	uxth	r2, r3
 8015816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015818:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801581a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d110      	bne.n	8015844 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8015822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015824:	685b      	ldr	r3, [r3, #4]
 8015826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015828:	8952      	ldrh	r2, [r2, #10]
 801582a:	4413      	add	r3, r2
 801582c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801582e:	68b9      	ldr	r1, [r7, #8]
 8015830:	4618      	mov	r0, r3
 8015832:	f004 fd39 	bl	801a2a8 <memcpy>
        p->len += oversize_used;
 8015836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015838:	895a      	ldrh	r2, [r3, #10]
 801583a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801583c:	4413      	add	r3, r2
 801583e:	b29a      	uxth	r2, r3
 8015840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015842:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8015844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	62fb      	str	r3, [r7, #44]	; 0x2c
 801584a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801584c:	2b00      	cmp	r3, #0
 801584e:	d1dd      	bne.n	801580c <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8015850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015852:	891a      	ldrh	r2, [r3, #8]
 8015854:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015856:	4413      	add	r3, r2
 8015858:	b29a      	uxth	r2, r3
 801585a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801585c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801585e:	8a7a      	ldrh	r2, [r7, #18]
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8015866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015868:	2b00      	cmp	r3, #0
 801586a:	d018      	beq.n	801589e <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801586c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801586e:	2b00      	cmp	r3, #0
 8015870:	d106      	bne.n	8015880 <tcp_write+0x50c>
 8015872:	4b2a      	ldr	r3, [pc, #168]	; (801591c <tcp_write+0x5a8>)
 8015874:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8015878:	492d      	ldr	r1, [pc, #180]	; (8015930 <tcp_write+0x5bc>)
 801587a:	482a      	ldr	r0, [pc, #168]	; (8015924 <tcp_write+0x5b0>)
 801587c:	f004 faf4 	bl	8019e68 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8015880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015882:	685b      	ldr	r3, [r3, #4]
 8015884:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015886:	4618      	mov	r0, r3
 8015888:	f7fa fede 	bl	8010648 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801588c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801588e:	891a      	ldrh	r2, [r3, #8]
 8015890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015892:	891b      	ldrh	r3, [r3, #8]
 8015894:	4413      	add	r3, r2
 8015896:	b29a      	uxth	r2, r3
 8015898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801589a:	811a      	strh	r2, [r3, #8]
 801589c:	e037      	b.n	801590e <tcp_write+0x59a>
  } else if (extendlen > 0) {
 801589e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d034      	beq.n	801590e <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80158a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d003      	beq.n	80158b2 <tcp_write+0x53e>
 80158aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158ac:	685b      	ldr	r3, [r3, #4]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d106      	bne.n	80158c0 <tcp_write+0x54c>
 80158b2:	4b1a      	ldr	r3, [pc, #104]	; (801591c <tcp_write+0x5a8>)
 80158b4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80158b8:	491e      	ldr	r1, [pc, #120]	; (8015934 <tcp_write+0x5c0>)
 80158ba:	481a      	ldr	r0, [pc, #104]	; (8015924 <tcp_write+0x5b0>)
 80158bc:	f004 fad4 	bl	8019e68 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80158c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158c2:	685b      	ldr	r3, [r3, #4]
 80158c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80158c6:	e009      	b.n	80158dc <tcp_write+0x568>
      p->tot_len += extendlen;
 80158c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158ca:	891a      	ldrh	r2, [r3, #8]
 80158cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80158ce:	4413      	add	r3, r2
 80158d0:	b29a      	uxth	r2, r3
 80158d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158d4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80158d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	62bb      	str	r3, [r7, #40]	; 0x28
 80158dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d1f1      	bne.n	80158c8 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 80158e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158e6:	891a      	ldrh	r2, [r3, #8]
 80158e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80158ea:	4413      	add	r3, r2
 80158ec:	b29a      	uxth	r2, r3
 80158ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158f0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80158f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158f4:	895a      	ldrh	r2, [r3, #10]
 80158f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80158f8:	4413      	add	r3, r2
 80158fa:	b29a      	uxth	r2, r3
 80158fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158fe:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8015900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015902:	891a      	ldrh	r2, [r3, #8]
 8015904:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015906:	4413      	add	r3, r2
 8015908:	b29a      	uxth	r2, r3
 801590a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801590c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801590e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015910:	2b00      	cmp	r3, #0
 8015912:	d111      	bne.n	8015938 <tcp_write+0x5c4>
    pcb->unsent = queue;
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015918:	66da      	str	r2, [r3, #108]	; 0x6c
 801591a:	e010      	b.n	801593e <tcp_write+0x5ca>
 801591c:	0801c7d8 	.word	0x0801c7d8
 8015920:	0801ca78 	.word	0x0801ca78
 8015924:	0801c82c 	.word	0x0801c82c
 8015928:	0801cab8 	.word	0x0801cab8
 801592c:	0801cac8 	.word	0x0801cac8
 8015930:	0801cadc 	.word	0x0801cadc
 8015934:	0801cb14 	.word	0x0801cb14
  } else {
    last_unsent->next = queue;
 8015938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801593a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801593c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8015942:	88fb      	ldrh	r3, [r7, #6]
 8015944:	441a      	add	r2, r3
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8015950:	88fb      	ldrh	r3, [r7, #6]
 8015952:	1ad3      	subs	r3, r2, r3
 8015954:	b29a      	uxth	r2, r3
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015962:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801596c:	2b00      	cmp	r3, #0
 801596e:	d00e      	beq.n	801598e <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015974:	2b00      	cmp	r3, #0
 8015976:	d10a      	bne.n	801598e <tcp_write+0x61a>
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801597c:	2b00      	cmp	r3, #0
 801597e:	d106      	bne.n	801598e <tcp_write+0x61a>
 8015980:	4b2c      	ldr	r3, [pc, #176]	; (8015a34 <tcp_write+0x6c0>)
 8015982:	f240 3212 	movw	r2, #786	; 0x312
 8015986:	492c      	ldr	r1, [pc, #176]	; (8015a38 <tcp_write+0x6c4>)
 8015988:	482c      	ldr	r0, [pc, #176]	; (8015a3c <tcp_write+0x6c8>)
 801598a:	f004 fa6d 	bl	8019e68 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801598e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015990:	2b00      	cmp	r3, #0
 8015992:	d016      	beq.n	80159c2 <tcp_write+0x64e>
 8015994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015996:	68db      	ldr	r3, [r3, #12]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d012      	beq.n	80159c2 <tcp_write+0x64e>
 801599c:	797b      	ldrb	r3, [r7, #5]
 801599e:	f003 0302 	and.w	r3, r3, #2
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d10d      	bne.n	80159c2 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80159a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80159a8:	68db      	ldr	r3, [r3, #12]
 80159aa:	899b      	ldrh	r3, [r3, #12]
 80159ac:	b29c      	uxth	r4, r3
 80159ae:	2008      	movs	r0, #8
 80159b0:	f7f9 f8b2 	bl	800eb18 <lwip_htons>
 80159b4:	4603      	mov	r3, r0
 80159b6:	461a      	mov	r2, r3
 80159b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80159ba:	68db      	ldr	r3, [r3, #12]
 80159bc:	4322      	orrs	r2, r4
 80159be:	b292      	uxth	r2, r2
 80159c0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80159c2:	2300      	movs	r3, #0
 80159c4:	e031      	b.n	8015a2a <tcp_write+0x6b6>
          goto memerr;
 80159c6:	bf00      	nop
 80159c8:	e006      	b.n	80159d8 <tcp_write+0x664>
            goto memerr;
 80159ca:	bf00      	nop
 80159cc:	e004      	b.n	80159d8 <tcp_write+0x664>
        goto memerr;
 80159ce:	bf00      	nop
 80159d0:	e002      	b.n	80159d8 <tcp_write+0x664>
        goto memerr;
 80159d2:	bf00      	nop
 80159d4:	e000      	b.n	80159d8 <tcp_write+0x664>
      goto memerr;
 80159d6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	8b5b      	ldrh	r3, [r3, #26]
 80159dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80159e0:	b29a      	uxth	r2, r3
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80159e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d002      	beq.n	80159f2 <tcp_write+0x67e>
    pbuf_free(concat_p);
 80159ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80159ee:	f7fa fd5d 	bl	80104ac <pbuf_free>
  }
  if (queue != NULL) {
 80159f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d002      	beq.n	80159fe <tcp_write+0x68a>
    tcp_segs_free(queue);
 80159f8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80159fa:	f7fc fb5d 	bl	80120b8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d00e      	beq.n	8015a26 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d10a      	bne.n	8015a26 <tcp_write+0x6b2>
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d106      	bne.n	8015a26 <tcp_write+0x6b2>
 8015a18:	4b06      	ldr	r3, [pc, #24]	; (8015a34 <tcp_write+0x6c0>)
 8015a1a:	f240 3227 	movw	r2, #807	; 0x327
 8015a1e:	4906      	ldr	r1, [pc, #24]	; (8015a38 <tcp_write+0x6c4>)
 8015a20:	4806      	ldr	r0, [pc, #24]	; (8015a3c <tcp_write+0x6c8>)
 8015a22:	f004 fa21 	bl	8019e68 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8015a26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	375c      	adds	r7, #92	; 0x5c
 8015a2e:	46bd      	mov	sp, r7
 8015a30:	bd90      	pop	{r4, r7, pc}
 8015a32:	bf00      	nop
 8015a34:	0801c7d8 	.word	0x0801c7d8
 8015a38:	0801cb4c 	.word	0x0801cb4c
 8015a3c:	0801c82c 	.word	0x0801c82c

08015a40 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8015a40:	b590      	push	{r4, r7, lr}
 8015a42:	b08b      	sub	sp, #44	; 0x2c
 8015a44:	af02      	add	r7, sp, #8
 8015a46:	6078      	str	r0, [r7, #4]
 8015a48:	460b      	mov	r3, r1
 8015a4a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	61fb      	str	r3, [r7, #28]
 8015a50:	2300      	movs	r3, #0
 8015a52:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8015a54:	2300      	movs	r3, #0
 8015a56:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d106      	bne.n	8015a6c <tcp_split_unsent_seg+0x2c>
 8015a5e:	4b95      	ldr	r3, [pc, #596]	; (8015cb4 <tcp_split_unsent_seg+0x274>)
 8015a60:	f240 324b 	movw	r2, #843	; 0x34b
 8015a64:	4994      	ldr	r1, [pc, #592]	; (8015cb8 <tcp_split_unsent_seg+0x278>)
 8015a66:	4895      	ldr	r0, [pc, #596]	; (8015cbc <tcp_split_unsent_seg+0x27c>)
 8015a68:	f004 f9fe 	bl	8019e68 <iprintf>

  useg = pcb->unsent;
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a70:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8015a72:	697b      	ldr	r3, [r7, #20]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d102      	bne.n	8015a7e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8015a78:	f04f 33ff 	mov.w	r3, #4294967295
 8015a7c:	e116      	b.n	8015cac <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8015a7e:	887b      	ldrh	r3, [r7, #2]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d109      	bne.n	8015a98 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8015a84:	4b8b      	ldr	r3, [pc, #556]	; (8015cb4 <tcp_split_unsent_seg+0x274>)
 8015a86:	f240 3253 	movw	r2, #851	; 0x353
 8015a8a:	498d      	ldr	r1, [pc, #564]	; (8015cc0 <tcp_split_unsent_seg+0x280>)
 8015a8c:	488b      	ldr	r0, [pc, #556]	; (8015cbc <tcp_split_unsent_seg+0x27c>)
 8015a8e:	f004 f9eb 	bl	8019e68 <iprintf>
    return ERR_VAL;
 8015a92:	f06f 0305 	mvn.w	r3, #5
 8015a96:	e109      	b.n	8015cac <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8015a98:	697b      	ldr	r3, [r7, #20]
 8015a9a:	891b      	ldrh	r3, [r3, #8]
 8015a9c:	887a      	ldrh	r2, [r7, #2]
 8015a9e:	429a      	cmp	r2, r3
 8015aa0:	d301      	bcc.n	8015aa6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	e102      	b.n	8015cac <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015aaa:	887a      	ldrh	r2, [r7, #2]
 8015aac:	429a      	cmp	r2, r3
 8015aae:	d906      	bls.n	8015abe <tcp_split_unsent_seg+0x7e>
 8015ab0:	4b80      	ldr	r3, [pc, #512]	; (8015cb4 <tcp_split_unsent_seg+0x274>)
 8015ab2:	f240 325b 	movw	r2, #859	; 0x35b
 8015ab6:	4983      	ldr	r1, [pc, #524]	; (8015cc4 <tcp_split_unsent_seg+0x284>)
 8015ab8:	4880      	ldr	r0, [pc, #512]	; (8015cbc <tcp_split_unsent_seg+0x27c>)
 8015aba:	f004 f9d5 	bl	8019e68 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8015abe:	697b      	ldr	r3, [r7, #20]
 8015ac0:	891b      	ldrh	r3, [r3, #8]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d106      	bne.n	8015ad4 <tcp_split_unsent_seg+0x94>
 8015ac6:	4b7b      	ldr	r3, [pc, #492]	; (8015cb4 <tcp_split_unsent_seg+0x274>)
 8015ac8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8015acc:	497e      	ldr	r1, [pc, #504]	; (8015cc8 <tcp_split_unsent_seg+0x288>)
 8015ace:	487b      	ldr	r0, [pc, #492]	; (8015cbc <tcp_split_unsent_seg+0x27c>)
 8015ad0:	f004 f9ca 	bl	8019e68 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8015ad4:	697b      	ldr	r3, [r7, #20]
 8015ad6:	7a9b      	ldrb	r3, [r3, #10]
 8015ad8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8015ada:	7bfb      	ldrb	r3, [r7, #15]
 8015adc:	009b      	lsls	r3, r3, #2
 8015ade:	b2db      	uxtb	r3, r3
 8015ae0:	f003 0304 	and.w	r3, r3, #4
 8015ae4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8015ae6:	697b      	ldr	r3, [r7, #20]
 8015ae8:	891a      	ldrh	r2, [r3, #8]
 8015aea:	887b      	ldrh	r3, [r7, #2]
 8015aec:	1ad3      	subs	r3, r2, r3
 8015aee:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8015af0:	7bbb      	ldrb	r3, [r7, #14]
 8015af2:	b29a      	uxth	r2, r3
 8015af4:	89bb      	ldrh	r3, [r7, #12]
 8015af6:	4413      	add	r3, r2
 8015af8:	b29b      	uxth	r3, r3
 8015afa:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015afe:	4619      	mov	r1, r3
 8015b00:	2036      	movs	r0, #54	; 0x36
 8015b02:	f7fa f9eb 	bl	800fedc <pbuf_alloc>
 8015b06:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015b08:	693b      	ldr	r3, [r7, #16]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	f000 80b7 	beq.w	8015c7e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8015b10:	697b      	ldr	r3, [r7, #20]
 8015b12:	685b      	ldr	r3, [r3, #4]
 8015b14:	891a      	ldrh	r2, [r3, #8]
 8015b16:	697b      	ldr	r3, [r7, #20]
 8015b18:	891b      	ldrh	r3, [r3, #8]
 8015b1a:	1ad3      	subs	r3, r2, r3
 8015b1c:	b29a      	uxth	r2, r3
 8015b1e:	887b      	ldrh	r3, [r7, #2]
 8015b20:	4413      	add	r3, r2
 8015b22:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015b24:	697b      	ldr	r3, [r7, #20]
 8015b26:	6858      	ldr	r0, [r3, #4]
 8015b28:	693b      	ldr	r3, [r7, #16]
 8015b2a:	685a      	ldr	r2, [r3, #4]
 8015b2c:	7bbb      	ldrb	r3, [r7, #14]
 8015b2e:	18d1      	adds	r1, r2, r3
 8015b30:	897b      	ldrh	r3, [r7, #10]
 8015b32:	89ba      	ldrh	r2, [r7, #12]
 8015b34:	f7fa feb0 	bl	8010898 <pbuf_copy_partial>
 8015b38:	4603      	mov	r3, r0
 8015b3a:	461a      	mov	r2, r3
 8015b3c:	89bb      	ldrh	r3, [r7, #12]
 8015b3e:	4293      	cmp	r3, r2
 8015b40:	f040 809f 	bne.w	8015c82 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015b44:	697b      	ldr	r3, [r7, #20]
 8015b46:	68db      	ldr	r3, [r3, #12]
 8015b48:	899b      	ldrh	r3, [r3, #12]
 8015b4a:	b29b      	uxth	r3, r3
 8015b4c:	4618      	mov	r0, r3
 8015b4e:	f7f8 ffe3 	bl	800eb18 <lwip_htons>
 8015b52:	4603      	mov	r3, r0
 8015b54:	b2db      	uxtb	r3, r3
 8015b56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015b5a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8015b60:	7efb      	ldrb	r3, [r7, #27]
 8015b62:	f003 0308 	and.w	r3, r3, #8
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d007      	beq.n	8015b7a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8015b6a:	7efb      	ldrb	r3, [r7, #27]
 8015b6c:	f023 0308 	bic.w	r3, r3, #8
 8015b70:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8015b72:	7ebb      	ldrb	r3, [r7, #26]
 8015b74:	f043 0308 	orr.w	r3, r3, #8
 8015b78:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8015b7a:	7efb      	ldrb	r3, [r7, #27]
 8015b7c:	f003 0301 	and.w	r3, r3, #1
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d007      	beq.n	8015b94 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8015b84:	7efb      	ldrb	r3, [r7, #27]
 8015b86:	f023 0301 	bic.w	r3, r3, #1
 8015b8a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8015b8c:	7ebb      	ldrb	r3, [r7, #26]
 8015b8e:	f043 0301 	orr.w	r3, r3, #1
 8015b92:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8015b94:	697b      	ldr	r3, [r7, #20]
 8015b96:	68db      	ldr	r3, [r3, #12]
 8015b98:	685b      	ldr	r3, [r3, #4]
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	f7f8 ffd1 	bl	800eb42 <lwip_htonl>
 8015ba0:	4602      	mov	r2, r0
 8015ba2:	887b      	ldrh	r3, [r7, #2]
 8015ba4:	18d1      	adds	r1, r2, r3
 8015ba6:	7eba      	ldrb	r2, [r7, #26]
 8015ba8:	7bfb      	ldrb	r3, [r7, #15]
 8015baa:	9300      	str	r3, [sp, #0]
 8015bac:	460b      	mov	r3, r1
 8015bae:	6939      	ldr	r1, [r7, #16]
 8015bb0:	6878      	ldr	r0, [r7, #4]
 8015bb2:	f7ff fa4d 	bl	8015050 <tcp_create_segment>
 8015bb6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8015bb8:	69fb      	ldr	r3, [r7, #28]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d063      	beq.n	8015c86 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8015bbe:	697b      	ldr	r3, [r7, #20]
 8015bc0:	685b      	ldr	r3, [r3, #4]
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	f7fa fd00 	bl	80105c8 <pbuf_clen>
 8015bc8:	4603      	mov	r3, r0
 8015bca:	461a      	mov	r2, r3
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015bd2:	1a9b      	subs	r3, r3, r2
 8015bd4:	b29a      	uxth	r2, r3
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8015bdc:	697b      	ldr	r3, [r7, #20]
 8015bde:	6858      	ldr	r0, [r3, #4]
 8015be0:	697b      	ldr	r3, [r7, #20]
 8015be2:	685b      	ldr	r3, [r3, #4]
 8015be4:	891a      	ldrh	r2, [r3, #8]
 8015be6:	89bb      	ldrh	r3, [r7, #12]
 8015be8:	1ad3      	subs	r3, r2, r3
 8015bea:	b29b      	uxth	r3, r3
 8015bec:	4619      	mov	r1, r3
 8015bee:	f7fa fad7 	bl	80101a0 <pbuf_realloc>
  useg->len -= remainder;
 8015bf2:	697b      	ldr	r3, [r7, #20]
 8015bf4:	891a      	ldrh	r2, [r3, #8]
 8015bf6:	89bb      	ldrh	r3, [r7, #12]
 8015bf8:	1ad3      	subs	r3, r2, r3
 8015bfa:	b29a      	uxth	r2, r3
 8015bfc:	697b      	ldr	r3, [r7, #20]
 8015bfe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8015c00:	697b      	ldr	r3, [r7, #20]
 8015c02:	68db      	ldr	r3, [r3, #12]
 8015c04:	899b      	ldrh	r3, [r3, #12]
 8015c06:	b29c      	uxth	r4, r3
 8015c08:	7efb      	ldrb	r3, [r7, #27]
 8015c0a:	b29b      	uxth	r3, r3
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	f7f8 ff83 	bl	800eb18 <lwip_htons>
 8015c12:	4603      	mov	r3, r0
 8015c14:	461a      	mov	r2, r3
 8015c16:	697b      	ldr	r3, [r7, #20]
 8015c18:	68db      	ldr	r3, [r3, #12]
 8015c1a:	4322      	orrs	r2, r4
 8015c1c:	b292      	uxth	r2, r2
 8015c1e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015c20:	697b      	ldr	r3, [r7, #20]
 8015c22:	685b      	ldr	r3, [r3, #4]
 8015c24:	4618      	mov	r0, r3
 8015c26:	f7fa fccf 	bl	80105c8 <pbuf_clen>
 8015c2a:	4603      	mov	r3, r0
 8015c2c:	461a      	mov	r2, r3
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015c34:	4413      	add	r3, r2
 8015c36:	b29a      	uxth	r2, r3
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015c3e:	69fb      	ldr	r3, [r7, #28]
 8015c40:	685b      	ldr	r3, [r3, #4]
 8015c42:	4618      	mov	r0, r3
 8015c44:	f7fa fcc0 	bl	80105c8 <pbuf_clen>
 8015c48:	4603      	mov	r3, r0
 8015c4a:	461a      	mov	r2, r3
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015c52:	4413      	add	r3, r2
 8015c54:	b29a      	uxth	r2, r3
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8015c5c:	697b      	ldr	r3, [r7, #20]
 8015c5e:	681a      	ldr	r2, [r3, #0]
 8015c60:	69fb      	ldr	r3, [r7, #28]
 8015c62:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8015c64:	697b      	ldr	r3, [r7, #20]
 8015c66:	69fa      	ldr	r2, [r7, #28]
 8015c68:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8015c6a:	69fb      	ldr	r3, [r7, #28]
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d103      	bne.n	8015c7a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	2200      	movs	r2, #0
 8015c76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	e016      	b.n	8015cac <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8015c7e:	bf00      	nop
 8015c80:	e002      	b.n	8015c88 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015c82:	bf00      	nop
 8015c84:	e000      	b.n	8015c88 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015c86:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8015c88:	69fb      	ldr	r3, [r7, #28]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d006      	beq.n	8015c9c <tcp_split_unsent_seg+0x25c>
 8015c8e:	4b09      	ldr	r3, [pc, #36]	; (8015cb4 <tcp_split_unsent_seg+0x274>)
 8015c90:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8015c94:	490d      	ldr	r1, [pc, #52]	; (8015ccc <tcp_split_unsent_seg+0x28c>)
 8015c96:	4809      	ldr	r0, [pc, #36]	; (8015cbc <tcp_split_unsent_seg+0x27c>)
 8015c98:	f004 f8e6 	bl	8019e68 <iprintf>
  if (p != NULL) {
 8015c9c:	693b      	ldr	r3, [r7, #16]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d002      	beq.n	8015ca8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8015ca2:	6938      	ldr	r0, [r7, #16]
 8015ca4:	f7fa fc02 	bl	80104ac <pbuf_free>
  }

  return ERR_MEM;
 8015ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015cac:	4618      	mov	r0, r3
 8015cae:	3724      	adds	r7, #36	; 0x24
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	bd90      	pop	{r4, r7, pc}
 8015cb4:	0801c7d8 	.word	0x0801c7d8
 8015cb8:	0801cb6c 	.word	0x0801cb6c
 8015cbc:	0801c82c 	.word	0x0801c82c
 8015cc0:	0801cb90 	.word	0x0801cb90
 8015cc4:	0801cbb4 	.word	0x0801cbb4
 8015cc8:	0801cbc4 	.word	0x0801cbc4
 8015ccc:	0801cbd4 	.word	0x0801cbd4

08015cd0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8015cd0:	b590      	push	{r4, r7, lr}
 8015cd2:	b085      	sub	sp, #20
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d106      	bne.n	8015cec <tcp_send_fin+0x1c>
 8015cde:	4b21      	ldr	r3, [pc, #132]	; (8015d64 <tcp_send_fin+0x94>)
 8015ce0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8015ce4:	4920      	ldr	r1, [pc, #128]	; (8015d68 <tcp_send_fin+0x98>)
 8015ce6:	4821      	ldr	r0, [pc, #132]	; (8015d6c <tcp_send_fin+0x9c>)
 8015ce8:	f004 f8be 	bl	8019e68 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d02e      	beq.n	8015d52 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015cf8:	60fb      	str	r3, [r7, #12]
 8015cfa:	e002      	b.n	8015d02 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d1f8      	bne.n	8015cfc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	68db      	ldr	r3, [r3, #12]
 8015d0e:	899b      	ldrh	r3, [r3, #12]
 8015d10:	b29b      	uxth	r3, r3
 8015d12:	4618      	mov	r0, r3
 8015d14:	f7f8 ff00 	bl	800eb18 <lwip_htons>
 8015d18:	4603      	mov	r3, r0
 8015d1a:	b2db      	uxtb	r3, r3
 8015d1c:	f003 0307 	and.w	r3, r3, #7
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d116      	bne.n	8015d52 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	68db      	ldr	r3, [r3, #12]
 8015d28:	899b      	ldrh	r3, [r3, #12]
 8015d2a:	b29c      	uxth	r4, r3
 8015d2c:	2001      	movs	r0, #1
 8015d2e:	f7f8 fef3 	bl	800eb18 <lwip_htons>
 8015d32:	4603      	mov	r3, r0
 8015d34:	461a      	mov	r2, r3
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	68db      	ldr	r3, [r3, #12]
 8015d3a:	4322      	orrs	r2, r4
 8015d3c:	b292      	uxth	r2, r2
 8015d3e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	8b5b      	ldrh	r3, [r3, #26]
 8015d44:	f043 0320 	orr.w	r3, r3, #32
 8015d48:	b29a      	uxth	r2, r3
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8015d4e:	2300      	movs	r3, #0
 8015d50:	e004      	b.n	8015d5c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8015d52:	2101      	movs	r1, #1
 8015d54:	6878      	ldr	r0, [r7, #4]
 8015d56:	f000 f80b 	bl	8015d70 <tcp_enqueue_flags>
 8015d5a:	4603      	mov	r3, r0
}
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	3714      	adds	r7, #20
 8015d60:	46bd      	mov	sp, r7
 8015d62:	bd90      	pop	{r4, r7, pc}
 8015d64:	0801c7d8 	.word	0x0801c7d8
 8015d68:	0801cbe0 	.word	0x0801cbe0
 8015d6c:	0801c82c 	.word	0x0801c82c

08015d70 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b08a      	sub	sp, #40	; 0x28
 8015d74:	af02      	add	r7, sp, #8
 8015d76:	6078      	str	r0, [r7, #4]
 8015d78:	460b      	mov	r3, r1
 8015d7a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8015d80:	2300      	movs	r3, #0
 8015d82:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015d84:	78fb      	ldrb	r3, [r7, #3]
 8015d86:	f003 0303 	and.w	r3, r3, #3
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d106      	bne.n	8015d9c <tcp_enqueue_flags+0x2c>
 8015d8e:	4b67      	ldr	r3, [pc, #412]	; (8015f2c <tcp_enqueue_flags+0x1bc>)
 8015d90:	f240 4211 	movw	r2, #1041	; 0x411
 8015d94:	4966      	ldr	r1, [pc, #408]	; (8015f30 <tcp_enqueue_flags+0x1c0>)
 8015d96:	4867      	ldr	r0, [pc, #412]	; (8015f34 <tcp_enqueue_flags+0x1c4>)
 8015d98:	f004 f866 	bl	8019e68 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d106      	bne.n	8015db0 <tcp_enqueue_flags+0x40>
 8015da2:	4b62      	ldr	r3, [pc, #392]	; (8015f2c <tcp_enqueue_flags+0x1bc>)
 8015da4:	f240 4213 	movw	r2, #1043	; 0x413
 8015da8:	4963      	ldr	r1, [pc, #396]	; (8015f38 <tcp_enqueue_flags+0x1c8>)
 8015daa:	4862      	ldr	r0, [pc, #392]	; (8015f34 <tcp_enqueue_flags+0x1c4>)
 8015dac:	f004 f85c 	bl	8019e68 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8015db0:	78fb      	ldrb	r3, [r7, #3]
 8015db2:	f003 0302 	and.w	r3, r3, #2
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d001      	beq.n	8015dbe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8015dba:	2301      	movs	r3, #1
 8015dbc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015dbe:	7ffb      	ldrb	r3, [r7, #31]
 8015dc0:	009b      	lsls	r3, r3, #2
 8015dc2:	b2db      	uxtb	r3, r3
 8015dc4:	f003 0304 	and.w	r3, r3, #4
 8015dc8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015dca:	7dfb      	ldrb	r3, [r7, #23]
 8015dcc:	b29b      	uxth	r3, r3
 8015dce:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015dd2:	4619      	mov	r1, r3
 8015dd4:	2036      	movs	r0, #54	; 0x36
 8015dd6:	f7fa f881 	bl	800fedc <pbuf_alloc>
 8015dda:	6138      	str	r0, [r7, #16]
 8015ddc:	693b      	ldr	r3, [r7, #16]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d109      	bne.n	8015df6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	8b5b      	ldrh	r3, [r3, #26]
 8015de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015dea:	b29a      	uxth	r2, r3
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015df0:	f04f 33ff 	mov.w	r3, #4294967295
 8015df4:	e095      	b.n	8015f22 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8015df6:	693b      	ldr	r3, [r7, #16]
 8015df8:	895a      	ldrh	r2, [r3, #10]
 8015dfa:	7dfb      	ldrb	r3, [r7, #23]
 8015dfc:	b29b      	uxth	r3, r3
 8015dfe:	429a      	cmp	r2, r3
 8015e00:	d206      	bcs.n	8015e10 <tcp_enqueue_flags+0xa0>
 8015e02:	4b4a      	ldr	r3, [pc, #296]	; (8015f2c <tcp_enqueue_flags+0x1bc>)
 8015e04:	f240 4239 	movw	r2, #1081	; 0x439
 8015e08:	494c      	ldr	r1, [pc, #304]	; (8015f3c <tcp_enqueue_flags+0x1cc>)
 8015e0a:	484a      	ldr	r0, [pc, #296]	; (8015f34 <tcp_enqueue_flags+0x1c4>)
 8015e0c:	f004 f82c 	bl	8019e68 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8015e14:	78fa      	ldrb	r2, [r7, #3]
 8015e16:	7ffb      	ldrb	r3, [r7, #31]
 8015e18:	9300      	str	r3, [sp, #0]
 8015e1a:	460b      	mov	r3, r1
 8015e1c:	6939      	ldr	r1, [r7, #16]
 8015e1e:	6878      	ldr	r0, [r7, #4]
 8015e20:	f7ff f916 	bl	8015050 <tcp_create_segment>
 8015e24:	60f8      	str	r0, [r7, #12]
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d109      	bne.n	8015e40 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	8b5b      	ldrh	r3, [r3, #26]
 8015e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e34:	b29a      	uxth	r2, r3
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8015e3e:	e070      	b.n	8015f22 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	68db      	ldr	r3, [r3, #12]
 8015e44:	f003 0303 	and.w	r3, r3, #3
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d006      	beq.n	8015e5a <tcp_enqueue_flags+0xea>
 8015e4c:	4b37      	ldr	r3, [pc, #220]	; (8015f2c <tcp_enqueue_flags+0x1bc>)
 8015e4e:	f240 4242 	movw	r2, #1090	; 0x442
 8015e52:	493b      	ldr	r1, [pc, #236]	; (8015f40 <tcp_enqueue_flags+0x1d0>)
 8015e54:	4837      	ldr	r0, [pc, #220]	; (8015f34 <tcp_enqueue_flags+0x1c4>)
 8015e56:	f004 f807 	bl	8019e68 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	891b      	ldrh	r3, [r3, #8]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d006      	beq.n	8015e70 <tcp_enqueue_flags+0x100>
 8015e62:	4b32      	ldr	r3, [pc, #200]	; (8015f2c <tcp_enqueue_flags+0x1bc>)
 8015e64:	f240 4243 	movw	r2, #1091	; 0x443
 8015e68:	4936      	ldr	r1, [pc, #216]	; (8015f44 <tcp_enqueue_flags+0x1d4>)
 8015e6a:	4832      	ldr	r0, [pc, #200]	; (8015f34 <tcp_enqueue_flags+0x1c4>)
 8015e6c:	f003 fffc 	bl	8019e68 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d103      	bne.n	8015e80 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	68fa      	ldr	r2, [r7, #12]
 8015e7c:	66da      	str	r2, [r3, #108]	; 0x6c
 8015e7e:	e00d      	b.n	8015e9c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e84:	61bb      	str	r3, [r7, #24]
 8015e86:	e002      	b.n	8015e8e <tcp_enqueue_flags+0x11e>
 8015e88:	69bb      	ldr	r3, [r7, #24]
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	61bb      	str	r3, [r7, #24]
 8015e8e:	69bb      	ldr	r3, [r7, #24]
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d1f8      	bne.n	8015e88 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8015e96:	69bb      	ldr	r3, [r7, #24]
 8015e98:	68fa      	ldr	r2, [r7, #12]
 8015e9a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	2200      	movs	r2, #0
 8015ea0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015ea4:	78fb      	ldrb	r3, [r7, #3]
 8015ea6:	f003 0302 	and.w	r3, r3, #2
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d104      	bne.n	8015eb8 <tcp_enqueue_flags+0x148>
 8015eae:	78fb      	ldrb	r3, [r7, #3]
 8015eb0:	f003 0301 	and.w	r3, r3, #1
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d004      	beq.n	8015ec2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015ebc:	1c5a      	adds	r2, r3, #1
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8015ec2:	78fb      	ldrb	r3, [r7, #3]
 8015ec4:	f003 0301 	and.w	r3, r3, #1
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d006      	beq.n	8015eda <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	8b5b      	ldrh	r3, [r3, #26]
 8015ed0:	f043 0320 	orr.w	r3, r3, #32
 8015ed4:	b29a      	uxth	r2, r3
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	685b      	ldr	r3, [r3, #4]
 8015ede:	4618      	mov	r0, r3
 8015ee0:	f7fa fb72 	bl	80105c8 <pbuf_clen>
 8015ee4:	4603      	mov	r3, r0
 8015ee6:	461a      	mov	r2, r3
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015eee:	4413      	add	r3, r2
 8015ef0:	b29a      	uxth	r2, r3
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d00e      	beq.n	8015f20 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d10a      	bne.n	8015f20 <tcp_enqueue_flags+0x1b0>
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d106      	bne.n	8015f20 <tcp_enqueue_flags+0x1b0>
 8015f12:	4b06      	ldr	r3, [pc, #24]	; (8015f2c <tcp_enqueue_flags+0x1bc>)
 8015f14:	f240 4265 	movw	r2, #1125	; 0x465
 8015f18:	490b      	ldr	r1, [pc, #44]	; (8015f48 <tcp_enqueue_flags+0x1d8>)
 8015f1a:	4806      	ldr	r0, [pc, #24]	; (8015f34 <tcp_enqueue_flags+0x1c4>)
 8015f1c:	f003 ffa4 	bl	8019e68 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015f20:	2300      	movs	r3, #0
}
 8015f22:	4618      	mov	r0, r3
 8015f24:	3720      	adds	r7, #32
 8015f26:	46bd      	mov	sp, r7
 8015f28:	bd80      	pop	{r7, pc}
 8015f2a:	bf00      	nop
 8015f2c:	0801c7d8 	.word	0x0801c7d8
 8015f30:	0801cbfc 	.word	0x0801cbfc
 8015f34:	0801c82c 	.word	0x0801c82c
 8015f38:	0801cc54 	.word	0x0801cc54
 8015f3c:	0801cc74 	.word	0x0801cc74
 8015f40:	0801ccb0 	.word	0x0801ccb0
 8015f44:	0801ccc8 	.word	0x0801ccc8
 8015f48:	0801ccf4 	.word	0x0801ccf4

08015f4c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015f4c:	b5b0      	push	{r4, r5, r7, lr}
 8015f4e:	b08a      	sub	sp, #40	; 0x28
 8015f50:	af00      	add	r7, sp, #0
 8015f52:	6078      	str	r0, [r7, #4]
  struct netif *netif;
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();
 8015f54:	f7f4 fdb6 	bl	800aac4 <sys_check_core_locking>

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d106      	bne.n	8015f6c <tcp_output+0x20>
 8015f5e:	4b8a      	ldr	r3, [pc, #552]	; (8016188 <tcp_output+0x23c>)
 8015f60:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8015f64:	4989      	ldr	r1, [pc, #548]	; (801618c <tcp_output+0x240>)
 8015f66:	488a      	ldr	r0, [pc, #552]	; (8016190 <tcp_output+0x244>)
 8015f68:	f003 ff7e 	bl	8019e68 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	7d1b      	ldrb	r3, [r3, #20]
 8015f70:	2b01      	cmp	r3, #1
 8015f72:	d106      	bne.n	8015f82 <tcp_output+0x36>
 8015f74:	4b84      	ldr	r3, [pc, #528]	; (8016188 <tcp_output+0x23c>)
 8015f76:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8015f7a:	4986      	ldr	r1, [pc, #536]	; (8016194 <tcp_output+0x248>)
 8015f7c:	4884      	ldr	r0, [pc, #528]	; (8016190 <tcp_output+0x244>)
 8015f7e:	f003 ff73 	bl	8019e68 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8015f82:	4b85      	ldr	r3, [pc, #532]	; (8016198 <tcp_output+0x24c>)
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	687a      	ldr	r2, [r7, #4]
 8015f88:	429a      	cmp	r2, r3
 8015f8a:	d101      	bne.n	8015f90 <tcp_output+0x44>
    return ERR_OK;
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	e1ce      	b.n	801632e <tcp_output+0x3e2>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015f9c:	4293      	cmp	r3, r2
 8015f9e:	bf28      	it	cs
 8015fa0:	4613      	movcs	r3, r2
 8015fa2:	b29b      	uxth	r3, r3
 8015fa4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015faa:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8015fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d10b      	bne.n	8015fca <tcp_output+0x7e>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	8b5b      	ldrh	r3, [r3, #26]
 8015fb6:	f003 0302 	and.w	r3, r3, #2
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	f000 81aa 	beq.w	8016314 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8015fc0:	6878      	ldr	r0, [r7, #4]
 8015fc2:	f000 fdcb 	bl	8016b5c <tcp_send_empty_ack>
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	e1b1      	b.n	801632e <tcp_output+0x3e2>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015fca:	6879      	ldr	r1, [r7, #4]
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	3304      	adds	r3, #4
 8015fd0:	461a      	mov	r2, r3
 8015fd2:	6878      	ldr	r0, [r7, #4]
 8015fd4:	f7ff f820 	bl	8015018 <tcp_route>
 8015fd8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015fda:	697b      	ldr	r3, [r7, #20]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d102      	bne.n	8015fe6 <tcp_output+0x9a>
    return ERR_RTE;
 8015fe0:	f06f 0303 	mvn.w	r3, #3
 8015fe4:	e1a3      	b.n	801632e <tcp_output+0x3e2>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d003      	beq.n	8015ff4 <tcp_output+0xa8>
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d111      	bne.n	8016018 <tcp_output+0xcc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015ff4:	697b      	ldr	r3, [r7, #20]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d002      	beq.n	8016000 <tcp_output+0xb4>
 8015ffa:	697b      	ldr	r3, [r7, #20]
 8015ffc:	3304      	adds	r3, #4
 8015ffe:	e000      	b.n	8016002 <tcp_output+0xb6>
 8016000:	2300      	movs	r3, #0
 8016002:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016004:	693b      	ldr	r3, [r7, #16]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d102      	bne.n	8016010 <tcp_output+0xc4>
      return ERR_RTE;
 801600a:	f06f 0303 	mvn.w	r3, #3
 801600e:	e18e      	b.n	801632e <tcp_output+0x3e2>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016010:	693b      	ldr	r3, [r7, #16]
 8016012:	681a      	ldr	r2, [r3, #0]
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801601a:	68db      	ldr	r3, [r3, #12]
 801601c:	685b      	ldr	r3, [r3, #4]
 801601e:	4618      	mov	r0, r3
 8016020:	f7f8 fd8f 	bl	800eb42 <lwip_htonl>
 8016024:	4602      	mov	r2, r0
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801602a:	1ad3      	subs	r3, r2, r3
 801602c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801602e:	8912      	ldrh	r2, [r2, #8]
 8016030:	4413      	add	r3, r2
 8016032:	69ba      	ldr	r2, [r7, #24]
 8016034:	429a      	cmp	r2, r3
 8016036:	d227      	bcs.n	8016088 <tcp_output+0x13c>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801603e:	461a      	mov	r2, r3
 8016040:	69bb      	ldr	r3, [r7, #24]
 8016042:	4293      	cmp	r3, r2
 8016044:	d114      	bne.n	8016070 <tcp_output+0x124>
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801604a:	2b00      	cmp	r3, #0
 801604c:	d110      	bne.n	8016070 <tcp_output+0x124>
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016054:	2b00      	cmp	r3, #0
 8016056:	d10b      	bne.n	8016070 <tcp_output+0x124>
      pcb->persist_cnt = 0;
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	2200      	movs	r2, #0
 801605c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	2201      	movs	r2, #1
 8016064:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	2200      	movs	r2, #0
 801606c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	8b5b      	ldrh	r3, [r3, #26]
 8016074:	f003 0302 	and.w	r3, r3, #2
 8016078:	2b00      	cmp	r3, #0
 801607a:	f000 814d 	beq.w	8016318 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801607e:	6878      	ldr	r0, [r7, #4]
 8016080:	f000 fd6c 	bl	8016b5c <tcp_send_empty_ack>
 8016084:	4603      	mov	r3, r0
 8016086:	e152      	b.n	801632e <tcp_output+0x3e2>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	2200      	movs	r2, #0
 801608c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016094:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016096:	6a3b      	ldr	r3, [r7, #32]
 8016098:	2b00      	cmp	r3, #0
 801609a:	f000 811c 	beq.w	80162d6 <tcp_output+0x38a>
    for (; useg->next != NULL; useg = useg->next);
 801609e:	e002      	b.n	80160a6 <tcp_output+0x15a>
 80160a0:	6a3b      	ldr	r3, [r7, #32]
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	623b      	str	r3, [r7, #32]
 80160a6:	6a3b      	ldr	r3, [r7, #32]
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d1f8      	bne.n	80160a0 <tcp_output+0x154>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80160ae:	e112      	b.n	80162d6 <tcp_output+0x38a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80160b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160b2:	68db      	ldr	r3, [r3, #12]
 80160b4:	899b      	ldrh	r3, [r3, #12]
 80160b6:	b29b      	uxth	r3, r3
 80160b8:	4618      	mov	r0, r3
 80160ba:	f7f8 fd2d 	bl	800eb18 <lwip_htons>
 80160be:	4603      	mov	r3, r0
 80160c0:	b2db      	uxtb	r3, r3
 80160c2:	f003 0304 	and.w	r3, r3, #4
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d006      	beq.n	80160d8 <tcp_output+0x18c>
 80160ca:	4b2f      	ldr	r3, [pc, #188]	; (8016188 <tcp_output+0x23c>)
 80160cc:	f240 5236 	movw	r2, #1334	; 0x536
 80160d0:	4932      	ldr	r1, [pc, #200]	; (801619c <tcp_output+0x250>)
 80160d2:	482f      	ldr	r0, [pc, #188]	; (8016190 <tcp_output+0x244>)
 80160d4:	f003 fec8 	bl	8019e68 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d01f      	beq.n	8016120 <tcp_output+0x1d4>
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	8b5b      	ldrh	r3, [r3, #26]
 80160e4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d119      	bne.n	8016120 <tcp_output+0x1d4>
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d00b      	beq.n	801610c <tcp_output+0x1c0>
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d110      	bne.n	8016120 <tcp_output+0x1d4>
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016102:	891a      	ldrh	r2, [r3, #8]
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016108:	429a      	cmp	r2, r3
 801610a:	d209      	bcs.n	8016120 <tcp_output+0x1d4>
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016112:	2b00      	cmp	r3, #0
 8016114:	d004      	beq.n	8016120 <tcp_output+0x1d4>
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801611c:	2b0f      	cmp	r3, #15
 801611e:	d901      	bls.n	8016124 <tcp_output+0x1d8>
 8016120:	2301      	movs	r3, #1
 8016122:	e000      	b.n	8016126 <tcp_output+0x1da>
 8016124:	2300      	movs	r3, #0
 8016126:	2b00      	cmp	r3, #0
 8016128:	d106      	bne.n	8016138 <tcp_output+0x1ec>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	8b5b      	ldrh	r3, [r3, #26]
 801612e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016132:	2b00      	cmp	r3, #0
 8016134:	f000 80e4 	beq.w	8016300 <tcp_output+0x3b4>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	7d1b      	ldrb	r3, [r3, #20]
 801613c:	2b02      	cmp	r3, #2
 801613e:	d00d      	beq.n	801615c <tcp_output+0x210>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016142:	68db      	ldr	r3, [r3, #12]
 8016144:	899b      	ldrh	r3, [r3, #12]
 8016146:	b29c      	uxth	r4, r3
 8016148:	2010      	movs	r0, #16
 801614a:	f7f8 fce5 	bl	800eb18 <lwip_htons>
 801614e:	4603      	mov	r3, r0
 8016150:	461a      	mov	r2, r3
 8016152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016154:	68db      	ldr	r3, [r3, #12]
 8016156:	4322      	orrs	r2, r4
 8016158:	b292      	uxth	r2, r2
 801615a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801615c:	697a      	ldr	r2, [r7, #20]
 801615e:	6879      	ldr	r1, [r7, #4]
 8016160:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016162:	f000 f909 	bl	8016378 <tcp_output_segment>
 8016166:	4603      	mov	r3, r0
 8016168:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801616a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d016      	beq.n	80161a0 <tcp_output+0x254>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	8b5b      	ldrh	r3, [r3, #26]
 8016176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801617a:	b29a      	uxth	r2, r3
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	835a      	strh	r2, [r3, #26]
      return err;
 8016180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016184:	e0d3      	b.n	801632e <tcp_output+0x3e2>
 8016186:	bf00      	nop
 8016188:	0801c7d8 	.word	0x0801c7d8
 801618c:	0801cd1c 	.word	0x0801cd1c
 8016190:	0801c82c 	.word	0x0801c82c
 8016194:	0801cd34 	.word	0x0801cd34
 8016198:	24015074 	.word	0x24015074
 801619c:	0801cd5c 	.word	0x0801cd5c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80161a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161a2:	681a      	ldr	r2, [r3, #0]
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	7d1b      	ldrb	r3, [r3, #20]
 80161ac:	2b02      	cmp	r3, #2
 80161ae:	d006      	beq.n	80161be <tcp_output+0x272>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	8b5b      	ldrh	r3, [r3, #26]
 80161b4:	f023 0303 	bic.w	r3, r3, #3
 80161b8:	b29a      	uxth	r2, r3
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80161be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161c0:	68db      	ldr	r3, [r3, #12]
 80161c2:	685b      	ldr	r3, [r3, #4]
 80161c4:	4618      	mov	r0, r3
 80161c6:	f7f8 fcbc 	bl	800eb42 <lwip_htonl>
 80161ca:	4604      	mov	r4, r0
 80161cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161ce:	891b      	ldrh	r3, [r3, #8]
 80161d0:	461d      	mov	r5, r3
 80161d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161d4:	68db      	ldr	r3, [r3, #12]
 80161d6:	899b      	ldrh	r3, [r3, #12]
 80161d8:	b29b      	uxth	r3, r3
 80161da:	4618      	mov	r0, r3
 80161dc:	f7f8 fc9c 	bl	800eb18 <lwip_htons>
 80161e0:	4603      	mov	r3, r0
 80161e2:	b2db      	uxtb	r3, r3
 80161e4:	f003 0303 	and.w	r3, r3, #3
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d001      	beq.n	80161f0 <tcp_output+0x2a4>
 80161ec:	2301      	movs	r3, #1
 80161ee:	e000      	b.n	80161f2 <tcp_output+0x2a6>
 80161f0:	2300      	movs	r3, #0
 80161f2:	442b      	add	r3, r5
 80161f4:	4423      	add	r3, r4
 80161f6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80161fc:	68bb      	ldr	r3, [r7, #8]
 80161fe:	1ad3      	subs	r3, r2, r3
 8016200:	2b00      	cmp	r3, #0
 8016202:	da02      	bge.n	801620a <tcp_output+0x2be>
      pcb->snd_nxt = snd_nxt;
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	68ba      	ldr	r2, [r7, #8]
 8016208:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801620c:	891b      	ldrh	r3, [r3, #8]
 801620e:	461c      	mov	r4, r3
 8016210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016212:	68db      	ldr	r3, [r3, #12]
 8016214:	899b      	ldrh	r3, [r3, #12]
 8016216:	b29b      	uxth	r3, r3
 8016218:	4618      	mov	r0, r3
 801621a:	f7f8 fc7d 	bl	800eb18 <lwip_htons>
 801621e:	4603      	mov	r3, r0
 8016220:	b2db      	uxtb	r3, r3
 8016222:	f003 0303 	and.w	r3, r3, #3
 8016226:	2b00      	cmp	r3, #0
 8016228:	d001      	beq.n	801622e <tcp_output+0x2e2>
 801622a:	2301      	movs	r3, #1
 801622c:	e000      	b.n	8016230 <tcp_output+0x2e4>
 801622e:	2300      	movs	r3, #0
 8016230:	4423      	add	r3, r4
 8016232:	2b00      	cmp	r3, #0
 8016234:	d049      	beq.n	80162ca <tcp_output+0x37e>
      seg->next = NULL;
 8016236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016238:	2200      	movs	r2, #0
 801623a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016240:	2b00      	cmp	r3, #0
 8016242:	d105      	bne.n	8016250 <tcp_output+0x304>
        pcb->unacked = seg;
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016248:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801624c:	623b      	str	r3, [r7, #32]
 801624e:	e03f      	b.n	80162d0 <tcp_output+0x384>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016252:	68db      	ldr	r3, [r3, #12]
 8016254:	685b      	ldr	r3, [r3, #4]
 8016256:	4618      	mov	r0, r3
 8016258:	f7f8 fc73 	bl	800eb42 <lwip_htonl>
 801625c:	4604      	mov	r4, r0
 801625e:	6a3b      	ldr	r3, [r7, #32]
 8016260:	68db      	ldr	r3, [r3, #12]
 8016262:	685b      	ldr	r3, [r3, #4]
 8016264:	4618      	mov	r0, r3
 8016266:	f7f8 fc6c 	bl	800eb42 <lwip_htonl>
 801626a:	4603      	mov	r3, r0
 801626c:	1ae3      	subs	r3, r4, r3
 801626e:	2b00      	cmp	r3, #0
 8016270:	da24      	bge.n	80162bc <tcp_output+0x370>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	3370      	adds	r3, #112	; 0x70
 8016276:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016278:	e002      	b.n	8016280 <tcp_output+0x334>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801627a:	69fb      	ldr	r3, [r7, #28]
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016280:	69fb      	ldr	r3, [r7, #28]
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d011      	beq.n	80162ac <tcp_output+0x360>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016288:	69fb      	ldr	r3, [r7, #28]
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	68db      	ldr	r3, [r3, #12]
 801628e:	685b      	ldr	r3, [r3, #4]
 8016290:	4618      	mov	r0, r3
 8016292:	f7f8 fc56 	bl	800eb42 <lwip_htonl>
 8016296:	4604      	mov	r4, r0
 8016298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801629a:	68db      	ldr	r3, [r3, #12]
 801629c:	685b      	ldr	r3, [r3, #4]
 801629e:	4618      	mov	r0, r3
 80162a0:	f7f8 fc4f 	bl	800eb42 <lwip_htonl>
 80162a4:	4603      	mov	r3, r0
 80162a6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	dbe6      	blt.n	801627a <tcp_output+0x32e>
          }
          seg->next = (*cur_seg);
 80162ac:	69fb      	ldr	r3, [r7, #28]
 80162ae:	681a      	ldr	r2, [r3, #0]
 80162b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162b2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80162b4:	69fb      	ldr	r3, [r7, #28]
 80162b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162b8:	601a      	str	r2, [r3, #0]
 80162ba:	e009      	b.n	80162d0 <tcp_output+0x384>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80162bc:	6a3b      	ldr	r3, [r7, #32]
 80162be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162c0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80162c2:	6a3b      	ldr	r3, [r7, #32]
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	623b      	str	r3, [r7, #32]
 80162c8:	e002      	b.n	80162d0 <tcp_output+0x384>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80162ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80162cc:	f7fb ff09 	bl	80120e2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80162d4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80162d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d012      	beq.n	8016302 <tcp_output+0x3b6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80162dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162de:	68db      	ldr	r3, [r3, #12]
 80162e0:	685b      	ldr	r3, [r3, #4]
 80162e2:	4618      	mov	r0, r3
 80162e4:	f7f8 fc2d 	bl	800eb42 <lwip_htonl>
 80162e8:	4602      	mov	r2, r0
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80162ee:	1ad3      	subs	r3, r2, r3
 80162f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162f2:	8912      	ldrh	r2, [r2, #8]
 80162f4:	4413      	add	r3, r2
  while (seg != NULL &&
 80162f6:	69ba      	ldr	r2, [r7, #24]
 80162f8:	429a      	cmp	r2, r3
 80162fa:	f4bf aed9 	bcs.w	80160b0 <tcp_output+0x164>
 80162fe:	e000      	b.n	8016302 <tcp_output+0x3b6>
      break;
 8016300:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016306:	2b00      	cmp	r3, #0
 8016308:	d108      	bne.n	801631c <tcp_output+0x3d0>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	2200      	movs	r2, #0
 801630e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8016312:	e004      	b.n	801631e <tcp_output+0x3d2>
    goto output_done;
 8016314:	bf00      	nop
 8016316:	e002      	b.n	801631e <tcp_output+0x3d2>
    goto output_done;
 8016318:	bf00      	nop
 801631a:	e000      	b.n	801631e <tcp_output+0x3d2>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801631c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	8b5b      	ldrh	r3, [r3, #26]
 8016322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016326:	b29a      	uxth	r2, r3
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801632c:	2300      	movs	r3, #0
}
 801632e:	4618      	mov	r0, r3
 8016330:	3728      	adds	r7, #40	; 0x28
 8016332:	46bd      	mov	sp, r7
 8016334:	bdb0      	pop	{r4, r5, r7, pc}
 8016336:	bf00      	nop

08016338 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016338:	b580      	push	{r7, lr}
 801633a:	b082      	sub	sp, #8
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d106      	bne.n	8016354 <tcp_output_segment_busy+0x1c>
 8016346:	4b09      	ldr	r3, [pc, #36]	; (801636c <tcp_output_segment_busy+0x34>)
 8016348:	f240 529a 	movw	r2, #1434	; 0x59a
 801634c:	4908      	ldr	r1, [pc, #32]	; (8016370 <tcp_output_segment_busy+0x38>)
 801634e:	4809      	ldr	r0, [pc, #36]	; (8016374 <tcp_output_segment_busy+0x3c>)
 8016350:	f003 fd8a 	bl	8019e68 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	685b      	ldr	r3, [r3, #4]
 8016358:	7b9b      	ldrb	r3, [r3, #14]
 801635a:	2b01      	cmp	r3, #1
 801635c:	d001      	beq.n	8016362 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801635e:	2301      	movs	r3, #1
 8016360:	e000      	b.n	8016364 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016362:	2300      	movs	r3, #0
}
 8016364:	4618      	mov	r0, r3
 8016366:	3708      	adds	r7, #8
 8016368:	46bd      	mov	sp, r7
 801636a:	bd80      	pop	{r7, pc}
 801636c:	0801c7d8 	.word	0x0801c7d8
 8016370:	0801cd74 	.word	0x0801cd74
 8016374:	0801c82c 	.word	0x0801c82c

08016378 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016378:	b5b0      	push	{r4, r5, r7, lr}
 801637a:	b08c      	sub	sp, #48	; 0x30
 801637c:	af04      	add	r7, sp, #16
 801637e:	60f8      	str	r0, [r7, #12]
 8016380:	60b9      	str	r1, [r7, #8]
 8016382:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d106      	bne.n	8016398 <tcp_output_segment+0x20>
 801638a:	4b64      	ldr	r3, [pc, #400]	; (801651c <tcp_output_segment+0x1a4>)
 801638c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8016390:	4963      	ldr	r1, [pc, #396]	; (8016520 <tcp_output_segment+0x1a8>)
 8016392:	4864      	ldr	r0, [pc, #400]	; (8016524 <tcp_output_segment+0x1ac>)
 8016394:	f003 fd68 	bl	8019e68 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016398:	68bb      	ldr	r3, [r7, #8]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d106      	bne.n	80163ac <tcp_output_segment+0x34>
 801639e:	4b5f      	ldr	r3, [pc, #380]	; (801651c <tcp_output_segment+0x1a4>)
 80163a0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80163a4:	4960      	ldr	r1, [pc, #384]	; (8016528 <tcp_output_segment+0x1b0>)
 80163a6:	485f      	ldr	r0, [pc, #380]	; (8016524 <tcp_output_segment+0x1ac>)
 80163a8:	f003 fd5e 	bl	8019e68 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d106      	bne.n	80163c0 <tcp_output_segment+0x48>
 80163b2:	4b5a      	ldr	r3, [pc, #360]	; (801651c <tcp_output_segment+0x1a4>)
 80163b4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80163b8:	495c      	ldr	r1, [pc, #368]	; (801652c <tcp_output_segment+0x1b4>)
 80163ba:	485a      	ldr	r0, [pc, #360]	; (8016524 <tcp_output_segment+0x1ac>)
 80163bc:	f003 fd54 	bl	8019e68 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80163c0:	68f8      	ldr	r0, [r7, #12]
 80163c2:	f7ff ffb9 	bl	8016338 <tcp_output_segment_busy>
 80163c6:	4603      	mov	r3, r0
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d001      	beq.n	80163d0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80163cc:	2300      	movs	r3, #0
 80163ce:	e0a1      	b.n	8016514 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80163d0:	68bb      	ldr	r3, [r7, #8]
 80163d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	68dc      	ldr	r4, [r3, #12]
 80163d8:	4610      	mov	r0, r2
 80163da:	f7f8 fbb2 	bl	800eb42 <lwip_htonl>
 80163de:	4603      	mov	r3, r0
 80163e0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80163e2:	68bb      	ldr	r3, [r7, #8]
 80163e4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	68dc      	ldr	r4, [r3, #12]
 80163ea:	4610      	mov	r0, r2
 80163ec:	f7f8 fb94 	bl	800eb18 <lwip_htons>
 80163f0:	4603      	mov	r3, r0
 80163f2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80163f4:	68bb      	ldr	r3, [r7, #8]
 80163f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163f8:	68ba      	ldr	r2, [r7, #8]
 80163fa:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80163fc:	441a      	add	r2, r3
 80163fe:	68bb      	ldr	r3, [r7, #8]
 8016400:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	68db      	ldr	r3, [r3, #12]
 8016406:	3314      	adds	r3, #20
 8016408:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	7a9b      	ldrb	r3, [r3, #10]
 801640e:	f003 0301 	and.w	r3, r3, #1
 8016412:	2b00      	cmp	r3, #0
 8016414:	d015      	beq.n	8016442 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8016416:	68bb      	ldr	r3, [r7, #8]
 8016418:	3304      	adds	r3, #4
 801641a:	461a      	mov	r2, r3
 801641c:	6879      	ldr	r1, [r7, #4]
 801641e:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8016422:	f7fc fa2d 	bl	8012880 <tcp_eff_send_mss_netif>
 8016426:	4603      	mov	r3, r0
 8016428:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801642a:	8b7b      	ldrh	r3, [r7, #26]
 801642c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8016430:	4618      	mov	r0, r3
 8016432:	f7f8 fb86 	bl	800eb42 <lwip_htonl>
 8016436:	4602      	mov	r2, r0
 8016438:	69fb      	ldr	r3, [r7, #28]
 801643a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801643c:	69fb      	ldr	r3, [r7, #28]
 801643e:	3304      	adds	r3, #4
 8016440:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8016442:	68bb      	ldr	r3, [r7, #8]
 8016444:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016448:	2b00      	cmp	r3, #0
 801644a:	da02      	bge.n	8016452 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801644c:	68bb      	ldr	r3, [r7, #8]
 801644e:	2200      	movs	r2, #0
 8016450:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8016452:	68bb      	ldr	r3, [r7, #8]
 8016454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016456:	2b00      	cmp	r3, #0
 8016458:	d10c      	bne.n	8016474 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801645a:	4b35      	ldr	r3, [pc, #212]	; (8016530 <tcp_output_segment+0x1b8>)
 801645c:	681a      	ldr	r2, [r3, #0]
 801645e:	68bb      	ldr	r3, [r7, #8]
 8016460:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	68db      	ldr	r3, [r3, #12]
 8016466:	685b      	ldr	r3, [r3, #4]
 8016468:	4618      	mov	r0, r3
 801646a:	f7f8 fb6a 	bl	800eb42 <lwip_htonl>
 801646e:	4602      	mov	r2, r0
 8016470:	68bb      	ldr	r3, [r7, #8]
 8016472:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	68da      	ldr	r2, [r3, #12]
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	685b      	ldr	r3, [r3, #4]
 801647c:	685b      	ldr	r3, [r3, #4]
 801647e:	1ad3      	subs	r3, r2, r3
 8016480:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	685b      	ldr	r3, [r3, #4]
 8016486:	8959      	ldrh	r1, [r3, #10]
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	685b      	ldr	r3, [r3, #4]
 801648c:	8b3a      	ldrh	r2, [r7, #24]
 801648e:	1a8a      	subs	r2, r1, r2
 8016490:	b292      	uxth	r2, r2
 8016492:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	685b      	ldr	r3, [r3, #4]
 8016498:	8919      	ldrh	r1, [r3, #8]
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	685b      	ldr	r3, [r3, #4]
 801649e:	8b3a      	ldrh	r2, [r7, #24]
 80164a0:	1a8a      	subs	r2, r1, r2
 80164a2:	b292      	uxth	r2, r2
 80164a4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	685b      	ldr	r3, [r3, #4]
 80164aa:	68fa      	ldr	r2, [r7, #12]
 80164ac:	68d2      	ldr	r2, [r2, #12]
 80164ae:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	68db      	ldr	r3, [r3, #12]
 80164b4:	2200      	movs	r2, #0
 80164b6:	741a      	strb	r2, [r3, #16]
 80164b8:	2200      	movs	r2, #0
 80164ba:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	68da      	ldr	r2, [r3, #12]
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	7a9b      	ldrb	r3, [r3, #10]
 80164c4:	f003 0301 	and.w	r3, r3, #1
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d001      	beq.n	80164d0 <tcp_output_segment+0x158>
 80164cc:	2318      	movs	r3, #24
 80164ce:	e000      	b.n	80164d2 <tcp_output_segment+0x15a>
 80164d0:	2314      	movs	r3, #20
 80164d2:	4413      	add	r3, r2
 80164d4:	69fa      	ldr	r2, [r7, #28]
 80164d6:	429a      	cmp	r2, r3
 80164d8:	d006      	beq.n	80164e8 <tcp_output_segment+0x170>
 80164da:	4b10      	ldr	r3, [pc, #64]	; (801651c <tcp_output_segment+0x1a4>)
 80164dc:	f240 621c 	movw	r2, #1564	; 0x61c
 80164e0:	4914      	ldr	r1, [pc, #80]	; (8016534 <tcp_output_segment+0x1bc>)
 80164e2:	4810      	ldr	r0, [pc, #64]	; (8016524 <tcp_output_segment+0x1ac>)
 80164e4:	f003 fcc0 	bl	8019e68 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	6858      	ldr	r0, [r3, #4]
 80164ec:	68b9      	ldr	r1, [r7, #8]
 80164ee:	68bb      	ldr	r3, [r7, #8]
 80164f0:	1d1c      	adds	r4, r3, #4
 80164f2:	68bb      	ldr	r3, [r7, #8]
 80164f4:	7add      	ldrb	r5, [r3, #11]
 80164f6:	68bb      	ldr	r3, [r7, #8]
 80164f8:	7a9b      	ldrb	r3, [r3, #10]
 80164fa:	687a      	ldr	r2, [r7, #4]
 80164fc:	9202      	str	r2, [sp, #8]
 80164fe:	2206      	movs	r2, #6
 8016500:	9201      	str	r2, [sp, #4]
 8016502:	9300      	str	r3, [sp, #0]
 8016504:	462b      	mov	r3, r5
 8016506:	4622      	mov	r2, r4
 8016508:	f002 fa9a 	bl	8018a40 <ip4_output_if>
 801650c:	4603      	mov	r3, r0
 801650e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8016510:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016514:	4618      	mov	r0, r3
 8016516:	3720      	adds	r7, #32
 8016518:	46bd      	mov	sp, r7
 801651a:	bdb0      	pop	{r4, r5, r7, pc}
 801651c:	0801c7d8 	.word	0x0801c7d8
 8016520:	0801cd9c 	.word	0x0801cd9c
 8016524:	0801c82c 	.word	0x0801c82c
 8016528:	0801cdbc 	.word	0x0801cdbc
 801652c:	0801cddc 	.word	0x0801cddc
 8016530:	24015028 	.word	0x24015028
 8016534:	0801ce00 	.word	0x0801ce00

08016538 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8016538:	b5b0      	push	{r4, r5, r7, lr}
 801653a:	b084      	sub	sp, #16
 801653c:	af00      	add	r7, sp, #0
 801653e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	2b00      	cmp	r3, #0
 8016544:	d106      	bne.n	8016554 <tcp_rexmit_rto_prepare+0x1c>
 8016546:	4b31      	ldr	r3, [pc, #196]	; (801660c <tcp_rexmit_rto_prepare+0xd4>)
 8016548:	f240 6263 	movw	r2, #1635	; 0x663
 801654c:	4930      	ldr	r1, [pc, #192]	; (8016610 <tcp_rexmit_rto_prepare+0xd8>)
 801654e:	4831      	ldr	r0, [pc, #196]	; (8016614 <tcp_rexmit_rto_prepare+0xdc>)
 8016550:	f003 fc8a 	bl	8019e68 <iprintf>

  if (pcb->unacked == NULL) {
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016558:	2b00      	cmp	r3, #0
 801655a:	d102      	bne.n	8016562 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801655c:	f06f 0305 	mvn.w	r3, #5
 8016560:	e050      	b.n	8016604 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016566:	60fb      	str	r3, [r7, #12]
 8016568:	e00b      	b.n	8016582 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801656a:	68f8      	ldr	r0, [r7, #12]
 801656c:	f7ff fee4 	bl	8016338 <tcp_output_segment_busy>
 8016570:	4603      	mov	r3, r0
 8016572:	2b00      	cmp	r3, #0
 8016574:	d002      	beq.n	801657c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8016576:	f06f 0305 	mvn.w	r3, #5
 801657a:	e043      	b.n	8016604 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	60fb      	str	r3, [r7, #12]
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d1ef      	bne.n	801656a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801658a:	68f8      	ldr	r0, [r7, #12]
 801658c:	f7ff fed4 	bl	8016338 <tcp_output_segment_busy>
 8016590:	4603      	mov	r3, r0
 8016592:	2b00      	cmp	r3, #0
 8016594:	d002      	beq.n	801659c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8016596:	f06f 0305 	mvn.w	r3, #5
 801659a:	e033      	b.n	8016604 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	2200      	movs	r2, #0
 80165b0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	8b5b      	ldrh	r3, [r3, #26]
 80165b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80165ba:	b29a      	uxth	r2, r3
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	68db      	ldr	r3, [r3, #12]
 80165c4:	685b      	ldr	r3, [r3, #4]
 80165c6:	4618      	mov	r0, r3
 80165c8:	f7f8 fabb 	bl	800eb42 <lwip_htonl>
 80165cc:	4604      	mov	r4, r0
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	891b      	ldrh	r3, [r3, #8]
 80165d2:	461d      	mov	r5, r3
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	68db      	ldr	r3, [r3, #12]
 80165d8:	899b      	ldrh	r3, [r3, #12]
 80165da:	b29b      	uxth	r3, r3
 80165dc:	4618      	mov	r0, r3
 80165de:	f7f8 fa9b 	bl	800eb18 <lwip_htons>
 80165e2:	4603      	mov	r3, r0
 80165e4:	b2db      	uxtb	r3, r3
 80165e6:	f003 0303 	and.w	r3, r3, #3
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d001      	beq.n	80165f2 <tcp_rexmit_rto_prepare+0xba>
 80165ee:	2301      	movs	r3, #1
 80165f0:	e000      	b.n	80165f4 <tcp_rexmit_rto_prepare+0xbc>
 80165f2:	2300      	movs	r3, #0
 80165f4:	442b      	add	r3, r5
 80165f6:	18e2      	adds	r2, r4, r3
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	2200      	movs	r2, #0
 8016600:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8016602:	2300      	movs	r3, #0
}
 8016604:	4618      	mov	r0, r3
 8016606:	3710      	adds	r7, #16
 8016608:	46bd      	mov	sp, r7
 801660a:	bdb0      	pop	{r4, r5, r7, pc}
 801660c:	0801c7d8 	.word	0x0801c7d8
 8016610:	0801ce14 	.word	0x0801ce14
 8016614:	0801c82c 	.word	0x0801c82c

08016618 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b082      	sub	sp, #8
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d106      	bne.n	8016634 <tcp_rexmit_rto_commit+0x1c>
 8016626:	4b0d      	ldr	r3, [pc, #52]	; (801665c <tcp_rexmit_rto_commit+0x44>)
 8016628:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801662c:	490c      	ldr	r1, [pc, #48]	; (8016660 <tcp_rexmit_rto_commit+0x48>)
 801662e:	480d      	ldr	r0, [pc, #52]	; (8016664 <tcp_rexmit_rto_commit+0x4c>)
 8016630:	f003 fc1a 	bl	8019e68 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801663a:	2bff      	cmp	r3, #255	; 0xff
 801663c:	d007      	beq.n	801664e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016644:	3301      	adds	r3, #1
 8016646:	b2da      	uxtb	r2, r3
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801664e:	6878      	ldr	r0, [r7, #4]
 8016650:	f7ff fc7c 	bl	8015f4c <tcp_output>
}
 8016654:	bf00      	nop
 8016656:	3708      	adds	r7, #8
 8016658:	46bd      	mov	sp, r7
 801665a:	bd80      	pop	{r7, pc}
 801665c:	0801c7d8 	.word	0x0801c7d8
 8016660:	0801ce38 	.word	0x0801ce38
 8016664:	0801c82c 	.word	0x0801c82c

08016668 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8016668:	b580      	push	{r7, lr}
 801666a:	b082      	sub	sp, #8
 801666c:	af00      	add	r7, sp, #0
 801666e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d106      	bne.n	8016684 <tcp_rexmit_rto+0x1c>
 8016676:	4b0a      	ldr	r3, [pc, #40]	; (80166a0 <tcp_rexmit_rto+0x38>)
 8016678:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801667c:	4909      	ldr	r1, [pc, #36]	; (80166a4 <tcp_rexmit_rto+0x3c>)
 801667e:	480a      	ldr	r0, [pc, #40]	; (80166a8 <tcp_rexmit_rto+0x40>)
 8016680:	f003 fbf2 	bl	8019e68 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8016684:	6878      	ldr	r0, [r7, #4]
 8016686:	f7ff ff57 	bl	8016538 <tcp_rexmit_rto_prepare>
 801668a:	4603      	mov	r3, r0
 801668c:	2b00      	cmp	r3, #0
 801668e:	d102      	bne.n	8016696 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8016690:	6878      	ldr	r0, [r7, #4]
 8016692:	f7ff ffc1 	bl	8016618 <tcp_rexmit_rto_commit>
  }
}
 8016696:	bf00      	nop
 8016698:	3708      	adds	r7, #8
 801669a:	46bd      	mov	sp, r7
 801669c:	bd80      	pop	{r7, pc}
 801669e:	bf00      	nop
 80166a0:	0801c7d8 	.word	0x0801c7d8
 80166a4:	0801ce5c 	.word	0x0801ce5c
 80166a8:	0801c82c 	.word	0x0801c82c

080166ac <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80166ac:	b590      	push	{r4, r7, lr}
 80166ae:	b085      	sub	sp, #20
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d106      	bne.n	80166c8 <tcp_rexmit+0x1c>
 80166ba:	4b2f      	ldr	r3, [pc, #188]	; (8016778 <tcp_rexmit+0xcc>)
 80166bc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80166c0:	492e      	ldr	r1, [pc, #184]	; (801677c <tcp_rexmit+0xd0>)
 80166c2:	482f      	ldr	r0, [pc, #188]	; (8016780 <tcp_rexmit+0xd4>)
 80166c4:	f003 fbd0 	bl	8019e68 <iprintf>

  if (pcb->unacked == NULL) {
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d102      	bne.n	80166d6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80166d0:	f06f 0305 	mvn.w	r3, #5
 80166d4:	e04c      	b.n	8016770 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80166da:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80166dc:	68b8      	ldr	r0, [r7, #8]
 80166de:	f7ff fe2b 	bl	8016338 <tcp_output_segment_busy>
 80166e2:	4603      	mov	r3, r0
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d002      	beq.n	80166ee <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80166e8:	f06f 0305 	mvn.w	r3, #5
 80166ec:	e040      	b.n	8016770 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80166ee:	68bb      	ldr	r3, [r7, #8]
 80166f0:	681a      	ldr	r2, [r3, #0]
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	336c      	adds	r3, #108	; 0x6c
 80166fa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80166fc:	e002      	b.n	8016704 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80166fe:	68fb      	ldr	r3, [r7, #12]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016704:	68fb      	ldr	r3, [r7, #12]
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d011      	beq.n	8016730 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	68db      	ldr	r3, [r3, #12]
 8016712:	685b      	ldr	r3, [r3, #4]
 8016714:	4618      	mov	r0, r3
 8016716:	f7f8 fa14 	bl	800eb42 <lwip_htonl>
 801671a:	4604      	mov	r4, r0
 801671c:	68bb      	ldr	r3, [r7, #8]
 801671e:	68db      	ldr	r3, [r3, #12]
 8016720:	685b      	ldr	r3, [r3, #4]
 8016722:	4618      	mov	r0, r3
 8016724:	f7f8 fa0d 	bl	800eb42 <lwip_htonl>
 8016728:	4603      	mov	r3, r0
 801672a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801672c:	2b00      	cmp	r3, #0
 801672e:	dbe6      	blt.n	80166fe <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	681a      	ldr	r2, [r3, #0]
 8016734:	68bb      	ldr	r3, [r7, #8]
 8016736:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	68ba      	ldr	r2, [r7, #8]
 801673c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801673e:	68bb      	ldr	r3, [r7, #8]
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	2b00      	cmp	r3, #0
 8016744:	d103      	bne.n	801674e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	2200      	movs	r2, #0
 801674a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016754:	2bff      	cmp	r3, #255	; 0xff
 8016756:	d007      	beq.n	8016768 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801675e:	3301      	adds	r3, #1
 8016760:	b2da      	uxtb	r2, r3
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	2200      	movs	r2, #0
 801676c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801676e:	2300      	movs	r3, #0
}
 8016770:	4618      	mov	r0, r3
 8016772:	3714      	adds	r7, #20
 8016774:	46bd      	mov	sp, r7
 8016776:	bd90      	pop	{r4, r7, pc}
 8016778:	0801c7d8 	.word	0x0801c7d8
 801677c:	0801ce78 	.word	0x0801ce78
 8016780:	0801c82c 	.word	0x0801c82c

08016784 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8016784:	b580      	push	{r7, lr}
 8016786:	b082      	sub	sp, #8
 8016788:	af00      	add	r7, sp, #0
 801678a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	2b00      	cmp	r3, #0
 8016790:	d106      	bne.n	80167a0 <tcp_rexmit_fast+0x1c>
 8016792:	4b2a      	ldr	r3, [pc, #168]	; (801683c <tcp_rexmit_fast+0xb8>)
 8016794:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8016798:	4929      	ldr	r1, [pc, #164]	; (8016840 <tcp_rexmit_fast+0xbc>)
 801679a:	482a      	ldr	r0, [pc, #168]	; (8016844 <tcp_rexmit_fast+0xc0>)
 801679c:	f003 fb64 	bl	8019e68 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d045      	beq.n	8016834 <tcp_rexmit_fast+0xb0>
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	8b5b      	ldrh	r3, [r3, #26]
 80167ac:	f003 0304 	and.w	r3, r3, #4
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d13f      	bne.n	8016834 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80167b4:	6878      	ldr	r0, [r7, #4]
 80167b6:	f7ff ff79 	bl	80166ac <tcp_rexmit>
 80167ba:	4603      	mov	r3, r0
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d139      	bne.n	8016834 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80167cc:	4293      	cmp	r3, r2
 80167ce:	bf28      	it	cs
 80167d0:	4613      	movcs	r3, r2
 80167d2:	b29b      	uxth	r3, r3
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	da00      	bge.n	80167da <tcp_rexmit_fast+0x56>
 80167d8:	3301      	adds	r3, #1
 80167da:	105b      	asrs	r3, r3, #1
 80167dc:	b29a      	uxth	r2, r3
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80167ea:	461a      	mov	r2, r3
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80167f0:	005b      	lsls	r3, r3, #1
 80167f2:	429a      	cmp	r2, r3
 80167f4:	d206      	bcs.n	8016804 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80167fa:	005b      	lsls	r3, r3, #1
 80167fc:	b29a      	uxth	r2, r3
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801680e:	4619      	mov	r1, r3
 8016810:	0049      	lsls	r1, r1, #1
 8016812:	440b      	add	r3, r1
 8016814:	b29b      	uxth	r3, r3
 8016816:	4413      	add	r3, r2
 8016818:	b29a      	uxth	r2, r3
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	8b5b      	ldrh	r3, [r3, #26]
 8016824:	f043 0304 	orr.w	r3, r3, #4
 8016828:	b29a      	uxth	r2, r3
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	2200      	movs	r2, #0
 8016832:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8016834:	bf00      	nop
 8016836:	3708      	adds	r7, #8
 8016838:	46bd      	mov	sp, r7
 801683a:	bd80      	pop	{r7, pc}
 801683c:	0801c7d8 	.word	0x0801c7d8
 8016840:	0801ce90 	.word	0x0801ce90
 8016844:	0801c82c 	.word	0x0801c82c

08016848 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8016848:	b580      	push	{r7, lr}
 801684a:	b086      	sub	sp, #24
 801684c:	af00      	add	r7, sp, #0
 801684e:	60f8      	str	r0, [r7, #12]
 8016850:	607b      	str	r3, [r7, #4]
 8016852:	460b      	mov	r3, r1
 8016854:	817b      	strh	r3, [r7, #10]
 8016856:	4613      	mov	r3, r2
 8016858:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801685a:	897a      	ldrh	r2, [r7, #10]
 801685c:	893b      	ldrh	r3, [r7, #8]
 801685e:	4413      	add	r3, r2
 8016860:	b29b      	uxth	r3, r3
 8016862:	3314      	adds	r3, #20
 8016864:	b29b      	uxth	r3, r3
 8016866:	f44f 7220 	mov.w	r2, #640	; 0x280
 801686a:	4619      	mov	r1, r3
 801686c:	2022      	movs	r0, #34	; 0x22
 801686e:	f7f9 fb35 	bl	800fedc <pbuf_alloc>
 8016872:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8016874:	697b      	ldr	r3, [r7, #20]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d04d      	beq.n	8016916 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801687a:	897b      	ldrh	r3, [r7, #10]
 801687c:	3313      	adds	r3, #19
 801687e:	697a      	ldr	r2, [r7, #20]
 8016880:	8952      	ldrh	r2, [r2, #10]
 8016882:	4293      	cmp	r3, r2
 8016884:	db06      	blt.n	8016894 <tcp_output_alloc_header_common+0x4c>
 8016886:	4b26      	ldr	r3, [pc, #152]	; (8016920 <tcp_output_alloc_header_common+0xd8>)
 8016888:	f240 7223 	movw	r2, #1827	; 0x723
 801688c:	4925      	ldr	r1, [pc, #148]	; (8016924 <tcp_output_alloc_header_common+0xdc>)
 801688e:	4826      	ldr	r0, [pc, #152]	; (8016928 <tcp_output_alloc_header_common+0xe0>)
 8016890:	f003 faea 	bl	8019e68 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8016894:	697b      	ldr	r3, [r7, #20]
 8016896:	685b      	ldr	r3, [r3, #4]
 8016898:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801689a:	8c3b      	ldrh	r3, [r7, #32]
 801689c:	4618      	mov	r0, r3
 801689e:	f7f8 f93b 	bl	800eb18 <lwip_htons>
 80168a2:	4603      	mov	r3, r0
 80168a4:	461a      	mov	r2, r3
 80168a6:	693b      	ldr	r3, [r7, #16]
 80168a8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80168aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80168ac:	4618      	mov	r0, r3
 80168ae:	f7f8 f933 	bl	800eb18 <lwip_htons>
 80168b2:	4603      	mov	r3, r0
 80168b4:	461a      	mov	r2, r3
 80168b6:	693b      	ldr	r3, [r7, #16]
 80168b8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80168ba:	693b      	ldr	r3, [r7, #16]
 80168bc:	687a      	ldr	r2, [r7, #4]
 80168be:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80168c0:	68f8      	ldr	r0, [r7, #12]
 80168c2:	f7f8 f93e 	bl	800eb42 <lwip_htonl>
 80168c6:	4602      	mov	r2, r0
 80168c8:	693b      	ldr	r3, [r7, #16]
 80168ca:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80168cc:	897b      	ldrh	r3, [r7, #10]
 80168ce:	089b      	lsrs	r3, r3, #2
 80168d0:	b29b      	uxth	r3, r3
 80168d2:	3305      	adds	r3, #5
 80168d4:	b29b      	uxth	r3, r3
 80168d6:	031b      	lsls	r3, r3, #12
 80168d8:	b29a      	uxth	r2, r3
 80168da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80168de:	b29b      	uxth	r3, r3
 80168e0:	4313      	orrs	r3, r2
 80168e2:	b29b      	uxth	r3, r3
 80168e4:	4618      	mov	r0, r3
 80168e6:	f7f8 f917 	bl	800eb18 <lwip_htons>
 80168ea:	4603      	mov	r3, r0
 80168ec:	461a      	mov	r2, r3
 80168ee:	693b      	ldr	r3, [r7, #16]
 80168f0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80168f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80168f4:	4618      	mov	r0, r3
 80168f6:	f7f8 f90f 	bl	800eb18 <lwip_htons>
 80168fa:	4603      	mov	r3, r0
 80168fc:	461a      	mov	r2, r3
 80168fe:	693b      	ldr	r3, [r7, #16]
 8016900:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8016902:	693b      	ldr	r3, [r7, #16]
 8016904:	2200      	movs	r2, #0
 8016906:	741a      	strb	r2, [r3, #16]
 8016908:	2200      	movs	r2, #0
 801690a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801690c:	693b      	ldr	r3, [r7, #16]
 801690e:	2200      	movs	r2, #0
 8016910:	749a      	strb	r2, [r3, #18]
 8016912:	2200      	movs	r2, #0
 8016914:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8016916:	697b      	ldr	r3, [r7, #20]
}
 8016918:	4618      	mov	r0, r3
 801691a:	3718      	adds	r7, #24
 801691c:	46bd      	mov	sp, r7
 801691e:	bd80      	pop	{r7, pc}
 8016920:	0801c7d8 	.word	0x0801c7d8
 8016924:	0801ceb0 	.word	0x0801ceb0
 8016928:	0801c82c 	.word	0x0801c82c

0801692c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801692c:	b5b0      	push	{r4, r5, r7, lr}
 801692e:	b08a      	sub	sp, #40	; 0x28
 8016930:	af04      	add	r7, sp, #16
 8016932:	60f8      	str	r0, [r7, #12]
 8016934:	607b      	str	r3, [r7, #4]
 8016936:	460b      	mov	r3, r1
 8016938:	817b      	strh	r3, [r7, #10]
 801693a:	4613      	mov	r3, r2
 801693c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d106      	bne.n	8016952 <tcp_output_alloc_header+0x26>
 8016944:	4b15      	ldr	r3, [pc, #84]	; (801699c <tcp_output_alloc_header+0x70>)
 8016946:	f240 7242 	movw	r2, #1858	; 0x742
 801694a:	4915      	ldr	r1, [pc, #84]	; (80169a0 <tcp_output_alloc_header+0x74>)
 801694c:	4815      	ldr	r0, [pc, #84]	; (80169a4 <tcp_output_alloc_header+0x78>)
 801694e:	f003 fa8b 	bl	8019e68 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	8adb      	ldrh	r3, [r3, #22]
 801695a:	68fa      	ldr	r2, [r7, #12]
 801695c:	8b12      	ldrh	r2, [r2, #24]
 801695e:	68f9      	ldr	r1, [r7, #12]
 8016960:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8016962:	893d      	ldrh	r5, [r7, #8]
 8016964:	897c      	ldrh	r4, [r7, #10]
 8016966:	9103      	str	r1, [sp, #12]
 8016968:	2110      	movs	r1, #16
 801696a:	9102      	str	r1, [sp, #8]
 801696c:	9201      	str	r2, [sp, #4]
 801696e:	9300      	str	r3, [sp, #0]
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	462a      	mov	r2, r5
 8016974:	4621      	mov	r1, r4
 8016976:	f7ff ff67 	bl	8016848 <tcp_output_alloc_header_common>
 801697a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801697c:	697b      	ldr	r3, [r7, #20]
 801697e:	2b00      	cmp	r3, #0
 8016980:	d006      	beq.n	8016990 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016986:	68fa      	ldr	r2, [r7, #12]
 8016988:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801698a:	441a      	add	r2, r3
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8016990:	697b      	ldr	r3, [r7, #20]
}
 8016992:	4618      	mov	r0, r3
 8016994:	3718      	adds	r7, #24
 8016996:	46bd      	mov	sp, r7
 8016998:	bdb0      	pop	{r4, r5, r7, pc}
 801699a:	bf00      	nop
 801699c:	0801c7d8 	.word	0x0801c7d8
 80169a0:	0801cee0 	.word	0x0801cee0
 80169a4:	0801c82c 	.word	0x0801c82c

080169a8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80169a8:	b580      	push	{r7, lr}
 80169aa:	b088      	sub	sp, #32
 80169ac:	af00      	add	r7, sp, #0
 80169ae:	60f8      	str	r0, [r7, #12]
 80169b0:	60b9      	str	r1, [r7, #8]
 80169b2:	4611      	mov	r1, r2
 80169b4:	461a      	mov	r2, r3
 80169b6:	460b      	mov	r3, r1
 80169b8:	71fb      	strb	r3, [r7, #7]
 80169ba:	4613      	mov	r3, r2
 80169bc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80169be:	2300      	movs	r3, #0
 80169c0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80169c2:	68bb      	ldr	r3, [r7, #8]
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d106      	bne.n	80169d6 <tcp_output_fill_options+0x2e>
 80169c8:	4b12      	ldr	r3, [pc, #72]	; (8016a14 <tcp_output_fill_options+0x6c>)
 80169ca:	f240 7256 	movw	r2, #1878	; 0x756
 80169ce:	4912      	ldr	r1, [pc, #72]	; (8016a18 <tcp_output_fill_options+0x70>)
 80169d0:	4812      	ldr	r0, [pc, #72]	; (8016a1c <tcp_output_fill_options+0x74>)
 80169d2:	f003 fa49 	bl	8019e68 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80169d6:	68bb      	ldr	r3, [r7, #8]
 80169d8:	685b      	ldr	r3, [r3, #4]
 80169da:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80169dc:	69bb      	ldr	r3, [r7, #24]
 80169de:	3314      	adds	r3, #20
 80169e0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80169e2:	8bfb      	ldrh	r3, [r7, #30]
 80169e4:	009b      	lsls	r3, r3, #2
 80169e6:	461a      	mov	r2, r3
 80169e8:	79fb      	ldrb	r3, [r7, #7]
 80169ea:	009b      	lsls	r3, r3, #2
 80169ec:	f003 0304 	and.w	r3, r3, #4
 80169f0:	4413      	add	r3, r2
 80169f2:	3314      	adds	r3, #20
 80169f4:	69ba      	ldr	r2, [r7, #24]
 80169f6:	4413      	add	r3, r2
 80169f8:	697a      	ldr	r2, [r7, #20]
 80169fa:	429a      	cmp	r2, r3
 80169fc:	d006      	beq.n	8016a0c <tcp_output_fill_options+0x64>
 80169fe:	4b05      	ldr	r3, [pc, #20]	; (8016a14 <tcp_output_fill_options+0x6c>)
 8016a00:	f240 7275 	movw	r2, #1909	; 0x775
 8016a04:	4906      	ldr	r1, [pc, #24]	; (8016a20 <tcp_output_fill_options+0x78>)
 8016a06:	4805      	ldr	r0, [pc, #20]	; (8016a1c <tcp_output_fill_options+0x74>)
 8016a08:	f003 fa2e 	bl	8019e68 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8016a0c:	bf00      	nop
 8016a0e:	3720      	adds	r7, #32
 8016a10:	46bd      	mov	sp, r7
 8016a12:	bd80      	pop	{r7, pc}
 8016a14:	0801c7d8 	.word	0x0801c7d8
 8016a18:	0801cf08 	.word	0x0801cf08
 8016a1c:	0801c82c 	.word	0x0801c82c
 8016a20:	0801ce00 	.word	0x0801ce00

08016a24 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b08a      	sub	sp, #40	; 0x28
 8016a28:	af04      	add	r7, sp, #16
 8016a2a:	60f8      	str	r0, [r7, #12]
 8016a2c:	60b9      	str	r1, [r7, #8]
 8016a2e:	607a      	str	r2, [r7, #4]
 8016a30:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8016a32:	68bb      	ldr	r3, [r7, #8]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d106      	bne.n	8016a46 <tcp_output_control_segment+0x22>
 8016a38:	4b1c      	ldr	r3, [pc, #112]	; (8016aac <tcp_output_control_segment+0x88>)
 8016a3a:	f240 7287 	movw	r2, #1927	; 0x787
 8016a3e:	491c      	ldr	r1, [pc, #112]	; (8016ab0 <tcp_output_control_segment+0x8c>)
 8016a40:	481c      	ldr	r0, [pc, #112]	; (8016ab4 <tcp_output_control_segment+0x90>)
 8016a42:	f003 fa11 	bl	8019e68 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8016a46:	683a      	ldr	r2, [r7, #0]
 8016a48:	6879      	ldr	r1, [r7, #4]
 8016a4a:	68f8      	ldr	r0, [r7, #12]
 8016a4c:	f7fe fae4 	bl	8015018 <tcp_route>
 8016a50:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8016a52:	693b      	ldr	r3, [r7, #16]
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d102      	bne.n	8016a5e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8016a58:	23fc      	movs	r3, #252	; 0xfc
 8016a5a:	75fb      	strb	r3, [r7, #23]
 8016a5c:	e01c      	b.n	8016a98 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d006      	beq.n	8016a72 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	7adb      	ldrb	r3, [r3, #11]
 8016a68:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	7a9b      	ldrb	r3, [r3, #10]
 8016a6e:	757b      	strb	r3, [r7, #21]
 8016a70:	e003      	b.n	8016a7a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8016a72:	23ff      	movs	r3, #255	; 0xff
 8016a74:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8016a76:	2300      	movs	r3, #0
 8016a78:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8016a7a:	7dba      	ldrb	r2, [r7, #22]
 8016a7c:	693b      	ldr	r3, [r7, #16]
 8016a7e:	9302      	str	r3, [sp, #8]
 8016a80:	2306      	movs	r3, #6
 8016a82:	9301      	str	r3, [sp, #4]
 8016a84:	7d7b      	ldrb	r3, [r7, #21]
 8016a86:	9300      	str	r3, [sp, #0]
 8016a88:	4613      	mov	r3, r2
 8016a8a:	683a      	ldr	r2, [r7, #0]
 8016a8c:	6879      	ldr	r1, [r7, #4]
 8016a8e:	68b8      	ldr	r0, [r7, #8]
 8016a90:	f001 ffd6 	bl	8018a40 <ip4_output_if>
 8016a94:	4603      	mov	r3, r0
 8016a96:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8016a98:	68b8      	ldr	r0, [r7, #8]
 8016a9a:	f7f9 fd07 	bl	80104ac <pbuf_free>
  return err;
 8016a9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016aa2:	4618      	mov	r0, r3
 8016aa4:	3718      	adds	r7, #24
 8016aa6:	46bd      	mov	sp, r7
 8016aa8:	bd80      	pop	{r7, pc}
 8016aaa:	bf00      	nop
 8016aac:	0801c7d8 	.word	0x0801c7d8
 8016ab0:	0801cf30 	.word	0x0801cf30
 8016ab4:	0801c82c 	.word	0x0801c82c

08016ab8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8016ab8:	b590      	push	{r4, r7, lr}
 8016aba:	b08b      	sub	sp, #44	; 0x2c
 8016abc:	af04      	add	r7, sp, #16
 8016abe:	60f8      	str	r0, [r7, #12]
 8016ac0:	60b9      	str	r1, [r7, #8]
 8016ac2:	607a      	str	r2, [r7, #4]
 8016ac4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8016ac6:	683b      	ldr	r3, [r7, #0]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d106      	bne.n	8016ada <tcp_rst+0x22>
 8016acc:	4b1f      	ldr	r3, [pc, #124]	; (8016b4c <tcp_rst+0x94>)
 8016ace:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8016ad2:	491f      	ldr	r1, [pc, #124]	; (8016b50 <tcp_rst+0x98>)
 8016ad4:	481f      	ldr	r0, [pc, #124]	; (8016b54 <tcp_rst+0x9c>)
 8016ad6:	f003 f9c7 	bl	8019e68 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8016ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d106      	bne.n	8016aee <tcp_rst+0x36>
 8016ae0:	4b1a      	ldr	r3, [pc, #104]	; (8016b4c <tcp_rst+0x94>)
 8016ae2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8016ae6:	491c      	ldr	r1, [pc, #112]	; (8016b58 <tcp_rst+0xa0>)
 8016ae8:	481a      	ldr	r0, [pc, #104]	; (8016b54 <tcp_rst+0x9c>)
 8016aea:	f003 f9bd 	bl	8019e68 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016aee:	2300      	movs	r3, #0
 8016af0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8016af2:	f24d 0316 	movw	r3, #53270	; 0xd016
 8016af6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8016af8:	7dfb      	ldrb	r3, [r7, #23]
 8016afa:	b29c      	uxth	r4, r3
 8016afc:	68b8      	ldr	r0, [r7, #8]
 8016afe:	f7f8 f820 	bl	800eb42 <lwip_htonl>
 8016b02:	4602      	mov	r2, r0
 8016b04:	8abb      	ldrh	r3, [r7, #20]
 8016b06:	9303      	str	r3, [sp, #12]
 8016b08:	2314      	movs	r3, #20
 8016b0a:	9302      	str	r3, [sp, #8]
 8016b0c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8016b0e:	9301      	str	r3, [sp, #4]
 8016b10:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016b12:	9300      	str	r3, [sp, #0]
 8016b14:	4613      	mov	r3, r2
 8016b16:	2200      	movs	r2, #0
 8016b18:	4621      	mov	r1, r4
 8016b1a:	6878      	ldr	r0, [r7, #4]
 8016b1c:	f7ff fe94 	bl	8016848 <tcp_output_alloc_header_common>
 8016b20:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8016b22:	693b      	ldr	r3, [r7, #16]
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d00c      	beq.n	8016b42 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016b28:	7dfb      	ldrb	r3, [r7, #23]
 8016b2a:	2200      	movs	r2, #0
 8016b2c:	6939      	ldr	r1, [r7, #16]
 8016b2e:	68f8      	ldr	r0, [r7, #12]
 8016b30:	f7ff ff3a 	bl	80169a8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8016b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b36:	683a      	ldr	r2, [r7, #0]
 8016b38:	6939      	ldr	r1, [r7, #16]
 8016b3a:	68f8      	ldr	r0, [r7, #12]
 8016b3c:	f7ff ff72 	bl	8016a24 <tcp_output_control_segment>
 8016b40:	e000      	b.n	8016b44 <tcp_rst+0x8c>
    return;
 8016b42:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016b44:	371c      	adds	r7, #28
 8016b46:	46bd      	mov	sp, r7
 8016b48:	bd90      	pop	{r4, r7, pc}
 8016b4a:	bf00      	nop
 8016b4c:	0801c7d8 	.word	0x0801c7d8
 8016b50:	0801cf5c 	.word	0x0801cf5c
 8016b54:	0801c82c 	.word	0x0801c82c
 8016b58:	0801cf78 	.word	0x0801cf78

08016b5c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8016b5c:	b590      	push	{r4, r7, lr}
 8016b5e:	b087      	sub	sp, #28
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8016b64:	2300      	movs	r3, #0
 8016b66:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8016b68:	2300      	movs	r3, #0
 8016b6a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d106      	bne.n	8016b80 <tcp_send_empty_ack+0x24>
 8016b72:	4b28      	ldr	r3, [pc, #160]	; (8016c14 <tcp_send_empty_ack+0xb8>)
 8016b74:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8016b78:	4927      	ldr	r1, [pc, #156]	; (8016c18 <tcp_send_empty_ack+0xbc>)
 8016b7a:	4828      	ldr	r0, [pc, #160]	; (8016c1c <tcp_send_empty_ack+0xc0>)
 8016b7c:	f003 f974 	bl	8019e68 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016b80:	7dfb      	ldrb	r3, [r7, #23]
 8016b82:	009b      	lsls	r3, r3, #2
 8016b84:	b2db      	uxtb	r3, r3
 8016b86:	f003 0304 	and.w	r3, r3, #4
 8016b8a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8016b8c:	7d7b      	ldrb	r3, [r7, #21]
 8016b8e:	b29c      	uxth	r4, r3
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016b94:	4618      	mov	r0, r3
 8016b96:	f7f7 ffd4 	bl	800eb42 <lwip_htonl>
 8016b9a:	4603      	mov	r3, r0
 8016b9c:	2200      	movs	r2, #0
 8016b9e:	4621      	mov	r1, r4
 8016ba0:	6878      	ldr	r0, [r7, #4]
 8016ba2:	f7ff fec3 	bl	801692c <tcp_output_alloc_header>
 8016ba6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016ba8:	693b      	ldr	r3, [r7, #16]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d109      	bne.n	8016bc2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	8b5b      	ldrh	r3, [r3, #26]
 8016bb2:	f043 0303 	orr.w	r3, r3, #3
 8016bb6:	b29a      	uxth	r2, r3
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8016bbc:	f06f 0301 	mvn.w	r3, #1
 8016bc0:	e023      	b.n	8016c0a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8016bc2:	7dbb      	ldrb	r3, [r7, #22]
 8016bc4:	7dfa      	ldrb	r2, [r7, #23]
 8016bc6:	6939      	ldr	r1, [r7, #16]
 8016bc8:	6878      	ldr	r0, [r7, #4]
 8016bca:	f7ff feed 	bl	80169a8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016bce:	687a      	ldr	r2, [r7, #4]
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	3304      	adds	r3, #4
 8016bd4:	6939      	ldr	r1, [r7, #16]
 8016bd6:	6878      	ldr	r0, [r7, #4]
 8016bd8:	f7ff ff24 	bl	8016a24 <tcp_output_control_segment>
 8016bdc:	4603      	mov	r3, r0
 8016bde:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8016be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d007      	beq.n	8016bf8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	8b5b      	ldrh	r3, [r3, #26]
 8016bec:	f043 0303 	orr.w	r3, r3, #3
 8016bf0:	b29a      	uxth	r2, r3
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	835a      	strh	r2, [r3, #26]
 8016bf6:	e006      	b.n	8016c06 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	8b5b      	ldrh	r3, [r3, #26]
 8016bfc:	f023 0303 	bic.w	r3, r3, #3
 8016c00:	b29a      	uxth	r2, r3
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8016c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	371c      	adds	r7, #28
 8016c0e:	46bd      	mov	sp, r7
 8016c10:	bd90      	pop	{r4, r7, pc}
 8016c12:	bf00      	nop
 8016c14:	0801c7d8 	.word	0x0801c7d8
 8016c18:	0801cf94 	.word	0x0801cf94
 8016c1c:	0801c82c 	.word	0x0801c82c

08016c20 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016c20:	b590      	push	{r4, r7, lr}
 8016c22:	b087      	sub	sp, #28
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016c28:	2300      	movs	r3, #0
 8016c2a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d106      	bne.n	8016c40 <tcp_keepalive+0x20>
 8016c32:	4b18      	ldr	r3, [pc, #96]	; (8016c94 <tcp_keepalive+0x74>)
 8016c34:	f640 0224 	movw	r2, #2084	; 0x824
 8016c38:	4917      	ldr	r1, [pc, #92]	; (8016c98 <tcp_keepalive+0x78>)
 8016c3a:	4818      	ldr	r0, [pc, #96]	; (8016c9c <tcp_keepalive+0x7c>)
 8016c3c:	f003 f914 	bl	8019e68 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016c40:	7dfb      	ldrb	r3, [r7, #23]
 8016c42:	b29c      	uxth	r4, r3
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016c48:	3b01      	subs	r3, #1
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	f7f7 ff79 	bl	800eb42 <lwip_htonl>
 8016c50:	4603      	mov	r3, r0
 8016c52:	2200      	movs	r2, #0
 8016c54:	4621      	mov	r1, r4
 8016c56:	6878      	ldr	r0, [r7, #4]
 8016c58:	f7ff fe68 	bl	801692c <tcp_output_alloc_header>
 8016c5c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016c5e:	693b      	ldr	r3, [r7, #16]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d102      	bne.n	8016c6a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8016c64:	f04f 33ff 	mov.w	r3, #4294967295
 8016c68:	e010      	b.n	8016c8c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016c6a:	7dfb      	ldrb	r3, [r7, #23]
 8016c6c:	2200      	movs	r2, #0
 8016c6e:	6939      	ldr	r1, [r7, #16]
 8016c70:	6878      	ldr	r0, [r7, #4]
 8016c72:	f7ff fe99 	bl	80169a8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016c76:	687a      	ldr	r2, [r7, #4]
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	3304      	adds	r3, #4
 8016c7c:	6939      	ldr	r1, [r7, #16]
 8016c7e:	6878      	ldr	r0, [r7, #4]
 8016c80:	f7ff fed0 	bl	8016a24 <tcp_output_control_segment>
 8016c84:	4603      	mov	r3, r0
 8016c86:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	371c      	adds	r7, #28
 8016c90:	46bd      	mov	sp, r7
 8016c92:	bd90      	pop	{r4, r7, pc}
 8016c94:	0801c7d8 	.word	0x0801c7d8
 8016c98:	0801cfb4 	.word	0x0801cfb4
 8016c9c:	0801c82c 	.word	0x0801c82c

08016ca0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8016ca0:	b590      	push	{r4, r7, lr}
 8016ca2:	b08b      	sub	sp, #44	; 0x2c
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016ca8:	2300      	movs	r3, #0
 8016caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d106      	bne.n	8016cc2 <tcp_zero_window_probe+0x22>
 8016cb4:	4b4c      	ldr	r3, [pc, #304]	; (8016de8 <tcp_zero_window_probe+0x148>)
 8016cb6:	f640 024f 	movw	r2, #2127	; 0x84f
 8016cba:	494c      	ldr	r1, [pc, #304]	; (8016dec <tcp_zero_window_probe+0x14c>)
 8016cbc:	484c      	ldr	r0, [pc, #304]	; (8016df0 <tcp_zero_window_probe+0x150>)
 8016cbe:	f003 f8d3 	bl	8019e68 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016cc6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8016cc8:	6a3b      	ldr	r3, [r7, #32]
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d101      	bne.n	8016cd2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8016cce:	2300      	movs	r3, #0
 8016cd0:	e086      	b.n	8016de0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016cd8:	2bff      	cmp	r3, #255	; 0xff
 8016cda:	d007      	beq.n	8016cec <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016ce2:	3301      	adds	r3, #1
 8016ce4:	b2da      	uxtb	r2, r3
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016cec:	6a3b      	ldr	r3, [r7, #32]
 8016cee:	68db      	ldr	r3, [r3, #12]
 8016cf0:	899b      	ldrh	r3, [r3, #12]
 8016cf2:	b29b      	uxth	r3, r3
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	f7f7 ff0f 	bl	800eb18 <lwip_htons>
 8016cfa:	4603      	mov	r3, r0
 8016cfc:	b2db      	uxtb	r3, r3
 8016cfe:	f003 0301 	and.w	r3, r3, #1
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d005      	beq.n	8016d12 <tcp_zero_window_probe+0x72>
 8016d06:	6a3b      	ldr	r3, [r7, #32]
 8016d08:	891b      	ldrh	r3, [r3, #8]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d101      	bne.n	8016d12 <tcp_zero_window_probe+0x72>
 8016d0e:	2301      	movs	r3, #1
 8016d10:	e000      	b.n	8016d14 <tcp_zero_window_probe+0x74>
 8016d12:	2300      	movs	r3, #0
 8016d14:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016d16:	7ffb      	ldrb	r3, [r7, #31]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	bf0c      	ite	eq
 8016d1c:	2301      	moveq	r3, #1
 8016d1e:	2300      	movne	r3, #0
 8016d20:	b2db      	uxtb	r3, r3
 8016d22:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d28:	b299      	uxth	r1, r3
 8016d2a:	6a3b      	ldr	r3, [r7, #32]
 8016d2c:	68db      	ldr	r3, [r3, #12]
 8016d2e:	685b      	ldr	r3, [r3, #4]
 8016d30:	8bba      	ldrh	r2, [r7, #28]
 8016d32:	6878      	ldr	r0, [r7, #4]
 8016d34:	f7ff fdfa 	bl	801692c <tcp_output_alloc_header>
 8016d38:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016d3a:	69bb      	ldr	r3, [r7, #24]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d102      	bne.n	8016d46 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016d40:	f04f 33ff 	mov.w	r3, #4294967295
 8016d44:	e04c      	b.n	8016de0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016d46:	69bb      	ldr	r3, [r7, #24]
 8016d48:	685b      	ldr	r3, [r3, #4]
 8016d4a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016d4c:	7ffb      	ldrb	r3, [r7, #31]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d011      	beq.n	8016d76 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8016d52:	697b      	ldr	r3, [r7, #20]
 8016d54:	899b      	ldrh	r3, [r3, #12]
 8016d56:	b29b      	uxth	r3, r3
 8016d58:	b21b      	sxth	r3, r3
 8016d5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016d5e:	b21c      	sxth	r4, r3
 8016d60:	2011      	movs	r0, #17
 8016d62:	f7f7 fed9 	bl	800eb18 <lwip_htons>
 8016d66:	4603      	mov	r3, r0
 8016d68:	b21b      	sxth	r3, r3
 8016d6a:	4323      	orrs	r3, r4
 8016d6c:	b21b      	sxth	r3, r3
 8016d6e:	b29a      	uxth	r2, r3
 8016d70:	697b      	ldr	r3, [r7, #20]
 8016d72:	819a      	strh	r2, [r3, #12]
 8016d74:	e010      	b.n	8016d98 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016d76:	69bb      	ldr	r3, [r7, #24]
 8016d78:	685b      	ldr	r3, [r3, #4]
 8016d7a:	3314      	adds	r3, #20
 8016d7c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8016d7e:	6a3b      	ldr	r3, [r7, #32]
 8016d80:	6858      	ldr	r0, [r3, #4]
 8016d82:	6a3b      	ldr	r3, [r7, #32]
 8016d84:	685b      	ldr	r3, [r3, #4]
 8016d86:	891a      	ldrh	r2, [r3, #8]
 8016d88:	6a3b      	ldr	r3, [r7, #32]
 8016d8a:	891b      	ldrh	r3, [r3, #8]
 8016d8c:	1ad3      	subs	r3, r2, r3
 8016d8e:	b29b      	uxth	r3, r3
 8016d90:	2201      	movs	r2, #1
 8016d92:	6939      	ldr	r1, [r7, #16]
 8016d94:	f7f9 fd80 	bl	8010898 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016d98:	6a3b      	ldr	r3, [r7, #32]
 8016d9a:	68db      	ldr	r3, [r3, #12]
 8016d9c:	685b      	ldr	r3, [r3, #4]
 8016d9e:	4618      	mov	r0, r3
 8016da0:	f7f7 fecf 	bl	800eb42 <lwip_htonl>
 8016da4:	4603      	mov	r3, r0
 8016da6:	3301      	adds	r3, #1
 8016da8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	1ad3      	subs	r3, r2, r3
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	da02      	bge.n	8016dbc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	68fa      	ldr	r2, [r7, #12]
 8016dba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016dc0:	2200      	movs	r2, #0
 8016dc2:	69b9      	ldr	r1, [r7, #24]
 8016dc4:	6878      	ldr	r0, [r7, #4]
 8016dc6:	f7ff fdef 	bl	80169a8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016dca:	687a      	ldr	r2, [r7, #4]
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	3304      	adds	r3, #4
 8016dd0:	69b9      	ldr	r1, [r7, #24]
 8016dd2:	6878      	ldr	r0, [r7, #4]
 8016dd4:	f7ff fe26 	bl	8016a24 <tcp_output_control_segment>
 8016dd8:	4603      	mov	r3, r0
 8016dda:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016ddc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016de0:	4618      	mov	r0, r3
 8016de2:	372c      	adds	r7, #44	; 0x2c
 8016de4:	46bd      	mov	sp, r7
 8016de6:	bd90      	pop	{r4, r7, pc}
 8016de8:	0801c7d8 	.word	0x0801c7d8
 8016dec:	0801cfd0 	.word	0x0801cfd0
 8016df0:	0801c82c 	.word	0x0801c82c

08016df4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016df4:	b580      	push	{r7, lr}
 8016df6:	b082      	sub	sp, #8
 8016df8:	af00      	add	r7, sp, #0
 8016dfa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016dfc:	f7f9 fef2 	bl	8010be4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8016e00:	4b0a      	ldr	r3, [pc, #40]	; (8016e2c <tcpip_tcp_timer+0x38>)
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d103      	bne.n	8016e10 <tcpip_tcp_timer+0x1c>
 8016e08:	4b09      	ldr	r3, [pc, #36]	; (8016e30 <tcpip_tcp_timer+0x3c>)
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d005      	beq.n	8016e1c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016e10:	2200      	movs	r2, #0
 8016e12:	4908      	ldr	r1, [pc, #32]	; (8016e34 <tcpip_tcp_timer+0x40>)
 8016e14:	20fa      	movs	r0, #250	; 0xfa
 8016e16:	f000 f8f5 	bl	8017004 <sys_timeout>
 8016e1a:	e003      	b.n	8016e24 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016e1c:	4b06      	ldr	r3, [pc, #24]	; (8016e38 <tcpip_tcp_timer+0x44>)
 8016e1e:	2200      	movs	r2, #0
 8016e20:	601a      	str	r2, [r3, #0]
  }
}
 8016e22:	bf00      	nop
 8016e24:	bf00      	nop
 8016e26:	3708      	adds	r7, #8
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	bd80      	pop	{r7, pc}
 8016e2c:	24015034 	.word	0x24015034
 8016e30:	24015038 	.word	0x24015038
 8016e34:	08016df5 	.word	0x08016df5
 8016e38:	24015080 	.word	0x24015080

08016e3c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016e3c:	b580      	push	{r7, lr}
 8016e3e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
 8016e40:	f7f3 fe40 	bl	800aac4 <sys_check_core_locking>

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016e44:	4b0a      	ldr	r3, [pc, #40]	; (8016e70 <tcp_timer_needed+0x34>)
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d10f      	bne.n	8016e6c <tcp_timer_needed+0x30>
 8016e4c:	4b09      	ldr	r3, [pc, #36]	; (8016e74 <tcp_timer_needed+0x38>)
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d103      	bne.n	8016e5c <tcp_timer_needed+0x20>
 8016e54:	4b08      	ldr	r3, [pc, #32]	; (8016e78 <tcp_timer_needed+0x3c>)
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d007      	beq.n	8016e6c <tcp_timer_needed+0x30>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016e5c:	4b04      	ldr	r3, [pc, #16]	; (8016e70 <tcp_timer_needed+0x34>)
 8016e5e:	2201      	movs	r2, #1
 8016e60:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016e62:	2200      	movs	r2, #0
 8016e64:	4905      	ldr	r1, [pc, #20]	; (8016e7c <tcp_timer_needed+0x40>)
 8016e66:	20fa      	movs	r0, #250	; 0xfa
 8016e68:	f000 f8cc 	bl	8017004 <sys_timeout>
  }
}
 8016e6c:	bf00      	nop
 8016e6e:	bd80      	pop	{r7, pc}
 8016e70:	24015080 	.word	0x24015080
 8016e74:	24015034 	.word	0x24015034
 8016e78:	24015038 	.word	0x24015038
 8016e7c:	08016df5 	.word	0x08016df5

08016e80 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8016e80:	b580      	push	{r7, lr}
 8016e82:	b086      	sub	sp, #24
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	60f8      	str	r0, [r7, #12]
 8016e88:	60b9      	str	r1, [r7, #8]
 8016e8a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016e8c:	200a      	movs	r0, #10
 8016e8e:	f7f8 fbe3 	bl	800f658 <memp_malloc>
 8016e92:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8016e94:	693b      	ldr	r3, [r7, #16]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d109      	bne.n	8016eae <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016e9a:	693b      	ldr	r3, [r7, #16]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d151      	bne.n	8016f44 <sys_timeout_abs+0xc4>
 8016ea0:	4b2a      	ldr	r3, [pc, #168]	; (8016f4c <sys_timeout_abs+0xcc>)
 8016ea2:	22be      	movs	r2, #190	; 0xbe
 8016ea4:	492a      	ldr	r1, [pc, #168]	; (8016f50 <sys_timeout_abs+0xd0>)
 8016ea6:	482b      	ldr	r0, [pc, #172]	; (8016f54 <sys_timeout_abs+0xd4>)
 8016ea8:	f002 ffde 	bl	8019e68 <iprintf>
    return;
 8016eac:	e04a      	b.n	8016f44 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8016eae:	693b      	ldr	r3, [r7, #16]
 8016eb0:	2200      	movs	r2, #0
 8016eb2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016eb4:	693b      	ldr	r3, [r7, #16]
 8016eb6:	68ba      	ldr	r2, [r7, #8]
 8016eb8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016eba:	693b      	ldr	r3, [r7, #16]
 8016ebc:	687a      	ldr	r2, [r7, #4]
 8016ebe:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016ec0:	693b      	ldr	r3, [r7, #16]
 8016ec2:	68fa      	ldr	r2, [r7, #12]
 8016ec4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8016ec6:	4b24      	ldr	r3, [pc, #144]	; (8016f58 <sys_timeout_abs+0xd8>)
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d103      	bne.n	8016ed6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8016ece:	4a22      	ldr	r2, [pc, #136]	; (8016f58 <sys_timeout_abs+0xd8>)
 8016ed0:	693b      	ldr	r3, [r7, #16]
 8016ed2:	6013      	str	r3, [r2, #0]
    return;
 8016ed4:	e037      	b.n	8016f46 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8016ed6:	693b      	ldr	r3, [r7, #16]
 8016ed8:	685a      	ldr	r2, [r3, #4]
 8016eda:	4b1f      	ldr	r3, [pc, #124]	; (8016f58 <sys_timeout_abs+0xd8>)
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	685b      	ldr	r3, [r3, #4]
 8016ee0:	1ad3      	subs	r3, r2, r3
 8016ee2:	0fdb      	lsrs	r3, r3, #31
 8016ee4:	f003 0301 	and.w	r3, r3, #1
 8016ee8:	b2db      	uxtb	r3, r3
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d007      	beq.n	8016efe <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8016eee:	4b1a      	ldr	r3, [pc, #104]	; (8016f58 <sys_timeout_abs+0xd8>)
 8016ef0:	681a      	ldr	r2, [r3, #0]
 8016ef2:	693b      	ldr	r3, [r7, #16]
 8016ef4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8016ef6:	4a18      	ldr	r2, [pc, #96]	; (8016f58 <sys_timeout_abs+0xd8>)
 8016ef8:	693b      	ldr	r3, [r7, #16]
 8016efa:	6013      	str	r3, [r2, #0]
 8016efc:	e023      	b.n	8016f46 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016efe:	4b16      	ldr	r3, [pc, #88]	; (8016f58 <sys_timeout_abs+0xd8>)
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	617b      	str	r3, [r7, #20]
 8016f04:	e01a      	b.n	8016f3c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8016f06:	697b      	ldr	r3, [r7, #20]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d00b      	beq.n	8016f26 <sys_timeout_abs+0xa6>
 8016f0e:	693b      	ldr	r3, [r7, #16]
 8016f10:	685a      	ldr	r2, [r3, #4]
 8016f12:	697b      	ldr	r3, [r7, #20]
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	685b      	ldr	r3, [r3, #4]
 8016f18:	1ad3      	subs	r3, r2, r3
 8016f1a:	0fdb      	lsrs	r3, r3, #31
 8016f1c:	f003 0301 	and.w	r3, r3, #1
 8016f20:	b2db      	uxtb	r3, r3
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d007      	beq.n	8016f36 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8016f26:	697b      	ldr	r3, [r7, #20]
 8016f28:	681a      	ldr	r2, [r3, #0]
 8016f2a:	693b      	ldr	r3, [r7, #16]
 8016f2c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016f2e:	697b      	ldr	r3, [r7, #20]
 8016f30:	693a      	ldr	r2, [r7, #16]
 8016f32:	601a      	str	r2, [r3, #0]
        break;
 8016f34:	e007      	b.n	8016f46 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016f36:	697b      	ldr	r3, [r7, #20]
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	617b      	str	r3, [r7, #20]
 8016f3c:	697b      	ldr	r3, [r7, #20]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d1e1      	bne.n	8016f06 <sys_timeout_abs+0x86>
 8016f42:	e000      	b.n	8016f46 <sys_timeout_abs+0xc6>
    return;
 8016f44:	bf00      	nop
      }
    }
  }
}
 8016f46:	3718      	adds	r7, #24
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	bd80      	pop	{r7, pc}
 8016f4c:	0801cff4 	.word	0x0801cff4
 8016f50:	0801d028 	.word	0x0801d028
 8016f54:	0801d068 	.word	0x0801d068
 8016f58:	24015078 	.word	0x24015078

08016f5c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	b086      	sub	sp, #24
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016f68:	697b      	ldr	r3, [r7, #20]
 8016f6a:	685b      	ldr	r3, [r3, #4]
 8016f6c:	4798      	blx	r3

  now = sys_now();
 8016f6e:	f7f3 fb27 	bl	800a5c0 <sys_now>
 8016f72:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8016f74:	697b      	ldr	r3, [r7, #20]
 8016f76:	681a      	ldr	r2, [r3, #0]
 8016f78:	4b0f      	ldr	r3, [pc, #60]	; (8016fb8 <lwip_cyclic_timer+0x5c>)
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	4413      	add	r3, r2
 8016f7e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016f80:	68fa      	ldr	r2, [r7, #12]
 8016f82:	693b      	ldr	r3, [r7, #16]
 8016f84:	1ad3      	subs	r3, r2, r3
 8016f86:	0fdb      	lsrs	r3, r3, #31
 8016f88:	f003 0301 	and.w	r3, r3, #1
 8016f8c:	b2db      	uxtb	r3, r3
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d009      	beq.n	8016fa6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8016f92:	697b      	ldr	r3, [r7, #20]
 8016f94:	681a      	ldr	r2, [r3, #0]
 8016f96:	693b      	ldr	r3, [r7, #16]
 8016f98:	4413      	add	r3, r2
 8016f9a:	687a      	ldr	r2, [r7, #4]
 8016f9c:	4907      	ldr	r1, [pc, #28]	; (8016fbc <lwip_cyclic_timer+0x60>)
 8016f9e:	4618      	mov	r0, r3
 8016fa0:	f7ff ff6e 	bl	8016e80 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016fa4:	e004      	b.n	8016fb0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8016fa6:	687a      	ldr	r2, [r7, #4]
 8016fa8:	4904      	ldr	r1, [pc, #16]	; (8016fbc <lwip_cyclic_timer+0x60>)
 8016faa:	68f8      	ldr	r0, [r7, #12]
 8016fac:	f7ff ff68 	bl	8016e80 <sys_timeout_abs>
}
 8016fb0:	bf00      	nop
 8016fb2:	3718      	adds	r7, #24
 8016fb4:	46bd      	mov	sp, r7
 8016fb6:	bd80      	pop	{r7, pc}
 8016fb8:	2401507c 	.word	0x2401507c
 8016fbc:	08016f5d 	.word	0x08016f5d

08016fc0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016fc0:	b580      	push	{r7, lr}
 8016fc2:	b082      	sub	sp, #8
 8016fc4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016fc6:	2301      	movs	r3, #1
 8016fc8:	607b      	str	r3, [r7, #4]
 8016fca:	e00e      	b.n	8016fea <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016fcc:	4a0b      	ldr	r2, [pc, #44]	; (8016ffc <sys_timeouts_init+0x3c>)
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	00db      	lsls	r3, r3, #3
 8016fd8:	4a08      	ldr	r2, [pc, #32]	; (8016ffc <sys_timeouts_init+0x3c>)
 8016fda:	4413      	add	r3, r2
 8016fdc:	461a      	mov	r2, r3
 8016fde:	4908      	ldr	r1, [pc, #32]	; (8017000 <sys_timeouts_init+0x40>)
 8016fe0:	f000 f810 	bl	8017004 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	3301      	adds	r3, #1
 8016fe8:	607b      	str	r3, [r7, #4]
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	2b02      	cmp	r3, #2
 8016fee:	d9ed      	bls.n	8016fcc <sys_timeouts_init+0xc>
  }
}
 8016ff0:	bf00      	nop
 8016ff2:	bf00      	nop
 8016ff4:	3708      	adds	r7, #8
 8016ff6:	46bd      	mov	sp, r7
 8016ff8:	bd80      	pop	{r7, pc}
 8016ffa:	bf00      	nop
 8016ffc:	0801e2a4 	.word	0x0801e2a4
 8017000:	08016f5d 	.word	0x08016f5d

08017004 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017004:	b580      	push	{r7, lr}
 8017006:	b086      	sub	sp, #24
 8017008:	af00      	add	r7, sp, #0
 801700a:	60f8      	str	r0, [r7, #12]
 801700c:	60b9      	str	r1, [r7, #8]
 801700e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();
 8017010:	f7f3 fd58 	bl	800aac4 <sys_check_core_locking>

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801701a:	d306      	bcc.n	801702a <sys_timeout+0x26>
 801701c:	4b0a      	ldr	r3, [pc, #40]	; (8017048 <sys_timeout+0x44>)
 801701e:	f240 1229 	movw	r2, #297	; 0x129
 8017022:	490a      	ldr	r1, [pc, #40]	; (801704c <sys_timeout+0x48>)
 8017024:	480a      	ldr	r0, [pc, #40]	; (8017050 <sys_timeout+0x4c>)
 8017026:	f002 ff1f 	bl	8019e68 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801702a:	f7f3 fac9 	bl	800a5c0 <sys_now>
 801702e:	4602      	mov	r2, r0
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	4413      	add	r3, r2
 8017034:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017036:	687a      	ldr	r2, [r7, #4]
 8017038:	68b9      	ldr	r1, [r7, #8]
 801703a:	6978      	ldr	r0, [r7, #20]
 801703c:	f7ff ff20 	bl	8016e80 <sys_timeout_abs>
#endif
}
 8017040:	bf00      	nop
 8017042:	3718      	adds	r7, #24
 8017044:	46bd      	mov	sp, r7
 8017046:	bd80      	pop	{r7, pc}
 8017048:	0801cff4 	.word	0x0801cff4
 801704c:	0801d090 	.word	0x0801d090
 8017050:	0801d068 	.word	0x0801d068

08017054 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017054:	b580      	push	{r7, lr}
 8017056:	b084      	sub	sp, #16
 8017058:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 801705a:	f7f3 fd33 	bl	800aac4 <sys_check_core_locking>

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801705e:	f7f3 faaf 	bl	800a5c0 <sys_now>
 8017062:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017064:	4b17      	ldr	r3, [pc, #92]	; (80170c4 <sys_check_timeouts+0x70>)
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801706a:	68bb      	ldr	r3, [r7, #8]
 801706c:	2b00      	cmp	r3, #0
 801706e:	d022      	beq.n	80170b6 <sys_check_timeouts+0x62>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017070:	68bb      	ldr	r3, [r7, #8]
 8017072:	685b      	ldr	r3, [r3, #4]
 8017074:	68fa      	ldr	r2, [r7, #12]
 8017076:	1ad3      	subs	r3, r2, r3
 8017078:	0fdb      	lsrs	r3, r3, #31
 801707a:	f003 0301 	and.w	r3, r3, #1
 801707e:	b2db      	uxtb	r3, r3
 8017080:	2b00      	cmp	r3, #0
 8017082:	d11a      	bne.n	80170ba <sys_check_timeouts+0x66>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017084:	68bb      	ldr	r3, [r7, #8]
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	4a0e      	ldr	r2, [pc, #56]	; (80170c4 <sys_check_timeouts+0x70>)
 801708a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801708c:	68bb      	ldr	r3, [r7, #8]
 801708e:	689b      	ldr	r3, [r3, #8]
 8017090:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017092:	68bb      	ldr	r3, [r7, #8]
 8017094:	68db      	ldr	r3, [r3, #12]
 8017096:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017098:	68bb      	ldr	r3, [r7, #8]
 801709a:	685b      	ldr	r3, [r3, #4]
 801709c:	4a0a      	ldr	r2, [pc, #40]	; (80170c8 <sys_check_timeouts+0x74>)
 801709e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80170a0:	68b9      	ldr	r1, [r7, #8]
 80170a2:	200a      	movs	r0, #10
 80170a4:	f7f8 fb4e 	bl	800f744 <memp_free>
    if (handler != NULL) {
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d0da      	beq.n	8017064 <sys_check_timeouts+0x10>
      handler(arg);
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	6838      	ldr	r0, [r7, #0]
 80170b2:	4798      	blx	r3
  do {
 80170b4:	e7d6      	b.n	8017064 <sys_check_timeouts+0x10>
      return;
 80170b6:	bf00      	nop
 80170b8:	e000      	b.n	80170bc <sys_check_timeouts+0x68>
      return;
 80170ba:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80170bc:	3710      	adds	r7, #16
 80170be:	46bd      	mov	sp, r7
 80170c0:	bd80      	pop	{r7, pc}
 80170c2:	bf00      	nop
 80170c4:	24015078 	.word	0x24015078
 80170c8:	2401507c 	.word	0x2401507c

080170cc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80170cc:	b580      	push	{r7, lr}
 80170ce:	b082      	sub	sp, #8
 80170d0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 80170d2:	f7f3 fcf7 	bl	800aac4 <sys_check_core_locking>

  if (next_timeout == NULL) {
 80170d6:	4b16      	ldr	r3, [pc, #88]	; (8017130 <sys_timeouts_sleeptime+0x64>)
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d102      	bne.n	80170e4 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80170de:	f04f 33ff 	mov.w	r3, #4294967295
 80170e2:	e020      	b.n	8017126 <sys_timeouts_sleeptime+0x5a>
  }
  now = sys_now();
 80170e4:	f7f3 fa6c 	bl	800a5c0 <sys_now>
 80170e8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80170ea:	4b11      	ldr	r3, [pc, #68]	; (8017130 <sys_timeouts_sleeptime+0x64>)
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	685a      	ldr	r2, [r3, #4]
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	1ad3      	subs	r3, r2, r3
 80170f4:	0fdb      	lsrs	r3, r3, #31
 80170f6:	f003 0301 	and.w	r3, r3, #1
 80170fa:	b2db      	uxtb	r3, r3
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d001      	beq.n	8017104 <sys_timeouts_sleeptime+0x38>
    return 0;
 8017100:	2300      	movs	r3, #0
 8017102:	e010      	b.n	8017126 <sys_timeouts_sleeptime+0x5a>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017104:	4b0a      	ldr	r3, [pc, #40]	; (8017130 <sys_timeouts_sleeptime+0x64>)
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	685a      	ldr	r2, [r3, #4]
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	1ad3      	subs	r3, r2, r3
 801710e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017110:	683b      	ldr	r3, [r7, #0]
 8017112:	2b00      	cmp	r3, #0
 8017114:	da06      	bge.n	8017124 <sys_timeouts_sleeptime+0x58>
 8017116:	4b07      	ldr	r3, [pc, #28]	; (8017134 <sys_timeouts_sleeptime+0x68>)
 8017118:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801711c:	4906      	ldr	r1, [pc, #24]	; (8017138 <sys_timeouts_sleeptime+0x6c>)
 801711e:	4807      	ldr	r0, [pc, #28]	; (801713c <sys_timeouts_sleeptime+0x70>)
 8017120:	f002 fea2 	bl	8019e68 <iprintf>
    return ret;
 8017124:	683b      	ldr	r3, [r7, #0]
  }
}
 8017126:	4618      	mov	r0, r3
 8017128:	3708      	adds	r7, #8
 801712a:	46bd      	mov	sp, r7
 801712c:	bd80      	pop	{r7, pc}
 801712e:	bf00      	nop
 8017130:	24015078 	.word	0x24015078
 8017134:	0801cff4 	.word	0x0801cff4
 8017138:	0801d0c8 	.word	0x0801d0c8
 801713c:	0801d068 	.word	0x0801d068

08017140 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017140:	b580      	push	{r7, lr}
 8017142:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017144:	f002 fda2 	bl	8019c8c <rand>
 8017148:	4603      	mov	r3, r0
 801714a:	b29b      	uxth	r3, r3
 801714c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017150:	b29b      	uxth	r3, r3
 8017152:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017156:	b29a      	uxth	r2, r3
 8017158:	4b01      	ldr	r3, [pc, #4]	; (8017160 <udp_init+0x20>)
 801715a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801715c:	bf00      	nop
 801715e:	bd80      	pop	{r7, pc}
 8017160:	24000030 	.word	0x24000030

08017164 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017164:	b580      	push	{r7, lr}
 8017166:	b084      	sub	sp, #16
 8017168:	af00      	add	r7, sp, #0
 801716a:	60f8      	str	r0, [r7, #12]
 801716c:	60b9      	str	r1, [r7, #8]
 801716e:	4613      	mov	r3, r2
 8017170:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	2b00      	cmp	r3, #0
 8017176:	d105      	bne.n	8017184 <udp_input_local_match+0x20>
 8017178:	4b27      	ldr	r3, [pc, #156]	; (8017218 <udp_input_local_match+0xb4>)
 801717a:	2287      	movs	r2, #135	; 0x87
 801717c:	4927      	ldr	r1, [pc, #156]	; (801721c <udp_input_local_match+0xb8>)
 801717e:	4828      	ldr	r0, [pc, #160]	; (8017220 <udp_input_local_match+0xbc>)
 8017180:	f002 fe72 	bl	8019e68 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017184:	68bb      	ldr	r3, [r7, #8]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d105      	bne.n	8017196 <udp_input_local_match+0x32>
 801718a:	4b23      	ldr	r3, [pc, #140]	; (8017218 <udp_input_local_match+0xb4>)
 801718c:	2288      	movs	r2, #136	; 0x88
 801718e:	4925      	ldr	r1, [pc, #148]	; (8017224 <udp_input_local_match+0xc0>)
 8017190:	4823      	ldr	r0, [pc, #140]	; (8017220 <udp_input_local_match+0xbc>)
 8017192:	f002 fe69 	bl	8019e68 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	7a1b      	ldrb	r3, [r3, #8]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d00b      	beq.n	80171b6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	7a1a      	ldrb	r2, [r3, #8]
 80171a2:	4b21      	ldr	r3, [pc, #132]	; (8017228 <udp_input_local_match+0xc4>)
 80171a4:	685b      	ldr	r3, [r3, #4]
 80171a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80171aa:	3301      	adds	r3, #1
 80171ac:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80171ae:	429a      	cmp	r2, r3
 80171b0:	d001      	beq.n	80171b6 <udp_input_local_match+0x52>
    return 0;
 80171b2:	2300      	movs	r3, #0
 80171b4:	e02b      	b.n	801720e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80171b6:	79fb      	ldrb	r3, [r7, #7]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d018      	beq.n	80171ee <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d013      	beq.n	80171ea <udp_input_local_match+0x86>
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d00f      	beq.n	80171ea <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80171ca:	4b17      	ldr	r3, [pc, #92]	; (8017228 <udp_input_local_match+0xc4>)
 80171cc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80171ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171d2:	d00a      	beq.n	80171ea <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	681a      	ldr	r2, [r3, #0]
 80171d8:	4b13      	ldr	r3, [pc, #76]	; (8017228 <udp_input_local_match+0xc4>)
 80171da:	695b      	ldr	r3, [r3, #20]
 80171dc:	405a      	eors	r2, r3
 80171de:	68bb      	ldr	r3, [r7, #8]
 80171e0:	3308      	adds	r3, #8
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d110      	bne.n	801720c <udp_input_local_match+0xa8>
          return 1;
 80171ea:	2301      	movs	r3, #1
 80171ec:	e00f      	b.n	801720e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d009      	beq.n	8017208 <udp_input_local_match+0xa4>
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d005      	beq.n	8017208 <udp_input_local_match+0xa4>
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	681a      	ldr	r2, [r3, #0]
 8017200:	4b09      	ldr	r3, [pc, #36]	; (8017228 <udp_input_local_match+0xc4>)
 8017202:	695b      	ldr	r3, [r3, #20]
 8017204:	429a      	cmp	r2, r3
 8017206:	d101      	bne.n	801720c <udp_input_local_match+0xa8>
        return 1;
 8017208:	2301      	movs	r3, #1
 801720a:	e000      	b.n	801720e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801720c:	2300      	movs	r3, #0
}
 801720e:	4618      	mov	r0, r3
 8017210:	3710      	adds	r7, #16
 8017212:	46bd      	mov	sp, r7
 8017214:	bd80      	pop	{r7, pc}
 8017216:	bf00      	nop
 8017218:	0801d0dc 	.word	0x0801d0dc
 801721c:	0801d10c 	.word	0x0801d10c
 8017220:	0801d130 	.word	0x0801d130
 8017224:	0801d158 	.word	0x0801d158
 8017228:	2400e568 	.word	0x2400e568

0801722c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801722c:	b590      	push	{r4, r7, lr}
 801722e:	b08d      	sub	sp, #52	; 0x34
 8017230:	af02      	add	r7, sp, #8
 8017232:	6078      	str	r0, [r7, #4]
 8017234:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017236:	2300      	movs	r3, #0
 8017238:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();
 801723a:	f7f3 fc43 	bl	800aac4 <sys_check_core_locking>

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	2b00      	cmp	r3, #0
 8017242:	d105      	bne.n	8017250 <udp_input+0x24>
 8017244:	4b7c      	ldr	r3, [pc, #496]	; (8017438 <udp_input+0x20c>)
 8017246:	22cf      	movs	r2, #207	; 0xcf
 8017248:	497c      	ldr	r1, [pc, #496]	; (801743c <udp_input+0x210>)
 801724a:	487d      	ldr	r0, [pc, #500]	; (8017440 <udp_input+0x214>)
 801724c:	f002 fe0c 	bl	8019e68 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017250:	683b      	ldr	r3, [r7, #0]
 8017252:	2b00      	cmp	r3, #0
 8017254:	d105      	bne.n	8017262 <udp_input+0x36>
 8017256:	4b78      	ldr	r3, [pc, #480]	; (8017438 <udp_input+0x20c>)
 8017258:	22d0      	movs	r2, #208	; 0xd0
 801725a:	497a      	ldr	r1, [pc, #488]	; (8017444 <udp_input+0x218>)
 801725c:	4878      	ldr	r0, [pc, #480]	; (8017440 <udp_input+0x214>)
 801725e:	f002 fe03 	bl	8019e68 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	895b      	ldrh	r3, [r3, #10]
 8017266:	2b07      	cmp	r3, #7
 8017268:	d803      	bhi.n	8017272 <udp_input+0x46>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801726a:	6878      	ldr	r0, [r7, #4]
 801726c:	f7f9 f91e 	bl	80104ac <pbuf_free>
    goto end;
 8017270:	e0de      	b.n	8017430 <udp_input+0x204>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	685b      	ldr	r3, [r3, #4]
 8017276:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017278:	4b73      	ldr	r3, [pc, #460]	; (8017448 <udp_input+0x21c>)
 801727a:	695b      	ldr	r3, [r3, #20]
 801727c:	4a72      	ldr	r2, [pc, #456]	; (8017448 <udp_input+0x21c>)
 801727e:	6812      	ldr	r2, [r2, #0]
 8017280:	4611      	mov	r1, r2
 8017282:	4618      	mov	r0, r3
 8017284:	f001 fcb6 	bl	8018bf4 <ip4_addr_isbroadcast_u32>
 8017288:	4603      	mov	r3, r0
 801728a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801728c:	697b      	ldr	r3, [r7, #20]
 801728e:	881b      	ldrh	r3, [r3, #0]
 8017290:	b29b      	uxth	r3, r3
 8017292:	4618      	mov	r0, r3
 8017294:	f7f7 fc40 	bl	800eb18 <lwip_htons>
 8017298:	4603      	mov	r3, r0
 801729a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801729c:	697b      	ldr	r3, [r7, #20]
 801729e:	885b      	ldrh	r3, [r3, #2]
 80172a0:	b29b      	uxth	r3, r3
 80172a2:	4618      	mov	r0, r3
 80172a4:	f7f7 fc38 	bl	800eb18 <lwip_htons>
 80172a8:	4603      	mov	r3, r0
 80172aa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80172ac:	2300      	movs	r3, #0
 80172ae:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80172b0:	2300      	movs	r3, #0
 80172b2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80172b4:	2300      	movs	r3, #0
 80172b6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80172b8:	4b64      	ldr	r3, [pc, #400]	; (801744c <udp_input+0x220>)
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	627b      	str	r3, [r7, #36]	; 0x24
 80172be:	e054      	b.n	801736a <udp_input+0x13e>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80172c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172c2:	8a5b      	ldrh	r3, [r3, #18]
 80172c4:	89fa      	ldrh	r2, [r7, #14]
 80172c6:	429a      	cmp	r2, r3
 80172c8:	d14a      	bne.n	8017360 <udp_input+0x134>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80172ca:	7cfb      	ldrb	r3, [r7, #19]
 80172cc:	461a      	mov	r2, r3
 80172ce:	6839      	ldr	r1, [r7, #0]
 80172d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80172d2:	f7ff ff47 	bl	8017164 <udp_input_local_match>
 80172d6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d041      	beq.n	8017360 <udp_input+0x134>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80172dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172de:	7c1b      	ldrb	r3, [r3, #16]
 80172e0:	f003 0304 	and.w	r3, r3, #4
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d11d      	bne.n	8017324 <udp_input+0xf8>
        if (uncon_pcb == NULL) {
 80172e8:	69fb      	ldr	r3, [r7, #28]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d102      	bne.n	80172f4 <udp_input+0xc8>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80172ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172f0:	61fb      	str	r3, [r7, #28]
 80172f2:	e017      	b.n	8017324 <udp_input+0xf8>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80172f4:	7cfb      	ldrb	r3, [r7, #19]
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d014      	beq.n	8017324 <udp_input+0xf8>
 80172fa:	4b53      	ldr	r3, [pc, #332]	; (8017448 <udp_input+0x21c>)
 80172fc:	695b      	ldr	r3, [r3, #20]
 80172fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017302:	d10f      	bne.n	8017324 <udp_input+0xf8>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017304:	69fb      	ldr	r3, [r7, #28]
 8017306:	681a      	ldr	r2, [r3, #0]
 8017308:	683b      	ldr	r3, [r7, #0]
 801730a:	3304      	adds	r3, #4
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	429a      	cmp	r2, r3
 8017310:	d008      	beq.n	8017324 <udp_input+0xf8>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017314:	681a      	ldr	r2, [r3, #0]
 8017316:	683b      	ldr	r3, [r7, #0]
 8017318:	3304      	adds	r3, #4
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	429a      	cmp	r2, r3
 801731e:	d101      	bne.n	8017324 <udp_input+0xf8>
              /* better match */
              uncon_pcb = pcb;
 8017320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017322:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017326:	8a9b      	ldrh	r3, [r3, #20]
 8017328:	8a3a      	ldrh	r2, [r7, #16]
 801732a:	429a      	cmp	r2, r3
 801732c:	d118      	bne.n	8017360 <udp_input+0x134>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017330:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017332:	2b00      	cmp	r3, #0
 8017334:	d005      	beq.n	8017342 <udp_input+0x116>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017338:	685a      	ldr	r2, [r3, #4]
 801733a:	4b43      	ldr	r3, [pc, #268]	; (8017448 <udp_input+0x21c>)
 801733c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801733e:	429a      	cmp	r2, r3
 8017340:	d10e      	bne.n	8017360 <udp_input+0x134>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017342:	6a3b      	ldr	r3, [r7, #32]
 8017344:	2b00      	cmp	r3, #0
 8017346:	d014      	beq.n	8017372 <udp_input+0x146>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801734a:	68da      	ldr	r2, [r3, #12]
 801734c:	6a3b      	ldr	r3, [r7, #32]
 801734e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017350:	4b3e      	ldr	r3, [pc, #248]	; (801744c <udp_input+0x220>)
 8017352:	681a      	ldr	r2, [r3, #0]
 8017354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017356:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017358:	4a3c      	ldr	r2, [pc, #240]	; (801744c <udp_input+0x220>)
 801735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801735c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801735e:	e008      	b.n	8017372 <udp_input+0x146>
      }
    }

    prev = pcb;
 8017360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017362:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017366:	68db      	ldr	r3, [r3, #12]
 8017368:	627b      	str	r3, [r7, #36]	; 0x24
 801736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801736c:	2b00      	cmp	r3, #0
 801736e:	d1a7      	bne.n	80172c0 <udp_input+0x94>
 8017370:	e000      	b.n	8017374 <udp_input+0x148>
        break;
 8017372:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017376:	2b00      	cmp	r3, #0
 8017378:	d101      	bne.n	801737e <udp_input+0x152>
    pcb = uncon_pcb;
 801737a:	69fb      	ldr	r3, [r7, #28]
 801737c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017380:	2b00      	cmp	r3, #0
 8017382:	d002      	beq.n	801738a <udp_input+0x15e>
    for_us = 1;
 8017384:	2301      	movs	r3, #1
 8017386:	76fb      	strb	r3, [r7, #27]
 8017388:	e00a      	b.n	80173a0 <udp_input+0x174>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801738a:	683b      	ldr	r3, [r7, #0]
 801738c:	3304      	adds	r3, #4
 801738e:	681a      	ldr	r2, [r3, #0]
 8017390:	4b2d      	ldr	r3, [pc, #180]	; (8017448 <udp_input+0x21c>)
 8017392:	695b      	ldr	r3, [r3, #20]
 8017394:	429a      	cmp	r2, r3
 8017396:	bf0c      	ite	eq
 8017398:	2301      	moveq	r3, #1
 801739a:	2300      	movne	r3, #0
 801739c:	b2db      	uxtb	r3, r3
 801739e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80173a0:	7efb      	ldrb	r3, [r7, #27]
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d041      	beq.n	801742a <udp_input+0x1fe>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80173a6:	2108      	movs	r1, #8
 80173a8:	6878      	ldr	r0, [r7, #4]
 80173aa:	f7f8 fff9 	bl	80103a0 <pbuf_remove_header>
 80173ae:	4603      	mov	r3, r0
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d00a      	beq.n	80173ca <udp_input+0x19e>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80173b4:	4b20      	ldr	r3, [pc, #128]	; (8017438 <udp_input+0x20c>)
 80173b6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80173ba:	4925      	ldr	r1, [pc, #148]	; (8017450 <udp_input+0x224>)
 80173bc:	4820      	ldr	r0, [pc, #128]	; (8017440 <udp_input+0x214>)
 80173be:	f002 fd53 	bl	8019e68 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80173c2:	6878      	ldr	r0, [r7, #4]
 80173c4:	f7f9 f872 	bl	80104ac <pbuf_free>
      goto end;
 80173c8:	e032      	b.n	8017430 <udp_input+0x204>
    }

    if (pcb != NULL) {
 80173ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d012      	beq.n	80173f6 <udp_input+0x1ca>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80173d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173d2:	699b      	ldr	r3, [r3, #24]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d00a      	beq.n	80173ee <udp_input+0x1c2>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80173d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173da:	699c      	ldr	r4, [r3, #24]
 80173dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173de:	69d8      	ldr	r0, [r3, #28]
 80173e0:	8a3b      	ldrh	r3, [r7, #16]
 80173e2:	9300      	str	r3, [sp, #0]
 80173e4:	4b1b      	ldr	r3, [pc, #108]	; (8017454 <udp_input+0x228>)
 80173e6:	687a      	ldr	r2, [r7, #4]
 80173e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80173ea:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80173ec:	e021      	b.n	8017432 <udp_input+0x206>
        pbuf_free(p);
 80173ee:	6878      	ldr	r0, [r7, #4]
 80173f0:	f7f9 f85c 	bl	80104ac <pbuf_free>
        goto end;
 80173f4:	e01c      	b.n	8017430 <udp_input+0x204>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80173f6:	7cfb      	ldrb	r3, [r7, #19]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d112      	bne.n	8017422 <udp_input+0x1f6>
 80173fc:	4b12      	ldr	r3, [pc, #72]	; (8017448 <udp_input+0x21c>)
 80173fe:	695b      	ldr	r3, [r3, #20]
 8017400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017404:	2be0      	cmp	r3, #224	; 0xe0
 8017406:	d00c      	beq.n	8017422 <udp_input+0x1f6>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017408:	4b0f      	ldr	r3, [pc, #60]	; (8017448 <udp_input+0x21c>)
 801740a:	899b      	ldrh	r3, [r3, #12]
 801740c:	3308      	adds	r3, #8
 801740e:	b29b      	uxth	r3, r3
 8017410:	b21b      	sxth	r3, r3
 8017412:	4619      	mov	r1, r3
 8017414:	6878      	ldr	r0, [r7, #4]
 8017416:	f7f9 f836 	bl	8010486 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801741a:	2103      	movs	r1, #3
 801741c:	6878      	ldr	r0, [r7, #4]
 801741e:	f001 f8bb 	bl	8018598 <icmp_dest_unreach>
      pbuf_free(p);
 8017422:	6878      	ldr	r0, [r7, #4]
 8017424:	f7f9 f842 	bl	80104ac <pbuf_free>
  return;
 8017428:	e003      	b.n	8017432 <udp_input+0x206>
    pbuf_free(p);
 801742a:	6878      	ldr	r0, [r7, #4]
 801742c:	f7f9 f83e 	bl	80104ac <pbuf_free>
  return;
 8017430:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8017432:	372c      	adds	r7, #44	; 0x2c
 8017434:	46bd      	mov	sp, r7
 8017436:	bd90      	pop	{r4, r7, pc}
 8017438:	0801d0dc 	.word	0x0801d0dc
 801743c:	0801d180 	.word	0x0801d180
 8017440:	0801d130 	.word	0x0801d130
 8017444:	0801d198 	.word	0x0801d198
 8017448:	2400e568 	.word	0x2400e568
 801744c:	24015084 	.word	0x24015084
 8017450:	0801d1b4 	.word	0x0801d1b4
 8017454:	2400e578 	.word	0x2400e578

08017458 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017458:	b480      	push	{r7}
 801745a:	b085      	sub	sp, #20
 801745c:	af00      	add	r7, sp, #0
 801745e:	6078      	str	r0, [r7, #4]
 8017460:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	2b00      	cmp	r3, #0
 8017466:	d01e      	beq.n	80174a6 <udp_netif_ip_addr_changed+0x4e>
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	2b00      	cmp	r3, #0
 801746e:	d01a      	beq.n	80174a6 <udp_netif_ip_addr_changed+0x4e>
 8017470:	683b      	ldr	r3, [r7, #0]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d017      	beq.n	80174a6 <udp_netif_ip_addr_changed+0x4e>
 8017476:	683b      	ldr	r3, [r7, #0]
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	2b00      	cmp	r3, #0
 801747c:	d013      	beq.n	80174a6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801747e:	4b0d      	ldr	r3, [pc, #52]	; (80174b4 <udp_netif_ip_addr_changed+0x5c>)
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	60fb      	str	r3, [r7, #12]
 8017484:	e00c      	b.n	80174a0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	681a      	ldr	r2, [r3, #0]
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	429a      	cmp	r2, r3
 8017490:	d103      	bne.n	801749a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8017492:	683b      	ldr	r3, [r7, #0]
 8017494:	681a      	ldr	r2, [r3, #0]
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	68db      	ldr	r3, [r3, #12]
 801749e:	60fb      	str	r3, [r7, #12]
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d1ef      	bne.n	8017486 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80174a6:	bf00      	nop
 80174a8:	3714      	adds	r7, #20
 80174aa:	46bd      	mov	sp, r7
 80174ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b0:	4770      	bx	lr
 80174b2:	bf00      	nop
 80174b4:	24015084 	.word	0x24015084

080174b8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b082      	sub	sp, #8
 80174bc:	af00      	add	r7, sp, #0
 80174be:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80174c0:	4915      	ldr	r1, [pc, #84]	; (8017518 <etharp_free_entry+0x60>)
 80174c2:	687a      	ldr	r2, [r7, #4]
 80174c4:	4613      	mov	r3, r2
 80174c6:	005b      	lsls	r3, r3, #1
 80174c8:	4413      	add	r3, r2
 80174ca:	00db      	lsls	r3, r3, #3
 80174cc:	440b      	add	r3, r1
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d013      	beq.n	80174fc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80174d4:	4910      	ldr	r1, [pc, #64]	; (8017518 <etharp_free_entry+0x60>)
 80174d6:	687a      	ldr	r2, [r7, #4]
 80174d8:	4613      	mov	r3, r2
 80174da:	005b      	lsls	r3, r3, #1
 80174dc:	4413      	add	r3, r2
 80174de:	00db      	lsls	r3, r3, #3
 80174e0:	440b      	add	r3, r1
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	4618      	mov	r0, r3
 80174e6:	f7f8 ffe1 	bl	80104ac <pbuf_free>
    arp_table[i].q = NULL;
 80174ea:	490b      	ldr	r1, [pc, #44]	; (8017518 <etharp_free_entry+0x60>)
 80174ec:	687a      	ldr	r2, [r7, #4]
 80174ee:	4613      	mov	r3, r2
 80174f0:	005b      	lsls	r3, r3, #1
 80174f2:	4413      	add	r3, r2
 80174f4:	00db      	lsls	r3, r3, #3
 80174f6:	440b      	add	r3, r1
 80174f8:	2200      	movs	r2, #0
 80174fa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80174fc:	4906      	ldr	r1, [pc, #24]	; (8017518 <etharp_free_entry+0x60>)
 80174fe:	687a      	ldr	r2, [r7, #4]
 8017500:	4613      	mov	r3, r2
 8017502:	005b      	lsls	r3, r3, #1
 8017504:	4413      	add	r3, r2
 8017506:	00db      	lsls	r3, r3, #3
 8017508:	440b      	add	r3, r1
 801750a:	3314      	adds	r3, #20
 801750c:	2200      	movs	r2, #0
 801750e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8017510:	bf00      	nop
 8017512:	3708      	adds	r7, #8
 8017514:	46bd      	mov	sp, r7
 8017516:	bd80      	pop	{r7, pc}
 8017518:	24015088 	.word	0x24015088

0801751c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801751c:	b580      	push	{r7, lr}
 801751e:	b082      	sub	sp, #8
 8017520:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017522:	2300      	movs	r3, #0
 8017524:	607b      	str	r3, [r7, #4]
 8017526:	e096      	b.n	8017656 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8017528:	494f      	ldr	r1, [pc, #316]	; (8017668 <etharp_tmr+0x14c>)
 801752a:	687a      	ldr	r2, [r7, #4]
 801752c:	4613      	mov	r3, r2
 801752e:	005b      	lsls	r3, r3, #1
 8017530:	4413      	add	r3, r2
 8017532:	00db      	lsls	r3, r3, #3
 8017534:	440b      	add	r3, r1
 8017536:	3314      	adds	r3, #20
 8017538:	781b      	ldrb	r3, [r3, #0]
 801753a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801753c:	78fb      	ldrb	r3, [r7, #3]
 801753e:	2b00      	cmp	r3, #0
 8017540:	f000 8086 	beq.w	8017650 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8017544:	4948      	ldr	r1, [pc, #288]	; (8017668 <etharp_tmr+0x14c>)
 8017546:	687a      	ldr	r2, [r7, #4]
 8017548:	4613      	mov	r3, r2
 801754a:	005b      	lsls	r3, r3, #1
 801754c:	4413      	add	r3, r2
 801754e:	00db      	lsls	r3, r3, #3
 8017550:	440b      	add	r3, r1
 8017552:	3312      	adds	r3, #18
 8017554:	881b      	ldrh	r3, [r3, #0]
 8017556:	3301      	adds	r3, #1
 8017558:	b298      	uxth	r0, r3
 801755a:	4943      	ldr	r1, [pc, #268]	; (8017668 <etharp_tmr+0x14c>)
 801755c:	687a      	ldr	r2, [r7, #4]
 801755e:	4613      	mov	r3, r2
 8017560:	005b      	lsls	r3, r3, #1
 8017562:	4413      	add	r3, r2
 8017564:	00db      	lsls	r3, r3, #3
 8017566:	440b      	add	r3, r1
 8017568:	3312      	adds	r3, #18
 801756a:	4602      	mov	r2, r0
 801756c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801756e:	493e      	ldr	r1, [pc, #248]	; (8017668 <etharp_tmr+0x14c>)
 8017570:	687a      	ldr	r2, [r7, #4]
 8017572:	4613      	mov	r3, r2
 8017574:	005b      	lsls	r3, r3, #1
 8017576:	4413      	add	r3, r2
 8017578:	00db      	lsls	r3, r3, #3
 801757a:	440b      	add	r3, r1
 801757c:	3312      	adds	r3, #18
 801757e:	881b      	ldrh	r3, [r3, #0]
 8017580:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017584:	d215      	bcs.n	80175b2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017586:	4938      	ldr	r1, [pc, #224]	; (8017668 <etharp_tmr+0x14c>)
 8017588:	687a      	ldr	r2, [r7, #4]
 801758a:	4613      	mov	r3, r2
 801758c:	005b      	lsls	r3, r3, #1
 801758e:	4413      	add	r3, r2
 8017590:	00db      	lsls	r3, r3, #3
 8017592:	440b      	add	r3, r1
 8017594:	3314      	adds	r3, #20
 8017596:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017598:	2b01      	cmp	r3, #1
 801759a:	d10e      	bne.n	80175ba <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801759c:	4932      	ldr	r1, [pc, #200]	; (8017668 <etharp_tmr+0x14c>)
 801759e:	687a      	ldr	r2, [r7, #4]
 80175a0:	4613      	mov	r3, r2
 80175a2:	005b      	lsls	r3, r3, #1
 80175a4:	4413      	add	r3, r2
 80175a6:	00db      	lsls	r3, r3, #3
 80175a8:	440b      	add	r3, r1
 80175aa:	3312      	adds	r3, #18
 80175ac:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80175ae:	2b04      	cmp	r3, #4
 80175b0:	d903      	bls.n	80175ba <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80175b2:	6878      	ldr	r0, [r7, #4]
 80175b4:	f7ff ff80 	bl	80174b8 <etharp_free_entry>
 80175b8:	e04a      	b.n	8017650 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80175ba:	492b      	ldr	r1, [pc, #172]	; (8017668 <etharp_tmr+0x14c>)
 80175bc:	687a      	ldr	r2, [r7, #4]
 80175be:	4613      	mov	r3, r2
 80175c0:	005b      	lsls	r3, r3, #1
 80175c2:	4413      	add	r3, r2
 80175c4:	00db      	lsls	r3, r3, #3
 80175c6:	440b      	add	r3, r1
 80175c8:	3314      	adds	r3, #20
 80175ca:	781b      	ldrb	r3, [r3, #0]
 80175cc:	2b03      	cmp	r3, #3
 80175ce:	d10a      	bne.n	80175e6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80175d0:	4925      	ldr	r1, [pc, #148]	; (8017668 <etharp_tmr+0x14c>)
 80175d2:	687a      	ldr	r2, [r7, #4]
 80175d4:	4613      	mov	r3, r2
 80175d6:	005b      	lsls	r3, r3, #1
 80175d8:	4413      	add	r3, r2
 80175da:	00db      	lsls	r3, r3, #3
 80175dc:	440b      	add	r3, r1
 80175de:	3314      	adds	r3, #20
 80175e0:	2204      	movs	r2, #4
 80175e2:	701a      	strb	r2, [r3, #0]
 80175e4:	e034      	b.n	8017650 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80175e6:	4920      	ldr	r1, [pc, #128]	; (8017668 <etharp_tmr+0x14c>)
 80175e8:	687a      	ldr	r2, [r7, #4]
 80175ea:	4613      	mov	r3, r2
 80175ec:	005b      	lsls	r3, r3, #1
 80175ee:	4413      	add	r3, r2
 80175f0:	00db      	lsls	r3, r3, #3
 80175f2:	440b      	add	r3, r1
 80175f4:	3314      	adds	r3, #20
 80175f6:	781b      	ldrb	r3, [r3, #0]
 80175f8:	2b04      	cmp	r3, #4
 80175fa:	d10a      	bne.n	8017612 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80175fc:	491a      	ldr	r1, [pc, #104]	; (8017668 <etharp_tmr+0x14c>)
 80175fe:	687a      	ldr	r2, [r7, #4]
 8017600:	4613      	mov	r3, r2
 8017602:	005b      	lsls	r3, r3, #1
 8017604:	4413      	add	r3, r2
 8017606:	00db      	lsls	r3, r3, #3
 8017608:	440b      	add	r3, r1
 801760a:	3314      	adds	r3, #20
 801760c:	2202      	movs	r2, #2
 801760e:	701a      	strb	r2, [r3, #0]
 8017610:	e01e      	b.n	8017650 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017612:	4915      	ldr	r1, [pc, #84]	; (8017668 <etharp_tmr+0x14c>)
 8017614:	687a      	ldr	r2, [r7, #4]
 8017616:	4613      	mov	r3, r2
 8017618:	005b      	lsls	r3, r3, #1
 801761a:	4413      	add	r3, r2
 801761c:	00db      	lsls	r3, r3, #3
 801761e:	440b      	add	r3, r1
 8017620:	3314      	adds	r3, #20
 8017622:	781b      	ldrb	r3, [r3, #0]
 8017624:	2b01      	cmp	r3, #1
 8017626:	d113      	bne.n	8017650 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8017628:	490f      	ldr	r1, [pc, #60]	; (8017668 <etharp_tmr+0x14c>)
 801762a:	687a      	ldr	r2, [r7, #4]
 801762c:	4613      	mov	r3, r2
 801762e:	005b      	lsls	r3, r3, #1
 8017630:	4413      	add	r3, r2
 8017632:	00db      	lsls	r3, r3, #3
 8017634:	440b      	add	r3, r1
 8017636:	3308      	adds	r3, #8
 8017638:	6818      	ldr	r0, [r3, #0]
 801763a:	687a      	ldr	r2, [r7, #4]
 801763c:	4613      	mov	r3, r2
 801763e:	005b      	lsls	r3, r3, #1
 8017640:	4413      	add	r3, r2
 8017642:	00db      	lsls	r3, r3, #3
 8017644:	4a08      	ldr	r2, [pc, #32]	; (8017668 <etharp_tmr+0x14c>)
 8017646:	4413      	add	r3, r2
 8017648:	3304      	adds	r3, #4
 801764a:	4619      	mov	r1, r3
 801764c:	f000 fe72 	bl	8018334 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	3301      	adds	r3, #1
 8017654:	607b      	str	r3, [r7, #4]
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	2b09      	cmp	r3, #9
 801765a:	f77f af65 	ble.w	8017528 <etharp_tmr+0xc>
      }
    }
  }
}
 801765e:	bf00      	nop
 8017660:	bf00      	nop
 8017662:	3708      	adds	r7, #8
 8017664:	46bd      	mov	sp, r7
 8017666:	bd80      	pop	{r7, pc}
 8017668:	24015088 	.word	0x24015088

0801766c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801766c:	b580      	push	{r7, lr}
 801766e:	b08a      	sub	sp, #40	; 0x28
 8017670:	af00      	add	r7, sp, #0
 8017672:	60f8      	str	r0, [r7, #12]
 8017674:	460b      	mov	r3, r1
 8017676:	607a      	str	r2, [r7, #4]
 8017678:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801767a:	230a      	movs	r3, #10
 801767c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801767e:	230a      	movs	r3, #10
 8017680:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8017682:	230a      	movs	r3, #10
 8017684:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8017686:	2300      	movs	r3, #0
 8017688:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801768a:	230a      	movs	r3, #10
 801768c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801768e:	2300      	movs	r3, #0
 8017690:	83bb      	strh	r3, [r7, #28]
 8017692:	2300      	movs	r3, #0
 8017694:	837b      	strh	r3, [r7, #26]
 8017696:	2300      	movs	r3, #0
 8017698:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801769a:	2300      	movs	r3, #0
 801769c:	843b      	strh	r3, [r7, #32]
 801769e:	e0ae      	b.n	80177fe <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80176a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80176a4:	49a6      	ldr	r1, [pc, #664]	; (8017940 <etharp_find_entry+0x2d4>)
 80176a6:	4613      	mov	r3, r2
 80176a8:	005b      	lsls	r3, r3, #1
 80176aa:	4413      	add	r3, r2
 80176ac:	00db      	lsls	r3, r3, #3
 80176ae:	440b      	add	r3, r1
 80176b0:	3314      	adds	r3, #20
 80176b2:	781b      	ldrb	r3, [r3, #0]
 80176b4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80176b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80176ba:	2b0a      	cmp	r3, #10
 80176bc:	d105      	bne.n	80176ca <etharp_find_entry+0x5e>
 80176be:	7dfb      	ldrb	r3, [r7, #23]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d102      	bne.n	80176ca <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80176c4:	8c3b      	ldrh	r3, [r7, #32]
 80176c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80176c8:	e095      	b.n	80177f6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80176ca:	7dfb      	ldrb	r3, [r7, #23]
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	f000 8092 	beq.w	80177f6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80176d2:	7dfb      	ldrb	r3, [r7, #23]
 80176d4:	2b01      	cmp	r3, #1
 80176d6:	d009      	beq.n	80176ec <etharp_find_entry+0x80>
 80176d8:	7dfb      	ldrb	r3, [r7, #23]
 80176da:	2b01      	cmp	r3, #1
 80176dc:	d806      	bhi.n	80176ec <etharp_find_entry+0x80>
 80176de:	4b99      	ldr	r3, [pc, #612]	; (8017944 <etharp_find_entry+0x2d8>)
 80176e0:	f240 1223 	movw	r2, #291	; 0x123
 80176e4:	4998      	ldr	r1, [pc, #608]	; (8017948 <etharp_find_entry+0x2dc>)
 80176e6:	4899      	ldr	r0, [pc, #612]	; (801794c <etharp_find_entry+0x2e0>)
 80176e8:	f002 fbbe 	bl	8019e68 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d020      	beq.n	8017734 <etharp_find_entry+0xc8>
 80176f2:	68fb      	ldr	r3, [r7, #12]
 80176f4:	6819      	ldr	r1, [r3, #0]
 80176f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80176fa:	4891      	ldr	r0, [pc, #580]	; (8017940 <etharp_find_entry+0x2d4>)
 80176fc:	4613      	mov	r3, r2
 80176fe:	005b      	lsls	r3, r3, #1
 8017700:	4413      	add	r3, r2
 8017702:	00db      	lsls	r3, r3, #3
 8017704:	4403      	add	r3, r0
 8017706:	3304      	adds	r3, #4
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	4299      	cmp	r1, r3
 801770c:	d112      	bne.n	8017734 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	2b00      	cmp	r3, #0
 8017712:	d00c      	beq.n	801772e <etharp_find_entry+0xc2>
 8017714:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017718:	4989      	ldr	r1, [pc, #548]	; (8017940 <etharp_find_entry+0x2d4>)
 801771a:	4613      	mov	r3, r2
 801771c:	005b      	lsls	r3, r3, #1
 801771e:	4413      	add	r3, r2
 8017720:	00db      	lsls	r3, r3, #3
 8017722:	440b      	add	r3, r1
 8017724:	3308      	adds	r3, #8
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	687a      	ldr	r2, [r7, #4]
 801772a:	429a      	cmp	r2, r3
 801772c:	d102      	bne.n	8017734 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801772e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017732:	e100      	b.n	8017936 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017734:	7dfb      	ldrb	r3, [r7, #23]
 8017736:	2b01      	cmp	r3, #1
 8017738:	d140      	bne.n	80177bc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801773a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801773e:	4980      	ldr	r1, [pc, #512]	; (8017940 <etharp_find_entry+0x2d4>)
 8017740:	4613      	mov	r3, r2
 8017742:	005b      	lsls	r3, r3, #1
 8017744:	4413      	add	r3, r2
 8017746:	00db      	lsls	r3, r3, #3
 8017748:	440b      	add	r3, r1
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	2b00      	cmp	r3, #0
 801774e:	d01a      	beq.n	8017786 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8017750:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017754:	497a      	ldr	r1, [pc, #488]	; (8017940 <etharp_find_entry+0x2d4>)
 8017756:	4613      	mov	r3, r2
 8017758:	005b      	lsls	r3, r3, #1
 801775a:	4413      	add	r3, r2
 801775c:	00db      	lsls	r3, r3, #3
 801775e:	440b      	add	r3, r1
 8017760:	3312      	adds	r3, #18
 8017762:	881b      	ldrh	r3, [r3, #0]
 8017764:	8bba      	ldrh	r2, [r7, #28]
 8017766:	429a      	cmp	r2, r3
 8017768:	d845      	bhi.n	80177f6 <etharp_find_entry+0x18a>
            old_queue = i;
 801776a:	8c3b      	ldrh	r3, [r7, #32]
 801776c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801776e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017772:	4973      	ldr	r1, [pc, #460]	; (8017940 <etharp_find_entry+0x2d4>)
 8017774:	4613      	mov	r3, r2
 8017776:	005b      	lsls	r3, r3, #1
 8017778:	4413      	add	r3, r2
 801777a:	00db      	lsls	r3, r3, #3
 801777c:	440b      	add	r3, r1
 801777e:	3312      	adds	r3, #18
 8017780:	881b      	ldrh	r3, [r3, #0]
 8017782:	83bb      	strh	r3, [r7, #28]
 8017784:	e037      	b.n	80177f6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8017786:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801778a:	496d      	ldr	r1, [pc, #436]	; (8017940 <etharp_find_entry+0x2d4>)
 801778c:	4613      	mov	r3, r2
 801778e:	005b      	lsls	r3, r3, #1
 8017790:	4413      	add	r3, r2
 8017792:	00db      	lsls	r3, r3, #3
 8017794:	440b      	add	r3, r1
 8017796:	3312      	adds	r3, #18
 8017798:	881b      	ldrh	r3, [r3, #0]
 801779a:	8b7a      	ldrh	r2, [r7, #26]
 801779c:	429a      	cmp	r2, r3
 801779e:	d82a      	bhi.n	80177f6 <etharp_find_entry+0x18a>
            old_pending = i;
 80177a0:	8c3b      	ldrh	r3, [r7, #32]
 80177a2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80177a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80177a8:	4965      	ldr	r1, [pc, #404]	; (8017940 <etharp_find_entry+0x2d4>)
 80177aa:	4613      	mov	r3, r2
 80177ac:	005b      	lsls	r3, r3, #1
 80177ae:	4413      	add	r3, r2
 80177b0:	00db      	lsls	r3, r3, #3
 80177b2:	440b      	add	r3, r1
 80177b4:	3312      	adds	r3, #18
 80177b6:	881b      	ldrh	r3, [r3, #0]
 80177b8:	837b      	strh	r3, [r7, #26]
 80177ba:	e01c      	b.n	80177f6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80177bc:	7dfb      	ldrb	r3, [r7, #23]
 80177be:	2b01      	cmp	r3, #1
 80177c0:	d919      	bls.n	80177f6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80177c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80177c6:	495e      	ldr	r1, [pc, #376]	; (8017940 <etharp_find_entry+0x2d4>)
 80177c8:	4613      	mov	r3, r2
 80177ca:	005b      	lsls	r3, r3, #1
 80177cc:	4413      	add	r3, r2
 80177ce:	00db      	lsls	r3, r3, #3
 80177d0:	440b      	add	r3, r1
 80177d2:	3312      	adds	r3, #18
 80177d4:	881b      	ldrh	r3, [r3, #0]
 80177d6:	8b3a      	ldrh	r2, [r7, #24]
 80177d8:	429a      	cmp	r2, r3
 80177da:	d80c      	bhi.n	80177f6 <etharp_find_entry+0x18a>
            old_stable = i;
 80177dc:	8c3b      	ldrh	r3, [r7, #32]
 80177de:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80177e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80177e4:	4956      	ldr	r1, [pc, #344]	; (8017940 <etharp_find_entry+0x2d4>)
 80177e6:	4613      	mov	r3, r2
 80177e8:	005b      	lsls	r3, r3, #1
 80177ea:	4413      	add	r3, r2
 80177ec:	00db      	lsls	r3, r3, #3
 80177ee:	440b      	add	r3, r1
 80177f0:	3312      	adds	r3, #18
 80177f2:	881b      	ldrh	r3, [r3, #0]
 80177f4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80177f6:	8c3b      	ldrh	r3, [r7, #32]
 80177f8:	3301      	adds	r3, #1
 80177fa:	b29b      	uxth	r3, r3
 80177fc:	843b      	strh	r3, [r7, #32]
 80177fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017802:	2b09      	cmp	r3, #9
 8017804:	f77f af4c 	ble.w	80176a0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017808:	7afb      	ldrb	r3, [r7, #11]
 801780a:	f003 0302 	and.w	r3, r3, #2
 801780e:	2b00      	cmp	r3, #0
 8017810:	d108      	bne.n	8017824 <etharp_find_entry+0x1b8>
 8017812:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017816:	2b0a      	cmp	r3, #10
 8017818:	d107      	bne.n	801782a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801781a:	7afb      	ldrb	r3, [r7, #11]
 801781c:	f003 0301 	and.w	r3, r3, #1
 8017820:	2b00      	cmp	r3, #0
 8017822:	d102      	bne.n	801782a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8017824:	f04f 33ff 	mov.w	r3, #4294967295
 8017828:	e085      	b.n	8017936 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801782a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801782e:	2b09      	cmp	r3, #9
 8017830:	dc02      	bgt.n	8017838 <etharp_find_entry+0x1cc>
    i = empty;
 8017832:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017834:	843b      	strh	r3, [r7, #32]
 8017836:	e039      	b.n	80178ac <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017838:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801783c:	2b09      	cmp	r3, #9
 801783e:	dc14      	bgt.n	801786a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8017840:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017842:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017844:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017848:	493d      	ldr	r1, [pc, #244]	; (8017940 <etharp_find_entry+0x2d4>)
 801784a:	4613      	mov	r3, r2
 801784c:	005b      	lsls	r3, r3, #1
 801784e:	4413      	add	r3, r2
 8017850:	00db      	lsls	r3, r3, #3
 8017852:	440b      	add	r3, r1
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	2b00      	cmp	r3, #0
 8017858:	d018      	beq.n	801788c <etharp_find_entry+0x220>
 801785a:	4b3a      	ldr	r3, [pc, #232]	; (8017944 <etharp_find_entry+0x2d8>)
 801785c:	f240 126d 	movw	r2, #365	; 0x16d
 8017860:	493b      	ldr	r1, [pc, #236]	; (8017950 <etharp_find_entry+0x2e4>)
 8017862:	483a      	ldr	r0, [pc, #232]	; (801794c <etharp_find_entry+0x2e0>)
 8017864:	f002 fb00 	bl	8019e68 <iprintf>
 8017868:	e010      	b.n	801788c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801786a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801786e:	2b09      	cmp	r3, #9
 8017870:	dc02      	bgt.n	8017878 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8017872:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017874:	843b      	strh	r3, [r7, #32]
 8017876:	e009      	b.n	801788c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017878:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801787c:	2b09      	cmp	r3, #9
 801787e:	dc02      	bgt.n	8017886 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017880:	8bfb      	ldrh	r3, [r7, #30]
 8017882:	843b      	strh	r3, [r7, #32]
 8017884:	e002      	b.n	801788c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8017886:	f04f 33ff 	mov.w	r3, #4294967295
 801788a:	e054      	b.n	8017936 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801788c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017890:	2b09      	cmp	r3, #9
 8017892:	dd06      	ble.n	80178a2 <etharp_find_entry+0x236>
 8017894:	4b2b      	ldr	r3, [pc, #172]	; (8017944 <etharp_find_entry+0x2d8>)
 8017896:	f240 127f 	movw	r2, #383	; 0x17f
 801789a:	492e      	ldr	r1, [pc, #184]	; (8017954 <etharp_find_entry+0x2e8>)
 801789c:	482b      	ldr	r0, [pc, #172]	; (801794c <etharp_find_entry+0x2e0>)
 801789e:	f002 fae3 	bl	8019e68 <iprintf>
    etharp_free_entry(i);
 80178a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80178a6:	4618      	mov	r0, r3
 80178a8:	f7ff fe06 	bl	80174b8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80178ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80178b0:	2b09      	cmp	r3, #9
 80178b2:	dd06      	ble.n	80178c2 <etharp_find_entry+0x256>
 80178b4:	4b23      	ldr	r3, [pc, #140]	; (8017944 <etharp_find_entry+0x2d8>)
 80178b6:	f240 1283 	movw	r2, #387	; 0x183
 80178ba:	4926      	ldr	r1, [pc, #152]	; (8017954 <etharp_find_entry+0x2e8>)
 80178bc:	4823      	ldr	r0, [pc, #140]	; (801794c <etharp_find_entry+0x2e0>)
 80178be:	f002 fad3 	bl	8019e68 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80178c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80178c6:	491e      	ldr	r1, [pc, #120]	; (8017940 <etharp_find_entry+0x2d4>)
 80178c8:	4613      	mov	r3, r2
 80178ca:	005b      	lsls	r3, r3, #1
 80178cc:	4413      	add	r3, r2
 80178ce:	00db      	lsls	r3, r3, #3
 80178d0:	440b      	add	r3, r1
 80178d2:	3314      	adds	r3, #20
 80178d4:	781b      	ldrb	r3, [r3, #0]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d006      	beq.n	80178e8 <etharp_find_entry+0x27c>
 80178da:	4b1a      	ldr	r3, [pc, #104]	; (8017944 <etharp_find_entry+0x2d8>)
 80178dc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80178e0:	491d      	ldr	r1, [pc, #116]	; (8017958 <etharp_find_entry+0x2ec>)
 80178e2:	481a      	ldr	r0, [pc, #104]	; (801794c <etharp_find_entry+0x2e0>)
 80178e4:	f002 fac0 	bl	8019e68 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d00b      	beq.n	8017906 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80178ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	6819      	ldr	r1, [r3, #0]
 80178f6:	4812      	ldr	r0, [pc, #72]	; (8017940 <etharp_find_entry+0x2d4>)
 80178f8:	4613      	mov	r3, r2
 80178fa:	005b      	lsls	r3, r3, #1
 80178fc:	4413      	add	r3, r2
 80178fe:	00db      	lsls	r3, r3, #3
 8017900:	4403      	add	r3, r0
 8017902:	3304      	adds	r3, #4
 8017904:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017906:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801790a:	490d      	ldr	r1, [pc, #52]	; (8017940 <etharp_find_entry+0x2d4>)
 801790c:	4613      	mov	r3, r2
 801790e:	005b      	lsls	r3, r3, #1
 8017910:	4413      	add	r3, r2
 8017912:	00db      	lsls	r3, r3, #3
 8017914:	440b      	add	r3, r1
 8017916:	3312      	adds	r3, #18
 8017918:	2200      	movs	r2, #0
 801791a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801791c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017920:	4907      	ldr	r1, [pc, #28]	; (8017940 <etharp_find_entry+0x2d4>)
 8017922:	4613      	mov	r3, r2
 8017924:	005b      	lsls	r3, r3, #1
 8017926:	4413      	add	r3, r2
 8017928:	00db      	lsls	r3, r3, #3
 801792a:	440b      	add	r3, r1
 801792c:	3308      	adds	r3, #8
 801792e:	687a      	ldr	r2, [r7, #4]
 8017930:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8017932:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8017936:	4618      	mov	r0, r3
 8017938:	3728      	adds	r7, #40	; 0x28
 801793a:	46bd      	mov	sp, r7
 801793c:	bd80      	pop	{r7, pc}
 801793e:	bf00      	nop
 8017940:	24015088 	.word	0x24015088
 8017944:	0801d440 	.word	0x0801d440
 8017948:	0801d478 	.word	0x0801d478
 801794c:	0801d4b8 	.word	0x0801d4b8
 8017950:	0801d4e0 	.word	0x0801d4e0
 8017954:	0801d4f8 	.word	0x0801d4f8
 8017958:	0801d50c 	.word	0x0801d50c

0801795c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801795c:	b580      	push	{r7, lr}
 801795e:	b088      	sub	sp, #32
 8017960:	af02      	add	r7, sp, #8
 8017962:	60f8      	str	r0, [r7, #12]
 8017964:	60b9      	str	r1, [r7, #8]
 8017966:	607a      	str	r2, [r7, #4]
 8017968:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017970:	2b06      	cmp	r3, #6
 8017972:	d006      	beq.n	8017982 <etharp_update_arp_entry+0x26>
 8017974:	4b48      	ldr	r3, [pc, #288]	; (8017a98 <etharp_update_arp_entry+0x13c>)
 8017976:	f240 12a9 	movw	r2, #425	; 0x1a9
 801797a:	4948      	ldr	r1, [pc, #288]	; (8017a9c <etharp_update_arp_entry+0x140>)
 801797c:	4848      	ldr	r0, [pc, #288]	; (8017aa0 <etharp_update_arp_entry+0x144>)
 801797e:	f002 fa73 	bl	8019e68 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017982:	68bb      	ldr	r3, [r7, #8]
 8017984:	2b00      	cmp	r3, #0
 8017986:	d012      	beq.n	80179ae <etharp_update_arp_entry+0x52>
 8017988:	68bb      	ldr	r3, [r7, #8]
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d00e      	beq.n	80179ae <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017990:	68bb      	ldr	r3, [r7, #8]
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	68f9      	ldr	r1, [r7, #12]
 8017996:	4618      	mov	r0, r3
 8017998:	f001 f92c 	bl	8018bf4 <ip4_addr_isbroadcast_u32>
 801799c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d105      	bne.n	80179ae <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80179a2:	68bb      	ldr	r3, [r7, #8]
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80179aa:	2be0      	cmp	r3, #224	; 0xe0
 80179ac:	d102      	bne.n	80179b4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80179ae:	f06f 030f 	mvn.w	r3, #15
 80179b2:	e06c      	b.n	8017a8e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80179b4:	78fb      	ldrb	r3, [r7, #3]
 80179b6:	68fa      	ldr	r2, [r7, #12]
 80179b8:	4619      	mov	r1, r3
 80179ba:	68b8      	ldr	r0, [r7, #8]
 80179bc:	f7ff fe56 	bl	801766c <etharp_find_entry>
 80179c0:	4603      	mov	r3, r0
 80179c2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80179c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	da02      	bge.n	80179d2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80179cc:	8afb      	ldrh	r3, [r7, #22]
 80179ce:	b25b      	sxtb	r3, r3
 80179d0:	e05d      	b.n	8017a8e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80179d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80179d6:	4933      	ldr	r1, [pc, #204]	; (8017aa4 <etharp_update_arp_entry+0x148>)
 80179d8:	4613      	mov	r3, r2
 80179da:	005b      	lsls	r3, r3, #1
 80179dc:	4413      	add	r3, r2
 80179de:	00db      	lsls	r3, r3, #3
 80179e0:	440b      	add	r3, r1
 80179e2:	3314      	adds	r3, #20
 80179e4:	2202      	movs	r2, #2
 80179e6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80179e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80179ec:	492d      	ldr	r1, [pc, #180]	; (8017aa4 <etharp_update_arp_entry+0x148>)
 80179ee:	4613      	mov	r3, r2
 80179f0:	005b      	lsls	r3, r3, #1
 80179f2:	4413      	add	r3, r2
 80179f4:	00db      	lsls	r3, r3, #3
 80179f6:	440b      	add	r3, r1
 80179f8:	3308      	adds	r3, #8
 80179fa:	68fa      	ldr	r2, [r7, #12]
 80179fc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80179fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017a02:	4613      	mov	r3, r2
 8017a04:	005b      	lsls	r3, r3, #1
 8017a06:	4413      	add	r3, r2
 8017a08:	00db      	lsls	r3, r3, #3
 8017a0a:	3308      	adds	r3, #8
 8017a0c:	4a25      	ldr	r2, [pc, #148]	; (8017aa4 <etharp_update_arp_entry+0x148>)
 8017a0e:	4413      	add	r3, r2
 8017a10:	3304      	adds	r3, #4
 8017a12:	2206      	movs	r2, #6
 8017a14:	6879      	ldr	r1, [r7, #4]
 8017a16:	4618      	mov	r0, r3
 8017a18:	f002 fc46 	bl	801a2a8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017a1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017a20:	4920      	ldr	r1, [pc, #128]	; (8017aa4 <etharp_update_arp_entry+0x148>)
 8017a22:	4613      	mov	r3, r2
 8017a24:	005b      	lsls	r3, r3, #1
 8017a26:	4413      	add	r3, r2
 8017a28:	00db      	lsls	r3, r3, #3
 8017a2a:	440b      	add	r3, r1
 8017a2c:	3312      	adds	r3, #18
 8017a2e:	2200      	movs	r2, #0
 8017a30:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017a32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017a36:	491b      	ldr	r1, [pc, #108]	; (8017aa4 <etharp_update_arp_entry+0x148>)
 8017a38:	4613      	mov	r3, r2
 8017a3a:	005b      	lsls	r3, r3, #1
 8017a3c:	4413      	add	r3, r2
 8017a3e:	00db      	lsls	r3, r3, #3
 8017a40:	440b      	add	r3, r1
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d021      	beq.n	8017a8c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017a48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017a4c:	4915      	ldr	r1, [pc, #84]	; (8017aa4 <etharp_update_arp_entry+0x148>)
 8017a4e:	4613      	mov	r3, r2
 8017a50:	005b      	lsls	r3, r3, #1
 8017a52:	4413      	add	r3, r2
 8017a54:	00db      	lsls	r3, r3, #3
 8017a56:	440b      	add	r3, r1
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017a5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017a60:	4910      	ldr	r1, [pc, #64]	; (8017aa4 <etharp_update_arp_entry+0x148>)
 8017a62:	4613      	mov	r3, r2
 8017a64:	005b      	lsls	r3, r3, #1
 8017a66:	4413      	add	r3, r2
 8017a68:	00db      	lsls	r3, r3, #3
 8017a6a:	440b      	add	r3, r1
 8017a6c:	2200      	movs	r2, #0
 8017a6e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8017a76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017a7a:	9300      	str	r3, [sp, #0]
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	6939      	ldr	r1, [r7, #16]
 8017a80:	68f8      	ldr	r0, [r7, #12]
 8017a82:	f001 ffc7 	bl	8019a14 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8017a86:	6938      	ldr	r0, [r7, #16]
 8017a88:	f7f8 fd10 	bl	80104ac <pbuf_free>
  }
  return ERR_OK;
 8017a8c:	2300      	movs	r3, #0
}
 8017a8e:	4618      	mov	r0, r3
 8017a90:	3718      	adds	r7, #24
 8017a92:	46bd      	mov	sp, r7
 8017a94:	bd80      	pop	{r7, pc}
 8017a96:	bf00      	nop
 8017a98:	0801d440 	.word	0x0801d440
 8017a9c:	0801d538 	.word	0x0801d538
 8017aa0:	0801d4b8 	.word	0x0801d4b8
 8017aa4:	24015088 	.word	0x24015088

08017aa8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b084      	sub	sp, #16
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017ab0:	2300      	movs	r3, #0
 8017ab2:	60fb      	str	r3, [r7, #12]
 8017ab4:	e01e      	b.n	8017af4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8017ab6:	4913      	ldr	r1, [pc, #76]	; (8017b04 <etharp_cleanup_netif+0x5c>)
 8017ab8:	68fa      	ldr	r2, [r7, #12]
 8017aba:	4613      	mov	r3, r2
 8017abc:	005b      	lsls	r3, r3, #1
 8017abe:	4413      	add	r3, r2
 8017ac0:	00db      	lsls	r3, r3, #3
 8017ac2:	440b      	add	r3, r1
 8017ac4:	3314      	adds	r3, #20
 8017ac6:	781b      	ldrb	r3, [r3, #0]
 8017ac8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017aca:	7afb      	ldrb	r3, [r7, #11]
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d00e      	beq.n	8017aee <etharp_cleanup_netif+0x46>
 8017ad0:	490c      	ldr	r1, [pc, #48]	; (8017b04 <etharp_cleanup_netif+0x5c>)
 8017ad2:	68fa      	ldr	r2, [r7, #12]
 8017ad4:	4613      	mov	r3, r2
 8017ad6:	005b      	lsls	r3, r3, #1
 8017ad8:	4413      	add	r3, r2
 8017ada:	00db      	lsls	r3, r3, #3
 8017adc:	440b      	add	r3, r1
 8017ade:	3308      	adds	r3, #8
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	687a      	ldr	r2, [r7, #4]
 8017ae4:	429a      	cmp	r2, r3
 8017ae6:	d102      	bne.n	8017aee <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017ae8:	68f8      	ldr	r0, [r7, #12]
 8017aea:	f7ff fce5 	bl	80174b8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	3301      	adds	r3, #1
 8017af2:	60fb      	str	r3, [r7, #12]
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	2b09      	cmp	r3, #9
 8017af8:	dddd      	ble.n	8017ab6 <etharp_cleanup_netif+0xe>
    }
  }
}
 8017afa:	bf00      	nop
 8017afc:	bf00      	nop
 8017afe:	3710      	adds	r7, #16
 8017b00:	46bd      	mov	sp, r7
 8017b02:	bd80      	pop	{r7, pc}
 8017b04:	24015088 	.word	0x24015088

08017b08 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017b08:	b5b0      	push	{r4, r5, r7, lr}
 8017b0a:	b08a      	sub	sp, #40	; 0x28
 8017b0c:	af04      	add	r7, sp, #16
 8017b0e:	6078      	str	r0, [r7, #4]
 8017b10:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();
 8017b12:	f7f2 ffd7 	bl	800aac4 <sys_check_core_locking>

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017b16:	683b      	ldr	r3, [r7, #0]
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d107      	bne.n	8017b2c <etharp_input+0x24>
 8017b1c:	4b3d      	ldr	r3, [pc, #244]	; (8017c14 <etharp_input+0x10c>)
 8017b1e:	f240 228a 	movw	r2, #650	; 0x28a
 8017b22:	493d      	ldr	r1, [pc, #244]	; (8017c18 <etharp_input+0x110>)
 8017b24:	483d      	ldr	r0, [pc, #244]	; (8017c1c <etharp_input+0x114>)
 8017b26:	f002 f99f 	bl	8019e68 <iprintf>
 8017b2a:	e06f      	b.n	8017c0c <etharp_input+0x104>

  hdr = (struct etharp_hdr *)p->payload;
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	685b      	ldr	r3, [r3, #4]
 8017b30:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017b32:	693b      	ldr	r3, [r7, #16]
 8017b34:	881b      	ldrh	r3, [r3, #0]
 8017b36:	b29b      	uxth	r3, r3
 8017b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017b3c:	d10c      	bne.n	8017b58 <etharp_input+0x50>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017b3e:	693b      	ldr	r3, [r7, #16]
 8017b40:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017b42:	2b06      	cmp	r3, #6
 8017b44:	d108      	bne.n	8017b58 <etharp_input+0x50>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017b46:	693b      	ldr	r3, [r7, #16]
 8017b48:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017b4a:	2b04      	cmp	r3, #4
 8017b4c:	d104      	bne.n	8017b58 <etharp_input+0x50>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017b4e:	693b      	ldr	r3, [r7, #16]
 8017b50:	885b      	ldrh	r3, [r3, #2]
 8017b52:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017b54:	2b08      	cmp	r3, #8
 8017b56:	d003      	beq.n	8017b60 <etharp_input+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017b58:	6878      	ldr	r0, [r7, #4]
 8017b5a:	f7f8 fca7 	bl	80104ac <pbuf_free>
    return;
 8017b5e:	e055      	b.n	8017c0c <etharp_input+0x104>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017b60:	693b      	ldr	r3, [r7, #16]
 8017b62:	330e      	adds	r3, #14
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8017b68:	693b      	ldr	r3, [r7, #16]
 8017b6a:	3318      	adds	r3, #24
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017b70:	683b      	ldr	r3, [r7, #0]
 8017b72:	3304      	adds	r3, #4
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d102      	bne.n	8017b80 <etharp_input+0x78>
    for_us = 0;
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	75fb      	strb	r3, [r7, #23]
 8017b7e:	e009      	b.n	8017b94 <etharp_input+0x8c>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017b80:	68ba      	ldr	r2, [r7, #8]
 8017b82:	683b      	ldr	r3, [r7, #0]
 8017b84:	3304      	adds	r3, #4
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	429a      	cmp	r2, r3
 8017b8a:	bf0c      	ite	eq
 8017b8c:	2301      	moveq	r3, #1
 8017b8e:	2300      	movne	r3, #0
 8017b90:	b2db      	uxtb	r3, r3
 8017b92:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017b94:	693b      	ldr	r3, [r7, #16]
 8017b96:	f103 0208 	add.w	r2, r3, #8
 8017b9a:	7dfb      	ldrb	r3, [r7, #23]
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d001      	beq.n	8017ba4 <etharp_input+0x9c>
 8017ba0:	2301      	movs	r3, #1
 8017ba2:	e000      	b.n	8017ba6 <etharp_input+0x9e>
 8017ba4:	2302      	movs	r3, #2
 8017ba6:	f107 010c 	add.w	r1, r7, #12
 8017baa:	6838      	ldr	r0, [r7, #0]
 8017bac:	f7ff fed6 	bl	801795c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017bb0:	693b      	ldr	r3, [r7, #16]
 8017bb2:	88db      	ldrh	r3, [r3, #6]
 8017bb4:	b29b      	uxth	r3, r3
 8017bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017bba:	d003      	beq.n	8017bc4 <etharp_input+0xbc>
 8017bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017bc0:	d01e      	beq.n	8017c00 <etharp_input+0xf8>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8017bc2:	e020      	b.n	8017c06 <etharp_input+0xfe>
      if (for_us) {
 8017bc4:	7dfb      	ldrb	r3, [r7, #23]
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d01c      	beq.n	8017c04 <etharp_input+0xfc>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017bca:	683b      	ldr	r3, [r7, #0]
 8017bcc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017bd0:	693b      	ldr	r3, [r7, #16]
 8017bd2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017bd6:	683b      	ldr	r3, [r7, #0]
 8017bd8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8017bdc:	683b      	ldr	r3, [r7, #0]
 8017bde:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017be0:	693a      	ldr	r2, [r7, #16]
 8017be2:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017be4:	2102      	movs	r1, #2
 8017be6:	9103      	str	r1, [sp, #12]
 8017be8:	f107 010c 	add.w	r1, r7, #12
 8017bec:	9102      	str	r1, [sp, #8]
 8017bee:	9201      	str	r2, [sp, #4]
 8017bf0:	9300      	str	r3, [sp, #0]
 8017bf2:	462b      	mov	r3, r5
 8017bf4:	4622      	mov	r2, r4
 8017bf6:	4601      	mov	r1, r0
 8017bf8:	6838      	ldr	r0, [r7, #0]
 8017bfa:	f000 faed 	bl	80181d8 <etharp_raw>
      break;
 8017bfe:	e001      	b.n	8017c04 <etharp_input+0xfc>
      break;
 8017c00:	bf00      	nop
 8017c02:	e000      	b.n	8017c06 <etharp_input+0xfe>
      break;
 8017c04:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017c06:	6878      	ldr	r0, [r7, #4]
 8017c08:	f7f8 fc50 	bl	80104ac <pbuf_free>
}
 8017c0c:	3718      	adds	r7, #24
 8017c0e:	46bd      	mov	sp, r7
 8017c10:	bdb0      	pop	{r4, r5, r7, pc}
 8017c12:	bf00      	nop
 8017c14:	0801d440 	.word	0x0801d440
 8017c18:	0801d590 	.word	0x0801d590
 8017c1c:	0801d4b8 	.word	0x0801d4b8

08017c20 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017c20:	b580      	push	{r7, lr}
 8017c22:	b086      	sub	sp, #24
 8017c24:	af02      	add	r7, sp, #8
 8017c26:	60f8      	str	r0, [r7, #12]
 8017c28:	60b9      	str	r1, [r7, #8]
 8017c2a:	4613      	mov	r3, r2
 8017c2c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8017c2e:	79fa      	ldrb	r2, [r7, #7]
 8017c30:	4944      	ldr	r1, [pc, #272]	; (8017d44 <etharp_output_to_arp_index+0x124>)
 8017c32:	4613      	mov	r3, r2
 8017c34:	005b      	lsls	r3, r3, #1
 8017c36:	4413      	add	r3, r2
 8017c38:	00db      	lsls	r3, r3, #3
 8017c3a:	440b      	add	r3, r1
 8017c3c:	3314      	adds	r3, #20
 8017c3e:	781b      	ldrb	r3, [r3, #0]
 8017c40:	2b01      	cmp	r3, #1
 8017c42:	d806      	bhi.n	8017c52 <etharp_output_to_arp_index+0x32>
 8017c44:	4b40      	ldr	r3, [pc, #256]	; (8017d48 <etharp_output_to_arp_index+0x128>)
 8017c46:	f240 22ee 	movw	r2, #750	; 0x2ee
 8017c4a:	4940      	ldr	r1, [pc, #256]	; (8017d4c <etharp_output_to_arp_index+0x12c>)
 8017c4c:	4840      	ldr	r0, [pc, #256]	; (8017d50 <etharp_output_to_arp_index+0x130>)
 8017c4e:	f002 f90b 	bl	8019e68 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017c52:	79fa      	ldrb	r2, [r7, #7]
 8017c54:	493b      	ldr	r1, [pc, #236]	; (8017d44 <etharp_output_to_arp_index+0x124>)
 8017c56:	4613      	mov	r3, r2
 8017c58:	005b      	lsls	r3, r3, #1
 8017c5a:	4413      	add	r3, r2
 8017c5c:	00db      	lsls	r3, r3, #3
 8017c5e:	440b      	add	r3, r1
 8017c60:	3314      	adds	r3, #20
 8017c62:	781b      	ldrb	r3, [r3, #0]
 8017c64:	2b02      	cmp	r3, #2
 8017c66:	d153      	bne.n	8017d10 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017c68:	79fa      	ldrb	r2, [r7, #7]
 8017c6a:	4936      	ldr	r1, [pc, #216]	; (8017d44 <etharp_output_to_arp_index+0x124>)
 8017c6c:	4613      	mov	r3, r2
 8017c6e:	005b      	lsls	r3, r3, #1
 8017c70:	4413      	add	r3, r2
 8017c72:	00db      	lsls	r3, r3, #3
 8017c74:	440b      	add	r3, r1
 8017c76:	3312      	adds	r3, #18
 8017c78:	881b      	ldrh	r3, [r3, #0]
 8017c7a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8017c7e:	d919      	bls.n	8017cb4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017c80:	79fa      	ldrb	r2, [r7, #7]
 8017c82:	4613      	mov	r3, r2
 8017c84:	005b      	lsls	r3, r3, #1
 8017c86:	4413      	add	r3, r2
 8017c88:	00db      	lsls	r3, r3, #3
 8017c8a:	4a2e      	ldr	r2, [pc, #184]	; (8017d44 <etharp_output_to_arp_index+0x124>)
 8017c8c:	4413      	add	r3, r2
 8017c8e:	3304      	adds	r3, #4
 8017c90:	4619      	mov	r1, r3
 8017c92:	68f8      	ldr	r0, [r7, #12]
 8017c94:	f000 fb4e 	bl	8018334 <etharp_request>
 8017c98:	4603      	mov	r3, r0
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d138      	bne.n	8017d10 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017c9e:	79fa      	ldrb	r2, [r7, #7]
 8017ca0:	4928      	ldr	r1, [pc, #160]	; (8017d44 <etharp_output_to_arp_index+0x124>)
 8017ca2:	4613      	mov	r3, r2
 8017ca4:	005b      	lsls	r3, r3, #1
 8017ca6:	4413      	add	r3, r2
 8017ca8:	00db      	lsls	r3, r3, #3
 8017caa:	440b      	add	r3, r1
 8017cac:	3314      	adds	r3, #20
 8017cae:	2203      	movs	r2, #3
 8017cb0:	701a      	strb	r2, [r3, #0]
 8017cb2:	e02d      	b.n	8017d10 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017cb4:	79fa      	ldrb	r2, [r7, #7]
 8017cb6:	4923      	ldr	r1, [pc, #140]	; (8017d44 <etharp_output_to_arp_index+0x124>)
 8017cb8:	4613      	mov	r3, r2
 8017cba:	005b      	lsls	r3, r3, #1
 8017cbc:	4413      	add	r3, r2
 8017cbe:	00db      	lsls	r3, r3, #3
 8017cc0:	440b      	add	r3, r1
 8017cc2:	3312      	adds	r3, #18
 8017cc4:	881b      	ldrh	r3, [r3, #0]
 8017cc6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8017cca:	d321      	bcc.n	8017d10 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017ccc:	79fa      	ldrb	r2, [r7, #7]
 8017cce:	4613      	mov	r3, r2
 8017cd0:	005b      	lsls	r3, r3, #1
 8017cd2:	4413      	add	r3, r2
 8017cd4:	00db      	lsls	r3, r3, #3
 8017cd6:	4a1b      	ldr	r2, [pc, #108]	; (8017d44 <etharp_output_to_arp_index+0x124>)
 8017cd8:	4413      	add	r3, r2
 8017cda:	1d19      	adds	r1, r3, #4
 8017cdc:	79fa      	ldrb	r2, [r7, #7]
 8017cde:	4613      	mov	r3, r2
 8017ce0:	005b      	lsls	r3, r3, #1
 8017ce2:	4413      	add	r3, r2
 8017ce4:	00db      	lsls	r3, r3, #3
 8017ce6:	3308      	adds	r3, #8
 8017ce8:	4a16      	ldr	r2, [pc, #88]	; (8017d44 <etharp_output_to_arp_index+0x124>)
 8017cea:	4413      	add	r3, r2
 8017cec:	3304      	adds	r3, #4
 8017cee:	461a      	mov	r2, r3
 8017cf0:	68f8      	ldr	r0, [r7, #12]
 8017cf2:	f000 fafd 	bl	80182f0 <etharp_request_dst>
 8017cf6:	4603      	mov	r3, r0
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d109      	bne.n	8017d10 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017cfc:	79fa      	ldrb	r2, [r7, #7]
 8017cfe:	4911      	ldr	r1, [pc, #68]	; (8017d44 <etharp_output_to_arp_index+0x124>)
 8017d00:	4613      	mov	r3, r2
 8017d02:	005b      	lsls	r3, r3, #1
 8017d04:	4413      	add	r3, r2
 8017d06:	00db      	lsls	r3, r3, #3
 8017d08:	440b      	add	r3, r1
 8017d0a:	3314      	adds	r3, #20
 8017d0c:	2203      	movs	r2, #3
 8017d0e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8017d16:	79fa      	ldrb	r2, [r7, #7]
 8017d18:	4613      	mov	r3, r2
 8017d1a:	005b      	lsls	r3, r3, #1
 8017d1c:	4413      	add	r3, r2
 8017d1e:	00db      	lsls	r3, r3, #3
 8017d20:	3308      	adds	r3, #8
 8017d22:	4a08      	ldr	r2, [pc, #32]	; (8017d44 <etharp_output_to_arp_index+0x124>)
 8017d24:	4413      	add	r3, r2
 8017d26:	3304      	adds	r3, #4
 8017d28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017d2c:	9200      	str	r2, [sp, #0]
 8017d2e:	460a      	mov	r2, r1
 8017d30:	68b9      	ldr	r1, [r7, #8]
 8017d32:	68f8      	ldr	r0, [r7, #12]
 8017d34:	f001 fe6e 	bl	8019a14 <ethernet_output>
 8017d38:	4603      	mov	r3, r0
}
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	3710      	adds	r7, #16
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	bd80      	pop	{r7, pc}
 8017d42:	bf00      	nop
 8017d44:	24015088 	.word	0x24015088
 8017d48:	0801d440 	.word	0x0801d440
 8017d4c:	0801d5b0 	.word	0x0801d5b0
 8017d50:	0801d4b8 	.word	0x0801d4b8

08017d54 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017d54:	b580      	push	{r7, lr}
 8017d56:	b08a      	sub	sp, #40	; 0x28
 8017d58:	af02      	add	r7, sp, #8
 8017d5a:	60f8      	str	r0, [r7, #12]
 8017d5c:	60b9      	str	r1, [r7, #8]
 8017d5e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
 8017d64:	f7f2 feae 	bl	800aac4 <sys_check_core_locking>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d106      	bne.n	8017d7c <etharp_output+0x28>
 8017d6e:	4b73      	ldr	r3, [pc, #460]	; (8017f3c <etharp_output+0x1e8>)
 8017d70:	f240 321e 	movw	r2, #798	; 0x31e
 8017d74:	4972      	ldr	r1, [pc, #456]	; (8017f40 <etharp_output+0x1ec>)
 8017d76:	4873      	ldr	r0, [pc, #460]	; (8017f44 <etharp_output+0x1f0>)
 8017d78:	f002 f876 	bl	8019e68 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017d7c:	68bb      	ldr	r3, [r7, #8]
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d106      	bne.n	8017d90 <etharp_output+0x3c>
 8017d82:	4b6e      	ldr	r3, [pc, #440]	; (8017f3c <etharp_output+0x1e8>)
 8017d84:	f240 321f 	movw	r2, #799	; 0x31f
 8017d88:	496f      	ldr	r1, [pc, #444]	; (8017f48 <etharp_output+0x1f4>)
 8017d8a:	486e      	ldr	r0, [pc, #440]	; (8017f44 <etharp_output+0x1f0>)
 8017d8c:	f002 f86c 	bl	8019e68 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d106      	bne.n	8017da4 <etharp_output+0x50>
 8017d96:	4b69      	ldr	r3, [pc, #420]	; (8017f3c <etharp_output+0x1e8>)
 8017d98:	f44f 7248 	mov.w	r2, #800	; 0x320
 8017d9c:	496b      	ldr	r1, [pc, #428]	; (8017f4c <etharp_output+0x1f8>)
 8017d9e:	4869      	ldr	r0, [pc, #420]	; (8017f44 <etharp_output+0x1f0>)
 8017da0:	f002 f862 	bl	8019e68 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	68f9      	ldr	r1, [r7, #12]
 8017daa:	4618      	mov	r0, r3
 8017dac:	f000 ff22 	bl	8018bf4 <ip4_addr_isbroadcast_u32>
 8017db0:	4603      	mov	r3, r0
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d002      	beq.n	8017dbc <etharp_output+0x68>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017db6:	4b66      	ldr	r3, [pc, #408]	; (8017f50 <etharp_output+0x1fc>)
 8017db8:	61fb      	str	r3, [r7, #28]
 8017dba:	e0af      	b.n	8017f1c <etharp_output+0x1c8>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017dc4:	2be0      	cmp	r3, #224	; 0xe0
 8017dc6:	d118      	bne.n	8017dfa <etharp_output+0xa6>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017dc8:	2301      	movs	r3, #1
 8017dca:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017dcc:	2300      	movs	r3, #0
 8017dce:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017dd0:	235e      	movs	r3, #94	; 0x5e
 8017dd2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	3301      	adds	r3, #1
 8017dd8:	781b      	ldrb	r3, [r3, #0]
 8017dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017dde:	b2db      	uxtb	r3, r3
 8017de0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	3302      	adds	r3, #2
 8017de6:	781b      	ldrb	r3, [r3, #0]
 8017de8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	3303      	adds	r3, #3
 8017dee:	781b      	ldrb	r3, [r3, #0]
 8017df0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017df2:	f107 0310 	add.w	r3, r7, #16
 8017df6:	61fb      	str	r3, [r7, #28]
 8017df8:	e090      	b.n	8017f1c <etharp_output+0x1c8>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	681a      	ldr	r2, [r3, #0]
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	3304      	adds	r3, #4
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	405a      	eors	r2, r3
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	3308      	adds	r3, #8
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	4013      	ands	r3, r2
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d012      	beq.n	8017e38 <etharp_output+0xe4>
        !ip4_addr_islinklocal(ipaddr)) {
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017e18:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017e1c:	4293      	cmp	r3, r2
 8017e1e:	d00b      	beq.n	8017e38 <etharp_output+0xe4>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	330c      	adds	r3, #12
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d003      	beq.n	8017e32 <etharp_output+0xde>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017e2a:	68fb      	ldr	r3, [r7, #12]
 8017e2c:	330c      	adds	r3, #12
 8017e2e:	61bb      	str	r3, [r7, #24]
 8017e30:	e002      	b.n	8017e38 <etharp_output+0xe4>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8017e32:	f06f 0303 	mvn.w	r3, #3
 8017e36:	e07d      	b.n	8017f34 <etharp_output+0x1e0>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017e38:	4b46      	ldr	r3, [pc, #280]	; (8017f54 <etharp_output+0x200>)
 8017e3a:	781b      	ldrb	r3, [r3, #0]
 8017e3c:	4619      	mov	r1, r3
 8017e3e:	4a46      	ldr	r2, [pc, #280]	; (8017f58 <etharp_output+0x204>)
 8017e40:	460b      	mov	r3, r1
 8017e42:	005b      	lsls	r3, r3, #1
 8017e44:	440b      	add	r3, r1
 8017e46:	00db      	lsls	r3, r3, #3
 8017e48:	4413      	add	r3, r2
 8017e4a:	3314      	adds	r3, #20
 8017e4c:	781b      	ldrb	r3, [r3, #0]
 8017e4e:	2b01      	cmp	r3, #1
 8017e50:	d925      	bls.n	8017e9e <etharp_output+0x14a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017e52:	4b40      	ldr	r3, [pc, #256]	; (8017f54 <etharp_output+0x200>)
 8017e54:	781b      	ldrb	r3, [r3, #0]
 8017e56:	4619      	mov	r1, r3
 8017e58:	4a3f      	ldr	r2, [pc, #252]	; (8017f58 <etharp_output+0x204>)
 8017e5a:	460b      	mov	r3, r1
 8017e5c:	005b      	lsls	r3, r3, #1
 8017e5e:	440b      	add	r3, r1
 8017e60:	00db      	lsls	r3, r3, #3
 8017e62:	4413      	add	r3, r2
 8017e64:	3308      	adds	r3, #8
 8017e66:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017e68:	68fa      	ldr	r2, [r7, #12]
 8017e6a:	429a      	cmp	r2, r3
 8017e6c:	d117      	bne.n	8017e9e <etharp_output+0x14a>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8017e6e:	69bb      	ldr	r3, [r7, #24]
 8017e70:	681a      	ldr	r2, [r3, #0]
 8017e72:	4b38      	ldr	r3, [pc, #224]	; (8017f54 <etharp_output+0x200>)
 8017e74:	781b      	ldrb	r3, [r3, #0]
 8017e76:	4618      	mov	r0, r3
 8017e78:	4937      	ldr	r1, [pc, #220]	; (8017f58 <etharp_output+0x204>)
 8017e7a:	4603      	mov	r3, r0
 8017e7c:	005b      	lsls	r3, r3, #1
 8017e7e:	4403      	add	r3, r0
 8017e80:	00db      	lsls	r3, r3, #3
 8017e82:	440b      	add	r3, r1
 8017e84:	3304      	adds	r3, #4
 8017e86:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017e88:	429a      	cmp	r2, r3
 8017e8a:	d108      	bne.n	8017e9e <etharp_output+0x14a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017e8c:	4b31      	ldr	r3, [pc, #196]	; (8017f54 <etharp_output+0x200>)
 8017e8e:	781b      	ldrb	r3, [r3, #0]
 8017e90:	461a      	mov	r2, r3
 8017e92:	68b9      	ldr	r1, [r7, #8]
 8017e94:	68f8      	ldr	r0, [r7, #12]
 8017e96:	f7ff fec3 	bl	8017c20 <etharp_output_to_arp_index>
 8017e9a:	4603      	mov	r3, r0
 8017e9c:	e04a      	b.n	8017f34 <etharp_output+0x1e0>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017e9e:	2300      	movs	r3, #0
 8017ea0:	75fb      	strb	r3, [r7, #23]
 8017ea2:	e031      	b.n	8017f08 <etharp_output+0x1b4>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017ea4:	7dfa      	ldrb	r2, [r7, #23]
 8017ea6:	492c      	ldr	r1, [pc, #176]	; (8017f58 <etharp_output+0x204>)
 8017ea8:	4613      	mov	r3, r2
 8017eaa:	005b      	lsls	r3, r3, #1
 8017eac:	4413      	add	r3, r2
 8017eae:	00db      	lsls	r3, r3, #3
 8017eb0:	440b      	add	r3, r1
 8017eb2:	3314      	adds	r3, #20
 8017eb4:	781b      	ldrb	r3, [r3, #0]
 8017eb6:	2b01      	cmp	r3, #1
 8017eb8:	d923      	bls.n	8017f02 <etharp_output+0x1ae>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8017eba:	7dfa      	ldrb	r2, [r7, #23]
 8017ebc:	4926      	ldr	r1, [pc, #152]	; (8017f58 <etharp_output+0x204>)
 8017ebe:	4613      	mov	r3, r2
 8017ec0:	005b      	lsls	r3, r3, #1
 8017ec2:	4413      	add	r3, r2
 8017ec4:	00db      	lsls	r3, r3, #3
 8017ec6:	440b      	add	r3, r1
 8017ec8:	3308      	adds	r3, #8
 8017eca:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017ecc:	68fa      	ldr	r2, [r7, #12]
 8017ece:	429a      	cmp	r2, r3
 8017ed0:	d117      	bne.n	8017f02 <etharp_output+0x1ae>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017ed2:	69bb      	ldr	r3, [r7, #24]
 8017ed4:	6819      	ldr	r1, [r3, #0]
 8017ed6:	7dfa      	ldrb	r2, [r7, #23]
 8017ed8:	481f      	ldr	r0, [pc, #124]	; (8017f58 <etharp_output+0x204>)
 8017eda:	4613      	mov	r3, r2
 8017edc:	005b      	lsls	r3, r3, #1
 8017ede:	4413      	add	r3, r2
 8017ee0:	00db      	lsls	r3, r3, #3
 8017ee2:	4403      	add	r3, r0
 8017ee4:	3304      	adds	r3, #4
 8017ee6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017ee8:	4299      	cmp	r1, r3
 8017eea:	d10a      	bne.n	8017f02 <etharp_output+0x1ae>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017eec:	4a19      	ldr	r2, [pc, #100]	; (8017f54 <etharp_output+0x200>)
 8017eee:	7dfb      	ldrb	r3, [r7, #23]
 8017ef0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017ef2:	7dfb      	ldrb	r3, [r7, #23]
 8017ef4:	461a      	mov	r2, r3
 8017ef6:	68b9      	ldr	r1, [r7, #8]
 8017ef8:	68f8      	ldr	r0, [r7, #12]
 8017efa:	f7ff fe91 	bl	8017c20 <etharp_output_to_arp_index>
 8017efe:	4603      	mov	r3, r0
 8017f00:	e018      	b.n	8017f34 <etharp_output+0x1e0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017f02:	7dfb      	ldrb	r3, [r7, #23]
 8017f04:	3301      	adds	r3, #1
 8017f06:	75fb      	strb	r3, [r7, #23]
 8017f08:	7dfb      	ldrb	r3, [r7, #23]
 8017f0a:	2b09      	cmp	r3, #9
 8017f0c:	d9ca      	bls.n	8017ea4 <etharp_output+0x150>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8017f0e:	68ba      	ldr	r2, [r7, #8]
 8017f10:	69b9      	ldr	r1, [r7, #24]
 8017f12:	68f8      	ldr	r0, [r7, #12]
 8017f14:	f000 f822 	bl	8017f5c <etharp_query>
 8017f18:	4603      	mov	r3, r0
 8017f1a:	e00b      	b.n	8017f34 <etharp_output+0x1e0>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8017f22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017f26:	9300      	str	r3, [sp, #0]
 8017f28:	69fb      	ldr	r3, [r7, #28]
 8017f2a:	68b9      	ldr	r1, [r7, #8]
 8017f2c:	68f8      	ldr	r0, [r7, #12]
 8017f2e:	f001 fd71 	bl	8019a14 <ethernet_output>
 8017f32:	4603      	mov	r3, r0
}
 8017f34:	4618      	mov	r0, r3
 8017f36:	3720      	adds	r7, #32
 8017f38:	46bd      	mov	sp, r7
 8017f3a:	bd80      	pop	{r7, pc}
 8017f3c:	0801d440 	.word	0x0801d440
 8017f40:	0801d590 	.word	0x0801d590
 8017f44:	0801d4b8 	.word	0x0801d4b8
 8017f48:	0801d5e0 	.word	0x0801d5e0
 8017f4c:	0801d580 	.word	0x0801d580
 8017f50:	0801e2c0 	.word	0x0801e2c0
 8017f54:	24015178 	.word	0x24015178
 8017f58:	24015088 	.word	0x24015088

08017f5c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017f5c:	b580      	push	{r7, lr}
 8017f5e:	b08c      	sub	sp, #48	; 0x30
 8017f60:	af02      	add	r7, sp, #8
 8017f62:	60f8      	str	r0, [r7, #12]
 8017f64:	60b9      	str	r1, [r7, #8]
 8017f66:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	3326      	adds	r3, #38	; 0x26
 8017f6c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8017f6e:	23ff      	movs	r3, #255	; 0xff
 8017f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017f74:	2300      	movs	r3, #0
 8017f76:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017f78:	68bb      	ldr	r3, [r7, #8]
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	68f9      	ldr	r1, [r7, #12]
 8017f7e:	4618      	mov	r0, r3
 8017f80:	f000 fe38 	bl	8018bf4 <ip4_addr_isbroadcast_u32>
 8017f84:	4603      	mov	r3, r0
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d10c      	bne.n	8017fa4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017f8a:	68bb      	ldr	r3, [r7, #8]
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017f92:	2be0      	cmp	r3, #224	; 0xe0
 8017f94:	d006      	beq.n	8017fa4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017f96:	68bb      	ldr	r3, [r7, #8]
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d003      	beq.n	8017fa4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017f9c:	68bb      	ldr	r3, [r7, #8]
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d102      	bne.n	8017faa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017fa4:	f06f 030f 	mvn.w	r3, #15
 8017fa8:	e101      	b.n	80181ae <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8017faa:	68fa      	ldr	r2, [r7, #12]
 8017fac:	2101      	movs	r1, #1
 8017fae:	68b8      	ldr	r0, [r7, #8]
 8017fb0:	f7ff fb5c 	bl	801766c <etharp_find_entry>
 8017fb4:	4603      	mov	r3, r0
 8017fb6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017fb8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	da02      	bge.n	8017fc6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017fc0:	8a7b      	ldrh	r3, [r7, #18]
 8017fc2:	b25b      	sxtb	r3, r3
 8017fc4:	e0f3      	b.n	80181ae <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017fc6:	8a7b      	ldrh	r3, [r7, #18]
 8017fc8:	2b7e      	cmp	r3, #126	; 0x7e
 8017fca:	d906      	bls.n	8017fda <etharp_query+0x7e>
 8017fcc:	4b7a      	ldr	r3, [pc, #488]	; (80181b8 <etharp_query+0x25c>)
 8017fce:	f240 32c1 	movw	r2, #961	; 0x3c1
 8017fd2:	497a      	ldr	r1, [pc, #488]	; (80181bc <etharp_query+0x260>)
 8017fd4:	487a      	ldr	r0, [pc, #488]	; (80181c0 <etharp_query+0x264>)
 8017fd6:	f001 ff47 	bl	8019e68 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8017fda:	8a7b      	ldrh	r3, [r7, #18]
 8017fdc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8017fde:	7c7a      	ldrb	r2, [r7, #17]
 8017fe0:	4978      	ldr	r1, [pc, #480]	; (80181c4 <etharp_query+0x268>)
 8017fe2:	4613      	mov	r3, r2
 8017fe4:	005b      	lsls	r3, r3, #1
 8017fe6:	4413      	add	r3, r2
 8017fe8:	00db      	lsls	r3, r3, #3
 8017fea:	440b      	add	r3, r1
 8017fec:	3314      	adds	r3, #20
 8017fee:	781b      	ldrb	r3, [r3, #0]
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d115      	bne.n	8018020 <etharp_query+0xc4>
    is_new_entry = 1;
 8017ff4:	2301      	movs	r3, #1
 8017ff6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017ff8:	7c7a      	ldrb	r2, [r7, #17]
 8017ffa:	4972      	ldr	r1, [pc, #456]	; (80181c4 <etharp_query+0x268>)
 8017ffc:	4613      	mov	r3, r2
 8017ffe:	005b      	lsls	r3, r3, #1
 8018000:	4413      	add	r3, r2
 8018002:	00db      	lsls	r3, r3, #3
 8018004:	440b      	add	r3, r1
 8018006:	3314      	adds	r3, #20
 8018008:	2201      	movs	r2, #1
 801800a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801800c:	7c7a      	ldrb	r2, [r7, #17]
 801800e:	496d      	ldr	r1, [pc, #436]	; (80181c4 <etharp_query+0x268>)
 8018010:	4613      	mov	r3, r2
 8018012:	005b      	lsls	r3, r3, #1
 8018014:	4413      	add	r3, r2
 8018016:	00db      	lsls	r3, r3, #3
 8018018:	440b      	add	r3, r1
 801801a:	3308      	adds	r3, #8
 801801c:	68fa      	ldr	r2, [r7, #12]
 801801e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018020:	7c7a      	ldrb	r2, [r7, #17]
 8018022:	4968      	ldr	r1, [pc, #416]	; (80181c4 <etharp_query+0x268>)
 8018024:	4613      	mov	r3, r2
 8018026:	005b      	lsls	r3, r3, #1
 8018028:	4413      	add	r3, r2
 801802a:	00db      	lsls	r3, r3, #3
 801802c:	440b      	add	r3, r1
 801802e:	3314      	adds	r3, #20
 8018030:	781b      	ldrb	r3, [r3, #0]
 8018032:	2b01      	cmp	r3, #1
 8018034:	d011      	beq.n	801805a <etharp_query+0xfe>
 8018036:	7c7a      	ldrb	r2, [r7, #17]
 8018038:	4962      	ldr	r1, [pc, #392]	; (80181c4 <etharp_query+0x268>)
 801803a:	4613      	mov	r3, r2
 801803c:	005b      	lsls	r3, r3, #1
 801803e:	4413      	add	r3, r2
 8018040:	00db      	lsls	r3, r3, #3
 8018042:	440b      	add	r3, r1
 8018044:	3314      	adds	r3, #20
 8018046:	781b      	ldrb	r3, [r3, #0]
 8018048:	2b01      	cmp	r3, #1
 801804a:	d806      	bhi.n	801805a <etharp_query+0xfe>
 801804c:	4b5a      	ldr	r3, [pc, #360]	; (80181b8 <etharp_query+0x25c>)
 801804e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8018052:	495d      	ldr	r1, [pc, #372]	; (80181c8 <etharp_query+0x26c>)
 8018054:	485a      	ldr	r0, [pc, #360]	; (80181c0 <etharp_query+0x264>)
 8018056:	f001 ff07 	bl	8019e68 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801805a:	6a3b      	ldr	r3, [r7, #32]
 801805c:	2b00      	cmp	r3, #0
 801805e:	d102      	bne.n	8018066 <etharp_query+0x10a>
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	2b00      	cmp	r3, #0
 8018064:	d10c      	bne.n	8018080 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018066:	68b9      	ldr	r1, [r7, #8]
 8018068:	68f8      	ldr	r0, [r7, #12]
 801806a:	f000 f963 	bl	8018334 <etharp_request>
 801806e:	4603      	mov	r3, r0
 8018070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	2b00      	cmp	r3, #0
 8018078:	d102      	bne.n	8018080 <etharp_query+0x124>
      return result;
 801807a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801807e:	e096      	b.n	80181ae <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	2b00      	cmp	r3, #0
 8018084:	d106      	bne.n	8018094 <etharp_query+0x138>
 8018086:	4b4c      	ldr	r3, [pc, #304]	; (80181b8 <etharp_query+0x25c>)
 8018088:	f240 32e1 	movw	r2, #993	; 0x3e1
 801808c:	494f      	ldr	r1, [pc, #316]	; (80181cc <etharp_query+0x270>)
 801808e:	484c      	ldr	r0, [pc, #304]	; (80181c0 <etharp_query+0x264>)
 8018090:	f001 feea 	bl	8019e68 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018094:	7c7a      	ldrb	r2, [r7, #17]
 8018096:	494b      	ldr	r1, [pc, #300]	; (80181c4 <etharp_query+0x268>)
 8018098:	4613      	mov	r3, r2
 801809a:	005b      	lsls	r3, r3, #1
 801809c:	4413      	add	r3, r2
 801809e:	00db      	lsls	r3, r3, #3
 80180a0:	440b      	add	r3, r1
 80180a2:	3314      	adds	r3, #20
 80180a4:	781b      	ldrb	r3, [r3, #0]
 80180a6:	2b01      	cmp	r3, #1
 80180a8:	d917      	bls.n	80180da <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80180aa:	4a49      	ldr	r2, [pc, #292]	; (80181d0 <etharp_query+0x274>)
 80180ac:	7c7b      	ldrb	r3, [r7, #17]
 80180ae:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80180b0:	7c7a      	ldrb	r2, [r7, #17]
 80180b2:	4613      	mov	r3, r2
 80180b4:	005b      	lsls	r3, r3, #1
 80180b6:	4413      	add	r3, r2
 80180b8:	00db      	lsls	r3, r3, #3
 80180ba:	3308      	adds	r3, #8
 80180bc:	4a41      	ldr	r2, [pc, #260]	; (80181c4 <etharp_query+0x268>)
 80180be:	4413      	add	r3, r2
 80180c0:	3304      	adds	r3, #4
 80180c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80180c6:	9200      	str	r2, [sp, #0]
 80180c8:	697a      	ldr	r2, [r7, #20]
 80180ca:	6879      	ldr	r1, [r7, #4]
 80180cc:	68f8      	ldr	r0, [r7, #12]
 80180ce:	f001 fca1 	bl	8019a14 <ethernet_output>
 80180d2:	4603      	mov	r3, r0
 80180d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80180d8:	e067      	b.n	80181aa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80180da:	7c7a      	ldrb	r2, [r7, #17]
 80180dc:	4939      	ldr	r1, [pc, #228]	; (80181c4 <etharp_query+0x268>)
 80180de:	4613      	mov	r3, r2
 80180e0:	005b      	lsls	r3, r3, #1
 80180e2:	4413      	add	r3, r2
 80180e4:	00db      	lsls	r3, r3, #3
 80180e6:	440b      	add	r3, r1
 80180e8:	3314      	adds	r3, #20
 80180ea:	781b      	ldrb	r3, [r3, #0]
 80180ec:	2b01      	cmp	r3, #1
 80180ee:	d15c      	bne.n	80181aa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80180f0:	2300      	movs	r3, #0
 80180f2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80180f8:	e01c      	b.n	8018134 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80180fa:	69fb      	ldr	r3, [r7, #28]
 80180fc:	895a      	ldrh	r2, [r3, #10]
 80180fe:	69fb      	ldr	r3, [r7, #28]
 8018100:	891b      	ldrh	r3, [r3, #8]
 8018102:	429a      	cmp	r2, r3
 8018104:	d10a      	bne.n	801811c <etharp_query+0x1c0>
 8018106:	69fb      	ldr	r3, [r7, #28]
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	2b00      	cmp	r3, #0
 801810c:	d006      	beq.n	801811c <etharp_query+0x1c0>
 801810e:	4b2a      	ldr	r3, [pc, #168]	; (80181b8 <etharp_query+0x25c>)
 8018110:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018114:	492f      	ldr	r1, [pc, #188]	; (80181d4 <etharp_query+0x278>)
 8018116:	482a      	ldr	r0, [pc, #168]	; (80181c0 <etharp_query+0x264>)
 8018118:	f001 fea6 	bl	8019e68 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801811c:	69fb      	ldr	r3, [r7, #28]
 801811e:	7b1b      	ldrb	r3, [r3, #12]
 8018120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018124:	2b00      	cmp	r3, #0
 8018126:	d002      	beq.n	801812e <etharp_query+0x1d2>
        copy_needed = 1;
 8018128:	2301      	movs	r3, #1
 801812a:	61bb      	str	r3, [r7, #24]
        break;
 801812c:	e005      	b.n	801813a <etharp_query+0x1de>
      }
      p = p->next;
 801812e:	69fb      	ldr	r3, [r7, #28]
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018134:	69fb      	ldr	r3, [r7, #28]
 8018136:	2b00      	cmp	r3, #0
 8018138:	d1df      	bne.n	80180fa <etharp_query+0x19e>
    }
    if (copy_needed) {
 801813a:	69bb      	ldr	r3, [r7, #24]
 801813c:	2b00      	cmp	r3, #0
 801813e:	d007      	beq.n	8018150 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018140:	687a      	ldr	r2, [r7, #4]
 8018142:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018146:	200e      	movs	r0, #14
 8018148:	f7f8 fc42 	bl	80109d0 <pbuf_clone>
 801814c:	61f8      	str	r0, [r7, #28]
 801814e:	e004      	b.n	801815a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018154:	69f8      	ldr	r0, [r7, #28]
 8018156:	f7f8 fa4f 	bl	80105f8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801815a:	69fb      	ldr	r3, [r7, #28]
 801815c:	2b00      	cmp	r3, #0
 801815e:	d021      	beq.n	80181a4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018160:	7c7a      	ldrb	r2, [r7, #17]
 8018162:	4918      	ldr	r1, [pc, #96]	; (80181c4 <etharp_query+0x268>)
 8018164:	4613      	mov	r3, r2
 8018166:	005b      	lsls	r3, r3, #1
 8018168:	4413      	add	r3, r2
 801816a:	00db      	lsls	r3, r3, #3
 801816c:	440b      	add	r3, r1
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	2b00      	cmp	r3, #0
 8018172:	d00a      	beq.n	801818a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018174:	7c7a      	ldrb	r2, [r7, #17]
 8018176:	4913      	ldr	r1, [pc, #76]	; (80181c4 <etharp_query+0x268>)
 8018178:	4613      	mov	r3, r2
 801817a:	005b      	lsls	r3, r3, #1
 801817c:	4413      	add	r3, r2
 801817e:	00db      	lsls	r3, r3, #3
 8018180:	440b      	add	r3, r1
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	4618      	mov	r0, r3
 8018186:	f7f8 f991 	bl	80104ac <pbuf_free>
      }
      arp_table[i].q = p;
 801818a:	7c7a      	ldrb	r2, [r7, #17]
 801818c:	490d      	ldr	r1, [pc, #52]	; (80181c4 <etharp_query+0x268>)
 801818e:	4613      	mov	r3, r2
 8018190:	005b      	lsls	r3, r3, #1
 8018192:	4413      	add	r3, r2
 8018194:	00db      	lsls	r3, r3, #3
 8018196:	440b      	add	r3, r1
 8018198:	69fa      	ldr	r2, [r7, #28]
 801819a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801819c:	2300      	movs	r3, #0
 801819e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80181a2:	e002      	b.n	80181aa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80181a4:	23ff      	movs	r3, #255	; 0xff
 80181a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80181aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80181ae:	4618      	mov	r0, r3
 80181b0:	3728      	adds	r7, #40	; 0x28
 80181b2:	46bd      	mov	sp, r7
 80181b4:	bd80      	pop	{r7, pc}
 80181b6:	bf00      	nop
 80181b8:	0801d440 	.word	0x0801d440
 80181bc:	0801d5ec 	.word	0x0801d5ec
 80181c0:	0801d4b8 	.word	0x0801d4b8
 80181c4:	24015088 	.word	0x24015088
 80181c8:	0801d5fc 	.word	0x0801d5fc
 80181cc:	0801d5e0 	.word	0x0801d5e0
 80181d0:	24015178 	.word	0x24015178
 80181d4:	0801d624 	.word	0x0801d624

080181d8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80181d8:	b580      	push	{r7, lr}
 80181da:	b08a      	sub	sp, #40	; 0x28
 80181dc:	af02      	add	r7, sp, #8
 80181de:	60f8      	str	r0, [r7, #12]
 80181e0:	60b9      	str	r1, [r7, #8]
 80181e2:	607a      	str	r2, [r7, #4]
 80181e4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80181e6:	2300      	movs	r3, #0
 80181e8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80181ea:	68fb      	ldr	r3, [r7, #12]
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d106      	bne.n	80181fe <etharp_raw+0x26>
 80181f0:	4b3a      	ldr	r3, [pc, #232]	; (80182dc <etharp_raw+0x104>)
 80181f2:	f240 4257 	movw	r2, #1111	; 0x457
 80181f6:	493a      	ldr	r1, [pc, #232]	; (80182e0 <etharp_raw+0x108>)
 80181f8:	483a      	ldr	r0, [pc, #232]	; (80182e4 <etharp_raw+0x10c>)
 80181fa:	f001 fe35 	bl	8019e68 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80181fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018202:	211c      	movs	r1, #28
 8018204:	200e      	movs	r0, #14
 8018206:	f7f7 fe69 	bl	800fedc <pbuf_alloc>
 801820a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801820c:	69bb      	ldr	r3, [r7, #24]
 801820e:	2b00      	cmp	r3, #0
 8018210:	d102      	bne.n	8018218 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018212:	f04f 33ff 	mov.w	r3, #4294967295
 8018216:	e05d      	b.n	80182d4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018218:	69bb      	ldr	r3, [r7, #24]
 801821a:	895b      	ldrh	r3, [r3, #10]
 801821c:	2b1b      	cmp	r3, #27
 801821e:	d806      	bhi.n	801822e <etharp_raw+0x56>
 8018220:	4b2e      	ldr	r3, [pc, #184]	; (80182dc <etharp_raw+0x104>)
 8018222:	f240 4262 	movw	r2, #1122	; 0x462
 8018226:	4930      	ldr	r1, [pc, #192]	; (80182e8 <etharp_raw+0x110>)
 8018228:	482e      	ldr	r0, [pc, #184]	; (80182e4 <etharp_raw+0x10c>)
 801822a:	f001 fe1d 	bl	8019e68 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801822e:	69bb      	ldr	r3, [r7, #24]
 8018230:	685b      	ldr	r3, [r3, #4]
 8018232:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018234:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018236:	4618      	mov	r0, r3
 8018238:	f7f6 fc6e 	bl	800eb18 <lwip_htons>
 801823c:	4603      	mov	r3, r0
 801823e:	461a      	mov	r2, r3
 8018240:	697b      	ldr	r3, [r7, #20]
 8018242:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801824a:	2b06      	cmp	r3, #6
 801824c:	d006      	beq.n	801825c <etharp_raw+0x84>
 801824e:	4b23      	ldr	r3, [pc, #140]	; (80182dc <etharp_raw+0x104>)
 8018250:	f240 4269 	movw	r2, #1129	; 0x469
 8018254:	4925      	ldr	r1, [pc, #148]	; (80182ec <etharp_raw+0x114>)
 8018256:	4823      	ldr	r0, [pc, #140]	; (80182e4 <etharp_raw+0x10c>)
 8018258:	f001 fe06 	bl	8019e68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801825c:	697b      	ldr	r3, [r7, #20]
 801825e:	3308      	adds	r3, #8
 8018260:	2206      	movs	r2, #6
 8018262:	6839      	ldr	r1, [r7, #0]
 8018264:	4618      	mov	r0, r3
 8018266:	f002 f81f 	bl	801a2a8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801826a:	697b      	ldr	r3, [r7, #20]
 801826c:	3312      	adds	r3, #18
 801826e:	2206      	movs	r2, #6
 8018270:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018272:	4618      	mov	r0, r3
 8018274:	f002 f818 	bl	801a2a8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018278:	697b      	ldr	r3, [r7, #20]
 801827a:	330e      	adds	r3, #14
 801827c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801827e:	6812      	ldr	r2, [r2, #0]
 8018280:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8018282:	697b      	ldr	r3, [r7, #20]
 8018284:	3318      	adds	r3, #24
 8018286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018288:	6812      	ldr	r2, [r2, #0]
 801828a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801828c:	697b      	ldr	r3, [r7, #20]
 801828e:	2200      	movs	r2, #0
 8018290:	701a      	strb	r2, [r3, #0]
 8018292:	2200      	movs	r2, #0
 8018294:	f042 0201 	orr.w	r2, r2, #1
 8018298:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801829a:	697b      	ldr	r3, [r7, #20]
 801829c:	2200      	movs	r2, #0
 801829e:	f042 0208 	orr.w	r2, r2, #8
 80182a2:	709a      	strb	r2, [r3, #2]
 80182a4:	2200      	movs	r2, #0
 80182a6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80182a8:	697b      	ldr	r3, [r7, #20]
 80182aa:	2206      	movs	r2, #6
 80182ac:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80182ae:	697b      	ldr	r3, [r7, #20]
 80182b0:	2204      	movs	r2, #4
 80182b2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80182b4:	f640 0306 	movw	r3, #2054	; 0x806
 80182b8:	9300      	str	r3, [sp, #0]
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	68ba      	ldr	r2, [r7, #8]
 80182be:	69b9      	ldr	r1, [r7, #24]
 80182c0:	68f8      	ldr	r0, [r7, #12]
 80182c2:	f001 fba7 	bl	8019a14 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80182c6:	69b8      	ldr	r0, [r7, #24]
 80182c8:	f7f8 f8f0 	bl	80104ac <pbuf_free>
  p = NULL;
 80182cc:	2300      	movs	r3, #0
 80182ce:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80182d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80182d4:	4618      	mov	r0, r3
 80182d6:	3720      	adds	r7, #32
 80182d8:	46bd      	mov	sp, r7
 80182da:	bd80      	pop	{r7, pc}
 80182dc:	0801d440 	.word	0x0801d440
 80182e0:	0801d590 	.word	0x0801d590
 80182e4:	0801d4b8 	.word	0x0801d4b8
 80182e8:	0801d640 	.word	0x0801d640
 80182ec:	0801d674 	.word	0x0801d674

080182f0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80182f0:	b580      	push	{r7, lr}
 80182f2:	b088      	sub	sp, #32
 80182f4:	af04      	add	r7, sp, #16
 80182f6:	60f8      	str	r0, [r7, #12]
 80182f8:	60b9      	str	r1, [r7, #8]
 80182fa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80182fc:	68fb      	ldr	r3, [r7, #12]
 80182fe:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801830c:	2201      	movs	r2, #1
 801830e:	9203      	str	r2, [sp, #12]
 8018310:	68ba      	ldr	r2, [r7, #8]
 8018312:	9202      	str	r2, [sp, #8]
 8018314:	4a06      	ldr	r2, [pc, #24]	; (8018330 <etharp_request_dst+0x40>)
 8018316:	9201      	str	r2, [sp, #4]
 8018318:	9300      	str	r3, [sp, #0]
 801831a:	4603      	mov	r3, r0
 801831c:	687a      	ldr	r2, [r7, #4]
 801831e:	68f8      	ldr	r0, [r7, #12]
 8018320:	f7ff ff5a 	bl	80181d8 <etharp_raw>
 8018324:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018326:	4618      	mov	r0, r3
 8018328:	3710      	adds	r7, #16
 801832a:	46bd      	mov	sp, r7
 801832c:	bd80      	pop	{r7, pc}
 801832e:	bf00      	nop
 8018330:	0801e2c8 	.word	0x0801e2c8

08018334 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018334:	b580      	push	{r7, lr}
 8018336:	b082      	sub	sp, #8
 8018338:	af00      	add	r7, sp, #0
 801833a:	6078      	str	r0, [r7, #4]
 801833c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801833e:	4a05      	ldr	r2, [pc, #20]	; (8018354 <etharp_request+0x20>)
 8018340:	6839      	ldr	r1, [r7, #0]
 8018342:	6878      	ldr	r0, [r7, #4]
 8018344:	f7ff ffd4 	bl	80182f0 <etharp_request_dst>
 8018348:	4603      	mov	r3, r0
}
 801834a:	4618      	mov	r0, r3
 801834c:	3708      	adds	r7, #8
 801834e:	46bd      	mov	sp, r7
 8018350:	bd80      	pop	{r7, pc}
 8018352:	bf00      	nop
 8018354:	0801e2c0 	.word	0x0801e2c0

08018358 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018358:	b580      	push	{r7, lr}
 801835a:	b08e      	sub	sp, #56	; 0x38
 801835c:	af04      	add	r7, sp, #16
 801835e:	6078      	str	r0, [r7, #4]
 8018360:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8018362:	4b87      	ldr	r3, [pc, #540]	; (8018580 <icmp_input+0x228>)
 8018364:	689b      	ldr	r3, [r3, #8]
 8018366:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801836a:	781b      	ldrb	r3, [r3, #0]
 801836c:	f003 030f 	and.w	r3, r3, #15
 8018370:	b2db      	uxtb	r3, r3
 8018372:	009b      	lsls	r3, r3, #2
 8018374:	b2db      	uxtb	r3, r3
 8018376:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8018378:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801837a:	2b13      	cmp	r3, #19
 801837c:	f240 80e8 	bls.w	8018550 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	895b      	ldrh	r3, [r3, #10]
 8018384:	2b03      	cmp	r3, #3
 8018386:	f240 80e5 	bls.w	8018554 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	685b      	ldr	r3, [r3, #4]
 801838e:	781b      	ldrb	r3, [r3, #0]
 8018390:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018394:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018398:	2b00      	cmp	r3, #0
 801839a:	f000 80d2 	beq.w	8018542 <icmp_input+0x1ea>
 801839e:	2b08      	cmp	r3, #8
 80183a0:	f040 80d2 	bne.w	8018548 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80183a4:	4b77      	ldr	r3, [pc, #476]	; (8018584 <icmp_input+0x22c>)
 80183a6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80183a8:	4b75      	ldr	r3, [pc, #468]	; (8018580 <icmp_input+0x228>)
 80183aa:	695b      	ldr	r3, [r3, #20]
 80183ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80183b0:	2be0      	cmp	r3, #224	; 0xe0
 80183b2:	f000 80d6 	beq.w	8018562 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80183b6:	4b72      	ldr	r3, [pc, #456]	; (8018580 <icmp_input+0x228>)
 80183b8:	695b      	ldr	r3, [r3, #20]
 80183ba:	4a71      	ldr	r2, [pc, #452]	; (8018580 <icmp_input+0x228>)
 80183bc:	6812      	ldr	r2, [r2, #0]
 80183be:	4611      	mov	r1, r2
 80183c0:	4618      	mov	r0, r3
 80183c2:	f000 fc17 	bl	8018bf4 <ip4_addr_isbroadcast_u32>
 80183c6:	4603      	mov	r3, r0
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	f040 80cc 	bne.w	8018566 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	891b      	ldrh	r3, [r3, #8]
 80183d2:	2b07      	cmp	r3, #7
 80183d4:	f240 80c0 	bls.w	8018558 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80183d8:	6878      	ldr	r0, [r7, #4]
 80183da:	f7f6 fc3a 	bl	800ec52 <inet_chksum_pbuf>
 80183de:	4603      	mov	r3, r0
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d003      	beq.n	80183ec <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80183e4:	6878      	ldr	r0, [r7, #4]
 80183e6:	f7f8 f861 	bl	80104ac <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80183ea:	e0c5      	b.n	8018578 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80183ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80183ee:	330e      	adds	r3, #14
 80183f0:	4619      	mov	r1, r3
 80183f2:	6878      	ldr	r0, [r7, #4]
 80183f4:	f7f7 ffc4 	bl	8010380 <pbuf_add_header>
 80183f8:	4603      	mov	r3, r0
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d04b      	beq.n	8018496 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	891a      	ldrh	r2, [r3, #8]
 8018402:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018404:	4413      	add	r3, r2
 8018406:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	891b      	ldrh	r3, [r3, #8]
 801840c:	8b7a      	ldrh	r2, [r7, #26]
 801840e:	429a      	cmp	r2, r3
 8018410:	f0c0 80ab 	bcc.w	801856a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8018414:	8b7b      	ldrh	r3, [r7, #26]
 8018416:	f44f 7220 	mov.w	r2, #640	; 0x280
 801841a:	4619      	mov	r1, r3
 801841c:	200e      	movs	r0, #14
 801841e:	f7f7 fd5d 	bl	800fedc <pbuf_alloc>
 8018422:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8018424:	697b      	ldr	r3, [r7, #20]
 8018426:	2b00      	cmp	r3, #0
 8018428:	f000 80a1 	beq.w	801856e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801842c:	697b      	ldr	r3, [r7, #20]
 801842e:	895b      	ldrh	r3, [r3, #10]
 8018430:	461a      	mov	r2, r3
 8018432:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018434:	3308      	adds	r3, #8
 8018436:	429a      	cmp	r2, r3
 8018438:	d203      	bcs.n	8018442 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801843a:	6978      	ldr	r0, [r7, #20]
 801843c:	f7f8 f836 	bl	80104ac <pbuf_free>
          goto icmperr;
 8018440:	e096      	b.n	8018570 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8018442:	697b      	ldr	r3, [r7, #20]
 8018444:	685b      	ldr	r3, [r3, #4]
 8018446:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801844a:	4618      	mov	r0, r3
 801844c:	f001 ff2c 	bl	801a2a8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8018450:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018452:	4619      	mov	r1, r3
 8018454:	6978      	ldr	r0, [r7, #20]
 8018456:	f7f7 ffa3 	bl	80103a0 <pbuf_remove_header>
 801845a:	4603      	mov	r3, r0
 801845c:	2b00      	cmp	r3, #0
 801845e:	d009      	beq.n	8018474 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018460:	4b49      	ldr	r3, [pc, #292]	; (8018588 <icmp_input+0x230>)
 8018462:	22b6      	movs	r2, #182	; 0xb6
 8018464:	4949      	ldr	r1, [pc, #292]	; (801858c <icmp_input+0x234>)
 8018466:	484a      	ldr	r0, [pc, #296]	; (8018590 <icmp_input+0x238>)
 8018468:	f001 fcfe 	bl	8019e68 <iprintf>
          pbuf_free(r);
 801846c:	6978      	ldr	r0, [r7, #20]
 801846e:	f7f8 f81d 	bl	80104ac <pbuf_free>
          goto icmperr;
 8018472:	e07d      	b.n	8018570 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8018474:	6879      	ldr	r1, [r7, #4]
 8018476:	6978      	ldr	r0, [r7, #20]
 8018478:	f7f8 f93c 	bl	80106f4 <pbuf_copy>
 801847c:	4603      	mov	r3, r0
 801847e:	2b00      	cmp	r3, #0
 8018480:	d003      	beq.n	801848a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8018482:	6978      	ldr	r0, [r7, #20]
 8018484:	f7f8 f812 	bl	80104ac <pbuf_free>
          goto icmperr;
 8018488:	e072      	b.n	8018570 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801848a:	6878      	ldr	r0, [r7, #4]
 801848c:	f7f8 f80e 	bl	80104ac <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8018490:	697b      	ldr	r3, [r7, #20]
 8018492:	607b      	str	r3, [r7, #4]
 8018494:	e00f      	b.n	80184b6 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018496:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018498:	330e      	adds	r3, #14
 801849a:	4619      	mov	r1, r3
 801849c:	6878      	ldr	r0, [r7, #4]
 801849e:	f7f7 ff7f 	bl	80103a0 <pbuf_remove_header>
 80184a2:	4603      	mov	r3, r0
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d006      	beq.n	80184b6 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80184a8:	4b37      	ldr	r3, [pc, #220]	; (8018588 <icmp_input+0x230>)
 80184aa:	22c7      	movs	r2, #199	; 0xc7
 80184ac:	4939      	ldr	r1, [pc, #228]	; (8018594 <icmp_input+0x23c>)
 80184ae:	4838      	ldr	r0, [pc, #224]	; (8018590 <icmp_input+0x238>)
 80184b0:	f001 fcda 	bl	8019e68 <iprintf>
          goto icmperr;
 80184b4:	e05c      	b.n	8018570 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	685b      	ldr	r3, [r3, #4]
 80184ba:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80184bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80184be:	4619      	mov	r1, r3
 80184c0:	6878      	ldr	r0, [r7, #4]
 80184c2:	f7f7 ff5d 	bl	8010380 <pbuf_add_header>
 80184c6:	4603      	mov	r3, r0
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d13c      	bne.n	8018546 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	685b      	ldr	r3, [r3, #4]
 80184d0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80184d2:	69fb      	ldr	r3, [r7, #28]
 80184d4:	681a      	ldr	r2, [r3, #0]
 80184d6:	68fb      	ldr	r3, [r7, #12]
 80184d8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80184da:	4b29      	ldr	r3, [pc, #164]	; (8018580 <icmp_input+0x228>)
 80184dc:	691a      	ldr	r2, [r3, #16]
 80184de:	68fb      	ldr	r3, [r7, #12]
 80184e0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80184e2:	693b      	ldr	r3, [r7, #16]
 80184e4:	2200      	movs	r2, #0
 80184e6:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80184e8:	693b      	ldr	r3, [r7, #16]
 80184ea:	885b      	ldrh	r3, [r3, #2]
 80184ec:	b29b      	uxth	r3, r3
 80184ee:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80184f2:	4293      	cmp	r3, r2
 80184f4:	d907      	bls.n	8018506 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80184f6:	693b      	ldr	r3, [r7, #16]
 80184f8:	885b      	ldrh	r3, [r3, #2]
 80184fa:	b29b      	uxth	r3, r3
 80184fc:	3309      	adds	r3, #9
 80184fe:	b29a      	uxth	r2, r3
 8018500:	693b      	ldr	r3, [r7, #16]
 8018502:	805a      	strh	r2, [r3, #2]
 8018504:	e006      	b.n	8018514 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8018506:	693b      	ldr	r3, [r7, #16]
 8018508:	885b      	ldrh	r3, [r3, #2]
 801850a:	b29b      	uxth	r3, r3
 801850c:	3308      	adds	r3, #8
 801850e:	b29a      	uxth	r2, r3
 8018510:	693b      	ldr	r3, [r7, #16]
 8018512:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8018514:	68fb      	ldr	r3, [r7, #12]
 8018516:	22ff      	movs	r2, #255	; 0xff
 8018518:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801851a:	68fb      	ldr	r3, [r7, #12]
 801851c:	2200      	movs	r2, #0
 801851e:	729a      	strb	r2, [r3, #10]
 8018520:	2200      	movs	r2, #0
 8018522:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8018524:	683b      	ldr	r3, [r7, #0]
 8018526:	9302      	str	r3, [sp, #8]
 8018528:	2301      	movs	r3, #1
 801852a:	9301      	str	r3, [sp, #4]
 801852c:	2300      	movs	r3, #0
 801852e:	9300      	str	r3, [sp, #0]
 8018530:	23ff      	movs	r3, #255	; 0xff
 8018532:	2200      	movs	r2, #0
 8018534:	69f9      	ldr	r1, [r7, #28]
 8018536:	6878      	ldr	r0, [r7, #4]
 8018538:	f000 fa82 	bl	8018a40 <ip4_output_if>
 801853c:	4603      	mov	r3, r0
 801853e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8018540:	e001      	b.n	8018546 <icmp_input+0x1ee>
      break;
 8018542:	bf00      	nop
 8018544:	e000      	b.n	8018548 <icmp_input+0x1f0>
      break;
 8018546:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8018548:	6878      	ldr	r0, [r7, #4]
 801854a:	f7f7 ffaf 	bl	80104ac <pbuf_free>
  return;
 801854e:	e013      	b.n	8018578 <icmp_input+0x220>
    goto lenerr;
 8018550:	bf00      	nop
 8018552:	e002      	b.n	801855a <icmp_input+0x202>
    goto lenerr;
 8018554:	bf00      	nop
 8018556:	e000      	b.n	801855a <icmp_input+0x202>
        goto lenerr;
 8018558:	bf00      	nop
lenerr:
  pbuf_free(p);
 801855a:	6878      	ldr	r0, [r7, #4]
 801855c:	f7f7 ffa6 	bl	80104ac <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018560:	e00a      	b.n	8018578 <icmp_input+0x220>
        goto icmperr;
 8018562:	bf00      	nop
 8018564:	e004      	b.n	8018570 <icmp_input+0x218>
        goto icmperr;
 8018566:	bf00      	nop
 8018568:	e002      	b.n	8018570 <icmp_input+0x218>
          goto icmperr;
 801856a:	bf00      	nop
 801856c:	e000      	b.n	8018570 <icmp_input+0x218>
          goto icmperr;
 801856e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8018570:	6878      	ldr	r0, [r7, #4]
 8018572:	f7f7 ff9b 	bl	80104ac <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018576:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8018578:	3728      	adds	r7, #40	; 0x28
 801857a:	46bd      	mov	sp, r7
 801857c:	bd80      	pop	{r7, pc}
 801857e:	bf00      	nop
 8018580:	2400e568 	.word	0x2400e568
 8018584:	2400e57c 	.word	0x2400e57c
 8018588:	0801d6b8 	.word	0x0801d6b8
 801858c:	0801d6f0 	.word	0x0801d6f0
 8018590:	0801d728 	.word	0x0801d728
 8018594:	0801d750 	.word	0x0801d750

08018598 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8018598:	b580      	push	{r7, lr}
 801859a:	b082      	sub	sp, #8
 801859c:	af00      	add	r7, sp, #0
 801859e:	6078      	str	r0, [r7, #4]
 80185a0:	460b      	mov	r3, r1
 80185a2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80185a4:	78fb      	ldrb	r3, [r7, #3]
 80185a6:	461a      	mov	r2, r3
 80185a8:	2103      	movs	r1, #3
 80185aa:	6878      	ldr	r0, [r7, #4]
 80185ac:	f000 f814 	bl	80185d8 <icmp_send_response>
}
 80185b0:	bf00      	nop
 80185b2:	3708      	adds	r7, #8
 80185b4:	46bd      	mov	sp, r7
 80185b6:	bd80      	pop	{r7, pc}

080185b8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80185b8:	b580      	push	{r7, lr}
 80185ba:	b082      	sub	sp, #8
 80185bc:	af00      	add	r7, sp, #0
 80185be:	6078      	str	r0, [r7, #4]
 80185c0:	460b      	mov	r3, r1
 80185c2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80185c4:	78fb      	ldrb	r3, [r7, #3]
 80185c6:	461a      	mov	r2, r3
 80185c8:	210b      	movs	r1, #11
 80185ca:	6878      	ldr	r0, [r7, #4]
 80185cc:	f000 f804 	bl	80185d8 <icmp_send_response>
}
 80185d0:	bf00      	nop
 80185d2:	3708      	adds	r7, #8
 80185d4:	46bd      	mov	sp, r7
 80185d6:	bd80      	pop	{r7, pc}

080185d8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80185d8:	b580      	push	{r7, lr}
 80185da:	b08c      	sub	sp, #48	; 0x30
 80185dc:	af04      	add	r7, sp, #16
 80185de:	6078      	str	r0, [r7, #4]
 80185e0:	460b      	mov	r3, r1
 80185e2:	70fb      	strb	r3, [r7, #3]
 80185e4:	4613      	mov	r3, r2
 80185e6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80185e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80185ec:	2124      	movs	r1, #36	; 0x24
 80185ee:	2022      	movs	r0, #34	; 0x22
 80185f0:	f7f7 fc74 	bl	800fedc <pbuf_alloc>
 80185f4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80185f6:	69fb      	ldr	r3, [r7, #28]
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d056      	beq.n	80186aa <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80185fc:	69fb      	ldr	r3, [r7, #28]
 80185fe:	895b      	ldrh	r3, [r3, #10]
 8018600:	2b23      	cmp	r3, #35	; 0x23
 8018602:	d806      	bhi.n	8018612 <icmp_send_response+0x3a>
 8018604:	4b2b      	ldr	r3, [pc, #172]	; (80186b4 <icmp_send_response+0xdc>)
 8018606:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801860a:	492b      	ldr	r1, [pc, #172]	; (80186b8 <icmp_send_response+0xe0>)
 801860c:	482b      	ldr	r0, [pc, #172]	; (80186bc <icmp_send_response+0xe4>)
 801860e:	f001 fc2b 	bl	8019e68 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	685b      	ldr	r3, [r3, #4]
 8018616:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018618:	69fb      	ldr	r3, [r7, #28]
 801861a:	685b      	ldr	r3, [r3, #4]
 801861c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801861e:	697b      	ldr	r3, [r7, #20]
 8018620:	78fa      	ldrb	r2, [r7, #3]
 8018622:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8018624:	697b      	ldr	r3, [r7, #20]
 8018626:	78ba      	ldrb	r2, [r7, #2]
 8018628:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801862a:	697b      	ldr	r3, [r7, #20]
 801862c:	2200      	movs	r2, #0
 801862e:	711a      	strb	r2, [r3, #4]
 8018630:	2200      	movs	r2, #0
 8018632:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8018634:	697b      	ldr	r3, [r7, #20]
 8018636:	2200      	movs	r2, #0
 8018638:	719a      	strb	r2, [r3, #6]
 801863a:	2200      	movs	r2, #0
 801863c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801863e:	69fb      	ldr	r3, [r7, #28]
 8018640:	685b      	ldr	r3, [r3, #4]
 8018642:	f103 0008 	add.w	r0, r3, #8
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	685b      	ldr	r3, [r3, #4]
 801864a:	221c      	movs	r2, #28
 801864c:	4619      	mov	r1, r3
 801864e:	f001 fe2b 	bl	801a2a8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8018652:	69bb      	ldr	r3, [r7, #24]
 8018654:	68db      	ldr	r3, [r3, #12]
 8018656:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8018658:	f107 030c 	add.w	r3, r7, #12
 801865c:	4618      	mov	r0, r3
 801865e:	f000 f82f 	bl	80186c0 <ip4_route>
 8018662:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8018664:	693b      	ldr	r3, [r7, #16]
 8018666:	2b00      	cmp	r3, #0
 8018668:	d01b      	beq.n	80186a2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801866a:	697b      	ldr	r3, [r7, #20]
 801866c:	2200      	movs	r2, #0
 801866e:	709a      	strb	r2, [r3, #2]
 8018670:	2200      	movs	r2, #0
 8018672:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8018674:	69fb      	ldr	r3, [r7, #28]
 8018676:	895b      	ldrh	r3, [r3, #10]
 8018678:	4619      	mov	r1, r3
 801867a:	6978      	ldr	r0, [r7, #20]
 801867c:	f7f6 fad7 	bl	800ec2e <inet_chksum>
 8018680:	4603      	mov	r3, r0
 8018682:	461a      	mov	r2, r3
 8018684:	697b      	ldr	r3, [r7, #20]
 8018686:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8018688:	f107 020c 	add.w	r2, r7, #12
 801868c:	693b      	ldr	r3, [r7, #16]
 801868e:	9302      	str	r3, [sp, #8]
 8018690:	2301      	movs	r3, #1
 8018692:	9301      	str	r3, [sp, #4]
 8018694:	2300      	movs	r3, #0
 8018696:	9300      	str	r3, [sp, #0]
 8018698:	23ff      	movs	r3, #255	; 0xff
 801869a:	2100      	movs	r1, #0
 801869c:	69f8      	ldr	r0, [r7, #28]
 801869e:	f000 f9cf 	bl	8018a40 <ip4_output_if>
  }
  pbuf_free(q);
 80186a2:	69f8      	ldr	r0, [r7, #28]
 80186a4:	f7f7 ff02 	bl	80104ac <pbuf_free>
 80186a8:	e000      	b.n	80186ac <icmp_send_response+0xd4>
    return;
 80186aa:	bf00      	nop
}
 80186ac:	3720      	adds	r7, #32
 80186ae:	46bd      	mov	sp, r7
 80186b0:	bd80      	pop	{r7, pc}
 80186b2:	bf00      	nop
 80186b4:	0801d6b8 	.word	0x0801d6b8
 80186b8:	0801d784 	.word	0x0801d784
 80186bc:	0801d728 	.word	0x0801d728

080186c0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b084      	sub	sp, #16
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	6078      	str	r0, [r7, #4]
#if !LWIP_SINGLE_NETIF
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 80186c8:	f7f2 f9fc 	bl	800aac4 <sys_check_core_locking>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80186cc:	4b32      	ldr	r3, [pc, #200]	; (8018798 <ip4_route+0xd8>)
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	60fb      	str	r3, [r7, #12]
 80186d2:	e036      	b.n	8018742 <ip4_route+0x82>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80186da:	f003 0301 	and.w	r3, r3, #1
 80186de:	b2db      	uxtb	r3, r3
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d02b      	beq.n	801873c <ip4_route+0x7c>
 80186e4:	68fb      	ldr	r3, [r7, #12]
 80186e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80186ea:	089b      	lsrs	r3, r3, #2
 80186ec:	f003 0301 	and.w	r3, r3, #1
 80186f0:	b2db      	uxtb	r3, r3
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d022      	beq.n	801873c <ip4_route+0x7c>
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	3304      	adds	r3, #4
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d01d      	beq.n	801873c <ip4_route+0x7c>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	681a      	ldr	r2, [r3, #0]
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	3304      	adds	r3, #4
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	405a      	eors	r2, r3
 801870c:	68fb      	ldr	r3, [r7, #12]
 801870e:	3308      	adds	r3, #8
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	4013      	ands	r3, r2
 8018714:	2b00      	cmp	r3, #0
 8018716:	d101      	bne.n	801871c <ip4_route+0x5c>
        /* return netif on which to forward IP packet */
        return netif;
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	e038      	b.n	801878e <ip4_route+0xce>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018722:	f003 0302 	and.w	r3, r3, #2
 8018726:	2b00      	cmp	r3, #0
 8018728:	d108      	bne.n	801873c <ip4_route+0x7c>
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	681a      	ldr	r2, [r3, #0]
 801872e:	68fb      	ldr	r3, [r7, #12]
 8018730:	330c      	adds	r3, #12
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	429a      	cmp	r2, r3
 8018736:	d101      	bne.n	801873c <ip4_route+0x7c>
        /* return netif on which to forward IP packet */
        return netif;
 8018738:	68fb      	ldr	r3, [r7, #12]
 801873a:	e028      	b.n	801878e <ip4_route+0xce>
  NETIF_FOREACH(netif) {
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	681b      	ldr	r3, [r3, #0]
 8018740:	60fb      	str	r3, [r7, #12]
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	2b00      	cmp	r3, #0
 8018746:	d1c5      	bne.n	80186d4 <ip4_route+0x14>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018748:	4b14      	ldr	r3, [pc, #80]	; (801879c <ip4_route+0xdc>)
 801874a:	681b      	ldr	r3, [r3, #0]
 801874c:	2b00      	cmp	r3, #0
 801874e:	d01a      	beq.n	8018786 <ip4_route+0xc6>
 8018750:	4b12      	ldr	r3, [pc, #72]	; (801879c <ip4_route+0xdc>)
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018758:	f003 0301 	and.w	r3, r3, #1
 801875c:	2b00      	cmp	r3, #0
 801875e:	d012      	beq.n	8018786 <ip4_route+0xc6>
 8018760:	4b0e      	ldr	r3, [pc, #56]	; (801879c <ip4_route+0xdc>)
 8018762:	681b      	ldr	r3, [r3, #0]
 8018764:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018768:	f003 0304 	and.w	r3, r3, #4
 801876c:	2b00      	cmp	r3, #0
 801876e:	d00a      	beq.n	8018786 <ip4_route+0xc6>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018770:	4b0a      	ldr	r3, [pc, #40]	; (801879c <ip4_route+0xdc>)
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	3304      	adds	r3, #4
 8018776:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018778:	2b00      	cmp	r3, #0
 801877a:	d004      	beq.n	8018786 <ip4_route+0xc6>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	b2db      	uxtb	r3, r3
 8018782:	2b7f      	cmp	r3, #127	; 0x7f
 8018784:	d101      	bne.n	801878a <ip4_route+0xca>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8018786:	2300      	movs	r3, #0
 8018788:	e001      	b.n	801878e <ip4_route+0xce>
  }

  return netif_default;
 801878a:	4b04      	ldr	r3, [pc, #16]	; (801879c <ip4_route+0xdc>)
 801878c:	681b      	ldr	r3, [r3, #0]
}
 801878e:	4618      	mov	r0, r3
 8018790:	3710      	adds	r7, #16
 8018792:	46bd      	mov	sp, r7
 8018794:	bd80      	pop	{r7, pc}
 8018796:	bf00      	nop
 8018798:	2401501c 	.word	0x2401501c
 801879c:	24015020 	.word	0x24015020

080187a0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80187a0:	b580      	push	{r7, lr}
 80187a2:	b082      	sub	sp, #8
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80187ae:	f003 0301 	and.w	r3, r3, #1
 80187b2:	b2db      	uxtb	r3, r3
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d016      	beq.n	80187e6 <ip4_input_accept+0x46>
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	3304      	adds	r3, #4
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d011      	beq.n	80187e6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80187c2:	4b0b      	ldr	r3, [pc, #44]	; (80187f0 <ip4_input_accept+0x50>)
 80187c4:	695a      	ldr	r2, [r3, #20]
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	3304      	adds	r3, #4
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	429a      	cmp	r2, r3
 80187ce:	d008      	beq.n	80187e2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80187d0:	4b07      	ldr	r3, [pc, #28]	; (80187f0 <ip4_input_accept+0x50>)
 80187d2:	695b      	ldr	r3, [r3, #20]
 80187d4:	6879      	ldr	r1, [r7, #4]
 80187d6:	4618      	mov	r0, r3
 80187d8:	f000 fa0c 	bl	8018bf4 <ip4_addr_isbroadcast_u32>
 80187dc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d001      	beq.n	80187e6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80187e2:	2301      	movs	r3, #1
 80187e4:	e000      	b.n	80187e8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80187e6:	2300      	movs	r3, #0
}
 80187e8:	4618      	mov	r0, r3
 80187ea:	3708      	adds	r7, #8
 80187ec:	46bd      	mov	sp, r7
 80187ee:	bd80      	pop	{r7, pc}
 80187f0:	2400e568 	.word	0x2400e568

080187f4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80187f4:	b580      	push	{r7, lr}
 80187f6:	b086      	sub	sp, #24
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	6078      	str	r0, [r7, #4]
 80187fc:	6039      	str	r1, [r7, #0]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
#if LWIP_RAW
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();
 80187fe:	f7f2 f961 	bl	800aac4 <sys_check_core_locking>

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	685b      	ldr	r3, [r3, #4]
 8018806:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8018808:	697b      	ldr	r3, [r7, #20]
 801880a:	781b      	ldrb	r3, [r3, #0]
 801880c:	091b      	lsrs	r3, r3, #4
 801880e:	b2db      	uxtb	r3, r3
 8018810:	2b04      	cmp	r3, #4
 8018812:	d004      	beq.n	801881e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018814:	6878      	ldr	r0, [r7, #4]
 8018816:	f7f7 fe49 	bl	80104ac <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801881a:	2300      	movs	r3, #0
 801881c:	e107      	b.n	8018a2e <ip4_input+0x23a>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801881e:	697b      	ldr	r3, [r7, #20]
 8018820:	781b      	ldrb	r3, [r3, #0]
 8018822:	f003 030f 	and.w	r3, r3, #15
 8018826:	b2db      	uxtb	r3, r3
 8018828:	009b      	lsls	r3, r3, #2
 801882a:	b2db      	uxtb	r3, r3
 801882c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801882e:	697b      	ldr	r3, [r7, #20]
 8018830:	885b      	ldrh	r3, [r3, #2]
 8018832:	b29b      	uxth	r3, r3
 8018834:	4618      	mov	r0, r3
 8018836:	f7f6 f96f 	bl	800eb18 <lwip_htons>
 801883a:	4603      	mov	r3, r0
 801883c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	891b      	ldrh	r3, [r3, #8]
 8018842:	89ba      	ldrh	r2, [r7, #12]
 8018844:	429a      	cmp	r2, r3
 8018846:	d204      	bcs.n	8018852 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8018848:	89bb      	ldrh	r3, [r7, #12]
 801884a:	4619      	mov	r1, r3
 801884c:	6878      	ldr	r0, [r7, #4]
 801884e:	f7f7 fca7 	bl	80101a0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	895b      	ldrh	r3, [r3, #10]
 8018856:	89fa      	ldrh	r2, [r7, #14]
 8018858:	429a      	cmp	r2, r3
 801885a:	d807      	bhi.n	801886c <ip4_input+0x78>
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	891b      	ldrh	r3, [r3, #8]
 8018860:	89ba      	ldrh	r2, [r7, #12]
 8018862:	429a      	cmp	r2, r3
 8018864:	d802      	bhi.n	801886c <ip4_input+0x78>
 8018866:	89fb      	ldrh	r3, [r7, #14]
 8018868:	2b13      	cmp	r3, #19
 801886a:	d804      	bhi.n	8018876 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801886c:	6878      	ldr	r0, [r7, #4]
 801886e:	f7f7 fe1d 	bl	80104ac <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8018872:	2300      	movs	r3, #0
 8018874:	e0db      	b.n	8018a2e <ip4_input+0x23a>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018876:	697b      	ldr	r3, [r7, #20]
 8018878:	691b      	ldr	r3, [r3, #16]
 801887a:	4a6f      	ldr	r2, [pc, #444]	; (8018a38 <ip4_input+0x244>)
 801887c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801887e:	697b      	ldr	r3, [r7, #20]
 8018880:	68db      	ldr	r3, [r3, #12]
 8018882:	4a6d      	ldr	r2, [pc, #436]	; (8018a38 <ip4_input+0x244>)
 8018884:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018886:	4b6c      	ldr	r3, [pc, #432]	; (8018a38 <ip4_input+0x244>)
 8018888:	695b      	ldr	r3, [r3, #20]
 801888a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801888e:	2be0      	cmp	r3, #224	; 0xe0
 8018890:	d112      	bne.n	80188b8 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8018892:	683b      	ldr	r3, [r7, #0]
 8018894:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018898:	f003 0301 	and.w	r3, r3, #1
 801889c:	b2db      	uxtb	r3, r3
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d007      	beq.n	80188b2 <ip4_input+0xbe>
 80188a2:	683b      	ldr	r3, [r7, #0]
 80188a4:	3304      	adds	r3, #4
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d002      	beq.n	80188b2 <ip4_input+0xbe>
      netif = inp;
 80188ac:	683b      	ldr	r3, [r7, #0]
 80188ae:	613b      	str	r3, [r7, #16]
 80188b0:	e02a      	b.n	8018908 <ip4_input+0x114>
    } else {
      netif = NULL;
 80188b2:	2300      	movs	r3, #0
 80188b4:	613b      	str	r3, [r7, #16]
 80188b6:	e027      	b.n	8018908 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80188b8:	6838      	ldr	r0, [r7, #0]
 80188ba:	f7ff ff71 	bl	80187a0 <ip4_input_accept>
 80188be:	4603      	mov	r3, r0
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d002      	beq.n	80188ca <ip4_input+0xd6>
      netif = inp;
 80188c4:	683b      	ldr	r3, [r7, #0]
 80188c6:	613b      	str	r3, [r7, #16]
 80188c8:	e01e      	b.n	8018908 <ip4_input+0x114>
    } else {
      netif = NULL;
 80188ca:	2300      	movs	r3, #0
 80188cc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80188ce:	4b5a      	ldr	r3, [pc, #360]	; (8018a38 <ip4_input+0x244>)
 80188d0:	695b      	ldr	r3, [r3, #20]
 80188d2:	b2db      	uxtb	r3, r3
 80188d4:	2b7f      	cmp	r3, #127	; 0x7f
 80188d6:	d017      	beq.n	8018908 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80188d8:	4b58      	ldr	r3, [pc, #352]	; (8018a3c <ip4_input+0x248>)
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	613b      	str	r3, [r7, #16]
 80188de:	e00e      	b.n	80188fe <ip4_input+0x10a>
          if (netif == inp) {
 80188e0:	693a      	ldr	r2, [r7, #16]
 80188e2:	683b      	ldr	r3, [r7, #0]
 80188e4:	429a      	cmp	r2, r3
 80188e6:	d006      	beq.n	80188f6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80188e8:	6938      	ldr	r0, [r7, #16]
 80188ea:	f7ff ff59 	bl	80187a0 <ip4_input_accept>
 80188ee:	4603      	mov	r3, r0
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d108      	bne.n	8018906 <ip4_input+0x112>
 80188f4:	e000      	b.n	80188f8 <ip4_input+0x104>
            continue;
 80188f6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80188f8:	693b      	ldr	r3, [r7, #16]
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	613b      	str	r3, [r7, #16]
 80188fe:	693b      	ldr	r3, [r7, #16]
 8018900:	2b00      	cmp	r3, #0
 8018902:	d1ed      	bne.n	80188e0 <ip4_input+0xec>
 8018904:	e000      	b.n	8018908 <ip4_input+0x114>
            break;
 8018906:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018908:	4b4b      	ldr	r3, [pc, #300]	; (8018a38 <ip4_input+0x244>)
 801890a:	691b      	ldr	r3, [r3, #16]
 801890c:	6839      	ldr	r1, [r7, #0]
 801890e:	4618      	mov	r0, r3
 8018910:	f000 f970 	bl	8018bf4 <ip4_addr_isbroadcast_u32>
 8018914:	4603      	mov	r3, r0
 8018916:	2b00      	cmp	r3, #0
 8018918:	d105      	bne.n	8018926 <ip4_input+0x132>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801891a:	4b47      	ldr	r3, [pc, #284]	; (8018a38 <ip4_input+0x244>)
 801891c:	691b      	ldr	r3, [r3, #16]
 801891e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018922:	2be0      	cmp	r3, #224	; 0xe0
 8018924:	d104      	bne.n	8018930 <ip4_input+0x13c>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018926:	6878      	ldr	r0, [r7, #4]
 8018928:	f7f7 fdc0 	bl	80104ac <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801892c:	2300      	movs	r3, #0
 801892e:	e07e      	b.n	8018a2e <ip4_input+0x23a>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018930:	693b      	ldr	r3, [r7, #16]
 8018932:	2b00      	cmp	r3, #0
 8018934:	d104      	bne.n	8018940 <ip4_input+0x14c>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018936:	6878      	ldr	r0, [r7, #4]
 8018938:	f7f7 fdb8 	bl	80104ac <pbuf_free>
    return ERR_OK;
 801893c:	2300      	movs	r3, #0
 801893e:	e076      	b.n	8018a2e <ip4_input+0x23a>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018940:	697b      	ldr	r3, [r7, #20]
 8018942:	88db      	ldrh	r3, [r3, #6]
 8018944:	b29b      	uxth	r3, r3
 8018946:	461a      	mov	r2, r3
 8018948:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801894c:	4013      	ands	r3, r2
 801894e:	2b00      	cmp	r3, #0
 8018950:	d00b      	beq.n	801896a <ip4_input+0x176>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8018952:	6878      	ldr	r0, [r7, #4]
 8018954:	f000 fc94 	bl	8019280 <ip4_reass>
 8018958:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	2b00      	cmp	r3, #0
 801895e:	d101      	bne.n	8018964 <ip4_input+0x170>
      return ERR_OK;
 8018960:	2300      	movs	r3, #0
 8018962:	e064      	b.n	8018a2e <ip4_input+0x23a>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	685b      	ldr	r3, [r3, #4]
 8018968:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801896a:	4a33      	ldr	r2, [pc, #204]	; (8018a38 <ip4_input+0x244>)
 801896c:	693b      	ldr	r3, [r7, #16]
 801896e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8018970:	4a31      	ldr	r2, [pc, #196]	; (8018a38 <ip4_input+0x244>)
 8018972:	683b      	ldr	r3, [r7, #0]
 8018974:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018976:	4a30      	ldr	r2, [pc, #192]	; (8018a38 <ip4_input+0x244>)
 8018978:	697b      	ldr	r3, [r7, #20]
 801897a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801897c:	697b      	ldr	r3, [r7, #20]
 801897e:	781b      	ldrb	r3, [r3, #0]
 8018980:	f003 030f 	and.w	r3, r3, #15
 8018984:	b2db      	uxtb	r3, r3
 8018986:	009b      	lsls	r3, r3, #2
 8018988:	b2db      	uxtb	r3, r3
 801898a:	b29a      	uxth	r2, r3
 801898c:	4b2a      	ldr	r3, [pc, #168]	; (8018a38 <ip4_input+0x244>)
 801898e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8018990:	89fb      	ldrh	r3, [r7, #14]
 8018992:	4619      	mov	r1, r3
 8018994:	6878      	ldr	r0, [r7, #4]
 8018996:	f7f7 fd03 	bl	80103a0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801899a:	697b      	ldr	r3, [r7, #20]
 801899c:	7a5b      	ldrb	r3, [r3, #9]
 801899e:	2b11      	cmp	r3, #17
 80189a0:	d006      	beq.n	80189b0 <ip4_input+0x1bc>
 80189a2:	2b11      	cmp	r3, #17
 80189a4:	dc13      	bgt.n	80189ce <ip4_input+0x1da>
 80189a6:	2b01      	cmp	r3, #1
 80189a8:	d00c      	beq.n	80189c4 <ip4_input+0x1d0>
 80189aa:	2b06      	cmp	r3, #6
 80189ac:	d005      	beq.n	80189ba <ip4_input+0x1c6>
 80189ae:	e00e      	b.n	80189ce <ip4_input+0x1da>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80189b0:	6839      	ldr	r1, [r7, #0]
 80189b2:	6878      	ldr	r0, [r7, #4]
 80189b4:	f7fe fc3a 	bl	801722c <udp_input>
        break;
 80189b8:	e026      	b.n	8018a08 <ip4_input+0x214>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80189ba:	6839      	ldr	r1, [r7, #0]
 80189bc:	6878      	ldr	r0, [r7, #4]
 80189be:	f7fa f81d 	bl	80129fc <tcp_input>
        break;
 80189c2:	e021      	b.n	8018a08 <ip4_input+0x214>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80189c4:	6839      	ldr	r1, [r7, #0]
 80189c6:	6878      	ldr	r0, [r7, #4]
 80189c8:	f7ff fcc6 	bl	8018358 <icmp_input>
        break;
 80189cc:	e01c      	b.n	8018a08 <ip4_input+0x214>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80189ce:	4b1a      	ldr	r3, [pc, #104]	; (8018a38 <ip4_input+0x244>)
 80189d0:	695b      	ldr	r3, [r3, #20]
 80189d2:	6939      	ldr	r1, [r7, #16]
 80189d4:	4618      	mov	r0, r3
 80189d6:	f000 f90d 	bl	8018bf4 <ip4_addr_isbroadcast_u32>
 80189da:	4603      	mov	r3, r0
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d10f      	bne.n	8018a00 <ip4_input+0x20c>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80189e0:	4b15      	ldr	r3, [pc, #84]	; (8018a38 <ip4_input+0x244>)
 80189e2:	695b      	ldr	r3, [r3, #20]
 80189e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80189e8:	2be0      	cmp	r3, #224	; 0xe0
 80189ea:	d009      	beq.n	8018a00 <ip4_input+0x20c>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80189ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80189f0:	4619      	mov	r1, r3
 80189f2:	6878      	ldr	r0, [r7, #4]
 80189f4:	f7f7 fd47 	bl	8010486 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80189f8:	2102      	movs	r1, #2
 80189fa:	6878      	ldr	r0, [r7, #4]
 80189fc:	f7ff fdcc 	bl	8018598 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8018a00:	6878      	ldr	r0, [r7, #4]
 8018a02:	f7f7 fd53 	bl	80104ac <pbuf_free>
        break;
 8018a06:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018a08:	4b0b      	ldr	r3, [pc, #44]	; (8018a38 <ip4_input+0x244>)
 8018a0a:	2200      	movs	r2, #0
 8018a0c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018a0e:	4b0a      	ldr	r3, [pc, #40]	; (8018a38 <ip4_input+0x244>)
 8018a10:	2200      	movs	r2, #0
 8018a12:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018a14:	4b08      	ldr	r3, [pc, #32]	; (8018a38 <ip4_input+0x244>)
 8018a16:	2200      	movs	r2, #0
 8018a18:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018a1a:	4b07      	ldr	r3, [pc, #28]	; (8018a38 <ip4_input+0x244>)
 8018a1c:	2200      	movs	r2, #0
 8018a1e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018a20:	4b05      	ldr	r3, [pc, #20]	; (8018a38 <ip4_input+0x244>)
 8018a22:	2200      	movs	r2, #0
 8018a24:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018a26:	4b04      	ldr	r3, [pc, #16]	; (8018a38 <ip4_input+0x244>)
 8018a28:	2200      	movs	r2, #0
 8018a2a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018a2c:	2300      	movs	r3, #0
}
 8018a2e:	4618      	mov	r0, r3
 8018a30:	3718      	adds	r7, #24
 8018a32:	46bd      	mov	sp, r7
 8018a34:	bd80      	pop	{r7, pc}
 8018a36:	bf00      	nop
 8018a38:	2400e568 	.word	0x2400e568
 8018a3c:	2401501c 	.word	0x2401501c

08018a40 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8018a40:	b580      	push	{r7, lr}
 8018a42:	b08a      	sub	sp, #40	; 0x28
 8018a44:	af04      	add	r7, sp, #16
 8018a46:	60f8      	str	r0, [r7, #12]
 8018a48:	60b9      	str	r1, [r7, #8]
 8018a4a:	607a      	str	r2, [r7, #4]
 8018a4c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018a4e:	68bb      	ldr	r3, [r7, #8]
 8018a50:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	d009      	beq.n	8018a6c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018a58:	68bb      	ldr	r3, [r7, #8]
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d003      	beq.n	8018a66 <ip4_output_if+0x26>
 8018a5e:	68bb      	ldr	r3, [r7, #8]
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d102      	bne.n	8018a6c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8018a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a68:	3304      	adds	r3, #4
 8018a6a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018a6c:	78fa      	ldrb	r2, [r7, #3]
 8018a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a70:	9302      	str	r3, [sp, #8]
 8018a72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018a76:	9301      	str	r3, [sp, #4]
 8018a78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018a7c:	9300      	str	r3, [sp, #0]
 8018a7e:	4613      	mov	r3, r2
 8018a80:	687a      	ldr	r2, [r7, #4]
 8018a82:	6979      	ldr	r1, [r7, #20]
 8018a84:	68f8      	ldr	r0, [r7, #12]
 8018a86:	f000 f805 	bl	8018a94 <ip4_output_if_src>
 8018a8a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018a8c:	4618      	mov	r0, r3
 8018a8e:	3718      	adds	r7, #24
 8018a90:	46bd      	mov	sp, r7
 8018a92:	bd80      	pop	{r7, pc}

08018a94 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b088      	sub	sp, #32
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	60f8      	str	r0, [r7, #12]
 8018a9c:	60b9      	str	r1, [r7, #8]
 8018a9e:	607a      	str	r2, [r7, #4]
 8018aa0:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
 8018aa2:	f7f2 f80f 	bl	800aac4 <sys_check_core_locking>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	7b9b      	ldrb	r3, [r3, #14]
 8018aaa:	2b01      	cmp	r3, #1
 8018aac:	d006      	beq.n	8018abc <ip4_output_if_src+0x28>
 8018aae:	4b4b      	ldr	r3, [pc, #300]	; (8018bdc <ip4_output_if_src+0x148>)
 8018ab0:	f44f 7255 	mov.w	r2, #852	; 0x354
 8018ab4:	494a      	ldr	r1, [pc, #296]	; (8018be0 <ip4_output_if_src+0x14c>)
 8018ab6:	484b      	ldr	r0, [pc, #300]	; (8018be4 <ip4_output_if_src+0x150>)
 8018ab8:	f001 f9d6 	bl	8019e68 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d060      	beq.n	8018b84 <ip4_output_if_src+0xf0>
    u16_t ip_hlen = IP_HLEN;
 8018ac2:	2314      	movs	r3, #20
 8018ac4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8018ac6:	2114      	movs	r1, #20
 8018ac8:	68f8      	ldr	r0, [r7, #12]
 8018aca:	f7f7 fc59 	bl	8010380 <pbuf_add_header>
 8018ace:	4603      	mov	r3, r0
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d002      	beq.n	8018ada <ip4_output_if_src+0x46>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018ad4:	f06f 0301 	mvn.w	r3, #1
 8018ad8:	e07c      	b.n	8018bd4 <ip4_output_if_src+0x140>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018ada:	68fb      	ldr	r3, [r7, #12]
 8018adc:	685b      	ldr	r3, [r3, #4]
 8018ade:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018ae0:	68fb      	ldr	r3, [r7, #12]
 8018ae2:	895b      	ldrh	r3, [r3, #10]
 8018ae4:	2b13      	cmp	r3, #19
 8018ae6:	d806      	bhi.n	8018af6 <ip4_output_if_src+0x62>
 8018ae8:	4b3c      	ldr	r3, [pc, #240]	; (8018bdc <ip4_output_if_src+0x148>)
 8018aea:	f44f 7262 	mov.w	r2, #904	; 0x388
 8018aee:	493e      	ldr	r1, [pc, #248]	; (8018be8 <ip4_output_if_src+0x154>)
 8018af0:	483c      	ldr	r0, [pc, #240]	; (8018be4 <ip4_output_if_src+0x150>)
 8018af2:	f001 f9b9 	bl	8019e68 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8018af6:	69fb      	ldr	r3, [r7, #28]
 8018af8:	78fa      	ldrb	r2, [r7, #3]
 8018afa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018afc:	69fb      	ldr	r3, [r7, #28]
 8018afe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018b02:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	681a      	ldr	r2, [r3, #0]
 8018b08:	69fb      	ldr	r3, [r7, #28]
 8018b0a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018b0c:	8b7b      	ldrh	r3, [r7, #26]
 8018b0e:	089b      	lsrs	r3, r3, #2
 8018b10:	b29b      	uxth	r3, r3
 8018b12:	b2db      	uxtb	r3, r3
 8018b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b18:	b2da      	uxtb	r2, r3
 8018b1a:	69fb      	ldr	r3, [r7, #28]
 8018b1c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018b1e:	69fb      	ldr	r3, [r7, #28]
 8018b20:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018b24:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	891b      	ldrh	r3, [r3, #8]
 8018b2a:	4618      	mov	r0, r3
 8018b2c:	f7f5 fff4 	bl	800eb18 <lwip_htons>
 8018b30:	4603      	mov	r3, r0
 8018b32:	461a      	mov	r2, r3
 8018b34:	69fb      	ldr	r3, [r7, #28]
 8018b36:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018b38:	69fb      	ldr	r3, [r7, #28]
 8018b3a:	2200      	movs	r2, #0
 8018b3c:	719a      	strb	r2, [r3, #6]
 8018b3e:	2200      	movs	r2, #0
 8018b40:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018b42:	4b2a      	ldr	r3, [pc, #168]	; (8018bec <ip4_output_if_src+0x158>)
 8018b44:	881b      	ldrh	r3, [r3, #0]
 8018b46:	4618      	mov	r0, r3
 8018b48:	f7f5 ffe6 	bl	800eb18 <lwip_htons>
 8018b4c:	4603      	mov	r3, r0
 8018b4e:	461a      	mov	r2, r3
 8018b50:	69fb      	ldr	r3, [r7, #28]
 8018b52:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018b54:	4b25      	ldr	r3, [pc, #148]	; (8018bec <ip4_output_if_src+0x158>)
 8018b56:	881b      	ldrh	r3, [r3, #0]
 8018b58:	3301      	adds	r3, #1
 8018b5a:	b29a      	uxth	r2, r3
 8018b5c:	4b23      	ldr	r3, [pc, #140]	; (8018bec <ip4_output_if_src+0x158>)
 8018b5e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018b60:	68bb      	ldr	r3, [r7, #8]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d104      	bne.n	8018b70 <ip4_output_if_src+0xdc>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8018b66:	4b22      	ldr	r3, [pc, #136]	; (8018bf0 <ip4_output_if_src+0x15c>)
 8018b68:	681a      	ldr	r2, [r3, #0]
 8018b6a:	69fb      	ldr	r3, [r7, #28]
 8018b6c:	60da      	str	r2, [r3, #12]
 8018b6e:	e003      	b.n	8018b78 <ip4_output_if_src+0xe4>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018b70:	68bb      	ldr	r3, [r7, #8]
 8018b72:	681a      	ldr	r2, [r3, #0]
 8018b74:	69fb      	ldr	r3, [r7, #28]
 8018b76:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018b78:	69fb      	ldr	r3, [r7, #28]
 8018b7a:	2200      	movs	r2, #0
 8018b7c:	729a      	strb	r2, [r3, #10]
 8018b7e:	2200      	movs	r2, #0
 8018b80:	72da      	strb	r2, [r3, #11]
 8018b82:	e00f      	b.n	8018ba4 <ip4_output_if_src+0x110>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	895b      	ldrh	r3, [r3, #10]
 8018b88:	2b13      	cmp	r3, #19
 8018b8a:	d802      	bhi.n	8018b92 <ip4_output_if_src+0xfe>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018b8c:	f06f 0301 	mvn.w	r3, #1
 8018b90:	e020      	b.n	8018bd4 <ip4_output_if_src+0x140>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	685b      	ldr	r3, [r3, #4]
 8018b96:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018b98:	69fb      	ldr	r3, [r7, #28]
 8018b9a:	691b      	ldr	r3, [r3, #16]
 8018b9c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018b9e:	f107 0314 	add.w	r3, r7, #20
 8018ba2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8018ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ba6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d00c      	beq.n	8018bc6 <ip4_output_if_src+0x132>
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	891a      	ldrh	r2, [r3, #8]
 8018bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bb2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018bb4:	429a      	cmp	r2, r3
 8018bb6:	d906      	bls.n	8018bc6 <ip4_output_if_src+0x132>
    return ip4_frag(p, netif, dest);
 8018bb8:	687a      	ldr	r2, [r7, #4]
 8018bba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018bbc:	68f8      	ldr	r0, [r7, #12]
 8018bbe:	f000 fd53 	bl	8019668 <ip4_frag>
 8018bc2:	4603      	mov	r3, r0
 8018bc4:	e006      	b.n	8018bd4 <ip4_output_if_src+0x140>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8018bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bc8:	695b      	ldr	r3, [r3, #20]
 8018bca:	687a      	ldr	r2, [r7, #4]
 8018bcc:	68f9      	ldr	r1, [r7, #12]
 8018bce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018bd0:	4798      	blx	r3
 8018bd2:	4603      	mov	r3, r0
}
 8018bd4:	4618      	mov	r0, r3
 8018bd6:	3720      	adds	r7, #32
 8018bd8:	46bd      	mov	sp, r7
 8018bda:	bd80      	pop	{r7, pc}
 8018bdc:	0801d7b0 	.word	0x0801d7b0
 8018be0:	0801d7e4 	.word	0x0801d7e4
 8018be4:	0801d7f0 	.word	0x0801d7f0
 8018be8:	0801d818 	.word	0x0801d818
 8018bec:	2401517a 	.word	0x2401517a
 8018bf0:	0801e2bc 	.word	0x0801e2bc

08018bf4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018bf4:	b480      	push	{r7}
 8018bf6:	b085      	sub	sp, #20
 8018bf8:	af00      	add	r7, sp, #0
 8018bfa:	6078      	str	r0, [r7, #4]
 8018bfc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c08:	d002      	beq.n	8018c10 <ip4_addr_isbroadcast_u32+0x1c>
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d101      	bne.n	8018c14 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018c10:	2301      	movs	r3, #1
 8018c12:	e02a      	b.n	8018c6a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018c14:	683b      	ldr	r3, [r7, #0]
 8018c16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018c1a:	f003 0302 	and.w	r3, r3, #2
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d101      	bne.n	8018c26 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8018c22:	2300      	movs	r3, #0
 8018c24:	e021      	b.n	8018c6a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8018c26:	683b      	ldr	r3, [r7, #0]
 8018c28:	3304      	adds	r3, #4
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	687a      	ldr	r2, [r7, #4]
 8018c2e:	429a      	cmp	r2, r3
 8018c30:	d101      	bne.n	8018c36 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8018c32:	2300      	movs	r3, #0
 8018c34:	e019      	b.n	8018c6a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8018c36:	68fa      	ldr	r2, [r7, #12]
 8018c38:	683b      	ldr	r3, [r7, #0]
 8018c3a:	3304      	adds	r3, #4
 8018c3c:	681b      	ldr	r3, [r3, #0]
 8018c3e:	405a      	eors	r2, r3
 8018c40:	683b      	ldr	r3, [r7, #0]
 8018c42:	3308      	adds	r3, #8
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	4013      	ands	r3, r2
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d10d      	bne.n	8018c68 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018c4c:	683b      	ldr	r3, [r7, #0]
 8018c4e:	3308      	adds	r3, #8
 8018c50:	681b      	ldr	r3, [r3, #0]
 8018c52:	43da      	mvns	r2, r3
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018c58:	683b      	ldr	r3, [r7, #0]
 8018c5a:	3308      	adds	r3, #8
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018c60:	429a      	cmp	r2, r3
 8018c62:	d101      	bne.n	8018c68 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8018c64:	2301      	movs	r3, #1
 8018c66:	e000      	b.n	8018c6a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018c68:	2300      	movs	r3, #0
  }
}
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	3714      	adds	r7, #20
 8018c6e:	46bd      	mov	sp, r7
 8018c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c74:	4770      	bx	lr
	...

08018c78 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018c78:	b580      	push	{r7, lr}
 8018c7a:	b084      	sub	sp, #16
 8018c7c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018c7e:	2300      	movs	r3, #0
 8018c80:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8018c82:	4b12      	ldr	r3, [pc, #72]	; (8018ccc <ip_reass_tmr+0x54>)
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018c88:	e018      	b.n	8018cbc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018c8a:	68fb      	ldr	r3, [r7, #12]
 8018c8c:	7fdb      	ldrb	r3, [r3, #31]
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d00b      	beq.n	8018caa <ip_reass_tmr+0x32>
      r->timer--;
 8018c92:	68fb      	ldr	r3, [r7, #12]
 8018c94:	7fdb      	ldrb	r3, [r3, #31]
 8018c96:	3b01      	subs	r3, #1
 8018c98:	b2da      	uxtb	r2, r3
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018c9e:	68fb      	ldr	r3, [r7, #12]
 8018ca0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	60fb      	str	r3, [r7, #12]
 8018ca8:	e008      	b.n	8018cbc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018caa:	68fb      	ldr	r3, [r7, #12]
 8018cac:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018cae:	68fb      	ldr	r3, [r7, #12]
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018cb4:	68b9      	ldr	r1, [r7, #8]
 8018cb6:	6878      	ldr	r0, [r7, #4]
 8018cb8:	f000 f80a 	bl	8018cd0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018cbc:	68fb      	ldr	r3, [r7, #12]
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d1e3      	bne.n	8018c8a <ip_reass_tmr+0x12>
    }
  }
}
 8018cc2:	bf00      	nop
 8018cc4:	bf00      	nop
 8018cc6:	3710      	adds	r7, #16
 8018cc8:	46bd      	mov	sp, r7
 8018cca:	bd80      	pop	{r7, pc}
 8018ccc:	2401517c 	.word	0x2401517c

08018cd0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018cd0:	b580      	push	{r7, lr}
 8018cd2:	b088      	sub	sp, #32
 8018cd4:	af00      	add	r7, sp, #0
 8018cd6:	6078      	str	r0, [r7, #4]
 8018cd8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018cda:	2300      	movs	r3, #0
 8018cdc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018cde:	683a      	ldr	r2, [r7, #0]
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	429a      	cmp	r2, r3
 8018ce4:	d105      	bne.n	8018cf2 <ip_reass_free_complete_datagram+0x22>
 8018ce6:	4b45      	ldr	r3, [pc, #276]	; (8018dfc <ip_reass_free_complete_datagram+0x12c>)
 8018ce8:	22ab      	movs	r2, #171	; 0xab
 8018cea:	4945      	ldr	r1, [pc, #276]	; (8018e00 <ip_reass_free_complete_datagram+0x130>)
 8018cec:	4845      	ldr	r0, [pc, #276]	; (8018e04 <ip_reass_free_complete_datagram+0x134>)
 8018cee:	f001 f8bb 	bl	8019e68 <iprintf>
  if (prev != NULL) {
 8018cf2:	683b      	ldr	r3, [r7, #0]
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d00a      	beq.n	8018d0e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018cf8:	683b      	ldr	r3, [r7, #0]
 8018cfa:	681b      	ldr	r3, [r3, #0]
 8018cfc:	687a      	ldr	r2, [r7, #4]
 8018cfe:	429a      	cmp	r2, r3
 8018d00:	d005      	beq.n	8018d0e <ip_reass_free_complete_datagram+0x3e>
 8018d02:	4b3e      	ldr	r3, [pc, #248]	; (8018dfc <ip_reass_free_complete_datagram+0x12c>)
 8018d04:	22ad      	movs	r2, #173	; 0xad
 8018d06:	4940      	ldr	r1, [pc, #256]	; (8018e08 <ip_reass_free_complete_datagram+0x138>)
 8018d08:	483e      	ldr	r0, [pc, #248]	; (8018e04 <ip_reass_free_complete_datagram+0x134>)
 8018d0a:	f001 f8ad 	bl	8019e68 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	685b      	ldr	r3, [r3, #4]
 8018d12:	685b      	ldr	r3, [r3, #4]
 8018d14:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018d16:	697b      	ldr	r3, [r7, #20]
 8018d18:	889b      	ldrh	r3, [r3, #4]
 8018d1a:	b29b      	uxth	r3, r3
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	d12a      	bne.n	8018d76 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	685b      	ldr	r3, [r3, #4]
 8018d24:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018d26:	697b      	ldr	r3, [r7, #20]
 8018d28:	681a      	ldr	r2, [r3, #0]
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018d2e:	69bb      	ldr	r3, [r7, #24]
 8018d30:	6858      	ldr	r0, [r3, #4]
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	3308      	adds	r3, #8
 8018d36:	2214      	movs	r2, #20
 8018d38:	4619      	mov	r1, r3
 8018d3a:	f001 fab5 	bl	801a2a8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018d3e:	2101      	movs	r1, #1
 8018d40:	69b8      	ldr	r0, [r7, #24]
 8018d42:	f7ff fc39 	bl	80185b8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018d46:	69b8      	ldr	r0, [r7, #24]
 8018d48:	f7f7 fc3e 	bl	80105c8 <pbuf_clen>
 8018d4c:	4603      	mov	r3, r0
 8018d4e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018d50:	8bfa      	ldrh	r2, [r7, #30]
 8018d52:	8a7b      	ldrh	r3, [r7, #18]
 8018d54:	4413      	add	r3, r2
 8018d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018d5a:	db05      	blt.n	8018d68 <ip_reass_free_complete_datagram+0x98>
 8018d5c:	4b27      	ldr	r3, [pc, #156]	; (8018dfc <ip_reass_free_complete_datagram+0x12c>)
 8018d5e:	22bc      	movs	r2, #188	; 0xbc
 8018d60:	492a      	ldr	r1, [pc, #168]	; (8018e0c <ip_reass_free_complete_datagram+0x13c>)
 8018d62:	4828      	ldr	r0, [pc, #160]	; (8018e04 <ip_reass_free_complete_datagram+0x134>)
 8018d64:	f001 f880 	bl	8019e68 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018d68:	8bfa      	ldrh	r2, [r7, #30]
 8018d6a:	8a7b      	ldrh	r3, [r7, #18]
 8018d6c:	4413      	add	r3, r2
 8018d6e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018d70:	69b8      	ldr	r0, [r7, #24]
 8018d72:	f7f7 fb9b 	bl	80104ac <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	685b      	ldr	r3, [r3, #4]
 8018d7a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018d7c:	e01f      	b.n	8018dbe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018d7e:	69bb      	ldr	r3, [r7, #24]
 8018d80:	685b      	ldr	r3, [r3, #4]
 8018d82:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018d84:	69bb      	ldr	r3, [r7, #24]
 8018d86:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018d88:	697b      	ldr	r3, [r7, #20]
 8018d8a:	681b      	ldr	r3, [r3, #0]
 8018d8c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018d8e:	68f8      	ldr	r0, [r7, #12]
 8018d90:	f7f7 fc1a 	bl	80105c8 <pbuf_clen>
 8018d94:	4603      	mov	r3, r0
 8018d96:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018d98:	8bfa      	ldrh	r2, [r7, #30]
 8018d9a:	8a7b      	ldrh	r3, [r7, #18]
 8018d9c:	4413      	add	r3, r2
 8018d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018da2:	db05      	blt.n	8018db0 <ip_reass_free_complete_datagram+0xe0>
 8018da4:	4b15      	ldr	r3, [pc, #84]	; (8018dfc <ip_reass_free_complete_datagram+0x12c>)
 8018da6:	22cc      	movs	r2, #204	; 0xcc
 8018da8:	4918      	ldr	r1, [pc, #96]	; (8018e0c <ip_reass_free_complete_datagram+0x13c>)
 8018daa:	4816      	ldr	r0, [pc, #88]	; (8018e04 <ip_reass_free_complete_datagram+0x134>)
 8018dac:	f001 f85c 	bl	8019e68 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018db0:	8bfa      	ldrh	r2, [r7, #30]
 8018db2:	8a7b      	ldrh	r3, [r7, #18]
 8018db4:	4413      	add	r3, r2
 8018db6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018db8:	68f8      	ldr	r0, [r7, #12]
 8018dba:	f7f7 fb77 	bl	80104ac <pbuf_free>
  while (p != NULL) {
 8018dbe:	69bb      	ldr	r3, [r7, #24]
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d1dc      	bne.n	8018d7e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018dc4:	6839      	ldr	r1, [r7, #0]
 8018dc6:	6878      	ldr	r0, [r7, #4]
 8018dc8:	f000 f8c2 	bl	8018f50 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018dcc:	4b10      	ldr	r3, [pc, #64]	; (8018e10 <ip_reass_free_complete_datagram+0x140>)
 8018dce:	881b      	ldrh	r3, [r3, #0]
 8018dd0:	8bfa      	ldrh	r2, [r7, #30]
 8018dd2:	429a      	cmp	r2, r3
 8018dd4:	d905      	bls.n	8018de2 <ip_reass_free_complete_datagram+0x112>
 8018dd6:	4b09      	ldr	r3, [pc, #36]	; (8018dfc <ip_reass_free_complete_datagram+0x12c>)
 8018dd8:	22d2      	movs	r2, #210	; 0xd2
 8018dda:	490e      	ldr	r1, [pc, #56]	; (8018e14 <ip_reass_free_complete_datagram+0x144>)
 8018ddc:	4809      	ldr	r0, [pc, #36]	; (8018e04 <ip_reass_free_complete_datagram+0x134>)
 8018dde:	f001 f843 	bl	8019e68 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018de2:	4b0b      	ldr	r3, [pc, #44]	; (8018e10 <ip_reass_free_complete_datagram+0x140>)
 8018de4:	881a      	ldrh	r2, [r3, #0]
 8018de6:	8bfb      	ldrh	r3, [r7, #30]
 8018de8:	1ad3      	subs	r3, r2, r3
 8018dea:	b29a      	uxth	r2, r3
 8018dec:	4b08      	ldr	r3, [pc, #32]	; (8018e10 <ip_reass_free_complete_datagram+0x140>)
 8018dee:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018df0:	8bfb      	ldrh	r3, [r7, #30]
}
 8018df2:	4618      	mov	r0, r3
 8018df4:	3720      	adds	r7, #32
 8018df6:	46bd      	mov	sp, r7
 8018df8:	bd80      	pop	{r7, pc}
 8018dfa:	bf00      	nop
 8018dfc:	0801d848 	.word	0x0801d848
 8018e00:	0801d884 	.word	0x0801d884
 8018e04:	0801d890 	.word	0x0801d890
 8018e08:	0801d8b8 	.word	0x0801d8b8
 8018e0c:	0801d8cc 	.word	0x0801d8cc
 8018e10:	24015180 	.word	0x24015180
 8018e14:	0801d8ec 	.word	0x0801d8ec

08018e18 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018e18:	b580      	push	{r7, lr}
 8018e1a:	b08a      	sub	sp, #40	; 0x28
 8018e1c:	af00      	add	r7, sp, #0
 8018e1e:	6078      	str	r0, [r7, #4]
 8018e20:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018e22:	2300      	movs	r3, #0
 8018e24:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018e26:	2300      	movs	r3, #0
 8018e28:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018e2a:	2300      	movs	r3, #0
 8018e2c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018e2e:	2300      	movs	r3, #0
 8018e30:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018e32:	2300      	movs	r3, #0
 8018e34:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018e36:	4b28      	ldr	r3, [pc, #160]	; (8018ed8 <ip_reass_remove_oldest_datagram+0xc0>)
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018e3c:	e030      	b.n	8018ea0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e40:	695a      	ldr	r2, [r3, #20]
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	68db      	ldr	r3, [r3, #12]
 8018e46:	429a      	cmp	r2, r3
 8018e48:	d10c      	bne.n	8018e64 <ip_reass_remove_oldest_datagram+0x4c>
 8018e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e4c:	699a      	ldr	r2, [r3, #24]
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	691b      	ldr	r3, [r3, #16]
 8018e52:	429a      	cmp	r2, r3
 8018e54:	d106      	bne.n	8018e64 <ip_reass_remove_oldest_datagram+0x4c>
 8018e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e58:	899a      	ldrh	r2, [r3, #12]
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	889b      	ldrh	r3, [r3, #4]
 8018e5e:	b29b      	uxth	r3, r3
 8018e60:	429a      	cmp	r2, r3
 8018e62:	d014      	beq.n	8018e8e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018e64:	693b      	ldr	r3, [r7, #16]
 8018e66:	3301      	adds	r3, #1
 8018e68:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018e6a:	6a3b      	ldr	r3, [r7, #32]
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d104      	bne.n	8018e7a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e72:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018e74:	69fb      	ldr	r3, [r7, #28]
 8018e76:	61bb      	str	r3, [r7, #24]
 8018e78:	e009      	b.n	8018e8e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e7c:	7fda      	ldrb	r2, [r3, #31]
 8018e7e:	6a3b      	ldr	r3, [r7, #32]
 8018e80:	7fdb      	ldrb	r3, [r3, #31]
 8018e82:	429a      	cmp	r2, r3
 8018e84:	d803      	bhi.n	8018e8e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8018e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e88:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018e8a:	69fb      	ldr	r3, [r7, #28]
 8018e8c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e90:	681b      	ldr	r3, [r3, #0]
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d001      	beq.n	8018e9a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8018e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e98:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	d1cb      	bne.n	8018e3e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8018ea6:	6a3b      	ldr	r3, [r7, #32]
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d008      	beq.n	8018ebe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018eac:	69b9      	ldr	r1, [r7, #24]
 8018eae:	6a38      	ldr	r0, [r7, #32]
 8018eb0:	f7ff ff0e 	bl	8018cd0 <ip_reass_free_complete_datagram>
 8018eb4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018eb6:	697a      	ldr	r2, [r7, #20]
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	4413      	add	r3, r2
 8018ebc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018ebe:	697a      	ldr	r2, [r7, #20]
 8018ec0:	683b      	ldr	r3, [r7, #0]
 8018ec2:	429a      	cmp	r2, r3
 8018ec4:	da02      	bge.n	8018ecc <ip_reass_remove_oldest_datagram+0xb4>
 8018ec6:	693b      	ldr	r3, [r7, #16]
 8018ec8:	2b01      	cmp	r3, #1
 8018eca:	dcac      	bgt.n	8018e26 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018ecc:	697b      	ldr	r3, [r7, #20]
}
 8018ece:	4618      	mov	r0, r3
 8018ed0:	3728      	adds	r7, #40	; 0x28
 8018ed2:	46bd      	mov	sp, r7
 8018ed4:	bd80      	pop	{r7, pc}
 8018ed6:	bf00      	nop
 8018ed8:	2401517c 	.word	0x2401517c

08018edc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018edc:	b580      	push	{r7, lr}
 8018ede:	b084      	sub	sp, #16
 8018ee0:	af00      	add	r7, sp, #0
 8018ee2:	6078      	str	r0, [r7, #4]
 8018ee4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018ee6:	2004      	movs	r0, #4
 8018ee8:	f7f6 fbb6 	bl	800f658 <memp_malloc>
 8018eec:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018eee:	68fb      	ldr	r3, [r7, #12]
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d110      	bne.n	8018f16 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018ef4:	6839      	ldr	r1, [r7, #0]
 8018ef6:	6878      	ldr	r0, [r7, #4]
 8018ef8:	f7ff ff8e 	bl	8018e18 <ip_reass_remove_oldest_datagram>
 8018efc:	4602      	mov	r2, r0
 8018efe:	683b      	ldr	r3, [r7, #0]
 8018f00:	4293      	cmp	r3, r2
 8018f02:	dc03      	bgt.n	8018f0c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018f04:	2004      	movs	r0, #4
 8018f06:	f7f6 fba7 	bl	800f658 <memp_malloc>
 8018f0a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018f0c:	68fb      	ldr	r3, [r7, #12]
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d101      	bne.n	8018f16 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8018f12:	2300      	movs	r3, #0
 8018f14:	e016      	b.n	8018f44 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018f16:	2220      	movs	r2, #32
 8018f18:	2100      	movs	r1, #0
 8018f1a:	68f8      	ldr	r0, [r7, #12]
 8018f1c:	f001 f8fa 	bl	801a114 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018f20:	68fb      	ldr	r3, [r7, #12]
 8018f22:	220f      	movs	r2, #15
 8018f24:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018f26:	4b09      	ldr	r3, [pc, #36]	; (8018f4c <ip_reass_enqueue_new_datagram+0x70>)
 8018f28:	681a      	ldr	r2, [r3, #0]
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018f2e:	4a07      	ldr	r2, [pc, #28]	; (8018f4c <ip_reass_enqueue_new_datagram+0x70>)
 8018f30:	68fb      	ldr	r3, [r7, #12]
 8018f32:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	3308      	adds	r3, #8
 8018f38:	2214      	movs	r2, #20
 8018f3a:	6879      	ldr	r1, [r7, #4]
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	f001 f9b3 	bl	801a2a8 <memcpy>
  return ipr;
 8018f42:	68fb      	ldr	r3, [r7, #12]
}
 8018f44:	4618      	mov	r0, r3
 8018f46:	3710      	adds	r7, #16
 8018f48:	46bd      	mov	sp, r7
 8018f4a:	bd80      	pop	{r7, pc}
 8018f4c:	2401517c 	.word	0x2401517c

08018f50 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018f50:	b580      	push	{r7, lr}
 8018f52:	b082      	sub	sp, #8
 8018f54:	af00      	add	r7, sp, #0
 8018f56:	6078      	str	r0, [r7, #4]
 8018f58:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018f5a:	4b10      	ldr	r3, [pc, #64]	; (8018f9c <ip_reass_dequeue_datagram+0x4c>)
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	687a      	ldr	r2, [r7, #4]
 8018f60:	429a      	cmp	r2, r3
 8018f62:	d104      	bne.n	8018f6e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	681b      	ldr	r3, [r3, #0]
 8018f68:	4a0c      	ldr	r2, [pc, #48]	; (8018f9c <ip_reass_dequeue_datagram+0x4c>)
 8018f6a:	6013      	str	r3, [r2, #0]
 8018f6c:	e00d      	b.n	8018f8a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8018f6e:	683b      	ldr	r3, [r7, #0]
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d106      	bne.n	8018f82 <ip_reass_dequeue_datagram+0x32>
 8018f74:	4b0a      	ldr	r3, [pc, #40]	; (8018fa0 <ip_reass_dequeue_datagram+0x50>)
 8018f76:	f240 1245 	movw	r2, #325	; 0x145
 8018f7a:	490a      	ldr	r1, [pc, #40]	; (8018fa4 <ip_reass_dequeue_datagram+0x54>)
 8018f7c:	480a      	ldr	r0, [pc, #40]	; (8018fa8 <ip_reass_dequeue_datagram+0x58>)
 8018f7e:	f000 ff73 	bl	8019e68 <iprintf>
    prev->next = ipr->next;
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	681a      	ldr	r2, [r3, #0]
 8018f86:	683b      	ldr	r3, [r7, #0]
 8018f88:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018f8a:	6879      	ldr	r1, [r7, #4]
 8018f8c:	2004      	movs	r0, #4
 8018f8e:	f7f6 fbd9 	bl	800f744 <memp_free>
}
 8018f92:	bf00      	nop
 8018f94:	3708      	adds	r7, #8
 8018f96:	46bd      	mov	sp, r7
 8018f98:	bd80      	pop	{r7, pc}
 8018f9a:	bf00      	nop
 8018f9c:	2401517c 	.word	0x2401517c
 8018fa0:	0801d848 	.word	0x0801d848
 8018fa4:	0801d910 	.word	0x0801d910
 8018fa8:	0801d890 	.word	0x0801d890

08018fac <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018fac:	b580      	push	{r7, lr}
 8018fae:	b08c      	sub	sp, #48	; 0x30
 8018fb0:	af00      	add	r7, sp, #0
 8018fb2:	60f8      	str	r0, [r7, #12]
 8018fb4:	60b9      	str	r1, [r7, #8]
 8018fb6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018fb8:	2300      	movs	r3, #0
 8018fba:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018fbc:	2301      	movs	r3, #1
 8018fbe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018fc0:	68bb      	ldr	r3, [r7, #8]
 8018fc2:	685b      	ldr	r3, [r3, #4]
 8018fc4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018fc6:	69fb      	ldr	r3, [r7, #28]
 8018fc8:	885b      	ldrh	r3, [r3, #2]
 8018fca:	b29b      	uxth	r3, r3
 8018fcc:	4618      	mov	r0, r3
 8018fce:	f7f5 fda3 	bl	800eb18 <lwip_htons>
 8018fd2:	4603      	mov	r3, r0
 8018fd4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8018fd6:	69fb      	ldr	r3, [r7, #28]
 8018fd8:	781b      	ldrb	r3, [r3, #0]
 8018fda:	f003 030f 	and.w	r3, r3, #15
 8018fde:	b2db      	uxtb	r3, r3
 8018fe0:	009b      	lsls	r3, r3, #2
 8018fe2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018fe4:	7e7b      	ldrb	r3, [r7, #25]
 8018fe6:	b29b      	uxth	r3, r3
 8018fe8:	8b7a      	ldrh	r2, [r7, #26]
 8018fea:	429a      	cmp	r2, r3
 8018fec:	d202      	bcs.n	8018ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018fee:	f04f 33ff 	mov.w	r3, #4294967295
 8018ff2:	e135      	b.n	8019260 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018ff4:	7e7b      	ldrb	r3, [r7, #25]
 8018ff6:	b29b      	uxth	r3, r3
 8018ff8:	8b7a      	ldrh	r2, [r7, #26]
 8018ffa:	1ad3      	subs	r3, r2, r3
 8018ffc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018ffe:	69fb      	ldr	r3, [r7, #28]
 8019000:	88db      	ldrh	r3, [r3, #6]
 8019002:	b29b      	uxth	r3, r3
 8019004:	4618      	mov	r0, r3
 8019006:	f7f5 fd87 	bl	800eb18 <lwip_htons>
 801900a:	4603      	mov	r3, r0
 801900c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019010:	b29b      	uxth	r3, r3
 8019012:	00db      	lsls	r3, r3, #3
 8019014:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019016:	68bb      	ldr	r3, [r7, #8]
 8019018:	685b      	ldr	r3, [r3, #4]
 801901a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801901c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801901e:	2200      	movs	r2, #0
 8019020:	701a      	strb	r2, [r3, #0]
 8019022:	2200      	movs	r2, #0
 8019024:	705a      	strb	r2, [r3, #1]
 8019026:	2200      	movs	r2, #0
 8019028:	709a      	strb	r2, [r3, #2]
 801902a:	2200      	movs	r2, #0
 801902c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801902e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019030:	8afa      	ldrh	r2, [r7, #22]
 8019032:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019034:	8afa      	ldrh	r2, [r7, #22]
 8019036:	8b7b      	ldrh	r3, [r7, #26]
 8019038:	4413      	add	r3, r2
 801903a:	b29a      	uxth	r2, r3
 801903c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801903e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019042:	88db      	ldrh	r3, [r3, #6]
 8019044:	b29b      	uxth	r3, r3
 8019046:	8afa      	ldrh	r2, [r7, #22]
 8019048:	429a      	cmp	r2, r3
 801904a:	d902      	bls.n	8019052 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801904c:	f04f 33ff 	mov.w	r3, #4294967295
 8019050:	e106      	b.n	8019260 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019052:	68fb      	ldr	r3, [r7, #12]
 8019054:	685b      	ldr	r3, [r3, #4]
 8019056:	627b      	str	r3, [r7, #36]	; 0x24
 8019058:	e068      	b.n	801912c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801905c:	685b      	ldr	r3, [r3, #4]
 801905e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019062:	889b      	ldrh	r3, [r3, #4]
 8019064:	b29a      	uxth	r2, r3
 8019066:	693b      	ldr	r3, [r7, #16]
 8019068:	889b      	ldrh	r3, [r3, #4]
 801906a:	b29b      	uxth	r3, r3
 801906c:	429a      	cmp	r2, r3
 801906e:	d235      	bcs.n	80190dc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019074:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019078:	2b00      	cmp	r3, #0
 801907a:	d020      	beq.n	80190be <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801907c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801907e:	889b      	ldrh	r3, [r3, #4]
 8019080:	b29a      	uxth	r2, r3
 8019082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019084:	88db      	ldrh	r3, [r3, #6]
 8019086:	b29b      	uxth	r3, r3
 8019088:	429a      	cmp	r2, r3
 801908a:	d307      	bcc.n	801909c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801908c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801908e:	88db      	ldrh	r3, [r3, #6]
 8019090:	b29a      	uxth	r2, r3
 8019092:	693b      	ldr	r3, [r7, #16]
 8019094:	889b      	ldrh	r3, [r3, #4]
 8019096:	b29b      	uxth	r3, r3
 8019098:	429a      	cmp	r2, r3
 801909a:	d902      	bls.n	80190a2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801909c:	f04f 33ff 	mov.w	r3, #4294967295
 80190a0:	e0de      	b.n	8019260 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80190a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190a4:	68ba      	ldr	r2, [r7, #8]
 80190a6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80190a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190aa:	88db      	ldrh	r3, [r3, #6]
 80190ac:	b29a      	uxth	r2, r3
 80190ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190b0:	889b      	ldrh	r3, [r3, #4]
 80190b2:	b29b      	uxth	r3, r3
 80190b4:	429a      	cmp	r2, r3
 80190b6:	d03d      	beq.n	8019134 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80190b8:	2300      	movs	r3, #0
 80190ba:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80190bc:	e03a      	b.n	8019134 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80190be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190c0:	88db      	ldrh	r3, [r3, #6]
 80190c2:	b29a      	uxth	r2, r3
 80190c4:	693b      	ldr	r3, [r7, #16]
 80190c6:	889b      	ldrh	r3, [r3, #4]
 80190c8:	b29b      	uxth	r3, r3
 80190ca:	429a      	cmp	r2, r3
 80190cc:	d902      	bls.n	80190d4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80190ce:	f04f 33ff 	mov.w	r3, #4294967295
 80190d2:	e0c5      	b.n	8019260 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80190d4:	68fb      	ldr	r3, [r7, #12]
 80190d6:	68ba      	ldr	r2, [r7, #8]
 80190d8:	605a      	str	r2, [r3, #4]
      break;
 80190da:	e02b      	b.n	8019134 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80190dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190de:	889b      	ldrh	r3, [r3, #4]
 80190e0:	b29a      	uxth	r2, r3
 80190e2:	693b      	ldr	r3, [r7, #16]
 80190e4:	889b      	ldrh	r3, [r3, #4]
 80190e6:	b29b      	uxth	r3, r3
 80190e8:	429a      	cmp	r2, r3
 80190ea:	d102      	bne.n	80190f2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80190ec:	f04f 33ff 	mov.w	r3, #4294967295
 80190f0:	e0b6      	b.n	8019260 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80190f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190f4:	889b      	ldrh	r3, [r3, #4]
 80190f6:	b29a      	uxth	r2, r3
 80190f8:	693b      	ldr	r3, [r7, #16]
 80190fa:	88db      	ldrh	r3, [r3, #6]
 80190fc:	b29b      	uxth	r3, r3
 80190fe:	429a      	cmp	r2, r3
 8019100:	d202      	bcs.n	8019108 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019102:	f04f 33ff 	mov.w	r3, #4294967295
 8019106:	e0ab      	b.n	8019260 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801910a:	2b00      	cmp	r3, #0
 801910c:	d009      	beq.n	8019122 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801910e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019110:	88db      	ldrh	r3, [r3, #6]
 8019112:	b29a      	uxth	r2, r3
 8019114:	693b      	ldr	r3, [r7, #16]
 8019116:	889b      	ldrh	r3, [r3, #4]
 8019118:	b29b      	uxth	r3, r3
 801911a:	429a      	cmp	r2, r3
 801911c:	d001      	beq.n	8019122 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801911e:	2300      	movs	r3, #0
 8019120:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019122:	693b      	ldr	r3, [r7, #16]
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019128:	693b      	ldr	r3, [r7, #16]
 801912a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801912e:	2b00      	cmp	r3, #0
 8019130:	d193      	bne.n	801905a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019132:	e000      	b.n	8019136 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019134:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019138:	2b00      	cmp	r3, #0
 801913a:	d12d      	bne.n	8019198 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801913c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801913e:	2b00      	cmp	r3, #0
 8019140:	d01c      	beq.n	801917c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019144:	88db      	ldrh	r3, [r3, #6]
 8019146:	b29a      	uxth	r2, r3
 8019148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801914a:	889b      	ldrh	r3, [r3, #4]
 801914c:	b29b      	uxth	r3, r3
 801914e:	429a      	cmp	r2, r3
 8019150:	d906      	bls.n	8019160 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8019152:	4b45      	ldr	r3, [pc, #276]	; (8019268 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019154:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8019158:	4944      	ldr	r1, [pc, #272]	; (801926c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801915a:	4845      	ldr	r0, [pc, #276]	; (8019270 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801915c:	f000 fe84 	bl	8019e68 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019162:	68ba      	ldr	r2, [r7, #8]
 8019164:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019168:	88db      	ldrh	r3, [r3, #6]
 801916a:	b29a      	uxth	r2, r3
 801916c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801916e:	889b      	ldrh	r3, [r3, #4]
 8019170:	b29b      	uxth	r3, r3
 8019172:	429a      	cmp	r2, r3
 8019174:	d010      	beq.n	8019198 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8019176:	2300      	movs	r3, #0
 8019178:	623b      	str	r3, [r7, #32]
 801917a:	e00d      	b.n	8019198 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	685b      	ldr	r3, [r3, #4]
 8019180:	2b00      	cmp	r3, #0
 8019182:	d006      	beq.n	8019192 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019184:	4b38      	ldr	r3, [pc, #224]	; (8019268 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019186:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801918a:	493a      	ldr	r1, [pc, #232]	; (8019274 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801918c:	4838      	ldr	r0, [pc, #224]	; (8019270 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801918e:	f000 fe6b 	bl	8019e68 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	68ba      	ldr	r2, [r7, #8]
 8019196:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	2b00      	cmp	r3, #0
 801919c:	d105      	bne.n	80191aa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	7f9b      	ldrb	r3, [r3, #30]
 80191a2:	f003 0301 	and.w	r3, r3, #1
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d059      	beq.n	801925e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80191aa:	6a3b      	ldr	r3, [r7, #32]
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	d04f      	beq.n	8019250 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80191b0:	68fb      	ldr	r3, [r7, #12]
 80191b2:	685b      	ldr	r3, [r3, #4]
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d006      	beq.n	80191c6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80191b8:	68fb      	ldr	r3, [r7, #12]
 80191ba:	685b      	ldr	r3, [r3, #4]
 80191bc:	685b      	ldr	r3, [r3, #4]
 80191be:	889b      	ldrh	r3, [r3, #4]
 80191c0:	b29b      	uxth	r3, r3
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d002      	beq.n	80191cc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80191c6:	2300      	movs	r3, #0
 80191c8:	623b      	str	r3, [r7, #32]
 80191ca:	e041      	b.n	8019250 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80191cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191ce:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80191d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80191d6:	e012      	b.n	80191fe <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80191d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191da:	685b      	ldr	r3, [r3, #4]
 80191dc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80191de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191e0:	88db      	ldrh	r3, [r3, #6]
 80191e2:	b29a      	uxth	r2, r3
 80191e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191e6:	889b      	ldrh	r3, [r3, #4]
 80191e8:	b29b      	uxth	r3, r3
 80191ea:	429a      	cmp	r2, r3
 80191ec:	d002      	beq.n	80191f4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80191ee:	2300      	movs	r3, #0
 80191f0:	623b      	str	r3, [r7, #32]
            break;
 80191f2:	e007      	b.n	8019204 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80191f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191f6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80191f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80191fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019200:	2b00      	cmp	r3, #0
 8019202:	d1e9      	bne.n	80191d8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019204:	6a3b      	ldr	r3, [r7, #32]
 8019206:	2b00      	cmp	r3, #0
 8019208:	d022      	beq.n	8019250 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801920a:	68fb      	ldr	r3, [r7, #12]
 801920c:	685b      	ldr	r3, [r3, #4]
 801920e:	2b00      	cmp	r3, #0
 8019210:	d106      	bne.n	8019220 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019212:	4b15      	ldr	r3, [pc, #84]	; (8019268 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019214:	f240 12df 	movw	r2, #479	; 0x1df
 8019218:	4917      	ldr	r1, [pc, #92]	; (8019278 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801921a:	4815      	ldr	r0, [pc, #84]	; (8019270 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801921c:	f000 fe24 	bl	8019e68 <iprintf>
          LWIP_ASSERT("sanity check",
 8019220:	68fb      	ldr	r3, [r7, #12]
 8019222:	685b      	ldr	r3, [r3, #4]
 8019224:	685b      	ldr	r3, [r3, #4]
 8019226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019228:	429a      	cmp	r2, r3
 801922a:	d106      	bne.n	801923a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801922c:	4b0e      	ldr	r3, [pc, #56]	; (8019268 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801922e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019232:	4911      	ldr	r1, [pc, #68]	; (8019278 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019234:	480e      	ldr	r0, [pc, #56]	; (8019270 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019236:	f000 fe17 	bl	8019e68 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801923a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801923c:	681b      	ldr	r3, [r3, #0]
 801923e:	2b00      	cmp	r3, #0
 8019240:	d006      	beq.n	8019250 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8019242:	4b09      	ldr	r3, [pc, #36]	; (8019268 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019244:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8019248:	490c      	ldr	r1, [pc, #48]	; (801927c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801924a:	4809      	ldr	r0, [pc, #36]	; (8019270 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801924c:	f000 fe0c 	bl	8019e68 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019250:	6a3b      	ldr	r3, [r7, #32]
 8019252:	2b00      	cmp	r3, #0
 8019254:	bf14      	ite	ne
 8019256:	2301      	movne	r3, #1
 8019258:	2300      	moveq	r3, #0
 801925a:	b2db      	uxtb	r3, r3
 801925c:	e000      	b.n	8019260 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801925e:	2300      	movs	r3, #0
}
 8019260:	4618      	mov	r0, r3
 8019262:	3730      	adds	r7, #48	; 0x30
 8019264:	46bd      	mov	sp, r7
 8019266:	bd80      	pop	{r7, pc}
 8019268:	0801d848 	.word	0x0801d848
 801926c:	0801d92c 	.word	0x0801d92c
 8019270:	0801d890 	.word	0x0801d890
 8019274:	0801d94c 	.word	0x0801d94c
 8019278:	0801d984 	.word	0x0801d984
 801927c:	0801d994 	.word	0x0801d994

08019280 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8019280:	b580      	push	{r7, lr}
 8019282:	b08e      	sub	sp, #56	; 0x38
 8019284:	af00      	add	r7, sp, #0
 8019286:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	685b      	ldr	r3, [r3, #4]
 801928c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801928e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019290:	781b      	ldrb	r3, [r3, #0]
 8019292:	f003 030f 	and.w	r3, r3, #15
 8019296:	b2db      	uxtb	r3, r3
 8019298:	009b      	lsls	r3, r3, #2
 801929a:	b2db      	uxtb	r3, r3
 801929c:	2b14      	cmp	r3, #20
 801929e:	f040 8171 	bne.w	8019584 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80192a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192a4:	88db      	ldrh	r3, [r3, #6]
 80192a6:	b29b      	uxth	r3, r3
 80192a8:	4618      	mov	r0, r3
 80192aa:	f7f5 fc35 	bl	800eb18 <lwip_htons>
 80192ae:	4603      	mov	r3, r0
 80192b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80192b4:	b29b      	uxth	r3, r3
 80192b6:	00db      	lsls	r3, r3, #3
 80192b8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80192ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192bc:	885b      	ldrh	r3, [r3, #2]
 80192be:	b29b      	uxth	r3, r3
 80192c0:	4618      	mov	r0, r3
 80192c2:	f7f5 fc29 	bl	800eb18 <lwip_htons>
 80192c6:	4603      	mov	r3, r0
 80192c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80192ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192cc:	781b      	ldrb	r3, [r3, #0]
 80192ce:	f003 030f 	and.w	r3, r3, #15
 80192d2:	b2db      	uxtb	r3, r3
 80192d4:	009b      	lsls	r3, r3, #2
 80192d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80192da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80192de:	b29b      	uxth	r3, r3
 80192e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80192e2:	429a      	cmp	r2, r3
 80192e4:	f0c0 8150 	bcc.w	8019588 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80192e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80192ec:	b29b      	uxth	r3, r3
 80192ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80192f0:	1ad3      	subs	r3, r2, r3
 80192f2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80192f4:	6878      	ldr	r0, [r7, #4]
 80192f6:	f7f7 f967 	bl	80105c8 <pbuf_clen>
 80192fa:	4603      	mov	r3, r0
 80192fc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80192fe:	4b8c      	ldr	r3, [pc, #560]	; (8019530 <ip4_reass+0x2b0>)
 8019300:	881b      	ldrh	r3, [r3, #0]
 8019302:	461a      	mov	r2, r3
 8019304:	8c3b      	ldrh	r3, [r7, #32]
 8019306:	4413      	add	r3, r2
 8019308:	2b0a      	cmp	r3, #10
 801930a:	dd10      	ble.n	801932e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801930c:	8c3b      	ldrh	r3, [r7, #32]
 801930e:	4619      	mov	r1, r3
 8019310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019312:	f7ff fd81 	bl	8018e18 <ip_reass_remove_oldest_datagram>
 8019316:	4603      	mov	r3, r0
 8019318:	2b00      	cmp	r3, #0
 801931a:	f000 8137 	beq.w	801958c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801931e:	4b84      	ldr	r3, [pc, #528]	; (8019530 <ip4_reass+0x2b0>)
 8019320:	881b      	ldrh	r3, [r3, #0]
 8019322:	461a      	mov	r2, r3
 8019324:	8c3b      	ldrh	r3, [r7, #32]
 8019326:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019328:	2b0a      	cmp	r3, #10
 801932a:	f300 812f 	bgt.w	801958c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801932e:	4b81      	ldr	r3, [pc, #516]	; (8019534 <ip4_reass+0x2b4>)
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	633b      	str	r3, [r7, #48]	; 0x30
 8019334:	e015      	b.n	8019362 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8019336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019338:	695a      	ldr	r2, [r3, #20]
 801933a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801933c:	68db      	ldr	r3, [r3, #12]
 801933e:	429a      	cmp	r2, r3
 8019340:	d10c      	bne.n	801935c <ip4_reass+0xdc>
 8019342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019344:	699a      	ldr	r2, [r3, #24]
 8019346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019348:	691b      	ldr	r3, [r3, #16]
 801934a:	429a      	cmp	r2, r3
 801934c:	d106      	bne.n	801935c <ip4_reass+0xdc>
 801934e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019350:	899a      	ldrh	r2, [r3, #12]
 8019352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019354:	889b      	ldrh	r3, [r3, #4]
 8019356:	b29b      	uxth	r3, r3
 8019358:	429a      	cmp	r2, r3
 801935a:	d006      	beq.n	801936a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801935c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	633b      	str	r3, [r7, #48]	; 0x30
 8019362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019364:	2b00      	cmp	r3, #0
 8019366:	d1e6      	bne.n	8019336 <ip4_reass+0xb6>
 8019368:	e000      	b.n	801936c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801936a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801936c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801936e:	2b00      	cmp	r3, #0
 8019370:	d109      	bne.n	8019386 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8019372:	8c3b      	ldrh	r3, [r7, #32]
 8019374:	4619      	mov	r1, r3
 8019376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019378:	f7ff fdb0 	bl	8018edc <ip_reass_enqueue_new_datagram>
 801937c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801937e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019380:	2b00      	cmp	r3, #0
 8019382:	d11c      	bne.n	80193be <ip4_reass+0x13e>
      goto nullreturn;
 8019384:	e105      	b.n	8019592 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019388:	88db      	ldrh	r3, [r3, #6]
 801938a:	b29b      	uxth	r3, r3
 801938c:	4618      	mov	r0, r3
 801938e:	f7f5 fbc3 	bl	800eb18 <lwip_htons>
 8019392:	4603      	mov	r3, r0
 8019394:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019398:	2b00      	cmp	r3, #0
 801939a:	d110      	bne.n	80193be <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801939c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801939e:	89db      	ldrh	r3, [r3, #14]
 80193a0:	4618      	mov	r0, r3
 80193a2:	f7f5 fbb9 	bl	800eb18 <lwip_htons>
 80193a6:	4603      	mov	r3, r0
 80193a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d006      	beq.n	80193be <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80193b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193b2:	3308      	adds	r3, #8
 80193b4:	2214      	movs	r2, #20
 80193b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80193b8:	4618      	mov	r0, r3
 80193ba:	f000 ff75 	bl	801a2a8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80193be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193c0:	88db      	ldrh	r3, [r3, #6]
 80193c2:	b29b      	uxth	r3, r3
 80193c4:	f003 0320 	and.w	r3, r3, #32
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	bf0c      	ite	eq
 80193cc:	2301      	moveq	r3, #1
 80193ce:	2300      	movne	r3, #0
 80193d0:	b2db      	uxtb	r3, r3
 80193d2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80193d4:	69fb      	ldr	r3, [r7, #28]
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d00e      	beq.n	80193f8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80193da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80193dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80193de:	4413      	add	r3, r2
 80193e0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80193e2:	8b7a      	ldrh	r2, [r7, #26]
 80193e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80193e6:	429a      	cmp	r2, r3
 80193e8:	f0c0 80a0 	bcc.w	801952c <ip4_reass+0x2ac>
 80193ec:	8b7b      	ldrh	r3, [r7, #26]
 80193ee:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80193f2:	4293      	cmp	r3, r2
 80193f4:	f200 809a 	bhi.w	801952c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80193f8:	69fa      	ldr	r2, [r7, #28]
 80193fa:	6879      	ldr	r1, [r7, #4]
 80193fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80193fe:	f7ff fdd5 	bl	8018fac <ip_reass_chain_frag_into_datagram_and_validate>
 8019402:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019404:	697b      	ldr	r3, [r7, #20]
 8019406:	f1b3 3fff 	cmp.w	r3, #4294967295
 801940a:	f000 809b 	beq.w	8019544 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801940e:	4b48      	ldr	r3, [pc, #288]	; (8019530 <ip4_reass+0x2b0>)
 8019410:	881a      	ldrh	r2, [r3, #0]
 8019412:	8c3b      	ldrh	r3, [r7, #32]
 8019414:	4413      	add	r3, r2
 8019416:	b29a      	uxth	r2, r3
 8019418:	4b45      	ldr	r3, [pc, #276]	; (8019530 <ip4_reass+0x2b0>)
 801941a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801941c:	69fb      	ldr	r3, [r7, #28]
 801941e:	2b00      	cmp	r3, #0
 8019420:	d00d      	beq.n	801943e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8019422:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019424:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019426:	4413      	add	r3, r2
 8019428:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801942a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801942c:	8a7a      	ldrh	r2, [r7, #18]
 801942e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8019430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019432:	7f9b      	ldrb	r3, [r3, #30]
 8019434:	f043 0301 	orr.w	r3, r3, #1
 8019438:	b2da      	uxtb	r2, r3
 801943a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801943c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801943e:	697b      	ldr	r3, [r7, #20]
 8019440:	2b01      	cmp	r3, #1
 8019442:	d171      	bne.n	8019528 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8019444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019446:	8b9b      	ldrh	r3, [r3, #28]
 8019448:	3314      	adds	r3, #20
 801944a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801944c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801944e:	685b      	ldr	r3, [r3, #4]
 8019450:	685b      	ldr	r3, [r3, #4]
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8019456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019458:	685b      	ldr	r3, [r3, #4]
 801945a:	685b      	ldr	r3, [r3, #4]
 801945c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801945e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019460:	3308      	adds	r3, #8
 8019462:	2214      	movs	r2, #20
 8019464:	4619      	mov	r1, r3
 8019466:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019468:	f000 ff1e 	bl	801a2a8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801946c:	8a3b      	ldrh	r3, [r7, #16]
 801946e:	4618      	mov	r0, r3
 8019470:	f7f5 fb52 	bl	800eb18 <lwip_htons>
 8019474:	4603      	mov	r3, r0
 8019476:	461a      	mov	r2, r3
 8019478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801947a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801947c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801947e:	2200      	movs	r2, #0
 8019480:	719a      	strb	r2, [r3, #6]
 8019482:	2200      	movs	r2, #0
 8019484:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8019486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019488:	2200      	movs	r2, #0
 801948a:	729a      	strb	r2, [r3, #10]
 801948c:	2200      	movs	r2, #0
 801948e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8019490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019492:	685b      	ldr	r3, [r3, #4]
 8019494:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8019496:	e00d      	b.n	80194b4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8019498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801949a:	685b      	ldr	r3, [r3, #4]
 801949c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801949e:	2114      	movs	r1, #20
 80194a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80194a2:	f7f6 ff7d 	bl	80103a0 <pbuf_remove_header>
      pbuf_cat(p, r);
 80194a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80194a8:	6878      	ldr	r0, [r7, #4]
 80194aa:	f7f7 f8cd 	bl	8010648 <pbuf_cat>
      r = iprh->next_pbuf;
 80194ae:	68fb      	ldr	r3, [r7, #12]
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80194b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d1ee      	bne.n	8019498 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80194ba:	4b1e      	ldr	r3, [pc, #120]	; (8019534 <ip4_reass+0x2b4>)
 80194bc:	681b      	ldr	r3, [r3, #0]
 80194be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80194c0:	429a      	cmp	r2, r3
 80194c2:	d102      	bne.n	80194ca <ip4_reass+0x24a>
      ipr_prev = NULL;
 80194c4:	2300      	movs	r3, #0
 80194c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80194c8:	e010      	b.n	80194ec <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80194ca:	4b1a      	ldr	r3, [pc, #104]	; (8019534 <ip4_reass+0x2b4>)
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80194d0:	e007      	b.n	80194e2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80194d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194d4:	681b      	ldr	r3, [r3, #0]
 80194d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80194d8:	429a      	cmp	r2, r3
 80194da:	d006      	beq.n	80194ea <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80194dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80194e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d1f4      	bne.n	80194d2 <ip4_reass+0x252>
 80194e8:	e000      	b.n	80194ec <ip4_reass+0x26c>
          break;
 80194ea:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80194ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80194ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80194f0:	f7ff fd2e 	bl	8018f50 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80194f4:	6878      	ldr	r0, [r7, #4]
 80194f6:	f7f7 f867 	bl	80105c8 <pbuf_clen>
 80194fa:	4603      	mov	r3, r0
 80194fc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80194fe:	4b0c      	ldr	r3, [pc, #48]	; (8019530 <ip4_reass+0x2b0>)
 8019500:	881b      	ldrh	r3, [r3, #0]
 8019502:	8c3a      	ldrh	r2, [r7, #32]
 8019504:	429a      	cmp	r2, r3
 8019506:	d906      	bls.n	8019516 <ip4_reass+0x296>
 8019508:	4b0b      	ldr	r3, [pc, #44]	; (8019538 <ip4_reass+0x2b8>)
 801950a:	f240 229b 	movw	r2, #667	; 0x29b
 801950e:	490b      	ldr	r1, [pc, #44]	; (801953c <ip4_reass+0x2bc>)
 8019510:	480b      	ldr	r0, [pc, #44]	; (8019540 <ip4_reass+0x2c0>)
 8019512:	f000 fca9 	bl	8019e68 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8019516:	4b06      	ldr	r3, [pc, #24]	; (8019530 <ip4_reass+0x2b0>)
 8019518:	881a      	ldrh	r2, [r3, #0]
 801951a:	8c3b      	ldrh	r3, [r7, #32]
 801951c:	1ad3      	subs	r3, r2, r3
 801951e:	b29a      	uxth	r2, r3
 8019520:	4b03      	ldr	r3, [pc, #12]	; (8019530 <ip4_reass+0x2b0>)
 8019522:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	e038      	b.n	801959a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8019528:	2300      	movs	r3, #0
 801952a:	e036      	b.n	801959a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801952c:	bf00      	nop
 801952e:	e00a      	b.n	8019546 <ip4_reass+0x2c6>
 8019530:	24015180 	.word	0x24015180
 8019534:	2401517c 	.word	0x2401517c
 8019538:	0801d848 	.word	0x0801d848
 801953c:	0801d9b8 	.word	0x0801d9b8
 8019540:	0801d890 	.word	0x0801d890
    goto nullreturn_ipr;
 8019544:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8019546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019548:	2b00      	cmp	r3, #0
 801954a:	d106      	bne.n	801955a <ip4_reass+0x2da>
 801954c:	4b15      	ldr	r3, [pc, #84]	; (80195a4 <ip4_reass+0x324>)
 801954e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8019552:	4915      	ldr	r1, [pc, #84]	; (80195a8 <ip4_reass+0x328>)
 8019554:	4815      	ldr	r0, [pc, #84]	; (80195ac <ip4_reass+0x32c>)
 8019556:	f000 fc87 	bl	8019e68 <iprintf>
  if (ipr->p == NULL) {
 801955a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801955c:	685b      	ldr	r3, [r3, #4]
 801955e:	2b00      	cmp	r3, #0
 8019560:	d116      	bne.n	8019590 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8019562:	4b13      	ldr	r3, [pc, #76]	; (80195b0 <ip4_reass+0x330>)
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019568:	429a      	cmp	r2, r3
 801956a:	d006      	beq.n	801957a <ip4_reass+0x2fa>
 801956c:	4b0d      	ldr	r3, [pc, #52]	; (80195a4 <ip4_reass+0x324>)
 801956e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019572:	4910      	ldr	r1, [pc, #64]	; (80195b4 <ip4_reass+0x334>)
 8019574:	480d      	ldr	r0, [pc, #52]	; (80195ac <ip4_reass+0x32c>)
 8019576:	f000 fc77 	bl	8019e68 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801957a:	2100      	movs	r1, #0
 801957c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801957e:	f7ff fce7 	bl	8018f50 <ip_reass_dequeue_datagram>
 8019582:	e006      	b.n	8019592 <ip4_reass+0x312>
    goto nullreturn;
 8019584:	bf00      	nop
 8019586:	e004      	b.n	8019592 <ip4_reass+0x312>
    goto nullreturn;
 8019588:	bf00      	nop
 801958a:	e002      	b.n	8019592 <ip4_reass+0x312>
      goto nullreturn;
 801958c:	bf00      	nop
 801958e:	e000      	b.n	8019592 <ip4_reass+0x312>
  }

nullreturn:
 8019590:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8019592:	6878      	ldr	r0, [r7, #4]
 8019594:	f7f6 ff8a 	bl	80104ac <pbuf_free>
  return NULL;
 8019598:	2300      	movs	r3, #0
}
 801959a:	4618      	mov	r0, r3
 801959c:	3738      	adds	r7, #56	; 0x38
 801959e:	46bd      	mov	sp, r7
 80195a0:	bd80      	pop	{r7, pc}
 80195a2:	bf00      	nop
 80195a4:	0801d848 	.word	0x0801d848
 80195a8:	0801d9d4 	.word	0x0801d9d4
 80195ac:	0801d890 	.word	0x0801d890
 80195b0:	2401517c 	.word	0x2401517c
 80195b4:	0801d9e0 	.word	0x0801d9e0

080195b8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80195b8:	b580      	push	{r7, lr}
 80195ba:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80195bc:	2005      	movs	r0, #5
 80195be:	f7f6 f84b 	bl	800f658 <memp_malloc>
 80195c2:	4603      	mov	r3, r0
}
 80195c4:	4618      	mov	r0, r3
 80195c6:	bd80      	pop	{r7, pc}

080195c8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80195c8:	b580      	push	{r7, lr}
 80195ca:	b082      	sub	sp, #8
 80195cc:	af00      	add	r7, sp, #0
 80195ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	d106      	bne.n	80195e4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80195d6:	4b07      	ldr	r3, [pc, #28]	; (80195f4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80195d8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80195dc:	4906      	ldr	r1, [pc, #24]	; (80195f8 <ip_frag_free_pbuf_custom_ref+0x30>)
 80195de:	4807      	ldr	r0, [pc, #28]	; (80195fc <ip_frag_free_pbuf_custom_ref+0x34>)
 80195e0:	f000 fc42 	bl	8019e68 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80195e4:	6879      	ldr	r1, [r7, #4]
 80195e6:	2005      	movs	r0, #5
 80195e8:	f7f6 f8ac 	bl	800f744 <memp_free>
}
 80195ec:	bf00      	nop
 80195ee:	3708      	adds	r7, #8
 80195f0:	46bd      	mov	sp, r7
 80195f2:	bd80      	pop	{r7, pc}
 80195f4:	0801d848 	.word	0x0801d848
 80195f8:	0801da00 	.word	0x0801da00
 80195fc:	0801d890 	.word	0x0801d890

08019600 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019600:	b580      	push	{r7, lr}
 8019602:	b084      	sub	sp, #16
 8019604:	af00      	add	r7, sp, #0
 8019606:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801960c:	68fb      	ldr	r3, [r7, #12]
 801960e:	2b00      	cmp	r3, #0
 8019610:	d106      	bne.n	8019620 <ipfrag_free_pbuf_custom+0x20>
 8019612:	4b11      	ldr	r3, [pc, #68]	; (8019658 <ipfrag_free_pbuf_custom+0x58>)
 8019614:	f240 22ce 	movw	r2, #718	; 0x2ce
 8019618:	4910      	ldr	r1, [pc, #64]	; (801965c <ipfrag_free_pbuf_custom+0x5c>)
 801961a:	4811      	ldr	r0, [pc, #68]	; (8019660 <ipfrag_free_pbuf_custom+0x60>)
 801961c:	f000 fc24 	bl	8019e68 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019620:	68fa      	ldr	r2, [r7, #12]
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	429a      	cmp	r2, r3
 8019626:	d006      	beq.n	8019636 <ipfrag_free_pbuf_custom+0x36>
 8019628:	4b0b      	ldr	r3, [pc, #44]	; (8019658 <ipfrag_free_pbuf_custom+0x58>)
 801962a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801962e:	490d      	ldr	r1, [pc, #52]	; (8019664 <ipfrag_free_pbuf_custom+0x64>)
 8019630:	480b      	ldr	r0, [pc, #44]	; (8019660 <ipfrag_free_pbuf_custom+0x60>)
 8019632:	f000 fc19 	bl	8019e68 <iprintf>
  if (pcr->original != NULL) {
 8019636:	68fb      	ldr	r3, [r7, #12]
 8019638:	695b      	ldr	r3, [r3, #20]
 801963a:	2b00      	cmp	r3, #0
 801963c:	d004      	beq.n	8019648 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	695b      	ldr	r3, [r3, #20]
 8019642:	4618      	mov	r0, r3
 8019644:	f7f6 ff32 	bl	80104ac <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8019648:	68f8      	ldr	r0, [r7, #12]
 801964a:	f7ff ffbd 	bl	80195c8 <ip_frag_free_pbuf_custom_ref>
}
 801964e:	bf00      	nop
 8019650:	3710      	adds	r7, #16
 8019652:	46bd      	mov	sp, r7
 8019654:	bd80      	pop	{r7, pc}
 8019656:	bf00      	nop
 8019658:	0801d848 	.word	0x0801d848
 801965c:	0801da0c 	.word	0x0801da0c
 8019660:	0801d890 	.word	0x0801d890
 8019664:	0801da18 	.word	0x0801da18

08019668 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8019668:	b580      	push	{r7, lr}
 801966a:	b094      	sub	sp, #80	; 0x50
 801966c:	af02      	add	r7, sp, #8
 801966e:	60f8      	str	r0, [r7, #12]
 8019670:	60b9      	str	r1, [r7, #8]
 8019672:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8019674:	2300      	movs	r3, #0
 8019676:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801967a:	68bb      	ldr	r3, [r7, #8]
 801967c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801967e:	3b14      	subs	r3, #20
 8019680:	2b00      	cmp	r3, #0
 8019682:	da00      	bge.n	8019686 <ip4_frag+0x1e>
 8019684:	3307      	adds	r3, #7
 8019686:	10db      	asrs	r3, r3, #3
 8019688:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801968a:	2314      	movs	r3, #20
 801968c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	685b      	ldr	r3, [r3, #4]
 8019692:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8019694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019696:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8019698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801969a:	781b      	ldrb	r3, [r3, #0]
 801969c:	f003 030f 	and.w	r3, r3, #15
 80196a0:	b2db      	uxtb	r3, r3
 80196a2:	009b      	lsls	r3, r3, #2
 80196a4:	b2db      	uxtb	r3, r3
 80196a6:	2b14      	cmp	r3, #20
 80196a8:	d002      	beq.n	80196b0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80196aa:	f06f 0305 	mvn.w	r3, #5
 80196ae:	e110      	b.n	80198d2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80196b0:	68fb      	ldr	r3, [r7, #12]
 80196b2:	895b      	ldrh	r3, [r3, #10]
 80196b4:	2b13      	cmp	r3, #19
 80196b6:	d809      	bhi.n	80196cc <ip4_frag+0x64>
 80196b8:	4b88      	ldr	r3, [pc, #544]	; (80198dc <ip4_frag+0x274>)
 80196ba:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80196be:	4988      	ldr	r1, [pc, #544]	; (80198e0 <ip4_frag+0x278>)
 80196c0:	4888      	ldr	r0, [pc, #544]	; (80198e4 <ip4_frag+0x27c>)
 80196c2:	f000 fbd1 	bl	8019e68 <iprintf>
 80196c6:	f06f 0305 	mvn.w	r3, #5
 80196ca:	e102      	b.n	80198d2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80196cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196ce:	88db      	ldrh	r3, [r3, #6]
 80196d0:	b29b      	uxth	r3, r3
 80196d2:	4618      	mov	r0, r3
 80196d4:	f7f5 fa20 	bl	800eb18 <lwip_htons>
 80196d8:	4603      	mov	r3, r0
 80196da:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80196dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80196de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80196e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80196e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80196e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80196ec:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80196ee:	68fb      	ldr	r3, [r7, #12]
 80196f0:	891b      	ldrh	r3, [r3, #8]
 80196f2:	3b14      	subs	r3, #20
 80196f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80196f8:	e0e1      	b.n	80198be <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80196fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80196fc:	00db      	lsls	r3, r3, #3
 80196fe:	b29b      	uxth	r3, r3
 8019700:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019704:	4293      	cmp	r3, r2
 8019706:	bf28      	it	cs
 8019708:	4613      	movcs	r3, r2
 801970a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801970c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019710:	2114      	movs	r1, #20
 8019712:	200e      	movs	r0, #14
 8019714:	f7f6 fbe2 	bl	800fedc <pbuf_alloc>
 8019718:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801971a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801971c:	2b00      	cmp	r3, #0
 801971e:	f000 80d5 	beq.w	80198cc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019724:	895b      	ldrh	r3, [r3, #10]
 8019726:	2b13      	cmp	r3, #19
 8019728:	d806      	bhi.n	8019738 <ip4_frag+0xd0>
 801972a:	4b6c      	ldr	r3, [pc, #432]	; (80198dc <ip4_frag+0x274>)
 801972c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8019730:	496d      	ldr	r1, [pc, #436]	; (80198e8 <ip4_frag+0x280>)
 8019732:	486c      	ldr	r0, [pc, #432]	; (80198e4 <ip4_frag+0x27c>)
 8019734:	f000 fb98 	bl	8019e68 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801973a:	685b      	ldr	r3, [r3, #4]
 801973c:	2214      	movs	r2, #20
 801973e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019740:	4618      	mov	r0, r3
 8019742:	f000 fdb1 	bl	801a2a8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8019746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019748:	685b      	ldr	r3, [r3, #4]
 801974a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801974c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801974e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8019752:	e064      	b.n	801981e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8019754:	68fb      	ldr	r3, [r7, #12]
 8019756:	895a      	ldrh	r2, [r3, #10]
 8019758:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801975a:	1ad3      	subs	r3, r2, r3
 801975c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801975e:	68fb      	ldr	r3, [r7, #12]
 8019760:	895b      	ldrh	r3, [r3, #10]
 8019762:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019764:	429a      	cmp	r2, r3
 8019766:	d906      	bls.n	8019776 <ip4_frag+0x10e>
 8019768:	4b5c      	ldr	r3, [pc, #368]	; (80198dc <ip4_frag+0x274>)
 801976a:	f240 322d 	movw	r2, #813	; 0x32d
 801976e:	495f      	ldr	r1, [pc, #380]	; (80198ec <ip4_frag+0x284>)
 8019770:	485c      	ldr	r0, [pc, #368]	; (80198e4 <ip4_frag+0x27c>)
 8019772:	f000 fb79 	bl	8019e68 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8019776:	8bfa      	ldrh	r2, [r7, #30]
 8019778:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801977c:	4293      	cmp	r3, r2
 801977e:	bf28      	it	cs
 8019780:	4613      	movcs	r3, r2
 8019782:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8019786:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801978a:	2b00      	cmp	r3, #0
 801978c:	d105      	bne.n	801979a <ip4_frag+0x132>
        poff = 0;
 801978e:	2300      	movs	r3, #0
 8019790:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019792:	68fb      	ldr	r3, [r7, #12]
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	60fb      	str	r3, [r7, #12]
        continue;
 8019798:	e041      	b.n	801981e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801979a:	f7ff ff0d 	bl	80195b8 <ip_frag_alloc_pbuf_custom_ref>
 801979e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80197a0:	69bb      	ldr	r3, [r7, #24]
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	d103      	bne.n	80197ae <ip4_frag+0x146>
        pbuf_free(rambuf);
 80197a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80197a8:	f7f6 fe80 	bl	80104ac <pbuf_free>
        goto memerr;
 80197ac:	e08f      	b.n	80198ce <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80197ae:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80197b0:	68fb      	ldr	r3, [r7, #12]
 80197b2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80197b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80197b6:	4413      	add	r3, r2
 80197b8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80197bc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80197c0:	9201      	str	r2, [sp, #4]
 80197c2:	9300      	str	r3, [sp, #0]
 80197c4:	4603      	mov	r3, r0
 80197c6:	2241      	movs	r2, #65	; 0x41
 80197c8:	2000      	movs	r0, #0
 80197ca:	f7f6 fcb5 	bl	8010138 <pbuf_alloced_custom>
 80197ce:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80197d0:	697b      	ldr	r3, [r7, #20]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d106      	bne.n	80197e4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80197d6:	69b8      	ldr	r0, [r7, #24]
 80197d8:	f7ff fef6 	bl	80195c8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80197dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80197de:	f7f6 fe65 	bl	80104ac <pbuf_free>
        goto memerr;
 80197e2:	e074      	b.n	80198ce <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80197e4:	68f8      	ldr	r0, [r7, #12]
 80197e6:	f7f6 ff07 	bl	80105f8 <pbuf_ref>
      pcr->original = p;
 80197ea:	69bb      	ldr	r3, [r7, #24]
 80197ec:	68fa      	ldr	r2, [r7, #12]
 80197ee:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80197f0:	69bb      	ldr	r3, [r7, #24]
 80197f2:	4a3f      	ldr	r2, [pc, #252]	; (80198f0 <ip4_frag+0x288>)
 80197f4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80197f6:	6979      	ldr	r1, [r7, #20]
 80197f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80197fa:	f7f6 ff25 	bl	8010648 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80197fe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8019802:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019806:	1ad3      	subs	r3, r2, r3
 8019808:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801980c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019810:	2b00      	cmp	r3, #0
 8019812:	d004      	beq.n	801981e <ip4_frag+0x1b6>
        poff = 0;
 8019814:	2300      	movs	r3, #0
 8019816:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019818:	68fb      	ldr	r3, [r7, #12]
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801981e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019822:	2b00      	cmp	r3, #0
 8019824:	d196      	bne.n	8019754 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8019826:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019828:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801982c:	4413      	add	r3, r2
 801982e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019830:	68bb      	ldr	r3, [r7, #8]
 8019832:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019834:	f1a3 0213 	sub.w	r2, r3, #19
 8019838:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801983c:	429a      	cmp	r2, r3
 801983e:	bfcc      	ite	gt
 8019840:	2301      	movgt	r3, #1
 8019842:	2300      	movle	r3, #0
 8019844:	b2db      	uxtb	r3, r3
 8019846:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019848:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801984c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019850:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8019852:	6a3b      	ldr	r3, [r7, #32]
 8019854:	2b00      	cmp	r3, #0
 8019856:	d002      	beq.n	801985e <ip4_frag+0x1f6>
 8019858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801985a:	2b00      	cmp	r3, #0
 801985c:	d003      	beq.n	8019866 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801985e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019860:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019864:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8019866:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019868:	4618      	mov	r0, r3
 801986a:	f7f5 f955 	bl	800eb18 <lwip_htons>
 801986e:	4603      	mov	r3, r0
 8019870:	461a      	mov	r2, r3
 8019872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019874:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8019876:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019878:	3314      	adds	r3, #20
 801987a:	b29b      	uxth	r3, r3
 801987c:	4618      	mov	r0, r3
 801987e:	f7f5 f94b 	bl	800eb18 <lwip_htons>
 8019882:	4603      	mov	r3, r0
 8019884:	461a      	mov	r2, r3
 8019886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019888:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801988a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801988c:	2200      	movs	r2, #0
 801988e:	729a      	strb	r2, [r3, #10]
 8019890:	2200      	movs	r2, #0
 8019892:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8019894:	68bb      	ldr	r3, [r7, #8]
 8019896:	695b      	ldr	r3, [r3, #20]
 8019898:	687a      	ldr	r2, [r7, #4]
 801989a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801989c:	68b8      	ldr	r0, [r7, #8]
 801989e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80198a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80198a2:	f7f6 fe03 	bl	80104ac <pbuf_free>
    left = (u16_t)(left - fragsize);
 80198a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80198aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80198ac:	1ad3      	subs	r3, r2, r3
 80198ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80198b2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80198b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80198b8:	4413      	add	r3, r2
 80198ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80198be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	f47f af19 	bne.w	80196fa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80198c8:	2300      	movs	r3, #0
 80198ca:	e002      	b.n	80198d2 <ip4_frag+0x26a>
      goto memerr;
 80198cc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80198ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80198d2:	4618      	mov	r0, r3
 80198d4:	3748      	adds	r7, #72	; 0x48
 80198d6:	46bd      	mov	sp, r7
 80198d8:	bd80      	pop	{r7, pc}
 80198da:	bf00      	nop
 80198dc:	0801d848 	.word	0x0801d848
 80198e0:	0801da24 	.word	0x0801da24
 80198e4:	0801d890 	.word	0x0801d890
 80198e8:	0801da40 	.word	0x0801da40
 80198ec:	0801da60 	.word	0x0801da60
 80198f0:	08019601 	.word	0x08019601

080198f4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80198f4:	b580      	push	{r7, lr}
 80198f6:	b086      	sub	sp, #24
 80198f8:	af00      	add	r7, sp, #0
 80198fa:	6078      	str	r0, [r7, #4]
 80198fc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80198fe:	230e      	movs	r3, #14
 8019900:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();
 8019902:	f7f1 f8df 	bl	800aac4 <sys_check_core_locking>

  if (p->len <= SIZEOF_ETH_HDR) {
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	895b      	ldrh	r3, [r3, #10]
 801990a:	2b0e      	cmp	r3, #14
 801990c:	d96e      	bls.n	80199ec <ethernet_input+0xf8>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	7bdb      	ldrb	r3, [r3, #15]
 8019912:	2b00      	cmp	r3, #0
 8019914:	d106      	bne.n	8019924 <ethernet_input+0x30>
    p->if_idx = netif_get_index(netif);
 8019916:	683b      	ldr	r3, [r7, #0]
 8019918:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801991c:	3301      	adds	r3, #1
 801991e:	b2da      	uxtb	r2, r3
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	685b      	ldr	r3, [r3, #4]
 8019928:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801992a:	693b      	ldr	r3, [r7, #16]
 801992c:	7b1a      	ldrb	r2, [r3, #12]
 801992e:	7b5b      	ldrb	r3, [r3, #13]
 8019930:	021b      	lsls	r3, r3, #8
 8019932:	4313      	orrs	r3, r2
 8019934:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019936:	693b      	ldr	r3, [r7, #16]
 8019938:	781b      	ldrb	r3, [r3, #0]
 801993a:	f003 0301 	and.w	r3, r3, #1
 801993e:	2b00      	cmp	r3, #0
 8019940:	d023      	beq.n	801998a <ethernet_input+0x96>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019942:	693b      	ldr	r3, [r7, #16]
 8019944:	781b      	ldrb	r3, [r3, #0]
 8019946:	2b01      	cmp	r3, #1
 8019948:	d10f      	bne.n	801996a <ethernet_input+0x76>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801994a:	693b      	ldr	r3, [r7, #16]
 801994c:	785b      	ldrb	r3, [r3, #1]
 801994e:	2b00      	cmp	r3, #0
 8019950:	d11b      	bne.n	801998a <ethernet_input+0x96>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019952:	693b      	ldr	r3, [r7, #16]
 8019954:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019956:	2b5e      	cmp	r3, #94	; 0x5e
 8019958:	d117      	bne.n	801998a <ethernet_input+0x96>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	7b5b      	ldrb	r3, [r3, #13]
 801995e:	f043 0310 	orr.w	r3, r3, #16
 8019962:	b2da      	uxtb	r2, r3
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	735a      	strb	r2, [r3, #13]
 8019968:	e00f      	b.n	801998a <ethernet_input+0x96>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801996a:	693b      	ldr	r3, [r7, #16]
 801996c:	2206      	movs	r2, #6
 801996e:	4928      	ldr	r1, [pc, #160]	; (8019a10 <ethernet_input+0x11c>)
 8019970:	4618      	mov	r0, r3
 8019972:	f000 fbbf 	bl	801a0f4 <memcmp>
 8019976:	4603      	mov	r3, r0
 8019978:	2b00      	cmp	r3, #0
 801997a:	d106      	bne.n	801998a <ethernet_input+0x96>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	7b5b      	ldrb	r3, [r3, #13]
 8019980:	f043 0308 	orr.w	r3, r3, #8
 8019984:	b2da      	uxtb	r2, r3
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801998a:	89fb      	ldrh	r3, [r7, #14]
 801998c:	2b08      	cmp	r3, #8
 801998e:	d003      	beq.n	8019998 <ethernet_input+0xa4>
 8019990:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8019994:	d014      	beq.n	80199c0 <ethernet_input+0xcc>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8019996:	e032      	b.n	80199fe <ethernet_input+0x10a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019998:	683b      	ldr	r3, [r7, #0]
 801999a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801999e:	f003 0308 	and.w	r3, r3, #8
 80199a2:	2b00      	cmp	r3, #0
 80199a4:	d024      	beq.n	80199f0 <ethernet_input+0xfc>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80199a6:	8afb      	ldrh	r3, [r7, #22]
 80199a8:	4619      	mov	r1, r3
 80199aa:	6878      	ldr	r0, [r7, #4]
 80199ac:	f7f6 fcf8 	bl	80103a0 <pbuf_remove_header>
 80199b0:	4603      	mov	r3, r0
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d11e      	bne.n	80199f4 <ethernet_input+0x100>
        ip4_input(p, netif);
 80199b6:	6839      	ldr	r1, [r7, #0]
 80199b8:	6878      	ldr	r0, [r7, #4]
 80199ba:	f7fe ff1b 	bl	80187f4 <ip4_input>
      break;
 80199be:	e013      	b.n	80199e8 <ethernet_input+0xf4>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80199c0:	683b      	ldr	r3, [r7, #0]
 80199c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80199c6:	f003 0308 	and.w	r3, r3, #8
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d014      	beq.n	80199f8 <ethernet_input+0x104>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80199ce:	8afb      	ldrh	r3, [r7, #22]
 80199d0:	4619      	mov	r1, r3
 80199d2:	6878      	ldr	r0, [r7, #4]
 80199d4:	f7f6 fce4 	bl	80103a0 <pbuf_remove_header>
 80199d8:	4603      	mov	r3, r0
 80199da:	2b00      	cmp	r3, #0
 80199dc:	d10e      	bne.n	80199fc <ethernet_input+0x108>
        etharp_input(p, netif);
 80199de:	6839      	ldr	r1, [r7, #0]
 80199e0:	6878      	ldr	r0, [r7, #4]
 80199e2:	f7fe f891 	bl	8017b08 <etharp_input>
      break;
 80199e6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80199e8:	2300      	movs	r3, #0
 80199ea:	e00c      	b.n	8019a06 <ethernet_input+0x112>
    goto free_and_return;
 80199ec:	bf00      	nop
 80199ee:	e006      	b.n	80199fe <ethernet_input+0x10a>
        goto free_and_return;
 80199f0:	bf00      	nop
 80199f2:	e004      	b.n	80199fe <ethernet_input+0x10a>
        goto free_and_return;
 80199f4:	bf00      	nop
 80199f6:	e002      	b.n	80199fe <ethernet_input+0x10a>
        goto free_and_return;
 80199f8:	bf00      	nop
 80199fa:	e000      	b.n	80199fe <ethernet_input+0x10a>
        goto free_and_return;
 80199fc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80199fe:	6878      	ldr	r0, [r7, #4]
 8019a00:	f7f6 fd54 	bl	80104ac <pbuf_free>
  return ERR_OK;
 8019a04:	2300      	movs	r3, #0
}
 8019a06:	4618      	mov	r0, r3
 8019a08:	3718      	adds	r7, #24
 8019a0a:	46bd      	mov	sp, r7
 8019a0c:	bd80      	pop	{r7, pc}
 8019a0e:	bf00      	nop
 8019a10:	0801e2c0 	.word	0x0801e2c0

08019a14 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019a14:	b580      	push	{r7, lr}
 8019a16:	b086      	sub	sp, #24
 8019a18:	af00      	add	r7, sp, #0
 8019a1a:	60f8      	str	r0, [r7, #12]
 8019a1c:	60b9      	str	r1, [r7, #8]
 8019a1e:	607a      	str	r2, [r7, #4]
 8019a20:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019a22:	8c3b      	ldrh	r3, [r7, #32]
 8019a24:	4618      	mov	r0, r3
 8019a26:	f7f5 f877 	bl	800eb18 <lwip_htons>
 8019a2a:	4603      	mov	r3, r0
 8019a2c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8019a2e:	210e      	movs	r1, #14
 8019a30:	68b8      	ldr	r0, [r7, #8]
 8019a32:	f7f6 fca5 	bl	8010380 <pbuf_add_header>
 8019a36:	4603      	mov	r3, r0
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d127      	bne.n	8019a8c <ethernet_output+0x78>
      goto pbuf_header_failed;
    }
  }

  LWIP_ASSERT_CORE_LOCKED();
 8019a3c:	f7f1 f842 	bl	800aac4 <sys_check_core_locking>

  ethhdr = (struct eth_hdr *)p->payload;
 8019a40:	68bb      	ldr	r3, [r7, #8]
 8019a42:	685b      	ldr	r3, [r3, #4]
 8019a44:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019a46:	693b      	ldr	r3, [r7, #16]
 8019a48:	8afa      	ldrh	r2, [r7, #22]
 8019a4a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8019a4c:	693b      	ldr	r3, [r7, #16]
 8019a4e:	2206      	movs	r2, #6
 8019a50:	6839      	ldr	r1, [r7, #0]
 8019a52:	4618      	mov	r0, r3
 8019a54:	f000 fc28 	bl	801a2a8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019a58:	693b      	ldr	r3, [r7, #16]
 8019a5a:	3306      	adds	r3, #6
 8019a5c:	2206      	movs	r2, #6
 8019a5e:	6879      	ldr	r1, [r7, #4]
 8019a60:	4618      	mov	r0, r3
 8019a62:	f000 fc21 	bl	801a2a8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019a6c:	2b06      	cmp	r3, #6
 8019a6e:	d006      	beq.n	8019a7e <ethernet_output+0x6a>
 8019a70:	4b0a      	ldr	r3, [pc, #40]	; (8019a9c <ethernet_output+0x88>)
 8019a72:	f44f 7299 	mov.w	r2, #306	; 0x132
 8019a76:	490a      	ldr	r1, [pc, #40]	; (8019aa0 <ethernet_output+0x8c>)
 8019a78:	480a      	ldr	r0, [pc, #40]	; (8019aa4 <ethernet_output+0x90>)
 8019a7a:	f000 f9f5 	bl	8019e68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8019a7e:	68fb      	ldr	r3, [r7, #12]
 8019a80:	699b      	ldr	r3, [r3, #24]
 8019a82:	68b9      	ldr	r1, [r7, #8]
 8019a84:	68f8      	ldr	r0, [r7, #12]
 8019a86:	4798      	blx	r3
 8019a88:	4603      	mov	r3, r0
 8019a8a:	e002      	b.n	8019a92 <ethernet_output+0x7e>
      goto pbuf_header_failed;
 8019a8c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8019a8e:	f06f 0301 	mvn.w	r3, #1
}
 8019a92:	4618      	mov	r0, r3
 8019a94:	3718      	adds	r7, #24
 8019a96:	46bd      	mov	sp, r7
 8019a98:	bd80      	pop	{r7, pc}
 8019a9a:	bf00      	nop
 8019a9c:	0801da70 	.word	0x0801da70
 8019aa0:	0801daa8 	.word	0x0801daa8
 8019aa4:	0801dadc 	.word	0x0801dadc

08019aa8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019aa8:	b580      	push	{r7, lr}
 8019aaa:	b082      	sub	sp, #8
 8019aac:	af00      	add	r7, sp, #0
 8019aae:	6078      	str	r0, [r7, #4]
 8019ab0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8019ab2:	683b      	ldr	r3, [r7, #0]
 8019ab4:	2200      	movs	r2, #0
 8019ab6:	2104      	movs	r1, #4
 8019ab8:	4618      	mov	r0, r3
 8019aba:	f7f1 fbd5 	bl	800b268 <osMessageQueueNew>
 8019abe:	4602      	mov	r2, r0
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	681b      	ldr	r3, [r3, #0]
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	d102      	bne.n	8019ad2 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8019acc:	f04f 33ff 	mov.w	r3, #4294967295
 8019ad0:	e000      	b.n	8019ad4 <sys_mbox_new+0x2c>

  return ERR_OK;
 8019ad2:	2300      	movs	r3, #0
}
 8019ad4:	4618      	mov	r0, r3
 8019ad6:	3708      	adds	r7, #8
 8019ad8:	46bd      	mov	sp, r7
 8019ada:	bd80      	pop	{r7, pc}

08019adc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019adc:	b580      	push	{r7, lr}
 8019ade:	b084      	sub	sp, #16
 8019ae0:	af00      	add	r7, sp, #0
 8019ae2:	6078      	str	r0, [r7, #4]
 8019ae4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	6818      	ldr	r0, [r3, #0]
 8019aea:	4639      	mov	r1, r7
 8019aec:	2300      	movs	r3, #0
 8019aee:	2200      	movs	r2, #0
 8019af0:	f7f1 fc2e 	bl	800b350 <osMessageQueuePut>
 8019af4:	4603      	mov	r3, r0
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	d102      	bne.n	8019b00 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8019afa:	2300      	movs	r3, #0
 8019afc:	73fb      	strb	r3, [r7, #15]
 8019afe:	e001      	b.n	8019b04 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8019b00:	23ff      	movs	r3, #255	; 0xff
 8019b02:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019b08:	4618      	mov	r0, r3
 8019b0a:	3710      	adds	r7, #16
 8019b0c:	46bd      	mov	sp, r7
 8019b0e:	bd80      	pop	{r7, pc}

08019b10 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019b10:	b580      	push	{r7, lr}
 8019b12:	b086      	sub	sp, #24
 8019b14:	af00      	add	r7, sp, #0
 8019b16:	60f8      	str	r0, [r7, #12]
 8019b18:	60b9      	str	r1, [r7, #8]
 8019b1a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8019b1c:	f7f1 f8a8 	bl	800ac70 <osKernelGetTickCount>
 8019b20:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d013      	beq.n	8019b50 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8019b28:	68fb      	ldr	r3, [r7, #12]
 8019b2a:	6818      	ldr	r0, [r3, #0]
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	2200      	movs	r2, #0
 8019b30:	68b9      	ldr	r1, [r7, #8]
 8019b32:	f7f1 fc6d 	bl	800b410 <osMessageQueueGet>
 8019b36:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8019b38:	693b      	ldr	r3, [r7, #16]
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d105      	bne.n	8019b4a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8019b3e:	f7f1 f897 	bl	800ac70 <osKernelGetTickCount>
 8019b42:	4602      	mov	r2, r0
 8019b44:	697b      	ldr	r3, [r7, #20]
 8019b46:	1ad3      	subs	r3, r2, r3
 8019b48:	e00f      	b.n	8019b6a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8019b4e:	e00c      	b.n	8019b6a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8019b50:	68fb      	ldr	r3, [r7, #12]
 8019b52:	6818      	ldr	r0, [r3, #0]
 8019b54:	f04f 33ff 	mov.w	r3, #4294967295
 8019b58:	2200      	movs	r2, #0
 8019b5a:	68b9      	ldr	r1, [r7, #8]
 8019b5c:	f7f1 fc58 	bl	800b410 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8019b60:	f7f1 f886 	bl	800ac70 <osKernelGetTickCount>
 8019b64:	4602      	mov	r2, r0
 8019b66:	697b      	ldr	r3, [r7, #20]
 8019b68:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8019b6a:	4618      	mov	r0, r3
 8019b6c:	3718      	adds	r7, #24
 8019b6e:	46bd      	mov	sp, r7
 8019b70:	bd80      	pop	{r7, pc}

08019b72 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8019b72:	b480      	push	{r7}
 8019b74:	b083      	sub	sp, #12
 8019b76:	af00      	add	r7, sp, #0
 8019b78:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d101      	bne.n	8019b86 <sys_mbox_valid+0x14>
    return 0;
 8019b82:	2300      	movs	r3, #0
 8019b84:	e000      	b.n	8019b88 <sys_mbox_valid+0x16>
  else
    return 1;
 8019b86:	2301      	movs	r3, #1
}
 8019b88:	4618      	mov	r0, r3
 8019b8a:	370c      	adds	r7, #12
 8019b8c:	46bd      	mov	sp, r7
 8019b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b92:	4770      	bx	lr

08019b94 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019b94:	b580      	push	{r7, lr}
 8019b96:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8019b98:	2000      	movs	r0, #0
 8019b9a:	f7f1 f937 	bl	800ae0c <osMutexNew>
 8019b9e:	4603      	mov	r3, r0
 8019ba0:	4a01      	ldr	r2, [pc, #4]	; (8019ba8 <sys_init+0x14>)
 8019ba2:	6013      	str	r3, [r2, #0]
#endif
}
 8019ba4:	bf00      	nop
 8019ba6:	bd80      	pop	{r7, pc}
 8019ba8:	24015184 	.word	0x24015184

08019bac <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019bac:	b580      	push	{r7, lr}
 8019bae:	b082      	sub	sp, #8
 8019bb0:	af00      	add	r7, sp, #0
 8019bb2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8019bb4:	2000      	movs	r0, #0
 8019bb6:	f7f1 f929 	bl	800ae0c <osMutexNew>
 8019bba:	4602      	mov	r2, r0
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d102      	bne.n	8019bce <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8019bcc:	e000      	b.n	8019bd0 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019bce:	2300      	movs	r3, #0
}
 8019bd0:	4618      	mov	r0, r3
 8019bd2:	3708      	adds	r7, #8
 8019bd4:	46bd      	mov	sp, r7
 8019bd6:	bd80      	pop	{r7, pc}

08019bd8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019bd8:	b580      	push	{r7, lr}
 8019bda:	b082      	sub	sp, #8
 8019bdc:	af00      	add	r7, sp, #0
 8019bde:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	681b      	ldr	r3, [r3, #0]
 8019be4:	f04f 31ff 	mov.w	r1, #4294967295
 8019be8:	4618      	mov	r0, r3
 8019bea:	f7f1 f995 	bl	800af18 <osMutexAcquire>
#endif
}
 8019bee:	bf00      	nop
 8019bf0:	3708      	adds	r7, #8
 8019bf2:	46bd      	mov	sp, r7
 8019bf4:	bd80      	pop	{r7, pc}

08019bf6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8019bf6:	b580      	push	{r7, lr}
 8019bf8:	b082      	sub	sp, #8
 8019bfa:	af00      	add	r7, sp, #0
 8019bfc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	4618      	mov	r0, r3
 8019c04:	f7f1 f9d3 	bl	800afae <osMutexRelease>
}
 8019c08:	bf00      	nop
 8019c0a:	3708      	adds	r7, #8
 8019c0c:	46bd      	mov	sp, r7
 8019c0e:	bd80      	pop	{r7, pc}

08019c10 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019c10:	b580      	push	{r7, lr}
 8019c12:	b08e      	sub	sp, #56	; 0x38
 8019c14:	af00      	add	r7, sp, #0
 8019c16:	60f8      	str	r0, [r7, #12]
 8019c18:	60b9      	str	r1, [r7, #8]
 8019c1a:	607a      	str	r2, [r7, #4]
 8019c1c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8019c1e:	f107 0314 	add.w	r3, r7, #20
 8019c22:	2224      	movs	r2, #36	; 0x24
 8019c24:	2100      	movs	r1, #0
 8019c26:	4618      	mov	r0, r3
 8019c28:	f000 fa74 	bl	801a114 <memset>
 8019c2c:	68fb      	ldr	r3, [r7, #12]
 8019c2e:	617b      	str	r3, [r7, #20]
 8019c30:	683b      	ldr	r3, [r7, #0]
 8019c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8019c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019c36:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8019c38:	f107 0314 	add.w	r3, r7, #20
 8019c3c:	461a      	mov	r2, r3
 8019c3e:	6879      	ldr	r1, [r7, #4]
 8019c40:	68b8      	ldr	r0, [r7, #8]
 8019c42:	f7f1 f82a 	bl	800ac9a <osThreadNew>
 8019c46:	4603      	mov	r3, r0
#endif
}
 8019c48:	4618      	mov	r0, r3
 8019c4a:	3738      	adds	r7, #56	; 0x38
 8019c4c:	46bd      	mov	sp, r7
 8019c4e:	bd80      	pop	{r7, pc}

08019c50 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019c50:	b580      	push	{r7, lr}
 8019c52:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8019c54:	4b04      	ldr	r3, [pc, #16]	; (8019c68 <sys_arch_protect+0x18>)
 8019c56:	681b      	ldr	r3, [r3, #0]
 8019c58:	f04f 31ff 	mov.w	r1, #4294967295
 8019c5c:	4618      	mov	r0, r3
 8019c5e:	f7f1 f95b 	bl	800af18 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8019c62:	2301      	movs	r3, #1
}
 8019c64:	4618      	mov	r0, r3
 8019c66:	bd80      	pop	{r7, pc}
 8019c68:	24015184 	.word	0x24015184

08019c6c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019c6c:	b580      	push	{r7, lr}
 8019c6e:	b082      	sub	sp, #8
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019c74:	4b04      	ldr	r3, [pc, #16]	; (8019c88 <sys_arch_unprotect+0x1c>)
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	4618      	mov	r0, r3
 8019c7a:	f7f1 f998 	bl	800afae <osMutexRelease>
}
 8019c7e:	bf00      	nop
 8019c80:	3708      	adds	r7, #8
 8019c82:	46bd      	mov	sp, r7
 8019c84:	bd80      	pop	{r7, pc}
 8019c86:	bf00      	nop
 8019c88:	24015184 	.word	0x24015184

08019c8c <rand>:
 8019c8c:	4b16      	ldr	r3, [pc, #88]	; (8019ce8 <rand+0x5c>)
 8019c8e:	b510      	push	{r4, lr}
 8019c90:	681c      	ldr	r4, [r3, #0]
 8019c92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019c94:	b9b3      	cbnz	r3, 8019cc4 <rand+0x38>
 8019c96:	2018      	movs	r0, #24
 8019c98:	f000 fb7e 	bl	801a398 <malloc>
 8019c9c:	4602      	mov	r2, r0
 8019c9e:	6320      	str	r0, [r4, #48]	; 0x30
 8019ca0:	b920      	cbnz	r0, 8019cac <rand+0x20>
 8019ca2:	4b12      	ldr	r3, [pc, #72]	; (8019cec <rand+0x60>)
 8019ca4:	4812      	ldr	r0, [pc, #72]	; (8019cf0 <rand+0x64>)
 8019ca6:	2152      	movs	r1, #82	; 0x52
 8019ca8:	f000 fb0c 	bl	801a2c4 <__assert_func>
 8019cac:	4911      	ldr	r1, [pc, #68]	; (8019cf4 <rand+0x68>)
 8019cae:	4b12      	ldr	r3, [pc, #72]	; (8019cf8 <rand+0x6c>)
 8019cb0:	e9c0 1300 	strd	r1, r3, [r0]
 8019cb4:	4b11      	ldr	r3, [pc, #68]	; (8019cfc <rand+0x70>)
 8019cb6:	6083      	str	r3, [r0, #8]
 8019cb8:	230b      	movs	r3, #11
 8019cba:	8183      	strh	r3, [r0, #12]
 8019cbc:	2100      	movs	r1, #0
 8019cbe:	2001      	movs	r0, #1
 8019cc0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019cc4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019cc6:	480e      	ldr	r0, [pc, #56]	; (8019d00 <rand+0x74>)
 8019cc8:	690b      	ldr	r3, [r1, #16]
 8019cca:	694c      	ldr	r4, [r1, #20]
 8019ccc:	4a0d      	ldr	r2, [pc, #52]	; (8019d04 <rand+0x78>)
 8019cce:	4358      	muls	r0, r3
 8019cd0:	fb02 0004 	mla	r0, r2, r4, r0
 8019cd4:	fba3 3202 	umull	r3, r2, r3, r2
 8019cd8:	3301      	adds	r3, #1
 8019cda:	eb40 0002 	adc.w	r0, r0, r2
 8019cde:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8019ce2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019ce6:	bd10      	pop	{r4, pc}
 8019ce8:	2400008c 	.word	0x2400008c
 8019cec:	0801e2ce 	.word	0x0801e2ce
 8019cf0:	0801e2e5 	.word	0x0801e2e5
 8019cf4:	abcd330e 	.word	0xabcd330e
 8019cf8:	e66d1234 	.word	0xe66d1234
 8019cfc:	0005deec 	.word	0x0005deec
 8019d00:	5851f42d 	.word	0x5851f42d
 8019d04:	4c957f2d 	.word	0x4c957f2d

08019d08 <std>:
 8019d08:	2300      	movs	r3, #0
 8019d0a:	b510      	push	{r4, lr}
 8019d0c:	4604      	mov	r4, r0
 8019d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8019d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019d16:	6083      	str	r3, [r0, #8]
 8019d18:	8181      	strh	r1, [r0, #12]
 8019d1a:	6643      	str	r3, [r0, #100]	; 0x64
 8019d1c:	81c2      	strh	r2, [r0, #14]
 8019d1e:	6183      	str	r3, [r0, #24]
 8019d20:	4619      	mov	r1, r3
 8019d22:	2208      	movs	r2, #8
 8019d24:	305c      	adds	r0, #92	; 0x5c
 8019d26:	f000 f9f5 	bl	801a114 <memset>
 8019d2a:	4b05      	ldr	r3, [pc, #20]	; (8019d40 <std+0x38>)
 8019d2c:	6263      	str	r3, [r4, #36]	; 0x24
 8019d2e:	4b05      	ldr	r3, [pc, #20]	; (8019d44 <std+0x3c>)
 8019d30:	62a3      	str	r3, [r4, #40]	; 0x28
 8019d32:	4b05      	ldr	r3, [pc, #20]	; (8019d48 <std+0x40>)
 8019d34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019d36:	4b05      	ldr	r3, [pc, #20]	; (8019d4c <std+0x44>)
 8019d38:	6224      	str	r4, [r4, #32]
 8019d3a:	6323      	str	r3, [r4, #48]	; 0x30
 8019d3c:	bd10      	pop	{r4, pc}
 8019d3e:	bf00      	nop
 8019d40:	08019f45 	.word	0x08019f45
 8019d44:	08019f67 	.word	0x08019f67
 8019d48:	08019f9f 	.word	0x08019f9f
 8019d4c:	08019fc3 	.word	0x08019fc3

08019d50 <stdio_exit_handler>:
 8019d50:	4a02      	ldr	r2, [pc, #8]	; (8019d5c <stdio_exit_handler+0xc>)
 8019d52:	4903      	ldr	r1, [pc, #12]	; (8019d60 <stdio_exit_handler+0x10>)
 8019d54:	4803      	ldr	r0, [pc, #12]	; (8019d64 <stdio_exit_handler+0x14>)
 8019d56:	f000 b869 	b.w	8019e2c <_fwalk_sglue>
 8019d5a:	bf00      	nop
 8019d5c:	24000034 	.word	0x24000034
 8019d60:	0801abb5 	.word	0x0801abb5
 8019d64:	24000040 	.word	0x24000040

08019d68 <cleanup_stdio>:
 8019d68:	6841      	ldr	r1, [r0, #4]
 8019d6a:	4b0c      	ldr	r3, [pc, #48]	; (8019d9c <cleanup_stdio+0x34>)
 8019d6c:	4299      	cmp	r1, r3
 8019d6e:	b510      	push	{r4, lr}
 8019d70:	4604      	mov	r4, r0
 8019d72:	d001      	beq.n	8019d78 <cleanup_stdio+0x10>
 8019d74:	f000 ff1e 	bl	801abb4 <_fflush_r>
 8019d78:	68a1      	ldr	r1, [r4, #8]
 8019d7a:	4b09      	ldr	r3, [pc, #36]	; (8019da0 <cleanup_stdio+0x38>)
 8019d7c:	4299      	cmp	r1, r3
 8019d7e:	d002      	beq.n	8019d86 <cleanup_stdio+0x1e>
 8019d80:	4620      	mov	r0, r4
 8019d82:	f000 ff17 	bl	801abb4 <_fflush_r>
 8019d86:	68e1      	ldr	r1, [r4, #12]
 8019d88:	4b06      	ldr	r3, [pc, #24]	; (8019da4 <cleanup_stdio+0x3c>)
 8019d8a:	4299      	cmp	r1, r3
 8019d8c:	d004      	beq.n	8019d98 <cleanup_stdio+0x30>
 8019d8e:	4620      	mov	r0, r4
 8019d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d94:	f000 bf0e 	b.w	801abb4 <_fflush_r>
 8019d98:	bd10      	pop	{r4, pc}
 8019d9a:	bf00      	nop
 8019d9c:	24015188 	.word	0x24015188
 8019da0:	240151f0 	.word	0x240151f0
 8019da4:	24015258 	.word	0x24015258

08019da8 <global_stdio_init.part.0>:
 8019da8:	b510      	push	{r4, lr}
 8019daa:	4b0b      	ldr	r3, [pc, #44]	; (8019dd8 <global_stdio_init.part.0+0x30>)
 8019dac:	4c0b      	ldr	r4, [pc, #44]	; (8019ddc <global_stdio_init.part.0+0x34>)
 8019dae:	4a0c      	ldr	r2, [pc, #48]	; (8019de0 <global_stdio_init.part.0+0x38>)
 8019db0:	601a      	str	r2, [r3, #0]
 8019db2:	4620      	mov	r0, r4
 8019db4:	2200      	movs	r2, #0
 8019db6:	2104      	movs	r1, #4
 8019db8:	f7ff ffa6 	bl	8019d08 <std>
 8019dbc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8019dc0:	2201      	movs	r2, #1
 8019dc2:	2109      	movs	r1, #9
 8019dc4:	f7ff ffa0 	bl	8019d08 <std>
 8019dc8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8019dcc:	2202      	movs	r2, #2
 8019dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019dd2:	2112      	movs	r1, #18
 8019dd4:	f7ff bf98 	b.w	8019d08 <std>
 8019dd8:	240152c0 	.word	0x240152c0
 8019ddc:	24015188 	.word	0x24015188
 8019de0:	08019d51 	.word	0x08019d51

08019de4 <__sfp_lock_acquire>:
 8019de4:	4801      	ldr	r0, [pc, #4]	; (8019dec <__sfp_lock_acquire+0x8>)
 8019de6:	f000 ba5d 	b.w	801a2a4 <__retarget_lock_acquire_recursive>
 8019dea:	bf00      	nop
 8019dec:	240152c9 	.word	0x240152c9

08019df0 <__sfp_lock_release>:
 8019df0:	4801      	ldr	r0, [pc, #4]	; (8019df8 <__sfp_lock_release+0x8>)
 8019df2:	f000 ba58 	b.w	801a2a6 <__retarget_lock_release_recursive>
 8019df6:	bf00      	nop
 8019df8:	240152c9 	.word	0x240152c9

08019dfc <__sinit>:
 8019dfc:	b510      	push	{r4, lr}
 8019dfe:	4604      	mov	r4, r0
 8019e00:	f7ff fff0 	bl	8019de4 <__sfp_lock_acquire>
 8019e04:	6a23      	ldr	r3, [r4, #32]
 8019e06:	b11b      	cbz	r3, 8019e10 <__sinit+0x14>
 8019e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e0c:	f7ff bff0 	b.w	8019df0 <__sfp_lock_release>
 8019e10:	4b04      	ldr	r3, [pc, #16]	; (8019e24 <__sinit+0x28>)
 8019e12:	6223      	str	r3, [r4, #32]
 8019e14:	4b04      	ldr	r3, [pc, #16]	; (8019e28 <__sinit+0x2c>)
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	d1f5      	bne.n	8019e08 <__sinit+0xc>
 8019e1c:	f7ff ffc4 	bl	8019da8 <global_stdio_init.part.0>
 8019e20:	e7f2      	b.n	8019e08 <__sinit+0xc>
 8019e22:	bf00      	nop
 8019e24:	08019d69 	.word	0x08019d69
 8019e28:	240152c0 	.word	0x240152c0

08019e2c <_fwalk_sglue>:
 8019e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e30:	4607      	mov	r7, r0
 8019e32:	4688      	mov	r8, r1
 8019e34:	4614      	mov	r4, r2
 8019e36:	2600      	movs	r6, #0
 8019e38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019e3c:	f1b9 0901 	subs.w	r9, r9, #1
 8019e40:	d505      	bpl.n	8019e4e <_fwalk_sglue+0x22>
 8019e42:	6824      	ldr	r4, [r4, #0]
 8019e44:	2c00      	cmp	r4, #0
 8019e46:	d1f7      	bne.n	8019e38 <_fwalk_sglue+0xc>
 8019e48:	4630      	mov	r0, r6
 8019e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e4e:	89ab      	ldrh	r3, [r5, #12]
 8019e50:	2b01      	cmp	r3, #1
 8019e52:	d907      	bls.n	8019e64 <_fwalk_sglue+0x38>
 8019e54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019e58:	3301      	adds	r3, #1
 8019e5a:	d003      	beq.n	8019e64 <_fwalk_sglue+0x38>
 8019e5c:	4629      	mov	r1, r5
 8019e5e:	4638      	mov	r0, r7
 8019e60:	47c0      	blx	r8
 8019e62:	4306      	orrs	r6, r0
 8019e64:	3568      	adds	r5, #104	; 0x68
 8019e66:	e7e9      	b.n	8019e3c <_fwalk_sglue+0x10>

08019e68 <iprintf>:
 8019e68:	b40f      	push	{r0, r1, r2, r3}
 8019e6a:	b507      	push	{r0, r1, r2, lr}
 8019e6c:	4906      	ldr	r1, [pc, #24]	; (8019e88 <iprintf+0x20>)
 8019e6e:	ab04      	add	r3, sp, #16
 8019e70:	6808      	ldr	r0, [r1, #0]
 8019e72:	f853 2b04 	ldr.w	r2, [r3], #4
 8019e76:	6881      	ldr	r1, [r0, #8]
 8019e78:	9301      	str	r3, [sp, #4]
 8019e7a:	f000 fb6b 	bl	801a554 <_vfiprintf_r>
 8019e7e:	b003      	add	sp, #12
 8019e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8019e84:	b004      	add	sp, #16
 8019e86:	4770      	bx	lr
 8019e88:	2400008c 	.word	0x2400008c

08019e8c <_puts_r>:
 8019e8c:	6a03      	ldr	r3, [r0, #32]
 8019e8e:	b570      	push	{r4, r5, r6, lr}
 8019e90:	6884      	ldr	r4, [r0, #8]
 8019e92:	4605      	mov	r5, r0
 8019e94:	460e      	mov	r6, r1
 8019e96:	b90b      	cbnz	r3, 8019e9c <_puts_r+0x10>
 8019e98:	f7ff ffb0 	bl	8019dfc <__sinit>
 8019e9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019e9e:	07db      	lsls	r3, r3, #31
 8019ea0:	d405      	bmi.n	8019eae <_puts_r+0x22>
 8019ea2:	89a3      	ldrh	r3, [r4, #12]
 8019ea4:	0598      	lsls	r0, r3, #22
 8019ea6:	d402      	bmi.n	8019eae <_puts_r+0x22>
 8019ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019eaa:	f000 f9fb 	bl	801a2a4 <__retarget_lock_acquire_recursive>
 8019eae:	89a3      	ldrh	r3, [r4, #12]
 8019eb0:	0719      	lsls	r1, r3, #28
 8019eb2:	d513      	bpl.n	8019edc <_puts_r+0x50>
 8019eb4:	6923      	ldr	r3, [r4, #16]
 8019eb6:	b18b      	cbz	r3, 8019edc <_puts_r+0x50>
 8019eb8:	3e01      	subs	r6, #1
 8019eba:	68a3      	ldr	r3, [r4, #8]
 8019ebc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019ec0:	3b01      	subs	r3, #1
 8019ec2:	60a3      	str	r3, [r4, #8]
 8019ec4:	b9e9      	cbnz	r1, 8019f02 <_puts_r+0x76>
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	da2e      	bge.n	8019f28 <_puts_r+0x9c>
 8019eca:	4622      	mov	r2, r4
 8019ecc:	210a      	movs	r1, #10
 8019ece:	4628      	mov	r0, r5
 8019ed0:	f000 f87b 	bl	8019fca <__swbuf_r>
 8019ed4:	3001      	adds	r0, #1
 8019ed6:	d007      	beq.n	8019ee8 <_puts_r+0x5c>
 8019ed8:	250a      	movs	r5, #10
 8019eda:	e007      	b.n	8019eec <_puts_r+0x60>
 8019edc:	4621      	mov	r1, r4
 8019ede:	4628      	mov	r0, r5
 8019ee0:	f000 f8b0 	bl	801a044 <__swsetup_r>
 8019ee4:	2800      	cmp	r0, #0
 8019ee6:	d0e7      	beq.n	8019eb8 <_puts_r+0x2c>
 8019ee8:	f04f 35ff 	mov.w	r5, #4294967295
 8019eec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019eee:	07da      	lsls	r2, r3, #31
 8019ef0:	d405      	bmi.n	8019efe <_puts_r+0x72>
 8019ef2:	89a3      	ldrh	r3, [r4, #12]
 8019ef4:	059b      	lsls	r3, r3, #22
 8019ef6:	d402      	bmi.n	8019efe <_puts_r+0x72>
 8019ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019efa:	f000 f9d4 	bl	801a2a6 <__retarget_lock_release_recursive>
 8019efe:	4628      	mov	r0, r5
 8019f00:	bd70      	pop	{r4, r5, r6, pc}
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	da04      	bge.n	8019f10 <_puts_r+0x84>
 8019f06:	69a2      	ldr	r2, [r4, #24]
 8019f08:	429a      	cmp	r2, r3
 8019f0a:	dc06      	bgt.n	8019f1a <_puts_r+0x8e>
 8019f0c:	290a      	cmp	r1, #10
 8019f0e:	d004      	beq.n	8019f1a <_puts_r+0x8e>
 8019f10:	6823      	ldr	r3, [r4, #0]
 8019f12:	1c5a      	adds	r2, r3, #1
 8019f14:	6022      	str	r2, [r4, #0]
 8019f16:	7019      	strb	r1, [r3, #0]
 8019f18:	e7cf      	b.n	8019eba <_puts_r+0x2e>
 8019f1a:	4622      	mov	r2, r4
 8019f1c:	4628      	mov	r0, r5
 8019f1e:	f000 f854 	bl	8019fca <__swbuf_r>
 8019f22:	3001      	adds	r0, #1
 8019f24:	d1c9      	bne.n	8019eba <_puts_r+0x2e>
 8019f26:	e7df      	b.n	8019ee8 <_puts_r+0x5c>
 8019f28:	6823      	ldr	r3, [r4, #0]
 8019f2a:	250a      	movs	r5, #10
 8019f2c:	1c5a      	adds	r2, r3, #1
 8019f2e:	6022      	str	r2, [r4, #0]
 8019f30:	701d      	strb	r5, [r3, #0]
 8019f32:	e7db      	b.n	8019eec <_puts_r+0x60>

08019f34 <puts>:
 8019f34:	4b02      	ldr	r3, [pc, #8]	; (8019f40 <puts+0xc>)
 8019f36:	4601      	mov	r1, r0
 8019f38:	6818      	ldr	r0, [r3, #0]
 8019f3a:	f7ff bfa7 	b.w	8019e8c <_puts_r>
 8019f3e:	bf00      	nop
 8019f40:	2400008c 	.word	0x2400008c

08019f44 <__sread>:
 8019f44:	b510      	push	{r4, lr}
 8019f46:	460c      	mov	r4, r1
 8019f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f4c:	f000 f962 	bl	801a214 <_read_r>
 8019f50:	2800      	cmp	r0, #0
 8019f52:	bfab      	itete	ge
 8019f54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019f56:	89a3      	ldrhlt	r3, [r4, #12]
 8019f58:	181b      	addge	r3, r3, r0
 8019f5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019f5e:	bfac      	ite	ge
 8019f60:	6563      	strge	r3, [r4, #84]	; 0x54
 8019f62:	81a3      	strhlt	r3, [r4, #12]
 8019f64:	bd10      	pop	{r4, pc}

08019f66 <__swrite>:
 8019f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f6a:	461f      	mov	r7, r3
 8019f6c:	898b      	ldrh	r3, [r1, #12]
 8019f6e:	05db      	lsls	r3, r3, #23
 8019f70:	4605      	mov	r5, r0
 8019f72:	460c      	mov	r4, r1
 8019f74:	4616      	mov	r6, r2
 8019f76:	d505      	bpl.n	8019f84 <__swrite+0x1e>
 8019f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f7c:	2302      	movs	r3, #2
 8019f7e:	2200      	movs	r2, #0
 8019f80:	f000 f936 	bl	801a1f0 <_lseek_r>
 8019f84:	89a3      	ldrh	r3, [r4, #12]
 8019f86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019f8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019f8e:	81a3      	strh	r3, [r4, #12]
 8019f90:	4632      	mov	r2, r6
 8019f92:	463b      	mov	r3, r7
 8019f94:	4628      	mov	r0, r5
 8019f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019f9a:	f000 b94d 	b.w	801a238 <_write_r>

08019f9e <__sseek>:
 8019f9e:	b510      	push	{r4, lr}
 8019fa0:	460c      	mov	r4, r1
 8019fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019fa6:	f000 f923 	bl	801a1f0 <_lseek_r>
 8019faa:	1c43      	adds	r3, r0, #1
 8019fac:	89a3      	ldrh	r3, [r4, #12]
 8019fae:	bf15      	itete	ne
 8019fb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8019fb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019fb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019fba:	81a3      	strheq	r3, [r4, #12]
 8019fbc:	bf18      	it	ne
 8019fbe:	81a3      	strhne	r3, [r4, #12]
 8019fc0:	bd10      	pop	{r4, pc}

08019fc2 <__sclose>:
 8019fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019fc6:	f000 b8ad 	b.w	801a124 <_close_r>

08019fca <__swbuf_r>:
 8019fca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fcc:	460e      	mov	r6, r1
 8019fce:	4614      	mov	r4, r2
 8019fd0:	4605      	mov	r5, r0
 8019fd2:	b118      	cbz	r0, 8019fdc <__swbuf_r+0x12>
 8019fd4:	6a03      	ldr	r3, [r0, #32]
 8019fd6:	b90b      	cbnz	r3, 8019fdc <__swbuf_r+0x12>
 8019fd8:	f7ff ff10 	bl	8019dfc <__sinit>
 8019fdc:	69a3      	ldr	r3, [r4, #24]
 8019fde:	60a3      	str	r3, [r4, #8]
 8019fe0:	89a3      	ldrh	r3, [r4, #12]
 8019fe2:	071a      	lsls	r2, r3, #28
 8019fe4:	d525      	bpl.n	801a032 <__swbuf_r+0x68>
 8019fe6:	6923      	ldr	r3, [r4, #16]
 8019fe8:	b31b      	cbz	r3, 801a032 <__swbuf_r+0x68>
 8019fea:	6823      	ldr	r3, [r4, #0]
 8019fec:	6922      	ldr	r2, [r4, #16]
 8019fee:	1a98      	subs	r0, r3, r2
 8019ff0:	6963      	ldr	r3, [r4, #20]
 8019ff2:	b2f6      	uxtb	r6, r6
 8019ff4:	4283      	cmp	r3, r0
 8019ff6:	4637      	mov	r7, r6
 8019ff8:	dc04      	bgt.n	801a004 <__swbuf_r+0x3a>
 8019ffa:	4621      	mov	r1, r4
 8019ffc:	4628      	mov	r0, r5
 8019ffe:	f000 fdd9 	bl	801abb4 <_fflush_r>
 801a002:	b9e0      	cbnz	r0, 801a03e <__swbuf_r+0x74>
 801a004:	68a3      	ldr	r3, [r4, #8]
 801a006:	3b01      	subs	r3, #1
 801a008:	60a3      	str	r3, [r4, #8]
 801a00a:	6823      	ldr	r3, [r4, #0]
 801a00c:	1c5a      	adds	r2, r3, #1
 801a00e:	6022      	str	r2, [r4, #0]
 801a010:	701e      	strb	r6, [r3, #0]
 801a012:	6962      	ldr	r2, [r4, #20]
 801a014:	1c43      	adds	r3, r0, #1
 801a016:	429a      	cmp	r2, r3
 801a018:	d004      	beq.n	801a024 <__swbuf_r+0x5a>
 801a01a:	89a3      	ldrh	r3, [r4, #12]
 801a01c:	07db      	lsls	r3, r3, #31
 801a01e:	d506      	bpl.n	801a02e <__swbuf_r+0x64>
 801a020:	2e0a      	cmp	r6, #10
 801a022:	d104      	bne.n	801a02e <__swbuf_r+0x64>
 801a024:	4621      	mov	r1, r4
 801a026:	4628      	mov	r0, r5
 801a028:	f000 fdc4 	bl	801abb4 <_fflush_r>
 801a02c:	b938      	cbnz	r0, 801a03e <__swbuf_r+0x74>
 801a02e:	4638      	mov	r0, r7
 801a030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a032:	4621      	mov	r1, r4
 801a034:	4628      	mov	r0, r5
 801a036:	f000 f805 	bl	801a044 <__swsetup_r>
 801a03a:	2800      	cmp	r0, #0
 801a03c:	d0d5      	beq.n	8019fea <__swbuf_r+0x20>
 801a03e:	f04f 37ff 	mov.w	r7, #4294967295
 801a042:	e7f4      	b.n	801a02e <__swbuf_r+0x64>

0801a044 <__swsetup_r>:
 801a044:	b538      	push	{r3, r4, r5, lr}
 801a046:	4b2a      	ldr	r3, [pc, #168]	; (801a0f0 <__swsetup_r+0xac>)
 801a048:	4605      	mov	r5, r0
 801a04a:	6818      	ldr	r0, [r3, #0]
 801a04c:	460c      	mov	r4, r1
 801a04e:	b118      	cbz	r0, 801a058 <__swsetup_r+0x14>
 801a050:	6a03      	ldr	r3, [r0, #32]
 801a052:	b90b      	cbnz	r3, 801a058 <__swsetup_r+0x14>
 801a054:	f7ff fed2 	bl	8019dfc <__sinit>
 801a058:	89a3      	ldrh	r3, [r4, #12]
 801a05a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a05e:	0718      	lsls	r0, r3, #28
 801a060:	d422      	bmi.n	801a0a8 <__swsetup_r+0x64>
 801a062:	06d9      	lsls	r1, r3, #27
 801a064:	d407      	bmi.n	801a076 <__swsetup_r+0x32>
 801a066:	2309      	movs	r3, #9
 801a068:	602b      	str	r3, [r5, #0]
 801a06a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a06e:	81a3      	strh	r3, [r4, #12]
 801a070:	f04f 30ff 	mov.w	r0, #4294967295
 801a074:	e034      	b.n	801a0e0 <__swsetup_r+0x9c>
 801a076:	0758      	lsls	r0, r3, #29
 801a078:	d512      	bpl.n	801a0a0 <__swsetup_r+0x5c>
 801a07a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a07c:	b141      	cbz	r1, 801a090 <__swsetup_r+0x4c>
 801a07e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a082:	4299      	cmp	r1, r3
 801a084:	d002      	beq.n	801a08c <__swsetup_r+0x48>
 801a086:	4628      	mov	r0, r5
 801a088:	f000 f93a 	bl	801a300 <_free_r>
 801a08c:	2300      	movs	r3, #0
 801a08e:	6363      	str	r3, [r4, #52]	; 0x34
 801a090:	89a3      	ldrh	r3, [r4, #12]
 801a092:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a096:	81a3      	strh	r3, [r4, #12]
 801a098:	2300      	movs	r3, #0
 801a09a:	6063      	str	r3, [r4, #4]
 801a09c:	6923      	ldr	r3, [r4, #16]
 801a09e:	6023      	str	r3, [r4, #0]
 801a0a0:	89a3      	ldrh	r3, [r4, #12]
 801a0a2:	f043 0308 	orr.w	r3, r3, #8
 801a0a6:	81a3      	strh	r3, [r4, #12]
 801a0a8:	6923      	ldr	r3, [r4, #16]
 801a0aa:	b94b      	cbnz	r3, 801a0c0 <__swsetup_r+0x7c>
 801a0ac:	89a3      	ldrh	r3, [r4, #12]
 801a0ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a0b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a0b6:	d003      	beq.n	801a0c0 <__swsetup_r+0x7c>
 801a0b8:	4621      	mov	r1, r4
 801a0ba:	4628      	mov	r0, r5
 801a0bc:	f000 fdda 	bl	801ac74 <__smakebuf_r>
 801a0c0:	89a0      	ldrh	r0, [r4, #12]
 801a0c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a0c6:	f010 0301 	ands.w	r3, r0, #1
 801a0ca:	d00a      	beq.n	801a0e2 <__swsetup_r+0x9e>
 801a0cc:	2300      	movs	r3, #0
 801a0ce:	60a3      	str	r3, [r4, #8]
 801a0d0:	6963      	ldr	r3, [r4, #20]
 801a0d2:	425b      	negs	r3, r3
 801a0d4:	61a3      	str	r3, [r4, #24]
 801a0d6:	6923      	ldr	r3, [r4, #16]
 801a0d8:	b943      	cbnz	r3, 801a0ec <__swsetup_r+0xa8>
 801a0da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a0de:	d1c4      	bne.n	801a06a <__swsetup_r+0x26>
 801a0e0:	bd38      	pop	{r3, r4, r5, pc}
 801a0e2:	0781      	lsls	r1, r0, #30
 801a0e4:	bf58      	it	pl
 801a0e6:	6963      	ldrpl	r3, [r4, #20]
 801a0e8:	60a3      	str	r3, [r4, #8]
 801a0ea:	e7f4      	b.n	801a0d6 <__swsetup_r+0x92>
 801a0ec:	2000      	movs	r0, #0
 801a0ee:	e7f7      	b.n	801a0e0 <__swsetup_r+0x9c>
 801a0f0:	2400008c 	.word	0x2400008c

0801a0f4 <memcmp>:
 801a0f4:	b510      	push	{r4, lr}
 801a0f6:	3901      	subs	r1, #1
 801a0f8:	4402      	add	r2, r0
 801a0fa:	4290      	cmp	r0, r2
 801a0fc:	d101      	bne.n	801a102 <memcmp+0xe>
 801a0fe:	2000      	movs	r0, #0
 801a100:	e005      	b.n	801a10e <memcmp+0x1a>
 801a102:	7803      	ldrb	r3, [r0, #0]
 801a104:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a108:	42a3      	cmp	r3, r4
 801a10a:	d001      	beq.n	801a110 <memcmp+0x1c>
 801a10c:	1b18      	subs	r0, r3, r4
 801a10e:	bd10      	pop	{r4, pc}
 801a110:	3001      	adds	r0, #1
 801a112:	e7f2      	b.n	801a0fa <memcmp+0x6>

0801a114 <memset>:
 801a114:	4402      	add	r2, r0
 801a116:	4603      	mov	r3, r0
 801a118:	4293      	cmp	r3, r2
 801a11a:	d100      	bne.n	801a11e <memset+0xa>
 801a11c:	4770      	bx	lr
 801a11e:	f803 1b01 	strb.w	r1, [r3], #1
 801a122:	e7f9      	b.n	801a118 <memset+0x4>

0801a124 <_close_r>:
 801a124:	b538      	push	{r3, r4, r5, lr}
 801a126:	4d06      	ldr	r5, [pc, #24]	; (801a140 <_close_r+0x1c>)
 801a128:	2300      	movs	r3, #0
 801a12a:	4604      	mov	r4, r0
 801a12c:	4608      	mov	r0, r1
 801a12e:	602b      	str	r3, [r5, #0]
 801a130:	f7e7 fe4b 	bl	8001dca <_close>
 801a134:	1c43      	adds	r3, r0, #1
 801a136:	d102      	bne.n	801a13e <_close_r+0x1a>
 801a138:	682b      	ldr	r3, [r5, #0]
 801a13a:	b103      	cbz	r3, 801a13e <_close_r+0x1a>
 801a13c:	6023      	str	r3, [r4, #0]
 801a13e:	bd38      	pop	{r3, r4, r5, pc}
 801a140:	240152c4 	.word	0x240152c4

0801a144 <_reclaim_reent>:
 801a144:	4b29      	ldr	r3, [pc, #164]	; (801a1ec <_reclaim_reent+0xa8>)
 801a146:	681b      	ldr	r3, [r3, #0]
 801a148:	4283      	cmp	r3, r0
 801a14a:	b570      	push	{r4, r5, r6, lr}
 801a14c:	4604      	mov	r4, r0
 801a14e:	d04b      	beq.n	801a1e8 <_reclaim_reent+0xa4>
 801a150:	69c3      	ldr	r3, [r0, #28]
 801a152:	b143      	cbz	r3, 801a166 <_reclaim_reent+0x22>
 801a154:	68db      	ldr	r3, [r3, #12]
 801a156:	2b00      	cmp	r3, #0
 801a158:	d144      	bne.n	801a1e4 <_reclaim_reent+0xa0>
 801a15a:	69e3      	ldr	r3, [r4, #28]
 801a15c:	6819      	ldr	r1, [r3, #0]
 801a15e:	b111      	cbz	r1, 801a166 <_reclaim_reent+0x22>
 801a160:	4620      	mov	r0, r4
 801a162:	f000 f8cd 	bl	801a300 <_free_r>
 801a166:	6961      	ldr	r1, [r4, #20]
 801a168:	b111      	cbz	r1, 801a170 <_reclaim_reent+0x2c>
 801a16a:	4620      	mov	r0, r4
 801a16c:	f000 f8c8 	bl	801a300 <_free_r>
 801a170:	69e1      	ldr	r1, [r4, #28]
 801a172:	b111      	cbz	r1, 801a17a <_reclaim_reent+0x36>
 801a174:	4620      	mov	r0, r4
 801a176:	f000 f8c3 	bl	801a300 <_free_r>
 801a17a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a17c:	b111      	cbz	r1, 801a184 <_reclaim_reent+0x40>
 801a17e:	4620      	mov	r0, r4
 801a180:	f000 f8be 	bl	801a300 <_free_r>
 801a184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a186:	b111      	cbz	r1, 801a18e <_reclaim_reent+0x4a>
 801a188:	4620      	mov	r0, r4
 801a18a:	f000 f8b9 	bl	801a300 <_free_r>
 801a18e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a190:	b111      	cbz	r1, 801a198 <_reclaim_reent+0x54>
 801a192:	4620      	mov	r0, r4
 801a194:	f000 f8b4 	bl	801a300 <_free_r>
 801a198:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a19a:	b111      	cbz	r1, 801a1a2 <_reclaim_reent+0x5e>
 801a19c:	4620      	mov	r0, r4
 801a19e:	f000 f8af 	bl	801a300 <_free_r>
 801a1a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801a1a4:	b111      	cbz	r1, 801a1ac <_reclaim_reent+0x68>
 801a1a6:	4620      	mov	r0, r4
 801a1a8:	f000 f8aa 	bl	801a300 <_free_r>
 801a1ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801a1ae:	b111      	cbz	r1, 801a1b6 <_reclaim_reent+0x72>
 801a1b0:	4620      	mov	r0, r4
 801a1b2:	f000 f8a5 	bl	801a300 <_free_r>
 801a1b6:	6a23      	ldr	r3, [r4, #32]
 801a1b8:	b1b3      	cbz	r3, 801a1e8 <_reclaim_reent+0xa4>
 801a1ba:	4620      	mov	r0, r4
 801a1bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a1c0:	4718      	bx	r3
 801a1c2:	5949      	ldr	r1, [r1, r5]
 801a1c4:	b941      	cbnz	r1, 801a1d8 <_reclaim_reent+0x94>
 801a1c6:	3504      	adds	r5, #4
 801a1c8:	69e3      	ldr	r3, [r4, #28]
 801a1ca:	2d80      	cmp	r5, #128	; 0x80
 801a1cc:	68d9      	ldr	r1, [r3, #12]
 801a1ce:	d1f8      	bne.n	801a1c2 <_reclaim_reent+0x7e>
 801a1d0:	4620      	mov	r0, r4
 801a1d2:	f000 f895 	bl	801a300 <_free_r>
 801a1d6:	e7c0      	b.n	801a15a <_reclaim_reent+0x16>
 801a1d8:	680e      	ldr	r6, [r1, #0]
 801a1da:	4620      	mov	r0, r4
 801a1dc:	f000 f890 	bl	801a300 <_free_r>
 801a1e0:	4631      	mov	r1, r6
 801a1e2:	e7ef      	b.n	801a1c4 <_reclaim_reent+0x80>
 801a1e4:	2500      	movs	r5, #0
 801a1e6:	e7ef      	b.n	801a1c8 <_reclaim_reent+0x84>
 801a1e8:	bd70      	pop	{r4, r5, r6, pc}
 801a1ea:	bf00      	nop
 801a1ec:	2400008c 	.word	0x2400008c

0801a1f0 <_lseek_r>:
 801a1f0:	b538      	push	{r3, r4, r5, lr}
 801a1f2:	4d07      	ldr	r5, [pc, #28]	; (801a210 <_lseek_r+0x20>)
 801a1f4:	4604      	mov	r4, r0
 801a1f6:	4608      	mov	r0, r1
 801a1f8:	4611      	mov	r1, r2
 801a1fa:	2200      	movs	r2, #0
 801a1fc:	602a      	str	r2, [r5, #0]
 801a1fe:	461a      	mov	r2, r3
 801a200:	f7e7 fe0a 	bl	8001e18 <_lseek>
 801a204:	1c43      	adds	r3, r0, #1
 801a206:	d102      	bne.n	801a20e <_lseek_r+0x1e>
 801a208:	682b      	ldr	r3, [r5, #0]
 801a20a:	b103      	cbz	r3, 801a20e <_lseek_r+0x1e>
 801a20c:	6023      	str	r3, [r4, #0]
 801a20e:	bd38      	pop	{r3, r4, r5, pc}
 801a210:	240152c4 	.word	0x240152c4

0801a214 <_read_r>:
 801a214:	b538      	push	{r3, r4, r5, lr}
 801a216:	4d07      	ldr	r5, [pc, #28]	; (801a234 <_read_r+0x20>)
 801a218:	4604      	mov	r4, r0
 801a21a:	4608      	mov	r0, r1
 801a21c:	4611      	mov	r1, r2
 801a21e:	2200      	movs	r2, #0
 801a220:	602a      	str	r2, [r5, #0]
 801a222:	461a      	mov	r2, r3
 801a224:	f7e7 fdb4 	bl	8001d90 <_read>
 801a228:	1c43      	adds	r3, r0, #1
 801a22a:	d102      	bne.n	801a232 <_read_r+0x1e>
 801a22c:	682b      	ldr	r3, [r5, #0]
 801a22e:	b103      	cbz	r3, 801a232 <_read_r+0x1e>
 801a230:	6023      	str	r3, [r4, #0]
 801a232:	bd38      	pop	{r3, r4, r5, pc}
 801a234:	240152c4 	.word	0x240152c4

0801a238 <_write_r>:
 801a238:	b538      	push	{r3, r4, r5, lr}
 801a23a:	4d07      	ldr	r5, [pc, #28]	; (801a258 <_write_r+0x20>)
 801a23c:	4604      	mov	r4, r0
 801a23e:	4608      	mov	r0, r1
 801a240:	4611      	mov	r1, r2
 801a242:	2200      	movs	r2, #0
 801a244:	602a      	str	r2, [r5, #0]
 801a246:	461a      	mov	r2, r3
 801a248:	f7e7 f994 	bl	8001574 <_write>
 801a24c:	1c43      	adds	r3, r0, #1
 801a24e:	d102      	bne.n	801a256 <_write_r+0x1e>
 801a250:	682b      	ldr	r3, [r5, #0]
 801a252:	b103      	cbz	r3, 801a256 <_write_r+0x1e>
 801a254:	6023      	str	r3, [r4, #0]
 801a256:	bd38      	pop	{r3, r4, r5, pc}
 801a258:	240152c4 	.word	0x240152c4

0801a25c <__libc_init_array>:
 801a25c:	b570      	push	{r4, r5, r6, lr}
 801a25e:	4d0d      	ldr	r5, [pc, #52]	; (801a294 <__libc_init_array+0x38>)
 801a260:	4c0d      	ldr	r4, [pc, #52]	; (801a298 <__libc_init_array+0x3c>)
 801a262:	1b64      	subs	r4, r4, r5
 801a264:	10a4      	asrs	r4, r4, #2
 801a266:	2600      	movs	r6, #0
 801a268:	42a6      	cmp	r6, r4
 801a26a:	d109      	bne.n	801a280 <__libc_init_array+0x24>
 801a26c:	4d0b      	ldr	r5, [pc, #44]	; (801a29c <__libc_init_array+0x40>)
 801a26e:	4c0c      	ldr	r4, [pc, #48]	; (801a2a0 <__libc_init_array+0x44>)
 801a270:	f000 fdba 	bl	801ade8 <_init>
 801a274:	1b64      	subs	r4, r4, r5
 801a276:	10a4      	asrs	r4, r4, #2
 801a278:	2600      	movs	r6, #0
 801a27a:	42a6      	cmp	r6, r4
 801a27c:	d105      	bne.n	801a28a <__libc_init_array+0x2e>
 801a27e:	bd70      	pop	{r4, r5, r6, pc}
 801a280:	f855 3b04 	ldr.w	r3, [r5], #4
 801a284:	4798      	blx	r3
 801a286:	3601      	adds	r6, #1
 801a288:	e7ee      	b.n	801a268 <__libc_init_array+0xc>
 801a28a:	f855 3b04 	ldr.w	r3, [r5], #4
 801a28e:	4798      	blx	r3
 801a290:	3601      	adds	r6, #1
 801a292:	e7f2      	b.n	801a27a <__libc_init_array+0x1e>
 801a294:	0801e3b4 	.word	0x0801e3b4
 801a298:	0801e3b4 	.word	0x0801e3b4
 801a29c:	0801e3b4 	.word	0x0801e3b4
 801a2a0:	0801e3b8 	.word	0x0801e3b8

0801a2a4 <__retarget_lock_acquire_recursive>:
 801a2a4:	4770      	bx	lr

0801a2a6 <__retarget_lock_release_recursive>:
 801a2a6:	4770      	bx	lr

0801a2a8 <memcpy>:
 801a2a8:	440a      	add	r2, r1
 801a2aa:	4291      	cmp	r1, r2
 801a2ac:	f100 33ff 	add.w	r3, r0, #4294967295
 801a2b0:	d100      	bne.n	801a2b4 <memcpy+0xc>
 801a2b2:	4770      	bx	lr
 801a2b4:	b510      	push	{r4, lr}
 801a2b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a2ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a2be:	4291      	cmp	r1, r2
 801a2c0:	d1f9      	bne.n	801a2b6 <memcpy+0xe>
 801a2c2:	bd10      	pop	{r4, pc}

0801a2c4 <__assert_func>:
 801a2c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a2c6:	4614      	mov	r4, r2
 801a2c8:	461a      	mov	r2, r3
 801a2ca:	4b09      	ldr	r3, [pc, #36]	; (801a2f0 <__assert_func+0x2c>)
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	4605      	mov	r5, r0
 801a2d0:	68d8      	ldr	r0, [r3, #12]
 801a2d2:	b14c      	cbz	r4, 801a2e8 <__assert_func+0x24>
 801a2d4:	4b07      	ldr	r3, [pc, #28]	; (801a2f4 <__assert_func+0x30>)
 801a2d6:	9100      	str	r1, [sp, #0]
 801a2d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a2dc:	4906      	ldr	r1, [pc, #24]	; (801a2f8 <__assert_func+0x34>)
 801a2de:	462b      	mov	r3, r5
 801a2e0:	f000 fc90 	bl	801ac04 <fiprintf>
 801a2e4:	f000 fd34 	bl	801ad50 <abort>
 801a2e8:	4b04      	ldr	r3, [pc, #16]	; (801a2fc <__assert_func+0x38>)
 801a2ea:	461c      	mov	r4, r3
 801a2ec:	e7f3      	b.n	801a2d6 <__assert_func+0x12>
 801a2ee:	bf00      	nop
 801a2f0:	2400008c 	.word	0x2400008c
 801a2f4:	0801e33d 	.word	0x0801e33d
 801a2f8:	0801e34a 	.word	0x0801e34a
 801a2fc:	0801e378 	.word	0x0801e378

0801a300 <_free_r>:
 801a300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a302:	2900      	cmp	r1, #0
 801a304:	d044      	beq.n	801a390 <_free_r+0x90>
 801a306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a30a:	9001      	str	r0, [sp, #4]
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	f1a1 0404 	sub.w	r4, r1, #4
 801a312:	bfb8      	it	lt
 801a314:	18e4      	addlt	r4, r4, r3
 801a316:	f000 f8e7 	bl	801a4e8 <__malloc_lock>
 801a31a:	4a1e      	ldr	r2, [pc, #120]	; (801a394 <_free_r+0x94>)
 801a31c:	9801      	ldr	r0, [sp, #4]
 801a31e:	6813      	ldr	r3, [r2, #0]
 801a320:	b933      	cbnz	r3, 801a330 <_free_r+0x30>
 801a322:	6063      	str	r3, [r4, #4]
 801a324:	6014      	str	r4, [r2, #0]
 801a326:	b003      	add	sp, #12
 801a328:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a32c:	f000 b8e2 	b.w	801a4f4 <__malloc_unlock>
 801a330:	42a3      	cmp	r3, r4
 801a332:	d908      	bls.n	801a346 <_free_r+0x46>
 801a334:	6825      	ldr	r5, [r4, #0]
 801a336:	1961      	adds	r1, r4, r5
 801a338:	428b      	cmp	r3, r1
 801a33a:	bf01      	itttt	eq
 801a33c:	6819      	ldreq	r1, [r3, #0]
 801a33e:	685b      	ldreq	r3, [r3, #4]
 801a340:	1949      	addeq	r1, r1, r5
 801a342:	6021      	streq	r1, [r4, #0]
 801a344:	e7ed      	b.n	801a322 <_free_r+0x22>
 801a346:	461a      	mov	r2, r3
 801a348:	685b      	ldr	r3, [r3, #4]
 801a34a:	b10b      	cbz	r3, 801a350 <_free_r+0x50>
 801a34c:	42a3      	cmp	r3, r4
 801a34e:	d9fa      	bls.n	801a346 <_free_r+0x46>
 801a350:	6811      	ldr	r1, [r2, #0]
 801a352:	1855      	adds	r5, r2, r1
 801a354:	42a5      	cmp	r5, r4
 801a356:	d10b      	bne.n	801a370 <_free_r+0x70>
 801a358:	6824      	ldr	r4, [r4, #0]
 801a35a:	4421      	add	r1, r4
 801a35c:	1854      	adds	r4, r2, r1
 801a35e:	42a3      	cmp	r3, r4
 801a360:	6011      	str	r1, [r2, #0]
 801a362:	d1e0      	bne.n	801a326 <_free_r+0x26>
 801a364:	681c      	ldr	r4, [r3, #0]
 801a366:	685b      	ldr	r3, [r3, #4]
 801a368:	6053      	str	r3, [r2, #4]
 801a36a:	440c      	add	r4, r1
 801a36c:	6014      	str	r4, [r2, #0]
 801a36e:	e7da      	b.n	801a326 <_free_r+0x26>
 801a370:	d902      	bls.n	801a378 <_free_r+0x78>
 801a372:	230c      	movs	r3, #12
 801a374:	6003      	str	r3, [r0, #0]
 801a376:	e7d6      	b.n	801a326 <_free_r+0x26>
 801a378:	6825      	ldr	r5, [r4, #0]
 801a37a:	1961      	adds	r1, r4, r5
 801a37c:	428b      	cmp	r3, r1
 801a37e:	bf04      	itt	eq
 801a380:	6819      	ldreq	r1, [r3, #0]
 801a382:	685b      	ldreq	r3, [r3, #4]
 801a384:	6063      	str	r3, [r4, #4]
 801a386:	bf04      	itt	eq
 801a388:	1949      	addeq	r1, r1, r5
 801a38a:	6021      	streq	r1, [r4, #0]
 801a38c:	6054      	str	r4, [r2, #4]
 801a38e:	e7ca      	b.n	801a326 <_free_r+0x26>
 801a390:	b003      	add	sp, #12
 801a392:	bd30      	pop	{r4, r5, pc}
 801a394:	240152cc 	.word	0x240152cc

0801a398 <malloc>:
 801a398:	4b02      	ldr	r3, [pc, #8]	; (801a3a4 <malloc+0xc>)
 801a39a:	4601      	mov	r1, r0
 801a39c:	6818      	ldr	r0, [r3, #0]
 801a39e:	f000 b823 	b.w	801a3e8 <_malloc_r>
 801a3a2:	bf00      	nop
 801a3a4:	2400008c 	.word	0x2400008c

0801a3a8 <sbrk_aligned>:
 801a3a8:	b570      	push	{r4, r5, r6, lr}
 801a3aa:	4e0e      	ldr	r6, [pc, #56]	; (801a3e4 <sbrk_aligned+0x3c>)
 801a3ac:	460c      	mov	r4, r1
 801a3ae:	6831      	ldr	r1, [r6, #0]
 801a3b0:	4605      	mov	r5, r0
 801a3b2:	b911      	cbnz	r1, 801a3ba <sbrk_aligned+0x12>
 801a3b4:	f000 fcbc 	bl	801ad30 <_sbrk_r>
 801a3b8:	6030      	str	r0, [r6, #0]
 801a3ba:	4621      	mov	r1, r4
 801a3bc:	4628      	mov	r0, r5
 801a3be:	f000 fcb7 	bl	801ad30 <_sbrk_r>
 801a3c2:	1c43      	adds	r3, r0, #1
 801a3c4:	d00a      	beq.n	801a3dc <sbrk_aligned+0x34>
 801a3c6:	1cc4      	adds	r4, r0, #3
 801a3c8:	f024 0403 	bic.w	r4, r4, #3
 801a3cc:	42a0      	cmp	r0, r4
 801a3ce:	d007      	beq.n	801a3e0 <sbrk_aligned+0x38>
 801a3d0:	1a21      	subs	r1, r4, r0
 801a3d2:	4628      	mov	r0, r5
 801a3d4:	f000 fcac 	bl	801ad30 <_sbrk_r>
 801a3d8:	3001      	adds	r0, #1
 801a3da:	d101      	bne.n	801a3e0 <sbrk_aligned+0x38>
 801a3dc:	f04f 34ff 	mov.w	r4, #4294967295
 801a3e0:	4620      	mov	r0, r4
 801a3e2:	bd70      	pop	{r4, r5, r6, pc}
 801a3e4:	240152d0 	.word	0x240152d0

0801a3e8 <_malloc_r>:
 801a3e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a3ec:	1ccd      	adds	r5, r1, #3
 801a3ee:	f025 0503 	bic.w	r5, r5, #3
 801a3f2:	3508      	adds	r5, #8
 801a3f4:	2d0c      	cmp	r5, #12
 801a3f6:	bf38      	it	cc
 801a3f8:	250c      	movcc	r5, #12
 801a3fa:	2d00      	cmp	r5, #0
 801a3fc:	4607      	mov	r7, r0
 801a3fe:	db01      	blt.n	801a404 <_malloc_r+0x1c>
 801a400:	42a9      	cmp	r1, r5
 801a402:	d905      	bls.n	801a410 <_malloc_r+0x28>
 801a404:	230c      	movs	r3, #12
 801a406:	603b      	str	r3, [r7, #0]
 801a408:	2600      	movs	r6, #0
 801a40a:	4630      	mov	r0, r6
 801a40c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a410:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801a4e4 <_malloc_r+0xfc>
 801a414:	f000 f868 	bl	801a4e8 <__malloc_lock>
 801a418:	f8d8 3000 	ldr.w	r3, [r8]
 801a41c:	461c      	mov	r4, r3
 801a41e:	bb5c      	cbnz	r4, 801a478 <_malloc_r+0x90>
 801a420:	4629      	mov	r1, r5
 801a422:	4638      	mov	r0, r7
 801a424:	f7ff ffc0 	bl	801a3a8 <sbrk_aligned>
 801a428:	1c43      	adds	r3, r0, #1
 801a42a:	4604      	mov	r4, r0
 801a42c:	d155      	bne.n	801a4da <_malloc_r+0xf2>
 801a42e:	f8d8 4000 	ldr.w	r4, [r8]
 801a432:	4626      	mov	r6, r4
 801a434:	2e00      	cmp	r6, #0
 801a436:	d145      	bne.n	801a4c4 <_malloc_r+0xdc>
 801a438:	2c00      	cmp	r4, #0
 801a43a:	d048      	beq.n	801a4ce <_malloc_r+0xe6>
 801a43c:	6823      	ldr	r3, [r4, #0]
 801a43e:	4631      	mov	r1, r6
 801a440:	4638      	mov	r0, r7
 801a442:	eb04 0903 	add.w	r9, r4, r3
 801a446:	f000 fc73 	bl	801ad30 <_sbrk_r>
 801a44a:	4581      	cmp	r9, r0
 801a44c:	d13f      	bne.n	801a4ce <_malloc_r+0xe6>
 801a44e:	6821      	ldr	r1, [r4, #0]
 801a450:	1a6d      	subs	r5, r5, r1
 801a452:	4629      	mov	r1, r5
 801a454:	4638      	mov	r0, r7
 801a456:	f7ff ffa7 	bl	801a3a8 <sbrk_aligned>
 801a45a:	3001      	adds	r0, #1
 801a45c:	d037      	beq.n	801a4ce <_malloc_r+0xe6>
 801a45e:	6823      	ldr	r3, [r4, #0]
 801a460:	442b      	add	r3, r5
 801a462:	6023      	str	r3, [r4, #0]
 801a464:	f8d8 3000 	ldr.w	r3, [r8]
 801a468:	2b00      	cmp	r3, #0
 801a46a:	d038      	beq.n	801a4de <_malloc_r+0xf6>
 801a46c:	685a      	ldr	r2, [r3, #4]
 801a46e:	42a2      	cmp	r2, r4
 801a470:	d12b      	bne.n	801a4ca <_malloc_r+0xe2>
 801a472:	2200      	movs	r2, #0
 801a474:	605a      	str	r2, [r3, #4]
 801a476:	e00f      	b.n	801a498 <_malloc_r+0xb0>
 801a478:	6822      	ldr	r2, [r4, #0]
 801a47a:	1b52      	subs	r2, r2, r5
 801a47c:	d41f      	bmi.n	801a4be <_malloc_r+0xd6>
 801a47e:	2a0b      	cmp	r2, #11
 801a480:	d917      	bls.n	801a4b2 <_malloc_r+0xca>
 801a482:	1961      	adds	r1, r4, r5
 801a484:	42a3      	cmp	r3, r4
 801a486:	6025      	str	r5, [r4, #0]
 801a488:	bf18      	it	ne
 801a48a:	6059      	strne	r1, [r3, #4]
 801a48c:	6863      	ldr	r3, [r4, #4]
 801a48e:	bf08      	it	eq
 801a490:	f8c8 1000 	streq.w	r1, [r8]
 801a494:	5162      	str	r2, [r4, r5]
 801a496:	604b      	str	r3, [r1, #4]
 801a498:	4638      	mov	r0, r7
 801a49a:	f104 060b 	add.w	r6, r4, #11
 801a49e:	f000 f829 	bl	801a4f4 <__malloc_unlock>
 801a4a2:	f026 0607 	bic.w	r6, r6, #7
 801a4a6:	1d23      	adds	r3, r4, #4
 801a4a8:	1af2      	subs	r2, r6, r3
 801a4aa:	d0ae      	beq.n	801a40a <_malloc_r+0x22>
 801a4ac:	1b9b      	subs	r3, r3, r6
 801a4ae:	50a3      	str	r3, [r4, r2]
 801a4b0:	e7ab      	b.n	801a40a <_malloc_r+0x22>
 801a4b2:	42a3      	cmp	r3, r4
 801a4b4:	6862      	ldr	r2, [r4, #4]
 801a4b6:	d1dd      	bne.n	801a474 <_malloc_r+0x8c>
 801a4b8:	f8c8 2000 	str.w	r2, [r8]
 801a4bc:	e7ec      	b.n	801a498 <_malloc_r+0xb0>
 801a4be:	4623      	mov	r3, r4
 801a4c0:	6864      	ldr	r4, [r4, #4]
 801a4c2:	e7ac      	b.n	801a41e <_malloc_r+0x36>
 801a4c4:	4634      	mov	r4, r6
 801a4c6:	6876      	ldr	r6, [r6, #4]
 801a4c8:	e7b4      	b.n	801a434 <_malloc_r+0x4c>
 801a4ca:	4613      	mov	r3, r2
 801a4cc:	e7cc      	b.n	801a468 <_malloc_r+0x80>
 801a4ce:	230c      	movs	r3, #12
 801a4d0:	603b      	str	r3, [r7, #0]
 801a4d2:	4638      	mov	r0, r7
 801a4d4:	f000 f80e 	bl	801a4f4 <__malloc_unlock>
 801a4d8:	e797      	b.n	801a40a <_malloc_r+0x22>
 801a4da:	6025      	str	r5, [r4, #0]
 801a4dc:	e7dc      	b.n	801a498 <_malloc_r+0xb0>
 801a4de:	605b      	str	r3, [r3, #4]
 801a4e0:	deff      	udf	#255	; 0xff
 801a4e2:	bf00      	nop
 801a4e4:	240152cc 	.word	0x240152cc

0801a4e8 <__malloc_lock>:
 801a4e8:	4801      	ldr	r0, [pc, #4]	; (801a4f0 <__malloc_lock+0x8>)
 801a4ea:	f7ff bedb 	b.w	801a2a4 <__retarget_lock_acquire_recursive>
 801a4ee:	bf00      	nop
 801a4f0:	240152c8 	.word	0x240152c8

0801a4f4 <__malloc_unlock>:
 801a4f4:	4801      	ldr	r0, [pc, #4]	; (801a4fc <__malloc_unlock+0x8>)
 801a4f6:	f7ff bed6 	b.w	801a2a6 <__retarget_lock_release_recursive>
 801a4fa:	bf00      	nop
 801a4fc:	240152c8 	.word	0x240152c8

0801a500 <__sfputc_r>:
 801a500:	6893      	ldr	r3, [r2, #8]
 801a502:	3b01      	subs	r3, #1
 801a504:	2b00      	cmp	r3, #0
 801a506:	b410      	push	{r4}
 801a508:	6093      	str	r3, [r2, #8]
 801a50a:	da08      	bge.n	801a51e <__sfputc_r+0x1e>
 801a50c:	6994      	ldr	r4, [r2, #24]
 801a50e:	42a3      	cmp	r3, r4
 801a510:	db01      	blt.n	801a516 <__sfputc_r+0x16>
 801a512:	290a      	cmp	r1, #10
 801a514:	d103      	bne.n	801a51e <__sfputc_r+0x1e>
 801a516:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a51a:	f7ff bd56 	b.w	8019fca <__swbuf_r>
 801a51e:	6813      	ldr	r3, [r2, #0]
 801a520:	1c58      	adds	r0, r3, #1
 801a522:	6010      	str	r0, [r2, #0]
 801a524:	7019      	strb	r1, [r3, #0]
 801a526:	4608      	mov	r0, r1
 801a528:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a52c:	4770      	bx	lr

0801a52e <__sfputs_r>:
 801a52e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a530:	4606      	mov	r6, r0
 801a532:	460f      	mov	r7, r1
 801a534:	4614      	mov	r4, r2
 801a536:	18d5      	adds	r5, r2, r3
 801a538:	42ac      	cmp	r4, r5
 801a53a:	d101      	bne.n	801a540 <__sfputs_r+0x12>
 801a53c:	2000      	movs	r0, #0
 801a53e:	e007      	b.n	801a550 <__sfputs_r+0x22>
 801a540:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a544:	463a      	mov	r2, r7
 801a546:	4630      	mov	r0, r6
 801a548:	f7ff ffda 	bl	801a500 <__sfputc_r>
 801a54c:	1c43      	adds	r3, r0, #1
 801a54e:	d1f3      	bne.n	801a538 <__sfputs_r+0xa>
 801a550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a554 <_vfiprintf_r>:
 801a554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a558:	460d      	mov	r5, r1
 801a55a:	b09d      	sub	sp, #116	; 0x74
 801a55c:	4614      	mov	r4, r2
 801a55e:	4698      	mov	r8, r3
 801a560:	4606      	mov	r6, r0
 801a562:	b118      	cbz	r0, 801a56c <_vfiprintf_r+0x18>
 801a564:	6a03      	ldr	r3, [r0, #32]
 801a566:	b90b      	cbnz	r3, 801a56c <_vfiprintf_r+0x18>
 801a568:	f7ff fc48 	bl	8019dfc <__sinit>
 801a56c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a56e:	07d9      	lsls	r1, r3, #31
 801a570:	d405      	bmi.n	801a57e <_vfiprintf_r+0x2a>
 801a572:	89ab      	ldrh	r3, [r5, #12]
 801a574:	059a      	lsls	r2, r3, #22
 801a576:	d402      	bmi.n	801a57e <_vfiprintf_r+0x2a>
 801a578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a57a:	f7ff fe93 	bl	801a2a4 <__retarget_lock_acquire_recursive>
 801a57e:	89ab      	ldrh	r3, [r5, #12]
 801a580:	071b      	lsls	r3, r3, #28
 801a582:	d501      	bpl.n	801a588 <_vfiprintf_r+0x34>
 801a584:	692b      	ldr	r3, [r5, #16]
 801a586:	b99b      	cbnz	r3, 801a5b0 <_vfiprintf_r+0x5c>
 801a588:	4629      	mov	r1, r5
 801a58a:	4630      	mov	r0, r6
 801a58c:	f7ff fd5a 	bl	801a044 <__swsetup_r>
 801a590:	b170      	cbz	r0, 801a5b0 <_vfiprintf_r+0x5c>
 801a592:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a594:	07dc      	lsls	r4, r3, #31
 801a596:	d504      	bpl.n	801a5a2 <_vfiprintf_r+0x4e>
 801a598:	f04f 30ff 	mov.w	r0, #4294967295
 801a59c:	b01d      	add	sp, #116	; 0x74
 801a59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5a2:	89ab      	ldrh	r3, [r5, #12]
 801a5a4:	0598      	lsls	r0, r3, #22
 801a5a6:	d4f7      	bmi.n	801a598 <_vfiprintf_r+0x44>
 801a5a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a5aa:	f7ff fe7c 	bl	801a2a6 <__retarget_lock_release_recursive>
 801a5ae:	e7f3      	b.n	801a598 <_vfiprintf_r+0x44>
 801a5b0:	2300      	movs	r3, #0
 801a5b2:	9309      	str	r3, [sp, #36]	; 0x24
 801a5b4:	2320      	movs	r3, #32
 801a5b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a5ba:	f8cd 800c 	str.w	r8, [sp, #12]
 801a5be:	2330      	movs	r3, #48	; 0x30
 801a5c0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801a774 <_vfiprintf_r+0x220>
 801a5c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a5c8:	f04f 0901 	mov.w	r9, #1
 801a5cc:	4623      	mov	r3, r4
 801a5ce:	469a      	mov	sl, r3
 801a5d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a5d4:	b10a      	cbz	r2, 801a5da <_vfiprintf_r+0x86>
 801a5d6:	2a25      	cmp	r2, #37	; 0x25
 801a5d8:	d1f9      	bne.n	801a5ce <_vfiprintf_r+0x7a>
 801a5da:	ebba 0b04 	subs.w	fp, sl, r4
 801a5de:	d00b      	beq.n	801a5f8 <_vfiprintf_r+0xa4>
 801a5e0:	465b      	mov	r3, fp
 801a5e2:	4622      	mov	r2, r4
 801a5e4:	4629      	mov	r1, r5
 801a5e6:	4630      	mov	r0, r6
 801a5e8:	f7ff ffa1 	bl	801a52e <__sfputs_r>
 801a5ec:	3001      	adds	r0, #1
 801a5ee:	f000 80a9 	beq.w	801a744 <_vfiprintf_r+0x1f0>
 801a5f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a5f4:	445a      	add	r2, fp
 801a5f6:	9209      	str	r2, [sp, #36]	; 0x24
 801a5f8:	f89a 3000 	ldrb.w	r3, [sl]
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	f000 80a1 	beq.w	801a744 <_vfiprintf_r+0x1f0>
 801a602:	2300      	movs	r3, #0
 801a604:	f04f 32ff 	mov.w	r2, #4294967295
 801a608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a60c:	f10a 0a01 	add.w	sl, sl, #1
 801a610:	9304      	str	r3, [sp, #16]
 801a612:	9307      	str	r3, [sp, #28]
 801a614:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a618:	931a      	str	r3, [sp, #104]	; 0x68
 801a61a:	4654      	mov	r4, sl
 801a61c:	2205      	movs	r2, #5
 801a61e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a622:	4854      	ldr	r0, [pc, #336]	; (801a774 <_vfiprintf_r+0x220>)
 801a624:	f7e5 fe74 	bl	8000310 <memchr>
 801a628:	9a04      	ldr	r2, [sp, #16]
 801a62a:	b9d8      	cbnz	r0, 801a664 <_vfiprintf_r+0x110>
 801a62c:	06d1      	lsls	r1, r2, #27
 801a62e:	bf44      	itt	mi
 801a630:	2320      	movmi	r3, #32
 801a632:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a636:	0713      	lsls	r3, r2, #28
 801a638:	bf44      	itt	mi
 801a63a:	232b      	movmi	r3, #43	; 0x2b
 801a63c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a640:	f89a 3000 	ldrb.w	r3, [sl]
 801a644:	2b2a      	cmp	r3, #42	; 0x2a
 801a646:	d015      	beq.n	801a674 <_vfiprintf_r+0x120>
 801a648:	9a07      	ldr	r2, [sp, #28]
 801a64a:	4654      	mov	r4, sl
 801a64c:	2000      	movs	r0, #0
 801a64e:	f04f 0c0a 	mov.w	ip, #10
 801a652:	4621      	mov	r1, r4
 801a654:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a658:	3b30      	subs	r3, #48	; 0x30
 801a65a:	2b09      	cmp	r3, #9
 801a65c:	d94d      	bls.n	801a6fa <_vfiprintf_r+0x1a6>
 801a65e:	b1b0      	cbz	r0, 801a68e <_vfiprintf_r+0x13a>
 801a660:	9207      	str	r2, [sp, #28]
 801a662:	e014      	b.n	801a68e <_vfiprintf_r+0x13a>
 801a664:	eba0 0308 	sub.w	r3, r0, r8
 801a668:	fa09 f303 	lsl.w	r3, r9, r3
 801a66c:	4313      	orrs	r3, r2
 801a66e:	9304      	str	r3, [sp, #16]
 801a670:	46a2      	mov	sl, r4
 801a672:	e7d2      	b.n	801a61a <_vfiprintf_r+0xc6>
 801a674:	9b03      	ldr	r3, [sp, #12]
 801a676:	1d19      	adds	r1, r3, #4
 801a678:	681b      	ldr	r3, [r3, #0]
 801a67a:	9103      	str	r1, [sp, #12]
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	bfbb      	ittet	lt
 801a680:	425b      	neglt	r3, r3
 801a682:	f042 0202 	orrlt.w	r2, r2, #2
 801a686:	9307      	strge	r3, [sp, #28]
 801a688:	9307      	strlt	r3, [sp, #28]
 801a68a:	bfb8      	it	lt
 801a68c:	9204      	strlt	r2, [sp, #16]
 801a68e:	7823      	ldrb	r3, [r4, #0]
 801a690:	2b2e      	cmp	r3, #46	; 0x2e
 801a692:	d10c      	bne.n	801a6ae <_vfiprintf_r+0x15a>
 801a694:	7863      	ldrb	r3, [r4, #1]
 801a696:	2b2a      	cmp	r3, #42	; 0x2a
 801a698:	d134      	bne.n	801a704 <_vfiprintf_r+0x1b0>
 801a69a:	9b03      	ldr	r3, [sp, #12]
 801a69c:	1d1a      	adds	r2, r3, #4
 801a69e:	681b      	ldr	r3, [r3, #0]
 801a6a0:	9203      	str	r2, [sp, #12]
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	bfb8      	it	lt
 801a6a6:	f04f 33ff 	movlt.w	r3, #4294967295
 801a6aa:	3402      	adds	r4, #2
 801a6ac:	9305      	str	r3, [sp, #20]
 801a6ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801a784 <_vfiprintf_r+0x230>
 801a6b2:	7821      	ldrb	r1, [r4, #0]
 801a6b4:	2203      	movs	r2, #3
 801a6b6:	4650      	mov	r0, sl
 801a6b8:	f7e5 fe2a 	bl	8000310 <memchr>
 801a6bc:	b138      	cbz	r0, 801a6ce <_vfiprintf_r+0x17a>
 801a6be:	9b04      	ldr	r3, [sp, #16]
 801a6c0:	eba0 000a 	sub.w	r0, r0, sl
 801a6c4:	2240      	movs	r2, #64	; 0x40
 801a6c6:	4082      	lsls	r2, r0
 801a6c8:	4313      	orrs	r3, r2
 801a6ca:	3401      	adds	r4, #1
 801a6cc:	9304      	str	r3, [sp, #16]
 801a6ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a6d2:	4829      	ldr	r0, [pc, #164]	; (801a778 <_vfiprintf_r+0x224>)
 801a6d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a6d8:	2206      	movs	r2, #6
 801a6da:	f7e5 fe19 	bl	8000310 <memchr>
 801a6de:	2800      	cmp	r0, #0
 801a6e0:	d03f      	beq.n	801a762 <_vfiprintf_r+0x20e>
 801a6e2:	4b26      	ldr	r3, [pc, #152]	; (801a77c <_vfiprintf_r+0x228>)
 801a6e4:	bb1b      	cbnz	r3, 801a72e <_vfiprintf_r+0x1da>
 801a6e6:	9b03      	ldr	r3, [sp, #12]
 801a6e8:	3307      	adds	r3, #7
 801a6ea:	f023 0307 	bic.w	r3, r3, #7
 801a6ee:	3308      	adds	r3, #8
 801a6f0:	9303      	str	r3, [sp, #12]
 801a6f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6f4:	443b      	add	r3, r7
 801a6f6:	9309      	str	r3, [sp, #36]	; 0x24
 801a6f8:	e768      	b.n	801a5cc <_vfiprintf_r+0x78>
 801a6fa:	fb0c 3202 	mla	r2, ip, r2, r3
 801a6fe:	460c      	mov	r4, r1
 801a700:	2001      	movs	r0, #1
 801a702:	e7a6      	b.n	801a652 <_vfiprintf_r+0xfe>
 801a704:	2300      	movs	r3, #0
 801a706:	3401      	adds	r4, #1
 801a708:	9305      	str	r3, [sp, #20]
 801a70a:	4619      	mov	r1, r3
 801a70c:	f04f 0c0a 	mov.w	ip, #10
 801a710:	4620      	mov	r0, r4
 801a712:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a716:	3a30      	subs	r2, #48	; 0x30
 801a718:	2a09      	cmp	r2, #9
 801a71a:	d903      	bls.n	801a724 <_vfiprintf_r+0x1d0>
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d0c6      	beq.n	801a6ae <_vfiprintf_r+0x15a>
 801a720:	9105      	str	r1, [sp, #20]
 801a722:	e7c4      	b.n	801a6ae <_vfiprintf_r+0x15a>
 801a724:	fb0c 2101 	mla	r1, ip, r1, r2
 801a728:	4604      	mov	r4, r0
 801a72a:	2301      	movs	r3, #1
 801a72c:	e7f0      	b.n	801a710 <_vfiprintf_r+0x1bc>
 801a72e:	ab03      	add	r3, sp, #12
 801a730:	9300      	str	r3, [sp, #0]
 801a732:	462a      	mov	r2, r5
 801a734:	4b12      	ldr	r3, [pc, #72]	; (801a780 <_vfiprintf_r+0x22c>)
 801a736:	a904      	add	r1, sp, #16
 801a738:	4630      	mov	r0, r6
 801a73a:	f3af 8000 	nop.w
 801a73e:	4607      	mov	r7, r0
 801a740:	1c78      	adds	r0, r7, #1
 801a742:	d1d6      	bne.n	801a6f2 <_vfiprintf_r+0x19e>
 801a744:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a746:	07d9      	lsls	r1, r3, #31
 801a748:	d405      	bmi.n	801a756 <_vfiprintf_r+0x202>
 801a74a:	89ab      	ldrh	r3, [r5, #12]
 801a74c:	059a      	lsls	r2, r3, #22
 801a74e:	d402      	bmi.n	801a756 <_vfiprintf_r+0x202>
 801a750:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a752:	f7ff fda8 	bl	801a2a6 <__retarget_lock_release_recursive>
 801a756:	89ab      	ldrh	r3, [r5, #12]
 801a758:	065b      	lsls	r3, r3, #25
 801a75a:	f53f af1d 	bmi.w	801a598 <_vfiprintf_r+0x44>
 801a75e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a760:	e71c      	b.n	801a59c <_vfiprintf_r+0x48>
 801a762:	ab03      	add	r3, sp, #12
 801a764:	9300      	str	r3, [sp, #0]
 801a766:	462a      	mov	r2, r5
 801a768:	4b05      	ldr	r3, [pc, #20]	; (801a780 <_vfiprintf_r+0x22c>)
 801a76a:	a904      	add	r1, sp, #16
 801a76c:	4630      	mov	r0, r6
 801a76e:	f000 f879 	bl	801a864 <_printf_i>
 801a772:	e7e4      	b.n	801a73e <_vfiprintf_r+0x1ea>
 801a774:	0801e379 	.word	0x0801e379
 801a778:	0801e383 	.word	0x0801e383
 801a77c:	00000000 	.word	0x00000000
 801a780:	0801a52f 	.word	0x0801a52f
 801a784:	0801e37f 	.word	0x0801e37f

0801a788 <_printf_common>:
 801a788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a78c:	4616      	mov	r6, r2
 801a78e:	4699      	mov	r9, r3
 801a790:	688a      	ldr	r2, [r1, #8]
 801a792:	690b      	ldr	r3, [r1, #16]
 801a794:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a798:	4293      	cmp	r3, r2
 801a79a:	bfb8      	it	lt
 801a79c:	4613      	movlt	r3, r2
 801a79e:	6033      	str	r3, [r6, #0]
 801a7a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a7a4:	4607      	mov	r7, r0
 801a7a6:	460c      	mov	r4, r1
 801a7a8:	b10a      	cbz	r2, 801a7ae <_printf_common+0x26>
 801a7aa:	3301      	adds	r3, #1
 801a7ac:	6033      	str	r3, [r6, #0]
 801a7ae:	6823      	ldr	r3, [r4, #0]
 801a7b0:	0699      	lsls	r1, r3, #26
 801a7b2:	bf42      	ittt	mi
 801a7b4:	6833      	ldrmi	r3, [r6, #0]
 801a7b6:	3302      	addmi	r3, #2
 801a7b8:	6033      	strmi	r3, [r6, #0]
 801a7ba:	6825      	ldr	r5, [r4, #0]
 801a7bc:	f015 0506 	ands.w	r5, r5, #6
 801a7c0:	d106      	bne.n	801a7d0 <_printf_common+0x48>
 801a7c2:	f104 0a19 	add.w	sl, r4, #25
 801a7c6:	68e3      	ldr	r3, [r4, #12]
 801a7c8:	6832      	ldr	r2, [r6, #0]
 801a7ca:	1a9b      	subs	r3, r3, r2
 801a7cc:	42ab      	cmp	r3, r5
 801a7ce:	dc26      	bgt.n	801a81e <_printf_common+0x96>
 801a7d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a7d4:	1e13      	subs	r3, r2, #0
 801a7d6:	6822      	ldr	r2, [r4, #0]
 801a7d8:	bf18      	it	ne
 801a7da:	2301      	movne	r3, #1
 801a7dc:	0692      	lsls	r2, r2, #26
 801a7de:	d42b      	bmi.n	801a838 <_printf_common+0xb0>
 801a7e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a7e4:	4649      	mov	r1, r9
 801a7e6:	4638      	mov	r0, r7
 801a7e8:	47c0      	blx	r8
 801a7ea:	3001      	adds	r0, #1
 801a7ec:	d01e      	beq.n	801a82c <_printf_common+0xa4>
 801a7ee:	6823      	ldr	r3, [r4, #0]
 801a7f0:	6922      	ldr	r2, [r4, #16]
 801a7f2:	f003 0306 	and.w	r3, r3, #6
 801a7f6:	2b04      	cmp	r3, #4
 801a7f8:	bf02      	ittt	eq
 801a7fa:	68e5      	ldreq	r5, [r4, #12]
 801a7fc:	6833      	ldreq	r3, [r6, #0]
 801a7fe:	1aed      	subeq	r5, r5, r3
 801a800:	68a3      	ldr	r3, [r4, #8]
 801a802:	bf0c      	ite	eq
 801a804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a808:	2500      	movne	r5, #0
 801a80a:	4293      	cmp	r3, r2
 801a80c:	bfc4      	itt	gt
 801a80e:	1a9b      	subgt	r3, r3, r2
 801a810:	18ed      	addgt	r5, r5, r3
 801a812:	2600      	movs	r6, #0
 801a814:	341a      	adds	r4, #26
 801a816:	42b5      	cmp	r5, r6
 801a818:	d11a      	bne.n	801a850 <_printf_common+0xc8>
 801a81a:	2000      	movs	r0, #0
 801a81c:	e008      	b.n	801a830 <_printf_common+0xa8>
 801a81e:	2301      	movs	r3, #1
 801a820:	4652      	mov	r2, sl
 801a822:	4649      	mov	r1, r9
 801a824:	4638      	mov	r0, r7
 801a826:	47c0      	blx	r8
 801a828:	3001      	adds	r0, #1
 801a82a:	d103      	bne.n	801a834 <_printf_common+0xac>
 801a82c:	f04f 30ff 	mov.w	r0, #4294967295
 801a830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a834:	3501      	adds	r5, #1
 801a836:	e7c6      	b.n	801a7c6 <_printf_common+0x3e>
 801a838:	18e1      	adds	r1, r4, r3
 801a83a:	1c5a      	adds	r2, r3, #1
 801a83c:	2030      	movs	r0, #48	; 0x30
 801a83e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a842:	4422      	add	r2, r4
 801a844:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a848:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a84c:	3302      	adds	r3, #2
 801a84e:	e7c7      	b.n	801a7e0 <_printf_common+0x58>
 801a850:	2301      	movs	r3, #1
 801a852:	4622      	mov	r2, r4
 801a854:	4649      	mov	r1, r9
 801a856:	4638      	mov	r0, r7
 801a858:	47c0      	blx	r8
 801a85a:	3001      	adds	r0, #1
 801a85c:	d0e6      	beq.n	801a82c <_printf_common+0xa4>
 801a85e:	3601      	adds	r6, #1
 801a860:	e7d9      	b.n	801a816 <_printf_common+0x8e>
	...

0801a864 <_printf_i>:
 801a864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a868:	7e0f      	ldrb	r7, [r1, #24]
 801a86a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a86c:	2f78      	cmp	r7, #120	; 0x78
 801a86e:	4691      	mov	r9, r2
 801a870:	4680      	mov	r8, r0
 801a872:	460c      	mov	r4, r1
 801a874:	469a      	mov	sl, r3
 801a876:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a87a:	d807      	bhi.n	801a88c <_printf_i+0x28>
 801a87c:	2f62      	cmp	r7, #98	; 0x62
 801a87e:	d80a      	bhi.n	801a896 <_printf_i+0x32>
 801a880:	2f00      	cmp	r7, #0
 801a882:	f000 80d4 	beq.w	801aa2e <_printf_i+0x1ca>
 801a886:	2f58      	cmp	r7, #88	; 0x58
 801a888:	f000 80c0 	beq.w	801aa0c <_printf_i+0x1a8>
 801a88c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a890:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a894:	e03a      	b.n	801a90c <_printf_i+0xa8>
 801a896:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a89a:	2b15      	cmp	r3, #21
 801a89c:	d8f6      	bhi.n	801a88c <_printf_i+0x28>
 801a89e:	a101      	add	r1, pc, #4	; (adr r1, 801a8a4 <_printf_i+0x40>)
 801a8a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a8a4:	0801a8fd 	.word	0x0801a8fd
 801a8a8:	0801a911 	.word	0x0801a911
 801a8ac:	0801a88d 	.word	0x0801a88d
 801a8b0:	0801a88d 	.word	0x0801a88d
 801a8b4:	0801a88d 	.word	0x0801a88d
 801a8b8:	0801a88d 	.word	0x0801a88d
 801a8bc:	0801a911 	.word	0x0801a911
 801a8c0:	0801a88d 	.word	0x0801a88d
 801a8c4:	0801a88d 	.word	0x0801a88d
 801a8c8:	0801a88d 	.word	0x0801a88d
 801a8cc:	0801a88d 	.word	0x0801a88d
 801a8d0:	0801aa15 	.word	0x0801aa15
 801a8d4:	0801a93d 	.word	0x0801a93d
 801a8d8:	0801a9cf 	.word	0x0801a9cf
 801a8dc:	0801a88d 	.word	0x0801a88d
 801a8e0:	0801a88d 	.word	0x0801a88d
 801a8e4:	0801aa37 	.word	0x0801aa37
 801a8e8:	0801a88d 	.word	0x0801a88d
 801a8ec:	0801a93d 	.word	0x0801a93d
 801a8f0:	0801a88d 	.word	0x0801a88d
 801a8f4:	0801a88d 	.word	0x0801a88d
 801a8f8:	0801a9d7 	.word	0x0801a9d7
 801a8fc:	682b      	ldr	r3, [r5, #0]
 801a8fe:	1d1a      	adds	r2, r3, #4
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	602a      	str	r2, [r5, #0]
 801a904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a908:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a90c:	2301      	movs	r3, #1
 801a90e:	e09f      	b.n	801aa50 <_printf_i+0x1ec>
 801a910:	6820      	ldr	r0, [r4, #0]
 801a912:	682b      	ldr	r3, [r5, #0]
 801a914:	0607      	lsls	r7, r0, #24
 801a916:	f103 0104 	add.w	r1, r3, #4
 801a91a:	6029      	str	r1, [r5, #0]
 801a91c:	d501      	bpl.n	801a922 <_printf_i+0xbe>
 801a91e:	681e      	ldr	r6, [r3, #0]
 801a920:	e003      	b.n	801a92a <_printf_i+0xc6>
 801a922:	0646      	lsls	r6, r0, #25
 801a924:	d5fb      	bpl.n	801a91e <_printf_i+0xba>
 801a926:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a92a:	2e00      	cmp	r6, #0
 801a92c:	da03      	bge.n	801a936 <_printf_i+0xd2>
 801a92e:	232d      	movs	r3, #45	; 0x2d
 801a930:	4276      	negs	r6, r6
 801a932:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a936:	485a      	ldr	r0, [pc, #360]	; (801aaa0 <_printf_i+0x23c>)
 801a938:	230a      	movs	r3, #10
 801a93a:	e012      	b.n	801a962 <_printf_i+0xfe>
 801a93c:	682b      	ldr	r3, [r5, #0]
 801a93e:	6820      	ldr	r0, [r4, #0]
 801a940:	1d19      	adds	r1, r3, #4
 801a942:	6029      	str	r1, [r5, #0]
 801a944:	0605      	lsls	r5, r0, #24
 801a946:	d501      	bpl.n	801a94c <_printf_i+0xe8>
 801a948:	681e      	ldr	r6, [r3, #0]
 801a94a:	e002      	b.n	801a952 <_printf_i+0xee>
 801a94c:	0641      	lsls	r1, r0, #25
 801a94e:	d5fb      	bpl.n	801a948 <_printf_i+0xe4>
 801a950:	881e      	ldrh	r6, [r3, #0]
 801a952:	4853      	ldr	r0, [pc, #332]	; (801aaa0 <_printf_i+0x23c>)
 801a954:	2f6f      	cmp	r7, #111	; 0x6f
 801a956:	bf0c      	ite	eq
 801a958:	2308      	moveq	r3, #8
 801a95a:	230a      	movne	r3, #10
 801a95c:	2100      	movs	r1, #0
 801a95e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a962:	6865      	ldr	r5, [r4, #4]
 801a964:	60a5      	str	r5, [r4, #8]
 801a966:	2d00      	cmp	r5, #0
 801a968:	bfa2      	ittt	ge
 801a96a:	6821      	ldrge	r1, [r4, #0]
 801a96c:	f021 0104 	bicge.w	r1, r1, #4
 801a970:	6021      	strge	r1, [r4, #0]
 801a972:	b90e      	cbnz	r6, 801a978 <_printf_i+0x114>
 801a974:	2d00      	cmp	r5, #0
 801a976:	d04b      	beq.n	801aa10 <_printf_i+0x1ac>
 801a978:	4615      	mov	r5, r2
 801a97a:	fbb6 f1f3 	udiv	r1, r6, r3
 801a97e:	fb03 6711 	mls	r7, r3, r1, r6
 801a982:	5dc7      	ldrb	r7, [r0, r7]
 801a984:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a988:	4637      	mov	r7, r6
 801a98a:	42bb      	cmp	r3, r7
 801a98c:	460e      	mov	r6, r1
 801a98e:	d9f4      	bls.n	801a97a <_printf_i+0x116>
 801a990:	2b08      	cmp	r3, #8
 801a992:	d10b      	bne.n	801a9ac <_printf_i+0x148>
 801a994:	6823      	ldr	r3, [r4, #0]
 801a996:	07de      	lsls	r6, r3, #31
 801a998:	d508      	bpl.n	801a9ac <_printf_i+0x148>
 801a99a:	6923      	ldr	r3, [r4, #16]
 801a99c:	6861      	ldr	r1, [r4, #4]
 801a99e:	4299      	cmp	r1, r3
 801a9a0:	bfde      	ittt	le
 801a9a2:	2330      	movle	r3, #48	; 0x30
 801a9a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a9a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a9ac:	1b52      	subs	r2, r2, r5
 801a9ae:	6122      	str	r2, [r4, #16]
 801a9b0:	f8cd a000 	str.w	sl, [sp]
 801a9b4:	464b      	mov	r3, r9
 801a9b6:	aa03      	add	r2, sp, #12
 801a9b8:	4621      	mov	r1, r4
 801a9ba:	4640      	mov	r0, r8
 801a9bc:	f7ff fee4 	bl	801a788 <_printf_common>
 801a9c0:	3001      	adds	r0, #1
 801a9c2:	d14a      	bne.n	801aa5a <_printf_i+0x1f6>
 801a9c4:	f04f 30ff 	mov.w	r0, #4294967295
 801a9c8:	b004      	add	sp, #16
 801a9ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a9ce:	6823      	ldr	r3, [r4, #0]
 801a9d0:	f043 0320 	orr.w	r3, r3, #32
 801a9d4:	6023      	str	r3, [r4, #0]
 801a9d6:	4833      	ldr	r0, [pc, #204]	; (801aaa4 <_printf_i+0x240>)
 801a9d8:	2778      	movs	r7, #120	; 0x78
 801a9da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a9de:	6823      	ldr	r3, [r4, #0]
 801a9e0:	6829      	ldr	r1, [r5, #0]
 801a9e2:	061f      	lsls	r7, r3, #24
 801a9e4:	f851 6b04 	ldr.w	r6, [r1], #4
 801a9e8:	d402      	bmi.n	801a9f0 <_printf_i+0x18c>
 801a9ea:	065f      	lsls	r7, r3, #25
 801a9ec:	bf48      	it	mi
 801a9ee:	b2b6      	uxthmi	r6, r6
 801a9f0:	07df      	lsls	r7, r3, #31
 801a9f2:	bf48      	it	mi
 801a9f4:	f043 0320 	orrmi.w	r3, r3, #32
 801a9f8:	6029      	str	r1, [r5, #0]
 801a9fa:	bf48      	it	mi
 801a9fc:	6023      	strmi	r3, [r4, #0]
 801a9fe:	b91e      	cbnz	r6, 801aa08 <_printf_i+0x1a4>
 801aa00:	6823      	ldr	r3, [r4, #0]
 801aa02:	f023 0320 	bic.w	r3, r3, #32
 801aa06:	6023      	str	r3, [r4, #0]
 801aa08:	2310      	movs	r3, #16
 801aa0a:	e7a7      	b.n	801a95c <_printf_i+0xf8>
 801aa0c:	4824      	ldr	r0, [pc, #144]	; (801aaa0 <_printf_i+0x23c>)
 801aa0e:	e7e4      	b.n	801a9da <_printf_i+0x176>
 801aa10:	4615      	mov	r5, r2
 801aa12:	e7bd      	b.n	801a990 <_printf_i+0x12c>
 801aa14:	682b      	ldr	r3, [r5, #0]
 801aa16:	6826      	ldr	r6, [r4, #0]
 801aa18:	6961      	ldr	r1, [r4, #20]
 801aa1a:	1d18      	adds	r0, r3, #4
 801aa1c:	6028      	str	r0, [r5, #0]
 801aa1e:	0635      	lsls	r5, r6, #24
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	d501      	bpl.n	801aa28 <_printf_i+0x1c4>
 801aa24:	6019      	str	r1, [r3, #0]
 801aa26:	e002      	b.n	801aa2e <_printf_i+0x1ca>
 801aa28:	0670      	lsls	r0, r6, #25
 801aa2a:	d5fb      	bpl.n	801aa24 <_printf_i+0x1c0>
 801aa2c:	8019      	strh	r1, [r3, #0]
 801aa2e:	2300      	movs	r3, #0
 801aa30:	6123      	str	r3, [r4, #16]
 801aa32:	4615      	mov	r5, r2
 801aa34:	e7bc      	b.n	801a9b0 <_printf_i+0x14c>
 801aa36:	682b      	ldr	r3, [r5, #0]
 801aa38:	1d1a      	adds	r2, r3, #4
 801aa3a:	602a      	str	r2, [r5, #0]
 801aa3c:	681d      	ldr	r5, [r3, #0]
 801aa3e:	6862      	ldr	r2, [r4, #4]
 801aa40:	2100      	movs	r1, #0
 801aa42:	4628      	mov	r0, r5
 801aa44:	f7e5 fc64 	bl	8000310 <memchr>
 801aa48:	b108      	cbz	r0, 801aa4e <_printf_i+0x1ea>
 801aa4a:	1b40      	subs	r0, r0, r5
 801aa4c:	6060      	str	r0, [r4, #4]
 801aa4e:	6863      	ldr	r3, [r4, #4]
 801aa50:	6123      	str	r3, [r4, #16]
 801aa52:	2300      	movs	r3, #0
 801aa54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aa58:	e7aa      	b.n	801a9b0 <_printf_i+0x14c>
 801aa5a:	6923      	ldr	r3, [r4, #16]
 801aa5c:	462a      	mov	r2, r5
 801aa5e:	4649      	mov	r1, r9
 801aa60:	4640      	mov	r0, r8
 801aa62:	47d0      	blx	sl
 801aa64:	3001      	adds	r0, #1
 801aa66:	d0ad      	beq.n	801a9c4 <_printf_i+0x160>
 801aa68:	6823      	ldr	r3, [r4, #0]
 801aa6a:	079b      	lsls	r3, r3, #30
 801aa6c:	d413      	bmi.n	801aa96 <_printf_i+0x232>
 801aa6e:	68e0      	ldr	r0, [r4, #12]
 801aa70:	9b03      	ldr	r3, [sp, #12]
 801aa72:	4298      	cmp	r0, r3
 801aa74:	bfb8      	it	lt
 801aa76:	4618      	movlt	r0, r3
 801aa78:	e7a6      	b.n	801a9c8 <_printf_i+0x164>
 801aa7a:	2301      	movs	r3, #1
 801aa7c:	4632      	mov	r2, r6
 801aa7e:	4649      	mov	r1, r9
 801aa80:	4640      	mov	r0, r8
 801aa82:	47d0      	blx	sl
 801aa84:	3001      	adds	r0, #1
 801aa86:	d09d      	beq.n	801a9c4 <_printf_i+0x160>
 801aa88:	3501      	adds	r5, #1
 801aa8a:	68e3      	ldr	r3, [r4, #12]
 801aa8c:	9903      	ldr	r1, [sp, #12]
 801aa8e:	1a5b      	subs	r3, r3, r1
 801aa90:	42ab      	cmp	r3, r5
 801aa92:	dcf2      	bgt.n	801aa7a <_printf_i+0x216>
 801aa94:	e7eb      	b.n	801aa6e <_printf_i+0x20a>
 801aa96:	2500      	movs	r5, #0
 801aa98:	f104 0619 	add.w	r6, r4, #25
 801aa9c:	e7f5      	b.n	801aa8a <_printf_i+0x226>
 801aa9e:	bf00      	nop
 801aaa0:	0801e38a 	.word	0x0801e38a
 801aaa4:	0801e39b 	.word	0x0801e39b

0801aaa8 <__sflush_r>:
 801aaa8:	898a      	ldrh	r2, [r1, #12]
 801aaaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aaae:	4605      	mov	r5, r0
 801aab0:	0710      	lsls	r0, r2, #28
 801aab2:	460c      	mov	r4, r1
 801aab4:	d458      	bmi.n	801ab68 <__sflush_r+0xc0>
 801aab6:	684b      	ldr	r3, [r1, #4]
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	dc05      	bgt.n	801aac8 <__sflush_r+0x20>
 801aabc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	dc02      	bgt.n	801aac8 <__sflush_r+0x20>
 801aac2:	2000      	movs	r0, #0
 801aac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801aaca:	2e00      	cmp	r6, #0
 801aacc:	d0f9      	beq.n	801aac2 <__sflush_r+0x1a>
 801aace:	2300      	movs	r3, #0
 801aad0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801aad4:	682f      	ldr	r7, [r5, #0]
 801aad6:	6a21      	ldr	r1, [r4, #32]
 801aad8:	602b      	str	r3, [r5, #0]
 801aada:	d032      	beq.n	801ab42 <__sflush_r+0x9a>
 801aadc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801aade:	89a3      	ldrh	r3, [r4, #12]
 801aae0:	075a      	lsls	r2, r3, #29
 801aae2:	d505      	bpl.n	801aaf0 <__sflush_r+0x48>
 801aae4:	6863      	ldr	r3, [r4, #4]
 801aae6:	1ac0      	subs	r0, r0, r3
 801aae8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801aaea:	b10b      	cbz	r3, 801aaf0 <__sflush_r+0x48>
 801aaec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801aaee:	1ac0      	subs	r0, r0, r3
 801aaf0:	2300      	movs	r3, #0
 801aaf2:	4602      	mov	r2, r0
 801aaf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801aaf6:	6a21      	ldr	r1, [r4, #32]
 801aaf8:	4628      	mov	r0, r5
 801aafa:	47b0      	blx	r6
 801aafc:	1c43      	adds	r3, r0, #1
 801aafe:	89a3      	ldrh	r3, [r4, #12]
 801ab00:	d106      	bne.n	801ab10 <__sflush_r+0x68>
 801ab02:	6829      	ldr	r1, [r5, #0]
 801ab04:	291d      	cmp	r1, #29
 801ab06:	d82b      	bhi.n	801ab60 <__sflush_r+0xb8>
 801ab08:	4a29      	ldr	r2, [pc, #164]	; (801abb0 <__sflush_r+0x108>)
 801ab0a:	410a      	asrs	r2, r1
 801ab0c:	07d6      	lsls	r6, r2, #31
 801ab0e:	d427      	bmi.n	801ab60 <__sflush_r+0xb8>
 801ab10:	2200      	movs	r2, #0
 801ab12:	6062      	str	r2, [r4, #4]
 801ab14:	04d9      	lsls	r1, r3, #19
 801ab16:	6922      	ldr	r2, [r4, #16]
 801ab18:	6022      	str	r2, [r4, #0]
 801ab1a:	d504      	bpl.n	801ab26 <__sflush_r+0x7e>
 801ab1c:	1c42      	adds	r2, r0, #1
 801ab1e:	d101      	bne.n	801ab24 <__sflush_r+0x7c>
 801ab20:	682b      	ldr	r3, [r5, #0]
 801ab22:	b903      	cbnz	r3, 801ab26 <__sflush_r+0x7e>
 801ab24:	6560      	str	r0, [r4, #84]	; 0x54
 801ab26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ab28:	602f      	str	r7, [r5, #0]
 801ab2a:	2900      	cmp	r1, #0
 801ab2c:	d0c9      	beq.n	801aac2 <__sflush_r+0x1a>
 801ab2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ab32:	4299      	cmp	r1, r3
 801ab34:	d002      	beq.n	801ab3c <__sflush_r+0x94>
 801ab36:	4628      	mov	r0, r5
 801ab38:	f7ff fbe2 	bl	801a300 <_free_r>
 801ab3c:	2000      	movs	r0, #0
 801ab3e:	6360      	str	r0, [r4, #52]	; 0x34
 801ab40:	e7c0      	b.n	801aac4 <__sflush_r+0x1c>
 801ab42:	2301      	movs	r3, #1
 801ab44:	4628      	mov	r0, r5
 801ab46:	47b0      	blx	r6
 801ab48:	1c41      	adds	r1, r0, #1
 801ab4a:	d1c8      	bne.n	801aade <__sflush_r+0x36>
 801ab4c:	682b      	ldr	r3, [r5, #0]
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d0c5      	beq.n	801aade <__sflush_r+0x36>
 801ab52:	2b1d      	cmp	r3, #29
 801ab54:	d001      	beq.n	801ab5a <__sflush_r+0xb2>
 801ab56:	2b16      	cmp	r3, #22
 801ab58:	d101      	bne.n	801ab5e <__sflush_r+0xb6>
 801ab5a:	602f      	str	r7, [r5, #0]
 801ab5c:	e7b1      	b.n	801aac2 <__sflush_r+0x1a>
 801ab5e:	89a3      	ldrh	r3, [r4, #12]
 801ab60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ab64:	81a3      	strh	r3, [r4, #12]
 801ab66:	e7ad      	b.n	801aac4 <__sflush_r+0x1c>
 801ab68:	690f      	ldr	r7, [r1, #16]
 801ab6a:	2f00      	cmp	r7, #0
 801ab6c:	d0a9      	beq.n	801aac2 <__sflush_r+0x1a>
 801ab6e:	0793      	lsls	r3, r2, #30
 801ab70:	680e      	ldr	r6, [r1, #0]
 801ab72:	bf08      	it	eq
 801ab74:	694b      	ldreq	r3, [r1, #20]
 801ab76:	600f      	str	r7, [r1, #0]
 801ab78:	bf18      	it	ne
 801ab7a:	2300      	movne	r3, #0
 801ab7c:	eba6 0807 	sub.w	r8, r6, r7
 801ab80:	608b      	str	r3, [r1, #8]
 801ab82:	f1b8 0f00 	cmp.w	r8, #0
 801ab86:	dd9c      	ble.n	801aac2 <__sflush_r+0x1a>
 801ab88:	6a21      	ldr	r1, [r4, #32]
 801ab8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ab8c:	4643      	mov	r3, r8
 801ab8e:	463a      	mov	r2, r7
 801ab90:	4628      	mov	r0, r5
 801ab92:	47b0      	blx	r6
 801ab94:	2800      	cmp	r0, #0
 801ab96:	dc06      	bgt.n	801aba6 <__sflush_r+0xfe>
 801ab98:	89a3      	ldrh	r3, [r4, #12]
 801ab9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ab9e:	81a3      	strh	r3, [r4, #12]
 801aba0:	f04f 30ff 	mov.w	r0, #4294967295
 801aba4:	e78e      	b.n	801aac4 <__sflush_r+0x1c>
 801aba6:	4407      	add	r7, r0
 801aba8:	eba8 0800 	sub.w	r8, r8, r0
 801abac:	e7e9      	b.n	801ab82 <__sflush_r+0xda>
 801abae:	bf00      	nop
 801abb0:	dfbffffe 	.word	0xdfbffffe

0801abb4 <_fflush_r>:
 801abb4:	b538      	push	{r3, r4, r5, lr}
 801abb6:	690b      	ldr	r3, [r1, #16]
 801abb8:	4605      	mov	r5, r0
 801abba:	460c      	mov	r4, r1
 801abbc:	b913      	cbnz	r3, 801abc4 <_fflush_r+0x10>
 801abbe:	2500      	movs	r5, #0
 801abc0:	4628      	mov	r0, r5
 801abc2:	bd38      	pop	{r3, r4, r5, pc}
 801abc4:	b118      	cbz	r0, 801abce <_fflush_r+0x1a>
 801abc6:	6a03      	ldr	r3, [r0, #32]
 801abc8:	b90b      	cbnz	r3, 801abce <_fflush_r+0x1a>
 801abca:	f7ff f917 	bl	8019dfc <__sinit>
 801abce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d0f3      	beq.n	801abbe <_fflush_r+0xa>
 801abd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801abd8:	07d0      	lsls	r0, r2, #31
 801abda:	d404      	bmi.n	801abe6 <_fflush_r+0x32>
 801abdc:	0599      	lsls	r1, r3, #22
 801abde:	d402      	bmi.n	801abe6 <_fflush_r+0x32>
 801abe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801abe2:	f7ff fb5f 	bl	801a2a4 <__retarget_lock_acquire_recursive>
 801abe6:	4628      	mov	r0, r5
 801abe8:	4621      	mov	r1, r4
 801abea:	f7ff ff5d 	bl	801aaa8 <__sflush_r>
 801abee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801abf0:	07da      	lsls	r2, r3, #31
 801abf2:	4605      	mov	r5, r0
 801abf4:	d4e4      	bmi.n	801abc0 <_fflush_r+0xc>
 801abf6:	89a3      	ldrh	r3, [r4, #12]
 801abf8:	059b      	lsls	r3, r3, #22
 801abfa:	d4e1      	bmi.n	801abc0 <_fflush_r+0xc>
 801abfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801abfe:	f7ff fb52 	bl	801a2a6 <__retarget_lock_release_recursive>
 801ac02:	e7dd      	b.n	801abc0 <_fflush_r+0xc>

0801ac04 <fiprintf>:
 801ac04:	b40e      	push	{r1, r2, r3}
 801ac06:	b503      	push	{r0, r1, lr}
 801ac08:	4601      	mov	r1, r0
 801ac0a:	ab03      	add	r3, sp, #12
 801ac0c:	4805      	ldr	r0, [pc, #20]	; (801ac24 <fiprintf+0x20>)
 801ac0e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ac12:	6800      	ldr	r0, [r0, #0]
 801ac14:	9301      	str	r3, [sp, #4]
 801ac16:	f7ff fc9d 	bl	801a554 <_vfiprintf_r>
 801ac1a:	b002      	add	sp, #8
 801ac1c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ac20:	b003      	add	sp, #12
 801ac22:	4770      	bx	lr
 801ac24:	2400008c 	.word	0x2400008c

0801ac28 <__swhatbuf_r>:
 801ac28:	b570      	push	{r4, r5, r6, lr}
 801ac2a:	460c      	mov	r4, r1
 801ac2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac30:	2900      	cmp	r1, #0
 801ac32:	b096      	sub	sp, #88	; 0x58
 801ac34:	4615      	mov	r5, r2
 801ac36:	461e      	mov	r6, r3
 801ac38:	da0d      	bge.n	801ac56 <__swhatbuf_r+0x2e>
 801ac3a:	89a3      	ldrh	r3, [r4, #12]
 801ac3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801ac40:	f04f 0100 	mov.w	r1, #0
 801ac44:	bf0c      	ite	eq
 801ac46:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801ac4a:	2340      	movne	r3, #64	; 0x40
 801ac4c:	2000      	movs	r0, #0
 801ac4e:	6031      	str	r1, [r6, #0]
 801ac50:	602b      	str	r3, [r5, #0]
 801ac52:	b016      	add	sp, #88	; 0x58
 801ac54:	bd70      	pop	{r4, r5, r6, pc}
 801ac56:	466a      	mov	r2, sp
 801ac58:	f000 f848 	bl	801acec <_fstat_r>
 801ac5c:	2800      	cmp	r0, #0
 801ac5e:	dbec      	blt.n	801ac3a <__swhatbuf_r+0x12>
 801ac60:	9901      	ldr	r1, [sp, #4]
 801ac62:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801ac66:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801ac6a:	4259      	negs	r1, r3
 801ac6c:	4159      	adcs	r1, r3
 801ac6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ac72:	e7eb      	b.n	801ac4c <__swhatbuf_r+0x24>

0801ac74 <__smakebuf_r>:
 801ac74:	898b      	ldrh	r3, [r1, #12]
 801ac76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ac78:	079d      	lsls	r5, r3, #30
 801ac7a:	4606      	mov	r6, r0
 801ac7c:	460c      	mov	r4, r1
 801ac7e:	d507      	bpl.n	801ac90 <__smakebuf_r+0x1c>
 801ac80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ac84:	6023      	str	r3, [r4, #0]
 801ac86:	6123      	str	r3, [r4, #16]
 801ac88:	2301      	movs	r3, #1
 801ac8a:	6163      	str	r3, [r4, #20]
 801ac8c:	b002      	add	sp, #8
 801ac8e:	bd70      	pop	{r4, r5, r6, pc}
 801ac90:	ab01      	add	r3, sp, #4
 801ac92:	466a      	mov	r2, sp
 801ac94:	f7ff ffc8 	bl	801ac28 <__swhatbuf_r>
 801ac98:	9900      	ldr	r1, [sp, #0]
 801ac9a:	4605      	mov	r5, r0
 801ac9c:	4630      	mov	r0, r6
 801ac9e:	f7ff fba3 	bl	801a3e8 <_malloc_r>
 801aca2:	b948      	cbnz	r0, 801acb8 <__smakebuf_r+0x44>
 801aca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aca8:	059a      	lsls	r2, r3, #22
 801acaa:	d4ef      	bmi.n	801ac8c <__smakebuf_r+0x18>
 801acac:	f023 0303 	bic.w	r3, r3, #3
 801acb0:	f043 0302 	orr.w	r3, r3, #2
 801acb4:	81a3      	strh	r3, [r4, #12]
 801acb6:	e7e3      	b.n	801ac80 <__smakebuf_r+0xc>
 801acb8:	89a3      	ldrh	r3, [r4, #12]
 801acba:	6020      	str	r0, [r4, #0]
 801acbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801acc0:	81a3      	strh	r3, [r4, #12]
 801acc2:	9b00      	ldr	r3, [sp, #0]
 801acc4:	6163      	str	r3, [r4, #20]
 801acc6:	9b01      	ldr	r3, [sp, #4]
 801acc8:	6120      	str	r0, [r4, #16]
 801acca:	b15b      	cbz	r3, 801ace4 <__smakebuf_r+0x70>
 801accc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801acd0:	4630      	mov	r0, r6
 801acd2:	f000 f81d 	bl	801ad10 <_isatty_r>
 801acd6:	b128      	cbz	r0, 801ace4 <__smakebuf_r+0x70>
 801acd8:	89a3      	ldrh	r3, [r4, #12]
 801acda:	f023 0303 	bic.w	r3, r3, #3
 801acde:	f043 0301 	orr.w	r3, r3, #1
 801ace2:	81a3      	strh	r3, [r4, #12]
 801ace4:	89a3      	ldrh	r3, [r4, #12]
 801ace6:	431d      	orrs	r5, r3
 801ace8:	81a5      	strh	r5, [r4, #12]
 801acea:	e7cf      	b.n	801ac8c <__smakebuf_r+0x18>

0801acec <_fstat_r>:
 801acec:	b538      	push	{r3, r4, r5, lr}
 801acee:	4d07      	ldr	r5, [pc, #28]	; (801ad0c <_fstat_r+0x20>)
 801acf0:	2300      	movs	r3, #0
 801acf2:	4604      	mov	r4, r0
 801acf4:	4608      	mov	r0, r1
 801acf6:	4611      	mov	r1, r2
 801acf8:	602b      	str	r3, [r5, #0]
 801acfa:	f7e7 f872 	bl	8001de2 <_fstat>
 801acfe:	1c43      	adds	r3, r0, #1
 801ad00:	d102      	bne.n	801ad08 <_fstat_r+0x1c>
 801ad02:	682b      	ldr	r3, [r5, #0]
 801ad04:	b103      	cbz	r3, 801ad08 <_fstat_r+0x1c>
 801ad06:	6023      	str	r3, [r4, #0]
 801ad08:	bd38      	pop	{r3, r4, r5, pc}
 801ad0a:	bf00      	nop
 801ad0c:	240152c4 	.word	0x240152c4

0801ad10 <_isatty_r>:
 801ad10:	b538      	push	{r3, r4, r5, lr}
 801ad12:	4d06      	ldr	r5, [pc, #24]	; (801ad2c <_isatty_r+0x1c>)
 801ad14:	2300      	movs	r3, #0
 801ad16:	4604      	mov	r4, r0
 801ad18:	4608      	mov	r0, r1
 801ad1a:	602b      	str	r3, [r5, #0]
 801ad1c:	f7e7 f871 	bl	8001e02 <_isatty>
 801ad20:	1c43      	adds	r3, r0, #1
 801ad22:	d102      	bne.n	801ad2a <_isatty_r+0x1a>
 801ad24:	682b      	ldr	r3, [r5, #0]
 801ad26:	b103      	cbz	r3, 801ad2a <_isatty_r+0x1a>
 801ad28:	6023      	str	r3, [r4, #0]
 801ad2a:	bd38      	pop	{r3, r4, r5, pc}
 801ad2c:	240152c4 	.word	0x240152c4

0801ad30 <_sbrk_r>:
 801ad30:	b538      	push	{r3, r4, r5, lr}
 801ad32:	4d06      	ldr	r5, [pc, #24]	; (801ad4c <_sbrk_r+0x1c>)
 801ad34:	2300      	movs	r3, #0
 801ad36:	4604      	mov	r4, r0
 801ad38:	4608      	mov	r0, r1
 801ad3a:	602b      	str	r3, [r5, #0]
 801ad3c:	f7e7 f87a 	bl	8001e34 <_sbrk>
 801ad40:	1c43      	adds	r3, r0, #1
 801ad42:	d102      	bne.n	801ad4a <_sbrk_r+0x1a>
 801ad44:	682b      	ldr	r3, [r5, #0]
 801ad46:	b103      	cbz	r3, 801ad4a <_sbrk_r+0x1a>
 801ad48:	6023      	str	r3, [r4, #0]
 801ad4a:	bd38      	pop	{r3, r4, r5, pc}
 801ad4c:	240152c4 	.word	0x240152c4

0801ad50 <abort>:
 801ad50:	b508      	push	{r3, lr}
 801ad52:	2006      	movs	r0, #6
 801ad54:	f000 f82c 	bl	801adb0 <raise>
 801ad58:	2001      	movs	r0, #1
 801ad5a:	f7e7 f80f 	bl	8001d7c <_exit>

0801ad5e <_raise_r>:
 801ad5e:	291f      	cmp	r1, #31
 801ad60:	b538      	push	{r3, r4, r5, lr}
 801ad62:	4604      	mov	r4, r0
 801ad64:	460d      	mov	r5, r1
 801ad66:	d904      	bls.n	801ad72 <_raise_r+0x14>
 801ad68:	2316      	movs	r3, #22
 801ad6a:	6003      	str	r3, [r0, #0]
 801ad6c:	f04f 30ff 	mov.w	r0, #4294967295
 801ad70:	bd38      	pop	{r3, r4, r5, pc}
 801ad72:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801ad74:	b112      	cbz	r2, 801ad7c <_raise_r+0x1e>
 801ad76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ad7a:	b94b      	cbnz	r3, 801ad90 <_raise_r+0x32>
 801ad7c:	4620      	mov	r0, r4
 801ad7e:	f000 f831 	bl	801ade4 <_getpid_r>
 801ad82:	462a      	mov	r2, r5
 801ad84:	4601      	mov	r1, r0
 801ad86:	4620      	mov	r0, r4
 801ad88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ad8c:	f000 b818 	b.w	801adc0 <_kill_r>
 801ad90:	2b01      	cmp	r3, #1
 801ad92:	d00a      	beq.n	801adaa <_raise_r+0x4c>
 801ad94:	1c59      	adds	r1, r3, #1
 801ad96:	d103      	bne.n	801ada0 <_raise_r+0x42>
 801ad98:	2316      	movs	r3, #22
 801ad9a:	6003      	str	r3, [r0, #0]
 801ad9c:	2001      	movs	r0, #1
 801ad9e:	e7e7      	b.n	801ad70 <_raise_r+0x12>
 801ada0:	2400      	movs	r4, #0
 801ada2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ada6:	4628      	mov	r0, r5
 801ada8:	4798      	blx	r3
 801adaa:	2000      	movs	r0, #0
 801adac:	e7e0      	b.n	801ad70 <_raise_r+0x12>
	...

0801adb0 <raise>:
 801adb0:	4b02      	ldr	r3, [pc, #8]	; (801adbc <raise+0xc>)
 801adb2:	4601      	mov	r1, r0
 801adb4:	6818      	ldr	r0, [r3, #0]
 801adb6:	f7ff bfd2 	b.w	801ad5e <_raise_r>
 801adba:	bf00      	nop
 801adbc:	2400008c 	.word	0x2400008c

0801adc0 <_kill_r>:
 801adc0:	b538      	push	{r3, r4, r5, lr}
 801adc2:	4d07      	ldr	r5, [pc, #28]	; (801ade0 <_kill_r+0x20>)
 801adc4:	2300      	movs	r3, #0
 801adc6:	4604      	mov	r4, r0
 801adc8:	4608      	mov	r0, r1
 801adca:	4611      	mov	r1, r2
 801adcc:	602b      	str	r3, [r5, #0]
 801adce:	f7e6 ffc3 	bl	8001d58 <_kill>
 801add2:	1c43      	adds	r3, r0, #1
 801add4:	d102      	bne.n	801addc <_kill_r+0x1c>
 801add6:	682b      	ldr	r3, [r5, #0]
 801add8:	b103      	cbz	r3, 801addc <_kill_r+0x1c>
 801adda:	6023      	str	r3, [r4, #0]
 801addc:	bd38      	pop	{r3, r4, r5, pc}
 801adde:	bf00      	nop
 801ade0:	240152c4 	.word	0x240152c4

0801ade4 <_getpid_r>:
 801ade4:	f7e6 bfb0 	b.w	8001d48 <_getpid>

0801ade8 <_init>:
 801ade8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adea:	bf00      	nop
 801adec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801adee:	bc08      	pop	{r3}
 801adf0:	469e      	mov	lr, r3
 801adf2:	4770      	bx	lr

0801adf4 <_fini>:
 801adf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adf6:	bf00      	nop
 801adf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801adfa:	bc08      	pop	{r3}
 801adfc:	469e      	mov	lr, r3
 801adfe:	4770      	bx	lr
